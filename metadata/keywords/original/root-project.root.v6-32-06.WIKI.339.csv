id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://root.cern/root/html532/TCint.html:14013,Availability,error,error,14013,"t; virtual const char*MethodInfo_TypeName(MethodInfo_t* minfo) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual voidPrintIntro(); virtual Long_tProcessLine(const char* line, TInterpreter::EErrorCode* error = 0); Long_tProcessLineAsynch(const char* line, TInterpreter::EErrorCode* error = 0); virtual Long_tProcessLineSynch(const char* line, TInterpreter::EErrorCode* error = 0); virtual Int_tTObject::Read(const char* name); virtual voidRecursiveRemove(TObject* obj); virtual Int_tReloadAllSharedLibraryMaps(); virtual Int_tRescanLibraryMap(); virtual voidReset(); virtual voidResetAll(); voidTObject::ResetBit(UInt_t f); virtual voidResetGlobals(); virtual voidResetGlobalVar(void* obj); virtual voidRewindDictionary(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSaveContext(); virtual voidSaveGlobalsContext(); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSetAlloclockfunc(void (*)()) const; virtual voidSetAllocunlockfunc(void (*)()) const; voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual intSetClassAutoloading(int) const; virtual voidSetClassInfo(TClass* cl, Bool_t reload = kFALSE); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetErrmsgcallback(void* p) c",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:20826,Availability,error,error,20826,"nterpreter interface. void ClearFileBusy(); Reset CINT internal state in case a previous action was not correctly; terminated by G__init_cint() and G__dlmod(). void ClearStack(); Delete existing temporary values. Int_t InitializeDictionaries(); Initialize all registered dictionaries. Normally this is already done; by G__init_cint() and G__dlmod(). void EnableAutoLoading(); Enable the automatic loading of shared libraries when a class; is used that is stored in a not yet loaded library. Uses the; information stored in the class/library map (typically; $ROOTSYS/etc/system.rootmap). void EndOfLineAction(); It calls a ""fantom"" method to synchronize user keyboard input; and ROOT prompt line. Bool_t IsLoaded(const char* filename) const; Return true if the file has already been loaded by cint. Int_t Load(const char* filenam, Bool_t system = kFALSE); Load a library file in CINT's memory.; if 'system' is true, the library is never unloaded. void LoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0); Load a macro file in CINT's memory. Long_t ProcessLine(const char* line, TInterpreter::EErrorCode* error = 0); Let CINT process a command line.; If the command is executed and the result of G__process_cmd is 0,; the return value is the int value corresponding to the result of the command; (float and double return values will be truncated). Long_t ProcessLineAsynch(const char* line, TInterpreter::EErrorCode* error = 0); Let CINT process a command line asynch. Long_t ProcessLineSynch(const char* line, TInterpreter::EErrorCode* error = 0); Let CINT process a command line synchronously, i.e we are waiting; it will be finished. Long_t Calc(const char* line, TInterpreter::EErrorCode* error = 0); Directly execute an executable statement (e.g. ""func()"", ""3+5"", etc.; however not declarations, like ""Int_t x;""). void PrintIntro(); Print CINT introduction and help message. void SetGetline(const char *(*)(const char* prompt) getlineFunc, void (*)(const char* line) histaddFunc); ",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:20937,Availability,error,error,20937,"tly; terminated by G__init_cint() and G__dlmod(). void ClearStack(); Delete existing temporary values. Int_t InitializeDictionaries(); Initialize all registered dictionaries. Normally this is already done; by G__init_cint() and G__dlmod(). void EnableAutoLoading(); Enable the automatic loading of shared libraries when a class; is used that is stored in a not yet loaded library. Uses the; information stored in the class/library map (typically; $ROOTSYS/etc/system.rootmap). void EndOfLineAction(); It calls a ""fantom"" method to synchronize user keyboard input; and ROOT prompt line. Bool_t IsLoaded(const char* filename) const; Return true if the file has already been loaded by cint. Int_t Load(const char* filenam, Bool_t system = kFALSE); Load a library file in CINT's memory.; if 'system' is true, the library is never unloaded. void LoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0); Load a macro file in CINT's memory. Long_t ProcessLine(const char* line, TInterpreter::EErrorCode* error = 0); Let CINT process a command line.; If the command is executed and the result of G__process_cmd is 0,; the return value is the int value corresponding to the result of the command; (float and double return values will be truncated). Long_t ProcessLineAsynch(const char* line, TInterpreter::EErrorCode* error = 0); Let CINT process a command line asynch. Long_t ProcessLineSynch(const char* line, TInterpreter::EErrorCode* error = 0); Let CINT process a command line synchronously, i.e we are waiting; it will be finished. Long_t Calc(const char* line, TInterpreter::EErrorCode* error = 0); Directly execute an executable statement (e.g. ""func()"", ""3+5"", etc.; however not declarations, like ""Int_t x;""). void PrintIntro(); Print CINT introduction and help message. void SetGetline(const char *(*)(const char* prompt) getlineFunc, void (*)(const char* line) histaddFunc); Set a getline function to call when input is needed. void RecursiveRemove(TObject* obj); Delete object from C",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:21249,Availability,error,error,21249,"es when a class; is used that is stored in a not yet loaded library. Uses the; information stored in the class/library map (typically; $ROOTSYS/etc/system.rootmap). void EndOfLineAction(); It calls a ""fantom"" method to synchronize user keyboard input; and ROOT prompt line. Bool_t IsLoaded(const char* filename) const; Return true if the file has already been loaded by cint. Int_t Load(const char* filenam, Bool_t system = kFALSE); Load a library file in CINT's memory.; if 'system' is true, the library is never unloaded. void LoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0); Load a macro file in CINT's memory. Long_t ProcessLine(const char* line, TInterpreter::EErrorCode* error = 0); Let CINT process a command line.; If the command is executed and the result of G__process_cmd is 0,; the return value is the int value corresponding to the result of the command; (float and double return values will be truncated). Long_t ProcessLineAsynch(const char* line, TInterpreter::EErrorCode* error = 0); Let CINT process a command line asynch. Long_t ProcessLineSynch(const char* line, TInterpreter::EErrorCode* error = 0); Let CINT process a command line synchronously, i.e we are waiting; it will be finished. Long_t Calc(const char* line, TInterpreter::EErrorCode* error = 0); Directly execute an executable statement (e.g. ""func()"", ""3+5"", etc.; however not declarations, like ""Int_t x;""). void PrintIntro(); Print CINT introduction and help message. void SetGetline(const char *(*)(const char* prompt) getlineFunc, void (*)(const char* line) histaddFunc); Set a getline function to call when input is needed. void RecursiveRemove(TObject* obj); Delete object from CINT symbol table so it can not be used anymore.; CINT objects are always on the heap. void Reset(); Reset the CINT state to the state saved by the last call to; TCint::SaveContext(). void ResetAll(); Reset the CINT state to its initial state. void ResetGlobals(); Reset the CINT global object state to the state s",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:21369,Availability,error,error,21369,"pically; $ROOTSYS/etc/system.rootmap). void EndOfLineAction(); It calls a ""fantom"" method to synchronize user keyboard input; and ROOT prompt line. Bool_t IsLoaded(const char* filename) const; Return true if the file has already been loaded by cint. Int_t Load(const char* filenam, Bool_t system = kFALSE); Load a library file in CINT's memory.; if 'system' is true, the library is never unloaded. void LoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0); Load a macro file in CINT's memory. Long_t ProcessLine(const char* line, TInterpreter::EErrorCode* error = 0); Let CINT process a command line.; If the command is executed and the result of G__process_cmd is 0,; the return value is the int value corresponding to the result of the command; (float and double return values will be truncated). Long_t ProcessLineAsynch(const char* line, TInterpreter::EErrorCode* error = 0); Let CINT process a command line asynch. Long_t ProcessLineSynch(const char* line, TInterpreter::EErrorCode* error = 0); Let CINT process a command line synchronously, i.e we are waiting; it will be finished. Long_t Calc(const char* line, TInterpreter::EErrorCode* error = 0); Directly execute an executable statement (e.g. ""func()"", ""3+5"", etc.; however not declarations, like ""Int_t x;""). void PrintIntro(); Print CINT introduction and help message. void SetGetline(const char *(*)(const char* prompt) getlineFunc, void (*)(const char* line) histaddFunc); Set a getline function to call when input is needed. void RecursiveRemove(TObject* obj); Delete object from CINT symbol table so it can not be used anymore.; CINT objects are always on the heap. void Reset(); Reset the CINT state to the state saved by the last call to; TCint::SaveContext(). void ResetAll(); Reset the CINT state to its initial state. void ResetGlobals(); Reset the CINT global object state to the state saved by the last; call to TCint::SaveGlobalsContext(). void ResetGlobalVar(void* obj); Reset the CINT global object state to ",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:21525,Availability,error,error,21525,"aded(const char* filename) const; Return true if the file has already been loaded by cint. Int_t Load(const char* filenam, Bool_t system = kFALSE); Load a library file in CINT's memory.; if 'system' is true, the library is never unloaded. void LoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0); Load a macro file in CINT's memory. Long_t ProcessLine(const char* line, TInterpreter::EErrorCode* error = 0); Let CINT process a command line.; If the command is executed and the result of G__process_cmd is 0,; the return value is the int value corresponding to the result of the command; (float and double return values will be truncated). Long_t ProcessLineAsynch(const char* line, TInterpreter::EErrorCode* error = 0); Let CINT process a command line asynch. Long_t ProcessLineSynch(const char* line, TInterpreter::EErrorCode* error = 0); Let CINT process a command line synchronously, i.e we are waiting; it will be finished. Long_t Calc(const char* line, TInterpreter::EErrorCode* error = 0); Directly execute an executable statement (e.g. ""func()"", ""3+5"", etc.; however not declarations, like ""Int_t x;""). void PrintIntro(); Print CINT introduction and help message. void SetGetline(const char *(*)(const char* prompt) getlineFunc, void (*)(const char* line) histaddFunc); Set a getline function to call when input is needed. void RecursiveRemove(TObject* obj); Delete object from CINT symbol table so it can not be used anymore.; CINT objects are always on the heap. void Reset(); Reset the CINT state to the state saved by the last call to; TCint::SaveContext(). void ResetAll(); Reset the CINT state to its initial state. void ResetGlobals(); Reset the CINT global object state to the state saved by the last; call to TCint::SaveGlobalsContext(). void ResetGlobalVar(void* obj); Reset the CINT global object state to the state saved by the last; call to TCint::SaveGlobalsContext(). void RewindDictionary(); Rewind CINT dictionary to the point where it was before executing; th",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:26104,Availability,error,error,26104," will be searched. void * GetInterfaceMethod(TClass* cl, const char* method, const char* params); Return pointer to CINT interface function for a method of a class with; parameters params (params is a string of actual arguments, not formal; ones). If the class is 0 the global function list will be searched. void * GetInterfaceMethodWithPrototype(TClass* cl, const char* method, const char* proto); Return pointer to CINT interface function for a method of a class with; a certain prototype, i.e. ""char*,int,float"". If the class is 0 the global; function list will be searched. const char * GetInterpreterTypeName(const char* name, Bool_t full = kFALSE); The 'name' is known to the interpreter, this function returns; the internal version of this name (usually just resolving typedefs); This is used in particular to synchronize between the name used; by rootcint and by the run-time enviroment (TClass); Return 0 if the name is not known. void Execute(const char* function, const char* params, int* error = 0); Execute a global function with arguments params. void Execute(TObject* obj, TClass* cl, const char* method, const char* params, int* error = 0); Execute a method from class cl with arguments params. void Execute(TObject* obj, TClass* cl, TMethod* method, TObjArray* params, int* error = 0); Execute a method from class cl with the arguments in array params; (params[0] ... params[n] = array of TObjString parameters). Long_t ExecuteMacro(const char* filename, TInterpreter::EErrorCode* error = 0); Execute a CINT macro. const char * GetTopLevelMacroName() const; Return the file name of the current un-included interpreted file.; See the documentation for GetCurrentMacroName(). const char * GetCurrentMacroName() const; Return the file name of the currently interpreted file,; included or not. Example to illustrate the difference between; GetCurrentMacroName() and GetTopLevelMacroName():. ; inclfile.h. #include <iostream>; void inclfunc() {; std::cout << ""In inclfile.h"" << std::endl;",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:26249,Availability,error,error,26249,"ion for a method of a class with; parameters params (params is a string of actual arguments, not formal; ones). If the class is 0 the global function list will be searched. void * GetInterfaceMethodWithPrototype(TClass* cl, const char* method, const char* proto); Return pointer to CINT interface function for a method of a class with; a certain prototype, i.e. ""char*,int,float"". If the class is 0 the global; function list will be searched. const char * GetInterpreterTypeName(const char* name, Bool_t full = kFALSE); The 'name' is known to the interpreter, this function returns; the internal version of this name (usually just resolving typedefs); This is used in particular to synchronize between the name used; by rootcint and by the run-time enviroment (TClass); Return 0 if the name is not known. void Execute(const char* function, const char* params, int* error = 0); Execute a global function with arguments params. void Execute(TObject* obj, TClass* cl, const char* method, const char* params, int* error = 0); Execute a method from class cl with arguments params. void Execute(TObject* obj, TClass* cl, TMethod* method, TObjArray* params, int* error = 0); Execute a method from class cl with the arguments in array params; (params[0] ... params[n] = array of TObjString parameters). Long_t ExecuteMacro(const char* filename, TInterpreter::EErrorCode* error = 0); Execute a CINT macro. const char * GetTopLevelMacroName() const; Return the file name of the current un-included interpreted file.; See the documentation for GetCurrentMacroName(). const char * GetCurrentMacroName() const; Return the file name of the currently interpreted file,; included or not. Example to illustrate the difference between; GetCurrentMacroName() and GetTopLevelMacroName():. ; inclfile.h. #include <iostream>; void inclfunc() {; std::cout << ""In inclfile.h"" << std::endl;; std::cout << "" TCint::GetCurrentMacroName() returns "" <<; TCint::GetCurrentMacroName() << std::endl;; std::cout << "" TCint::GetTopLev",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:26395,Availability,error,error,26395,"e searched. void * GetInterfaceMethodWithPrototype(TClass* cl, const char* method, const char* proto); Return pointer to CINT interface function for a method of a class with; a certain prototype, i.e. ""char*,int,float"". If the class is 0 the global; function list will be searched. const char * GetInterpreterTypeName(const char* name, Bool_t full = kFALSE); The 'name' is known to the interpreter, this function returns; the internal version of this name (usually just resolving typedefs); This is used in particular to synchronize between the name used; by rootcint and by the run-time enviroment (TClass); Return 0 if the name is not known. void Execute(const char* function, const char* params, int* error = 0); Execute a global function with arguments params. void Execute(TObject* obj, TClass* cl, const char* method, const char* params, int* error = 0); Execute a method from class cl with arguments params. void Execute(TObject* obj, TClass* cl, TMethod* method, TObjArray* params, int* error = 0); Execute a method from class cl with the arguments in array params; (params[0] ... params[n] = array of TObjString parameters). Long_t ExecuteMacro(const char* filename, TInterpreter::EErrorCode* error = 0); Execute a CINT macro. const char * GetTopLevelMacroName() const; Return the file name of the current un-included interpreted file.; See the documentation for GetCurrentMacroName(). const char * GetCurrentMacroName() const; Return the file name of the currently interpreted file,; included or not. Example to illustrate the difference between; GetCurrentMacroName() and GetTopLevelMacroName():. ; inclfile.h. #include <iostream>; void inclfunc() {; std::cout << ""In inclfile.h"" << std::endl;; std::cout << "" TCint::GetCurrentMacroName() returns "" <<; TCint::GetCurrentMacroName() << std::endl;; std::cout << "" TCint::GetTopLevelMacroName() returns "" <<; TCint::GetTopLevelMacroName() << std::endl;; }. mymacro.C. #include <iostream>; #include ""inclfile.h""; void mymacro() {; std::cout <<",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:26602,Availability,error,error,26602," prototype, i.e. ""char*,int,float"". If the class is 0 the global; function list will be searched. const char * GetInterpreterTypeName(const char* name, Bool_t full = kFALSE); The 'name' is known to the interpreter, this function returns; the internal version of this name (usually just resolving typedefs); This is used in particular to synchronize between the name used; by rootcint and by the run-time enviroment (TClass); Return 0 if the name is not known. void Execute(const char* function, const char* params, int* error = 0); Execute a global function with arguments params. void Execute(TObject* obj, TClass* cl, const char* method, const char* params, int* error = 0); Execute a method from class cl with arguments params. void Execute(TObject* obj, TClass* cl, TMethod* method, TObjArray* params, int* error = 0); Execute a method from class cl with the arguments in array params; (params[0] ... params[n] = array of TObjString parameters). Long_t ExecuteMacro(const char* filename, TInterpreter::EErrorCode* error = 0); Execute a CINT macro. const char * GetTopLevelMacroName() const; Return the file name of the current un-included interpreted file.; See the documentation for GetCurrentMacroName(). const char * GetCurrentMacroName() const; Return the file name of the currently interpreted file,; included or not. Example to illustrate the difference between; GetCurrentMacroName() and GetTopLevelMacroName():. ; inclfile.h. #include <iostream>; void inclfunc() {; std::cout << ""In inclfile.h"" << std::endl;; std::cout << "" TCint::GetCurrentMacroName() returns "" <<; TCint::GetCurrentMacroName() << std::endl;; std::cout << "" TCint::GetTopLevelMacroName() returns "" <<; TCint::GetTopLevelMacroName() << std::endl;; }. mymacro.C. #include <iostream>; #include ""inclfile.h""; void mymacro() {; std::cout << ""In mymacro.C"" << std::endl;; std::cout << "" TCint::GetCurrentMacroName() returns "" <<; TCint::GetCurrentMacroName() << std::endl;; std::cout << "" TCint::GetTopLevelMacroName() return",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:28418,Availability,error,error,28418,";; std::cout << "" TCint::GetCurrentMacroName() returns "" <<; TCint::GetCurrentMacroName() << std::endl;; std::cout << "" TCint::GetTopLevelMacroName() returns "" <<; TCint::GetTopLevelMacroName() << std::endl;; std::cout << "" Now calling inclfunc..."" << std::endl;; inclfunc();; }. Running mymacro.C will print:. root [0] .x mymacro.C; In mymacro.C; TCint::GetCurrentMacroName() returns ./mymacro.C; TCint::GetTopLevelMacroName() returns ./mymacro.C; Now calling inclfunc...; In inclfile.h; TCint::GetCurrentMacroName() returns inclfile.h; TCint::GetTopLevelMacroName() returns ./mymacro.C. const char * TypeName(const char* typeDesc); Return the absolute type of typeDesc.; E.g.: typeDesc = ""class TNamed**"", returns ""TNamed"".; You need to use the result immediately before it is being overwritten. Int_t LoadLibraryMap(const char* rootmapfile = 0); Load map between class and library. If rootmapfile is specified a; specific rootmap file can be added (typically used by ACLiC).; In case of error -1 is returned, 0 otherwise.; Cint uses this information to automatically load the shared library; for a class (autoload mechanism).; See also the AutoLoadCallback() method below. Int_t RescanLibraryMap(); Scan again along the dynamic path for library maps. Entries for the loaded; shared libraries are unloaded first. This can be useful after reseting; the dynamic path through TSystem::SetDynamicPath(); In case of error -1 is returned, 0 otherwise. Int_t ReloadAllSharedLibraryMaps(); Reload the library map entries coming from all the loaded shared libraries,; after first unloading the current ones.; In case of error -1 is returned, 0 otherwise. Int_t UnloadAllSharedLibraryMaps(); Unload the library map entries coming from all the loaded shared libraries.; Returns 0 if succesful. Int_t UnloadLibraryMap(const char* library); Unload library map entries coming from the specified library.; Returns -1 in case no entries for the specified library were found,; 0 otherwise. Int_t AutoLoad(const char*",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:28841,Availability,error,error,28841,"urns ./mymacro.C; TCint::GetTopLevelMacroName() returns ./mymacro.C; Now calling inclfunc...; In inclfile.h; TCint::GetCurrentMacroName() returns inclfile.h; TCint::GetTopLevelMacroName() returns ./mymacro.C. const char * TypeName(const char* typeDesc); Return the absolute type of typeDesc.; E.g.: typeDesc = ""class TNamed**"", returns ""TNamed"".; You need to use the result immediately before it is being overwritten. Int_t LoadLibraryMap(const char* rootmapfile = 0); Load map between class and library. If rootmapfile is specified a; specific rootmap file can be added (typically used by ACLiC).; In case of error -1 is returned, 0 otherwise.; Cint uses this information to automatically load the shared library; for a class (autoload mechanism).; See also the AutoLoadCallback() method below. Int_t RescanLibraryMap(); Scan again along the dynamic path for library maps. Entries for the loaded; shared libraries are unloaded first. This can be useful after reseting; the dynamic path through TSystem::SetDynamicPath(); In case of error -1 is returned, 0 otherwise. Int_t ReloadAllSharedLibraryMaps(); Reload the library map entries coming from all the loaded shared libraries,; after first unloading the current ones.; In case of error -1 is returned, 0 otherwise. Int_t UnloadAllSharedLibraryMaps(); Unload the library map entries coming from all the loaded shared libraries.; Returns 0 if succesful. Int_t UnloadLibraryMap(const char* library); Unload library map entries coming from the specified library.; Returns -1 in case no entries for the specified library were found,; 0 otherwise. Int_t AutoLoad(const char* classname); Load library containing the specified class. Returns 0 in case of error; and 1 in case if success. Int_t AutoLoadCallback(const char* cls, const char* lib); Load library containing specified class. Returns 0 in case of error; and 1 in case if success. void * FindSpecialObject(const char* name, Cint::G__ClassInfo* type, void** prevObj, void** assocPtr); Static funct",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:29041,Availability,error,error,29041,"typeDesc); Return the absolute type of typeDesc.; E.g.: typeDesc = ""class TNamed**"", returns ""TNamed"".; You need to use the result immediately before it is being overwritten. Int_t LoadLibraryMap(const char* rootmapfile = 0); Load map between class and library. If rootmapfile is specified a; specific rootmap file can be added (typically used by ACLiC).; In case of error -1 is returned, 0 otherwise.; Cint uses this information to automatically load the shared library; for a class (autoload mechanism).; See also the AutoLoadCallback() method below. Int_t RescanLibraryMap(); Scan again along the dynamic path for library maps. Entries for the loaded; shared libraries are unloaded first. This can be useful after reseting; the dynamic path through TSystem::SetDynamicPath(); In case of error -1 is returned, 0 otherwise. Int_t ReloadAllSharedLibraryMaps(); Reload the library map entries coming from all the loaded shared libraries,; after first unloading the current ones.; In case of error -1 is returned, 0 otherwise. Int_t UnloadAllSharedLibraryMaps(); Unload the library map entries coming from all the loaded shared libraries.; Returns 0 if succesful. Int_t UnloadLibraryMap(const char* library); Unload library map entries coming from the specified library.; Returns -1 in case no entries for the specified library were found,; 0 otherwise. Int_t AutoLoad(const char* classname); Load library containing the specified class. Returns 0 in case of error; and 1 in case if success. Int_t AutoLoadCallback(const char* cls, const char* lib); Load library containing specified class. Returns 0 in case of error; and 1 in case if success. void * FindSpecialObject(const char* name, Cint::G__ClassInfo* type, void** prevObj, void** assocPtr); Static function called by CINT when it finds an un-indentified object.; This function tries to find the UO in the ROOT files, directories, etc.; This functions has been registered by the TCint ctor. void UpdateClassInfo(char* name, Long_t tagnum); Static ",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:29508,Availability,error,error,29508," library; for a class (autoload mechanism).; See also the AutoLoadCallback() method below. Int_t RescanLibraryMap(); Scan again along the dynamic path for library maps. Entries for the loaded; shared libraries are unloaded first. This can be useful after reseting; the dynamic path through TSystem::SetDynamicPath(); In case of error -1 is returned, 0 otherwise. Int_t ReloadAllSharedLibraryMaps(); Reload the library map entries coming from all the loaded shared libraries,; after first unloading the current ones.; In case of error -1 is returned, 0 otherwise. Int_t UnloadAllSharedLibraryMaps(); Unload the library map entries coming from all the loaded shared libraries.; Returns 0 if succesful. Int_t UnloadLibraryMap(const char* library); Unload library map entries coming from the specified library.; Returns -1 in case no entries for the specified library were found,; 0 otherwise. Int_t AutoLoad(const char* classname); Load library containing the specified class. Returns 0 in case of error; and 1 in case if success. Int_t AutoLoadCallback(const char* cls, const char* lib); Load library containing specified class. Returns 0 in case of error; and 1 in case if success. void * FindSpecialObject(const char* name, Cint::G__ClassInfo* type, void** prevObj, void** assocPtr); Static function called by CINT when it finds an un-indentified object.; This function tries to find the UO in the ROOT files, directories, etc.; This functions has been registered by the TCint ctor. void UpdateClassInfo(char* name, Long_t tagnum); Static function called by CINT when it changes the tagnum for; a class (e.g. after re-executing the setup function). In such; cases we have to update the tagnum in the G__ClassInfo used by; the TClass for class ""item"". void UpdateClassInfoWork(const char* name, Long_t tagnum); This does the actual work of UpdateClassInfo. void UpdateAllCanvases(); Update all canvases at end the terminal input command. const char* GetSharedLibs(); Return the list of shared librarie",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:29661,Availability,error,error,29661,"r library maps. Entries for the loaded; shared libraries are unloaded first. This can be useful after reseting; the dynamic path through TSystem::SetDynamicPath(); In case of error -1 is returned, 0 otherwise. Int_t ReloadAllSharedLibraryMaps(); Reload the library map entries coming from all the loaded shared libraries,; after first unloading the current ones.; In case of error -1 is returned, 0 otherwise. Int_t UnloadAllSharedLibraryMaps(); Unload the library map entries coming from all the loaded shared libraries.; Returns 0 if succesful. Int_t UnloadLibraryMap(const char* library); Unload library map entries coming from the specified library.; Returns -1 in case no entries for the specified library were found,; 0 otherwise. Int_t AutoLoad(const char* classname); Load library containing the specified class. Returns 0 in case of error; and 1 in case if success. Int_t AutoLoadCallback(const char* cls, const char* lib); Load library containing specified class. Returns 0 in case of error; and 1 in case if success. void * FindSpecialObject(const char* name, Cint::G__ClassInfo* type, void** prevObj, void** assocPtr); Static function called by CINT when it finds an un-indentified object.; This function tries to find the UO in the ROOT files, directories, etc.; This functions has been registered by the TCint ctor. void UpdateClassInfo(char* name, Long_t tagnum); Static function called by CINT when it changes the tagnum for; a class (e.g. after re-executing the setup function). In such; cases we have to update the tagnum in the G__ClassInfo used by; the TClass for class ""item"". void UpdateClassInfoWork(const char* name, Long_t tagnum); This does the actual work of UpdateClassInfo. void UpdateAllCanvases(); Update all canvases at end the terminal input command. const char* GetSharedLibs(); Return the list of shared libraries known to CINT. const char * GetClassSharedLibs(const char* cls); Get the list of shared libraries containing the code for class cls.; The first library",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:31105,Availability,error,error,31105,"ing the setup function). In such; cases we have to update the tagnum in the G__ClassInfo used by; the TClass for class ""item"". void UpdateClassInfoWork(const char* name, Long_t tagnum); This does the actual work of UpdateClassInfo. void UpdateAllCanvases(); Update all canvases at end the terminal input command. const char* GetSharedLibs(); Return the list of shared libraries known to CINT. const char * GetClassSharedLibs(const char* cls); Get the list of shared libraries containing the code for class cls.; The first library in the list is the one containing the class, the; others are the libraries the first one depends on. Returns 0; in case the library is not found. const char * GetSharedLibDeps(const char* lib); Get the list a libraries on which the specified lib depends. The; returned string contains as first element the lib itself.; Returns 0 in case the lib does not exist or does not have; any dependencies. Bool_t IsErrorMessagesEnabled() const; If error messages are disabled, the interpreter should suppress its; failures and warning messages from stdout. Bool_t SetErrorMessages(Bool_t enable = kTRUE); If error messages are disabled, the interpreter should suppress its; failures and warning messages from stdout. Return the previous state. void AddIncludePath(const char* path); Add the given path to the list of directories in which the interpreter; looks for include files. Only one path item can be specified at a; time, i.e. ""path1:path2"" is not supported. const char * GetIncludePath(); Refresh the list of include paths known to the interpreter and return it; with -I prepended. const char * GetSTLIncludePath() const; Return the directory containing CINT's stl cintdlls. int DisplayClass(FILE* fout, char* name, int base, int start) const; Interface to CINT function. int DisplayIncludePath(FILE* fout) const; Interface to CINT function. void * FindSym(const char* entry) const; Interface to CINT function. void GenericError(const char* error) const; Interface to CINT f",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:31171,Availability,failure,failures,31171,"ing the setup function). In such; cases we have to update the tagnum in the G__ClassInfo used by; the TClass for class ""item"". void UpdateClassInfoWork(const char* name, Long_t tagnum); This does the actual work of UpdateClassInfo. void UpdateAllCanvases(); Update all canvases at end the terminal input command. const char* GetSharedLibs(); Return the list of shared libraries known to CINT. const char * GetClassSharedLibs(const char* cls); Get the list of shared libraries containing the code for class cls.; The first library in the list is the one containing the class, the; others are the libraries the first one depends on. Returns 0; in case the library is not found. const char * GetSharedLibDeps(const char* lib); Get the list a libraries on which the specified lib depends. The; returned string contains as first element the lib itself.; Returns 0 in case the lib does not exist or does not have; any dependencies. Bool_t IsErrorMessagesEnabled() const; If error messages are disabled, the interpreter should suppress its; failures and warning messages from stdout. Bool_t SetErrorMessages(Bool_t enable = kTRUE); If error messages are disabled, the interpreter should suppress its; failures and warning messages from stdout. Return the previous state. void AddIncludePath(const char* path); Add the given path to the list of directories in which the interpreter; looks for include files. Only one path item can be specified at a; time, i.e. ""path1:path2"" is not supported. const char * GetIncludePath(); Refresh the list of include paths known to the interpreter and return it; with -I prepended. const char * GetSTLIncludePath() const; Return the directory containing CINT's stl cintdlls. int DisplayClass(FILE* fout, char* name, int base, int start) const; Interface to CINT function. int DisplayIncludePath(FILE* fout) const; Interface to CINT function. void * FindSym(const char* entry) const; Interface to CINT function. void GenericError(const char* error) const; Interface to CINT f",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:31265,Availability,error,error,31265,"t char* name, Long_t tagnum); This does the actual work of UpdateClassInfo. void UpdateAllCanvases(); Update all canvases at end the terminal input command. const char* GetSharedLibs(); Return the list of shared libraries known to CINT. const char * GetClassSharedLibs(const char* cls); Get the list of shared libraries containing the code for class cls.; The first library in the list is the one containing the class, the; others are the libraries the first one depends on. Returns 0; in case the library is not found. const char * GetSharedLibDeps(const char* lib); Get the list a libraries on which the specified lib depends. The; returned string contains as first element the lib itself.; Returns 0 in case the lib does not exist or does not have; any dependencies. Bool_t IsErrorMessagesEnabled() const; If error messages are disabled, the interpreter should suppress its; failures and warning messages from stdout. Bool_t SetErrorMessages(Bool_t enable = kTRUE); If error messages are disabled, the interpreter should suppress its; failures and warning messages from stdout. Return the previous state. void AddIncludePath(const char* path); Add the given path to the list of directories in which the interpreter; looks for include files. Only one path item can be specified at a; time, i.e. ""path1:path2"" is not supported. const char * GetIncludePath(); Refresh the list of include paths known to the interpreter and return it; with -I prepended. const char * GetSTLIncludePath() const; Return the directory containing CINT's stl cintdlls. int DisplayClass(FILE* fout, char* name, int base, int start) const; Interface to CINT function. int DisplayIncludePath(FILE* fout) const; Interface to CINT function. void * FindSym(const char* entry) const; Interface to CINT function. void GenericError(const char* error) const; Interface to CINT function. Long_t GetExecByteCode() const; Interface to CINT function. Long_t Getgvp() const; Interface to CINT function. const char * Getp2f2funcname(void* ",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:31331,Availability,failure,failures,31331,"t char* name, Long_t tagnum); This does the actual work of UpdateClassInfo. void UpdateAllCanvases(); Update all canvases at end the terminal input command. const char* GetSharedLibs(); Return the list of shared libraries known to CINT. const char * GetClassSharedLibs(const char* cls); Get the list of shared libraries containing the code for class cls.; The first library in the list is the one containing the class, the; others are the libraries the first one depends on. Returns 0; in case the library is not found. const char * GetSharedLibDeps(const char* lib); Get the list a libraries on which the specified lib depends. The; returned string contains as first element the lib itself.; Returns 0 in case the lib does not exist or does not have; any dependencies. Bool_t IsErrorMessagesEnabled() const; If error messages are disabled, the interpreter should suppress its; failures and warning messages from stdout. Bool_t SetErrorMessages(Bool_t enable = kTRUE); If error messages are disabled, the interpreter should suppress its; failures and warning messages from stdout. Return the previous state. void AddIncludePath(const char* path); Add the given path to the list of directories in which the interpreter; looks for include files. Only one path item can be specified at a; time, i.e. ""path1:path2"" is not supported. const char * GetIncludePath(); Refresh the list of include paths known to the interpreter and return it; with -I prepended. const char * GetSTLIncludePath() const; Return the directory containing CINT's stl cintdlls. int DisplayClass(FILE* fout, char* name, int base, int start) const; Interface to CINT function. int DisplayIncludePath(FILE* fout) const; Interface to CINT function. void * FindSym(const char* entry) const; Interface to CINT function. void GenericError(const char* error) const; Interface to CINT function. Long_t GetExecByteCode() const; Interface to CINT function. Long_t Getgvp() const; Interface to CINT function. const char * Getp2f2funcname(void* ",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:32105,Availability,error,error,32105," messages are disabled, the interpreter should suppress its; failures and warning messages from stdout. Bool_t SetErrorMessages(Bool_t enable = kTRUE); If error messages are disabled, the interpreter should suppress its; failures and warning messages from stdout. Return the previous state. void AddIncludePath(const char* path); Add the given path to the list of directories in which the interpreter; looks for include files. Only one path item can be specified at a; time, i.e. ""path1:path2"" is not supported. const char * GetIncludePath(); Refresh the list of include paths known to the interpreter and return it; with -I prepended. const char * GetSTLIncludePath() const; Return the directory containing CINT's stl cintdlls. int DisplayClass(FILE* fout, char* name, int base, int start) const; Interface to CINT function. int DisplayIncludePath(FILE* fout) const; Interface to CINT function. void * FindSym(const char* entry) const; Interface to CINT function. void GenericError(const char* error) const; Interface to CINT function. Long_t GetExecByteCode() const; Interface to CINT function. Long_t Getgvp() const; Interface to CINT function. const char * Getp2f2funcname(void* receiver) const; Interface to CINT function. int GetSecurityError() const; Interface to CINT function. int LoadFile(const char* path) const; Interface to CINT function. void LoadText(const char* text) const; Interface to CINT function. const char * MapCppName(const char* ) const; Interface to CINT function. void SetAlloclockfunc(void (*)() ) const; Interface to CINT function. void SetAllocunlockfunc(void (*)() ) const; Interface to CINT function. int SetClassAutoloading(int ) const; Interface to CINT function. void SetErrmsgcallback(void* p) const; Interface to CINT function. void Setgvp(Long_t ) const; Interface to CINT function. void SetRTLD_NOW() const; Interface to CINT function. void SetRTLD_LAZY() const; Interface to CINT function. void SetTempLevel(int val) const; Interface to CINT function. int Unl",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:22936,Deployability,Update,UpdateListOfGlobals,22936,"ymore.; CINT objects are always on the heap. void Reset(); Reset the CINT state to the state saved by the last call to; TCint::SaveContext(). void ResetAll(); Reset the CINT state to its initial state. void ResetGlobals(); Reset the CINT global object state to the state saved by the last; call to TCint::SaveGlobalsContext(). void ResetGlobalVar(void* obj); Reset the CINT global object state to the state saved by the last; call to TCint::SaveGlobalsContext(). void RewindDictionary(); Rewind CINT dictionary to the point where it was before executing; the current macro. This function is typically called after SEGV or; ctlr-C after doing a longjmp back to the prompt. Int_t DeleteGlobal(void* obj); Delete obj from CINT symbol table so it cannot be accessed anymore.; Returns 1 in case of success and 0 in case object was not in table. void SaveContext(); Save the current CINT state. void SaveGlobalsContext(); Save the current CINT state of global objects. void UpdateListOfGlobals(); Update the list of pointers to global variables. This function; is called by TROOT::GetListOfGlobals(). void UpdateListOfGlobalFunctions(); Update the list of pointers to global functions. This function; is called by TROOT::GetListOfGlobalFunctions(). void UpdateListOfTypes(); Update the list of pointers to Datatype (typedef) definitions. This; function is called by TROOT::GetListOfTypes(). void SetClassInfo(TClass* cl, Bool_t reload = kFALSE); Set pointer to CINT's G__ClassInfo in TClass. Bool_t CheckClassInfo(const char* name, Bool_t autoload = kTRUE); Checks if a class with the specified name is defined in CINT.; Returns kFALSE is class is not defined. void CreateListOfBaseClasses(TClass* cl); Create list of pointers to base class(es) for TClass cl. void CreateListOfDataMembers(TClass* cl); Create list of pointers to data members for TClass cl. void CreateListOfMethods(TClass* cl); Create list of pointers to methods for TClass cl. void UpdateListOfMethods(TClass* cl); Update the list of point",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:22959,Deployability,Update,Update,22959,"ymore.; CINT objects are always on the heap. void Reset(); Reset the CINT state to the state saved by the last call to; TCint::SaveContext(). void ResetAll(); Reset the CINT state to its initial state. void ResetGlobals(); Reset the CINT global object state to the state saved by the last; call to TCint::SaveGlobalsContext(). void ResetGlobalVar(void* obj); Reset the CINT global object state to the state saved by the last; call to TCint::SaveGlobalsContext(). void RewindDictionary(); Rewind CINT dictionary to the point where it was before executing; the current macro. This function is typically called after SEGV or; ctlr-C after doing a longjmp back to the prompt. Int_t DeleteGlobal(void* obj); Delete obj from CINT symbol table so it cannot be accessed anymore.; Returns 1 in case of success and 0 in case object was not in table. void SaveContext(); Save the current CINT state. void SaveGlobalsContext(); Save the current CINT state of global objects. void UpdateListOfGlobals(); Update the list of pointers to global variables. This function; is called by TROOT::GetListOfGlobals(). void UpdateListOfGlobalFunctions(); Update the list of pointers to global functions. This function; is called by TROOT::GetListOfGlobalFunctions(). void UpdateListOfTypes(); Update the list of pointers to Datatype (typedef) definitions. This; function is called by TROOT::GetListOfTypes(). void SetClassInfo(TClass* cl, Bool_t reload = kFALSE); Set pointer to CINT's G__ClassInfo in TClass. Bool_t CheckClassInfo(const char* name, Bool_t autoload = kTRUE); Checks if a class with the specified name is defined in CINT.; Returns kFALSE is class is not defined. void CreateListOfBaseClasses(TClass* cl); Create list of pointers to base class(es) for TClass cl. void CreateListOfDataMembers(TClass* cl); Create list of pointers to data members for TClass cl. void CreateListOfMethods(TClass* cl); Create list of pointers to methods for TClass cl. void UpdateListOfMethods(TClass* cl); Update the list of point",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:23068,Deployability,Update,UpdateListOfGlobalFunctions,23068,"xt(). void ResetAll(); Reset the CINT state to its initial state. void ResetGlobals(); Reset the CINT global object state to the state saved by the last; call to TCint::SaveGlobalsContext(). void ResetGlobalVar(void* obj); Reset the CINT global object state to the state saved by the last; call to TCint::SaveGlobalsContext(). void RewindDictionary(); Rewind CINT dictionary to the point where it was before executing; the current macro. This function is typically called after SEGV or; ctlr-C after doing a longjmp back to the prompt. Int_t DeleteGlobal(void* obj); Delete obj from CINT symbol table so it cannot be accessed anymore.; Returns 1 in case of success and 0 in case object was not in table. void SaveContext(); Save the current CINT state. void SaveGlobalsContext(); Save the current CINT state of global objects. void UpdateListOfGlobals(); Update the list of pointers to global variables. This function; is called by TROOT::GetListOfGlobals(). void UpdateListOfGlobalFunctions(); Update the list of pointers to global functions. This function; is called by TROOT::GetListOfGlobalFunctions(). void UpdateListOfTypes(); Update the list of pointers to Datatype (typedef) definitions. This; function is called by TROOT::GetListOfTypes(). void SetClassInfo(TClass* cl, Bool_t reload = kFALSE); Set pointer to CINT's G__ClassInfo in TClass. Bool_t CheckClassInfo(const char* name, Bool_t autoload = kTRUE); Checks if a class with the specified name is defined in CINT.; Returns kFALSE is class is not defined. void CreateListOfBaseClasses(TClass* cl); Create list of pointers to base class(es) for TClass cl. void CreateListOfDataMembers(TClass* cl); Create list of pointers to data members for TClass cl. void CreateListOfMethods(TClass* cl); Create list of pointers to methods for TClass cl. void UpdateListOfMethods(TClass* cl); Update the list of pointers to method for TClass cl, if necessary. void CreateListOfMethodArgs(TFunction* m); Create list of pointers to method arguments for TM",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:23099,Deployability,Update,Update,23099,"xt(). void ResetAll(); Reset the CINT state to its initial state. void ResetGlobals(); Reset the CINT global object state to the state saved by the last; call to TCint::SaveGlobalsContext(). void ResetGlobalVar(void* obj); Reset the CINT global object state to the state saved by the last; call to TCint::SaveGlobalsContext(). void RewindDictionary(); Rewind CINT dictionary to the point where it was before executing; the current macro. This function is typically called after SEGV or; ctlr-C after doing a longjmp back to the prompt. Int_t DeleteGlobal(void* obj); Delete obj from CINT symbol table so it cannot be accessed anymore.; Returns 1 in case of success and 0 in case object was not in table. void SaveContext(); Save the current CINT state. void SaveGlobalsContext(); Save the current CINT state of global objects. void UpdateListOfGlobals(); Update the list of pointers to global variables. This function; is called by TROOT::GetListOfGlobals(). void UpdateListOfGlobalFunctions(); Update the list of pointers to global functions. This function; is called by TROOT::GetListOfGlobalFunctions(). void UpdateListOfTypes(); Update the list of pointers to Datatype (typedef) definitions. This; function is called by TROOT::GetListOfTypes(). void SetClassInfo(TClass* cl, Bool_t reload = kFALSE); Set pointer to CINT's G__ClassInfo in TClass. Bool_t CheckClassInfo(const char* name, Bool_t autoload = kTRUE); Checks if a class with the specified name is defined in CINT.; Returns kFALSE is class is not defined. void CreateListOfBaseClasses(TClass* cl); Create list of pointers to base class(es) for TClass cl. void CreateListOfDataMembers(TClass* cl); Create list of pointers to data members for TClass cl. void CreateListOfMethods(TClass* cl); Create list of pointers to methods for TClass cl. void UpdateListOfMethods(TClass* cl); Update the list of pointers to method for TClass cl, if necessary. void CreateListOfMethodArgs(TFunction* m); Create list of pointers to method arguments for TM",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:23216,Deployability,Update,UpdateListOfTypes,23216,"st; call to TCint::SaveGlobalsContext(). void ResetGlobalVar(void* obj); Reset the CINT global object state to the state saved by the last; call to TCint::SaveGlobalsContext(). void RewindDictionary(); Rewind CINT dictionary to the point where it was before executing; the current macro. This function is typically called after SEGV or; ctlr-C after doing a longjmp back to the prompt. Int_t DeleteGlobal(void* obj); Delete obj from CINT symbol table so it cannot be accessed anymore.; Returns 1 in case of success and 0 in case object was not in table. void SaveContext(); Save the current CINT state. void SaveGlobalsContext(); Save the current CINT state of global objects. void UpdateListOfGlobals(); Update the list of pointers to global variables. This function; is called by TROOT::GetListOfGlobals(). void UpdateListOfGlobalFunctions(); Update the list of pointers to global functions. This function; is called by TROOT::GetListOfGlobalFunctions(). void UpdateListOfTypes(); Update the list of pointers to Datatype (typedef) definitions. This; function is called by TROOT::GetListOfTypes(). void SetClassInfo(TClass* cl, Bool_t reload = kFALSE); Set pointer to CINT's G__ClassInfo in TClass. Bool_t CheckClassInfo(const char* name, Bool_t autoload = kTRUE); Checks if a class with the specified name is defined in CINT.; Returns kFALSE is class is not defined. void CreateListOfBaseClasses(TClass* cl); Create list of pointers to base class(es) for TClass cl. void CreateListOfDataMembers(TClass* cl); Create list of pointers to data members for TClass cl. void CreateListOfMethods(TClass* cl); Create list of pointers to methods for TClass cl. void UpdateListOfMethods(TClass* cl); Update the list of pointers to method for TClass cl, if necessary. void CreateListOfMethodArgs(TFunction* m); Create list of pointers to method arguments for TMethod m. Int_t GenerateDictionary(const char* classes, const char* includes = 0, const char* options = 0); Generate the dictionary for the C++ classes",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:23237,Deployability,Update,Update,23237,"st; call to TCint::SaveGlobalsContext(). void ResetGlobalVar(void* obj); Reset the CINT global object state to the state saved by the last; call to TCint::SaveGlobalsContext(). void RewindDictionary(); Rewind CINT dictionary to the point where it was before executing; the current macro. This function is typically called after SEGV or; ctlr-C after doing a longjmp back to the prompt. Int_t DeleteGlobal(void* obj); Delete obj from CINT symbol table so it cannot be accessed anymore.; Returns 1 in case of success and 0 in case object was not in table. void SaveContext(); Save the current CINT state. void SaveGlobalsContext(); Save the current CINT state of global objects. void UpdateListOfGlobals(); Update the list of pointers to global variables. This function; is called by TROOT::GetListOfGlobals(). void UpdateListOfGlobalFunctions(); Update the list of pointers to global functions. This function; is called by TROOT::GetListOfGlobalFunctions(). void UpdateListOfTypes(); Update the list of pointers to Datatype (typedef) definitions. This; function is called by TROOT::GetListOfTypes(). void SetClassInfo(TClass* cl, Bool_t reload = kFALSE); Set pointer to CINT's G__ClassInfo in TClass. Bool_t CheckClassInfo(const char* name, Bool_t autoload = kTRUE); Checks if a class with the specified name is defined in CINT.; Returns kFALSE is class is not defined. void CreateListOfBaseClasses(TClass* cl); Create list of pointers to base class(es) for TClass cl. void CreateListOfDataMembers(TClass* cl); Create list of pointers to data members for TClass cl. void CreateListOfMethods(TClass* cl); Create list of pointers to methods for TClass cl. void UpdateListOfMethods(TClass* cl); Update the list of pointers to method for TClass cl, if necessary. void CreateListOfMethodArgs(TFunction* m); Create list of pointers to method arguments for TMethod m. Int_t GenerateDictionary(const char* classes, const char* includes = 0, const char* options = 0); Generate the dictionary for the C++ classes",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:23912,Deployability,Update,UpdateListOfMethods,23912," Update the list of pointers to global variables. This function; is called by TROOT::GetListOfGlobals(). void UpdateListOfGlobalFunctions(); Update the list of pointers to global functions. This function; is called by TROOT::GetListOfGlobalFunctions(). void UpdateListOfTypes(); Update the list of pointers to Datatype (typedef) definitions. This; function is called by TROOT::GetListOfTypes(). void SetClassInfo(TClass* cl, Bool_t reload = kFALSE); Set pointer to CINT's G__ClassInfo in TClass. Bool_t CheckClassInfo(const char* name, Bool_t autoload = kTRUE); Checks if a class with the specified name is defined in CINT.; Returns kFALSE is class is not defined. void CreateListOfBaseClasses(TClass* cl); Create list of pointers to base class(es) for TClass cl. void CreateListOfDataMembers(TClass* cl); Create list of pointers to data members for TClass cl. void CreateListOfMethods(TClass* cl); Create list of pointers to methods for TClass cl. void UpdateListOfMethods(TClass* cl); Update the list of pointers to method for TClass cl, if necessary. void CreateListOfMethodArgs(TFunction* m); Create list of pointers to method arguments for TMethod m. Int_t GenerateDictionary(const char* classes, const char* includes = 0, const char* options = 0); Generate the dictionary for the C++ classes listed in the first; argmument (in a semi-colon separated list).; 'includes' contains a semi-colon separated list of file to; #include in the dictionary.; For example:; gInterpreter->GenerateDictionary(""vector<vector<float> >;list<vector<float> >"",""list;vector"");; or; gInterpreter->GenerateDictionary(""myclass"",""myclass.h;myhelper.h"");. TString GetMangledName(TClass* cl, const char* method, const char* params); Return the CINT mangled name for a method of a class with parameters; params (params is a string of actual arguments, not formal ones). If the; class is 0 the global function list will be searched. TString GetMangledNameWithPrototype(TClass* cl, const char* method, const char* proto); Ret",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:23945,Deployability,Update,Update,23945," Update the list of pointers to global variables. This function; is called by TROOT::GetListOfGlobals(). void UpdateListOfGlobalFunctions(); Update the list of pointers to global functions. This function; is called by TROOT::GetListOfGlobalFunctions(). void UpdateListOfTypes(); Update the list of pointers to Datatype (typedef) definitions. This; function is called by TROOT::GetListOfTypes(). void SetClassInfo(TClass* cl, Bool_t reload = kFALSE); Set pointer to CINT's G__ClassInfo in TClass. Bool_t CheckClassInfo(const char* name, Bool_t autoload = kTRUE); Checks if a class with the specified name is defined in CINT.; Returns kFALSE is class is not defined. void CreateListOfBaseClasses(TClass* cl); Create list of pointers to base class(es) for TClass cl. void CreateListOfDataMembers(TClass* cl); Create list of pointers to data members for TClass cl. void CreateListOfMethods(TClass* cl); Create list of pointers to methods for TClass cl. void UpdateListOfMethods(TClass* cl); Update the list of pointers to method for TClass cl, if necessary. void CreateListOfMethodArgs(TFunction* m); Create list of pointers to method arguments for TMethod m. Int_t GenerateDictionary(const char* classes, const char* includes = 0, const char* options = 0); Generate the dictionary for the C++ classes listed in the first; argmument (in a semi-colon separated list).; 'includes' contains a semi-colon separated list of file to; #include in the dictionary.; For example:; gInterpreter->GenerateDictionary(""vector<vector<float> >;list<vector<float> >"",""list;vector"");; or; gInterpreter->GenerateDictionary(""myclass"",""myclass.h;myhelper.h"");. TString GetMangledName(TClass* cl, const char* method, const char* params); Return the CINT mangled name for a method of a class with parameters; params (params is a string of actual arguments, not formal ones). If the; class is 0 the global function list will be searched. TString GetMangledNameWithPrototype(TClass* cl, const char* method, const char* proto); Ret",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:30001,Deployability,Update,UpdateClassInfo,30001,"rned, 0 otherwise. Int_t UnloadAllSharedLibraryMaps(); Unload the library map entries coming from all the loaded shared libraries.; Returns 0 if succesful. Int_t UnloadLibraryMap(const char* library); Unload library map entries coming from the specified library.; Returns -1 in case no entries for the specified library were found,; 0 otherwise. Int_t AutoLoad(const char* classname); Load library containing the specified class. Returns 0 in case of error; and 1 in case if success. Int_t AutoLoadCallback(const char* cls, const char* lib); Load library containing specified class. Returns 0 in case of error; and 1 in case if success. void * FindSpecialObject(const char* name, Cint::G__ClassInfo* type, void** prevObj, void** assocPtr); Static function called by CINT when it finds an un-indentified object.; This function tries to find the UO in the ROOT files, directories, etc.; This functions has been registered by the TCint ctor. void UpdateClassInfo(char* name, Long_t tagnum); Static function called by CINT when it changes the tagnum for; a class (e.g. after re-executing the setup function). In such; cases we have to update the tagnum in the G__ClassInfo used by; the TClass for class ""item"". void UpdateClassInfoWork(const char* name, Long_t tagnum); This does the actual work of UpdateClassInfo. void UpdateAllCanvases(); Update all canvases at end the terminal input command. const char* GetSharedLibs(); Return the list of shared libraries known to CINT. const char * GetClassSharedLibs(const char* cls); Get the list of shared libraries containing the code for class cls.; The first library in the list is the one containing the class, the; others are the libraries the first one depends on. Returns 0; in case the library is not found. const char * GetSharedLibDeps(const char* lib); Get the list a libraries on which the specified lib depends. The; returned string contains as first element the lib itself.; Returns 0 in case the lib does not exist or does not have; any dependen",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:30188,Deployability,update,update,30188," Int_t UnloadLibraryMap(const char* library); Unload library map entries coming from the specified library.; Returns -1 in case no entries for the specified library were found,; 0 otherwise. Int_t AutoLoad(const char* classname); Load library containing the specified class. Returns 0 in case of error; and 1 in case if success. Int_t AutoLoadCallback(const char* cls, const char* lib); Load library containing specified class. Returns 0 in case of error; and 1 in case if success. void * FindSpecialObject(const char* name, Cint::G__ClassInfo* type, void** prevObj, void** assocPtr); Static function called by CINT when it finds an un-indentified object.; This function tries to find the UO in the ROOT files, directories, etc.; This functions has been registered by the TCint ctor. void UpdateClassInfo(char* name, Long_t tagnum); Static function called by CINT when it changes the tagnum for; a class (e.g. after re-executing the setup function). In such; cases we have to update the tagnum in the G__ClassInfo used by; the TClass for class ""item"". void UpdateClassInfoWork(const char* name, Long_t tagnum); This does the actual work of UpdateClassInfo. void UpdateAllCanvases(); Update all canvases at end the terminal input command. const char* GetSharedLibs(); Return the list of shared libraries known to CINT. const char * GetClassSharedLibs(const char* cls); Get the list of shared libraries containing the code for class cls.; The first library in the list is the one containing the class, the; others are the libraries the first one depends on. Returns 0; in case the library is not found. const char * GetSharedLibDeps(const char* lib); Get the list a libraries on which the specified lib depends. The; returned string contains as first element the lib itself.; Returns 0 in case the lib does not exist or does not have; any dependencies. Bool_t IsErrorMessagesEnabled() const; If error messages are disabled, the interpreter should suppress its; failures and warning messages from stdout",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:30269,Deployability,Update,UpdateClassInfoWork,30269,"ary.; Returns -1 in case no entries for the specified library were found,; 0 otherwise. Int_t AutoLoad(const char* classname); Load library containing the specified class. Returns 0 in case of error; and 1 in case if success. Int_t AutoLoadCallback(const char* cls, const char* lib); Load library containing specified class. Returns 0 in case of error; and 1 in case if success. void * FindSpecialObject(const char* name, Cint::G__ClassInfo* type, void** prevObj, void** assocPtr); Static function called by CINT when it finds an un-indentified object.; This function tries to find the UO in the ROOT files, directories, etc.; This functions has been registered by the TCint ctor. void UpdateClassInfo(char* name, Long_t tagnum); Static function called by CINT when it changes the tagnum for; a class (e.g. after re-executing the setup function). In such; cases we have to update the tagnum in the G__ClassInfo used by; the TClass for class ""item"". void UpdateClassInfoWork(const char* name, Long_t tagnum); This does the actual work of UpdateClassInfo. void UpdateAllCanvases(); Update all canvases at end the terminal input command. const char* GetSharedLibs(); Return the list of shared libraries known to CINT. const char * GetClassSharedLibs(const char* cls); Get the list of shared libraries containing the code for class cls.; The first library in the list is the one containing the class, the; others are the libraries the first one depends on. Returns 0; in case the library is not found. const char * GetSharedLibDeps(const char* lib); Get the list a libraries on which the specified lib depends. The; returned string contains as first element the lib itself.; Returns 0 in case the lib does not exist or does not have; any dependencies. Bool_t IsErrorMessagesEnabled() const; If error messages are disabled, the interpreter should suppress its; failures and warning messages from stdout. Bool_t SetErrorMessages(Bool_t enable = kTRUE); If error messages are disabled, the interpreter should",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:30352,Deployability,Update,UpdateClassInfo,30352,"ary.; Returns -1 in case no entries for the specified library were found,; 0 otherwise. Int_t AutoLoad(const char* classname); Load library containing the specified class. Returns 0 in case of error; and 1 in case if success. Int_t AutoLoadCallback(const char* cls, const char* lib); Load library containing specified class. Returns 0 in case of error; and 1 in case if success. void * FindSpecialObject(const char* name, Cint::G__ClassInfo* type, void** prevObj, void** assocPtr); Static function called by CINT when it finds an un-indentified object.; This function tries to find the UO in the ROOT files, directories, etc.; This functions has been registered by the TCint ctor. void UpdateClassInfo(char* name, Long_t tagnum); Static function called by CINT when it changes the tagnum for; a class (e.g. after re-executing the setup function). In such; cases we have to update the tagnum in the G__ClassInfo used by; the TClass for class ""item"". void UpdateClassInfoWork(const char* name, Long_t tagnum); This does the actual work of UpdateClassInfo. void UpdateAllCanvases(); Update all canvases at end the terminal input command. const char* GetSharedLibs(); Return the list of shared libraries known to CINT. const char * GetClassSharedLibs(const char* cls); Get the list of shared libraries containing the code for class cls.; The first library in the list is the one containing the class, the; others are the libraries the first one depends on. Returns 0; in case the library is not found. const char * GetSharedLibDeps(const char* lib); Get the list a libraries on which the specified lib depends. The; returned string contains as first element the lib itself.; Returns 0 in case the lib does not exist or does not have; any dependencies. Bool_t IsErrorMessagesEnabled() const; If error messages are disabled, the interpreter should suppress its; failures and warning messages from stdout. Bool_t SetErrorMessages(Bool_t enable = kTRUE); If error messages are disabled, the interpreter should",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:30374,Deployability,Update,UpdateAllCanvases,30374," AutoLoad(const char* classname); Load library containing the specified class. Returns 0 in case of error; and 1 in case if success. Int_t AutoLoadCallback(const char* cls, const char* lib); Load library containing specified class. Returns 0 in case of error; and 1 in case if success. void * FindSpecialObject(const char* name, Cint::G__ClassInfo* type, void** prevObj, void** assocPtr); Static function called by CINT when it finds an un-indentified object.; This function tries to find the UO in the ROOT files, directories, etc.; This functions has been registered by the TCint ctor. void UpdateClassInfo(char* name, Long_t tagnum); Static function called by CINT when it changes the tagnum for; a class (e.g. after re-executing the setup function). In such; cases we have to update the tagnum in the G__ClassInfo used by; the TClass for class ""item"". void UpdateClassInfoWork(const char* name, Long_t tagnum); This does the actual work of UpdateClassInfo. void UpdateAllCanvases(); Update all canvases at end the terminal input command. const char* GetSharedLibs(); Return the list of shared libraries known to CINT. const char * GetClassSharedLibs(const char* cls); Get the list of shared libraries containing the code for class cls.; The first library in the list is the one containing the class, the; others are the libraries the first one depends on. Returns 0; in case the library is not found. const char * GetSharedLibDeps(const char* lib); Get the list a libraries on which the specified lib depends. The; returned string contains as first element the lib itself.; Returns 0 in case the lib does not exist or does not have; any dependencies. Bool_t IsErrorMessagesEnabled() const; If error messages are disabled, the interpreter should suppress its; failures and warning messages from stdout. Bool_t SetErrorMessages(Bool_t enable = kTRUE); If error messages are disabled, the interpreter should suppress its; failures and warning messages from stdout. Return the previous state. void Add",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:30395,Deployability,Update,Update,30395," AutoLoad(const char* classname); Load library containing the specified class. Returns 0 in case of error; and 1 in case if success. Int_t AutoLoadCallback(const char* cls, const char* lib); Load library containing specified class. Returns 0 in case of error; and 1 in case if success. void * FindSpecialObject(const char* name, Cint::G__ClassInfo* type, void** prevObj, void** assocPtr); Static function called by CINT when it finds an un-indentified object.; This function tries to find the UO in the ROOT files, directories, etc.; This functions has been registered by the TCint ctor. void UpdateClassInfo(char* name, Long_t tagnum); Static function called by CINT when it changes the tagnum for; a class (e.g. after re-executing the setup function). In such; cases we have to update the tagnum in the G__ClassInfo used by; the TClass for class ""item"". void UpdateClassInfoWork(const char* name, Long_t tagnum); This does the actual work of UpdateClassInfo. void UpdateAllCanvases(); Update all canvases at end the terminal input command. const char* GetSharedLibs(); Return the list of shared libraries known to CINT. const char * GetClassSharedLibs(const char* cls); Get the list of shared libraries containing the code for class cls.; The first library in the list is the one containing the class, the; others are the libraries the first one depends on. Returns 0; in case the library is not found. const char * GetSharedLibDeps(const char* lib); Get the list a libraries on which the specified lib depends. The; returned string contains as first element the lib itself.; Returns 0 in case the lib does not exist or does not have; any dependencies. Bool_t IsErrorMessagesEnabled() const; If error messages are disabled, the interpreter should suppress its; failures and warning messages from stdout. Bool_t SetErrorMessages(Bool_t enable = kTRUE); If error messages are disabled, the interpreter should suppress its; failures and warning messages from stdout. Return the previous state. void Add",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:303,Integrability,interface,interface,303,". TCint. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » META; » TCint. class TCint: public TInterpreter. This class defines an interface to the CINT C/C++ interpreter made; by Masaharu Goto from HP Japan. CINT is an almost full ANSI compliant C/C++ interpreter. Function Members (Methods); public:. TCint(const char* name, const char* title); virtual~TCint(); voidTObject::AbstractMethod(const char* method) const; virtual voidAddIncludePath(const char* path); virtual voidTObject::AppendPad(Option_t* option = """"); virtual Int_tAutoLoad(const char* classname); static intAutoLoadCallback(const char* cls, const char* lib); virtual voidBaseClassInfo_Delete(BaseClassInfo_t* bcinfo) const; virtual BaseClassInfo_t*BaseClassInfo_Factory(ClassInfo_t* info) const; virtual const char*BaseClassInfo_FullName(BaseClassInfo_t* bcinfo) const; virtual const char*BaseClassInfo_Name(BaseClassInfo_t* bcinfo) const; virtual intBaseClassInfo_Next(BaseClassInfo_t* bcinfo) const; virtual intBaseClassInfo_Next(BaseClassInfo_t* bcinfo, int onlyDirect) const; virtual Long_tBaseClassInfo_Offset(BaseClassInfo_t* bcinfo) const; virtual Long_tBaseClassInfo_Property(BaseClassInfo_t* bcinfo) const; virtual Long_tBaseClassInfo_Tagnum(BaseClassInfo_t* bcinfo) const; virtual const char*BaseClassInfo_TmpltName(BaseClassInfo_t* bcinfo) const; virtual voidTObject::Browse(TBrowser* b); virtual Long_tCalc(const char* line, TInterpreter::EErrorCode* error = 0); virtual voidCallFunc_Delete(void* func) const; virtual voidCallFunc_Exec(CallFunc_t* func, void* address) const; virtual Double_tCallFunc_ExecDouble(CallFunc_t* func, void* address) const; virtual Long_tCallFunc_ExecInt(CallFunc_t* func, void* address) const; virtual Long_tCallFunc_ExecInt64(CallFunc_t* func, void* address) const; virtual CallFunc_t*CallFunc_Factory() const; virtual",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:19778,Integrability,interface,interface,19778,"itleobject title. private:. G__dictpositionfDictPosCINT dictionary context after init; G__dictpositionfDictPosGlobalsCINT dictionary context after ResetGlobals(); Int_tfExitCodevalue passed to exit() in interpreter; Int_tfGlobalsListSerialIndicator of the last time we refresh the ROOT list of globals.; TStringfIncludePathlist of CINT include paths; Bool_tfLockProcessLinetrue if ProcessLine should lock gCINTMutex; TEnv*fMapfilemap of classes and libraries; Int_tfMore1 if more input is required; charfPrompt[64]proposed prompt string; TObjArray*fRootmapFileslist of non-default rootmap files loaded; TStringfRootmapLoadPathdynamic load path used for loading rootmap files; TStringfSharedLibslist of shared libraries loaded by G__loadfile; Int_tfSharedLibsSerialIndicator of the last time we set fSharedLibs; static void*fgSetOfSpecialsset of TObject*s used in CINT variables. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCint(const char* name, const char* title); Initialize the CINT interpreter interface. ~TCint(); Destroy the CINT interpreter interface. void ClearFileBusy(); Reset CINT internal state in case a previous action was not correctly; terminated by G__init_cint() and G__dlmod(). void ClearStack(); Delete existing temporary values. Int_t InitializeDictionaries(); Initialize all registered dictionaries. Normally this is already done; by G__init_cint() and G__dlmod(). void EnableAutoLoading(); Enable the automatic loading of shared libraries when a class; is used that is stored in a not yet loaded library. Uses the; information stored in the class/library map (typically; $ROOTSYS/etc/system.rootmap). void EndOfLineAction(); It calls a ""fantom"" method to synchronize user keyboard input; and ROOT prompt line. Bool_t IsLoaded(const char* filename) const; Return true if the file has already been loaded by cint. Int_t Load(const char* filenam, Bool_t system = kFALSE); Load a library file in CINT's memory.; if 'system' is true, t",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:19828,Integrability,interface,interface,19828,"init; G__dictpositionfDictPosGlobalsCINT dictionary context after ResetGlobals(); Int_tfExitCodevalue passed to exit() in interpreter; Int_tfGlobalsListSerialIndicator of the last time we refresh the ROOT list of globals.; TStringfIncludePathlist of CINT include paths; Bool_tfLockProcessLinetrue if ProcessLine should lock gCINTMutex; TEnv*fMapfilemap of classes and libraries; Int_tfMore1 if more input is required; charfPrompt[64]proposed prompt string; TObjArray*fRootmapFileslist of non-default rootmap files loaded; TStringfRootmapLoadPathdynamic load path used for loading rootmap files; TStringfSharedLibslist of shared libraries loaded by G__loadfile; Int_tfSharedLibsSerialIndicator of the last time we set fSharedLibs; static void*fgSetOfSpecialsset of TObject*s used in CINT variables. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCint(const char* name, const char* title); Initialize the CINT interpreter interface. ~TCint(); Destroy the CINT interpreter interface. void ClearFileBusy(); Reset CINT internal state in case a previous action was not correctly; terminated by G__init_cint() and G__dlmod(). void ClearStack(); Delete existing temporary values. Int_t InitializeDictionaries(); Initialize all registered dictionaries. Normally this is already done; by G__init_cint() and G__dlmod(). void EnableAutoLoading(); Enable the automatic loading of shared libraries when a class; is used that is stored in a not yet loaded library. Uses the; information stored in the class/library map (typically; $ROOTSYS/etc/system.rootmap). void EndOfLineAction(); It calls a ""fantom"" method to synchronize user keyboard input; and ROOT prompt line. Bool_t IsLoaded(const char* filename) const; Return true if the file has already been loaded by cint. Int_t Load(const char* filenam, Bool_t system = kFALSE); Load a library file in CINT's memory.; if 'system' is true, the library is never unloaded. void LoadMacro(const char* filename, TInterpreter:",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:20458,Integrability,synchroniz,synchronize,20458," by G__loadfile; Int_tfSharedLibsSerialIndicator of the last time we set fSharedLibs; static void*fgSetOfSpecialsset of TObject*s used in CINT variables. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCint(const char* name, const char* title); Initialize the CINT interpreter interface. ~TCint(); Destroy the CINT interpreter interface. void ClearFileBusy(); Reset CINT internal state in case a previous action was not correctly; terminated by G__init_cint() and G__dlmod(). void ClearStack(); Delete existing temporary values. Int_t InitializeDictionaries(); Initialize all registered dictionaries. Normally this is already done; by G__init_cint() and G__dlmod(). void EnableAutoLoading(); Enable the automatic loading of shared libraries when a class; is used that is stored in a not yet loaded library. Uses the; information stored in the class/library map (typically; $ROOTSYS/etc/system.rootmap). void EndOfLineAction(); It calls a ""fantom"" method to synchronize user keyboard input; and ROOT prompt line. Bool_t IsLoaded(const char* filename) const; Return true if the file has already been loaded by cint. Int_t Load(const char* filenam, Bool_t system = kFALSE); Load a library file in CINT's memory.; if 'system' is true, the library is never unloaded. void LoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0); Load a macro file in CINT's memory. Long_t ProcessLine(const char* line, TInterpreter::EErrorCode* error = 0); Let CINT process a command line.; If the command is executed and the result of G__process_cmd is 0,; the return value is the int value corresponding to the result of the command; (float and double return values will be truncated). Long_t ProcessLineAsynch(const char* line, TInterpreter::EErrorCode* error = 0); Let CINT process a command line asynch. Long_t ProcessLineSynch(const char* line, TInterpreter::EErrorCode* error = 0); Let CINT process a command line synchronously, i.e we are waiting; it will be",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:21703,Integrability,message,message,21703,"ibrary file in CINT's memory.; if 'system' is true, the library is never unloaded. void LoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0); Load a macro file in CINT's memory. Long_t ProcessLine(const char* line, TInterpreter::EErrorCode* error = 0); Let CINT process a command line.; If the command is executed and the result of G__process_cmd is 0,; the return value is the int value corresponding to the result of the command; (float and double return values will be truncated). Long_t ProcessLineAsynch(const char* line, TInterpreter::EErrorCode* error = 0); Let CINT process a command line asynch. Long_t ProcessLineSynch(const char* line, TInterpreter::EErrorCode* error = 0); Let CINT process a command line synchronously, i.e we are waiting; it will be finished. Long_t Calc(const char* line, TInterpreter::EErrorCode* error = 0); Directly execute an executable statement (e.g. ""func()"", ""3+5"", etc.; however not declarations, like ""Int_t x;""). void PrintIntro(); Print CINT introduction and help message. void SetGetline(const char *(*)(const char* prompt) getlineFunc, void (*)(const char* line) histaddFunc); Set a getline function to call when input is needed. void RecursiveRemove(TObject* obj); Delete object from CINT symbol table so it can not be used anymore.; CINT objects are always on the heap. void Reset(); Reset the CINT state to the state saved by the last call to; TCint::SaveContext(). void ResetAll(); Reset the CINT state to its initial state. void ResetGlobals(); Reset the CINT global object state to the state saved by the last; call to TCint::SaveGlobalsContext(). void ResetGlobalVar(void* obj); Reset the CINT global object state to the state saved by the last; call to TCint::SaveGlobalsContext(). void RewindDictionary(); Rewind CINT dictionary to the point where it was before executing; the current macro. This function is typically called after SEGV or; ctlr-C after doing a longjmp back to the prompt. Int_t DeleteGlobal(void* obj); Delete obj",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:25224,Integrability,interface,interface,25224," for the C++ classes listed in the first; argmument (in a semi-colon separated list).; 'includes' contains a semi-colon separated list of file to; #include in the dictionary.; For example:; gInterpreter->GenerateDictionary(""vector<vector<float> >;list<vector<float> >"",""list;vector"");; or; gInterpreter->GenerateDictionary(""myclass"",""myclass.h;myhelper.h"");. TString GetMangledName(TClass* cl, const char* method, const char* params); Return the CINT mangled name for a method of a class with parameters; params (params is a string of actual arguments, not formal ones). If the; class is 0 the global function list will be searched. TString GetMangledNameWithPrototype(TClass* cl, const char* method, const char* proto); Return the CINT mangled name for a method of a class with a certain; prototype, i.e. ""char*,int,float"". If the class is 0 the global function; list will be searched. void * GetInterfaceMethod(TClass* cl, const char* method, const char* params); Return pointer to CINT interface function for a method of a class with; parameters params (params is a string of actual arguments, not formal; ones). If the class is 0 the global function list will be searched. void * GetInterfaceMethodWithPrototype(TClass* cl, const char* method, const char* proto); Return pointer to CINT interface function for a method of a class with; a certain prototype, i.e. ""char*,int,float"". If the class is 0 the global; function list will be searched. const char * GetInterpreterTypeName(const char* name, Bool_t full = kFALSE); The 'name' is known to the interpreter, this function returns; the internal version of this name (usually just resolving typedefs); This is used in particular to synchronize between the name used; by rootcint and by the run-time enviroment (TClass); Return 0 if the name is not known. void Execute(const char* function, const char* params, int* error = 0); Execute a global function with arguments params. void Execute(TObject* obj, TClass* cl, const char* method, const char* ",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:25526,Integrability,interface,interface,25526,"""list;vector"");; or; gInterpreter->GenerateDictionary(""myclass"",""myclass.h;myhelper.h"");. TString GetMangledName(TClass* cl, const char* method, const char* params); Return the CINT mangled name for a method of a class with parameters; params (params is a string of actual arguments, not formal ones). If the; class is 0 the global function list will be searched. TString GetMangledNameWithPrototype(TClass* cl, const char* method, const char* proto); Return the CINT mangled name for a method of a class with a certain; prototype, i.e. ""char*,int,float"". If the class is 0 the global function; list will be searched. void * GetInterfaceMethod(TClass* cl, const char* method, const char* params); Return pointer to CINT interface function for a method of a class with; parameters params (params is a string of actual arguments, not formal; ones). If the class is 0 the global function list will be searched. void * GetInterfaceMethodWithPrototype(TClass* cl, const char* method, const char* proto); Return pointer to CINT interface function for a method of a class with; a certain prototype, i.e. ""char*,int,float"". If the class is 0 the global; function list will be searched. const char * GetInterpreterTypeName(const char* name, Bool_t full = kFALSE); The 'name' is known to the interpreter, this function returns; the internal version of this name (usually just resolving typedefs); This is used in particular to synchronize between the name used; by rootcint and by the run-time enviroment (TClass); Return 0 if the name is not known. void Execute(const char* function, const char* params, int* error = 0); Execute a global function with arguments params. void Execute(TObject* obj, TClass* cl, const char* method, const char* params, int* error = 0); Execute a method from class cl with arguments params. void Execute(TObject* obj, TClass* cl, TMethod* method, TObjArray* params, int* error = 0); Execute a method from class cl with the arguments in array params; (params[0] ... params[n] = arra",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:25921,Integrability,synchroniz,synchronize,25921,"ched. TString GetMangledNameWithPrototype(TClass* cl, const char* method, const char* proto); Return the CINT mangled name for a method of a class with a certain; prototype, i.e. ""char*,int,float"". If the class is 0 the global function; list will be searched. void * GetInterfaceMethod(TClass* cl, const char* method, const char* params); Return pointer to CINT interface function for a method of a class with; parameters params (params is a string of actual arguments, not formal; ones). If the class is 0 the global function list will be searched. void * GetInterfaceMethodWithPrototype(TClass* cl, const char* method, const char* proto); Return pointer to CINT interface function for a method of a class with; a certain prototype, i.e. ""char*,int,float"". If the class is 0 the global; function list will be searched. const char * GetInterpreterTypeName(const char* name, Bool_t full = kFALSE); The 'name' is known to the interpreter, this function returns; the internal version of this name (usually just resolving typedefs); This is used in particular to synchronize between the name used; by rootcint and by the run-time enviroment (TClass); Return 0 if the name is not known. void Execute(const char* function, const char* params, int* error = 0); Execute a global function with arguments params. void Execute(TObject* obj, TClass* cl, const char* method, const char* params, int* error = 0); Execute a method from class cl with arguments params. void Execute(TObject* obj, TClass* cl, TMethod* method, TObjArray* params, int* error = 0); Execute a method from class cl with the arguments in array params; (params[0] ... params[n] = array of TObjString parameters). Long_t ExecuteMacro(const char* filename, TInterpreter::EErrorCode* error = 0); Execute a CINT macro. const char * GetTopLevelMacroName() const; Return the file name of the current un-included interpreted file.; See the documentation for GetCurrentMacroName(). const char * GetCurrentMacroName() const; Return the file name of t",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:30756,Integrability,depend,depends,30756,"ecialObject(const char* name, Cint::G__ClassInfo* type, void** prevObj, void** assocPtr); Static function called by CINT when it finds an un-indentified object.; This function tries to find the UO in the ROOT files, directories, etc.; This functions has been registered by the TCint ctor. void UpdateClassInfo(char* name, Long_t tagnum); Static function called by CINT when it changes the tagnum for; a class (e.g. after re-executing the setup function). In such; cases we have to update the tagnum in the G__ClassInfo used by; the TClass for class ""item"". void UpdateClassInfoWork(const char* name, Long_t tagnum); This does the actual work of UpdateClassInfo. void UpdateAllCanvases(); Update all canvases at end the terminal input command. const char* GetSharedLibs(); Return the list of shared libraries known to CINT. const char * GetClassSharedLibs(const char* cls); Get the list of shared libraries containing the code for class cls.; The first library in the list is the one containing the class, the; others are the libraries the first one depends on. Returns 0; in case the library is not found. const char * GetSharedLibDeps(const char* lib); Get the list a libraries on which the specified lib depends. The; returned string contains as first element the lib itself.; Returns 0 in case the lib does not exist or does not have; any dependencies. Bool_t IsErrorMessagesEnabled() const; If error messages are disabled, the interpreter should suppress its; failures and warning messages from stdout. Bool_t SetErrorMessages(Bool_t enable = kTRUE); If error messages are disabled, the interpreter should suppress its; failures and warning messages from stdout. Return the previous state. void AddIncludePath(const char* path); Add the given path to the list of directories in which the interpreter; looks for include files. Only one path item can be specified at a; time, i.e. ""path1:path2"" is not supported. const char * GetIncludePath(); Refresh the list of include paths known to the interpr",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:30913,Integrability,depend,depends,30913,".; This function tries to find the UO in the ROOT files, directories, etc.; This functions has been registered by the TCint ctor. void UpdateClassInfo(char* name, Long_t tagnum); Static function called by CINT when it changes the tagnum for; a class (e.g. after re-executing the setup function). In such; cases we have to update the tagnum in the G__ClassInfo used by; the TClass for class ""item"". void UpdateClassInfoWork(const char* name, Long_t tagnum); This does the actual work of UpdateClassInfo. void UpdateAllCanvases(); Update all canvases at end the terminal input command. const char* GetSharedLibs(); Return the list of shared libraries known to CINT. const char * GetClassSharedLibs(const char* cls); Get the list of shared libraries containing the code for class cls.; The first library in the list is the one containing the class, the; others are the libraries the first one depends on. Returns 0; in case the library is not found. const char * GetSharedLibDeps(const char* lib); Get the list a libraries on which the specified lib depends. The; returned string contains as first element the lib itself.; Returns 0 in case the lib does not exist or does not have; any dependencies. Bool_t IsErrorMessagesEnabled() const; If error messages are disabled, the interpreter should suppress its; failures and warning messages from stdout. Bool_t SetErrorMessages(Bool_t enable = kTRUE); If error messages are disabled, the interpreter should suppress its; failures and warning messages from stdout. Return the previous state. void AddIncludePath(const char* path); Add the given path to the list of directories in which the interpreter; looks for include files. Only one path item can be specified at a; time, i.e. ""path1:path2"" is not supported. const char * GetIncludePath(); Refresh the list of include paths known to the interpreter and return it; with -I prepended. const char * GetSTLIncludePath() const; Return the directory containing CINT's stl cintdlls. int DisplayClass(FILE* fout,",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:31049,Integrability,depend,dependencies,31049,"name, Long_t tagnum); Static function called by CINT when it changes the tagnum for; a class (e.g. after re-executing the setup function). In such; cases we have to update the tagnum in the G__ClassInfo used by; the TClass for class ""item"". void UpdateClassInfoWork(const char* name, Long_t tagnum); This does the actual work of UpdateClassInfo. void UpdateAllCanvases(); Update all canvases at end the terminal input command. const char* GetSharedLibs(); Return the list of shared libraries known to CINT. const char * GetClassSharedLibs(const char* cls); Get the list of shared libraries containing the code for class cls.; The first library in the list is the one containing the class, the; others are the libraries the first one depends on. Returns 0; in case the library is not found. const char * GetSharedLibDeps(const char* lib); Get the list a libraries on which the specified lib depends. The; returned string contains as first element the lib itself.; Returns 0 in case the lib does not exist or does not have; any dependencies. Bool_t IsErrorMessagesEnabled() const; If error messages are disabled, the interpreter should suppress its; failures and warning messages from stdout. Bool_t SetErrorMessages(Bool_t enable = kTRUE); If error messages are disabled, the interpreter should suppress its; failures and warning messages from stdout. Return the previous state. void AddIncludePath(const char* path); Add the given path to the list of directories in which the interpreter; looks for include files. Only one path item can be specified at a; time, i.e. ""path1:path2"" is not supported. const char * GetIncludePath(); Refresh the list of include paths known to the interpreter and return it; with -I prepended. const char * GetSTLIncludePath() const; Return the directory containing CINT's stl cintdlls. int DisplayClass(FILE* fout, char* name, int base, int start) const; Interface to CINT function. int DisplayIncludePath(FILE* fout) const; Interface to CINT function. void * FindSym(co",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:31111,Integrability,message,messages,31111,"ing the setup function). In such; cases we have to update the tagnum in the G__ClassInfo used by; the TClass for class ""item"". void UpdateClassInfoWork(const char* name, Long_t tagnum); This does the actual work of UpdateClassInfo. void UpdateAllCanvases(); Update all canvases at end the terminal input command. const char* GetSharedLibs(); Return the list of shared libraries known to CINT. const char * GetClassSharedLibs(const char* cls); Get the list of shared libraries containing the code for class cls.; The first library in the list is the one containing the class, the; others are the libraries the first one depends on. Returns 0; in case the library is not found. const char * GetSharedLibDeps(const char* lib); Get the list a libraries on which the specified lib depends. The; returned string contains as first element the lib itself.; Returns 0 in case the lib does not exist or does not have; any dependencies. Bool_t IsErrorMessagesEnabled() const; If error messages are disabled, the interpreter should suppress its; failures and warning messages from stdout. Bool_t SetErrorMessages(Bool_t enable = kTRUE); If error messages are disabled, the interpreter should suppress its; failures and warning messages from stdout. Return the previous state. void AddIncludePath(const char* path); Add the given path to the list of directories in which the interpreter; looks for include files. Only one path item can be specified at a; time, i.e. ""path1:path2"" is not supported. const char * GetIncludePath(); Refresh the list of include paths known to the interpreter and return it; with -I prepended. const char * GetSTLIncludePath() const; Return the directory containing CINT's stl cintdlls. int DisplayClass(FILE* fout, char* name, int base, int start) const; Interface to CINT function. int DisplayIncludePath(FILE* fout) const; Interface to CINT function. void * FindSym(const char* entry) const; Interface to CINT function. void GenericError(const char* error) const; Interface to CINT f",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:31192,Integrability,message,messages,31192,"ing the setup function). In such; cases we have to update the tagnum in the G__ClassInfo used by; the TClass for class ""item"". void UpdateClassInfoWork(const char* name, Long_t tagnum); This does the actual work of UpdateClassInfo. void UpdateAllCanvases(); Update all canvases at end the terminal input command. const char* GetSharedLibs(); Return the list of shared libraries known to CINT. const char * GetClassSharedLibs(const char* cls); Get the list of shared libraries containing the code for class cls.; The first library in the list is the one containing the class, the; others are the libraries the first one depends on. Returns 0; in case the library is not found. const char * GetSharedLibDeps(const char* lib); Get the list a libraries on which the specified lib depends. The; returned string contains as first element the lib itself.; Returns 0 in case the lib does not exist or does not have; any dependencies. Bool_t IsErrorMessagesEnabled() const; If error messages are disabled, the interpreter should suppress its; failures and warning messages from stdout. Bool_t SetErrorMessages(Bool_t enable = kTRUE); If error messages are disabled, the interpreter should suppress its; failures and warning messages from stdout. Return the previous state. void AddIncludePath(const char* path); Add the given path to the list of directories in which the interpreter; looks for include files. Only one path item can be specified at a; time, i.e. ""path1:path2"" is not supported. const char * GetIncludePath(); Refresh the list of include paths known to the interpreter and return it; with -I prepended. const char * GetSTLIncludePath() const; Return the directory containing CINT's stl cintdlls. int DisplayClass(FILE* fout, char* name, int base, int start) const; Interface to CINT function. int DisplayIncludePath(FILE* fout) const; Interface to CINT function. void * FindSym(const char* entry) const; Interface to CINT function. void GenericError(const char* error) const; Interface to CINT f",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:31271,Integrability,message,messages,31271,"t char* name, Long_t tagnum); This does the actual work of UpdateClassInfo. void UpdateAllCanvases(); Update all canvases at end the terminal input command. const char* GetSharedLibs(); Return the list of shared libraries known to CINT. const char * GetClassSharedLibs(const char* cls); Get the list of shared libraries containing the code for class cls.; The first library in the list is the one containing the class, the; others are the libraries the first one depends on. Returns 0; in case the library is not found. const char * GetSharedLibDeps(const char* lib); Get the list a libraries on which the specified lib depends. The; returned string contains as first element the lib itself.; Returns 0 in case the lib does not exist or does not have; any dependencies. Bool_t IsErrorMessagesEnabled() const; If error messages are disabled, the interpreter should suppress its; failures and warning messages from stdout. Bool_t SetErrorMessages(Bool_t enable = kTRUE); If error messages are disabled, the interpreter should suppress its; failures and warning messages from stdout. Return the previous state. void AddIncludePath(const char* path); Add the given path to the list of directories in which the interpreter; looks for include files. Only one path item can be specified at a; time, i.e. ""path1:path2"" is not supported. const char * GetIncludePath(); Refresh the list of include paths known to the interpreter and return it; with -I prepended. const char * GetSTLIncludePath() const; Return the directory containing CINT's stl cintdlls. int DisplayClass(FILE* fout, char* name, int base, int start) const; Interface to CINT function. int DisplayIncludePath(FILE* fout) const; Interface to CINT function. void * FindSym(const char* entry) const; Interface to CINT function. void GenericError(const char* error) const; Interface to CINT function. Long_t GetExecByteCode() const; Interface to CINT function. Long_t Getgvp() const; Interface to CINT function. const char * Getp2f2funcname(void* ",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:31352,Integrability,message,messages,31352,"t char* name, Long_t tagnum); This does the actual work of UpdateClassInfo. void UpdateAllCanvases(); Update all canvases at end the terminal input command. const char* GetSharedLibs(); Return the list of shared libraries known to CINT. const char * GetClassSharedLibs(const char* cls); Get the list of shared libraries containing the code for class cls.; The first library in the list is the one containing the class, the; others are the libraries the first one depends on. Returns 0; in case the library is not found. const char * GetSharedLibDeps(const char* lib); Get the list a libraries on which the specified lib depends. The; returned string contains as first element the lib itself.; Returns 0 in case the lib does not exist or does not have; any dependencies. Bool_t IsErrorMessagesEnabled() const; If error messages are disabled, the interpreter should suppress its; failures and warning messages from stdout. Bool_t SetErrorMessages(Bool_t enable = kTRUE); If error messages are disabled, the interpreter should suppress its; failures and warning messages from stdout. Return the previous state. void AddIncludePath(const char* path); Add the given path to the list of directories in which the interpreter; looks for include files. Only one path item can be specified at a; time, i.e. ""path1:path2"" is not supported. const char * GetIncludePath(); Refresh the list of include paths known to the interpreter and return it; with -I prepended. const char * GetSTLIncludePath() const; Return the directory containing CINT's stl cintdlls. int DisplayClass(FILE* fout, char* name, int base, int start) const; Interface to CINT function. int DisplayIncludePath(FILE* fout) const; Interface to CINT function. void * FindSym(const char* entry) const; Interface to CINT function. void GenericError(const char* error) const; Interface to CINT function. Long_t GetExecByteCode() const; Interface to CINT function. Long_t Getgvp() const; Interface to CINT function. const char * Getp2f2funcname(void* ",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:31908,Integrability,Interface,Interface,31908,"on which the specified lib depends. The; returned string contains as first element the lib itself.; Returns 0 in case the lib does not exist or does not have; any dependencies. Bool_t IsErrorMessagesEnabled() const; If error messages are disabled, the interpreter should suppress its; failures and warning messages from stdout. Bool_t SetErrorMessages(Bool_t enable = kTRUE); If error messages are disabled, the interpreter should suppress its; failures and warning messages from stdout. Return the previous state. void AddIncludePath(const char* path); Add the given path to the list of directories in which the interpreter; looks for include files. Only one path item can be specified at a; time, i.e. ""path1:path2"" is not supported. const char * GetIncludePath(); Refresh the list of include paths known to the interpreter and return it; with -I prepended. const char * GetSTLIncludePath() const; Return the directory containing CINT's stl cintdlls. int DisplayClass(FILE* fout, char* name, int base, int start) const; Interface to CINT function. int DisplayIncludePath(FILE* fout) const; Interface to CINT function. void * FindSym(const char* entry) const; Interface to CINT function. void GenericError(const char* error) const; Interface to CINT function. Long_t GetExecByteCode() const; Interface to CINT function. Long_t Getgvp() const; Interface to CINT function. const char * Getp2f2funcname(void* receiver) const; Interface to CINT function. int GetSecurityError() const; Interface to CINT function. int LoadFile(const char* path) const; Interface to CINT function. void LoadText(const char* text) const; Interface to CINT function. const char * MapCppName(const char* ) const; Interface to CINT function. void SetAlloclockfunc(void (*)() ) const; Interface to CINT function. void SetAllocunlockfunc(void (*)() ) const; Interface to CINT function. int SetClassAutoloading(int ) const; Interface to CINT function. void SetErrmsgcallback(void* p) const; Interface to CINT function. void Setgvp",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:31978,Integrability,Interface,Interface,31978,"he lib itself.; Returns 0 in case the lib does not exist or does not have; any dependencies. Bool_t IsErrorMessagesEnabled() const; If error messages are disabled, the interpreter should suppress its; failures and warning messages from stdout. Bool_t SetErrorMessages(Bool_t enable = kTRUE); If error messages are disabled, the interpreter should suppress its; failures and warning messages from stdout. Return the previous state. void AddIncludePath(const char* path); Add the given path to the list of directories in which the interpreter; looks for include files. Only one path item can be specified at a; time, i.e. ""path1:path2"" is not supported. const char * GetIncludePath(); Refresh the list of include paths known to the interpreter and return it; with -I prepended. const char * GetSTLIncludePath() const; Return the directory containing CINT's stl cintdlls. int DisplayClass(FILE* fout, char* name, int base, int start) const; Interface to CINT function. int DisplayIncludePath(FILE* fout) const; Interface to CINT function. void * FindSym(const char* entry) const; Interface to CINT function. void GenericError(const char* error) const; Interface to CINT function. Long_t GetExecByteCode() const; Interface to CINT function. Long_t Getgvp() const; Interface to CINT function. const char * Getp2f2funcname(void* receiver) const; Interface to CINT function. int GetSecurityError() const; Interface to CINT function. int LoadFile(const char* path) const; Interface to CINT function. void LoadText(const char* text) const; Interface to CINT function. const char * MapCppName(const char* ) const; Interface to CINT function. void SetAlloclockfunc(void (*)() ) const; Interface to CINT function. void SetAllocunlockfunc(void (*)() ) const; Interface to CINT function. int SetClassAutoloading(int ) const; Interface to CINT function. void SetErrmsgcallback(void* p) const; Interface to CINT function. void Setgvp(Long_t ) const; Interface to CINT function. void SetRTLD_NOW() const; Interface to",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:32047,Integrability,Interface,Interface,32047,"have; any dependencies. Bool_t IsErrorMessagesEnabled() const; If error messages are disabled, the interpreter should suppress its; failures and warning messages from stdout. Bool_t SetErrorMessages(Bool_t enable = kTRUE); If error messages are disabled, the interpreter should suppress its; failures and warning messages from stdout. Return the previous state. void AddIncludePath(const char* path); Add the given path to the list of directories in which the interpreter; looks for include files. Only one path item can be specified at a; time, i.e. ""path1:path2"" is not supported. const char * GetIncludePath(); Refresh the list of include paths known to the interpreter and return it; with -I prepended. const char * GetSTLIncludePath() const; Return the directory containing CINT's stl cintdlls. int DisplayClass(FILE* fout, char* name, int base, int start) const; Interface to CINT function. int DisplayIncludePath(FILE* fout) const; Interface to CINT function. void * FindSym(const char* entry) const; Interface to CINT function. void GenericError(const char* error) const; Interface to CINT function. Long_t GetExecByteCode() const; Interface to CINT function. Long_t Getgvp() const; Interface to CINT function. const char * Getp2f2funcname(void* receiver) const; Interface to CINT function. int GetSecurityError() const; Interface to CINT function. int LoadFile(const char* path) const; Interface to CINT function. void LoadText(const char* text) const; Interface to CINT function. const char * MapCppName(const char* ) const; Interface to CINT function. void SetAlloclockfunc(void (*)() ) const; Interface to CINT function. void SetAllocunlockfunc(void (*)() ) const; Interface to CINT function. int SetClassAutoloading(int ) const; Interface to CINT function. void SetErrmsgcallback(void* p) const; Interface to CINT function. void Setgvp(Long_t ) const; Interface to CINT function. void SetRTLD_NOW() const; Interface to CINT function. void SetRTLD_LAZY() const; Interface to CINT function.",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:32119,Integrability,Interface,Interface,32119," messages are disabled, the interpreter should suppress its; failures and warning messages from stdout. Bool_t SetErrorMessages(Bool_t enable = kTRUE); If error messages are disabled, the interpreter should suppress its; failures and warning messages from stdout. Return the previous state. void AddIncludePath(const char* path); Add the given path to the list of directories in which the interpreter; looks for include files. Only one path item can be specified at a; time, i.e. ""path1:path2"" is not supported. const char * GetIncludePath(); Refresh the list of include paths known to the interpreter and return it; with -I prepended. const char * GetSTLIncludePath() const; Return the directory containing CINT's stl cintdlls. int DisplayClass(FILE* fout, char* name, int base, int start) const; Interface to CINT function. int DisplayIncludePath(FILE* fout) const; Interface to CINT function. void * FindSym(const char* entry) const; Interface to CINT function. void GenericError(const char* error) const; Interface to CINT function. Long_t GetExecByteCode() const; Interface to CINT function. Long_t Getgvp() const; Interface to CINT function. const char * Getp2f2funcname(void* receiver) const; Interface to CINT function. int GetSecurityError() const; Interface to CINT function. int LoadFile(const char* path) const; Interface to CINT function. void LoadText(const char* text) const; Interface to CINT function. const char * MapCppName(const char* ) const; Interface to CINT function. void SetAlloclockfunc(void (*)() ) const; Interface to CINT function. void SetAllocunlockfunc(void (*)() ) const; Interface to CINT function. int SetClassAutoloading(int ) const; Interface to CINT function. void SetErrmsgcallback(void* p) const; Interface to CINT function. void Setgvp(Long_t ) const; Interface to CINT function. void SetRTLD_NOW() const; Interface to CINT function. void SetRTLD_LAZY() const; Interface to CINT function. void SetTempLevel(int val) const; Interface to CINT function. int Unl",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:32179,Integrability,Interface,Interface,32179,"res and warning messages from stdout. Bool_t SetErrorMessages(Bool_t enable = kTRUE); If error messages are disabled, the interpreter should suppress its; failures and warning messages from stdout. Return the previous state. void AddIncludePath(const char* path); Add the given path to the list of directories in which the interpreter; looks for include files. Only one path item can be specified at a; time, i.e. ""path1:path2"" is not supported. const char * GetIncludePath(); Refresh the list of include paths known to the interpreter and return it; with -I prepended. const char * GetSTLIncludePath() const; Return the directory containing CINT's stl cintdlls. int DisplayClass(FILE* fout, char* name, int base, int start) const; Interface to CINT function. int DisplayIncludePath(FILE* fout) const; Interface to CINT function. void * FindSym(const char* entry) const; Interface to CINT function. void GenericError(const char* error) const; Interface to CINT function. Long_t GetExecByteCode() const; Interface to CINT function. Long_t Getgvp() const; Interface to CINT function. const char * Getp2f2funcname(void* receiver) const; Interface to CINT function. int GetSecurityError() const; Interface to CINT function. int LoadFile(const char* path) const; Interface to CINT function. void LoadText(const char* text) const; Interface to CINT function. const char * MapCppName(const char* ) const; Interface to CINT function. void SetAlloclockfunc(void (*)() ) const; Interface to CINT function. void SetAllocunlockfunc(void (*)() ) const; Interface to CINT function. int SetClassAutoloading(int ) const; Interface to CINT function. void SetErrmsgcallback(void* p) const; Interface to CINT function. void Setgvp(Long_t ) const; Interface to CINT function. void SetRTLD_NOW() const; Interface to CINT function. void SetRTLD_LAZY() const; Interface to CINT function. void SetTempLevel(int val) const; Interface to CINT function. int UnloadFile(const char* path) const; Interface to CINT function. void ",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:32230,Integrability,Interface,Interface,32230,"ssages(Bool_t enable = kTRUE); If error messages are disabled, the interpreter should suppress its; failures and warning messages from stdout. Return the previous state. void AddIncludePath(const char* path); Add the given path to the list of directories in which the interpreter; looks for include files. Only one path item can be specified at a; time, i.e. ""path1:path2"" is not supported. const char * GetIncludePath(); Refresh the list of include paths known to the interpreter and return it; with -I prepended. const char * GetSTLIncludePath() const; Return the directory containing CINT's stl cintdlls. int DisplayClass(FILE* fout, char* name, int base, int start) const; Interface to CINT function. int DisplayIncludePath(FILE* fout) const; Interface to CINT function. void * FindSym(const char* entry) const; Interface to CINT function. void GenericError(const char* error) const; Interface to CINT function. Long_t GetExecByteCode() const; Interface to CINT function. Long_t Getgvp() const; Interface to CINT function. const char * Getp2f2funcname(void* receiver) const; Interface to CINT function. int GetSecurityError() const; Interface to CINT function. int LoadFile(const char* path) const; Interface to CINT function. void LoadText(const char* text) const; Interface to CINT function. const char * MapCppName(const char* ) const; Interface to CINT function. void SetAlloclockfunc(void (*)() ) const; Interface to CINT function. void SetAllocunlockfunc(void (*)() ) const; Interface to CINT function. int SetClassAutoloading(int ) const; Interface to CINT function. void SetErrmsgcallback(void* p) const; Interface to CINT function. void Setgvp(Long_t ) const; Interface to CINT function. void SetRTLD_NOW() const; Interface to CINT function. void SetRTLD_LAZY() const; Interface to CINT function. void SetTempLevel(int val) const; Interface to CINT function. int UnloadFile(const char* path) const; Interface to CINT function. void CallFunc_Delete(void* func) const; Interface to CINT fun",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:32310,Integrability,Interface,Interface,32310," interpreter should suppress its; failures and warning messages from stdout. Return the previous state. void AddIncludePath(const char* path); Add the given path to the list of directories in which the interpreter; looks for include files. Only one path item can be specified at a; time, i.e. ""path1:path2"" is not supported. const char * GetIncludePath(); Refresh the list of include paths known to the interpreter and return it; with -I prepended. const char * GetSTLIncludePath() const; Return the directory containing CINT's stl cintdlls. int DisplayClass(FILE* fout, char* name, int base, int start) const; Interface to CINT function. int DisplayIncludePath(FILE* fout) const; Interface to CINT function. void * FindSym(const char* entry) const; Interface to CINT function. void GenericError(const char* error) const; Interface to CINT function. Long_t GetExecByteCode() const; Interface to CINT function. Long_t Getgvp() const; Interface to CINT function. const char * Getp2f2funcname(void* receiver) const; Interface to CINT function. int GetSecurityError() const; Interface to CINT function. int LoadFile(const char* path) const; Interface to CINT function. void LoadText(const char* text) const; Interface to CINT function. const char * MapCppName(const char* ) const; Interface to CINT function. void SetAlloclockfunc(void (*)() ) const; Interface to CINT function. void SetAllocunlockfunc(void (*)() ) const; Interface to CINT function. int SetClassAutoloading(int ) const; Interface to CINT function. void SetErrmsgcallback(void* p) const; Interface to CINT function. void Setgvp(Long_t ) const; Interface to CINT function. void SetRTLD_NOW() const; Interface to CINT function. void SetRTLD_LAZY() const; Interface to CINT function. void SetTempLevel(int val) const; Interface to CINT function. int UnloadFile(const char* path) const; Interface to CINT function. void CallFunc_Delete(void* func) const; Interface to CINT function. void CallFunc_Exec(CallFunc_t* func, void* address) const;",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:32368,Integrability,Interface,Interface,32368,"stdout. Return the previous state. void AddIncludePath(const char* path); Add the given path to the list of directories in which the interpreter; looks for include files. Only one path item can be specified at a; time, i.e. ""path1:path2"" is not supported. const char * GetIncludePath(); Refresh the list of include paths known to the interpreter and return it; with -I prepended. const char * GetSTLIncludePath() const; Return the directory containing CINT's stl cintdlls. int DisplayClass(FILE* fout, char* name, int base, int start) const; Interface to CINT function. int DisplayIncludePath(FILE* fout) const; Interface to CINT function. void * FindSym(const char* entry) const; Interface to CINT function. void GenericError(const char* error) const; Interface to CINT function. Long_t GetExecByteCode() const; Interface to CINT function. Long_t Getgvp() const; Interface to CINT function. const char * Getp2f2funcname(void* receiver) const; Interface to CINT function. int GetSecurityError() const; Interface to CINT function. int LoadFile(const char* path) const; Interface to CINT function. void LoadText(const char* text) const; Interface to CINT function. const char * MapCppName(const char* ) const; Interface to CINT function. void SetAlloclockfunc(void (*)() ) const; Interface to CINT function. void SetAllocunlockfunc(void (*)() ) const; Interface to CINT function. int SetClassAutoloading(int ) const; Interface to CINT function. void SetErrmsgcallback(void* p) const; Interface to CINT function. void Setgvp(Long_t ) const; Interface to CINT function. void SetRTLD_NOW() const; Interface to CINT function. void SetRTLD_LAZY() const; Interface to CINT function. void SetTempLevel(int val) const; Interface to CINT function. int UnloadFile(const char* path) const; Interface to CINT function. void CallFunc_Delete(void* func) const; Interface to CINT function. void CallFunc_Exec(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt(CallFunc_t* func",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:32434,Integrability,Interface,Interface,32434,"har* path); Add the given path to the list of directories in which the interpreter; looks for include files. Only one path item can be specified at a; time, i.e. ""path1:path2"" is not supported. const char * GetIncludePath(); Refresh the list of include paths known to the interpreter and return it; with -I prepended. const char * GetSTLIncludePath() const; Return the directory containing CINT's stl cintdlls. int DisplayClass(FILE* fout, char* name, int base, int start) const; Interface to CINT function. int DisplayIncludePath(FILE* fout) const; Interface to CINT function. void * FindSym(const char* entry) const; Interface to CINT function. void GenericError(const char* error) const; Interface to CINT function. Long_t GetExecByteCode() const; Interface to CINT function. Long_t Getgvp() const; Interface to CINT function. const char * Getp2f2funcname(void* receiver) const; Interface to CINT function. int GetSecurityError() const; Interface to CINT function. int LoadFile(const char* path) const; Interface to CINT function. void LoadText(const char* text) const; Interface to CINT function. const char * MapCppName(const char* ) const; Interface to CINT function. void SetAlloclockfunc(void (*)() ) const; Interface to CINT function. void SetAllocunlockfunc(void (*)() ) const; Interface to CINT function. int SetClassAutoloading(int ) const; Interface to CINT function. void SetErrmsgcallback(void* p) const; Interface to CINT function. void Setgvp(Long_t ) const; Interface to CINT function. void SetRTLD_NOW() const; Interface to CINT function. void SetRTLD_LAZY() const; Interface to CINT function. void SetTempLevel(int val) const; Interface to CINT function. int UnloadFile(const char* path) const; Interface to CINT function. void CallFunc_Delete(void* func) const; Interface to CINT function. void CallFunc_Exec(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t Cal",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:32501,Integrability,Interface,Interface,32501," the interpreter; looks for include files. Only one path item can be specified at a; time, i.e. ""path1:path2"" is not supported. const char * GetIncludePath(); Refresh the list of include paths known to the interpreter and return it; with -I prepended. const char * GetSTLIncludePath() const; Return the directory containing CINT's stl cintdlls. int DisplayClass(FILE* fout, char* name, int base, int start) const; Interface to CINT function. int DisplayIncludePath(FILE* fout) const; Interface to CINT function. void * FindSym(const char* entry) const; Interface to CINT function. void GenericError(const char* error) const; Interface to CINT function. Long_t GetExecByteCode() const; Interface to CINT function. Long_t Getgvp() const; Interface to CINT function. const char * Getp2f2funcname(void* receiver) const; Interface to CINT function. int GetSecurityError() const; Interface to CINT function. int LoadFile(const char* path) const; Interface to CINT function. void LoadText(const char* text) const; Interface to CINT function. const char * MapCppName(const char* ) const; Interface to CINT function. void SetAlloclockfunc(void (*)() ) const; Interface to CINT function. void SetAllocunlockfunc(void (*)() ) const; Interface to CINT function. int SetClassAutoloading(int ) const; Interface to CINT function. void SetErrmsgcallback(void* p) const; Interface to CINT function. void Setgvp(Long_t ) const; Interface to CINT function. void SetRTLD_NOW() const; Interface to CINT function. void SetRTLD_LAZY() const; Interface to CINT function. void SetTempLevel(int val) const; Interface to CINT function. int UnloadFile(const char* path) const; Interface to CINT function. void CallFunc_Delete(void* func) const; Interface to CINT function. void CallFunc_Exec(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt64(CallFunc_t* func, void* address) const; Interface t",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:32574,Integrability,Interface,Interface,32574,"pecified at a; time, i.e. ""path1:path2"" is not supported. const char * GetIncludePath(); Refresh the list of include paths known to the interpreter and return it; with -I prepended. const char * GetSTLIncludePath() const; Return the directory containing CINT's stl cintdlls. int DisplayClass(FILE* fout, char* name, int base, int start) const; Interface to CINT function. int DisplayIncludePath(FILE* fout) const; Interface to CINT function. void * FindSym(const char* entry) const; Interface to CINT function. void GenericError(const char* error) const; Interface to CINT function. Long_t GetExecByteCode() const; Interface to CINT function. Long_t Getgvp() const; Interface to CINT function. const char * Getp2f2funcname(void* receiver) const; Interface to CINT function. int GetSecurityError() const; Interface to CINT function. int LoadFile(const char* path) const; Interface to CINT function. void LoadText(const char* text) const; Interface to CINT function. const char * MapCppName(const char* ) const; Interface to CINT function. void SetAlloclockfunc(void (*)() ) const; Interface to CINT function. void SetAllocunlockfunc(void (*)() ) const; Interface to CINT function. int SetClassAutoloading(int ) const; Interface to CINT function. void SetErrmsgcallback(void* p) const; Interface to CINT function. void Setgvp(Long_t ) const; Interface to CINT function. void SetRTLD_NOW() const; Interface to CINT function. void SetRTLD_LAZY() const; Interface to CINT function. void SetTempLevel(int val) const; Interface to CINT function. int UnloadFile(const char* path) const; Interface to CINT function. void CallFunc_Delete(void* func) const; Interface to CINT function. void CallFunc_Exec(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt64(CallFunc_t* func, void* address) const; Interface to CINT function. Double_t CallFunc_ExecDouble(CallFunc_t* func, void* ",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:32644,Integrability,Interface,Interface,32644,"etIncludePath(); Refresh the list of include paths known to the interpreter and return it; with -I prepended. const char * GetSTLIncludePath() const; Return the directory containing CINT's stl cintdlls. int DisplayClass(FILE* fout, char* name, int base, int start) const; Interface to CINT function. int DisplayIncludePath(FILE* fout) const; Interface to CINT function. void * FindSym(const char* entry) const; Interface to CINT function. void GenericError(const char* error) const; Interface to CINT function. Long_t GetExecByteCode() const; Interface to CINT function. Long_t Getgvp() const; Interface to CINT function. const char * Getp2f2funcname(void* receiver) const; Interface to CINT function. int GetSecurityError() const; Interface to CINT function. int LoadFile(const char* path) const; Interface to CINT function. void LoadText(const char* text) const; Interface to CINT function. const char * MapCppName(const char* ) const; Interface to CINT function. void SetAlloclockfunc(void (*)() ) const; Interface to CINT function. void SetAllocunlockfunc(void (*)() ) const; Interface to CINT function. int SetClassAutoloading(int ) const; Interface to CINT function. void SetErrmsgcallback(void* p) const; Interface to CINT function. void Setgvp(Long_t ) const; Interface to CINT function. void SetRTLD_NOW() const; Interface to CINT function. void SetRTLD_LAZY() const; Interface to CINT function. void SetTempLevel(int val) const; Interface to CINT function. int UnloadFile(const char* path) const; Interface to CINT function. void CallFunc_Delete(void* func) const; Interface to CINT function. void CallFunc_Exec(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt64(CallFunc_t* func, void* address) const; Interface to CINT function. Double_t CallFunc_ExecDouble(CallFunc_t* func, void* address) const; Interface to CINT function. CallFunc_t * CallFunc_Facto",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:32716,Integrability,Interface,Interface,32716,"eter and return it; with -I prepended. const char * GetSTLIncludePath() const; Return the directory containing CINT's stl cintdlls. int DisplayClass(FILE* fout, char* name, int base, int start) const; Interface to CINT function. int DisplayIncludePath(FILE* fout) const; Interface to CINT function. void * FindSym(const char* entry) const; Interface to CINT function. void GenericError(const char* error) const; Interface to CINT function. Long_t GetExecByteCode() const; Interface to CINT function. Long_t Getgvp() const; Interface to CINT function. const char * Getp2f2funcname(void* receiver) const; Interface to CINT function. int GetSecurityError() const; Interface to CINT function. int LoadFile(const char* path) const; Interface to CINT function. void LoadText(const char* text) const; Interface to CINT function. const char * MapCppName(const char* ) const; Interface to CINT function. void SetAlloclockfunc(void (*)() ) const; Interface to CINT function. void SetAllocunlockfunc(void (*)() ) const; Interface to CINT function. int SetClassAutoloading(int ) const; Interface to CINT function. void SetErrmsgcallback(void* p) const; Interface to CINT function. void Setgvp(Long_t ) const; Interface to CINT function. void SetRTLD_NOW() const; Interface to CINT function. void SetRTLD_LAZY() const; Interface to CINT function. void SetTempLevel(int val) const; Interface to CINT function. int UnloadFile(const char* path) const; Interface to CINT function. void CallFunc_Delete(void* func) const; Interface to CINT function. void CallFunc_Exec(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt64(CallFunc_t* func, void* address) const; Interface to CINT function. Double_t CallFunc_ExecDouble(CallFunc_t* func, void* address) const; Interface to CINT function. CallFunc_t * CallFunc_Factory() const; Interface to CINT function. CallFunc_t * CallFunc_FactoryCo",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:32781,Integrability,Interface,Interface,32781,"h() const; Return the directory containing CINT's stl cintdlls. int DisplayClass(FILE* fout, char* name, int base, int start) const; Interface to CINT function. int DisplayIncludePath(FILE* fout) const; Interface to CINT function. void * FindSym(const char* entry) const; Interface to CINT function. void GenericError(const char* error) const; Interface to CINT function. Long_t GetExecByteCode() const; Interface to CINT function. Long_t Getgvp() const; Interface to CINT function. const char * Getp2f2funcname(void* receiver) const; Interface to CINT function. int GetSecurityError() const; Interface to CINT function. int LoadFile(const char* path) const; Interface to CINT function. void LoadText(const char* text) const; Interface to CINT function. const char * MapCppName(const char* ) const; Interface to CINT function. void SetAlloclockfunc(void (*)() ) const; Interface to CINT function. void SetAllocunlockfunc(void (*)() ) const; Interface to CINT function. int SetClassAutoloading(int ) const; Interface to CINT function. void SetErrmsgcallback(void* p) const; Interface to CINT function. void Setgvp(Long_t ) const; Interface to CINT function. void SetRTLD_NOW() const; Interface to CINT function. void SetRTLD_LAZY() const; Interface to CINT function. void SetTempLevel(int val) const; Interface to CINT function. int UnloadFile(const char* path) const; Interface to CINT function. void CallFunc_Delete(void* func) const; Interface to CINT function. void CallFunc_Exec(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt64(CallFunc_t* func, void* address) const; Interface to CINT function. Double_t CallFunc_ExecDouble(CallFunc_t* func, void* address) const; Interface to CINT function. CallFunc_t * CallFunc_Factory() const; Interface to CINT function. CallFunc_t * CallFunc_FactoryCopy(CallFunc_t* func) const; Interface to CINT function. MethodInfo_t ",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:32848,Integrability,Interface,Interface,32848,"t DisplayClass(FILE* fout, char* name, int base, int start) const; Interface to CINT function. int DisplayIncludePath(FILE* fout) const; Interface to CINT function. void * FindSym(const char* entry) const; Interface to CINT function. void GenericError(const char* error) const; Interface to CINT function. Long_t GetExecByteCode() const; Interface to CINT function. Long_t Getgvp() const; Interface to CINT function. const char * Getp2f2funcname(void* receiver) const; Interface to CINT function. int GetSecurityError() const; Interface to CINT function. int LoadFile(const char* path) const; Interface to CINT function. void LoadText(const char* text) const; Interface to CINT function. const char * MapCppName(const char* ) const; Interface to CINT function. void SetAlloclockfunc(void (*)() ) const; Interface to CINT function. void SetAllocunlockfunc(void (*)() ) const; Interface to CINT function. int SetClassAutoloading(int ) const; Interface to CINT function. void SetErrmsgcallback(void* p) const; Interface to CINT function. void Setgvp(Long_t ) const; Interface to CINT function. void SetRTLD_NOW() const; Interface to CINT function. void SetRTLD_LAZY() const; Interface to CINT function. void SetTempLevel(int val) const; Interface to CINT function. int UnloadFile(const char* path) const; Interface to CINT function. void CallFunc_Delete(void* func) const; Interface to CINT function. void CallFunc_Exec(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt64(CallFunc_t* func, void* address) const; Interface to CINT function. Double_t CallFunc_ExecDouble(CallFunc_t* func, void* address) const; Interface to CINT function. CallFunc_t * CallFunc_Factory() const; Interface to CINT function. CallFunc_t * CallFunc_FactoryCopy(CallFunc_t* func) const; Interface to CINT function. MethodInfo_t * CallFunc_FactoryMethod(CallFunc_t* func) const; Interface to CIN",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:32904,Integrability,Interface,Interface,32904,"nst; Interface to CINT function. int DisplayIncludePath(FILE* fout) const; Interface to CINT function. void * FindSym(const char* entry) const; Interface to CINT function. void GenericError(const char* error) const; Interface to CINT function. Long_t GetExecByteCode() const; Interface to CINT function. Long_t Getgvp() const; Interface to CINT function. const char * Getp2f2funcname(void* receiver) const; Interface to CINT function. int GetSecurityError() const; Interface to CINT function. int LoadFile(const char* path) const; Interface to CINT function. void LoadText(const char* text) const; Interface to CINT function. const char * MapCppName(const char* ) const; Interface to CINT function. void SetAlloclockfunc(void (*)() ) const; Interface to CINT function. void SetAllocunlockfunc(void (*)() ) const; Interface to CINT function. int SetClassAutoloading(int ) const; Interface to CINT function. void SetErrmsgcallback(void* p) const; Interface to CINT function. void Setgvp(Long_t ) const; Interface to CINT function. void SetRTLD_NOW() const; Interface to CINT function. void SetRTLD_LAZY() const; Interface to CINT function. void SetTempLevel(int val) const; Interface to CINT function. int UnloadFile(const char* path) const; Interface to CINT function. void CallFunc_Delete(void* func) const; Interface to CINT function. void CallFunc_Exec(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt64(CallFunc_t* func, void* address) const; Interface to CINT function. Double_t CallFunc_ExecDouble(CallFunc_t* func, void* address) const; Interface to CINT function. CallFunc_t * CallFunc_Factory() const; Interface to CINT function. CallFunc_t * CallFunc_FactoryCopy(CallFunc_t* func) const; Interface to CINT function. MethodInfo_t * CallFunc_FactoryMethod(CallFunc_t* func) const; Interface to CINT function. void CallFunc_Init(CallFunc_t* func) const; Inter",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:32958,Integrability,Interface,Interface,32958,"(FILE* fout) const; Interface to CINT function. void * FindSym(const char* entry) const; Interface to CINT function. void GenericError(const char* error) const; Interface to CINT function. Long_t GetExecByteCode() const; Interface to CINT function. Long_t Getgvp() const; Interface to CINT function. const char * Getp2f2funcname(void* receiver) const; Interface to CINT function. int GetSecurityError() const; Interface to CINT function. int LoadFile(const char* path) const; Interface to CINT function. void LoadText(const char* text) const; Interface to CINT function. const char * MapCppName(const char* ) const; Interface to CINT function. void SetAlloclockfunc(void (*)() ) const; Interface to CINT function. void SetAllocunlockfunc(void (*)() ) const; Interface to CINT function. int SetClassAutoloading(int ) const; Interface to CINT function. void SetErrmsgcallback(void* p) const; Interface to CINT function. void Setgvp(Long_t ) const; Interface to CINT function. void SetRTLD_NOW() const; Interface to CINT function. void SetRTLD_LAZY() const; Interface to CINT function. void SetTempLevel(int val) const; Interface to CINT function. int UnloadFile(const char* path) const; Interface to CINT function. void CallFunc_Delete(void* func) const; Interface to CINT function. void CallFunc_Exec(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt64(CallFunc_t* func, void* address) const; Interface to CINT function. Double_t CallFunc_ExecDouble(CallFunc_t* func, void* address) const; Interface to CINT function. CallFunc_t * CallFunc_Factory() const; Interface to CINT function. CallFunc_t * CallFunc_FactoryCopy(CallFunc_t* func) const; Interface to CINT function. MethodInfo_t * CallFunc_FactoryMethod(CallFunc_t* func) const; Interface to CINT function. void CallFunc_Init(CallFunc_t* func) const; Interface to CINT function. bool CallFunc_IsValid(CallFunc_t",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:33013,Integrability,Interface,Interface,33013," FindSym(const char* entry) const; Interface to CINT function. void GenericError(const char* error) const; Interface to CINT function. Long_t GetExecByteCode() const; Interface to CINT function. Long_t Getgvp() const; Interface to CINT function. const char * Getp2f2funcname(void* receiver) const; Interface to CINT function. int GetSecurityError() const; Interface to CINT function. int LoadFile(const char* path) const; Interface to CINT function. void LoadText(const char* text) const; Interface to CINT function. const char * MapCppName(const char* ) const; Interface to CINT function. void SetAlloclockfunc(void (*)() ) const; Interface to CINT function. void SetAllocunlockfunc(void (*)() ) const; Interface to CINT function. int SetClassAutoloading(int ) const; Interface to CINT function. void SetErrmsgcallback(void* p) const; Interface to CINT function. void Setgvp(Long_t ) const; Interface to CINT function. void SetRTLD_NOW() const; Interface to CINT function. void SetRTLD_LAZY() const; Interface to CINT function. void SetTempLevel(int val) const; Interface to CINT function. int UnloadFile(const char* path) const; Interface to CINT function. void CallFunc_Delete(void* func) const; Interface to CINT function. void CallFunc_Exec(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt64(CallFunc_t* func, void* address) const; Interface to CINT function. Double_t CallFunc_ExecDouble(CallFunc_t* func, void* address) const; Interface to CINT function. CallFunc_t * CallFunc_Factory() const; Interface to CINT function. CallFunc_t * CallFunc_FactoryCopy(CallFunc_t* func) const; Interface to CINT function. MethodInfo_t * CallFunc_FactoryMethod(CallFunc_t* func) const; Interface to CINT function. void CallFunc_Init(CallFunc_t* func) const; Interface to CINT function. bool CallFunc_IsValid(CallFunc_t* func) const; Interface to CINT function. void CallFun",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:33075,Integrability,Interface,Interface,33075,"on. void GenericError(const char* error) const; Interface to CINT function. Long_t GetExecByteCode() const; Interface to CINT function. Long_t Getgvp() const; Interface to CINT function. const char * Getp2f2funcname(void* receiver) const; Interface to CINT function. int GetSecurityError() const; Interface to CINT function. int LoadFile(const char* path) const; Interface to CINT function. void LoadText(const char* text) const; Interface to CINT function. const char * MapCppName(const char* ) const; Interface to CINT function. void SetAlloclockfunc(void (*)() ) const; Interface to CINT function. void SetAllocunlockfunc(void (*)() ) const; Interface to CINT function. int SetClassAutoloading(int ) const; Interface to CINT function. void SetErrmsgcallback(void* p) const; Interface to CINT function. void Setgvp(Long_t ) const; Interface to CINT function. void SetRTLD_NOW() const; Interface to CINT function. void SetRTLD_LAZY() const; Interface to CINT function. void SetTempLevel(int val) const; Interface to CINT function. int UnloadFile(const char* path) const; Interface to CINT function. void CallFunc_Delete(void* func) const; Interface to CINT function. void CallFunc_Exec(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt64(CallFunc_t* func, void* address) const; Interface to CINT function. Double_t CallFunc_ExecDouble(CallFunc_t* func, void* address) const; Interface to CINT function. CallFunc_t * CallFunc_Factory() const; Interface to CINT function. CallFunc_t * CallFunc_FactoryCopy(CallFunc_t* func) const; Interface to CINT function. MethodInfo_t * CallFunc_FactoryMethod(CallFunc_t* func) const; Interface to CINT function. void CallFunc_Init(CallFunc_t* func) const; Interface to CINT function. bool CallFunc_IsValid(CallFunc_t* func) const; Interface to CINT function. void CallFunc_ResetArg(CallFunc_t* func) const; Interface to CINT func",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:33143,Integrability,Interface,Interface,33143," function. Long_t GetExecByteCode() const; Interface to CINT function. Long_t Getgvp() const; Interface to CINT function. const char * Getp2f2funcname(void* receiver) const; Interface to CINT function. int GetSecurityError() const; Interface to CINT function. int LoadFile(const char* path) const; Interface to CINT function. void LoadText(const char* text) const; Interface to CINT function. const char * MapCppName(const char* ) const; Interface to CINT function. void SetAlloclockfunc(void (*)() ) const; Interface to CINT function. void SetAllocunlockfunc(void (*)() ) const; Interface to CINT function. int SetClassAutoloading(int ) const; Interface to CINT function. void SetErrmsgcallback(void* p) const; Interface to CINT function. void Setgvp(Long_t ) const; Interface to CINT function. void SetRTLD_NOW() const; Interface to CINT function. void SetRTLD_LAZY() const; Interface to CINT function. void SetTempLevel(int val) const; Interface to CINT function. int UnloadFile(const char* path) const; Interface to CINT function. void CallFunc_Delete(void* func) const; Interface to CINT function. void CallFunc_Exec(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt64(CallFunc_t* func, void* address) const; Interface to CINT function. Double_t CallFunc_ExecDouble(CallFunc_t* func, void* address) const; Interface to CINT function. CallFunc_t * CallFunc_Factory() const; Interface to CINT function. CallFunc_t * CallFunc_FactoryCopy(CallFunc_t* func) const; Interface to CINT function. MethodInfo_t * CallFunc_FactoryMethod(CallFunc_t* func) const; Interface to CINT function. void CallFunc_Init(CallFunc_t* func) const; Interface to CINT function. bool CallFunc_IsValid(CallFunc_t* func) const; Interface to CINT function. void CallFunc_ResetArg(CallFunc_t* func) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Long_t param) const;",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:33211,Integrability,Interface,Interface,33211,"n. Long_t Getgvp() const; Interface to CINT function. const char * Getp2f2funcname(void* receiver) const; Interface to CINT function. int GetSecurityError() const; Interface to CINT function. int LoadFile(const char* path) const; Interface to CINT function. void LoadText(const char* text) const; Interface to CINT function. const char * MapCppName(const char* ) const; Interface to CINT function. void SetAlloclockfunc(void (*)() ) const; Interface to CINT function. void SetAllocunlockfunc(void (*)() ) const; Interface to CINT function. int SetClassAutoloading(int ) const; Interface to CINT function. void SetErrmsgcallback(void* p) const; Interface to CINT function. void Setgvp(Long_t ) const; Interface to CINT function. void SetRTLD_NOW() const; Interface to CINT function. void SetRTLD_LAZY() const; Interface to CINT function. void SetTempLevel(int val) const; Interface to CINT function. int UnloadFile(const char* path) const; Interface to CINT function. void CallFunc_Delete(void* func) const; Interface to CINT function. void CallFunc_Exec(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt64(CallFunc_t* func, void* address) const; Interface to CINT function. Double_t CallFunc_ExecDouble(CallFunc_t* func, void* address) const; Interface to CINT function. CallFunc_t * CallFunc_Factory() const; Interface to CINT function. CallFunc_t * CallFunc_FactoryCopy(CallFunc_t* func) const; Interface to CINT function. MethodInfo_t * CallFunc_FactoryMethod(CallFunc_t* func) const; Interface to CINT function. void CallFunc_Init(CallFunc_t* func) const; Interface to CINT function. bool CallFunc_IsValid(CallFunc_t* func) const; Interface to CINT function. void CallFunc_ResetArg(CallFunc_t* func) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Long_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, ",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:33298,Integrability,Interface,Interface,33298,"cname(void* receiver) const; Interface to CINT function. int GetSecurityError() const; Interface to CINT function. int LoadFile(const char* path) const; Interface to CINT function. void LoadText(const char* text) const; Interface to CINT function. const char * MapCppName(const char* ) const; Interface to CINT function. void SetAlloclockfunc(void (*)() ) const; Interface to CINT function. void SetAllocunlockfunc(void (*)() ) const; Interface to CINT function. int SetClassAutoloading(int ) const; Interface to CINT function. void SetErrmsgcallback(void* p) const; Interface to CINT function. void Setgvp(Long_t ) const; Interface to CINT function. void SetRTLD_NOW() const; Interface to CINT function. void SetRTLD_LAZY() const; Interface to CINT function. void SetTempLevel(int val) const; Interface to CINT function. int UnloadFile(const char* path) const; Interface to CINT function. void CallFunc_Delete(void* func) const; Interface to CINT function. void CallFunc_Exec(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt64(CallFunc_t* func, void* address) const; Interface to CINT function. Double_t CallFunc_ExecDouble(CallFunc_t* func, void* address) const; Interface to CINT function. CallFunc_t * CallFunc_Factory() const; Interface to CINT function. CallFunc_t * CallFunc_FactoryCopy(CallFunc_t* func) const; Interface to CINT function. MethodInfo_t * CallFunc_FactoryMethod(CallFunc_t* func) const; Interface to CINT function. void CallFunc_Init(CallFunc_t* func) const; Interface to CINT function. bool CallFunc_IsValid(CallFunc_t* func) const; Interface to CINT function. void CallFunc_ResetArg(CallFunc_t* func) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Long_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Double_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFu",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:33390,Integrability,Interface,Interface,33390,"erface to CINT function. int LoadFile(const char* path) const; Interface to CINT function. void LoadText(const char* text) const; Interface to CINT function. const char * MapCppName(const char* ) const; Interface to CINT function. void SetAlloclockfunc(void (*)() ) const; Interface to CINT function. void SetAllocunlockfunc(void (*)() ) const; Interface to CINT function. int SetClassAutoloading(int ) const; Interface to CINT function. void SetErrmsgcallback(void* p) const; Interface to CINT function. void Setgvp(Long_t ) const; Interface to CINT function. void SetRTLD_NOW() const; Interface to CINT function. void SetRTLD_LAZY() const; Interface to CINT function. void SetTempLevel(int val) const; Interface to CINT function. int UnloadFile(const char* path) const; Interface to CINT function. void CallFunc_Delete(void* func) const; Interface to CINT function. void CallFunc_Exec(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt64(CallFunc_t* func, void* address) const; Interface to CINT function. Double_t CallFunc_ExecDouble(CallFunc_t* func, void* address) const; Interface to CINT function. CallFunc_t * CallFunc_Factory() const; Interface to CINT function. CallFunc_t * CallFunc_FactoryCopy(CallFunc_t* func) const; Interface to CINT function. MethodInfo_t * CallFunc_FactoryMethod(CallFunc_t* func) const; Interface to CINT function. void CallFunc_Init(CallFunc_t* func) const; Interface to CINT function. bool CallFunc_IsValid(CallFunc_t* func) const; Interface to CINT function. void CallFunc_ResetArg(CallFunc_t* func) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Long_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Double_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Long64_t param) const; Interface to CINT function. void CallFunc_SetArg(CallF",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:33484,Integrability,Interface,Interface,33484,"id LoadText(const char* text) const; Interface to CINT function. const char * MapCppName(const char* ) const; Interface to CINT function. void SetAlloclockfunc(void (*)() ) const; Interface to CINT function. void SetAllocunlockfunc(void (*)() ) const; Interface to CINT function. int SetClassAutoloading(int ) const; Interface to CINT function. void SetErrmsgcallback(void* p) const; Interface to CINT function. void Setgvp(Long_t ) const; Interface to CINT function. void SetRTLD_NOW() const; Interface to CINT function. void SetRTLD_LAZY() const; Interface to CINT function. void SetTempLevel(int val) const; Interface to CINT function. int UnloadFile(const char* path) const; Interface to CINT function. void CallFunc_Delete(void* func) const; Interface to CINT function. void CallFunc_Exec(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt64(CallFunc_t* func, void* address) const; Interface to CINT function. Double_t CallFunc_ExecDouble(CallFunc_t* func, void* address) const; Interface to CINT function. CallFunc_t * CallFunc_Factory() const; Interface to CINT function. CallFunc_t * CallFunc_FactoryCopy(CallFunc_t* func) const; Interface to CINT function. MethodInfo_t * CallFunc_FactoryMethod(CallFunc_t* func) const; Interface to CINT function. void CallFunc_Init(CallFunc_t* func) const; Interface to CINT function. bool CallFunc_IsValid(CallFunc_t* func) const; Interface to CINT function. void CallFunc_ResetArg(CallFunc_t* func) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Long_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Double_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Long64_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, ULong64_t param) const; Interface to CINT function. void CallFunc_SetArgArray(Ca",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:33581,Integrability,Interface,Interface,33581,"char* ) const; Interface to CINT function. void SetAlloclockfunc(void (*)() ) const; Interface to CINT function. void SetAllocunlockfunc(void (*)() ) const; Interface to CINT function. int SetClassAutoloading(int ) const; Interface to CINT function. void SetErrmsgcallback(void* p) const; Interface to CINT function. void Setgvp(Long_t ) const; Interface to CINT function. void SetRTLD_NOW() const; Interface to CINT function. void SetRTLD_LAZY() const; Interface to CINT function. void SetTempLevel(int val) const; Interface to CINT function. int UnloadFile(const char* path) const; Interface to CINT function. void CallFunc_Delete(void* func) const; Interface to CINT function. void CallFunc_Exec(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt64(CallFunc_t* func, void* address) const; Interface to CINT function. Double_t CallFunc_ExecDouble(CallFunc_t* func, void* address) const; Interface to CINT function. CallFunc_t * CallFunc_Factory() const; Interface to CINT function. CallFunc_t * CallFunc_FactoryCopy(CallFunc_t* func) const; Interface to CINT function. MethodInfo_t * CallFunc_FactoryMethod(CallFunc_t* func) const; Interface to CINT function. void CallFunc_Init(CallFunc_t* func) const; Interface to CINT function. bool CallFunc_IsValid(CallFunc_t* func) const; Interface to CINT function. void CallFunc_ResetArg(CallFunc_t* func) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Long_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Double_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Long64_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, ULong64_t param) const; Interface to CINT function. void CallFunc_SetArgArray(CallFunc_t* func, Long_t* paramArr, Int_t nparam) const; Interface to CINT function. void CallFunc",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:33648,Integrability,Interface,Interface,33648,"t; Interface to CINT function. void SetAllocunlockfunc(void (*)() ) const; Interface to CINT function. int SetClassAutoloading(int ) const; Interface to CINT function. void SetErrmsgcallback(void* p) const; Interface to CINT function. void Setgvp(Long_t ) const; Interface to CINT function. void SetRTLD_NOW() const; Interface to CINT function. void SetRTLD_LAZY() const; Interface to CINT function. void SetTempLevel(int val) const; Interface to CINT function. int UnloadFile(const char* path) const; Interface to CINT function. void CallFunc_Delete(void* func) const; Interface to CINT function. void CallFunc_Exec(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt64(CallFunc_t* func, void* address) const; Interface to CINT function. Double_t CallFunc_ExecDouble(CallFunc_t* func, void* address) const; Interface to CINT function. CallFunc_t * CallFunc_Factory() const; Interface to CINT function. CallFunc_t * CallFunc_FactoryCopy(CallFunc_t* func) const; Interface to CINT function. MethodInfo_t * CallFunc_FactoryMethod(CallFunc_t* func) const; Interface to CINT function. void CallFunc_Init(CallFunc_t* func) const; Interface to CINT function. bool CallFunc_IsValid(CallFunc_t* func) const; Interface to CINT function. void CallFunc_ResetArg(CallFunc_t* func) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Long_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Double_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Long64_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, ULong64_t param) const; Interface to CINT function. void CallFunc_SetArgArray(CallFunc_t* func, Long_t* paramArr, Int_t nparam) const; Interface to CINT function. void CallFunc_SetArgs(CallFunc_t* func, const char* param) const; Interface to CINT function. v",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:33735,Integrability,Interface,Interface,33735,"terface to CINT function. int SetClassAutoloading(int ) const; Interface to CINT function. void SetErrmsgcallback(void* p) const; Interface to CINT function. void Setgvp(Long_t ) const; Interface to CINT function. void SetRTLD_NOW() const; Interface to CINT function. void SetRTLD_LAZY() const; Interface to CINT function. void SetTempLevel(int val) const; Interface to CINT function. int UnloadFile(const char* path) const; Interface to CINT function. void CallFunc_Delete(void* func) const; Interface to CINT function. void CallFunc_Exec(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt64(CallFunc_t* func, void* address) const; Interface to CINT function. Double_t CallFunc_ExecDouble(CallFunc_t* func, void* address) const; Interface to CINT function. CallFunc_t * CallFunc_Factory() const; Interface to CINT function. CallFunc_t * CallFunc_FactoryCopy(CallFunc_t* func) const; Interface to CINT function. MethodInfo_t * CallFunc_FactoryMethod(CallFunc_t* func) const; Interface to CINT function. void CallFunc_Init(CallFunc_t* func) const; Interface to CINT function. bool CallFunc_IsValid(CallFunc_t* func) const; Interface to CINT function. void CallFunc_ResetArg(CallFunc_t* func) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Long_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Double_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Long64_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, ULong64_t param) const; Interface to CINT function. void CallFunc_SetArgArray(CallFunc_t* func, Long_t* paramArr, Int_t nparam) const; Interface to CINT function. void CallFunc_SetArgs(CallFunc_t* func, const char* param) const; Interface to CINT function. void CallFunc_SetFunc(CallFunc_t* func, ClassInfo_t* info, const char* method,",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:33826,Integrability,Interface,Interface,33826,". void SetErrmsgcallback(void* p) const; Interface to CINT function. void Setgvp(Long_t ) const; Interface to CINT function. void SetRTLD_NOW() const; Interface to CINT function. void SetRTLD_LAZY() const; Interface to CINT function. void SetTempLevel(int val) const; Interface to CINT function. int UnloadFile(const char* path) const; Interface to CINT function. void CallFunc_Delete(void* func) const; Interface to CINT function. void CallFunc_Exec(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt64(CallFunc_t* func, void* address) const; Interface to CINT function. Double_t CallFunc_ExecDouble(CallFunc_t* func, void* address) const; Interface to CINT function. CallFunc_t * CallFunc_Factory() const; Interface to CINT function. CallFunc_t * CallFunc_FactoryCopy(CallFunc_t* func) const; Interface to CINT function. MethodInfo_t * CallFunc_FactoryMethod(CallFunc_t* func) const; Interface to CINT function. void CallFunc_Init(CallFunc_t* func) const; Interface to CINT function. bool CallFunc_IsValid(CallFunc_t* func) const; Interface to CINT function. void CallFunc_ResetArg(CallFunc_t* func) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Long_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Double_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Long64_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, ULong64_t param) const; Interface to CINT function. void CallFunc_SetArgArray(CallFunc_t* func, Long_t* paramArr, Int_t nparam) const; Interface to CINT function. void CallFunc_SetArgs(CallFunc_t* func, const char* param) const; Interface to CINT function. void CallFunc_SetFunc(CallFunc_t* func, ClassInfo_t* info, const char* method, const char* params, Long_t* Offset) const; Interface to CINT function. void CallFunc_Set",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:33898,Integrability,Interface,Interface,33898,"ong_t ) const; Interface to CINT function. void SetRTLD_NOW() const; Interface to CINT function. void SetRTLD_LAZY() const; Interface to CINT function. void SetTempLevel(int val) const; Interface to CINT function. int UnloadFile(const char* path) const; Interface to CINT function. void CallFunc_Delete(void* func) const; Interface to CINT function. void CallFunc_Exec(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt64(CallFunc_t* func, void* address) const; Interface to CINT function. Double_t CallFunc_ExecDouble(CallFunc_t* func, void* address) const; Interface to CINT function. CallFunc_t * CallFunc_Factory() const; Interface to CINT function. CallFunc_t * CallFunc_FactoryCopy(CallFunc_t* func) const; Interface to CINT function. MethodInfo_t * CallFunc_FactoryMethod(CallFunc_t* func) const; Interface to CINT function. void CallFunc_Init(CallFunc_t* func) const; Interface to CINT function. bool CallFunc_IsValid(CallFunc_t* func) const; Interface to CINT function. void CallFunc_ResetArg(CallFunc_t* func) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Long_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Double_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Long64_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, ULong64_t param) const; Interface to CINT function. void CallFunc_SetArgArray(CallFunc_t* func, Long_t* paramArr, Int_t nparam) const; Interface to CINT function. void CallFunc_SetArgs(CallFunc_t* func, const char* param) const; Interface to CINT function. void CallFunc_SetFunc(CallFunc_t* func, ClassInfo_t* info, const char* method, const char* params, Long_t* Offset) const; Interface to CINT function. void CallFunc_SetFunc(CallFunc_t* func, MethodInfo_t* info) const; Interface to CINT function. voi",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:33973,Integrability,Interface,Interface,33973,"rface to CINT function. void SetRTLD_LAZY() const; Interface to CINT function. void SetTempLevel(int val) const; Interface to CINT function. int UnloadFile(const char* path) const; Interface to CINT function. void CallFunc_Delete(void* func) const; Interface to CINT function. void CallFunc_Exec(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt64(CallFunc_t* func, void* address) const; Interface to CINT function. Double_t CallFunc_ExecDouble(CallFunc_t* func, void* address) const; Interface to CINT function. CallFunc_t * CallFunc_Factory() const; Interface to CINT function. CallFunc_t * CallFunc_FactoryCopy(CallFunc_t* func) const; Interface to CINT function. MethodInfo_t * CallFunc_FactoryMethod(CallFunc_t* func) const; Interface to CINT function. void CallFunc_Init(CallFunc_t* func) const; Interface to CINT function. bool CallFunc_IsValid(CallFunc_t* func) const; Interface to CINT function. void CallFunc_ResetArg(CallFunc_t* func) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Long_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Double_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Long64_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, ULong64_t param) const; Interface to CINT function. void CallFunc_SetArgArray(CallFunc_t* func, Long_t* paramArr, Int_t nparam) const; Interface to CINT function. void CallFunc_SetArgs(CallFunc_t* func, const char* param) const; Interface to CINT function. void CallFunc_SetFunc(CallFunc_t* func, ClassInfo_t* info, const char* method, const char* params, Long_t* Offset) const; Interface to CINT function. void CallFunc_SetFunc(CallFunc_t* func, MethodInfo_t* info) const; Interface to CINT function. void CallFunc_SetFuncProto(CallFunc_t* func, ClassInfo_t* info, const char* m",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:34049,Integrability,Interface,Interface,34049,"n. void SetTempLevel(int val) const; Interface to CINT function. int UnloadFile(const char* path) const; Interface to CINT function. void CallFunc_Delete(void* func) const; Interface to CINT function. void CallFunc_Exec(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt64(CallFunc_t* func, void* address) const; Interface to CINT function. Double_t CallFunc_ExecDouble(CallFunc_t* func, void* address) const; Interface to CINT function. CallFunc_t * CallFunc_Factory() const; Interface to CINT function. CallFunc_t * CallFunc_FactoryCopy(CallFunc_t* func) const; Interface to CINT function. MethodInfo_t * CallFunc_FactoryMethod(CallFunc_t* func) const; Interface to CINT function. void CallFunc_Init(CallFunc_t* func) const; Interface to CINT function. bool CallFunc_IsValid(CallFunc_t* func) const; Interface to CINT function. void CallFunc_ResetArg(CallFunc_t* func) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Long_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Double_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Long64_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, ULong64_t param) const; Interface to CINT function. void CallFunc_SetArgArray(CallFunc_t* func, Long_t* paramArr, Int_t nparam) const; Interface to CINT function. void CallFunc_SetArgs(CallFunc_t* func, const char* param) const; Interface to CINT function. void CallFunc_SetFunc(CallFunc_t* func, ClassInfo_t* info, const char* method, const char* params, Long_t* Offset) const; Interface to CINT function. void CallFunc_SetFunc(CallFunc_t* func, MethodInfo_t* info) const; Interface to CINT function. void CallFunc_SetFuncProto(CallFunc_t* func, ClassInfo_t* info, const char* method, const char* proto, Long_t* Offset) const; Interface to CINT function",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:34137,Integrability,Interface,Interface,34137,"nst char* path) const; Interface to CINT function. void CallFunc_Delete(void* func) const; Interface to CINT function. void CallFunc_Exec(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt64(CallFunc_t* func, void* address) const; Interface to CINT function. Double_t CallFunc_ExecDouble(CallFunc_t* func, void* address) const; Interface to CINT function. CallFunc_t * CallFunc_Factory() const; Interface to CINT function. CallFunc_t * CallFunc_FactoryCopy(CallFunc_t* func) const; Interface to CINT function. MethodInfo_t * CallFunc_FactoryMethod(CallFunc_t* func) const; Interface to CINT function. void CallFunc_Init(CallFunc_t* func) const; Interface to CINT function. bool CallFunc_IsValid(CallFunc_t* func) const; Interface to CINT function. void CallFunc_ResetArg(CallFunc_t* func) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Long_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Double_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Long64_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, ULong64_t param) const; Interface to CINT function. void CallFunc_SetArgArray(CallFunc_t* func, Long_t* paramArr, Int_t nparam) const; Interface to CINT function. void CallFunc_SetArgs(CallFunc_t* func, const char* param) const; Interface to CINT function. void CallFunc_SetFunc(CallFunc_t* func, ClassInfo_t* info, const char* method, const char* params, Long_t* Offset) const; Interface to CINT function. void CallFunc_SetFunc(CallFunc_t* func, MethodInfo_t* info) const; Interface to CINT function. void CallFunc_SetFuncProto(CallFunc_t* func, ClassInfo_t* info, const char* method, const char* proto, Long_t* Offset) const; Interface to CINT function. Long_t ClassInfo_ClassProperty(ClassInfo_t* info) const; Interface to CINT funct",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:34227,Integrability,Interface,Interface,34227,"; Interface to CINT function. void CallFunc_Exec(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt64(CallFunc_t* func, void* address) const; Interface to CINT function. Double_t CallFunc_ExecDouble(CallFunc_t* func, void* address) const; Interface to CINT function. CallFunc_t * CallFunc_Factory() const; Interface to CINT function. CallFunc_t * CallFunc_FactoryCopy(CallFunc_t* func) const; Interface to CINT function. MethodInfo_t * CallFunc_FactoryMethod(CallFunc_t* func) const; Interface to CINT function. void CallFunc_Init(CallFunc_t* func) const; Interface to CINT function. bool CallFunc_IsValid(CallFunc_t* func) const; Interface to CINT function. void CallFunc_ResetArg(CallFunc_t* func) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Long_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Double_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Long64_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, ULong64_t param) const; Interface to CINT function. void CallFunc_SetArgArray(CallFunc_t* func, Long_t* paramArr, Int_t nparam) const; Interface to CINT function. void CallFunc_SetArgs(CallFunc_t* func, const char* param) const; Interface to CINT function. void CallFunc_SetFunc(CallFunc_t* func, ClassInfo_t* info, const char* method, const char* params, Long_t* Offset) const; Interface to CINT function. void CallFunc_SetFunc(CallFunc_t* func, MethodInfo_t* info) const; Interface to CINT function. void CallFunc_SetFuncProto(CallFunc_t* func, ClassInfo_t* info, const char* method, const char* proto, Long_t* Offset) const; Interface to CINT function. Long_t ClassInfo_ClassProperty(ClassInfo_t* info) const; Interface to CINT function. void ClassInfo_Delete(ClassInfo_t* info) const; Interface to CINT function. void Cla",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:34317,Integrability,Interface,Interface,34317,"nterface to CINT function. Long_t CallFunc_ExecInt(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt64(CallFunc_t* func, void* address) const; Interface to CINT function. Double_t CallFunc_ExecDouble(CallFunc_t* func, void* address) const; Interface to CINT function. CallFunc_t * CallFunc_Factory() const; Interface to CINT function. CallFunc_t * CallFunc_FactoryCopy(CallFunc_t* func) const; Interface to CINT function. MethodInfo_t * CallFunc_FactoryMethod(CallFunc_t* func) const; Interface to CINT function. void CallFunc_Init(CallFunc_t* func) const; Interface to CINT function. bool CallFunc_IsValid(CallFunc_t* func) const; Interface to CINT function. void CallFunc_ResetArg(CallFunc_t* func) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Long_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Double_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Long64_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, ULong64_t param) const; Interface to CINT function. void CallFunc_SetArgArray(CallFunc_t* func, Long_t* paramArr, Int_t nparam) const; Interface to CINT function. void CallFunc_SetArgs(CallFunc_t* func, const char* param) const; Interface to CINT function. void CallFunc_SetFunc(CallFunc_t* func, ClassInfo_t* info, const char* method, const char* params, Long_t* Offset) const; Interface to CINT function. void CallFunc_SetFunc(CallFunc_t* func, MethodInfo_t* info) const; Interface to CINT function. void CallFunc_SetFuncProto(CallFunc_t* func, ClassInfo_t* info, const char* method, const char* proto, Long_t* Offset) const; Interface to CINT function. Long_t ClassInfo_ClassProperty(ClassInfo_t* info) const; Interface to CINT function. void ClassInfo_Delete(ClassInfo_t* info) const; Interface to CINT function. void ClassInfo_Delete(ClassInfo_t* info, void* arena) const; Interface to CINT function. void Clas",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:34408,Integrability,Interface,Interface,34408," Interface to CINT function. Long_t CallFunc_ExecInt64(CallFunc_t* func, void* address) const; Interface to CINT function. Double_t CallFunc_ExecDouble(CallFunc_t* func, void* address) const; Interface to CINT function. CallFunc_t * CallFunc_Factory() const; Interface to CINT function. CallFunc_t * CallFunc_FactoryCopy(CallFunc_t* func) const; Interface to CINT function. MethodInfo_t * CallFunc_FactoryMethod(CallFunc_t* func) const; Interface to CINT function. void CallFunc_Init(CallFunc_t* func) const; Interface to CINT function. bool CallFunc_IsValid(CallFunc_t* func) const; Interface to CINT function. void CallFunc_ResetArg(CallFunc_t* func) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Long_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Double_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Long64_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, ULong64_t param) const; Interface to CINT function. void CallFunc_SetArgArray(CallFunc_t* func, Long_t* paramArr, Int_t nparam) const; Interface to CINT function. void CallFunc_SetArgs(CallFunc_t* func, const char* param) const; Interface to CINT function. void CallFunc_SetFunc(CallFunc_t* func, ClassInfo_t* info, const char* method, const char* params, Long_t* Offset) const; Interface to CINT function. void CallFunc_SetFunc(CallFunc_t* func, MethodInfo_t* info) const; Interface to CINT function. void CallFunc_SetFuncProto(CallFunc_t* func, ClassInfo_t* info, const char* method, const char* proto, Long_t* Offset) const; Interface to CINT function. Long_t ClassInfo_ClassProperty(ClassInfo_t* info) const; Interface to CINT function. void ClassInfo_Delete(ClassInfo_t* info) const; Interface to CINT function. void ClassInfo_Delete(ClassInfo_t* info, void* arena) const; Interface to CINT function. void ClassInfo_DeleteArray(ClassInfo_t* info, void* arena, bool dtorOnly) const; Interface to CINT f",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:34519,Integrability,Interface,Interface,34519,"ace to CINT function. Double_t CallFunc_ExecDouble(CallFunc_t* func, void* address) const; Interface to CINT function. CallFunc_t * CallFunc_Factory() const; Interface to CINT function. CallFunc_t * CallFunc_FactoryCopy(CallFunc_t* func) const; Interface to CINT function. MethodInfo_t * CallFunc_FactoryMethod(CallFunc_t* func) const; Interface to CINT function. void CallFunc_Init(CallFunc_t* func) const; Interface to CINT function. bool CallFunc_IsValid(CallFunc_t* func) const; Interface to CINT function. void CallFunc_ResetArg(CallFunc_t* func) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Long_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Double_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Long64_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, ULong64_t param) const; Interface to CINT function. void CallFunc_SetArgArray(CallFunc_t* func, Long_t* paramArr, Int_t nparam) const; Interface to CINT function. void CallFunc_SetArgs(CallFunc_t* func, const char* param) const; Interface to CINT function. void CallFunc_SetFunc(CallFunc_t* func, ClassInfo_t* info, const char* method, const char* params, Long_t* Offset) const; Interface to CINT function. void CallFunc_SetFunc(CallFunc_t* func, MethodInfo_t* info) const; Interface to CINT function. void CallFunc_SetFuncProto(CallFunc_t* func, ClassInfo_t* info, const char* method, const char* proto, Long_t* Offset) const; Interface to CINT function. Long_t ClassInfo_ClassProperty(ClassInfo_t* info) const; Interface to CINT function. void ClassInfo_Delete(ClassInfo_t* info) const; Interface to CINT function. void ClassInfo_Delete(ClassInfo_t* info, void* arena) const; Interface to CINT function. void ClassInfo_DeleteArray(ClassInfo_t* info, void* arena, bool dtorOnly) const; Interface to CINT function. void ClassInfo_Destruct(ClassInfo_t* info, void* arena) const; Interface to CINT function. C",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:34613,Integrability,Interface,Interface,34613," CINT function. CallFunc_t * CallFunc_Factory() const; Interface to CINT function. CallFunc_t * CallFunc_FactoryCopy(CallFunc_t* func) const; Interface to CINT function. MethodInfo_t * CallFunc_FactoryMethod(CallFunc_t* func) const; Interface to CINT function. void CallFunc_Init(CallFunc_t* func) const; Interface to CINT function. bool CallFunc_IsValid(CallFunc_t* func) const; Interface to CINT function. void CallFunc_ResetArg(CallFunc_t* func) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Long_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Double_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Long64_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, ULong64_t param) const; Interface to CINT function. void CallFunc_SetArgArray(CallFunc_t* func, Long_t* paramArr, Int_t nparam) const; Interface to CINT function. void CallFunc_SetArgs(CallFunc_t* func, const char* param) const; Interface to CINT function. void CallFunc_SetFunc(CallFunc_t* func, ClassInfo_t* info, const char* method, const char* params, Long_t* Offset) const; Interface to CINT function. void CallFunc_SetFunc(CallFunc_t* func, MethodInfo_t* info) const; Interface to CINT function. void CallFunc_SetFuncProto(CallFunc_t* func, ClassInfo_t* info, const char* method, const char* proto, Long_t* Offset) const; Interface to CINT function. Long_t ClassInfo_ClassProperty(ClassInfo_t* info) const; Interface to CINT function. void ClassInfo_Delete(ClassInfo_t* info) const; Interface to CINT function. void ClassInfo_Delete(ClassInfo_t* info, void* arena) const; Interface to CINT function. void ClassInfo_DeleteArray(ClassInfo_t* info, void* arena, bool dtorOnly) const; Interface to CINT function. void ClassInfo_Destruct(ClassInfo_t* info, void* arena) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory() const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(Cl",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:34763,Integrability,Interface,Interface,34763,"unc_t* func) const; Interface to CINT function. MethodInfo_t * CallFunc_FactoryMethod(CallFunc_t* func) const; Interface to CINT function. void CallFunc_Init(CallFunc_t* func) const; Interface to CINT function. bool CallFunc_IsValid(CallFunc_t* func) const; Interface to CINT function. void CallFunc_ResetArg(CallFunc_t* func) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Long_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Double_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Long64_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, ULong64_t param) const; Interface to CINT function. void CallFunc_SetArgArray(CallFunc_t* func, Long_t* paramArr, Int_t nparam) const; Interface to CINT function. void CallFunc_SetArgs(CallFunc_t* func, const char* param) const; Interface to CINT function. void CallFunc_SetFunc(CallFunc_t* func, ClassInfo_t* info, const char* method, const char* params, Long_t* Offset) const; Interface to CINT function. void CallFunc_SetFunc(CallFunc_t* func, MethodInfo_t* info) const; Interface to CINT function. void CallFunc_SetFuncProto(CallFunc_t* func, ClassInfo_t* info, const char* method, const char* proto, Long_t* Offset) const; Interface to CINT function. Long_t ClassInfo_ClassProperty(ClassInfo_t* info) const; Interface to CINT function. void ClassInfo_Delete(ClassInfo_t* info) const; Interface to CINT function. void ClassInfo_Delete(ClassInfo_t* info, void* arena) const; Interface to CINT function. void ClassInfo_DeleteArray(ClassInfo_t* info, void* arena, bool dtorOnly) const; Interface to CINT function. void ClassInfo_Destruct(ClassInfo_t* info, void* arena) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory() const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(ClassInfo_t* cl) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(const char* name) const; Interface to CI",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:34858,Integrability,Interface,Interface,34858,"o CINT function. void CallFunc_Init(CallFunc_t* func) const; Interface to CINT function. bool CallFunc_IsValid(CallFunc_t* func) const; Interface to CINT function. void CallFunc_ResetArg(CallFunc_t* func) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Long_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Double_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Long64_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, ULong64_t param) const; Interface to CINT function. void CallFunc_SetArgArray(CallFunc_t* func, Long_t* paramArr, Int_t nparam) const; Interface to CINT function. void CallFunc_SetArgs(CallFunc_t* func, const char* param) const; Interface to CINT function. void CallFunc_SetFunc(CallFunc_t* func, ClassInfo_t* info, const char* method, const char* params, Long_t* Offset) const; Interface to CINT function. void CallFunc_SetFunc(CallFunc_t* func, MethodInfo_t* info) const; Interface to CINT function. void CallFunc_SetFuncProto(CallFunc_t* func, ClassInfo_t* info, const char* method, const char* proto, Long_t* Offset) const; Interface to CINT function. Long_t ClassInfo_ClassProperty(ClassInfo_t* info) const; Interface to CINT function. void ClassInfo_Delete(ClassInfo_t* info) const; Interface to CINT function. void ClassInfo_Delete(ClassInfo_t* info, void* arena) const; Interface to CINT function. void ClassInfo_DeleteArray(ClassInfo_t* info, void* arena, bool dtorOnly) const; Interface to CINT function. void ClassInfo_Destruct(ClassInfo_t* info, void* arena) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory() const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(ClassInfo_t* cl) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(const char* name) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(G__value* ) const; Interface to CINT function. int ClassInfo_GetMethodNArg(Cla",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:35012,Integrability,Interface,Interface,35012,"nc) const; Interface to CINT function. void CallFunc_ResetArg(CallFunc_t* func) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Long_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Double_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Long64_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, ULong64_t param) const; Interface to CINT function. void CallFunc_SetArgArray(CallFunc_t* func, Long_t* paramArr, Int_t nparam) const; Interface to CINT function. void CallFunc_SetArgs(CallFunc_t* func, const char* param) const; Interface to CINT function. void CallFunc_SetFunc(CallFunc_t* func, ClassInfo_t* info, const char* method, const char* params, Long_t* Offset) const; Interface to CINT function. void CallFunc_SetFunc(CallFunc_t* func, MethodInfo_t* info) const; Interface to CINT function. void CallFunc_SetFuncProto(CallFunc_t* func, ClassInfo_t* info, const char* method, const char* proto, Long_t* Offset) const; Interface to CINT function. Long_t ClassInfo_ClassProperty(ClassInfo_t* info) const; Interface to CINT function. void ClassInfo_Delete(ClassInfo_t* info) const; Interface to CINT function. void ClassInfo_Delete(ClassInfo_t* info, void* arena) const; Interface to CINT function. void ClassInfo_DeleteArray(ClassInfo_t* info, void* arena, bool dtorOnly) const; Interface to CINT function. void ClassInfo_Destruct(ClassInfo_t* info, void* arena) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory() const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(ClassInfo_t* cl) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(const char* name) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(G__value* ) const; Interface to CINT function. int ClassInfo_GetMethodNArg(ClassInfo_t* info, const char* method, const char* proto) const; Interface to CINT function. bool ClassInfo_HasDefaultConstruct",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:35097,Integrability,Interface,Interface,35097," CallFunc_SetArg(CallFunc_t* func, Long_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Double_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Long64_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, ULong64_t param) const; Interface to CINT function. void CallFunc_SetArgArray(CallFunc_t* func, Long_t* paramArr, Int_t nparam) const; Interface to CINT function. void CallFunc_SetArgs(CallFunc_t* func, const char* param) const; Interface to CINT function. void CallFunc_SetFunc(CallFunc_t* func, ClassInfo_t* info, const char* method, const char* params, Long_t* Offset) const; Interface to CINT function. void CallFunc_SetFunc(CallFunc_t* func, MethodInfo_t* info) const; Interface to CINT function. void CallFunc_SetFuncProto(CallFunc_t* func, ClassInfo_t* info, const char* method, const char* proto, Long_t* Offset) const; Interface to CINT function. Long_t ClassInfo_ClassProperty(ClassInfo_t* info) const; Interface to CINT function. void ClassInfo_Delete(ClassInfo_t* info) const; Interface to CINT function. void ClassInfo_Delete(ClassInfo_t* info, void* arena) const; Interface to CINT function. void ClassInfo_DeleteArray(ClassInfo_t* info, void* arena, bool dtorOnly) const; Interface to CINT function. void ClassInfo_Destruct(ClassInfo_t* info, void* arena) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory() const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(ClassInfo_t* cl) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(const char* name) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(G__value* ) const; Interface to CINT function. int ClassInfo_GetMethodNArg(ClassInfo_t* info, const char* method, const char* proto) const; Interface to CINT function. bool ClassInfo_HasDefaultConstructor(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_HasMethod(ClassInfo_t* info, const char* name) c",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:35173,Integrability,Interface,Interface,35173,"n. void CallFunc_SetArg(CallFunc_t* func, Double_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, Long64_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, ULong64_t param) const; Interface to CINT function. void CallFunc_SetArgArray(CallFunc_t* func, Long_t* paramArr, Int_t nparam) const; Interface to CINT function. void CallFunc_SetArgs(CallFunc_t* func, const char* param) const; Interface to CINT function. void CallFunc_SetFunc(CallFunc_t* func, ClassInfo_t* info, const char* method, const char* params, Long_t* Offset) const; Interface to CINT function. void CallFunc_SetFunc(CallFunc_t* func, MethodInfo_t* info) const; Interface to CINT function. void CallFunc_SetFuncProto(CallFunc_t* func, ClassInfo_t* info, const char* method, const char* proto, Long_t* Offset) const; Interface to CINT function. Long_t ClassInfo_ClassProperty(ClassInfo_t* info) const; Interface to CINT function. void ClassInfo_Delete(ClassInfo_t* info) const; Interface to CINT function. void ClassInfo_Delete(ClassInfo_t* info, void* arena) const; Interface to CINT function. void ClassInfo_DeleteArray(ClassInfo_t* info, void* arena, bool dtorOnly) const; Interface to CINT function. void ClassInfo_Destruct(ClassInfo_t* info, void* arena) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory() const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(ClassInfo_t* cl) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(const char* name) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(G__value* ) const; Interface to CINT function. int ClassInfo_GetMethodNArg(ClassInfo_t* info, const char* method, const char* proto) const; Interface to CINT function. bool ClassInfo_HasDefaultConstructor(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_HasMethod(ClassInfo_t* info, const char* name) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, const c",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:35262,Integrability,Interface,Interface,35262," function. void CallFunc_SetArg(CallFunc_t* func, Long64_t param) const; Interface to CINT function. void CallFunc_SetArg(CallFunc_t* func, ULong64_t param) const; Interface to CINT function. void CallFunc_SetArgArray(CallFunc_t* func, Long_t* paramArr, Int_t nparam) const; Interface to CINT function. void CallFunc_SetArgs(CallFunc_t* func, const char* param) const; Interface to CINT function. void CallFunc_SetFunc(CallFunc_t* func, ClassInfo_t* info, const char* method, const char* params, Long_t* Offset) const; Interface to CINT function. void CallFunc_SetFunc(CallFunc_t* func, MethodInfo_t* info) const; Interface to CINT function. void CallFunc_SetFuncProto(CallFunc_t* func, ClassInfo_t* info, const char* method, const char* proto, Long_t* Offset) const; Interface to CINT function. Long_t ClassInfo_ClassProperty(ClassInfo_t* info) const; Interface to CINT function. void ClassInfo_Delete(ClassInfo_t* info) const; Interface to CINT function. void ClassInfo_Delete(ClassInfo_t* info, void* arena) const; Interface to CINT function. void ClassInfo_DeleteArray(ClassInfo_t* info, void* arena, bool dtorOnly) const; Interface to CINT function. void ClassInfo_Destruct(ClassInfo_t* info, void* arena) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory() const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(ClassInfo_t* cl) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(const char* name) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(G__value* ) const; Interface to CINT function. int ClassInfo_GetMethodNArg(ClassInfo_t* info, const char* method, const char* proto) const; Interface to CINT function. bool ClassInfo_HasDefaultConstructor(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_HasMethod(ClassInfo_t* info, const char* name) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, const char* funcname) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* ",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:35371,Integrability,Interface,Interface,35371,". void CallFunc_SetArg(CallFunc_t* func, ULong64_t param) const; Interface to CINT function. void CallFunc_SetArgArray(CallFunc_t* func, Long_t* paramArr, Int_t nparam) const; Interface to CINT function. void CallFunc_SetArgs(CallFunc_t* func, const char* param) const; Interface to CINT function. void CallFunc_SetFunc(CallFunc_t* func, ClassInfo_t* info, const char* method, const char* params, Long_t* Offset) const; Interface to CINT function. void CallFunc_SetFunc(CallFunc_t* func, MethodInfo_t* info) const; Interface to CINT function. void CallFunc_SetFuncProto(CallFunc_t* func, ClassInfo_t* info, const char* method, const char* proto, Long_t* Offset) const; Interface to CINT function. Long_t ClassInfo_ClassProperty(ClassInfo_t* info) const; Interface to CINT function. void ClassInfo_Delete(ClassInfo_t* info) const; Interface to CINT function. void ClassInfo_Delete(ClassInfo_t* info, void* arena) const; Interface to CINT function. void ClassInfo_DeleteArray(ClassInfo_t* info, void* arena, bool dtorOnly) const; Interface to CINT function. void ClassInfo_Destruct(ClassInfo_t* info, void* arena) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory() const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(ClassInfo_t* cl) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(const char* name) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(G__value* ) const; Interface to CINT function. int ClassInfo_GetMethodNArg(ClassInfo_t* info, const char* method, const char* proto) const; Interface to CINT function. bool ClassInfo_HasDefaultConstructor(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_HasMethod(ClassInfo_t* info, const char* name) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, const char* funcname) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, int tagnum) const; Interface to CINT function. bool ClassInfo_IsBase(ClassInfo_t* info, const",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:35462,Integrability,Interface,Interface,35462,"llFunc_SetArgArray(CallFunc_t* func, Long_t* paramArr, Int_t nparam) const; Interface to CINT function. void CallFunc_SetArgs(CallFunc_t* func, const char* param) const; Interface to CINT function. void CallFunc_SetFunc(CallFunc_t* func, ClassInfo_t* info, const char* method, const char* params, Long_t* Offset) const; Interface to CINT function. void CallFunc_SetFunc(CallFunc_t* func, MethodInfo_t* info) const; Interface to CINT function. void CallFunc_SetFuncProto(CallFunc_t* func, ClassInfo_t* info, const char* method, const char* proto, Long_t* Offset) const; Interface to CINT function. Long_t ClassInfo_ClassProperty(ClassInfo_t* info) const; Interface to CINT function. void ClassInfo_Delete(ClassInfo_t* info) const; Interface to CINT function. void ClassInfo_Delete(ClassInfo_t* info, void* arena) const; Interface to CINT function. void ClassInfo_DeleteArray(ClassInfo_t* info, void* arena, bool dtorOnly) const; Interface to CINT function. void ClassInfo_Destruct(ClassInfo_t* info, void* arena) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory() const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(ClassInfo_t* cl) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(const char* name) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(G__value* ) const; Interface to CINT function. int ClassInfo_GetMethodNArg(ClassInfo_t* info, const char* method, const char* proto) const; Interface to CINT function. bool ClassInfo_HasDefaultConstructor(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_HasMethod(ClassInfo_t* info, const char* name) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, const char* funcname) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, int tagnum) const; Interface to CINT function. bool ClassInfo_IsBase(ClassInfo_t* info, const char* name) const; Interface to CINT function. bool ClassInfo_IsEnum(const char* name) const; Inter",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:35531,Integrability,Interface,Interface,35531,"rface to CINT function. void CallFunc_SetArgs(CallFunc_t* func, const char* param) const; Interface to CINT function. void CallFunc_SetFunc(CallFunc_t* func, ClassInfo_t* info, const char* method, const char* params, Long_t* Offset) const; Interface to CINT function. void CallFunc_SetFunc(CallFunc_t* func, MethodInfo_t* info) const; Interface to CINT function. void CallFunc_SetFuncProto(CallFunc_t* func, ClassInfo_t* info, const char* method, const char* proto, Long_t* Offset) const; Interface to CINT function. Long_t ClassInfo_ClassProperty(ClassInfo_t* info) const; Interface to CINT function. void ClassInfo_Delete(ClassInfo_t* info) const; Interface to CINT function. void ClassInfo_Delete(ClassInfo_t* info, void* arena) const; Interface to CINT function. void ClassInfo_DeleteArray(ClassInfo_t* info, void* arena, bool dtorOnly) const; Interface to CINT function. void ClassInfo_Destruct(ClassInfo_t* info, void* arena) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory() const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(ClassInfo_t* cl) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(const char* name) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(G__value* ) const; Interface to CINT function. int ClassInfo_GetMethodNArg(ClassInfo_t* info, const char* method, const char* proto) const; Interface to CINT function. bool ClassInfo_HasDefaultConstructor(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_HasMethod(ClassInfo_t* info, const char* name) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, const char* funcname) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, int tagnum) const; Interface to CINT function. bool ClassInfo_IsBase(ClassInfo_t* info, const char* name) const; Interface to CINT function. bool ClassInfo_IsEnum(const char* name) const; Interface to CINT function. bool ClassInfo_IsLoaded(ClassInfo_t* info) const; Interfa",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:35615,Integrability,Interface,Interface,35615,"aram) const; Interface to CINT function. void CallFunc_SetFunc(CallFunc_t* func, ClassInfo_t* info, const char* method, const char* params, Long_t* Offset) const; Interface to CINT function. void CallFunc_SetFunc(CallFunc_t* func, MethodInfo_t* info) const; Interface to CINT function. void CallFunc_SetFuncProto(CallFunc_t* func, ClassInfo_t* info, const char* method, const char* proto, Long_t* Offset) const; Interface to CINT function. Long_t ClassInfo_ClassProperty(ClassInfo_t* info) const; Interface to CINT function. void ClassInfo_Delete(ClassInfo_t* info) const; Interface to CINT function. void ClassInfo_Delete(ClassInfo_t* info, void* arena) const; Interface to CINT function. void ClassInfo_DeleteArray(ClassInfo_t* info, void* arena, bool dtorOnly) const; Interface to CINT function. void ClassInfo_Destruct(ClassInfo_t* info, void* arena) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory() const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(ClassInfo_t* cl) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(const char* name) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(G__value* ) const; Interface to CINT function. int ClassInfo_GetMethodNArg(ClassInfo_t* info, const char* method, const char* proto) const; Interface to CINT function. bool ClassInfo_HasDefaultConstructor(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_HasMethod(ClassInfo_t* info, const char* name) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, const char* funcname) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, int tagnum) const; Interface to CINT function. bool ClassInfo_IsBase(ClassInfo_t* info, const char* name) const; Interface to CINT function. bool ClassInfo_IsEnum(const char* name) const; Interface to CINT function. bool ClassInfo_IsLoaded(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValid(ClassInfo_t* info) const; Interf",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:35700,Integrability,Interface,Interface,35700,"ssInfo_t* info, const char* method, const char* params, Long_t* Offset) const; Interface to CINT function. void CallFunc_SetFunc(CallFunc_t* func, MethodInfo_t* info) const; Interface to CINT function. void CallFunc_SetFuncProto(CallFunc_t* func, ClassInfo_t* info, const char* method, const char* proto, Long_t* Offset) const; Interface to CINT function. Long_t ClassInfo_ClassProperty(ClassInfo_t* info) const; Interface to CINT function. void ClassInfo_Delete(ClassInfo_t* info) const; Interface to CINT function. void ClassInfo_Delete(ClassInfo_t* info, void* arena) const; Interface to CINT function. void ClassInfo_DeleteArray(ClassInfo_t* info, void* arena, bool dtorOnly) const; Interface to CINT function. void ClassInfo_Destruct(ClassInfo_t* info, void* arena) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory() const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(ClassInfo_t* cl) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(const char* name) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(G__value* ) const; Interface to CINT function. int ClassInfo_GetMethodNArg(ClassInfo_t* info, const char* method, const char* proto) const; Interface to CINT function. bool ClassInfo_HasDefaultConstructor(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_HasMethod(ClassInfo_t* info, const char* name) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, const char* funcname) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, int tagnum) const; Interface to CINT function. bool ClassInfo_IsBase(ClassInfo_t* info, const char* name) const; Interface to CINT function. bool ClassInfo_IsEnum(const char* name) const; Interface to CINT function. bool ClassInfo_IsLoaded(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValid(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValidMethod(ClassInfo_t* info, const char* met",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:35779,Integrability,Interface,Interface,35779,"erface to CINT function. void CallFunc_SetFunc(CallFunc_t* func, MethodInfo_t* info) const; Interface to CINT function. void CallFunc_SetFuncProto(CallFunc_t* func, ClassInfo_t* info, const char* method, const char* proto, Long_t* Offset) const; Interface to CINT function. Long_t ClassInfo_ClassProperty(ClassInfo_t* info) const; Interface to CINT function. void ClassInfo_Delete(ClassInfo_t* info) const; Interface to CINT function. void ClassInfo_Delete(ClassInfo_t* info, void* arena) const; Interface to CINT function. void ClassInfo_DeleteArray(ClassInfo_t* info, void* arena, bool dtorOnly) const; Interface to CINT function. void ClassInfo_Destruct(ClassInfo_t* info, void* arena) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory() const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(ClassInfo_t* cl) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(const char* name) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(G__value* ) const; Interface to CINT function. int ClassInfo_GetMethodNArg(ClassInfo_t* info, const char* method, const char* proto) const; Interface to CINT function. bool ClassInfo_HasDefaultConstructor(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_HasMethod(ClassInfo_t* info, const char* name) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, const char* funcname) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, int tagnum) const; Interface to CINT function. bool ClassInfo_IsBase(ClassInfo_t* info, const char* name) const; Interface to CINT function. bool ClassInfo_IsEnum(const char* name) const; Interface to CINT function. bool ClassInfo_IsLoaded(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValid(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValidMethod(ClassInfo_t* info, const char* method, const char* proto, Long_t* offset) const; Interface to CINT function. int Cla",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:35900,Integrability,Interface,Interface,35900,"e to CINT function. void CallFunc_SetFuncProto(CallFunc_t* func, ClassInfo_t* info, const char* method, const char* proto, Long_t* Offset) const; Interface to CINT function. Long_t ClassInfo_ClassProperty(ClassInfo_t* info) const; Interface to CINT function. void ClassInfo_Delete(ClassInfo_t* info) const; Interface to CINT function. void ClassInfo_Delete(ClassInfo_t* info, void* arena) const; Interface to CINT function. void ClassInfo_DeleteArray(ClassInfo_t* info, void* arena, bool dtorOnly) const; Interface to CINT function. void ClassInfo_Destruct(ClassInfo_t* info, void* arena) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory() const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(ClassInfo_t* cl) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(const char* name) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(G__value* ) const; Interface to CINT function. int ClassInfo_GetMethodNArg(ClassInfo_t* info, const char* method, const char* proto) const; Interface to CINT function. bool ClassInfo_HasDefaultConstructor(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_HasMethod(ClassInfo_t* info, const char* name) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, const char* funcname) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, int tagnum) const; Interface to CINT function. bool ClassInfo_IsBase(ClassInfo_t* info, const char* name) const; Interface to CINT function. bool ClassInfo_IsEnum(const char* name) const; Interface to CINT function. bool ClassInfo_IsLoaded(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValid(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValidMethod(ClassInfo_t* info, const char* method, const char* proto, Long_t* offset) const; Interface to CINT function. int ClassInfo_Next(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* ",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:35991,Integrability,Interface,Interface,35991,"nst char* proto, Long_t* Offset) const; Interface to CINT function. Long_t ClassInfo_ClassProperty(ClassInfo_t* info) const; Interface to CINT function. void ClassInfo_Delete(ClassInfo_t* info) const; Interface to CINT function. void ClassInfo_Delete(ClassInfo_t* info, void* arena) const; Interface to CINT function. void ClassInfo_DeleteArray(ClassInfo_t* info, void* arena, bool dtorOnly) const; Interface to CINT function. void ClassInfo_Destruct(ClassInfo_t* info, void* arena) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory() const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(ClassInfo_t* cl) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(const char* name) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(G__value* ) const; Interface to CINT function. int ClassInfo_GetMethodNArg(ClassInfo_t* info, const char* method, const char* proto) const; Interface to CINT function. bool ClassInfo_HasDefaultConstructor(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_HasMethod(ClassInfo_t* info, const char* name) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, const char* funcname) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, int tagnum) const; Interface to CINT function. bool ClassInfo_IsBase(ClassInfo_t* info, const char* name) const; Interface to CINT function. bool ClassInfo_IsEnum(const char* name) const; Interface to CINT function. bool ClassInfo_IsLoaded(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValid(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValidMethod(ClassInfo_t* info, const char* method, const char* proto, Long_t* offset) const; Interface to CINT function. int ClassInfo_Next(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n) const; Interface t",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:36088,Integrability,Interface,Interface,36088,"erty(ClassInfo_t* info) const; Interface to CINT function. void ClassInfo_Delete(ClassInfo_t* info) const; Interface to CINT function. void ClassInfo_Delete(ClassInfo_t* info, void* arena) const; Interface to CINT function. void ClassInfo_DeleteArray(ClassInfo_t* info, void* arena, bool dtorOnly) const; Interface to CINT function. void ClassInfo_Destruct(ClassInfo_t* info, void* arena) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory() const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(ClassInfo_t* cl) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(const char* name) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(G__value* ) const; Interface to CINT function. int ClassInfo_GetMethodNArg(ClassInfo_t* info, const char* method, const char* proto) const; Interface to CINT function. bool ClassInfo_HasDefaultConstructor(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_HasMethod(ClassInfo_t* info, const char* name) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, const char* funcname) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, int tagnum) const; Interface to CINT function. bool ClassInfo_IsBase(ClassInfo_t* info, const char* name) const; Interface to CINT function. bool ClassInfo_IsEnum(const char* name) const; Interface to CINT function. bool ClassInfo_IsLoaded(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValid(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValidMethod(ClassInfo_t* info, const char* method, const char* proto, Long_t* offset) const; Interface to CINT function. int ClassInfo_Next(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n, void* arena) const; Interface ",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:36184,Integrability,Interface,Interface,36184,"o) const; Interface to CINT function. void ClassInfo_Delete(ClassInfo_t* info, void* arena) const; Interface to CINT function. void ClassInfo_DeleteArray(ClassInfo_t* info, void* arena, bool dtorOnly) const; Interface to CINT function. void ClassInfo_Destruct(ClassInfo_t* info, void* arena) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory() const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(ClassInfo_t* cl) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(const char* name) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(G__value* ) const; Interface to CINT function. int ClassInfo_GetMethodNArg(ClassInfo_t* info, const char* method, const char* proto) const; Interface to CINT function. bool ClassInfo_HasDefaultConstructor(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_HasMethod(ClassInfo_t* info, const char* name) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, const char* funcname) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, int tagnum) const; Interface to CINT function. bool ClassInfo_IsBase(ClassInfo_t* info, const char* name) const; Interface to CINT function. bool ClassInfo_IsEnum(const char* name) const; Interface to CINT function. bool ClassInfo_IsLoaded(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValid(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValidMethod(ClassInfo_t* info, const char* method, const char* proto, Long_t* offset) const; Interface to CINT function. int ClassInfo_Next(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n, void* arena) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, void* arena) const; Interface to CINT ",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:36270,Integrability,Interface,Interface,36270," const; Interface to CINT function. void ClassInfo_DeleteArray(ClassInfo_t* info, void* arena, bool dtorOnly) const; Interface to CINT function. void ClassInfo_Destruct(ClassInfo_t* info, void* arena) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory() const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(ClassInfo_t* cl) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(const char* name) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(G__value* ) const; Interface to CINT function. int ClassInfo_GetMethodNArg(ClassInfo_t* info, const char* method, const char* proto) const; Interface to CINT function. bool ClassInfo_HasDefaultConstructor(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_HasMethod(ClassInfo_t* info, const char* name) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, const char* funcname) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, int tagnum) const; Interface to CINT function. bool ClassInfo_IsBase(ClassInfo_t* info, const char* name) const; Interface to CINT function. bool ClassInfo_IsEnum(const char* name) const; Interface to CINT function. bool ClassInfo_IsLoaded(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValid(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValidMethod(ClassInfo_t* info, const char* method, const char* proto, Long_t* offset) const; Interface to CINT function. int ClassInfo_Next(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n, void* arena) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, void* arena) const; Interface to CINT function. Long_t ClassInfo_Property(ClassInfo_t* info) const; Interface to CINT function. i",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:36364,Integrability,Interface,Interface,36364,"ena, bool dtorOnly) const; Interface to CINT function. void ClassInfo_Destruct(ClassInfo_t* info, void* arena) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory() const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(ClassInfo_t* cl) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(const char* name) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(G__value* ) const; Interface to CINT function. int ClassInfo_GetMethodNArg(ClassInfo_t* info, const char* method, const char* proto) const; Interface to CINT function. bool ClassInfo_HasDefaultConstructor(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_HasMethod(ClassInfo_t* info, const char* name) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, const char* funcname) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, int tagnum) const; Interface to CINT function. bool ClassInfo_IsBase(ClassInfo_t* info, const char* name) const; Interface to CINT function. bool ClassInfo_IsEnum(const char* name) const; Interface to CINT function. bool ClassInfo_IsLoaded(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValid(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValidMethod(ClassInfo_t* info, const char* method, const char* proto, Long_t* offset) const; Interface to CINT function. int ClassInfo_Next(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n, void* arena) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, void* arena) const; Interface to CINT function. Long_t ClassInfo_Property(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_RootFlag(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:36439,Integrability,Interface,Interface,36439,"Info_t* info, void* arena) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory() const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(ClassInfo_t* cl) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(const char* name) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(G__value* ) const; Interface to CINT function. int ClassInfo_GetMethodNArg(ClassInfo_t* info, const char* method, const char* proto) const; Interface to CINT function. bool ClassInfo_HasDefaultConstructor(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_HasMethod(ClassInfo_t* info, const char* name) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, const char* funcname) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, int tagnum) const; Interface to CINT function. bool ClassInfo_IsBase(ClassInfo_t* info, const char* name) const; Interface to CINT function. bool ClassInfo_IsEnum(const char* name) const; Interface to CINT function. bool ClassInfo_IsLoaded(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValid(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValidMethod(ClassInfo_t* info, const char* method, const char* proto, Long_t* offset) const; Interface to CINT function. int ClassInfo_Next(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n, void* arena) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, void* arena) const; Interface to CINT function. Long_t ClassInfo_Property(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_RootFlag(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_Size(ClassInfo_t* info) const; Interface to CINT function. Long_t ClassInfo_Tagnum(Cl",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:36517,Integrability,Interface,Interface,36517,"lassInfo_Factory() const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(ClassInfo_t* cl) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(const char* name) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(G__value* ) const; Interface to CINT function. int ClassInfo_GetMethodNArg(ClassInfo_t* info, const char* method, const char* proto) const; Interface to CINT function. bool ClassInfo_HasDefaultConstructor(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_HasMethod(ClassInfo_t* info, const char* name) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, const char* funcname) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, int tagnum) const; Interface to CINT function. bool ClassInfo_IsBase(ClassInfo_t* info, const char* name) const; Interface to CINT function. bool ClassInfo_IsEnum(const char* name) const; Interface to CINT function. bool ClassInfo_IsLoaded(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValid(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValidMethod(ClassInfo_t* info, const char* method, const char* proto, Long_t* offset) const; Interface to CINT function. int ClassInfo_Next(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n, void* arena) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, void* arena) const; Interface to CINT function. Long_t ClassInfo_Property(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_RootFlag(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_Size(ClassInfo_t* info) const; Interface to CINT function. Long_t ClassInfo_Tagnum(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_F",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:36594,Integrability,Interface,Interface,36594,"_Factory(ClassInfo_t* cl) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(const char* name) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(G__value* ) const; Interface to CINT function. int ClassInfo_GetMethodNArg(ClassInfo_t* info, const char* method, const char* proto) const; Interface to CINT function. bool ClassInfo_HasDefaultConstructor(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_HasMethod(ClassInfo_t* info, const char* name) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, const char* funcname) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, int tagnum) const; Interface to CINT function. bool ClassInfo_IsBase(ClassInfo_t* info, const char* name) const; Interface to CINT function. bool ClassInfo_IsEnum(const char* name) const; Interface to CINT function. bool ClassInfo_IsLoaded(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValid(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValidMethod(ClassInfo_t* info, const char* method, const char* proto, Long_t* offset) const; Interface to CINT function. int ClassInfo_Next(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n, void* arena) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, void* arena) const; Interface to CINT function. Long_t ClassInfo_Property(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_RootFlag(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_Size(ClassInfo_t* info) const; Interface to CINT function. Long_t ClassInfo_Tagnum(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_FileName(ClassInfo_t* info) const; Interface to CINT function. const char * Cla",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:36732,Integrability,Interface,Interface,36732,"e) const; Interface to CINT function. ClassInfo_t * ClassInfo_Factory(G__value* ) const; Interface to CINT function. int ClassInfo_GetMethodNArg(ClassInfo_t* info, const char* method, const char* proto) const; Interface to CINT function. bool ClassInfo_HasDefaultConstructor(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_HasMethod(ClassInfo_t* info, const char* name) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, const char* funcname) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, int tagnum) const; Interface to CINT function. bool ClassInfo_IsBase(ClassInfo_t* info, const char* name) const; Interface to CINT function. bool ClassInfo_IsEnum(const char* name) const; Interface to CINT function. bool ClassInfo_IsLoaded(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValid(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValidMethod(ClassInfo_t* info, const char* method, const char* proto, Long_t* offset) const; Interface to CINT function. int ClassInfo_Next(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n, void* arena) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, void* arena) const; Interface to CINT function. Long_t ClassInfo_Property(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_RootFlag(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_Size(ClassInfo_t* info) const; Interface to CINT function. Long_t ClassInfo_Tagnum(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_FileName(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_FullName(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_Name(ClassInfo",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:36805,Integrability,Interface,Interface,36805,"T function. int ClassInfo_GetMethodNArg(ClassInfo_t* info, const char* method, const char* proto) const; Interface to CINT function. bool ClassInfo_HasDefaultConstructor(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_HasMethod(ClassInfo_t* info, const char* name) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, const char* funcname) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, int tagnum) const; Interface to CINT function. bool ClassInfo_IsBase(ClassInfo_t* info, const char* name) const; Interface to CINT function. bool ClassInfo_IsEnum(const char* name) const; Interface to CINT function. bool ClassInfo_IsLoaded(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValid(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValidMethod(ClassInfo_t* info, const char* method, const char* proto, Long_t* offset) const; Interface to CINT function. int ClassInfo_Next(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n, void* arena) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, void* arena) const; Interface to CINT function. Long_t ClassInfo_Property(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_RootFlag(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_Size(ClassInfo_t* info) const; Interface to CINT function. Long_t ClassInfo_Tagnum(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_FileName(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_FullName(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_Name(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_Title(ClassInfo_t* info) const; Interf",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:36880,Integrability,Interface,Interface,36880,"hod, const char* proto) const; Interface to CINT function. bool ClassInfo_HasDefaultConstructor(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_HasMethod(ClassInfo_t* info, const char* name) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, const char* funcname) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, int tagnum) const; Interface to CINT function. bool ClassInfo_IsBase(ClassInfo_t* info, const char* name) const; Interface to CINT function. bool ClassInfo_IsEnum(const char* name) const; Interface to CINT function. bool ClassInfo_IsLoaded(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValid(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValidMethod(ClassInfo_t* info, const char* method, const char* proto, Long_t* offset) const; Interface to CINT function. int ClassInfo_Next(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n, void* arena) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, void* arena) const; Interface to CINT function. Long_t ClassInfo_Property(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_RootFlag(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_Size(ClassInfo_t* info) const; Interface to CINT function. Long_t ClassInfo_Tagnum(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_FileName(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_FullName(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_Name(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_Title(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_TmpltName(ClassInfo_t* info) ",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:36962,Integrability,Interface,Interface,36962,"faultConstructor(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_HasMethod(ClassInfo_t* info, const char* name) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, const char* funcname) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, int tagnum) const; Interface to CINT function. bool ClassInfo_IsBase(ClassInfo_t* info, const char* name) const; Interface to CINT function. bool ClassInfo_IsEnum(const char* name) const; Interface to CINT function. bool ClassInfo_IsLoaded(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValid(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValidMethod(ClassInfo_t* info, const char* method, const char* proto, Long_t* offset) const; Interface to CINT function. int ClassInfo_Next(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n, void* arena) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, void* arena) const; Interface to CINT function. Long_t ClassInfo_Property(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_RootFlag(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_Size(ClassInfo_t* info) const; Interface to CINT function. Long_t ClassInfo_Tagnum(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_FileName(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_FullName(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_Name(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_Title(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_TmpltName(ClassInfo_t* info) const; Interface to CINT function. void BaseClassInfo_Delete(BaseClassInfo_t* ",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:37057,Integrability,Interface,Interface,37057,"sMethod(ClassInfo_t* info, const char* name) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, const char* funcname) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, int tagnum) const; Interface to CINT function. bool ClassInfo_IsBase(ClassInfo_t* info, const char* name) const; Interface to CINT function. bool ClassInfo_IsEnum(const char* name) const; Interface to CINT function. bool ClassInfo_IsLoaded(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValid(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValidMethod(ClassInfo_t* info, const char* method, const char* proto, Long_t* offset) const; Interface to CINT function. int ClassInfo_Next(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n, void* arena) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, void* arena) const; Interface to CINT function. Long_t ClassInfo_Property(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_RootFlag(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_Size(ClassInfo_t* info) const; Interface to CINT function. Long_t ClassInfo_Tagnum(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_FileName(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_FullName(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_Name(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_Title(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_TmpltName(ClassInfo_t* info) const; Interface to CINT function. void BaseClassInfo_Delete(BaseClassInfo_t* bcinfo) const; Interface to CINT function. BaseClassInfo_t * BaseClassInfo_Factory(ClassI",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:37145,Integrability,Interface,Interface,37145,"fo_Init(ClassInfo_t* info, const char* funcname) const; Interface to CINT function. void ClassInfo_Init(ClassInfo_t* info, int tagnum) const; Interface to CINT function. bool ClassInfo_IsBase(ClassInfo_t* info, const char* name) const; Interface to CINT function. bool ClassInfo_IsEnum(const char* name) const; Interface to CINT function. bool ClassInfo_IsLoaded(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValid(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValidMethod(ClassInfo_t* info, const char* method, const char* proto, Long_t* offset) const; Interface to CINT function. int ClassInfo_Next(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n, void* arena) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, void* arena) const; Interface to CINT function. Long_t ClassInfo_Property(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_RootFlag(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_Size(ClassInfo_t* info) const; Interface to CINT function. Long_t ClassInfo_Tagnum(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_FileName(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_FullName(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_Name(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_Title(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_TmpltName(ClassInfo_t* info) const; Interface to CINT function. void BaseClassInfo_Delete(BaseClassInfo_t* bcinfo) const; Interface to CINT function. BaseClassInfo_t * BaseClassInfo_Factory(ClassInfo_t* info) const; Interface to CINT function. int BaseClassInfo_Next(BaseClassInfo_t* bci",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:37225,Integrability,Interface,Interface,37225,"void ClassInfo_Init(ClassInfo_t* info, int tagnum) const; Interface to CINT function. bool ClassInfo_IsBase(ClassInfo_t* info, const char* name) const; Interface to CINT function. bool ClassInfo_IsEnum(const char* name) const; Interface to CINT function. bool ClassInfo_IsLoaded(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValid(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValidMethod(ClassInfo_t* info, const char* method, const char* proto, Long_t* offset) const; Interface to CINT function. int ClassInfo_Next(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n, void* arena) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, void* arena) const; Interface to CINT function. Long_t ClassInfo_Property(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_RootFlag(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_Size(ClassInfo_t* info) const; Interface to CINT function. Long_t ClassInfo_Tagnum(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_FileName(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_FullName(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_Name(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_Title(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_TmpltName(ClassInfo_t* info) const; Interface to CINT function. void BaseClassInfo_Delete(BaseClassInfo_t* bcinfo) const; Interface to CINT function. BaseClassInfo_t * BaseClassInfo_Factory(ClassInfo_t* info) const; Interface to CINT function. int BaseClassInfo_Next(BaseClassInfo_t* bcinfo) const; Interface to CINT function. int BaseClassInfo_Next(BaseClassInfo_t* bcin",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:37302,Integrability,Interface,Interface,37302,"nction. bool ClassInfo_IsBase(ClassInfo_t* info, const char* name) const; Interface to CINT function. bool ClassInfo_IsEnum(const char* name) const; Interface to CINT function. bool ClassInfo_IsLoaded(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValid(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValidMethod(ClassInfo_t* info, const char* method, const char* proto, Long_t* offset) const; Interface to CINT function. int ClassInfo_Next(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n, void* arena) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, void* arena) const; Interface to CINT function. Long_t ClassInfo_Property(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_RootFlag(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_Size(ClassInfo_t* info) const; Interface to CINT function. Long_t ClassInfo_Tagnum(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_FileName(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_FullName(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_Name(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_Title(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_TmpltName(ClassInfo_t* info) const; Interface to CINT function. void BaseClassInfo_Delete(BaseClassInfo_t* bcinfo) const; Interface to CINT function. BaseClassInfo_t * BaseClassInfo_Factory(ClassInfo_t* info) const; Interface to CINT function. int BaseClassInfo_Next(BaseClassInfo_t* bcinfo) const; Interface to CINT function. int BaseClassInfo_Next(BaseClassInfo_t* bcinfo, int onlyDirect) const; Interface to CINT function. Long_t BaseClassInfo_Off",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:37375,Integrability,Interface,Interface,37375,"nterface to CINT function. bool ClassInfo_IsEnum(const char* name) const; Interface to CINT function. bool ClassInfo_IsLoaded(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValid(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValidMethod(ClassInfo_t* info, const char* method, const char* proto, Long_t* offset) const; Interface to CINT function. int ClassInfo_Next(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n, void* arena) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, void* arena) const; Interface to CINT function. Long_t ClassInfo_Property(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_RootFlag(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_Size(ClassInfo_t* info) const; Interface to CINT function. Long_t ClassInfo_Tagnum(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_FileName(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_FullName(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_Name(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_Title(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_TmpltName(ClassInfo_t* info) const; Interface to CINT function. void BaseClassInfo_Delete(BaseClassInfo_t* bcinfo) const; Interface to CINT function. BaseClassInfo_t * BaseClassInfo_Factory(ClassInfo_t* info) const; Interface to CINT function. int BaseClassInfo_Next(BaseClassInfo_t* bcinfo) const; Interface to CINT function. int BaseClassInfo_Next(BaseClassInfo_t* bcinfo, int onlyDirect) const; Interface to CINT function. Long_t BaseClassInfo_Offset(BaseClassInfo_t* bcinfo) const; Interface to CINT function. Long_t Base",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:37453,Integrability,Interface,Interface,37453,"terface to CINT function. bool ClassInfo_IsLoaded(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValid(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValidMethod(ClassInfo_t* info, const char* method, const char* proto, Long_t* offset) const; Interface to CINT function. int ClassInfo_Next(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n, void* arena) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, void* arena) const; Interface to CINT function. Long_t ClassInfo_Property(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_RootFlag(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_Size(ClassInfo_t* info) const; Interface to CINT function. Long_t ClassInfo_Tagnum(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_FileName(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_FullName(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_Name(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_Title(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_TmpltName(ClassInfo_t* info) const; Interface to CINT function. void BaseClassInfo_Delete(BaseClassInfo_t* bcinfo) const; Interface to CINT function. BaseClassInfo_t * BaseClassInfo_Factory(ClassInfo_t* info) const; Interface to CINT function. int BaseClassInfo_Next(BaseClassInfo_t* bcinfo) const; Interface to CINT function. int BaseClassInfo_Next(BaseClassInfo_t* bcinfo, int onlyDirect) const; Interface to CINT function. Long_t BaseClassInfo_Offset(BaseClassInfo_t* bcinfo) const; Interface to CINT function. Long_t BaseClassInfo_Property(BaseClassInfo_t* bcinfo) const; Interface to CINT functi",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:37539,Integrability,Interface,Interface,37539,"ace to CINT function. bool ClassInfo_IsValid(ClassInfo_t* info) const; Interface to CINT function. bool ClassInfo_IsValidMethod(ClassInfo_t* info, const char* method, const char* proto, Long_t* offset) const; Interface to CINT function. int ClassInfo_Next(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n, void* arena) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, void* arena) const; Interface to CINT function. Long_t ClassInfo_Property(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_RootFlag(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_Size(ClassInfo_t* info) const; Interface to CINT function. Long_t ClassInfo_Tagnum(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_FileName(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_FullName(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_Name(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_Title(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_TmpltName(ClassInfo_t* info) const; Interface to CINT function. void BaseClassInfo_Delete(BaseClassInfo_t* bcinfo) const; Interface to CINT function. BaseClassInfo_t * BaseClassInfo_Factory(ClassInfo_t* info) const; Interface to CINT function. int BaseClassInfo_Next(BaseClassInfo_t* bcinfo) const; Interface to CINT function. int BaseClassInfo_Next(BaseClassInfo_t* bcinfo, int onlyDirect) const; Interface to CINT function. Long_t BaseClassInfo_Offset(BaseClassInfo_t* bcinfo) const; Interface to CINT function. Long_t BaseClassInfo_Property(BaseClassInfo_t* bcinfo) const; Interface to CINT function. Long_t BaseClassInfo_Tagnum(BaseClassInfo_t* bcinfo) const; Interface to CINT ",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:37625,Integrability,Interface,Interface,37625,"NT function. bool ClassInfo_IsValidMethod(ClassInfo_t* info, const char* method, const char* proto, Long_t* offset) const; Interface to CINT function. int ClassInfo_Next(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n, void* arena) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, void* arena) const; Interface to CINT function. Long_t ClassInfo_Property(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_RootFlag(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_Size(ClassInfo_t* info) const; Interface to CINT function. Long_t ClassInfo_Tagnum(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_FileName(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_FullName(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_Name(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_Title(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_TmpltName(ClassInfo_t* info) const; Interface to CINT function. void BaseClassInfo_Delete(BaseClassInfo_t* bcinfo) const; Interface to CINT function. BaseClassInfo_t * BaseClassInfo_Factory(ClassInfo_t* info) const; Interface to CINT function. int BaseClassInfo_Next(BaseClassInfo_t* bcinfo) const; Interface to CINT function. int BaseClassInfo_Next(BaseClassInfo_t* bcinfo, int onlyDirect) const; Interface to CINT function. Long_t BaseClassInfo_Offset(BaseClassInfo_t* bcinfo) const; Interface to CINT function. Long_t BaseClassInfo_Property(BaseClassInfo_t* bcinfo) const; Interface to CINT function. Long_t BaseClassInfo_Tagnum(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_FullName(BaseClassInfo_t* bcinfo) const; Interfac",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:37707,Integrability,Interface,Interface,37707,"st char* proto, Long_t* offset) const; Interface to CINT function. int ClassInfo_Next(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n, void* arena) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, void* arena) const; Interface to CINT function. Long_t ClassInfo_Property(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_RootFlag(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_Size(ClassInfo_t* info) const; Interface to CINT function. Long_t ClassInfo_Tagnum(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_FileName(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_FullName(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_Name(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_Title(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_TmpltName(ClassInfo_t* info) const; Interface to CINT function. void BaseClassInfo_Delete(BaseClassInfo_t* bcinfo) const; Interface to CINT function. BaseClassInfo_t * BaseClassInfo_Factory(ClassInfo_t* info) const; Interface to CINT function. int BaseClassInfo_Next(BaseClassInfo_t* bcinfo) const; Interface to CINT function. int BaseClassInfo_Next(BaseClassInfo_t* bcinfo, int onlyDirect) const; Interface to CINT function. Long_t BaseClassInfo_Offset(BaseClassInfo_t* bcinfo) const; Interface to CINT function. Long_t BaseClassInfo_Property(BaseClassInfo_t* bcinfo) const; Interface to CINT function. Long_t BaseClassInfo_Tagnum(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_FullName(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_Name(BaseClassInfo_t* bcinfo) const; ",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:37790,Integrability,Interface,Interface,37790,"ext(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n, void* arena) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, void* arena) const; Interface to CINT function. Long_t ClassInfo_Property(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_RootFlag(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_Size(ClassInfo_t* info) const; Interface to CINT function. Long_t ClassInfo_Tagnum(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_FileName(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_FullName(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_Name(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_Title(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_TmpltName(ClassInfo_t* info) const; Interface to CINT function. void BaseClassInfo_Delete(BaseClassInfo_t* bcinfo) const; Interface to CINT function. BaseClassInfo_t * BaseClassInfo_Factory(ClassInfo_t* info) const; Interface to CINT function. int BaseClassInfo_Next(BaseClassInfo_t* bcinfo) const; Interface to CINT function. int BaseClassInfo_Next(BaseClassInfo_t* bcinfo, int onlyDirect) const; Interface to CINT function. Long_t BaseClassInfo_Offset(BaseClassInfo_t* bcinfo) const; Interface to CINT function. Long_t BaseClassInfo_Property(BaseClassInfo_t* bcinfo) const; Interface to CINT function. Long_t BaseClassInfo_Tagnum(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_FullName(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_Name(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_TmpltName(BaseClassInfo_t* b",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:37877,Integrability,Interface,Interface,37877,"nfo_t* info) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n, void* arena) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, void* arena) const; Interface to CINT function. Long_t ClassInfo_Property(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_RootFlag(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_Size(ClassInfo_t* info) const; Interface to CINT function. Long_t ClassInfo_Tagnum(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_FileName(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_FullName(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_Name(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_Title(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_TmpltName(ClassInfo_t* info) const; Interface to CINT function. void BaseClassInfo_Delete(BaseClassInfo_t* bcinfo) const; Interface to CINT function. BaseClassInfo_t * BaseClassInfo_Factory(ClassInfo_t* info) const; Interface to CINT function. int BaseClassInfo_Next(BaseClassInfo_t* bcinfo) const; Interface to CINT function. int BaseClassInfo_Next(BaseClassInfo_t* bcinfo, int onlyDirect) const; Interface to CINT function. Long_t BaseClassInfo_Offset(BaseClassInfo_t* bcinfo) const; Interface to CINT function. Long_t BaseClassInfo_Property(BaseClassInfo_t* bcinfo) const; Interface to CINT function. Long_t BaseClassInfo_Tagnum(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_FullName(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_Name(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_TmpltName(BaseClassInfo_t* bcinfo) const; Interface to CINT function. int DataMemberInfo_ArrayDim(DataMemberInfo_",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:37963,Integrability,Interface,Interface,37963," int n) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, int n, void* arena) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, void* arena) const; Interface to CINT function. Long_t ClassInfo_Property(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_RootFlag(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_Size(ClassInfo_t* info) const; Interface to CINT function. Long_t ClassInfo_Tagnum(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_FileName(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_FullName(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_Name(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_Title(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_TmpltName(ClassInfo_t* info) const; Interface to CINT function. void BaseClassInfo_Delete(BaseClassInfo_t* bcinfo) const; Interface to CINT function. BaseClassInfo_t * BaseClassInfo_Factory(ClassInfo_t* info) const; Interface to CINT function. int BaseClassInfo_Next(BaseClassInfo_t* bcinfo) const; Interface to CINT function. int BaseClassInfo_Next(BaseClassInfo_t* bcinfo, int onlyDirect) const; Interface to CINT function. Long_t BaseClassInfo_Offset(BaseClassInfo_t* bcinfo) const; Interface to CINT function. Long_t BaseClassInfo_Property(BaseClassInfo_t* bcinfo) const; Interface to CINT function. Long_t BaseClassInfo_Tagnum(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_FullName(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_Name(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_TmpltName(BaseClassInfo_t* bcinfo) const; Interface to CINT function. int DataMemberInfo_ArrayDim(DataMemberInfo_t* dminfo) const; Interface to CINT function. void DataMemberInfo_Delete(DataMemberInf",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:38057,Integrability,Interface,Interface,38057,"void* arena) const; Interface to CINT function. void * ClassInfo_New(ClassInfo_t* info, void* arena) const; Interface to CINT function. Long_t ClassInfo_Property(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_RootFlag(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_Size(ClassInfo_t* info) const; Interface to CINT function. Long_t ClassInfo_Tagnum(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_FileName(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_FullName(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_Name(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_Title(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_TmpltName(ClassInfo_t* info) const; Interface to CINT function. void BaseClassInfo_Delete(BaseClassInfo_t* bcinfo) const; Interface to CINT function. BaseClassInfo_t * BaseClassInfo_Factory(ClassInfo_t* info) const; Interface to CINT function. int BaseClassInfo_Next(BaseClassInfo_t* bcinfo) const; Interface to CINT function. int BaseClassInfo_Next(BaseClassInfo_t* bcinfo, int onlyDirect) const; Interface to CINT function. Long_t BaseClassInfo_Offset(BaseClassInfo_t* bcinfo) const; Interface to CINT function. Long_t BaseClassInfo_Property(BaseClassInfo_t* bcinfo) const; Interface to CINT function. Long_t BaseClassInfo_Tagnum(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_FullName(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_Name(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_TmpltName(BaseClassInfo_t* bcinfo) const; Interface to CINT function. int DataMemberInfo_ArrayDim(DataMemberInfo_t* dminfo) const; Interface to CINT function. void DataMemberInfo_Delete(DataMemberInfo_t* dminfo) const; Interface to CINT function. DataMemberInfo_t * DataMemberInfo_Factory(",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:38140,Integrability,Interface,Interface,38140,"void* arena) const; Interface to CINT function. Long_t ClassInfo_Property(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_RootFlag(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_Size(ClassInfo_t* info) const; Interface to CINT function. Long_t ClassInfo_Tagnum(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_FileName(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_FullName(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_Name(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_Title(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_TmpltName(ClassInfo_t* info) const; Interface to CINT function. void BaseClassInfo_Delete(BaseClassInfo_t* bcinfo) const; Interface to CINT function. BaseClassInfo_t * BaseClassInfo_Factory(ClassInfo_t* info) const; Interface to CINT function. int BaseClassInfo_Next(BaseClassInfo_t* bcinfo) const; Interface to CINT function. int BaseClassInfo_Next(BaseClassInfo_t* bcinfo, int onlyDirect) const; Interface to CINT function. Long_t BaseClassInfo_Offset(BaseClassInfo_t* bcinfo) const; Interface to CINT function. Long_t BaseClassInfo_Property(BaseClassInfo_t* bcinfo) const; Interface to CINT function. Long_t BaseClassInfo_Tagnum(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_FullName(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_Name(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_TmpltName(BaseClassInfo_t* bcinfo) const; Interface to CINT function. int DataMemberInfo_ArrayDim(DataMemberInfo_t* dminfo) const; Interface to CINT function. void DataMemberInfo_Delete(DataMemberInfo_t* dminfo) const; Interface to CINT function. DataMemberInfo_t * DataMemberInfo_Factory(ClassInfo_t* clinfo = 0) const; Interface to CINT function. DataMemberInfo_t * DataMember",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:38239,Integrability,Interface,Interface,38239,") const; Interface to CINT function. int ClassInfo_RootFlag(ClassInfo_t* info) const; Interface to CINT function. int ClassInfo_Size(ClassInfo_t* info) const; Interface to CINT function. Long_t ClassInfo_Tagnum(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_FileName(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_FullName(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_Name(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_Title(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_TmpltName(ClassInfo_t* info) const; Interface to CINT function. void BaseClassInfo_Delete(BaseClassInfo_t* bcinfo) const; Interface to CINT function. BaseClassInfo_t * BaseClassInfo_Factory(ClassInfo_t* info) const; Interface to CINT function. int BaseClassInfo_Next(BaseClassInfo_t* bcinfo) const; Interface to CINT function. int BaseClassInfo_Next(BaseClassInfo_t* bcinfo, int onlyDirect) const; Interface to CINT function. Long_t BaseClassInfo_Offset(BaseClassInfo_t* bcinfo) const; Interface to CINT function. Long_t BaseClassInfo_Property(BaseClassInfo_t* bcinfo) const; Interface to CINT function. Long_t BaseClassInfo_Tagnum(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_FullName(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_Name(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_TmpltName(BaseClassInfo_t* bcinfo) const; Interface to CINT function. int DataMemberInfo_ArrayDim(DataMemberInfo_t* dminfo) const; Interface to CINT function. void DataMemberInfo_Delete(DataMemberInfo_t* dminfo) const; Interface to CINT function. DataMemberInfo_t * DataMemberInfo_Factory(ClassInfo_t* clinfo = 0) const; Interface to CINT function. DataMemberInfo_t * DataMemberInfo_FactoryCopy(DataMemberInfo_t* dminfo) const; Interface to CINT function. bool DataMemb",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:38327,Integrability,Interface,Interface,38327,"e to CINT function. int ClassInfo_Size(ClassInfo_t* info) const; Interface to CINT function. Long_t ClassInfo_Tagnum(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_FileName(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_FullName(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_Name(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_Title(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_TmpltName(ClassInfo_t* info) const; Interface to CINT function. void BaseClassInfo_Delete(BaseClassInfo_t* bcinfo) const; Interface to CINT function. BaseClassInfo_t * BaseClassInfo_Factory(ClassInfo_t* info) const; Interface to CINT function. int BaseClassInfo_Next(BaseClassInfo_t* bcinfo) const; Interface to CINT function. int BaseClassInfo_Next(BaseClassInfo_t* bcinfo, int onlyDirect) const; Interface to CINT function. Long_t BaseClassInfo_Offset(BaseClassInfo_t* bcinfo) const; Interface to CINT function. Long_t BaseClassInfo_Property(BaseClassInfo_t* bcinfo) const; Interface to CINT function. Long_t BaseClassInfo_Tagnum(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_FullName(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_Name(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_TmpltName(BaseClassInfo_t* bcinfo) const; Interface to CINT function. int DataMemberInfo_ArrayDim(DataMemberInfo_t* dminfo) const; Interface to CINT function. void DataMemberInfo_Delete(DataMemberInfo_t* dminfo) const; Interface to CINT function. DataMemberInfo_t * DataMemberInfo_Factory(ClassInfo_t* clinfo = 0) const; Interface to CINT function. DataMemberInfo_t * DataMemberInfo_FactoryCopy(DataMemberInfo_t* dminfo) const; Interface to CINT function. bool DataMemberInfo_IsValid(DataMemberInfo_t* dminfo) const; Interface to CINT function. int DataMemberInf",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:38417,Integrability,Interface,Interface,38417,"on. Long_t ClassInfo_Tagnum(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_FileName(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_FullName(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_Name(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_Title(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_TmpltName(ClassInfo_t* info) const; Interface to CINT function. void BaseClassInfo_Delete(BaseClassInfo_t* bcinfo) const; Interface to CINT function. BaseClassInfo_t * BaseClassInfo_Factory(ClassInfo_t* info) const; Interface to CINT function. int BaseClassInfo_Next(BaseClassInfo_t* bcinfo) const; Interface to CINT function. int BaseClassInfo_Next(BaseClassInfo_t* bcinfo, int onlyDirect) const; Interface to CINT function. Long_t BaseClassInfo_Offset(BaseClassInfo_t* bcinfo) const; Interface to CINT function. Long_t BaseClassInfo_Property(BaseClassInfo_t* bcinfo) const; Interface to CINT function. Long_t BaseClassInfo_Tagnum(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_FullName(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_Name(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_TmpltName(BaseClassInfo_t* bcinfo) const; Interface to CINT function. int DataMemberInfo_ArrayDim(DataMemberInfo_t* dminfo) const; Interface to CINT function. void DataMemberInfo_Delete(DataMemberInfo_t* dminfo) const; Interface to CINT function. DataMemberInfo_t * DataMemberInfo_Factory(ClassInfo_t* clinfo = 0) const; Interface to CINT function. DataMemberInfo_t * DataMemberInfo_FactoryCopy(DataMemberInfo_t* dminfo) const; Interface to CINT function. bool DataMemberInfo_IsValid(DataMemberInfo_t* dminfo) const; Interface to CINT function. int DataMemberInfo_MaxIndex(DataMemberInfo_t* dminfo, Int_t dim) const; Interface to CINT function. int Da",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:38505,Integrability,Interface,Interface,38505,"har * ClassInfo_FileName(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_FullName(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_Name(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_Title(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_TmpltName(ClassInfo_t* info) const; Interface to CINT function. void BaseClassInfo_Delete(BaseClassInfo_t* bcinfo) const; Interface to CINT function. BaseClassInfo_t * BaseClassInfo_Factory(ClassInfo_t* info) const; Interface to CINT function. int BaseClassInfo_Next(BaseClassInfo_t* bcinfo) const; Interface to CINT function. int BaseClassInfo_Next(BaseClassInfo_t* bcinfo, int onlyDirect) const; Interface to CINT function. Long_t BaseClassInfo_Offset(BaseClassInfo_t* bcinfo) const; Interface to CINT function. Long_t BaseClassInfo_Property(BaseClassInfo_t* bcinfo) const; Interface to CINT function. Long_t BaseClassInfo_Tagnum(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_FullName(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_Name(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_TmpltName(BaseClassInfo_t* bcinfo) const; Interface to CINT function. int DataMemberInfo_ArrayDim(DataMemberInfo_t* dminfo) const; Interface to CINT function. void DataMemberInfo_Delete(DataMemberInfo_t* dminfo) const; Interface to CINT function. DataMemberInfo_t * DataMemberInfo_Factory(ClassInfo_t* clinfo = 0) const; Interface to CINT function. DataMemberInfo_t * DataMemberInfo_FactoryCopy(DataMemberInfo_t* dminfo) const; Interface to CINT function. bool DataMemberInfo_IsValid(DataMemberInfo_t* dminfo) const; Interface to CINT function. int DataMemberInfo_MaxIndex(DataMemberInfo_t* dminfo, Int_t dim) const; Interface to CINT function. int DataMemberInfo_Next(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t Dat",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:38601,Integrability,Interface,Interface,38601,"ClassInfo_FullName(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_Name(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_Title(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_TmpltName(ClassInfo_t* info) const; Interface to CINT function. void BaseClassInfo_Delete(BaseClassInfo_t* bcinfo) const; Interface to CINT function. BaseClassInfo_t * BaseClassInfo_Factory(ClassInfo_t* info) const; Interface to CINT function. int BaseClassInfo_Next(BaseClassInfo_t* bcinfo) const; Interface to CINT function. int BaseClassInfo_Next(BaseClassInfo_t* bcinfo, int onlyDirect) const; Interface to CINT function. Long_t BaseClassInfo_Offset(BaseClassInfo_t* bcinfo) const; Interface to CINT function. Long_t BaseClassInfo_Property(BaseClassInfo_t* bcinfo) const; Interface to CINT function. Long_t BaseClassInfo_Tagnum(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_FullName(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_Name(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_TmpltName(BaseClassInfo_t* bcinfo) const; Interface to CINT function. int DataMemberInfo_ArrayDim(DataMemberInfo_t* dminfo) const; Interface to CINT function. void DataMemberInfo_Delete(DataMemberInfo_t* dminfo) const; Interface to CINT function. DataMemberInfo_t * DataMemberInfo_Factory(ClassInfo_t* clinfo = 0) const; Interface to CINT function. DataMemberInfo_t * DataMemberInfo_FactoryCopy(DataMemberInfo_t* dminfo) const; Interface to CINT function. bool DataMemberInfo_IsValid(DataMemberInfo_t* dminfo) const; Interface to CINT function. int DataMemberInfo_MaxIndex(DataMemberInfo_t* dminfo, Int_t dim) const; Interface to CINT function. int DataMemberInfo_Next(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_Offset(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataM",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:38693,Integrability,Interface,Interface,38693,"o_Name(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_Title(ClassInfo_t* info) const; Interface to CINT function. const char * ClassInfo_TmpltName(ClassInfo_t* info) const; Interface to CINT function. void BaseClassInfo_Delete(BaseClassInfo_t* bcinfo) const; Interface to CINT function. BaseClassInfo_t * BaseClassInfo_Factory(ClassInfo_t* info) const; Interface to CINT function. int BaseClassInfo_Next(BaseClassInfo_t* bcinfo) const; Interface to CINT function. int BaseClassInfo_Next(BaseClassInfo_t* bcinfo, int onlyDirect) const; Interface to CINT function. Long_t BaseClassInfo_Offset(BaseClassInfo_t* bcinfo) const; Interface to CINT function. Long_t BaseClassInfo_Property(BaseClassInfo_t* bcinfo) const; Interface to CINT function. Long_t BaseClassInfo_Tagnum(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_FullName(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_Name(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_TmpltName(BaseClassInfo_t* bcinfo) const; Interface to CINT function. int DataMemberInfo_ArrayDim(DataMemberInfo_t* dminfo) const; Interface to CINT function. void DataMemberInfo_Delete(DataMemberInfo_t* dminfo) const; Interface to CINT function. DataMemberInfo_t * DataMemberInfo_Factory(ClassInfo_t* clinfo = 0) const; Interface to CINT function. DataMemberInfo_t * DataMemberInfo_FactoryCopy(DataMemberInfo_t* dminfo) const; Interface to CINT function. bool DataMemberInfo_IsValid(DataMemberInfo_t* dminfo) const; Interface to CINT function. int DataMemberInfo_MaxIndex(DataMemberInfo_t* dminfo, Int_t dim) const; Interface to CINT function. int DataMemberInfo_Next(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_Offset(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_Property(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMem",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:38790,Integrability,Interface,Interface,38790,"sInfo_t* info) const; Interface to CINT function. const char * ClassInfo_TmpltName(ClassInfo_t* info) const; Interface to CINT function. void BaseClassInfo_Delete(BaseClassInfo_t* bcinfo) const; Interface to CINT function. BaseClassInfo_t * BaseClassInfo_Factory(ClassInfo_t* info) const; Interface to CINT function. int BaseClassInfo_Next(BaseClassInfo_t* bcinfo) const; Interface to CINT function. int BaseClassInfo_Next(BaseClassInfo_t* bcinfo, int onlyDirect) const; Interface to CINT function. Long_t BaseClassInfo_Offset(BaseClassInfo_t* bcinfo) const; Interface to CINT function. Long_t BaseClassInfo_Property(BaseClassInfo_t* bcinfo) const; Interface to CINT function. Long_t BaseClassInfo_Tagnum(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_FullName(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_Name(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_TmpltName(BaseClassInfo_t* bcinfo) const; Interface to CINT function. int DataMemberInfo_ArrayDim(DataMemberInfo_t* dminfo) const; Interface to CINT function. void DataMemberInfo_Delete(DataMemberInfo_t* dminfo) const; Interface to CINT function. DataMemberInfo_t * DataMemberInfo_Factory(ClassInfo_t* clinfo = 0) const; Interface to CINT function. DataMemberInfo_t * DataMemberInfo_FactoryCopy(DataMemberInfo_t* dminfo) const; Interface to CINT function. bool DataMemberInfo_IsValid(DataMemberInfo_t* dminfo) const; Interface to CINT function. int DataMemberInfo_MaxIndex(DataMemberInfo_t* dminfo, Int_t dim) const; Interface to CINT function. int DataMemberInfo_Next(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_Offset(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_Property(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_TypeProperty(DataMemberInfo_t* dminfo) const; Interface to CINT function. int DataMembe",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:38879,Integrability,Interface,Interface,38879,"t* info) const; Interface to CINT function. void BaseClassInfo_Delete(BaseClassInfo_t* bcinfo) const; Interface to CINT function. BaseClassInfo_t * BaseClassInfo_Factory(ClassInfo_t* info) const; Interface to CINT function. int BaseClassInfo_Next(BaseClassInfo_t* bcinfo) const; Interface to CINT function. int BaseClassInfo_Next(BaseClassInfo_t* bcinfo, int onlyDirect) const; Interface to CINT function. Long_t BaseClassInfo_Offset(BaseClassInfo_t* bcinfo) const; Interface to CINT function. Long_t BaseClassInfo_Property(BaseClassInfo_t* bcinfo) const; Interface to CINT function. Long_t BaseClassInfo_Tagnum(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_FullName(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_Name(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_TmpltName(BaseClassInfo_t* bcinfo) const; Interface to CINT function. int DataMemberInfo_ArrayDim(DataMemberInfo_t* dminfo) const; Interface to CINT function. void DataMemberInfo_Delete(DataMemberInfo_t* dminfo) const; Interface to CINT function. DataMemberInfo_t * DataMemberInfo_Factory(ClassInfo_t* clinfo = 0) const; Interface to CINT function. DataMemberInfo_t * DataMemberInfo_FactoryCopy(DataMemberInfo_t* dminfo) const; Interface to CINT function. bool DataMemberInfo_IsValid(DataMemberInfo_t* dminfo) const; Interface to CINT function. int DataMemberInfo_MaxIndex(DataMemberInfo_t* dminfo, Int_t dim) const; Interface to CINT function. int DataMemberInfo_Next(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_Offset(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_Property(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_TypeProperty(DataMemberInfo_t* dminfo) const; Interface to CINT function. int DataMemberInfo_TypeSize(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * Data",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:38967,Integrability,Interface,Interface,38967,"info) const; Interface to CINT function. BaseClassInfo_t * BaseClassInfo_Factory(ClassInfo_t* info) const; Interface to CINT function. int BaseClassInfo_Next(BaseClassInfo_t* bcinfo) const; Interface to CINT function. int BaseClassInfo_Next(BaseClassInfo_t* bcinfo, int onlyDirect) const; Interface to CINT function. Long_t BaseClassInfo_Offset(BaseClassInfo_t* bcinfo) const; Interface to CINT function. Long_t BaseClassInfo_Property(BaseClassInfo_t* bcinfo) const; Interface to CINT function. Long_t BaseClassInfo_Tagnum(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_FullName(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_Name(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_TmpltName(BaseClassInfo_t* bcinfo) const; Interface to CINT function. int DataMemberInfo_ArrayDim(DataMemberInfo_t* dminfo) const; Interface to CINT function. void DataMemberInfo_Delete(DataMemberInfo_t* dminfo) const; Interface to CINT function. DataMemberInfo_t * DataMemberInfo_Factory(ClassInfo_t* clinfo = 0) const; Interface to CINT function. DataMemberInfo_t * DataMemberInfo_FactoryCopy(DataMemberInfo_t* dminfo) const; Interface to CINT function. bool DataMemberInfo_IsValid(DataMemberInfo_t* dminfo) const; Interface to CINT function. int DataMemberInfo_MaxIndex(DataMemberInfo_t* dminfo, Int_t dim) const; Interface to CINT function. int DataMemberInfo_Next(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_Offset(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_Property(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_TypeProperty(DataMemberInfo_t* dminfo) const; Interface to CINT function. int DataMemberInfo_TypeSize(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_TypeName(DataMemberInfo_t* dminfo) const; Interface to CINT function. const c",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:39069,Integrability,Interface,Interface,39069,"nfo) const; Interface to CINT function. int BaseClassInfo_Next(BaseClassInfo_t* bcinfo) const; Interface to CINT function. int BaseClassInfo_Next(BaseClassInfo_t* bcinfo, int onlyDirect) const; Interface to CINT function. Long_t BaseClassInfo_Offset(BaseClassInfo_t* bcinfo) const; Interface to CINT function. Long_t BaseClassInfo_Property(BaseClassInfo_t* bcinfo) const; Interface to CINT function. Long_t BaseClassInfo_Tagnum(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_FullName(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_Name(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_TmpltName(BaseClassInfo_t* bcinfo) const; Interface to CINT function. int DataMemberInfo_ArrayDim(DataMemberInfo_t* dminfo) const; Interface to CINT function. void DataMemberInfo_Delete(DataMemberInfo_t* dminfo) const; Interface to CINT function. DataMemberInfo_t * DataMemberInfo_Factory(ClassInfo_t* clinfo = 0) const; Interface to CINT function. DataMemberInfo_t * DataMemberInfo_FactoryCopy(DataMemberInfo_t* dminfo) const; Interface to CINT function. bool DataMemberInfo_IsValid(DataMemberInfo_t* dminfo) const; Interface to CINT function. int DataMemberInfo_MaxIndex(DataMemberInfo_t* dminfo, Int_t dim) const; Interface to CINT function. int DataMemberInfo_Next(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_Offset(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_Property(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_TypeProperty(DataMemberInfo_t* dminfo) const; Interface to CINT function. int DataMemberInfo_TypeSize(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_TypeName(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_TypeTrueName(DataMemberInfo_t* dminfo) const; Interface to CINT function. ",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:39176,Integrability,Interface,Interface,39176," to CINT function. int BaseClassInfo_Next(BaseClassInfo_t* bcinfo, int onlyDirect) const; Interface to CINT function. Long_t BaseClassInfo_Offset(BaseClassInfo_t* bcinfo) const; Interface to CINT function. Long_t BaseClassInfo_Property(BaseClassInfo_t* bcinfo) const; Interface to CINT function. Long_t BaseClassInfo_Tagnum(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_FullName(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_Name(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_TmpltName(BaseClassInfo_t* bcinfo) const; Interface to CINT function. int DataMemberInfo_ArrayDim(DataMemberInfo_t* dminfo) const; Interface to CINT function. void DataMemberInfo_Delete(DataMemberInfo_t* dminfo) const; Interface to CINT function. DataMemberInfo_t * DataMemberInfo_Factory(ClassInfo_t* clinfo = 0) const; Interface to CINT function. DataMemberInfo_t * DataMemberInfo_FactoryCopy(DataMemberInfo_t* dminfo) const; Interface to CINT function. bool DataMemberInfo_IsValid(DataMemberInfo_t* dminfo) const; Interface to CINT function. int DataMemberInfo_MaxIndex(DataMemberInfo_t* dminfo, Int_t dim) const; Interface to CINT function. int DataMemberInfo_Next(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_Offset(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_Property(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_TypeProperty(DataMemberInfo_t* dminfo) const; Interface to CINT function. int DataMemberInfo_TypeSize(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_TypeName(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_TypeTrueName(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_Name(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char ",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:39265,Integrability,Interface,Interface,39265,"e to CINT function. Long_t BaseClassInfo_Offset(BaseClassInfo_t* bcinfo) const; Interface to CINT function. Long_t BaseClassInfo_Property(BaseClassInfo_t* bcinfo) const; Interface to CINT function. Long_t BaseClassInfo_Tagnum(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_FullName(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_Name(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_TmpltName(BaseClassInfo_t* bcinfo) const; Interface to CINT function. int DataMemberInfo_ArrayDim(DataMemberInfo_t* dminfo) const; Interface to CINT function. void DataMemberInfo_Delete(DataMemberInfo_t* dminfo) const; Interface to CINT function. DataMemberInfo_t * DataMemberInfo_Factory(ClassInfo_t* clinfo = 0) const; Interface to CINT function. DataMemberInfo_t * DataMemberInfo_FactoryCopy(DataMemberInfo_t* dminfo) const; Interface to CINT function. bool DataMemberInfo_IsValid(DataMemberInfo_t* dminfo) const; Interface to CINT function. int DataMemberInfo_MaxIndex(DataMemberInfo_t* dminfo, Int_t dim) const; Interface to CINT function. int DataMemberInfo_Next(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_Offset(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_Property(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_TypeProperty(DataMemberInfo_t* dminfo) const; Interface to CINT function. int DataMemberInfo_TypeSize(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_TypeName(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_TypeTrueName(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_Name(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_Title(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * D",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:39365,Integrability,Interface,Interface,39365,"NT function. Long_t BaseClassInfo_Property(BaseClassInfo_t* bcinfo) const; Interface to CINT function. Long_t BaseClassInfo_Tagnum(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_FullName(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_Name(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_TmpltName(BaseClassInfo_t* bcinfo) const; Interface to CINT function. int DataMemberInfo_ArrayDim(DataMemberInfo_t* dminfo) const; Interface to CINT function. void DataMemberInfo_Delete(DataMemberInfo_t* dminfo) const; Interface to CINT function. DataMemberInfo_t * DataMemberInfo_Factory(ClassInfo_t* clinfo = 0) const; Interface to CINT function. DataMemberInfo_t * DataMemberInfo_FactoryCopy(DataMemberInfo_t* dminfo) const; Interface to CINT function. bool DataMemberInfo_IsValid(DataMemberInfo_t* dminfo) const; Interface to CINT function. int DataMemberInfo_MaxIndex(DataMemberInfo_t* dminfo, Int_t dim) const; Interface to CINT function. int DataMemberInfo_Next(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_Offset(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_Property(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_TypeProperty(DataMemberInfo_t* dminfo) const; Interface to CINT function. int DataMemberInfo_TypeSize(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_TypeName(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_TypeTrueName(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_Name(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_Title(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_ValidArrayIndex(DataMemberInfo_t* dminfo) const; Interface to CINT function. voi",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:39450,Integrability,Interface,Interface,39450," function. Long_t BaseClassInfo_Tagnum(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_FullName(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_Name(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_TmpltName(BaseClassInfo_t* bcinfo) const; Interface to CINT function. int DataMemberInfo_ArrayDim(DataMemberInfo_t* dminfo) const; Interface to CINT function. void DataMemberInfo_Delete(DataMemberInfo_t* dminfo) const; Interface to CINT function. DataMemberInfo_t * DataMemberInfo_Factory(ClassInfo_t* clinfo = 0) const; Interface to CINT function. DataMemberInfo_t * DataMemberInfo_FactoryCopy(DataMemberInfo_t* dminfo) const; Interface to CINT function. bool DataMemberInfo_IsValid(DataMemberInfo_t* dminfo) const; Interface to CINT function. int DataMemberInfo_MaxIndex(DataMemberInfo_t* dminfo, Int_t dim) const; Interface to CINT function. int DataMemberInfo_Next(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_Offset(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_Property(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_TypeProperty(DataMemberInfo_t* dminfo) const; Interface to CINT function. int DataMemberInfo_TypeSize(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_TypeName(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_TypeTrueName(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_Name(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_Title(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_ValidArrayIndex(DataMemberInfo_t* dminfo) const; Interface to CINT function. void MethodInfo_Delete(MethodInfo_t* minfo) const; Interface to CINT function. void MethodInfo_C",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:39540,Integrability,Interface,Interface,39540," function. const char * BaseClassInfo_FullName(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_Name(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_TmpltName(BaseClassInfo_t* bcinfo) const; Interface to CINT function. int DataMemberInfo_ArrayDim(DataMemberInfo_t* dminfo) const; Interface to CINT function. void DataMemberInfo_Delete(DataMemberInfo_t* dminfo) const; Interface to CINT function. DataMemberInfo_t * DataMemberInfo_Factory(ClassInfo_t* clinfo = 0) const; Interface to CINT function. DataMemberInfo_t * DataMemberInfo_FactoryCopy(DataMemberInfo_t* dminfo) const; Interface to CINT function. bool DataMemberInfo_IsValid(DataMemberInfo_t* dminfo) const; Interface to CINT function. int DataMemberInfo_MaxIndex(DataMemberInfo_t* dminfo, Int_t dim) const; Interface to CINT function. int DataMemberInfo_Next(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_Offset(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_Property(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_TypeProperty(DataMemberInfo_t* dminfo) const; Interface to CINT function. int DataMemberInfo_TypeSize(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_TypeName(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_TypeTrueName(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_Name(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_Title(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_ValidArrayIndex(DataMemberInfo_t* dminfo) const; Interface to CINT function. void MethodInfo_Delete(MethodInfo_t* minfo) const; Interface to CINT function. void MethodInfo_CreateSignature(MethodInfo_t* minfo, TString& signature) const; Interface to CINT functi",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:39632,Integrability,Interface,Interface,39632," CINT function. const char * BaseClassInfo_Name(BaseClassInfo_t* bcinfo) const; Interface to CINT function. const char * BaseClassInfo_TmpltName(BaseClassInfo_t* bcinfo) const; Interface to CINT function. int DataMemberInfo_ArrayDim(DataMemberInfo_t* dminfo) const; Interface to CINT function. void DataMemberInfo_Delete(DataMemberInfo_t* dminfo) const; Interface to CINT function. DataMemberInfo_t * DataMemberInfo_Factory(ClassInfo_t* clinfo = 0) const; Interface to CINT function. DataMemberInfo_t * DataMemberInfo_FactoryCopy(DataMemberInfo_t* dminfo) const; Interface to CINT function. bool DataMemberInfo_IsValid(DataMemberInfo_t* dminfo) const; Interface to CINT function. int DataMemberInfo_MaxIndex(DataMemberInfo_t* dminfo, Int_t dim) const; Interface to CINT function. int DataMemberInfo_Next(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_Offset(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_Property(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_TypeProperty(DataMemberInfo_t* dminfo) const; Interface to CINT function. int DataMemberInfo_TypeSize(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_TypeName(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_TypeTrueName(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_Name(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_Title(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_ValidArrayIndex(DataMemberInfo_t* dminfo) const; Interface to CINT function. void MethodInfo_Delete(MethodInfo_t* minfo) const; Interface to CINT function. void MethodInfo_CreateSignature(MethodInfo_t* minfo, TString& signature) const; Interface to CINT function. MethodInfo_t * MethodInfo_Factory() const; Interface to CINT function. MethodInfo_t * M",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:39728,Integrability,Interface,Interface,39728,"INT function. const char * BaseClassInfo_TmpltName(BaseClassInfo_t* bcinfo) const; Interface to CINT function. int DataMemberInfo_ArrayDim(DataMemberInfo_t* dminfo) const; Interface to CINT function. void DataMemberInfo_Delete(DataMemberInfo_t* dminfo) const; Interface to CINT function. DataMemberInfo_t * DataMemberInfo_Factory(ClassInfo_t* clinfo = 0) const; Interface to CINT function. DataMemberInfo_t * DataMemberInfo_FactoryCopy(DataMemberInfo_t* dminfo) const; Interface to CINT function. bool DataMemberInfo_IsValid(DataMemberInfo_t* dminfo) const; Interface to CINT function. int DataMemberInfo_MaxIndex(DataMemberInfo_t* dminfo, Int_t dim) const; Interface to CINT function. int DataMemberInfo_Next(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_Offset(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_Property(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_TypeProperty(DataMemberInfo_t* dminfo) const; Interface to CINT function. int DataMemberInfo_TypeSize(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_TypeName(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_TypeTrueName(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_Name(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_Title(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_ValidArrayIndex(DataMemberInfo_t* dminfo) const; Interface to CINT function. void MethodInfo_Delete(MethodInfo_t* minfo) const; Interface to CINT function. void MethodInfo_CreateSignature(MethodInfo_t* minfo, TString& signature) const; Interface to CINT function. MethodInfo_t * MethodInfo_Factory() const; Interface to CINT function. MethodInfo_t * MethodInfo_FactoryCopy(MethodInfo_t* minfo) const; Interface to CINT function. void * MethodInf",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:39817,Integrability,Interface,Interface,39817," to CINT function. int DataMemberInfo_ArrayDim(DataMemberInfo_t* dminfo) const; Interface to CINT function. void DataMemberInfo_Delete(DataMemberInfo_t* dminfo) const; Interface to CINT function. DataMemberInfo_t * DataMemberInfo_Factory(ClassInfo_t* clinfo = 0) const; Interface to CINT function. DataMemberInfo_t * DataMemberInfo_FactoryCopy(DataMemberInfo_t* dminfo) const; Interface to CINT function. bool DataMemberInfo_IsValid(DataMemberInfo_t* dminfo) const; Interface to CINT function. int DataMemberInfo_MaxIndex(DataMemberInfo_t* dminfo, Int_t dim) const; Interface to CINT function. int DataMemberInfo_Next(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_Offset(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_Property(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_TypeProperty(DataMemberInfo_t* dminfo) const; Interface to CINT function. int DataMemberInfo_TypeSize(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_TypeName(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_TypeTrueName(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_Name(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_Title(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_ValidArrayIndex(DataMemberInfo_t* dminfo) const; Interface to CINT function. void MethodInfo_Delete(MethodInfo_t* minfo) const; Interface to CINT function. void MethodInfo_CreateSignature(MethodInfo_t* minfo, TString& signature) const; Interface to CINT function. MethodInfo_t * MethodInfo_Factory() const; Interface to CINT function. MethodInfo_t * MethodInfo_FactoryCopy(MethodInfo_t* minfo) const; Interface to CINT function. void * MethodInfo_InterfaceMethod(MethodInfo_t* minfo) const; Interface to CINT function. bool MethodInfo_IsV",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:39915,Integrability,Interface,Interface,39915,"INT function. void DataMemberInfo_Delete(DataMemberInfo_t* dminfo) const; Interface to CINT function. DataMemberInfo_t * DataMemberInfo_Factory(ClassInfo_t* clinfo = 0) const; Interface to CINT function. DataMemberInfo_t * DataMemberInfo_FactoryCopy(DataMemberInfo_t* dminfo) const; Interface to CINT function. bool DataMemberInfo_IsValid(DataMemberInfo_t* dminfo) const; Interface to CINT function. int DataMemberInfo_MaxIndex(DataMemberInfo_t* dminfo, Int_t dim) const; Interface to CINT function. int DataMemberInfo_Next(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_Offset(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_Property(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_TypeProperty(DataMemberInfo_t* dminfo) const; Interface to CINT function. int DataMemberInfo_TypeSize(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_TypeName(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_TypeTrueName(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_Name(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_Title(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_ValidArrayIndex(DataMemberInfo_t* dminfo) const; Interface to CINT function. void MethodInfo_Delete(MethodInfo_t* minfo) const; Interface to CINT function. void MethodInfo_CreateSignature(MethodInfo_t* minfo, TString& signature) const; Interface to CINT function. MethodInfo_t * MethodInfo_Factory() const; Interface to CINT function. MethodInfo_t * MethodInfo_FactoryCopy(MethodInfo_t* minfo) const; Interface to CINT function. void * MethodInfo_InterfaceMethod(MethodInfo_t* minfo) const; Interface to CINT function. bool MethodInfo_IsValid(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_NArg(MethodInfo_t",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:40017,Integrability,Interface,Interface,40017,". DataMemberInfo_t * DataMemberInfo_Factory(ClassInfo_t* clinfo = 0) const; Interface to CINT function. DataMemberInfo_t * DataMemberInfo_FactoryCopy(DataMemberInfo_t* dminfo) const; Interface to CINT function. bool DataMemberInfo_IsValid(DataMemberInfo_t* dminfo) const; Interface to CINT function. int DataMemberInfo_MaxIndex(DataMemberInfo_t* dminfo, Int_t dim) const; Interface to CINT function. int DataMemberInfo_Next(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_Offset(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_Property(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_TypeProperty(DataMemberInfo_t* dminfo) const; Interface to CINT function. int DataMemberInfo_TypeSize(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_TypeName(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_TypeTrueName(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_Name(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_Title(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_ValidArrayIndex(DataMemberInfo_t* dminfo) const; Interface to CINT function. void MethodInfo_Delete(MethodInfo_t* minfo) const; Interface to CINT function. void MethodInfo_CreateSignature(MethodInfo_t* minfo, TString& signature) const; Interface to CINT function. MethodInfo_t * MethodInfo_Factory() const; Interface to CINT function. MethodInfo_t * MethodInfo_FactoryCopy(MethodInfo_t* minfo) const; Interface to CINT function. void * MethodInfo_InterfaceMethod(MethodInfo_t* minfo) const; Interface to CINT function. bool MethodInfo_IsValid(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_NArg(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_NDefaultArg(MethodInfo_t* minfo) const; I",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:40111,Integrability,Interface,Interface,40111,"tion. DataMemberInfo_t * DataMemberInfo_FactoryCopy(DataMemberInfo_t* dminfo) const; Interface to CINT function. bool DataMemberInfo_IsValid(DataMemberInfo_t* dminfo) const; Interface to CINT function. int DataMemberInfo_MaxIndex(DataMemberInfo_t* dminfo, Int_t dim) const; Interface to CINT function. int DataMemberInfo_Next(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_Offset(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_Property(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_TypeProperty(DataMemberInfo_t* dminfo) const; Interface to CINT function. int DataMemberInfo_TypeSize(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_TypeName(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_TypeTrueName(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_Name(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_Title(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_ValidArrayIndex(DataMemberInfo_t* dminfo) const; Interface to CINT function. void MethodInfo_Delete(MethodInfo_t* minfo) const; Interface to CINT function. void MethodInfo_CreateSignature(MethodInfo_t* minfo, TString& signature) const; Interface to CINT function. MethodInfo_t * MethodInfo_Factory() const; Interface to CINT function. MethodInfo_t * MethodInfo_FactoryCopy(MethodInfo_t* minfo) const; Interface to CINT function. void * MethodInfo_InterfaceMethod(MethodInfo_t* minfo) const; Interface to CINT function. bool MethodInfo_IsValid(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_NArg(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_NDefaultArg(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_Next(MethodInfo_t* minfo) const; Interface to CINT funct",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:40206,Integrability,Interface,Interface,40206," to CINT function. bool DataMemberInfo_IsValid(DataMemberInfo_t* dminfo) const; Interface to CINT function. int DataMemberInfo_MaxIndex(DataMemberInfo_t* dminfo, Int_t dim) const; Interface to CINT function. int DataMemberInfo_Next(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_Offset(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_Property(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_TypeProperty(DataMemberInfo_t* dminfo) const; Interface to CINT function. int DataMemberInfo_TypeSize(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_TypeName(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_TypeTrueName(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_Name(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_Title(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_ValidArrayIndex(DataMemberInfo_t* dminfo) const; Interface to CINT function. void MethodInfo_Delete(MethodInfo_t* minfo) const; Interface to CINT function. void MethodInfo_CreateSignature(MethodInfo_t* minfo, TString& signature) const; Interface to CINT function. MethodInfo_t * MethodInfo_Factory() const; Interface to CINT function. MethodInfo_t * MethodInfo_FactoryCopy(MethodInfo_t* minfo) const; Interface to CINT function. void * MethodInfo_InterfaceMethod(MethodInfo_t* minfo) const; Interface to CINT function. bool MethodInfo_IsValid(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_NArg(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_NDefaultArg(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_Next(MethodInfo_t* minfo) const; Interface to CINT function. Long_t MethodInfo_Property(MethodInfo_t* minfo) const; Interface to CINT function. void * ",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:40311,Integrability,Interface,Interface,40311,"nction. int DataMemberInfo_MaxIndex(DataMemberInfo_t* dminfo, Int_t dim) const; Interface to CINT function. int DataMemberInfo_Next(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_Offset(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_Property(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_TypeProperty(DataMemberInfo_t* dminfo) const; Interface to CINT function. int DataMemberInfo_TypeSize(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_TypeName(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_TypeTrueName(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_Name(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_Title(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_ValidArrayIndex(DataMemberInfo_t* dminfo) const; Interface to CINT function. void MethodInfo_Delete(MethodInfo_t* minfo) const; Interface to CINT function. void MethodInfo_CreateSignature(MethodInfo_t* minfo, TString& signature) const; Interface to CINT function. MethodInfo_t * MethodInfo_Factory() const; Interface to CINT function. MethodInfo_t * MethodInfo_FactoryCopy(MethodInfo_t* minfo) const; Interface to CINT function. void * MethodInfo_InterfaceMethod(MethodInfo_t* minfo) const; Interface to CINT function. bool MethodInfo_IsValid(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_NArg(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_NDefaultArg(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_Next(MethodInfo_t* minfo) const; Interface to CINT function. Long_t MethodInfo_Property(MethodInfo_t* minfo) const; Interface to CINT function. void * MethodInfo_Type(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_GetM",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:40390,Integrability,Interface,Interface,40390," CINT function. int DataMemberInfo_Next(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_Offset(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_Property(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_TypeProperty(DataMemberInfo_t* dminfo) const; Interface to CINT function. int DataMemberInfo_TypeSize(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_TypeName(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_TypeTrueName(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_Name(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_Title(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_ValidArrayIndex(DataMemberInfo_t* dminfo) const; Interface to CINT function. void MethodInfo_Delete(MethodInfo_t* minfo) const; Interface to CINT function. void MethodInfo_CreateSignature(MethodInfo_t* minfo, TString& signature) const; Interface to CINT function. MethodInfo_t * MethodInfo_Factory() const; Interface to CINT function. MethodInfo_t * MethodInfo_FactoryCopy(MethodInfo_t* minfo) const; Interface to CINT function. void * MethodInfo_InterfaceMethod(MethodInfo_t* minfo) const; Interface to CINT function. bool MethodInfo_IsValid(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_NArg(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_NDefaultArg(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_Next(MethodInfo_t* minfo) const; Interface to CINT function. Long_t MethodInfo_Property(MethodInfo_t* minfo) const; Interface to CINT function. void * MethodInfo_Type(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_GetMangledName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_G",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:40498,Integrability,Interface,Interface,40498,"ction. Long_t DataMemberInfo_Offset(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_Property(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_TypeProperty(DataMemberInfo_t* dminfo) const; Interface to CINT function. int DataMemberInfo_TypeSize(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_TypeName(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_TypeTrueName(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_Name(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_Title(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_ValidArrayIndex(DataMemberInfo_t* dminfo) const; Interface to CINT function. void MethodInfo_Delete(MethodInfo_t* minfo) const; Interface to CINT function. void MethodInfo_CreateSignature(MethodInfo_t* minfo, TString& signature) const; Interface to CINT function. MethodInfo_t * MethodInfo_Factory() const; Interface to CINT function. MethodInfo_t * MethodInfo_FactoryCopy(MethodInfo_t* minfo) const; Interface to CINT function. void * MethodInfo_InterfaceMethod(MethodInfo_t* minfo) const; Interface to CINT function. bool MethodInfo_IsValid(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_NArg(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_NDefaultArg(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_Next(MethodInfo_t* minfo) const; Interface to CINT function. Long_t MethodInfo_Property(MethodInfo_t* minfo) const; Interface to CINT function. void * MethodInfo_Type(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_GetMangledName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_GetPrototype(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_N",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:40569,Integrability,Interface,Interface,40569,"nction. Long_t DataMemberInfo_Property(DataMemberInfo_t* dminfo) const; Interface to CINT function. Long_t DataMemberInfo_TypeProperty(DataMemberInfo_t* dminfo) const; Interface to CINT function. int DataMemberInfo_TypeSize(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_TypeName(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_TypeTrueName(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_Name(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_Title(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_ValidArrayIndex(DataMemberInfo_t* dminfo) const; Interface to CINT function. void MethodInfo_Delete(MethodInfo_t* minfo) const; Interface to CINT function. void MethodInfo_CreateSignature(MethodInfo_t* minfo, TString& signature) const; Interface to CINT function. MethodInfo_t * MethodInfo_Factory() const; Interface to CINT function. MethodInfo_t * MethodInfo_FactoryCopy(MethodInfo_t* minfo) const; Interface to CINT function. void * MethodInfo_InterfaceMethod(MethodInfo_t* minfo) const; Interface to CINT function. bool MethodInfo_IsValid(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_NArg(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_NDefaultArg(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_Next(MethodInfo_t* minfo) const; Interface to CINT function. Long_t MethodInfo_Property(MethodInfo_t* minfo) const; Interface to CINT function. void * MethodInfo_Type(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_GetMangledName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_GetPrototype(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Name(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_TypeNa",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:40663,Integrability,Interface,Interface,40663,"o CINT function. Long_t DataMemberInfo_TypeProperty(DataMemberInfo_t* dminfo) const; Interface to CINT function. int DataMemberInfo_TypeSize(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_TypeName(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_TypeTrueName(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_Name(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_Title(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_ValidArrayIndex(DataMemberInfo_t* dminfo) const; Interface to CINT function. void MethodInfo_Delete(MethodInfo_t* minfo) const; Interface to CINT function. void MethodInfo_CreateSignature(MethodInfo_t* minfo, TString& signature) const; Interface to CINT function. MethodInfo_t * MethodInfo_Factory() const; Interface to CINT function. MethodInfo_t * MethodInfo_FactoryCopy(MethodInfo_t* minfo) const; Interface to CINT function. void * MethodInfo_InterfaceMethod(MethodInfo_t* minfo) const; Interface to CINT function. bool MethodInfo_IsValid(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_NArg(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_NDefaultArg(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_Next(MethodInfo_t* minfo) const; Interface to CINT function. Long_t MethodInfo_Property(MethodInfo_t* minfo) const; Interface to CINT function. void * MethodInfo_Type(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_GetMangledName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_GetPrototype(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Name(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_TypeName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:40753,Integrability,Interface,Interface,40753,"ce to CINT function. int DataMemberInfo_TypeSize(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_TypeName(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_TypeTrueName(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_Name(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_Title(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_ValidArrayIndex(DataMemberInfo_t* dminfo) const; Interface to CINT function. void MethodInfo_Delete(MethodInfo_t* minfo) const; Interface to CINT function. void MethodInfo_CreateSignature(MethodInfo_t* minfo, TString& signature) const; Interface to CINT function. MethodInfo_t * MethodInfo_Factory() const; Interface to CINT function. MethodInfo_t * MethodInfo_FactoryCopy(MethodInfo_t* minfo) const; Interface to CINT function. void * MethodInfo_InterfaceMethod(MethodInfo_t* minfo) const; Interface to CINT function. bool MethodInfo_IsValid(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_NArg(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_NDefaultArg(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_Next(MethodInfo_t* minfo) const; Interface to CINT function. Long_t MethodInfo_Property(MethodInfo_t* minfo) const; Interface to CINT function. void * MethodInfo_Type(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_GetMangledName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_GetPrototype(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Name(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_TypeName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Title(MethodInfo_t* minfo) const; Interface to CINT function. void MethodArgInfo_Delete(Met",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:40833,Integrability,Interface,Interface,40833,"erface to CINT function. const char * DataMemberInfo_TypeName(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_TypeTrueName(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_Name(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_Title(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_ValidArrayIndex(DataMemberInfo_t* dminfo) const; Interface to CINT function. void MethodInfo_Delete(MethodInfo_t* minfo) const; Interface to CINT function. void MethodInfo_CreateSignature(MethodInfo_t* minfo, TString& signature) const; Interface to CINT function. MethodInfo_t * MethodInfo_Factory() const; Interface to CINT function. MethodInfo_t * MethodInfo_FactoryCopy(MethodInfo_t* minfo) const; Interface to CINT function. void * MethodInfo_InterfaceMethod(MethodInfo_t* minfo) const; Interface to CINT function. bool MethodInfo_IsValid(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_NArg(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_NDefaultArg(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_Next(MethodInfo_t* minfo) const; Interface to CINT function. Long_t MethodInfo_Property(MethodInfo_t* minfo) const; Interface to CINT function. void * MethodInfo_Type(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_GetMangledName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_GetPrototype(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Name(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_TypeName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Title(MethodInfo_t* minfo) const; Interface to CINT function. void MethodArgInfo_Delete(MethodArgInfo_t* marginfo) const; Interface to CINT function. MethodArgInfo_t * MethodAr",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:40909,Integrability,Interface,Interface,40909,"* dminfo) const; Interface to CINT function. const char * DataMemberInfo_TypeTrueName(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_Name(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_Title(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_ValidArrayIndex(DataMemberInfo_t* dminfo) const; Interface to CINT function. void MethodInfo_Delete(MethodInfo_t* minfo) const; Interface to CINT function. void MethodInfo_CreateSignature(MethodInfo_t* minfo, TString& signature) const; Interface to CINT function. MethodInfo_t * MethodInfo_Factory() const; Interface to CINT function. MethodInfo_t * MethodInfo_FactoryCopy(MethodInfo_t* minfo) const; Interface to CINT function. void * MethodInfo_InterfaceMethod(MethodInfo_t* minfo) const; Interface to CINT function. bool MethodInfo_IsValid(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_NArg(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_NDefaultArg(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_Next(MethodInfo_t* minfo) const; Interface to CINT function. Long_t MethodInfo_Property(MethodInfo_t* minfo) const; Interface to CINT function. void * MethodInfo_Type(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_GetMangledName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_GetPrototype(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Name(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_TypeName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Title(MethodInfo_t* minfo) const; Interface to CINT function. void MethodArgInfo_Delete(MethodArgInfo_t* marginfo) const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_Factory() const; Interface to CINT function. MethodArgInfo_t * MethodArg",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:40992,Integrability,Interface,Interface,40992,"ueName(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_Name(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_Title(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_ValidArrayIndex(DataMemberInfo_t* dminfo) const; Interface to CINT function. void MethodInfo_Delete(MethodInfo_t* minfo) const; Interface to CINT function. void MethodInfo_CreateSignature(MethodInfo_t* minfo, TString& signature) const; Interface to CINT function. MethodInfo_t * MethodInfo_Factory() const; Interface to CINT function. MethodInfo_t * MethodInfo_FactoryCopy(MethodInfo_t* minfo) const; Interface to CINT function. void * MethodInfo_InterfaceMethod(MethodInfo_t* minfo) const; Interface to CINT function. bool MethodInfo_IsValid(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_NArg(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_NDefaultArg(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_Next(MethodInfo_t* minfo) const; Interface to CINT function. Long_t MethodInfo_Property(MethodInfo_t* minfo) const; Interface to CINT function. void * MethodInfo_Type(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_GetMangledName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_GetPrototype(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Name(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_TypeName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Title(MethodInfo_t* minfo) const; Interface to CINT function. void MethodArgInfo_Delete(MethodArgInfo_t* marginfo) const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_Factory() const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_FactoryCopy(MethodArgInfo_t* marginfo) const; Interface to CINT function. b",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:41068,Integrability,Interface,Interface,41068," DataMemberInfo_Name(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_Title(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_ValidArrayIndex(DataMemberInfo_t* dminfo) const; Interface to CINT function. void MethodInfo_Delete(MethodInfo_t* minfo) const; Interface to CINT function. void MethodInfo_CreateSignature(MethodInfo_t* minfo, TString& signature) const; Interface to CINT function. MethodInfo_t * MethodInfo_Factory() const; Interface to CINT function. MethodInfo_t * MethodInfo_FactoryCopy(MethodInfo_t* minfo) const; Interface to CINT function. void * MethodInfo_InterfaceMethod(MethodInfo_t* minfo) const; Interface to CINT function. bool MethodInfo_IsValid(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_NArg(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_NDefaultArg(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_Next(MethodInfo_t* minfo) const; Interface to CINT function. Long_t MethodInfo_Property(MethodInfo_t* minfo) const; Interface to CINT function. void * MethodInfo_Type(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_GetMangledName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_GetPrototype(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Name(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_TypeName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Title(MethodInfo_t* minfo) const; Interface to CINT function. void MethodArgInfo_Delete(MethodArgInfo_t* marginfo) const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_Factory() const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_FactoryCopy(MethodArgInfo_t* marginfo) const; Interface to CINT function. bool MethodArgInfo_IsValid(MethodArgInfo_t* marginfo) const; Interface to CINT f",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:41151,Integrability,Interface,Interface,41151,"n. const char * DataMemberInfo_Title(DataMemberInfo_t* dminfo) const; Interface to CINT function. const char * DataMemberInfo_ValidArrayIndex(DataMemberInfo_t* dminfo) const; Interface to CINT function. void MethodInfo_Delete(MethodInfo_t* minfo) const; Interface to CINT function. void MethodInfo_CreateSignature(MethodInfo_t* minfo, TString& signature) const; Interface to CINT function. MethodInfo_t * MethodInfo_Factory() const; Interface to CINT function. MethodInfo_t * MethodInfo_FactoryCopy(MethodInfo_t* minfo) const; Interface to CINT function. void * MethodInfo_InterfaceMethod(MethodInfo_t* minfo) const; Interface to CINT function. bool MethodInfo_IsValid(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_NArg(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_NDefaultArg(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_Next(MethodInfo_t* minfo) const; Interface to CINT function. Long_t MethodInfo_Property(MethodInfo_t* minfo) const; Interface to CINT function. void * MethodInfo_Type(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_GetMangledName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_GetPrototype(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Name(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_TypeName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Title(MethodInfo_t* minfo) const; Interface to CINT function. void MethodArgInfo_Delete(MethodArgInfo_t* marginfo) const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_Factory() const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_FactoryCopy(MethodArgInfo_t* marginfo) const; Interface to CINT function. bool MethodArgInfo_IsValid(MethodArgInfo_t* marginfo) const; Interface to CINT function. int MethodArgInfo_Next(MethodArgInfo_t* marginfo) const; Interface to C",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:41230,Integrability,Interface,Interface,41230,"o CINT function. const char * DataMemberInfo_ValidArrayIndex(DataMemberInfo_t* dminfo) const; Interface to CINT function. void MethodInfo_Delete(MethodInfo_t* minfo) const; Interface to CINT function. void MethodInfo_CreateSignature(MethodInfo_t* minfo, TString& signature) const; Interface to CINT function. MethodInfo_t * MethodInfo_Factory() const; Interface to CINT function. MethodInfo_t * MethodInfo_FactoryCopy(MethodInfo_t* minfo) const; Interface to CINT function. void * MethodInfo_InterfaceMethod(MethodInfo_t* minfo) const; Interface to CINT function. bool MethodInfo_IsValid(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_NArg(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_NDefaultArg(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_Next(MethodInfo_t* minfo) const; Interface to CINT function. Long_t MethodInfo_Property(MethodInfo_t* minfo) const; Interface to CINT function. void * MethodInfo_Type(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_GetMangledName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_GetPrototype(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Name(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_TypeName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Title(MethodInfo_t* minfo) const; Interface to CINT function. void MethodArgInfo_Delete(MethodArgInfo_t* marginfo) const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_Factory() const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_FactoryCopy(MethodArgInfo_t* marginfo) const; Interface to CINT function. bool MethodArgInfo_IsValid(MethodArgInfo_t* marginfo) const; Interface to CINT function. int MethodArgInfo_Next(MethodArgInfo_t* marginfo) const; Interface to CINT function. Long_t MethodArgInfo_Property(MethodArgInfo_t* marginfo) const; Int",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:41325,Integrability,Interface,Interface,41325,"const; Interface to CINT function. void MethodInfo_Delete(MethodInfo_t* minfo) const; Interface to CINT function. void MethodInfo_CreateSignature(MethodInfo_t* minfo, TString& signature) const; Interface to CINT function. MethodInfo_t * MethodInfo_Factory() const; Interface to CINT function. MethodInfo_t * MethodInfo_FactoryCopy(MethodInfo_t* minfo) const; Interface to CINT function. void * MethodInfo_InterfaceMethod(MethodInfo_t* minfo) const; Interface to CINT function. bool MethodInfo_IsValid(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_NArg(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_NDefaultArg(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_Next(MethodInfo_t* minfo) const; Interface to CINT function. Long_t MethodInfo_Property(MethodInfo_t* minfo) const; Interface to CINT function. void * MethodInfo_Type(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_GetMangledName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_GetPrototype(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Name(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_TypeName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Title(MethodInfo_t* minfo) const; Interface to CINT function. void MethodArgInfo_Delete(MethodArgInfo_t* marginfo) const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_Factory() const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_FactoryCopy(MethodArgInfo_t* marginfo) const; Interface to CINT function. bool MethodArgInfo_IsValid(MethodArgInfo_t* marginfo) const; Interface to CINT function. int MethodArgInfo_Next(MethodArgInfo_t* marginfo) const; Interface to CINT function. Long_t MethodArgInfo_Property(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_DefaultValue(MethodArgInfo_t* margi",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:41418,Integrability,Interface,Interface,41418,"e to CINT function. void MethodInfo_CreateSignature(MethodInfo_t* minfo, TString& signature) const; Interface to CINT function. MethodInfo_t * MethodInfo_Factory() const; Interface to CINT function. MethodInfo_t * MethodInfo_FactoryCopy(MethodInfo_t* minfo) const; Interface to CINT function. void * MethodInfo_InterfaceMethod(MethodInfo_t* minfo) const; Interface to CINT function. bool MethodInfo_IsValid(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_NArg(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_NDefaultArg(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_Next(MethodInfo_t* minfo) const; Interface to CINT function. Long_t MethodInfo_Property(MethodInfo_t* minfo) const; Interface to CINT function. void * MethodInfo_Type(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_GetMangledName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_GetPrototype(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Name(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_TypeName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Title(MethodInfo_t* minfo) const; Interface to CINT function. void MethodArgInfo_Delete(MethodArgInfo_t* marginfo) const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_Factory() const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_FactoryCopy(MethodArgInfo_t* marginfo) const; Interface to CINT function. bool MethodArgInfo_IsValid(MethodArgInfo_t* marginfo) const; Interface to CINT function. int MethodArgInfo_Next(MethodArgInfo_t* marginfo) const; Interface to CINT function. Long_t MethodArgInfo_Property(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_DefaultValue(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_Name(MethodArgInfo_t* margi",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:41503,Integrability,Interface,Interface,41503,re) const; Interface to CINT function. MethodInfo_t * MethodInfo_Factory() const; Interface to CINT function. MethodInfo_t * MethodInfo_FactoryCopy(MethodInfo_t* minfo) const; Interface to CINT function. void * MethodInfo_InterfaceMethod(MethodInfo_t* minfo) const; Interface to CINT function. bool MethodInfo_IsValid(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_NArg(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_NDefaultArg(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_Next(MethodInfo_t* minfo) const; Interface to CINT function. Long_t MethodInfo_Property(MethodInfo_t* minfo) const; Interface to CINT function. void * MethodInfo_Type(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_GetMangledName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_GetPrototype(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Name(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_TypeName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Title(MethodInfo_t* minfo) const; Interface to CINT function. void MethodArgInfo_Delete(MethodArgInfo_t* marginfo) const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_Factory() const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_FactoryCopy(MethodArgInfo_t* marginfo) const; Interface to CINT function. bool MethodArgInfo_IsValid(MethodArgInfo_t* marginfo) const; Interface to CINT function. int MethodArgInfo_Next(MethodArgInfo_t* marginfo) const; Interface to CINT function. Long_t MethodArgInfo_Property(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_DefaultValue(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_Name(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_TypeName(MethodArgInfo,MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:41592,Integrability,Interface,Interface,41592,face to CINT function. MethodInfo_t * MethodInfo_FactoryCopy(MethodInfo_t* minfo) const; Interface to CINT function. void * MethodInfo_InterfaceMethod(MethodInfo_t* minfo) const; Interface to CINT function. bool MethodInfo_IsValid(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_NArg(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_NDefaultArg(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_Next(MethodInfo_t* minfo) const; Interface to CINT function. Long_t MethodInfo_Property(MethodInfo_t* minfo) const; Interface to CINT function. void * MethodInfo_Type(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_GetMangledName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_GetPrototype(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Name(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_TypeName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Title(MethodInfo_t* minfo) const; Interface to CINT function. void MethodArgInfo_Delete(MethodArgInfo_t* marginfo) const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_Factory() const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_FactoryCopy(MethodArgInfo_t* marginfo) const; Interface to CINT function. bool MethodArgInfo_IsValid(MethodArgInfo_t* marginfo) const; Interface to CINT function. int MethodArgInfo_Next(MethodArgInfo_t* marginfo) const; Interface to CINT function. Long_t MethodArgInfo_Property(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_DefaultValue(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_Name(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_TypeName(MethodArgInfo_t* marginfo) const; Interface to CINT function. void TypeInfo_Delete(TypeInfo_t* tinfo,MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:41678,Integrability,Interface,Interface,41678, Interface to CINT function. void * MethodInfo_InterfaceMethod(MethodInfo_t* minfo) const; Interface to CINT function. bool MethodInfo_IsValid(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_NArg(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_NDefaultArg(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_Next(MethodInfo_t* minfo) const; Interface to CINT function. Long_t MethodInfo_Property(MethodInfo_t* minfo) const; Interface to CINT function. void * MethodInfo_Type(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_GetMangledName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_GetPrototype(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Name(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_TypeName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Title(MethodInfo_t* minfo) const; Interface to CINT function. void MethodArgInfo_Delete(MethodArgInfo_t* marginfo) const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_Factory() const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_FactoryCopy(MethodArgInfo_t* marginfo) const; Interface to CINT function. bool MethodArgInfo_IsValid(MethodArgInfo_t* marginfo) const; Interface to CINT function. int MethodArgInfo_Next(MethodArgInfo_t* marginfo) const; Interface to CINT function. Long_t MethodArgInfo_Property(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_DefaultValue(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_Name(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_TypeName(MethodArgInfo_t* marginfo) const; Interface to CINT function. void TypeInfo_Delete(TypeInfo_t* tinfo) const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory() const; Interface t,MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:41766,Integrability,Interface,Interface,41766,st; Interface to CINT function. bool MethodInfo_IsValid(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_NArg(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_NDefaultArg(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_Next(MethodInfo_t* minfo) const; Interface to CINT function. Long_t MethodInfo_Property(MethodInfo_t* minfo) const; Interface to CINT function. void * MethodInfo_Type(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_GetMangledName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_GetPrototype(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Name(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_TypeName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Title(MethodInfo_t* minfo) const; Interface to CINT function. void MethodArgInfo_Delete(MethodArgInfo_t* marginfo) const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_Factory() const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_FactoryCopy(MethodArgInfo_t* marginfo) const; Interface to CINT function. bool MethodArgInfo_IsValid(MethodArgInfo_t* marginfo) const; Interface to CINT function. int MethodArgInfo_Next(MethodArgInfo_t* marginfo) const; Interface to CINT function. Long_t MethodArgInfo_Property(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_DefaultValue(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_Name(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_TypeName(MethodArgInfo_t* marginfo) const; Interface to CINT function. void TypeInfo_Delete(TypeInfo_t* tinfo) const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory() const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory(G__value* ) const; Interface to CINT fun,MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:41843,Integrability,Interface,Interface,41843,; Interface to CINT function. int MethodInfo_NArg(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_NDefaultArg(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_Next(MethodInfo_t* minfo) const; Interface to CINT function. Long_t MethodInfo_Property(MethodInfo_t* minfo) const; Interface to CINT function. void * MethodInfo_Type(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_GetMangledName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_GetPrototype(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Name(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_TypeName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Title(MethodInfo_t* minfo) const; Interface to CINT function. void MethodArgInfo_Delete(MethodArgInfo_t* marginfo) const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_Factory() const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_FactoryCopy(MethodArgInfo_t* marginfo) const; Interface to CINT function. bool MethodArgInfo_IsValid(MethodArgInfo_t* marginfo) const; Interface to CINT function. int MethodArgInfo_Next(MethodArgInfo_t* marginfo) const; Interface to CINT function. Long_t MethodArgInfo_Property(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_DefaultValue(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_Name(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_TypeName(MethodArgInfo_t* marginfo) const; Interface to CINT function. void TypeInfo_Delete(TypeInfo_t* tinfo) const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory() const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory(G__value* ) const; Interface to CINT function. TypeInfo_t * TypeInfo_FactoryCopy(TypeInfo_t* ) const; Interface to CINT fun,MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:41949,Integrability,Interface,Interface,41949,"INT function. int MethodInfo_NDefaultArg(MethodInfo_t* minfo) const; Interface to CINT function. int MethodInfo_Next(MethodInfo_t* minfo) const; Interface to CINT function. Long_t MethodInfo_Property(MethodInfo_t* minfo) const; Interface to CINT function. void * MethodInfo_Type(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_GetMangledName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_GetPrototype(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Name(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_TypeName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Title(MethodInfo_t* minfo) const; Interface to CINT function. void MethodArgInfo_Delete(MethodArgInfo_t* marginfo) const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_Factory() const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_FactoryCopy(MethodArgInfo_t* marginfo) const; Interface to CINT function. bool MethodArgInfo_IsValid(MethodArgInfo_t* marginfo) const; Interface to CINT function. int MethodArgInfo_Next(MethodArgInfo_t* marginfo) const; Interface to CINT function. Long_t MethodArgInfo_Property(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_DefaultValue(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_Name(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_TypeName(MethodArgInfo_t* marginfo) const; Interface to CINT function. void TypeInfo_Delete(TypeInfo_t* tinfo) const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory() const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory(G__value* ) const; Interface to CINT function. TypeInfo_t * TypeInfo_FactoryCopy(TypeInfo_t* ) const; Interface to CINT function. void TypeInfo_Init(TypeInfo_t* tinfo, const char* funcname) const; Interface to CINT",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:42038,Integrability,Interface,Interface,42038,"int MethodInfo_Next(MethodInfo_t* minfo) const; Interface to CINT function. Long_t MethodInfo_Property(MethodInfo_t* minfo) const; Interface to CINT function. void * MethodInfo_Type(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_GetMangledName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_GetPrototype(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Name(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_TypeName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Title(MethodInfo_t* minfo) const; Interface to CINT function. void MethodArgInfo_Delete(MethodArgInfo_t* marginfo) const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_Factory() const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_FactoryCopy(MethodArgInfo_t* marginfo) const; Interface to CINT function. bool MethodArgInfo_IsValid(MethodArgInfo_t* marginfo) const; Interface to CINT function. int MethodArgInfo_Next(MethodArgInfo_t* marginfo) const; Interface to CINT function. Long_t MethodArgInfo_Property(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_DefaultValue(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_Name(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_TypeName(MethodArgInfo_t* marginfo) const; Interface to CINT function. void TypeInfo_Delete(TypeInfo_t* tinfo) const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory() const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory(G__value* ) const; Interface to CINT function. TypeInfo_t * TypeInfo_FactoryCopy(TypeInfo_t* ) const; Interface to CINT function. void TypeInfo_Init(TypeInfo_t* tinfo, const char* funcname) const; Interface to CINT function. bool TypeInfo_IsValid(TypeInfo_t* tinfo) const; Interface to CINT function. const char ",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:42123,Integrability,Interface,Interface,42123,"odInfo_Property(MethodInfo_t* minfo) const; Interface to CINT function. void * MethodInfo_Type(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_GetMangledName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_GetPrototype(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Name(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_TypeName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Title(MethodInfo_t* minfo) const; Interface to CINT function. void MethodArgInfo_Delete(MethodArgInfo_t* marginfo) const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_Factory() const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_FactoryCopy(MethodArgInfo_t* marginfo) const; Interface to CINT function. bool MethodArgInfo_IsValid(MethodArgInfo_t* marginfo) const; Interface to CINT function. int MethodArgInfo_Next(MethodArgInfo_t* marginfo) const; Interface to CINT function. Long_t MethodArgInfo_Property(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_DefaultValue(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_Name(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_TypeName(MethodArgInfo_t* marginfo) const; Interface to CINT function. void TypeInfo_Delete(TypeInfo_t* tinfo) const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory() const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory(G__value* ) const; Interface to CINT function. TypeInfo_t * TypeInfo_FactoryCopy(TypeInfo_t* ) const; Interface to CINT function. void TypeInfo_Init(TypeInfo_t* tinfo, const char* funcname) const; Interface to CINT function. bool TypeInfo_IsValid(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_Name(TypeInfo_t* ) const; Interface to CINT function. Long_t TypeInfo_Proper",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:42215,Integrability,Interface,Interface,42215,"_Type(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_GetMangledName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_GetPrototype(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Name(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_TypeName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Title(MethodInfo_t* minfo) const; Interface to CINT function. void MethodArgInfo_Delete(MethodArgInfo_t* marginfo) const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_Factory() const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_FactoryCopy(MethodArgInfo_t* marginfo) const; Interface to CINT function. bool MethodArgInfo_IsValid(MethodArgInfo_t* marginfo) const; Interface to CINT function. int MethodArgInfo_Next(MethodArgInfo_t* marginfo) const; Interface to CINT function. Long_t MethodArgInfo_Property(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_DefaultValue(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_Name(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_TypeName(MethodArgInfo_t* marginfo) const; Interface to CINT function. void TypeInfo_Delete(TypeInfo_t* tinfo) const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory() const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory(G__value* ) const; Interface to CINT function. TypeInfo_t * TypeInfo_FactoryCopy(TypeInfo_t* ) const; Interface to CINT function. void TypeInfo_Init(TypeInfo_t* tinfo, const char* funcname) const; Interface to CINT function. bool TypeInfo_IsValid(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_Name(TypeInfo_t* ) const; Interface to CINT function. Long_t TypeInfo_Property(TypeInfo_t* tinfo) const; Interface to CINT function. int TypeInfo_RefType(TypeInfo_t",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:42317,Integrability,Interface,Interface,42317,"ame(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_GetPrototype(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Name(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_TypeName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Title(MethodInfo_t* minfo) const; Interface to CINT function. void MethodArgInfo_Delete(MethodArgInfo_t* marginfo) const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_Factory() const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_FactoryCopy(MethodArgInfo_t* marginfo) const; Interface to CINT function. bool MethodArgInfo_IsValid(MethodArgInfo_t* marginfo) const; Interface to CINT function. int MethodArgInfo_Next(MethodArgInfo_t* marginfo) const; Interface to CINT function. Long_t MethodArgInfo_Property(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_DefaultValue(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_Name(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_TypeName(MethodArgInfo_t* marginfo) const; Interface to CINT function. void TypeInfo_Delete(TypeInfo_t* tinfo) const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory() const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory(G__value* ) const; Interface to CINT function. TypeInfo_t * TypeInfo_FactoryCopy(TypeInfo_t* ) const; Interface to CINT function. void TypeInfo_Init(TypeInfo_t* tinfo, const char* funcname) const; Interface to CINT function. bool TypeInfo_IsValid(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_Name(TypeInfo_t* ) const; Interface to CINT function. Long_t TypeInfo_Property(TypeInfo_t* tinfo) const; Interface to CINT function. int TypeInfo_RefType(TypeInfo_t* ) const; Interface to CINT function. int TypeInfo_Size(TypeInfo_t* tinfo) const; Interface to C",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:42411,Integrability,Interface,Interface,42411,"ethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Name(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_TypeName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Title(MethodInfo_t* minfo) const; Interface to CINT function. void MethodArgInfo_Delete(MethodArgInfo_t* marginfo) const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_Factory() const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_FactoryCopy(MethodArgInfo_t* marginfo) const; Interface to CINT function. bool MethodArgInfo_IsValid(MethodArgInfo_t* marginfo) const; Interface to CINT function. int MethodArgInfo_Next(MethodArgInfo_t* marginfo) const; Interface to CINT function. Long_t MethodArgInfo_Property(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_DefaultValue(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_Name(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_TypeName(MethodArgInfo_t* marginfo) const; Interface to CINT function. void TypeInfo_Delete(TypeInfo_t* tinfo) const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory() const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory(G__value* ) const; Interface to CINT function. TypeInfo_t * TypeInfo_FactoryCopy(TypeInfo_t* ) const; Interface to CINT function. void TypeInfo_Init(TypeInfo_t* tinfo, const char* funcname) const; Interface to CINT function. bool TypeInfo_IsValid(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_Name(TypeInfo_t* ) const; Interface to CINT function. Long_t TypeInfo_Property(TypeInfo_t* tinfo) const; Interface to CINT function. int TypeInfo_RefType(TypeInfo_t* ) const; Interface to CINT function. int TypeInfo_Size(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_TrueName(TypeInfo_t* tinfo) const; Interface to CINT function.",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:42509,Integrability,Interface,Interface,42509,"* minfo) const; Interface to CINT function. const char * MethodInfo_TypeName(MethodInfo_t* minfo) const; Interface to CINT function. const char * MethodInfo_Title(MethodInfo_t* minfo) const; Interface to CINT function. void MethodArgInfo_Delete(MethodArgInfo_t* marginfo) const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_Factory() const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_FactoryCopy(MethodArgInfo_t* marginfo) const; Interface to CINT function. bool MethodArgInfo_IsValid(MethodArgInfo_t* marginfo) const; Interface to CINT function. int MethodArgInfo_Next(MethodArgInfo_t* marginfo) const; Interface to CINT function. Long_t MethodArgInfo_Property(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_DefaultValue(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_Name(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_TypeName(MethodArgInfo_t* marginfo) const; Interface to CINT function. void TypeInfo_Delete(TypeInfo_t* tinfo) const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory() const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory(G__value* ) const; Interface to CINT function. TypeInfo_t * TypeInfo_FactoryCopy(TypeInfo_t* ) const; Interface to CINT function. void TypeInfo_Init(TypeInfo_t* tinfo, const char* funcname) const; Interface to CINT function. bool TypeInfo_IsValid(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_Name(TypeInfo_t* ) const; Interface to CINT function. Long_t TypeInfo_Property(TypeInfo_t* tinfo) const; Interface to CINT function. int TypeInfo_RefType(TypeInfo_t* ) const; Interface to CINT function. int TypeInfo_Size(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_TrueName(TypeInfo_t* tinfo) const; Interface to CINT function. void TypedefInfo_Delete(TypedefInfo_t* tinfo) const; Interface to CINT function. TypedefInfo_t ",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:42584,Integrability,Interface,Interface,42584,"o_t* minfo) const; Interface to CINT function. const char * MethodInfo_Title(MethodInfo_t* minfo) const; Interface to CINT function. void MethodArgInfo_Delete(MethodArgInfo_t* marginfo) const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_Factory() const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_FactoryCopy(MethodArgInfo_t* marginfo) const; Interface to CINT function. bool MethodArgInfo_IsValid(MethodArgInfo_t* marginfo) const; Interface to CINT function. int MethodArgInfo_Next(MethodArgInfo_t* marginfo) const; Interface to CINT function. Long_t MethodArgInfo_Property(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_DefaultValue(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_Name(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_TypeName(MethodArgInfo_t* marginfo) const; Interface to CINT function. void TypeInfo_Delete(TypeInfo_t* tinfo) const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory() const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory(G__value* ) const; Interface to CINT function. TypeInfo_t * TypeInfo_FactoryCopy(TypeInfo_t* ) const; Interface to CINT function. void TypeInfo_Init(TypeInfo_t* tinfo, const char* funcname) const; Interface to CINT function. bool TypeInfo_IsValid(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_Name(TypeInfo_t* ) const; Interface to CINT function. Long_t TypeInfo_Property(TypeInfo_t* tinfo) const; Interface to CINT function. int TypeInfo_RefType(TypeInfo_t* ) const; Interface to CINT function. int TypeInfo_Size(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_TrueName(TypeInfo_t* tinfo) const; Interface to CINT function. void TypedefInfo_Delete(TypedefInfo_t* tinfo) const; Interface to CINT function. TypedefInfo_t * TypedefInfo_Factory() const; Interface to CINT function. TypedefInfo_t * TypedefInfo_",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:42651,Integrability,Interface,Interface,42651,"Title(MethodInfo_t* minfo) const; Interface to CINT function. void MethodArgInfo_Delete(MethodArgInfo_t* marginfo) const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_Factory() const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_FactoryCopy(MethodArgInfo_t* marginfo) const; Interface to CINT function. bool MethodArgInfo_IsValid(MethodArgInfo_t* marginfo) const; Interface to CINT function. int MethodArgInfo_Next(MethodArgInfo_t* marginfo) const; Interface to CINT function. Long_t MethodArgInfo_Property(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_DefaultValue(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_Name(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_TypeName(MethodArgInfo_t* marginfo) const; Interface to CINT function. void TypeInfo_Delete(TypeInfo_t* tinfo) const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory() const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory(G__value* ) const; Interface to CINT function. TypeInfo_t * TypeInfo_FactoryCopy(TypeInfo_t* ) const; Interface to CINT function. void TypeInfo_Init(TypeInfo_t* tinfo, const char* funcname) const; Interface to CINT function. bool TypeInfo_IsValid(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_Name(TypeInfo_t* ) const; Interface to CINT function. Long_t TypeInfo_Property(TypeInfo_t* tinfo) const; Interface to CINT function. int TypeInfo_RefType(TypeInfo_t* ) const; Interface to CINT function. int TypeInfo_Size(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_TrueName(TypeInfo_t* tinfo) const; Interface to CINT function. void TypedefInfo_Delete(TypedefInfo_t* tinfo) const; Interface to CINT function. TypedefInfo_t * TypedefInfo_Factory() const; Interface to CINT function. TypedefInfo_t * TypedefInfo_FactoryCopy(TypedefInfo_t* tinfo) const; Interface to CINT function. Ty",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:42728,Integrability,Interface,Interface,42728,"dArgInfo_Delete(MethodArgInfo_t* marginfo) const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_Factory() const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_FactoryCopy(MethodArgInfo_t* marginfo) const; Interface to CINT function. bool MethodArgInfo_IsValid(MethodArgInfo_t* marginfo) const; Interface to CINT function. int MethodArgInfo_Next(MethodArgInfo_t* marginfo) const; Interface to CINT function. Long_t MethodArgInfo_Property(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_DefaultValue(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_Name(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_TypeName(MethodArgInfo_t* marginfo) const; Interface to CINT function. void TypeInfo_Delete(TypeInfo_t* tinfo) const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory() const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory(G__value* ) const; Interface to CINT function. TypeInfo_t * TypeInfo_FactoryCopy(TypeInfo_t* ) const; Interface to CINT function. void TypeInfo_Init(TypeInfo_t* tinfo, const char* funcname) const; Interface to CINT function. bool TypeInfo_IsValid(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_Name(TypeInfo_t* ) const; Interface to CINT function. Long_t TypeInfo_Property(TypeInfo_t* tinfo) const; Interface to CINT function. int TypeInfo_RefType(TypeInfo_t* ) const; Interface to CINT function. int TypeInfo_Size(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_TrueName(TypeInfo_t* tinfo) const; Interface to CINT function. void TypedefInfo_Delete(TypedefInfo_t* tinfo) const; Interface to CINT function. TypedefInfo_t * TypedefInfo_Factory() const; Interface to CINT function. TypedefInfo_t * TypedefInfo_FactoryCopy(TypedefInfo_t* tinfo) const; Interface to CINT function. TypedefInfo_t TypedefInfo_Init(TypedefInfo_t* tinfo, const char* funcname)",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:42811,Integrability,Interface,Interface,42811,"thodArgInfo_t * MethodArgInfo_Factory() const; Interface to CINT function. MethodArgInfo_t * MethodArgInfo_FactoryCopy(MethodArgInfo_t* marginfo) const; Interface to CINT function. bool MethodArgInfo_IsValid(MethodArgInfo_t* marginfo) const; Interface to CINT function. int MethodArgInfo_Next(MethodArgInfo_t* marginfo) const; Interface to CINT function. Long_t MethodArgInfo_Property(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_DefaultValue(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_Name(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_TypeName(MethodArgInfo_t* marginfo) const; Interface to CINT function. void TypeInfo_Delete(TypeInfo_t* tinfo) const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory() const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory(G__value* ) const; Interface to CINT function. TypeInfo_t * TypeInfo_FactoryCopy(TypeInfo_t* ) const; Interface to CINT function. void TypeInfo_Init(TypeInfo_t* tinfo, const char* funcname) const; Interface to CINT function. bool TypeInfo_IsValid(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_Name(TypeInfo_t* ) const; Interface to CINT function. Long_t TypeInfo_Property(TypeInfo_t* tinfo) const; Interface to CINT function. int TypeInfo_RefType(TypeInfo_t* ) const; Interface to CINT function. int TypeInfo_Size(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_TrueName(TypeInfo_t* tinfo) const; Interface to CINT function. void TypedefInfo_Delete(TypedefInfo_t* tinfo) const; Interface to CINT function. TypedefInfo_t * TypedefInfo_Factory() const; Interface to CINT function. TypedefInfo_t * TypedefInfo_FactoryCopy(TypedefInfo_t* tinfo) const; Interface to CINT function. TypedefInfo_t TypedefInfo_Init(TypedefInfo_t* tinfo, const char* funcname) const; Interface to CINT function. bool TypedefInfo_IsValid(TypedefInfo_t* tinf",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:42906,Integrability,Interface,Interface,42906,"t * MethodArgInfo_FactoryCopy(MethodArgInfo_t* marginfo) const; Interface to CINT function. bool MethodArgInfo_IsValid(MethodArgInfo_t* marginfo) const; Interface to CINT function. int MethodArgInfo_Next(MethodArgInfo_t* marginfo) const; Interface to CINT function. Long_t MethodArgInfo_Property(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_DefaultValue(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_Name(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_TypeName(MethodArgInfo_t* marginfo) const; Interface to CINT function. void TypeInfo_Delete(TypeInfo_t* tinfo) const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory() const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory(G__value* ) const; Interface to CINT function. TypeInfo_t * TypeInfo_FactoryCopy(TypeInfo_t* ) const; Interface to CINT function. void TypeInfo_Init(TypeInfo_t* tinfo, const char* funcname) const; Interface to CINT function. bool TypeInfo_IsValid(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_Name(TypeInfo_t* ) const; Interface to CINT function. Long_t TypeInfo_Property(TypeInfo_t* tinfo) const; Interface to CINT function. int TypeInfo_RefType(TypeInfo_t* ) const; Interface to CINT function. int TypeInfo_Size(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_TrueName(TypeInfo_t* tinfo) const; Interface to CINT function. void TypedefInfo_Delete(TypedefInfo_t* tinfo) const; Interface to CINT function. TypedefInfo_t * TypedefInfo_Factory() const; Interface to CINT function. TypedefInfo_t * TypedefInfo_FactoryCopy(TypedefInfo_t* tinfo) const; Interface to CINT function. TypedefInfo_t TypedefInfo_Init(TypedefInfo_t* tinfo, const char* funcname) const; Interface to CINT function. bool TypedefInfo_IsValid(TypedefInfo_t* tinfo) const; Interface to CINT function. Long_t TypedefInfo_Property(TypedefInfo_t* tinfo) c",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:42982,Integrability,Interface,Interface,42982,"tion. bool MethodArgInfo_IsValid(MethodArgInfo_t* marginfo) const; Interface to CINT function. int MethodArgInfo_Next(MethodArgInfo_t* marginfo) const; Interface to CINT function. Long_t MethodArgInfo_Property(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_DefaultValue(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_Name(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_TypeName(MethodArgInfo_t* marginfo) const; Interface to CINT function. void TypeInfo_Delete(TypeInfo_t* tinfo) const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory() const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory(G__value* ) const; Interface to CINT function. TypeInfo_t * TypeInfo_FactoryCopy(TypeInfo_t* ) const; Interface to CINT function. void TypeInfo_Init(TypeInfo_t* tinfo, const char* funcname) const; Interface to CINT function. bool TypeInfo_IsValid(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_Name(TypeInfo_t* ) const; Interface to CINT function. Long_t TypeInfo_Property(TypeInfo_t* tinfo) const; Interface to CINT function. int TypeInfo_RefType(TypeInfo_t* ) const; Interface to CINT function. int TypeInfo_Size(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_TrueName(TypeInfo_t* tinfo) const; Interface to CINT function. void TypedefInfo_Delete(TypedefInfo_t* tinfo) const; Interface to CINT function. TypedefInfo_t * TypedefInfo_Factory() const; Interface to CINT function. TypedefInfo_t * TypedefInfo_FactoryCopy(TypedefInfo_t* tinfo) const; Interface to CINT function. TypedefInfo_t TypedefInfo_Init(TypedefInfo_t* tinfo, const char* funcname) const; Interface to CINT function. bool TypedefInfo_IsValid(TypedefInfo_t* tinfo) const; Interface to CINT function. Long_t TypedefInfo_Property(TypedefInfo_t* tinfo) const; Interface to CINT function. int TypedefInfo_Size(TypedefInfo_t* tinfo) const; I",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:43058,Integrability,Interface,Interface,43058," to CINT function. int MethodArgInfo_Next(MethodArgInfo_t* marginfo) const; Interface to CINT function. Long_t MethodArgInfo_Property(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_DefaultValue(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_Name(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_TypeName(MethodArgInfo_t* marginfo) const; Interface to CINT function. void TypeInfo_Delete(TypeInfo_t* tinfo) const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory() const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory(G__value* ) const; Interface to CINT function. TypeInfo_t * TypeInfo_FactoryCopy(TypeInfo_t* ) const; Interface to CINT function. void TypeInfo_Init(TypeInfo_t* tinfo, const char* funcname) const; Interface to CINT function. bool TypeInfo_IsValid(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_Name(TypeInfo_t* ) const; Interface to CINT function. Long_t TypeInfo_Property(TypeInfo_t* tinfo) const; Interface to CINT function. int TypeInfo_RefType(TypeInfo_t* ) const; Interface to CINT function. int TypeInfo_Size(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_TrueName(TypeInfo_t* tinfo) const; Interface to CINT function. void TypedefInfo_Delete(TypedefInfo_t* tinfo) const; Interface to CINT function. TypedefInfo_t * TypedefInfo_Factory() const; Interface to CINT function. TypedefInfo_t * TypedefInfo_FactoryCopy(TypedefInfo_t* tinfo) const; Interface to CINT function. TypedefInfo_t TypedefInfo_Init(TypedefInfo_t* tinfo, const char* funcname) const; Interface to CINT function. bool TypedefInfo_IsValid(TypedefInfo_t* tinfo) const; Interface to CINT function. Long_t TypedefInfo_Property(TypedefInfo_t* tinfo) const; Interface to CINT function. int TypedefInfo_Size(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_TrueName(TypedefInfo_t* ",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:43137,Integrability,Interface,Interface,43137,"nterface to CINT function. Long_t MethodArgInfo_Property(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_DefaultValue(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_Name(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_TypeName(MethodArgInfo_t* marginfo) const; Interface to CINT function. void TypeInfo_Delete(TypeInfo_t* tinfo) const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory() const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory(G__value* ) const; Interface to CINT function. TypeInfo_t * TypeInfo_FactoryCopy(TypeInfo_t* ) const; Interface to CINT function. void TypeInfo_Init(TypeInfo_t* tinfo, const char* funcname) const; Interface to CINT function. bool TypeInfo_IsValid(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_Name(TypeInfo_t* ) const; Interface to CINT function. Long_t TypeInfo_Property(TypeInfo_t* tinfo) const; Interface to CINT function. int TypeInfo_RefType(TypeInfo_t* ) const; Interface to CINT function. int TypeInfo_Size(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_TrueName(TypeInfo_t* tinfo) const; Interface to CINT function. void TypedefInfo_Delete(TypedefInfo_t* tinfo) const; Interface to CINT function. TypedefInfo_t * TypedefInfo_Factory() const; Interface to CINT function. TypedefInfo_t * TypedefInfo_FactoryCopy(TypedefInfo_t* tinfo) const; Interface to CINT function. TypedefInfo_t TypedefInfo_Init(TypedefInfo_t* tinfo, const char* funcname) const; Interface to CINT function. bool TypedefInfo_IsValid(TypedefInfo_t* tinfo) const; Interface to CINT function. Long_t TypedefInfo_Property(TypedefInfo_t* tinfo) const; Interface to CINT function. int TypedefInfo_Size(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_TrueName(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_Name(Typede",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:43207,Integrability,Interface,Interface,43207,"arginfo) const; Interface to CINT function. const char * MethodArgInfo_DefaultValue(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_Name(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_TypeName(MethodArgInfo_t* marginfo) const; Interface to CINT function. void TypeInfo_Delete(TypeInfo_t* tinfo) const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory() const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory(G__value* ) const; Interface to CINT function. TypeInfo_t * TypeInfo_FactoryCopy(TypeInfo_t* ) const; Interface to CINT function. void TypeInfo_Init(TypeInfo_t* tinfo, const char* funcname) const; Interface to CINT function. bool TypeInfo_IsValid(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_Name(TypeInfo_t* ) const; Interface to CINT function. Long_t TypeInfo_Property(TypeInfo_t* tinfo) const; Interface to CINT function. int TypeInfo_RefType(TypeInfo_t* ) const; Interface to CINT function. int TypeInfo_Size(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_TrueName(TypeInfo_t* tinfo) const; Interface to CINT function. void TypedefInfo_Delete(TypedefInfo_t* tinfo) const; Interface to CINT function. TypedefInfo_t * TypedefInfo_Factory() const; Interface to CINT function. TypedefInfo_t * TypedefInfo_FactoryCopy(TypedefInfo_t* tinfo) const; Interface to CINT function. TypedefInfo_t TypedefInfo_Init(TypedefInfo_t* tinfo, const char* funcname) const; Interface to CINT function. bool TypedefInfo_IsValid(TypedefInfo_t* tinfo) const; Interface to CINT function. Long_t TypedefInfo_Property(TypedefInfo_t* tinfo) const; Interface to CINT function. int TypedefInfo_Size(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_TrueName(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_Name(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInf",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:43279,Integrability,Interface,Interface,43279,"DefaultValue(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_Name(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_TypeName(MethodArgInfo_t* marginfo) const; Interface to CINT function. void TypeInfo_Delete(TypeInfo_t* tinfo) const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory() const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory(G__value* ) const; Interface to CINT function. TypeInfo_t * TypeInfo_FactoryCopy(TypeInfo_t* ) const; Interface to CINT function. void TypeInfo_Init(TypeInfo_t* tinfo, const char* funcname) const; Interface to CINT function. bool TypeInfo_IsValid(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_Name(TypeInfo_t* ) const; Interface to CINT function. Long_t TypeInfo_Property(TypeInfo_t* tinfo) const; Interface to CINT function. int TypeInfo_RefType(TypeInfo_t* ) const; Interface to CINT function. int TypeInfo_Size(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_TrueName(TypeInfo_t* tinfo) const; Interface to CINT function. void TypedefInfo_Delete(TypedefInfo_t* tinfo) const; Interface to CINT function. TypedefInfo_t * TypedefInfo_Factory() const; Interface to CINT function. TypedefInfo_t * TypedefInfo_FactoryCopy(TypedefInfo_t* tinfo) const; Interface to CINT function. TypedefInfo_t TypedefInfo_Init(TypedefInfo_t* tinfo, const char* funcname) const; Interface to CINT function. bool TypedefInfo_IsValid(TypedefInfo_t* tinfo) const; Interface to CINT function. Long_t TypedefInfo_Property(TypedefInfo_t* tinfo) const; Interface to CINT function. int TypedefInfo_Size(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_TrueName(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_Name(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_Title(TypedefInfo_t* tinfo) const; Interface to CINT function. TCint(",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:43364,Integrability,Interface,Interface,43364,"st char * MethodArgInfo_Name(MethodArgInfo_t* marginfo) const; Interface to CINT function. const char * MethodArgInfo_TypeName(MethodArgInfo_t* marginfo) const; Interface to CINT function. void TypeInfo_Delete(TypeInfo_t* tinfo) const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory() const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory(G__value* ) const; Interface to CINT function. TypeInfo_t * TypeInfo_FactoryCopy(TypeInfo_t* ) const; Interface to CINT function. void TypeInfo_Init(TypeInfo_t* tinfo, const char* funcname) const; Interface to CINT function. bool TypeInfo_IsValid(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_Name(TypeInfo_t* ) const; Interface to CINT function. Long_t TypeInfo_Property(TypeInfo_t* tinfo) const; Interface to CINT function. int TypeInfo_RefType(TypeInfo_t* ) const; Interface to CINT function. int TypeInfo_Size(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_TrueName(TypeInfo_t* tinfo) const; Interface to CINT function. void TypedefInfo_Delete(TypedefInfo_t* tinfo) const; Interface to CINT function. TypedefInfo_t * TypedefInfo_Factory() const; Interface to CINT function. TypedefInfo_t * TypedefInfo_FactoryCopy(TypedefInfo_t* tinfo) const; Interface to CINT function. TypedefInfo_t TypedefInfo_Init(TypedefInfo_t* tinfo, const char* funcname) const; Interface to CINT function. bool TypedefInfo_IsValid(TypedefInfo_t* tinfo) const; Interface to CINT function. Long_t TypedefInfo_Property(TypedefInfo_t* tinfo) const; Interface to CINT function. int TypedefInfo_Size(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_TrueName(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_Name(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_Title(TypedefInfo_t* tinfo) const; Interface to CINT function. TCint(); { }. TCint(const TCint& ). TCint & operator=(const TCint& ). void Execute(TM",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:43445,Integrability,Interface,Interface,43445,"nction. const char * MethodArgInfo_TypeName(MethodArgInfo_t* marginfo) const; Interface to CINT function. void TypeInfo_Delete(TypeInfo_t* tinfo) const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory() const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory(G__value* ) const; Interface to CINT function. TypeInfo_t * TypeInfo_FactoryCopy(TypeInfo_t* ) const; Interface to CINT function. void TypeInfo_Init(TypeInfo_t* tinfo, const char* funcname) const; Interface to CINT function. bool TypeInfo_IsValid(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_Name(TypeInfo_t* ) const; Interface to CINT function. Long_t TypeInfo_Property(TypeInfo_t* tinfo) const; Interface to CINT function. int TypeInfo_RefType(TypeInfo_t* ) const; Interface to CINT function. int TypeInfo_Size(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_TrueName(TypeInfo_t* tinfo) const; Interface to CINT function. void TypedefInfo_Delete(TypedefInfo_t* tinfo) const; Interface to CINT function. TypedefInfo_t * TypedefInfo_Factory() const; Interface to CINT function. TypedefInfo_t * TypedefInfo_FactoryCopy(TypedefInfo_t* tinfo) const; Interface to CINT function. TypedefInfo_t TypedefInfo_Init(TypedefInfo_t* tinfo, const char* funcname) const; Interface to CINT function. bool TypedefInfo_IsValid(TypedefInfo_t* tinfo) const; Interface to CINT function. Long_t TypedefInfo_Property(TypedefInfo_t* tinfo) const; Interface to CINT function. int TypedefInfo_Size(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_TrueName(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_Name(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_Title(TypedefInfo_t* tinfo) const; Interface to CINT function. TCint(); { }. TCint(const TCint& ). TCint & operator=(const TCint& ). void Execute(TMethod* , TObjArray* , int* = 0); { }. Int_t GetExitCode() const; { return fExitCode",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:43518,Integrability,Interface,Interface,43518," Interface to CINT function. void TypeInfo_Delete(TypeInfo_t* tinfo) const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory() const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory(G__value* ) const; Interface to CINT function. TypeInfo_t * TypeInfo_FactoryCopy(TypeInfo_t* ) const; Interface to CINT function. void TypeInfo_Init(TypeInfo_t* tinfo, const char* funcname) const; Interface to CINT function. bool TypeInfo_IsValid(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_Name(TypeInfo_t* ) const; Interface to CINT function. Long_t TypeInfo_Property(TypeInfo_t* tinfo) const; Interface to CINT function. int TypeInfo_RefType(TypeInfo_t* ) const; Interface to CINT function. int TypeInfo_Size(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_TrueName(TypeInfo_t* tinfo) const; Interface to CINT function. void TypedefInfo_Delete(TypedefInfo_t* tinfo) const; Interface to CINT function. TypedefInfo_t * TypedefInfo_Factory() const; Interface to CINT function. TypedefInfo_t * TypedefInfo_FactoryCopy(TypedefInfo_t* tinfo) const; Interface to CINT function. TypedefInfo_t TypedefInfo_Init(TypedefInfo_t* tinfo, const char* funcname) const; Interface to CINT function. bool TypedefInfo_IsValid(TypedefInfo_t* tinfo) const; Interface to CINT function. Long_t TypedefInfo_Property(TypedefInfo_t* tinfo) const; Interface to CINT function. int TypedefInfo_Size(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_TrueName(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_Name(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_Title(TypedefInfo_t* tinfo) const; Interface to CINT function. TCint(); { }. TCint(const TCint& ). TCint & operator=(const TCint& ). void Execute(TMethod* , TObjArray* , int* = 0); { }. Int_t GetExitCode() const; { return fExitCode; }. TEnv * GetMapfile() const; { return fMapfile; }. Int_t GetMore() const; ",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:43615,Integrability,Interface,Interface,43615," to CINT function. TypeInfo_t * TypeInfo_Factory() const; Interface to CINT function. TypeInfo_t * TypeInfo_Factory(G__value* ) const; Interface to CINT function. TypeInfo_t * TypeInfo_FactoryCopy(TypeInfo_t* ) const; Interface to CINT function. void TypeInfo_Init(TypeInfo_t* tinfo, const char* funcname) const; Interface to CINT function. bool TypeInfo_IsValid(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_Name(TypeInfo_t* ) const; Interface to CINT function. Long_t TypeInfo_Property(TypeInfo_t* tinfo) const; Interface to CINT function. int TypeInfo_RefType(TypeInfo_t* ) const; Interface to CINT function. int TypeInfo_Size(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_TrueName(TypeInfo_t* tinfo) const; Interface to CINT function. void TypedefInfo_Delete(TypedefInfo_t* tinfo) const; Interface to CINT function. TypedefInfo_t * TypedefInfo_Factory() const; Interface to CINT function. TypedefInfo_t * TypedefInfo_FactoryCopy(TypedefInfo_t* tinfo) const; Interface to CINT function. TypedefInfo_t TypedefInfo_Init(TypedefInfo_t* tinfo, const char* funcname) const; Interface to CINT function. bool TypedefInfo_IsValid(TypedefInfo_t* tinfo) const; Interface to CINT function. Long_t TypedefInfo_Property(TypedefInfo_t* tinfo) const; Interface to CINT function. int TypedefInfo_Size(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_TrueName(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_Name(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_Title(TypedefInfo_t* tinfo) const; Interface to CINT function. TCint(); { }. TCint(const TCint& ). TCint & operator=(const TCint& ). void Execute(TMethod* , TObjArray* , int* = 0); { }. Int_t GetExitCode() const; { return fExitCode; }. TEnv * GetMapfile() const; { return fMapfile; }. Int_t GetMore() const; { return fMore; }. char * GetPrompt(); { return fPrompt; }. TObjArray * GetRootMapFil",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:43725,Integrability,Interface,Interface,43725,"nfo_Factory(G__value* ) const; Interface to CINT function. TypeInfo_t * TypeInfo_FactoryCopy(TypeInfo_t* ) const; Interface to CINT function. void TypeInfo_Init(TypeInfo_t* tinfo, const char* funcname) const; Interface to CINT function. bool TypeInfo_IsValid(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_Name(TypeInfo_t* ) const; Interface to CINT function. Long_t TypeInfo_Property(TypeInfo_t* tinfo) const; Interface to CINT function. int TypeInfo_RefType(TypeInfo_t* ) const; Interface to CINT function. int TypeInfo_Size(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_TrueName(TypeInfo_t* tinfo) const; Interface to CINT function. void TypedefInfo_Delete(TypedefInfo_t* tinfo) const; Interface to CINT function. TypedefInfo_t * TypedefInfo_Factory() const; Interface to CINT function. TypedefInfo_t * TypedefInfo_FactoryCopy(TypedefInfo_t* tinfo) const; Interface to CINT function. TypedefInfo_t TypedefInfo_Init(TypedefInfo_t* tinfo, const char* funcname) const; Interface to CINT function. bool TypedefInfo_IsValid(TypedefInfo_t* tinfo) const; Interface to CINT function. Long_t TypedefInfo_Property(TypedefInfo_t* tinfo) const; Interface to CINT function. int TypedefInfo_Size(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_TrueName(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_Name(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_Title(TypedefInfo_t* tinfo) const; Interface to CINT function. TCint(); { }. TCint(const TCint& ). TCint & operator=(const TCint& ). void Execute(TMethod* , TObjArray* , int* = 0); { }. Int_t GetExitCode() const; { return fExitCode; }. TEnv * GetMapfile() const; { return fMapfile; }. Int_t GetMore() const; { return fMore; }. char * GetPrompt(); { return fPrompt; }. TObjArray * GetRootMapFiles() const; { return fRootmapFiles; }. Bool_t IsProcessLineLocked() const; { return fLockProcessLine; }",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:43807,Integrability,Interface,Interface,43807,"eInfo_t* ) const; Interface to CINT function. void TypeInfo_Init(TypeInfo_t* tinfo, const char* funcname) const; Interface to CINT function. bool TypeInfo_IsValid(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_Name(TypeInfo_t* ) const; Interface to CINT function. Long_t TypeInfo_Property(TypeInfo_t* tinfo) const; Interface to CINT function. int TypeInfo_RefType(TypeInfo_t* ) const; Interface to CINT function. int TypeInfo_Size(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_TrueName(TypeInfo_t* tinfo) const; Interface to CINT function. void TypedefInfo_Delete(TypedefInfo_t* tinfo) const; Interface to CINT function. TypedefInfo_t * TypedefInfo_Factory() const; Interface to CINT function. TypedefInfo_t * TypedefInfo_FactoryCopy(TypedefInfo_t* tinfo) const; Interface to CINT function. TypedefInfo_t TypedefInfo_Init(TypedefInfo_t* tinfo, const char* funcname) const; Interface to CINT function. bool TypedefInfo_IsValid(TypedefInfo_t* tinfo) const; Interface to CINT function. Long_t TypedefInfo_Property(TypedefInfo_t* tinfo) const; Interface to CINT function. int TypedefInfo_Size(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_TrueName(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_Name(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_Title(TypedefInfo_t* tinfo) const; Interface to CINT function. TCint(); { }. TCint(const TCint& ). TCint & operator=(const TCint& ). void Execute(TMethod* , TObjArray* , int* = 0); { }. Int_t GetExitCode() const; { return fExitCode; }. TEnv * GetMapfile() const; { return fMapfile; }. Int_t GetMore() const; { return fMore; }. char * GetPrompt(); { return fPrompt; }. TObjArray * GetRootMapFiles() const; { return fRootmapFiles; }. Bool_t IsProcessLineLocked() const; { return fLockProcessLine; }. void SetProcessLineLock(Bool_t lock = kTRUE); { fLockProcessLine = lock; }. » Author: Fons Rad",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:43892,Integrability,Interface,Interface,43892," const char* funcname) const; Interface to CINT function. bool TypeInfo_IsValid(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_Name(TypeInfo_t* ) const; Interface to CINT function. Long_t TypeInfo_Property(TypeInfo_t* tinfo) const; Interface to CINT function. int TypeInfo_RefType(TypeInfo_t* ) const; Interface to CINT function. int TypeInfo_Size(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_TrueName(TypeInfo_t* tinfo) const; Interface to CINT function. void TypedefInfo_Delete(TypedefInfo_t* tinfo) const; Interface to CINT function. TypedefInfo_t * TypedefInfo_Factory() const; Interface to CINT function. TypedefInfo_t * TypedefInfo_FactoryCopy(TypedefInfo_t* tinfo) const; Interface to CINT function. TypedefInfo_t TypedefInfo_Init(TypedefInfo_t* tinfo, const char* funcname) const; Interface to CINT function. bool TypedefInfo_IsValid(TypedefInfo_t* tinfo) const; Interface to CINT function. Long_t TypedefInfo_Property(TypedefInfo_t* tinfo) const; Interface to CINT function. int TypedefInfo_Size(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_TrueName(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_Name(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_Title(TypedefInfo_t* tinfo) const; Interface to CINT function. TCint(); { }. TCint(const TCint& ). TCint & operator=(const TCint& ). void Execute(TMethod* , TObjArray* , int* = 0); { }. Int_t GetExitCode() const; { return fExitCode; }. TEnv * GetMapfile() const; { return fMapfile; }. Int_t GetMore() const; { return fMore; }. char * GetPrompt(); { return fPrompt; }. TObjArray * GetRootMapFiles() const; { return fRootmapFiles; }. Bool_t IsProcessLineLocked() const; { return fLockProcessLine; }. void SetProcessLineLock(Bool_t lock = kTRUE); { fLockProcessLine = lock; }. » Author: Fons Rademakers 01/03/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:43970,Integrability,Interface,Interface,43970,"peInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_Name(TypeInfo_t* ) const; Interface to CINT function. Long_t TypeInfo_Property(TypeInfo_t* tinfo) const; Interface to CINT function. int TypeInfo_RefType(TypeInfo_t* ) const; Interface to CINT function. int TypeInfo_Size(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_TrueName(TypeInfo_t* tinfo) const; Interface to CINT function. void TypedefInfo_Delete(TypedefInfo_t* tinfo) const; Interface to CINT function. TypedefInfo_t * TypedefInfo_Factory() const; Interface to CINT function. TypedefInfo_t * TypedefInfo_FactoryCopy(TypedefInfo_t* tinfo) const; Interface to CINT function. TypedefInfo_t TypedefInfo_Init(TypedefInfo_t* tinfo, const char* funcname) const; Interface to CINT function. bool TypedefInfo_IsValid(TypedefInfo_t* tinfo) const; Interface to CINT function. Long_t TypedefInfo_Property(TypedefInfo_t* tinfo) const; Interface to CINT function. int TypedefInfo_Size(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_TrueName(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_Name(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_Title(TypedefInfo_t* tinfo) const; Interface to CINT function. TCint(); { }. TCint(const TCint& ). TCint & operator=(const TCint& ). void Execute(TMethod* , TObjArray* , int* = 0); { }. Int_t GetExitCode() const; { return fExitCode; }. TEnv * GetMapfile() const; { return fMapfile; }. Int_t GetMore() const; { return fMore; }. char * GetPrompt(); { return fPrompt; }. TObjArray * GetRootMapFiles() const; { return fRootmapFiles; }. Bool_t IsProcessLineLocked() const; { return fLockProcessLine; }. void SetProcessLineLock(Bool_t lock = kTRUE); { fLockProcessLine = lock; }. » Author: Fons Rademakers 01/03/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: TCint.h 40638 2011-08-18 20:24:56Z pcanal $ » Last gener",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:44061,Integrability,Interface,Interface,44061,"nfo_t* ) const; Interface to CINT function. Long_t TypeInfo_Property(TypeInfo_t* tinfo) const; Interface to CINT function. int TypeInfo_RefType(TypeInfo_t* ) const; Interface to CINT function. int TypeInfo_Size(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_TrueName(TypeInfo_t* tinfo) const; Interface to CINT function. void TypedefInfo_Delete(TypedefInfo_t* tinfo) const; Interface to CINT function. TypedefInfo_t * TypedefInfo_Factory() const; Interface to CINT function. TypedefInfo_t * TypedefInfo_FactoryCopy(TypedefInfo_t* tinfo) const; Interface to CINT function. TypedefInfo_t TypedefInfo_Init(TypedefInfo_t* tinfo, const char* funcname) const; Interface to CINT function. bool TypedefInfo_IsValid(TypedefInfo_t* tinfo) const; Interface to CINT function. Long_t TypedefInfo_Property(TypedefInfo_t* tinfo) const; Interface to CINT function. int TypedefInfo_Size(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_TrueName(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_Name(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_Title(TypedefInfo_t* tinfo) const; Interface to CINT function. TCint(); { }. TCint(const TCint& ). TCint & operator=(const TCint& ). void Execute(TMethod* , TObjArray* , int* = 0); { }. Int_t GetExitCode() const; { return fExitCode; }. TEnv * GetMapfile() const; { return fMapfile; }. Int_t GetMore() const; { return fMore; }. char * GetPrompt(); { return fPrompt; }. TObjArray * GetRootMapFiles() const; { return fRootmapFiles; }. Bool_t IsProcessLineLocked() const; { return fLockProcessLine; }. void SetProcessLineLock(Bool_t lock = kTRUE); { fLockProcessLine = lock; }. » Author: Fons Rademakers 01/03/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: TCint.h 40638 2011-08-18 20:24:56Z pcanal $ » Last generated: 2011-12-02 14:27; This page has been automatically generated. For comments or s",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:44148,Integrability,Interface,Interface,44148,"onst; Interface to CINT function. int TypeInfo_RefType(TypeInfo_t* ) const; Interface to CINT function. int TypeInfo_Size(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_TrueName(TypeInfo_t* tinfo) const; Interface to CINT function. void TypedefInfo_Delete(TypedefInfo_t* tinfo) const; Interface to CINT function. TypedefInfo_t * TypedefInfo_Factory() const; Interface to CINT function. TypedefInfo_t * TypedefInfo_FactoryCopy(TypedefInfo_t* tinfo) const; Interface to CINT function. TypedefInfo_t TypedefInfo_Init(TypedefInfo_t* tinfo, const char* funcname) const; Interface to CINT function. bool TypedefInfo_IsValid(TypedefInfo_t* tinfo) const; Interface to CINT function. Long_t TypedefInfo_Property(TypedefInfo_t* tinfo) const; Interface to CINT function. int TypedefInfo_Size(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_TrueName(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_Name(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_Title(TypedefInfo_t* tinfo) const; Interface to CINT function. TCint(); { }. TCint(const TCint& ). TCint & operator=(const TCint& ). void Execute(TMethod* , TObjArray* , int* = 0); { }. Int_t GetExitCode() const; { return fExitCode; }. TEnv * GetMapfile() const; { return fMapfile; }. Int_t GetMore() const; { return fMore; }. char * GetPrompt(); { return fPrompt; }. TObjArray * GetRootMapFiles() const; { return fRootmapFiles; }. Bool_t IsProcessLineLocked() const; { return fLockProcessLine; }. void SetProcessLineLock(Bool_t lock = kTRUE); { fLockProcessLine = lock; }. » Author: Fons Rademakers 01/03/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: TCint.h 40638 2011-08-18 20:24:56Z pcanal $ » Last generated: 2011-12-02 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT supp",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:44236,Integrability,Interface,Interface,44236,"Interface to CINT function. int TypeInfo_RefType(TypeInfo_t* ) const; Interface to CINT function. int TypeInfo_Size(TypeInfo_t* tinfo) const; Interface to CINT function. const char * TypeInfo_TrueName(TypeInfo_t* tinfo) const; Interface to CINT function. void TypedefInfo_Delete(TypedefInfo_t* tinfo) const; Interface to CINT function. TypedefInfo_t * TypedefInfo_Factory() const; Interface to CINT function. TypedefInfo_t * TypedefInfo_FactoryCopy(TypedefInfo_t* tinfo) const; Interface to CINT function. TypedefInfo_t TypedefInfo_Init(TypedefInfo_t* tinfo, const char* funcname) const; Interface to CINT function. bool TypedefInfo_IsValid(TypedefInfo_t* tinfo) const; Interface to CINT function. Long_t TypedefInfo_Property(TypedefInfo_t* tinfo) const; Interface to CINT function. int TypedefInfo_Size(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_TrueName(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_Name(TypedefInfo_t* tinfo) const; Interface to CINT function. const char * TypedefInfo_Title(TypedefInfo_t* tinfo) const; Interface to CINT function. TCint(); { }. TCint(const TCint& ). TCint & operator=(const TCint& ). void Execute(TMethod* , TObjArray* , int* = 0); { }. Int_t GetExitCode() const; { return fExitCode; }. TEnv * GetMapfile() const; { return fMapfile; }. Int_t GetMore() const; { return fMore; }. char * GetPrompt(); { return fPrompt; }. TObjArray * GetRootMapFiles() const; { return fRootmapFiles; }. Bool_t IsProcessLineLocked() const; { return fLockProcessLine; }. void SetProcessLineLock(Bool_t lock = kTRUE); { fLockProcessLine = lock; }. » Author: Fons Rademakers 01/03/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: TCint.h 40638 2011-08-18 20:24:56Z pcanal $ » Last generated: 2011-12-02 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:10322,Modifiability,Inherit,InheritsFrom,10322,", const char* params); virtual TStringGetMangledNameWithPrototype(TClass* cl, const char* method, const char* proto); virtual TEnv*GetMapfile() const; virtual Int_tGetMore() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*Getp2f2funcname(void* receiver) const; virtual char*GetPrompt(); virtual TObjArray*GetRootMapFiles() const; virtual intGetSecurityError() const; virtual const char*GetSharedLibDeps(const char* lib); virtual const char*GetSharedLibs(); virtual const char*GetSTLIncludePath() const; virtual const char*TNamed::GetTitle() const; virtual const char*GetTopLevelMacroName() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual Int_tInitializeDictionaries(); virtual voidTObject::Inspect() constMENU ; static TInterpreter*&TInterpreter::Instance(); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tIsErrorMessagesEnabled() const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tIsLoaded(const char* filename) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tIsProcessLineLocked() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual Int_tLoad(const char* filenam, Bool_t system = kFALSE); virtual intLoadFile(const char* path) const; virtual Int_tLoadLibraryMap(const char* rootmapfile = 0); virtual voidLoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0); virtual voidLoadText(const char* text) const; virtual voidTNamed::ls(Option_t* option = """") const; virtual const ch",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:10388,Modifiability,Inherit,InheritsFrom,10388,"TClass* cl, const char* method, const char* proto); virtual TEnv*GetMapfile() const; virtual Int_tGetMore() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*Getp2f2funcname(void* receiver) const; virtual char*GetPrompt(); virtual TObjArray*GetRootMapFiles() const; virtual intGetSecurityError() const; virtual const char*GetSharedLibDeps(const char* lib); virtual const char*GetSharedLibs(); virtual const char*GetSTLIncludePath() const; virtual const char*TNamed::GetTitle() const; virtual const char*GetTopLevelMacroName() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual Int_tInitializeDictionaries(); virtual voidTObject::Inspect() constMENU ; static TInterpreter*&TInterpreter::Instance(); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tIsErrorMessagesEnabled() const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tIsLoaded(const char* filename) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tIsProcessLineLocked() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual Int_tLoad(const char* filenam, Bool_t system = kFALSE); virtual intLoadFile(const char* path) const; virtual Int_tLoadLibraryMap(const char* rootmapfile = 0); virtual voidLoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0); virtual voidLoadText(const char* text) const; virtual voidTNamed::ls(Option_t* option = """") const; virtual const char*MapCppName(const char*) const; voidTObject::MayNotUse(const cha",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:19600,Modifiability,variab,variables,19600," TInterpreter::EErrorCode { kNoError; kRecoverable; kDangerous; kFatal; kProcessing; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. G__dictpositionfDictPosCINT dictionary context after init; G__dictpositionfDictPosGlobalsCINT dictionary context after ResetGlobals(); Int_tfExitCodevalue passed to exit() in interpreter; Int_tfGlobalsListSerialIndicator of the last time we refresh the ROOT list of globals.; TStringfIncludePathlist of CINT include paths; Bool_tfLockProcessLinetrue if ProcessLine should lock gCINTMutex; TEnv*fMapfilemap of classes and libraries; Int_tfMore1 if more input is required; charfPrompt[64]proposed prompt string; TObjArray*fRootmapFileslist of non-default rootmap files loaded; TStringfRootmapLoadPathdynamic load path used for loading rootmap files; TStringfSharedLibslist of shared libraries loaded by G__loadfile; Int_tfSharedLibsSerialIndicator of the last time we set fSharedLibs; static void*fgSetOfSpecialsset of TObject*s used in CINT variables. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCint(const char* name, const char* title); Initialize the CINT interpreter interface. ~TCint(); Destroy the CINT interpreter interface. void ClearFileBusy(); Reset CINT internal state in case a previous action was not correctly; terminated by G__init_cint() and G__dlmod(). void ClearStack(); Delete existing temporary values. Int_t InitializeDictionaries(); Initialize all registered dictionaries. Normally this is already done; by G__init_cint() and G__dlmod(). void EnableAutoLoading(); Enable the automatic loading of shared libraries when a class; is used that is stored in a not yet loaded library. Uses the; info",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:19625,Modifiability,Inherit,Inheritance,19625,"teDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. G__dictpositionfDictPosCINT dictionary context after init; G__dictpositionfDictPosGlobalsCINT dictionary context after ResetGlobals(); Int_tfExitCodevalue passed to exit() in interpreter; Int_tfGlobalsListSerialIndicator of the last time we refresh the ROOT list of globals.; TStringfIncludePathlist of CINT include paths; Bool_tfLockProcessLinetrue if ProcessLine should lock gCINTMutex; TEnv*fMapfilemap of classes and libraries; Int_tfMore1 if more input is required; charfPrompt[64]proposed prompt string; TObjArray*fRootmapFileslist of non-default rootmap files loaded; TStringfRootmapLoadPathdynamic load path used for loading rootmap files; TStringfSharedLibslist of shared libraries loaded by G__loadfile; Int_tfSharedLibsSerialIndicator of the last time we set fSharedLibs; static void*fgSetOfSpecialsset of TObject*s used in CINT variables. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCint(const char* name, const char* title); Initialize the CINT interpreter interface. ~TCint(); Destroy the CINT interpreter interface. void ClearFileBusy(); Reset CINT internal state in case a previous action was not correctly; terminated by G__init_cint() and G__dlmod(). void ClearStack(); Delete existing temporary values. Int_t InitializeDictionaries(); Initialize all registered dictionaries. Normally this is already done; by G__init_cint() and G__dlmod(). void EnableAutoLoading(); Enable the automatic loading of shared libraries when a class; is used that is stored in a not yet loaded library. Uses the; information stored in the class/library map (typically; $ROOTSYS/etc/system.rootmap). void EndOfLineAction(); It calls a ""fantom"" method to synchronize user keyboard input; and ROOT prompt line. Bool_t IsLoaded(const char* filename) const; Return true if the file has already been loaded by cint. Int_t Load(const char* filenam, Bool",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:19638,Modifiability,Inherit,Inherited,19638,"teDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. G__dictpositionfDictPosCINT dictionary context after init; G__dictpositionfDictPosGlobalsCINT dictionary context after ResetGlobals(); Int_tfExitCodevalue passed to exit() in interpreter; Int_tfGlobalsListSerialIndicator of the last time we refresh the ROOT list of globals.; TStringfIncludePathlist of CINT include paths; Bool_tfLockProcessLinetrue if ProcessLine should lock gCINTMutex; TEnv*fMapfilemap of classes and libraries; Int_tfMore1 if more input is required; charfPrompt[64]proposed prompt string; TObjArray*fRootmapFileslist of non-default rootmap files loaded; TStringfRootmapLoadPathdynamic load path used for loading rootmap files; TStringfSharedLibslist of shared libraries loaded by G__loadfile; Int_tfSharedLibsSerialIndicator of the last time we set fSharedLibs; static void*fgSetOfSpecialsset of TObject*s used in CINT variables. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCint(const char* name, const char* title); Initialize the CINT interpreter interface. ~TCint(); Destroy the CINT interpreter interface. void ClearFileBusy(); Reset CINT internal state in case a previous action was not correctly; terminated by G__init_cint() and G__dlmod(). void ClearStack(); Delete existing temporary values. Int_t InitializeDictionaries(); Initialize all registered dictionaries. Normally this is already done; by G__init_cint() and G__dlmod(). void EnableAutoLoading(); Enable the automatic loading of shared libraries when a class; is used that is stored in a not yet loaded library. Uses the; information stored in the class/library map (typically; $ROOTSYS/etc/system.rootmap). void EndOfLineAction(); It calls a ""fantom"" method to synchronize user keyboard input; and ROOT prompt line. Bool_t IsLoaded(const char* filename) const; Return true if the file has already been loaded by cint. Int_t Load(const char* filenam, Bool",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:22997,Modifiability,variab,variables,22997,"ymore.; CINT objects are always on the heap. void Reset(); Reset the CINT state to the state saved by the last call to; TCint::SaveContext(). void ResetAll(); Reset the CINT state to its initial state. void ResetGlobals(); Reset the CINT global object state to the state saved by the last; call to TCint::SaveGlobalsContext(). void ResetGlobalVar(void* obj); Reset the CINT global object state to the state saved by the last; call to TCint::SaveGlobalsContext(). void RewindDictionary(); Rewind CINT dictionary to the point where it was before executing; the current macro. This function is typically called after SEGV or; ctlr-C after doing a longjmp back to the prompt. Int_t DeleteGlobal(void* obj); Delete obj from CINT symbol table so it cannot be accessed anymore.; Returns 1 in case of success and 0 in case object was not in table. void SaveContext(); Save the current CINT state. void SaveGlobalsContext(); Save the current CINT state of global objects. void UpdateListOfGlobals(); Update the list of pointers to global variables. This function; is called by TROOT::GetListOfGlobals(). void UpdateListOfGlobalFunctions(); Update the list of pointers to global functions. This function; is called by TROOT::GetListOfGlobalFunctions(). void UpdateListOfTypes(); Update the list of pointers to Datatype (typedef) definitions. This; function is called by TROOT::GetListOfTypes(). void SetClassInfo(TClass* cl, Bool_t reload = kFALSE); Set pointer to CINT's G__ClassInfo in TClass. Bool_t CheckClassInfo(const char* name, Bool_t autoload = kTRUE); Checks if a class with the specified name is defined in CINT.; Returns kFALSE is class is not defined. void CreateListOfBaseClasses(TClass* cl); Create list of pointers to base class(es) for TClass cl. void CreateListOfDataMembers(TClass* cl); Create list of pointers to data members for TClass cl. void CreateListOfMethods(TClass* cl); Create list of pointers to methods for TClass cl. void UpdateListOfMethods(TClass* cl); Update the list of point",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:19327,Performance,load,loaded,19327," TInterpreter::EErrorCode { kNoError; kRecoverable; kDangerous; kFatal; kProcessing; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. G__dictpositionfDictPosCINT dictionary context after init; G__dictpositionfDictPosGlobalsCINT dictionary context after ResetGlobals(); Int_tfExitCodevalue passed to exit() in interpreter; Int_tfGlobalsListSerialIndicator of the last time we refresh the ROOT list of globals.; TStringfIncludePathlist of CINT include paths; Bool_tfLockProcessLinetrue if ProcessLine should lock gCINTMutex; TEnv*fMapfilemap of classes and libraries; Int_tfMore1 if more input is required; charfPrompt[64]proposed prompt string; TObjArray*fRootmapFileslist of non-default rootmap files loaded; TStringfRootmapLoadPathdynamic load path used for loading rootmap files; TStringfSharedLibslist of shared libraries loaded by G__loadfile; Int_tfSharedLibsSerialIndicator of the last time we set fSharedLibs; static void*fgSetOfSpecialsset of TObject*s used in CINT variables. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCint(const char* name, const char* title); Initialize the CINT interpreter interface. ~TCint(); Destroy the CINT interpreter interface. void ClearFileBusy(); Reset CINT internal state in case a previous action was not correctly; terminated by G__init_cint() and G__dlmod(). void ClearStack(); Delete existing temporary values. Int_t InitializeDictionaries(); Initialize all registered dictionaries. Normally this is already done; by G__init_cint() and G__dlmod(). void EnableAutoLoading(); Enable the automatic loading of shared libraries when a class; is used that is stored in a not yet loaded library. Uses the; info",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:19366,Performance,load,load,19366," TInterpreter::EErrorCode { kNoError; kRecoverable; kDangerous; kFatal; kProcessing; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. G__dictpositionfDictPosCINT dictionary context after init; G__dictpositionfDictPosGlobalsCINT dictionary context after ResetGlobals(); Int_tfExitCodevalue passed to exit() in interpreter; Int_tfGlobalsListSerialIndicator of the last time we refresh the ROOT list of globals.; TStringfIncludePathlist of CINT include paths; Bool_tfLockProcessLinetrue if ProcessLine should lock gCINTMutex; TEnv*fMapfilemap of classes and libraries; Int_tfMore1 if more input is required; charfPrompt[64]proposed prompt string; TObjArray*fRootmapFileslist of non-default rootmap files loaded; TStringfRootmapLoadPathdynamic load path used for loading rootmap files; TStringfSharedLibslist of shared libraries loaded by G__loadfile; Int_tfSharedLibsSerialIndicator of the last time we set fSharedLibs; static void*fgSetOfSpecialsset of TObject*s used in CINT variables. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCint(const char* name, const char* title); Initialize the CINT interpreter interface. ~TCint(); Destroy the CINT interpreter interface. void ClearFileBusy(); Reset CINT internal state in case a previous action was not correctly; terminated by G__init_cint() and G__dlmod(). void ClearStack(); Delete existing temporary values. Int_t InitializeDictionaries(); Initialize all registered dictionaries. Normally this is already done; by G__init_cint() and G__dlmod(). void EnableAutoLoading(); Enable the automatic loading of shared libraries when a class; is used that is stored in a not yet loaded library. Uses the; info",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:19385,Performance,load,loading,19385," TInterpreter::EErrorCode { kNoError; kRecoverable; kDangerous; kFatal; kProcessing; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. G__dictpositionfDictPosCINT dictionary context after init; G__dictpositionfDictPosGlobalsCINT dictionary context after ResetGlobals(); Int_tfExitCodevalue passed to exit() in interpreter; Int_tfGlobalsListSerialIndicator of the last time we refresh the ROOT list of globals.; TStringfIncludePathlist of CINT include paths; Bool_tfLockProcessLinetrue if ProcessLine should lock gCINTMutex; TEnv*fMapfilemap of classes and libraries; Int_tfMore1 if more input is required; charfPrompt[64]proposed prompt string; TObjArray*fRootmapFileslist of non-default rootmap files loaded; TStringfRootmapLoadPathdynamic load path used for loading rootmap files; TStringfSharedLibslist of shared libraries loaded by G__loadfile; Int_tfSharedLibsSerialIndicator of the last time we set fSharedLibs; static void*fgSetOfSpecialsset of TObject*s used in CINT variables. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCint(const char* name, const char* title); Initialize the CINT interpreter interface. ~TCint(); Destroy the CINT interpreter interface. void ClearFileBusy(); Reset CINT internal state in case a previous action was not correctly; terminated by G__init_cint() and G__dlmod(). void ClearStack(); Delete existing temporary values. Int_t InitializeDictionaries(); Initialize all registered dictionaries. Normally this is already done; by G__init_cint() and G__dlmod(). void EnableAutoLoading(); Enable the automatic loading of shared libraries when a class; is used that is stored in a not yet loaded library. Uses the; info",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:19451,Performance,load,loaded,19451," TInterpreter::EErrorCode { kNoError; kRecoverable; kDangerous; kFatal; kProcessing; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. G__dictpositionfDictPosCINT dictionary context after init; G__dictpositionfDictPosGlobalsCINT dictionary context after ResetGlobals(); Int_tfExitCodevalue passed to exit() in interpreter; Int_tfGlobalsListSerialIndicator of the last time we refresh the ROOT list of globals.; TStringfIncludePathlist of CINT include paths; Bool_tfLockProcessLinetrue if ProcessLine should lock gCINTMutex; TEnv*fMapfilemap of classes and libraries; Int_tfMore1 if more input is required; charfPrompt[64]proposed prompt string; TObjArray*fRootmapFileslist of non-default rootmap files loaded; TStringfRootmapLoadPathdynamic load path used for loading rootmap files; TStringfSharedLibslist of shared libraries loaded by G__loadfile; Int_tfSharedLibsSerialIndicator of the last time we set fSharedLibs; static void*fgSetOfSpecialsset of TObject*s used in CINT variables. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCint(const char* name, const char* title); Initialize the CINT interpreter interface. ~TCint(); Destroy the CINT interpreter interface. void ClearFileBusy(); Reset CINT internal state in case a previous action was not correctly; terminated by G__init_cint() and G__dlmod(). void ClearStack(); Delete existing temporary values. Int_t InitializeDictionaries(); Initialize all registered dictionaries. Normally this is already done; by G__init_cint() and G__dlmod(). void EnableAutoLoading(); Enable the automatic loading of shared libraries when a class; is used that is stored in a not yet loaded library. Uses the; info",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:20214,Performance,load,loading,20214,"Prompt[64]proposed prompt string; TObjArray*fRootmapFileslist of non-default rootmap files loaded; TStringfRootmapLoadPathdynamic load path used for loading rootmap files; TStringfSharedLibslist of shared libraries loaded by G__loadfile; Int_tfSharedLibsSerialIndicator of the last time we set fSharedLibs; static void*fgSetOfSpecialsset of TObject*s used in CINT variables. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCint(const char* name, const char* title); Initialize the CINT interpreter interface. ~TCint(); Destroy the CINT interpreter interface. void ClearFileBusy(); Reset CINT internal state in case a previous action was not correctly; terminated by G__init_cint() and G__dlmod(). void ClearStack(); Delete existing temporary values. Int_t InitializeDictionaries(); Initialize all registered dictionaries. Normally this is already done; by G__init_cint() and G__dlmod(). void EnableAutoLoading(); Enable the automatic loading of shared libraries when a class; is used that is stored in a not yet loaded library. Uses the; information stored in the class/library map (typically; $ROOTSYS/etc/system.rootmap). void EndOfLineAction(); It calls a ""fantom"" method to synchronize user keyboard input; and ROOT prompt line. Bool_t IsLoaded(const char* filename) const; Return true if the file has already been loaded by cint. Int_t Load(const char* filenam, Bool_t system = kFALSE); Load a library file in CINT's memory.; if 'system' is true, the library is never unloaded. void LoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0); Load a macro file in CINT's memory. Long_t ProcessLine(const char* line, TInterpreter::EErrorCode* error = 0); Let CINT process a command line.; If the command is executed and the result of G__process_cmd is 0,; the return value is the int value corresponding to the result of the command; (float and double return values will be truncated). Long_t ProcessLineAsynch(const char* line, TInterpreter::",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:20292,Performance,load,loaded,20292,"Prompt[64]proposed prompt string; TObjArray*fRootmapFileslist of non-default rootmap files loaded; TStringfRootmapLoadPathdynamic load path used for loading rootmap files; TStringfSharedLibslist of shared libraries loaded by G__loadfile; Int_tfSharedLibsSerialIndicator of the last time we set fSharedLibs; static void*fgSetOfSpecialsset of TObject*s used in CINT variables. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCint(const char* name, const char* title); Initialize the CINT interpreter interface. ~TCint(); Destroy the CINT interpreter interface. void ClearFileBusy(); Reset CINT internal state in case a previous action was not correctly; terminated by G__init_cint() and G__dlmod(). void ClearStack(); Delete existing temporary values. Int_t InitializeDictionaries(); Initialize all registered dictionaries. Normally this is already done; by G__init_cint() and G__dlmod(). void EnableAutoLoading(); Enable the automatic loading of shared libraries when a class; is used that is stored in a not yet loaded library. Uses the; information stored in the class/library map (typically; $ROOTSYS/etc/system.rootmap). void EndOfLineAction(); It calls a ""fantom"" method to synchronize user keyboard input; and ROOT prompt line. Bool_t IsLoaded(const char* filename) const; Return true if the file has already been loaded by cint. Int_t Load(const char* filenam, Bool_t system = kFALSE); Load a library file in CINT's memory.; if 'system' is true, the library is never unloaded. void LoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0); Load a macro file in CINT's memory. Long_t ProcessLine(const char* line, TInterpreter::EErrorCode* error = 0); Let CINT process a command line.; If the command is executed and the result of G__process_cmd is 0,; the return value is the int value corresponding to the result of the command; (float and double return values will be truncated). Long_t ProcessLineAsynch(const char* line, TInterpreter::",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:20599,Performance,load,loaded,20599,"pecialsset of TObject*s used in CINT variables. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCint(const char* name, const char* title); Initialize the CINT interpreter interface. ~TCint(); Destroy the CINT interpreter interface. void ClearFileBusy(); Reset CINT internal state in case a previous action was not correctly; terminated by G__init_cint() and G__dlmod(). void ClearStack(); Delete existing temporary values. Int_t InitializeDictionaries(); Initialize all registered dictionaries. Normally this is already done; by G__init_cint() and G__dlmod(). void EnableAutoLoading(); Enable the automatic loading of shared libraries when a class; is used that is stored in a not yet loaded library. Uses the; information stored in the class/library map (typically; $ROOTSYS/etc/system.rootmap). void EndOfLineAction(); It calls a ""fantom"" method to synchronize user keyboard input; and ROOT prompt line. Bool_t IsLoaded(const char* filename) const; Return true if the file has already been loaded by cint. Int_t Load(const char* filenam, Bool_t system = kFALSE); Load a library file in CINT's memory.; if 'system' is true, the library is never unloaded. void LoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0); Load a macro file in CINT's memory. Long_t ProcessLine(const char* line, TInterpreter::EErrorCode* error = 0); Let CINT process a command line.; If the command is executed and the result of G__process_cmd is 0,; the return value is the int value corresponding to the result of the command; (float and double return values will be truncated). Long_t ProcessLineAsynch(const char* line, TInterpreter::EErrorCode* error = 0); Let CINT process a command line asynch. Long_t ProcessLineSynch(const char* line, TInterpreter::EErrorCode* error = 0); Let CINT process a command line synchronously, i.e we are waiting; it will be finished. Long_t Calc(const char* line, TInterpreter::EErrorCode* error = 0); Directly execute an execut",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:20621,Performance,Load,Load,20621,"udes; Libraries. Function documentation; TCint(const char* name, const char* title); Initialize the CINT interpreter interface. ~TCint(); Destroy the CINT interpreter interface. void ClearFileBusy(); Reset CINT internal state in case a previous action was not correctly; terminated by G__init_cint() and G__dlmod(). void ClearStack(); Delete existing temporary values. Int_t InitializeDictionaries(); Initialize all registered dictionaries. Normally this is already done; by G__init_cint() and G__dlmod(). void EnableAutoLoading(); Enable the automatic loading of shared libraries when a class; is used that is stored in a not yet loaded library. Uses the; information stored in the class/library map (typically; $ROOTSYS/etc/system.rootmap). void EndOfLineAction(); It calls a ""fantom"" method to synchronize user keyboard input; and ROOT prompt line. Bool_t IsLoaded(const char* filename) const; Return true if the file has already been loaded by cint. Int_t Load(const char* filenam, Bool_t system = kFALSE); Load a library file in CINT's memory.; if 'system' is true, the library is never unloaded. void LoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0); Load a macro file in CINT's memory. Long_t ProcessLine(const char* line, TInterpreter::EErrorCode* error = 0); Let CINT process a command line.; If the command is executed and the result of G__process_cmd is 0,; the return value is the int value corresponding to the result of the command; (float and double return values will be truncated). Long_t ProcessLineAsynch(const char* line, TInterpreter::EErrorCode* error = 0); Let CINT process a command line asynch. Long_t ProcessLineSynch(const char* line, TInterpreter::EErrorCode* error = 0); Let CINT process a command line synchronously, i.e we are waiting; it will be finished. Long_t Calc(const char* line, TInterpreter::EErrorCode* error = 0); Directly execute an executable statement (e.g. ""func()"", ""3+5"", etc.; however not declarations, like ""Int_t x;""). void PrintI",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:20672,Performance,Load,Load,20672,"udes; Libraries. Function documentation; TCint(const char* name, const char* title); Initialize the CINT interpreter interface. ~TCint(); Destroy the CINT interpreter interface. void ClearFileBusy(); Reset CINT internal state in case a previous action was not correctly; terminated by G__init_cint() and G__dlmod(). void ClearStack(); Delete existing temporary values. Int_t InitializeDictionaries(); Initialize all registered dictionaries. Normally this is already done; by G__init_cint() and G__dlmod(). void EnableAutoLoading(); Enable the automatic loading of shared libraries when a class; is used that is stored in a not yet loaded library. Uses the; information stored in the class/library map (typically; $ROOTSYS/etc/system.rootmap). void EndOfLineAction(); It calls a ""fantom"" method to synchronize user keyboard input; and ROOT prompt line. Bool_t IsLoaded(const char* filename) const; Return true if the file has already been loaded by cint. Int_t Load(const char* filenam, Bool_t system = kFALSE); Load a library file in CINT's memory.; if 'system' is true, the library is never unloaded. void LoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0); Load a macro file in CINT's memory. Long_t ProcessLine(const char* line, TInterpreter::EErrorCode* error = 0); Let CINT process a command line.; If the command is executed and the result of G__process_cmd is 0,; the return value is the int value corresponding to the result of the command; (float and double return values will be truncated). Long_t ProcessLineAsynch(const char* line, TInterpreter::EErrorCode* error = 0); Let CINT process a command line asynch. Long_t ProcessLineSynch(const char* line, TInterpreter::EErrorCode* error = 0); Let CINT process a command line synchronously, i.e we are waiting; it will be finished. Long_t Calc(const char* line, TInterpreter::EErrorCode* error = 0); Directly execute an executable statement (e.g. ""func()"", ""3+5"", etc.; however not declarations, like ""Int_t x;""). void PrintI",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:20768,Performance,Load,LoadMacro,20768,"nterpreter interface. void ClearFileBusy(); Reset CINT internal state in case a previous action was not correctly; terminated by G__init_cint() and G__dlmod(). void ClearStack(); Delete existing temporary values. Int_t InitializeDictionaries(); Initialize all registered dictionaries. Normally this is already done; by G__init_cint() and G__dlmod(). void EnableAutoLoading(); Enable the automatic loading of shared libraries when a class; is used that is stored in a not yet loaded library. Uses the; information stored in the class/library map (typically; $ROOTSYS/etc/system.rootmap). void EndOfLineAction(); It calls a ""fantom"" method to synchronize user keyboard input; and ROOT prompt line. Bool_t IsLoaded(const char* filename) const; Return true if the file has already been loaded by cint. Int_t Load(const char* filenam, Bool_t system = kFALSE); Load a library file in CINT's memory.; if 'system' is true, the library is never unloaded. void LoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0); Load a macro file in CINT's memory. Long_t ProcessLine(const char* line, TInterpreter::EErrorCode* error = 0); Let CINT process a command line.; If the command is executed and the result of G__process_cmd is 0,; the return value is the int value corresponding to the result of the command; (float and double return values will be truncated). Long_t ProcessLineAsynch(const char* line, TInterpreter::EErrorCode* error = 0); Let CINT process a command line asynch. Long_t ProcessLineSynch(const char* line, TInterpreter::EErrorCode* error = 0); Let CINT process a command line synchronously, i.e we are waiting; it will be finished. Long_t Calc(const char* line, TInterpreter::EErrorCode* error = 0); Directly execute an executable statement (e.g. ""func()"", ""3+5"", etc.; however not declarations, like ""Int_t x;""). void PrintIntro(); Print CINT introduction and help message. void SetGetline(const char *(*)(const char* prompt) getlineFunc, void (*)(const char* line) histaddFunc); ",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:20838,Performance,Load,Load,20838,"nterpreter interface. void ClearFileBusy(); Reset CINT internal state in case a previous action was not correctly; terminated by G__init_cint() and G__dlmod(). void ClearStack(); Delete existing temporary values. Int_t InitializeDictionaries(); Initialize all registered dictionaries. Normally this is already done; by G__init_cint() and G__dlmod(). void EnableAutoLoading(); Enable the automatic loading of shared libraries when a class; is used that is stored in a not yet loaded library. Uses the; information stored in the class/library map (typically; $ROOTSYS/etc/system.rootmap). void EndOfLineAction(); It calls a ""fantom"" method to synchronize user keyboard input; and ROOT prompt line. Bool_t IsLoaded(const char* filename) const; Return true if the file has already been loaded by cint. Int_t Load(const char* filenam, Bool_t system = kFALSE); Load a library file in CINT's memory.; if 'system' is true, the library is never unloaded. void LoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0); Load a macro file in CINT's memory. Long_t ProcessLine(const char* line, TInterpreter::EErrorCode* error = 0); Let CINT process a command line.; If the command is executed and the result of G__process_cmd is 0,; the return value is the int value corresponding to the result of the command; (float and double return values will be truncated). Long_t ProcessLineAsynch(const char* line, TInterpreter::EErrorCode* error = 0); Let CINT process a command line asynch. Long_t ProcessLineSynch(const char* line, TInterpreter::EErrorCode* error = 0); Let CINT process a command line synchronously, i.e we are waiting; it will be finished. Long_t Calc(const char* line, TInterpreter::EErrorCode* error = 0); Directly execute an executable statement (e.g. ""func()"", ""3+5"", etc.; however not declarations, like ""Int_t x;""). void PrintIntro(); Print CINT introduction and help message. void SetGetline(const char *(*)(const char* prompt) getlineFunc, void (*)(const char* line) histaddFunc); ",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:28232,Performance,Load,LoadLibraryMap,28232,"Cint::GetTopLevelMacroName() << std::endl;; }. mymacro.C. #include <iostream>; #include ""inclfile.h""; void mymacro() {; std::cout << ""In mymacro.C"" << std::endl;; std::cout << "" TCint::GetCurrentMacroName() returns "" <<; TCint::GetCurrentMacroName() << std::endl;; std::cout << "" TCint::GetTopLevelMacroName() returns "" <<; TCint::GetTopLevelMacroName() << std::endl;; std::cout << "" Now calling inclfunc..."" << std::endl;; inclfunc();; }. Running mymacro.C will print:. root [0] .x mymacro.C; In mymacro.C; TCint::GetCurrentMacroName() returns ./mymacro.C; TCint::GetTopLevelMacroName() returns ./mymacro.C; Now calling inclfunc...; In inclfile.h; TCint::GetCurrentMacroName() returns inclfile.h; TCint::GetTopLevelMacroName() returns ./mymacro.C. const char * TypeName(const char* typeDesc); Return the absolute type of typeDesc.; E.g.: typeDesc = ""class TNamed**"", returns ""TNamed"".; You need to use the result immediately before it is being overwritten. Int_t LoadLibraryMap(const char* rootmapfile = 0); Load map between class and library. If rootmapfile is specified a; specific rootmap file can be added (typically used by ACLiC).; In case of error -1 is returned, 0 otherwise.; Cint uses this information to automatically load the shared library; for a class (autoload mechanism).; See also the AutoLoadCallback() method below. Int_t RescanLibraryMap(); Scan again along the dynamic path for library maps. Entries for the loaded; shared libraries are unloaded first. This can be useful after reseting; the dynamic path through TSystem::SetDynamicPath(); In case of error -1 is returned, 0 otherwise. Int_t ReloadAllSharedLibraryMaps(); Reload the library map entries coming from all the loaded shared libraries,; after first unloading the current ones.; In case of error -1 is returned, 0 otherwise. Int_t UnloadAllSharedLibraryMaps(); Unload the library map entries coming from all the loaded shared libraries.; Returns 0 if succesful. Int_t UnloadLibraryMap(const char* library); Unload libr",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:28277,Performance,Load,Load,28277,"Cint::GetTopLevelMacroName() << std::endl;; }. mymacro.C. #include <iostream>; #include ""inclfile.h""; void mymacro() {; std::cout << ""In mymacro.C"" << std::endl;; std::cout << "" TCint::GetCurrentMacroName() returns "" <<; TCint::GetCurrentMacroName() << std::endl;; std::cout << "" TCint::GetTopLevelMacroName() returns "" <<; TCint::GetTopLevelMacroName() << std::endl;; std::cout << "" Now calling inclfunc..."" << std::endl;; inclfunc();; }. Running mymacro.C will print:. root [0] .x mymacro.C; In mymacro.C; TCint::GetCurrentMacroName() returns ./mymacro.C; TCint::GetTopLevelMacroName() returns ./mymacro.C; Now calling inclfunc...; In inclfile.h; TCint::GetCurrentMacroName() returns inclfile.h; TCint::GetTopLevelMacroName() returns ./mymacro.C. const char * TypeName(const char* typeDesc); Return the absolute type of typeDesc.; E.g.: typeDesc = ""class TNamed**"", returns ""TNamed"".; You need to use the result immediately before it is being overwritten. Int_t LoadLibraryMap(const char* rootmapfile = 0); Load map between class and library. If rootmapfile is specified a; specific rootmap file can be added (typically used by ACLiC).; In case of error -1 is returned, 0 otherwise.; Cint uses this information to automatically load the shared library; for a class (autoload mechanism).; See also the AutoLoadCallback() method below. Int_t RescanLibraryMap(); Scan again along the dynamic path for library maps. Entries for the loaded; shared libraries are unloaded first. This can be useful after reseting; the dynamic path through TSystem::SetDynamicPath(); In case of error -1 is returned, 0 otherwise. Int_t ReloadAllSharedLibraryMaps(); Reload the library map entries coming from all the loaded shared libraries,; after first unloading the current ones.; In case of error -1 is returned, 0 otherwise. Int_t UnloadAllSharedLibraryMaps(); Unload the library map entries coming from all the loaded shared libraries.; Returns 0 if succesful. Int_t UnloadLibraryMap(const char* library); Unload libr",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:28498,Performance,load,load,28498,"ntMacroName() << std::endl;; std::cout << "" TCint::GetTopLevelMacroName() returns "" <<; TCint::GetTopLevelMacroName() << std::endl;; std::cout << "" Now calling inclfunc..."" << std::endl;; inclfunc();; }. Running mymacro.C will print:. root [0] .x mymacro.C; In mymacro.C; TCint::GetCurrentMacroName() returns ./mymacro.C; TCint::GetTopLevelMacroName() returns ./mymacro.C; Now calling inclfunc...; In inclfile.h; TCint::GetCurrentMacroName() returns inclfile.h; TCint::GetTopLevelMacroName() returns ./mymacro.C. const char * TypeName(const char* typeDesc); Return the absolute type of typeDesc.; E.g.: typeDesc = ""class TNamed**"", returns ""TNamed"".; You need to use the result immediately before it is being overwritten. Int_t LoadLibraryMap(const char* rootmapfile = 0); Load map between class and library. If rootmapfile is specified a; specific rootmap file can be added (typically used by ACLiC).; In case of error -1 is returned, 0 otherwise.; Cint uses this information to automatically load the shared library; for a class (autoload mechanism).; See also the AutoLoadCallback() method below. Int_t RescanLibraryMap(); Scan again along the dynamic path for library maps. Entries for the loaded; shared libraries are unloaded first. This can be useful after reseting; the dynamic path through TSystem::SetDynamicPath(); In case of error -1 is returned, 0 otherwise. Int_t ReloadAllSharedLibraryMaps(); Reload the library map entries coming from all the loaded shared libraries,; after first unloading the current ones.; In case of error -1 is returned, 0 otherwise. Int_t UnloadAllSharedLibraryMaps(); Unload the library map entries coming from all the loaded shared libraries.; Returns 0 if succesful. Int_t UnloadLibraryMap(const char* library); Unload library map entries coming from the specified library.; Returns -1 in case no entries for the specified library were found,; 0 otherwise. Int_t AutoLoad(const char* classname); Load library containing the specified class. Returns 0 in case",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:28698,Performance,load,loaded,28698,"ning mymacro.C will print:. root [0] .x mymacro.C; In mymacro.C; TCint::GetCurrentMacroName() returns ./mymacro.C; TCint::GetTopLevelMacroName() returns ./mymacro.C; Now calling inclfunc...; In inclfile.h; TCint::GetCurrentMacroName() returns inclfile.h; TCint::GetTopLevelMacroName() returns ./mymacro.C. const char * TypeName(const char* typeDesc); Return the absolute type of typeDesc.; E.g.: typeDesc = ""class TNamed**"", returns ""TNamed"".; You need to use the result immediately before it is being overwritten. Int_t LoadLibraryMap(const char* rootmapfile = 0); Load map between class and library. If rootmapfile is specified a; specific rootmap file can be added (typically used by ACLiC).; In case of error -1 is returned, 0 otherwise.; Cint uses this information to automatically load the shared library; for a class (autoload mechanism).; See also the AutoLoadCallback() method below. Int_t RescanLibraryMap(); Scan again along the dynamic path for library maps. Entries for the loaded; shared libraries are unloaded first. This can be useful after reseting; the dynamic path through TSystem::SetDynamicPath(); In case of error -1 is returned, 0 otherwise. Int_t ReloadAllSharedLibraryMaps(); Reload the library map entries coming from all the loaded shared libraries,; after first unloading the current ones.; In case of error -1 is returned, 0 otherwise. Int_t UnloadAllSharedLibraryMaps(); Unload the library map entries coming from all the loaded shared libraries.; Returns 0 if succesful. Int_t UnloadLibraryMap(const char* library); Unload library map entries coming from the specified library.; Returns -1 in case no entries for the specified library were found,; 0 otherwise. Int_t AutoLoad(const char* classname); Load library containing the specified class. Returns 0 in case of error; and 1 in case if success. Int_t AutoLoadCallback(const char* cls, const char* lib); Load library containing specified class. Returns 0 in case of error; and 1 in case if success. void * FindSpecial",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:28963,Performance,load,loaded,28963,"ns inclfile.h; TCint::GetTopLevelMacroName() returns ./mymacro.C. const char * TypeName(const char* typeDesc); Return the absolute type of typeDesc.; E.g.: typeDesc = ""class TNamed**"", returns ""TNamed"".; You need to use the result immediately before it is being overwritten. Int_t LoadLibraryMap(const char* rootmapfile = 0); Load map between class and library. If rootmapfile is specified a; specific rootmap file can be added (typically used by ACLiC).; In case of error -1 is returned, 0 otherwise.; Cint uses this information to automatically load the shared library; for a class (autoload mechanism).; See also the AutoLoadCallback() method below. Int_t RescanLibraryMap(); Scan again along the dynamic path for library maps. Entries for the loaded; shared libraries are unloaded first. This can be useful after reseting; the dynamic path through TSystem::SetDynamicPath(); In case of error -1 is returned, 0 otherwise. Int_t ReloadAllSharedLibraryMaps(); Reload the library map entries coming from all the loaded shared libraries,; after first unloading the current ones.; In case of error -1 is returned, 0 otherwise. Int_t UnloadAllSharedLibraryMaps(); Unload the library map entries coming from all the loaded shared libraries.; Returns 0 if succesful. Int_t UnloadLibraryMap(const char* library); Unload library map entries coming from the specified library.; Returns -1 in case no entries for the specified library were found,; 0 otherwise. Int_t AutoLoad(const char* classname); Load library containing the specified class. Returns 0 in case of error; and 1 in case if success. Int_t AutoLoadCallback(const char* cls, const char* lib); Load library containing specified class. Returns 0 in case of error; and 1 in case if success. void * FindSpecialObject(const char* name, Cint::G__ClassInfo* type, void** prevObj, void** assocPtr); Static function called by CINT when it finds an un-indentified object.; This function tries to find the UO in the ROOT files, directories, etc.; This funct",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:29163,Performance,load,loaded,29163,"**"", returns ""TNamed"".; You need to use the result immediately before it is being overwritten. Int_t LoadLibraryMap(const char* rootmapfile = 0); Load map between class and library. If rootmapfile is specified a; specific rootmap file can be added (typically used by ACLiC).; In case of error -1 is returned, 0 otherwise.; Cint uses this information to automatically load the shared library; for a class (autoload mechanism).; See also the AutoLoadCallback() method below. Int_t RescanLibraryMap(); Scan again along the dynamic path for library maps. Entries for the loaded; shared libraries are unloaded first. This can be useful after reseting; the dynamic path through TSystem::SetDynamicPath(); In case of error -1 is returned, 0 otherwise. Int_t ReloadAllSharedLibraryMaps(); Reload the library map entries coming from all the loaded shared libraries,; after first unloading the current ones.; In case of error -1 is returned, 0 otherwise. Int_t UnloadAllSharedLibraryMaps(); Unload the library map entries coming from all the loaded shared libraries.; Returns 0 if succesful. Int_t UnloadLibraryMap(const char* library); Unload library map entries coming from the specified library.; Returns -1 in case no entries for the specified library were found,; 0 otherwise. Int_t AutoLoad(const char* classname); Load library containing the specified class. Returns 0 in case of error; and 1 in case if success. Int_t AutoLoadCallback(const char* cls, const char* lib); Load library containing specified class. Returns 0 in case of error; and 1 in case if success. void * FindSpecialObject(const char* name, Cint::G__ClassInfo* type, void** prevObj, void** assocPtr); Static function called by CINT when it finds an un-indentified object.; This function tries to find the UO in the ROOT files, directories, etc.; This functions has been registered by the TCint ctor. void UpdateClassInfo(char* name, Long_t tagnum); Static function called by CINT when it changes the tagnum for; a class (e.g. after re-",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:29442,Performance,Load,Load,29442,"herwise.; Cint uses this information to automatically load the shared library; for a class (autoload mechanism).; See also the AutoLoadCallback() method below. Int_t RescanLibraryMap(); Scan again along the dynamic path for library maps. Entries for the loaded; shared libraries are unloaded first. This can be useful after reseting; the dynamic path through TSystem::SetDynamicPath(); In case of error -1 is returned, 0 otherwise. Int_t ReloadAllSharedLibraryMaps(); Reload the library map entries coming from all the loaded shared libraries,; after first unloading the current ones.; In case of error -1 is returned, 0 otherwise. Int_t UnloadAllSharedLibraryMaps(); Unload the library map entries coming from all the loaded shared libraries.; Returns 0 if succesful. Int_t UnloadLibraryMap(const char* library); Unload library map entries coming from the specified library.; Returns -1 in case no entries for the specified library were found,; 0 otherwise. Int_t AutoLoad(const char* classname); Load library containing the specified class. Returns 0 in case of error; and 1 in case if success. Int_t AutoLoadCallback(const char* cls, const char* lib); Load library containing specified class. Returns 0 in case of error; and 1 in case if success. void * FindSpecialObject(const char* name, Cint::G__ClassInfo* type, void** prevObj, void** assocPtr); Static function called by CINT when it finds an un-indentified object.; This function tries to find the UO in the ROOT files, directories, etc.; This functions has been registered by the TCint ctor. void UpdateClassInfo(char* name, Long_t tagnum); Static function called by CINT when it changes the tagnum for; a class (e.g. after re-executing the setup function). In such; cases we have to update the tagnum in the G__ClassInfo used by; the TClass for class ""item"". void UpdateClassInfoWork(const char* name, Long_t tagnum); This does the actual work of UpdateClassInfo. void UpdateAllCanvases(); Update all canvases at end the terminal input com",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:29599,Performance,Load,Load,29599," method below. Int_t RescanLibraryMap(); Scan again along the dynamic path for library maps. Entries for the loaded; shared libraries are unloaded first. This can be useful after reseting; the dynamic path through TSystem::SetDynamicPath(); In case of error -1 is returned, 0 otherwise. Int_t ReloadAllSharedLibraryMaps(); Reload the library map entries coming from all the loaded shared libraries,; after first unloading the current ones.; In case of error -1 is returned, 0 otherwise. Int_t UnloadAllSharedLibraryMaps(); Unload the library map entries coming from all the loaded shared libraries.; Returns 0 if succesful. Int_t UnloadLibraryMap(const char* library); Unload library map entries coming from the specified library.; Returns -1 in case no entries for the specified library were found,; 0 otherwise. Int_t AutoLoad(const char* classname); Load library containing the specified class. Returns 0 in case of error; and 1 in case if success. Int_t AutoLoadCallback(const char* cls, const char* lib); Load library containing specified class. Returns 0 in case of error; and 1 in case if success. void * FindSpecialObject(const char* name, Cint::G__ClassInfo* type, void** prevObj, void** assocPtr); Static function called by CINT when it finds an un-indentified object.; This function tries to find the UO in the ROOT files, directories, etc.; This functions has been registered by the TCint ctor. void UpdateClassInfo(char* name, Long_t tagnum); Static function called by CINT when it changes the tagnum for; a class (e.g. after re-executing the setup function). In such; cases we have to update the tagnum in the G__ClassInfo used by; the TClass for class ""item"". void UpdateClassInfoWork(const char* name, Long_t tagnum); This does the actual work of UpdateClassInfo. void UpdateAllCanvases(); Update all canvases at end the terminal input command. const char* GetSharedLibs(); Return the list of shared libraries known to CINT. const char * GetClassSharedLibs(const char* cls); Get the li",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:32400,Performance,Load,LoadFile,32400,"har* path); Add the given path to the list of directories in which the interpreter; looks for include files. Only one path item can be specified at a; time, i.e. ""path1:path2"" is not supported. const char * GetIncludePath(); Refresh the list of include paths known to the interpreter and return it; with -I prepended. const char * GetSTLIncludePath() const; Return the directory containing CINT's stl cintdlls. int DisplayClass(FILE* fout, char* name, int base, int start) const; Interface to CINT function. int DisplayIncludePath(FILE* fout) const; Interface to CINT function. void * FindSym(const char* entry) const; Interface to CINT function. void GenericError(const char* error) const; Interface to CINT function. Long_t GetExecByteCode() const; Interface to CINT function. Long_t Getgvp() const; Interface to CINT function. const char * Getp2f2funcname(void* receiver) const; Interface to CINT function. int GetSecurityError() const; Interface to CINT function. int LoadFile(const char* path) const; Interface to CINT function. void LoadText(const char* text) const; Interface to CINT function. const char * MapCppName(const char* ) const; Interface to CINT function. void SetAlloclockfunc(void (*)() ) const; Interface to CINT function. void SetAllocunlockfunc(void (*)() ) const; Interface to CINT function. int SetClassAutoloading(int ) const; Interface to CINT function. void SetErrmsgcallback(void* p) const; Interface to CINT function. void Setgvp(Long_t ) const; Interface to CINT function. void SetRTLD_NOW() const; Interface to CINT function. void SetRTLD_LAZY() const; Interface to CINT function. void SetTempLevel(int val) const; Interface to CINT function. int UnloadFile(const char* path) const; Interface to CINT function. void CallFunc_Delete(void* func) const; Interface to CINT function. void CallFunc_Exec(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t Cal",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:32467,Performance,Load,LoadText,32467," the interpreter; looks for include files. Only one path item can be specified at a; time, i.e. ""path1:path2"" is not supported. const char * GetIncludePath(); Refresh the list of include paths known to the interpreter and return it; with -I prepended. const char * GetSTLIncludePath() const; Return the directory containing CINT's stl cintdlls. int DisplayClass(FILE* fout, char* name, int base, int start) const; Interface to CINT function. int DisplayIncludePath(FILE* fout) const; Interface to CINT function. void * FindSym(const char* entry) const; Interface to CINT function. void GenericError(const char* error) const; Interface to CINT function. Long_t GetExecByteCode() const; Interface to CINT function. Long_t Getgvp() const; Interface to CINT function. const char * Getp2f2funcname(void* receiver) const; Interface to CINT function. int GetSecurityError() const; Interface to CINT function. int LoadFile(const char* path) const; Interface to CINT function. void LoadText(const char* text) const; Interface to CINT function. const char * MapCppName(const char* ) const; Interface to CINT function. void SetAlloclockfunc(void (*)() ) const; Interface to CINT function. void SetAllocunlockfunc(void (*)() ) const; Interface to CINT function. int SetClassAutoloading(int ) const; Interface to CINT function. void SetErrmsgcallback(void* p) const; Interface to CINT function. void Setgvp(Long_t ) const; Interface to CINT function. void SetRTLD_NOW() const; Interface to CINT function. void SetRTLD_LAZY() const; Interface to CINT function. void SetTempLevel(int val) const; Interface to CINT function. int UnloadFile(const char* path) const; Interface to CINT function. void CallFunc_Delete(void* func) const; Interface to CINT function. void CallFunc_Exec(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt(CallFunc_t* func, void* address) const; Interface to CINT function. Long_t CallFunc_ExecInt64(CallFunc_t* func, void* address) const; Interface t",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:10212,Security,Hash,Hash,10212,"eterTypeName(const char* name, Bool_t full = kFALSE); virtual TStringGetMangledName(TClass* cl, const char* method, const char* params); virtual TStringGetMangledNameWithPrototype(TClass* cl, const char* method, const char* proto); virtual TEnv*GetMapfile() const; virtual Int_tGetMore() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*Getp2f2funcname(void* receiver) const; virtual char*GetPrompt(); virtual TObjArray*GetRootMapFiles() const; virtual intGetSecurityError() const; virtual const char*GetSharedLibDeps(const char* lib); virtual const char*GetSharedLibs(); virtual const char*GetSTLIncludePath() const; virtual const char*TNamed::GetTitle() const; virtual const char*GetTopLevelMacroName() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual Int_tInitializeDictionaries(); virtual voidTObject::Inspect() constMENU ; static TInterpreter*&TInterpreter::Instance(); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tIsErrorMessagesEnabled() const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tIsLoaded(const char* filename) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tIsProcessLineLocked() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual Int_tLoad(const char* filenam, Bool_t system = kFALSE); virtual intLoadFile(const char* path) const; virtual Int_tLoadLibraryMap(const char* rootmapfile = 0); virtual voidLoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0); v",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:22721,Security,access,accessed,22721,"ction and help message. void SetGetline(const char *(*)(const char* prompt) getlineFunc, void (*)(const char* line) histaddFunc); Set a getline function to call when input is needed. void RecursiveRemove(TObject* obj); Delete object from CINT symbol table so it can not be used anymore.; CINT objects are always on the heap. void Reset(); Reset the CINT state to the state saved by the last call to; TCint::SaveContext(). void ResetAll(); Reset the CINT state to its initial state. void ResetGlobals(); Reset the CINT global object state to the state saved by the last; call to TCint::SaveGlobalsContext(). void ResetGlobalVar(void* obj); Reset the CINT global object state to the state saved by the last; call to TCint::SaveGlobalsContext(). void RewindDictionary(); Rewind CINT dictionary to the point where it was before executing; the current macro. This function is typically called after SEGV or; ctlr-C after doing a longjmp back to the prompt. Int_t DeleteGlobal(void* obj); Delete obj from CINT symbol table so it cannot be accessed anymore.; Returns 1 in case of success and 0 in case object was not in table. void SaveContext(); Save the current CINT state. void SaveGlobalsContext(); Save the current CINT state of global objects. void UpdateListOfGlobals(); Update the list of pointers to global variables. This function; is called by TROOT::GetListOfGlobals(). void UpdateListOfGlobalFunctions(); Update the list of pointers to global functions. This function; is called by TROOT::GetListOfGlobalFunctions(). void UpdateListOfTypes(); Update the list of pointers to Datatype (typedef) definitions. This; function is called by TROOT::GetListOfTypes(). void SetClassInfo(TClass* cl, Bool_t reload = kFALSE); Set pointer to CINT's G__ClassInfo in TClass. Bool_t CheckClassInfo(const char* name, Bool_t autoload = kTRUE); Checks if a class with the specified name is defined in CINT.; Returns kFALSE is class is not defined. void CreateListOfBaseClasses(TClass* cl); Create list of pointers ",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:15907,Testability,Test,TestBit,15907,"* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetErrmsgcallback(void* p) const; virtual Bool_tSetErrorMessages(Bool_t enable = kTRUE); virtual voidSetGetline(const char *(*)(const char* prompt) getlineFunc, void (*)(const char* line) histaddFunc); virtual voidSetgvp(Long_t) const; virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetProcessLineLock(Bool_t lock = kTRUE); virtual voidSetRTLD_LAZY() const; virtual voidSetRTLD_NOW() const; virtual voidSetTempLevel(int val) const; virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTypedefInfo_Delete(TypedefInfo_t* tinfo) const; virtual TypedefInfo_t*TypedefInfo_Factory() const; virtual TypedefInfo_t*TypedefInfo_FactoryCopy(TypedefInfo_t* tinfo) const; virtual voidTypedefInfo_Init(TypedefInfo_t* tinfo, const char* funcname) const; virtual boolTypedefInfo_IsValid(TypedefInfo_t* tinfo) const; virtual const char*TypedefInfo_Name(TypedefInfo_t* tinfo) const; virtual Long_tTypedefInfo_Property(TypedefInfo_t* tinfo) const; virtual intTypedefInfo_Size(TypedefInfo_t* tinfo) const; virtual const char*TypedefInfo_Title(TypedefInfo_t* tinfo) const; virtual const char*TypedefInfo_TrueName(TypedefInfo_t* tinfo) const; virtual voidTypeInfo_Delete(TypeInfo_t* tinfo) const; virtual TypeInfo_t*TypeInfo_Factory() const; virtual TypeInfo_t*TypeInfo_Factory(G__value*) const; virtual TypeInfo_t*TypeInfo_FactoryCopy(TypeInfo_t*) const; virtual voidTypeInfo_Init(TypeInfo_t* tinfo, const char* funcname) const; virt",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:15946,Testability,Test,TestBits,15946,"::SetDtorOnly(void* obj); virtual voidSetErrmsgcallback(void* p) const; virtual Bool_tSetErrorMessages(Bool_t enable = kTRUE); virtual voidSetGetline(const char *(*)(const char* prompt) getlineFunc, void (*)(const char* line) histaddFunc); virtual voidSetgvp(Long_t) const; virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetProcessLineLock(Bool_t lock = kTRUE); virtual voidSetRTLD_LAZY() const; virtual voidSetRTLD_NOW() const; virtual voidSetTempLevel(int val) const; virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTypedefInfo_Delete(TypedefInfo_t* tinfo) const; virtual TypedefInfo_t*TypedefInfo_Factory() const; virtual TypedefInfo_t*TypedefInfo_FactoryCopy(TypedefInfo_t* tinfo) const; virtual voidTypedefInfo_Init(TypedefInfo_t* tinfo, const char* funcname) const; virtual boolTypedefInfo_IsValid(TypedefInfo_t* tinfo) const; virtual const char*TypedefInfo_Name(TypedefInfo_t* tinfo) const; virtual Long_tTypedefInfo_Property(TypedefInfo_t* tinfo) const; virtual intTypedefInfo_Size(TypedefInfo_t* tinfo) const; virtual const char*TypedefInfo_Title(TypedefInfo_t* tinfo) const; virtual const char*TypedefInfo_TrueName(TypedefInfo_t* tinfo) const; virtual voidTypeInfo_Delete(TypeInfo_t* tinfo) const; virtual TypeInfo_t*TypeInfo_Factory() const; virtual TypeInfo_t*TypeInfo_Factory(G__value*) const; virtual TypeInfo_t*TypeInfo_FactoryCopy(TypeInfo_t*) const; virtual voidTypeInfo_Init(TypeInfo_t* tinfo, const char* funcname) const; virtual boolTypeInfo_IsValid(TypeInfo_t* tin",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:5383,Usability,Clear,Clear,5383,"assInfo_IsLoaded(ClassInfo_t* info) const; virtual boolClassInfo_IsValid(ClassInfo_t* info) const; virtual boolClassInfo_IsValidMethod(ClassInfo_t* info, const char* method, const char* proto, Long_t* offset) const; virtual const char*ClassInfo_Name(ClassInfo_t* info) const; virtual void*ClassInfo_New(ClassInfo_t* info) const; virtual void*ClassInfo_New(ClassInfo_t* info, int n) const; virtual void*ClassInfo_New(ClassInfo_t* info, void* arena) const; virtual void*ClassInfo_New(ClassInfo_t* info, int n, void* arena) const; virtual intClassInfo_Next(ClassInfo_t* info) const; virtual Long_tClassInfo_Property(ClassInfo_t* info) const; virtual intClassInfo_RootFlag(ClassInfo_t* info) const; virtual intClassInfo_Size(ClassInfo_t* info) const; virtual Long_tClassInfo_Tagnum(ClassInfo_t* info) const; virtual const char*ClassInfo_Title(ClassInfo_t* info) const; virtual const char*ClassInfo_TmpltName(ClassInfo_t* info) const; virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidClearFileBusy(); virtual voidClearStack(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidCreateListOfBaseClasses(TClass* cl); virtual voidCreateListOfDataMembers(TClass* cl); virtual voidCreateListOfMethodArgs(TFunction* m); virtual voidCreateListOfMethods(TClass* cl); virtual intDataMemberInfo_ArrayDim(DataMemberInfo_t* dminfo) const; virtual voidDataMemberInfo_Delete(DataMemberInfo_t* dminfo) const; virtual DataMemberInfo_t*DataMemberInfo_Factory(ClassInfo_t* clinfo = 0) const; virtual DataMemberInfo_t*DataMemberInfo_FactoryCopy(DataMemberInfo_t* dminfo) const; virtual boolDataMemberInfo_IsValid(DataMemberInfo_t* dminfo) const; virtual intDataMemberInfo_MaxIndex(DataMemberInfo_t* dminfo, Int_t dim) const; virtual const char*DataMemberInfo_Name(DataMemberInfo_t* dminfo) const; virtual intDataMemberInfo_Next(DataMemb",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:19844,Usability,Clear,ClearFileBusy,19844,"devalue passed to exit() in interpreter; Int_tfGlobalsListSerialIndicator of the last time we refresh the ROOT list of globals.; TStringfIncludePathlist of CINT include paths; Bool_tfLockProcessLinetrue if ProcessLine should lock gCINTMutex; TEnv*fMapfilemap of classes and libraries; Int_tfMore1 if more input is required; charfPrompt[64]proposed prompt string; TObjArray*fRootmapFileslist of non-default rootmap files loaded; TStringfRootmapLoadPathdynamic load path used for loading rootmap files; TStringfSharedLibslist of shared libraries loaded by G__loadfile; Int_tfSharedLibsSerialIndicator of the last time we set fSharedLibs; static void*fgSetOfSpecialsset of TObject*s used in CINT variables. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCint(const char* name, const char* title); Initialize the CINT interpreter interface. ~TCint(); Destroy the CINT interpreter interface. void ClearFileBusy(); Reset CINT internal state in case a previous action was not correctly; terminated by G__init_cint() and G__dlmod(). void ClearStack(); Delete existing temporary values. Int_t InitializeDictionaries(); Initialize all registered dictionaries. Normally this is already done; by G__init_cint() and G__dlmod(). void EnableAutoLoading(); Enable the automatic loading of shared libraries when a class; is used that is stored in a not yet loaded library. Uses the; information stored in the class/library map (typically; $ROOTSYS/etc/system.rootmap). void EndOfLineAction(); It calls a ""fantom"" method to synchronize user keyboard input; and ROOT prompt line. Bool_t IsLoaded(const char* filename) const; Return true if the file has already been loaded by cint. Int_t Load(const char* filenam, Bool_t system = kFALSE); Load a library file in CINT's memory.; if 'system' is true, the library is never unloaded. void LoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0); Load a macro file in CINT's memory. Long_t ProcessLine(const char* li",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCint.html:19982,Usability,Clear,ClearStack,19982,"efresh the ROOT list of globals.; TStringfIncludePathlist of CINT include paths; Bool_tfLockProcessLinetrue if ProcessLine should lock gCINTMutex; TEnv*fMapfilemap of classes and libraries; Int_tfMore1 if more input is required; charfPrompt[64]proposed prompt string; TObjArray*fRootmapFileslist of non-default rootmap files loaded; TStringfRootmapLoadPathdynamic load path used for loading rootmap files; TStringfSharedLibslist of shared libraries loaded by G__loadfile; Int_tfSharedLibsSerialIndicator of the last time we set fSharedLibs; static void*fgSetOfSpecialsset of TObject*s used in CINT variables. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCint(const char* name, const char* title); Initialize the CINT interpreter interface. ~TCint(); Destroy the CINT interpreter interface. void ClearFileBusy(); Reset CINT internal state in case a previous action was not correctly; terminated by G__init_cint() and G__dlmod(). void ClearStack(); Delete existing temporary values. Int_t InitializeDictionaries(); Initialize all registered dictionaries. Normally this is already done; by G__init_cint() and G__dlmod(). void EnableAutoLoading(); Enable the automatic loading of shared libraries when a class; is used that is stored in a not yet loaded library. Uses the; information stored in the class/library map (typically; $ROOTSYS/etc/system.rootmap). void EndOfLineAction(); It calls a ""fantom"" method to synchronize user keyboard input; and ROOT prompt line. Bool_t IsLoaded(const char* filename) const; Return true if the file has already been loaded by cint. Int_t Load(const char* filenam, Bool_t system = kFALSE); Load a library file in CINT's memory.; if 'system' is true, the library is never unloaded. void LoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0); Load a macro file in CINT's memory. Long_t ProcessLine(const char* line, TInterpreter::EErrorCode* error = 0); Let CINT process a command line.; If the command is ex",MatchSource.WIKI,root/html532/TCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCint.html
https://root.cern/root/html532/TCL.html:945,Integrability,interface,interface,945,". TCL. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MISC; » TABLE; » TCL. class TCL. The set of methods to work with the plain matrix / vector; ""derived"" from http://wwwinfo.cern.ch/asdoc/shortwrupsdir/f110/top.html; ""derived"" from http://wwwinfo.cern.ch/asdoc/shortwrupsdir/f112/top.html. Revision 1.7 2006/05/21 18:05:26 brun; Fix more coding conventions violations. Revision 1.6 2006/05/20 14:06:09 brun; Fix a VERY long list of coding conventions violations. Revision 1.5 2003/09/30 09:52:49 brun; Add references to the original CERNLIB packages. Revision 1.4 2003/05/28 15:17:03 brun; From Valeri Fine. A new version of the table package.; It fixes a couple of memory leaks:; class TTableDescriptorm; class TVolumePosition; and provides some clean up; for the TCL class interface. Revision 1.3 2003/04/03 17:39:39 fine; Make merge with ROOT 3.05.03 and add TR package; 122; Revision 1.2 2003/02/04 23:35:20 fine; Clean up. Revision 1.1 2002/04/15 20:23:39 fine; NEw naming schema for RootKErnel classes and a set of classes to back geometry OO. Revision 1.2 2001/05/29 19:08:08 brun; New version of some STAR classes from Valery. Revision 1.2 2001/05/27 02:38:14 fine; New method trsedu to solev Ax=B from Victor. Revision 1.1.1.1 2000/11/27 22:57:14 fisyak. Revision 1.1.1.1 2000/05/16 17:00:48 rdm; Initial import of ROOT into CVS. Function Members (Methods); public:. TCL(); TCL(const TCL&); virtual~TCL(); static TClass*Class(); virtual TClass*IsA() const; static float*mxmad(const float* a, const float* b, float* c, int i, int j, int k); static double*mxmad(const double* a, const double* b, double* c, int i, int j, int k); static float*mxmad1(const float* a, const float* q, float* c, int i, int j, int k); static double*mxmad1(const double* a, const double* b, double* c, int i, int j, int k); static float*mxmad2(con",MatchSource.WIKI,root/html532/TCL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCL.html
https://root.cern/root/html532/TCL.html:9616,Modifiability,Inherit,Inheritance,9616,"*vlinco(const double* a, double fa, const double* b, double fb, double* x, int n); static float*vmatl(const float* G, const float* c, float* x, int n = 3, int m = 3); static double*vmatl(const double* G, const double* c, double* x, int n = 3, int m = 3); static float*vmatr(const float* c, const float* G, float* x, int n = 3, int m = 3); static double*vmatr(const double* c, const double* G, double* x, int n = 3, int m = 3); static float*vscale(const float* a, float scale, float* b, int n); static double*vscale(const double* a, double scale, double* b, int n); static float*vsub(const float* a, const float* b, float* x, int n); static double*vsub(const double* a, const double* b, double* x, int n); static float*vsub(const float* b, const double* c, float* a, int n); static double*vsub(const double* b, const float* c, double* a, int n); static float*vzero(float* a, int n1); static double*vzero(double* a, int n1); static void**vzero(void** a, int n1). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; float * mxmad_0_(int n, const float* a, const float* b, float* c, int i, int j, int k). double * mxmad_0_(int n, const double* a, const double* b, double* c, int i, int j, int k). float * mxmlrt_0_(int n__, const float* a, const float* b, float* c, int ni, int nj); Matrix Multiplication; CERN PROGLIB# F110 MXMLRT .VERSION KERNFOR 2.00 720707; ORIG. 01/01/64 RKB. ; see original documentation of CERNLIB package F110. double * mxmlrt_0_(int n__, const double* a, const double* b, double* c, int ni, int nj); Matrix Multiplication (double precision). float * mxtrp(const float* a, float* b, int i, int j). Matrix Transposition; CERN PROGLIB# F110 MXTRP .VERSION KERNFOR 1.0 650809; ORIG. 01/01/64 RKB. ; see original documentation of CERNLIB package F110. double * mxtrp(const double* a, double* b, int i, int j); Matrix Transposition (double precision); CERN PROGLIB# F110 MXTRP .VERSION KERNFOR 1.0 650809; ORIG. 01/01/64 RKB. ; see original docum",MatchSource.WIKI,root/html532/TCL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCL.html
https://root.cern/root/html532/TCL.html:9629,Modifiability,Inherit,Inherited,9629,"*vlinco(const double* a, double fa, const double* b, double fb, double* x, int n); static float*vmatl(const float* G, const float* c, float* x, int n = 3, int m = 3); static double*vmatl(const double* G, const double* c, double* x, int n = 3, int m = 3); static float*vmatr(const float* c, const float* G, float* x, int n = 3, int m = 3); static double*vmatr(const double* c, const double* G, double* x, int n = 3, int m = 3); static float*vscale(const float* a, float scale, float* b, int n); static double*vscale(const double* a, double scale, double* b, int n); static float*vsub(const float* a, const float* b, float* x, int n); static double*vsub(const double* a, const double* b, double* x, int n); static float*vsub(const float* b, const double* c, float* a, int n); static double*vsub(const double* b, const float* c, double* a, int n); static float*vzero(float* a, int n1); static double*vzero(double* a, int n1); static void**vzero(void** a, int n1). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; float * mxmad_0_(int n, const float* a, const float* b, float* c, int i, int j, int k). double * mxmad_0_(int n, const double* a, const double* b, double* c, int i, int j, int k). float * mxmlrt_0_(int n__, const float* a, const float* b, float* c, int ni, int nj); Matrix Multiplication; CERN PROGLIB# F110 MXMLRT .VERSION KERNFOR 2.00 720707; ORIG. 01/01/64 RKB. ; see original documentation of CERNLIB package F110. double * mxmlrt_0_(int n__, const double* a, const double* b, double* c, int ni, int nj); Matrix Multiplication (double precision). float * mxtrp(const float* a, float* b, int i, int j). Matrix Transposition; CERN PROGLIB# F110 MXTRP .VERSION KERNFOR 1.0 650809; ORIG. 01/01/64 RKB. ; see original documentation of CERNLIB package F110. double * mxtrp(const double* a, double* b, int i, int j); Matrix Transposition (double precision); CERN PROGLIB# F110 MXTRP .VERSION KERNFOR 1.0 650809; ORIG. 01/01/64 RKB. ; see original docum",MatchSource.WIKI,root/html532/TCL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCL.html
https://root.cern/root/html532/TCL.html:14238,Modifiability,variab,variables,14238,"inal documentation of CERNLIB package F112. double * trasat(const double* a, const double* s, double* r, int m, int n); Transformation of Symmetric Matrix; CERN PROGLIB# F112 TRASAT .VERSION KERNFOR 4.15 861204 *; ORIG. 18/12/74 WH *; trasat.F -- translated by f2c (version 19970219). ; see original documentation of CERNLIB package F112. float * trasat(const double* a, const float* s, float* r, int m, int n); Transformation of Symmetric Matrix; CERN PROGLIB# F112 TRASAT .VERSION KERNFOR 4.15 861204 *; ORIG. 18/12/74 WH *; trasat.F -- translated by f2c (version 19970219). ; see original documentation of CERNLIB package F112. float * trata(const float* a, float* r, int m, int n); trata.F -- translated by f2c (version 19970219).; CERN PROGLIB# F112 TRATA .VERSION KERNFOR 4.15 861204 *; ORIG. 18/12/74 WH *. ; see original documentation of CERNLIB package F112. float * trats(const float* a, const float* s, float* b, int m, int n). ; see original documentation of CERNLIB package F112. Local variables. float * trchlu(const float* a, float* b, int n). ; see original documentation of CERNLIB package F112. Local variables. float * trpck(const float* s, float* u, int n); trpck.F -- translated by f2c (version 19970219).; CERN PROGLIB# F112 TRPCK .VERSION KERNFOR 2.08 741218 *; ORIG. 18/12/74 WH *. ; see original documentation of CERNLIB package F112. float * trqsq(const float* q, const float* s, float* r, int m); trqsq.F -- translated by f2c (version 19970219).; CERN PROGLIB# F112 TRQSQ .VERSION KERNFOR 4.15 861204 *; ORIG. 18/12/74 WH *. ; see original documentation of CERNLIB package F112. float * trsa(const float* s, const float* a, float* b, int m, int n); trsa.F -- translated by f2c (version 19970219).; CERN PROGLIB# F112 TRSA .VERSION KERNFOR 4.15 861204 *; ORIG. 18/12/74 WH *. ; see original documentation of CERNLIB package F112. Local variables. float * trupck(const float* u, float* s, int m); trupck.F -- translated by f2c (version 19970219).; CERN PROGLIB# F112 TRUPCK .V",MatchSource.WIKI,root/html532/TCL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCL.html
https://root.cern/root/html532/TCL.html:14358,Modifiability,variab,variables,14358,"Transformation of Symmetric Matrix; CERN PROGLIB# F112 TRASAT .VERSION KERNFOR 4.15 861204 *; ORIG. 18/12/74 WH *; trasat.F -- translated by f2c (version 19970219). ; see original documentation of CERNLIB package F112. float * trasat(const double* a, const float* s, float* r, int m, int n); Transformation of Symmetric Matrix; CERN PROGLIB# F112 TRASAT .VERSION KERNFOR 4.15 861204 *; ORIG. 18/12/74 WH *; trasat.F -- translated by f2c (version 19970219). ; see original documentation of CERNLIB package F112. float * trata(const float* a, float* r, int m, int n); trata.F -- translated by f2c (version 19970219).; CERN PROGLIB# F112 TRATA .VERSION KERNFOR 4.15 861204 *; ORIG. 18/12/74 WH *. ; see original documentation of CERNLIB package F112. float * trats(const float* a, const float* s, float* b, int m, int n). ; see original documentation of CERNLIB package F112. Local variables. float * trchlu(const float* a, float* b, int n). ; see original documentation of CERNLIB package F112. Local variables. float * trpck(const float* s, float* u, int n); trpck.F -- translated by f2c (version 19970219).; CERN PROGLIB# F112 TRPCK .VERSION KERNFOR 2.08 741218 *; ORIG. 18/12/74 WH *. ; see original documentation of CERNLIB package F112. float * trqsq(const float* q, const float* s, float* r, int m); trqsq.F -- translated by f2c (version 19970219).; CERN PROGLIB# F112 TRQSQ .VERSION KERNFOR 4.15 861204 *; ORIG. 18/12/74 WH *. ; see original documentation of CERNLIB package F112. float * trsa(const float* s, const float* a, float* b, int m, int n); trsa.F -- translated by f2c (version 19970219).; CERN PROGLIB# F112 TRSA .VERSION KERNFOR 4.15 861204 *; ORIG. 18/12/74 WH *. ; see original documentation of CERNLIB package F112. Local variables. float * trupck(const float* u, float* s, int m); trupck.F -- translated by f2c (version 19970219).; CERN PROGLIB# F112 TRUPCK .VERSION KERNFOR 2.08 741218; ORIG. 18/12/74 WH. ; see original documentation of CERNLIB package F112. double * trata(cons",MatchSource.WIKI,root/html532/TCL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCL.html
https://root.cern/root/html532/TCL.html:15101,Modifiability,variab,variables,15101,"112. float * trats(const float* a, const float* s, float* b, int m, int n). ; see original documentation of CERNLIB package F112. Local variables. float * trchlu(const float* a, float* b, int n). ; see original documentation of CERNLIB package F112. Local variables. float * trpck(const float* s, float* u, int n); trpck.F -- translated by f2c (version 19970219).; CERN PROGLIB# F112 TRPCK .VERSION KERNFOR 2.08 741218 *; ORIG. 18/12/74 WH *. ; see original documentation of CERNLIB package F112. float * trqsq(const float* q, const float* s, float* r, int m); trqsq.F -- translated by f2c (version 19970219).; CERN PROGLIB# F112 TRQSQ .VERSION KERNFOR 4.15 861204 *; ORIG. 18/12/74 WH *. ; see original documentation of CERNLIB package F112. float * trsa(const float* s, const float* a, float* b, int m, int n); trsa.F -- translated by f2c (version 19970219).; CERN PROGLIB# F112 TRSA .VERSION KERNFOR 4.15 861204 *; ORIG. 18/12/74 WH *. ; see original documentation of CERNLIB package F112. Local variables. float * trupck(const float* u, float* s, int m); trupck.F -- translated by f2c (version 19970219).; CERN PROGLIB# F112 TRUPCK .VERSION KERNFOR 2.08 741218; ORIG. 18/12/74 WH. ; see original documentation of CERNLIB package F112. double * trata(const double* a, double* r, int m, int n). ; see original documentation of CERNLIB package F112. double * trats(const double* a, const double* s, double* b, int m, int n). ; see original documentation of CERNLIB package F112. Local variables. double * trchlu(const double* a, double* b, int n); trchlu.F -- translated by f2c (version 19970219). ; see original documentation of CERNLIB package F112. Local variables. double * trchul(const double* a, double* b, int n). ; see original documentation of CERNLIB package F112. Local variables. double * trinv(const double* t, double* s, int n); trinv.F -- translated by f2c (version 19970219).; CERN PROGLIB# F112 TRINV .VERSION KERNFOR 4.15 861204 *; ORIG. 18/12/74 WH *. ; see original documentation ",MatchSource.WIKI,root/html532/TCL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCL.html
https://root.cern/root/html532/TCL.html:15588,Modifiability,variab,variables,15588,"age F112. float * trqsq(const float* q, const float* s, float* r, int m); trqsq.F -- translated by f2c (version 19970219).; CERN PROGLIB# F112 TRQSQ .VERSION KERNFOR 4.15 861204 *; ORIG. 18/12/74 WH *. ; see original documentation of CERNLIB package F112. float * trsa(const float* s, const float* a, float* b, int m, int n); trsa.F -- translated by f2c (version 19970219).; CERN PROGLIB# F112 TRSA .VERSION KERNFOR 4.15 861204 *; ORIG. 18/12/74 WH *. ; see original documentation of CERNLIB package F112. Local variables. float * trupck(const float* u, float* s, int m); trupck.F -- translated by f2c (version 19970219).; CERN PROGLIB# F112 TRUPCK .VERSION KERNFOR 2.08 741218; ORIG. 18/12/74 WH. ; see original documentation of CERNLIB package F112. double * trata(const double* a, double* r, int m, int n). ; see original documentation of CERNLIB package F112. double * trats(const double* a, const double* s, double* b, int m, int n). ; see original documentation of CERNLIB package F112. Local variables. double * trchlu(const double* a, double* b, int n); trchlu.F -- translated by f2c (version 19970219). ; see original documentation of CERNLIB package F112. Local variables. double * trchul(const double* a, double* b, int n). ; see original documentation of CERNLIB package F112. Local variables. double * trinv(const double* t, double* s, int n); trinv.F -- translated by f2c (version 19970219).; CERN PROGLIB# F112 TRINV .VERSION KERNFOR 4.15 861204 *; ORIG. 18/12/74 WH *. ; see original documentation of CERNLIB package F112. double * trlta(const double* u, const double* a, double* b, int m, int n); trlta.F -- translated by f2c (version 19970219).; CERN PROGLIB# F112 TRLTA .VERSION KERNFOR 4.15 861204; ORIG. 18/12/74 WH. ; see original documentation of CERNLIB package F112. double * trqsq(const double* q, const double* s, double* r, int m); trqsq.F -- translated by f2c (version 19970219).; CERN PROGLIB# F112 TRQSQ .VERSION KERNFOR 4.15 861204 *; ORIG. 18/12/74 WH *. ; see origina",MatchSource.WIKI,root/html532/TCL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCL.html
https://root.cern/root/html532/TCL.html:15761,Modifiability,variab,variables,15761,"1204 *; ORIG. 18/12/74 WH *. ; see original documentation of CERNLIB package F112. float * trsa(const float* s, const float* a, float* b, int m, int n); trsa.F -- translated by f2c (version 19970219).; CERN PROGLIB# F112 TRSA .VERSION KERNFOR 4.15 861204 *; ORIG. 18/12/74 WH *. ; see original documentation of CERNLIB package F112. Local variables. float * trupck(const float* u, float* s, int m); trupck.F -- translated by f2c (version 19970219).; CERN PROGLIB# F112 TRUPCK .VERSION KERNFOR 2.08 741218; ORIG. 18/12/74 WH. ; see original documentation of CERNLIB package F112. double * trata(const double* a, double* r, int m, int n). ; see original documentation of CERNLIB package F112. double * trats(const double* a, const double* s, double* b, int m, int n). ; see original documentation of CERNLIB package F112. Local variables. double * trchlu(const double* a, double* b, int n); trchlu.F -- translated by f2c (version 19970219). ; see original documentation of CERNLIB package F112. Local variables. double * trchul(const double* a, double* b, int n). ; see original documentation of CERNLIB package F112. Local variables. double * trinv(const double* t, double* s, int n); trinv.F -- translated by f2c (version 19970219).; CERN PROGLIB# F112 TRINV .VERSION KERNFOR 4.15 861204 *; ORIG. 18/12/74 WH *. ; see original documentation of CERNLIB package F112. double * trlta(const double* u, const double* a, double* b, int m, int n); trlta.F -- translated by f2c (version 19970219).; CERN PROGLIB# F112 TRLTA .VERSION KERNFOR 4.15 861204; ORIG. 18/12/74 WH. ; see original documentation of CERNLIB package F112. double * trqsq(const double* q, const double* s, double* r, int m); trqsq.F -- translated by f2c (version 19970219).; CERN PROGLIB# F112 TRQSQ .VERSION KERNFOR 4.15 861204 *; ORIG. 18/12/74 WH *. ; see original documentation of CERNLIB package F112. double * trsa(const double* s, const double* a, double* b, int m, int n); trsa.F -- translated by f2c (version 19970219).; CERN PROG",MatchSource.WIKI,root/html532/TCL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCL.html
https://root.cern/root/html532/TCL.html:15884,Modifiability,variab,variables,15884,"* a, float* b, int m, int n); trsa.F -- translated by f2c (version 19970219).; CERN PROGLIB# F112 TRSA .VERSION KERNFOR 4.15 861204 *; ORIG. 18/12/74 WH *. ; see original documentation of CERNLIB package F112. Local variables. float * trupck(const float* u, float* s, int m); trupck.F -- translated by f2c (version 19970219).; CERN PROGLIB# F112 TRUPCK .VERSION KERNFOR 2.08 741218; ORIG. 18/12/74 WH. ; see original documentation of CERNLIB package F112. double * trata(const double* a, double* r, int m, int n). ; see original documentation of CERNLIB package F112. double * trats(const double* a, const double* s, double* b, int m, int n). ; see original documentation of CERNLIB package F112. Local variables. double * trchlu(const double* a, double* b, int n); trchlu.F -- translated by f2c (version 19970219). ; see original documentation of CERNLIB package F112. Local variables. double * trchul(const double* a, double* b, int n). ; see original documentation of CERNLIB package F112. Local variables. double * trinv(const double* t, double* s, int n); trinv.F -- translated by f2c (version 19970219).; CERN PROGLIB# F112 TRINV .VERSION KERNFOR 4.15 861204 *; ORIG. 18/12/74 WH *. ; see original documentation of CERNLIB package F112. double * trlta(const double* u, const double* a, double* b, int m, int n); trlta.F -- translated by f2c (version 19970219).; CERN PROGLIB# F112 TRLTA .VERSION KERNFOR 4.15 861204; ORIG. 18/12/74 WH. ; see original documentation of CERNLIB package F112. double * trqsq(const double* q, const double* s, double* r, int m); trqsq.F -- translated by f2c (version 19970219).; CERN PROGLIB# F112 TRQSQ .VERSION KERNFOR 4.15 861204 *; ORIG. 18/12/74 WH *. ; see original documentation of CERNLIB package F112. double * trsa(const double* s, const double* a, double* b, int m, int n); trsa.F -- translated by f2c (version 19970219).; CERN PROGLIB# F112 TRSA .VERSION KERNFOR 4.15 861204 *; ORIG. 18/12/74 WH *. ; see original documentation of CERNLIB package F112. L",MatchSource.WIKI,root/html532/TCL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCL.html
https://root.cern/root/html532/TCL.html:16891,Modifiability,variab,variables,16891,"s. double * trinv(const double* t, double* s, int n); trinv.F -- translated by f2c (version 19970219).; CERN PROGLIB# F112 TRINV .VERSION KERNFOR 4.15 861204 *; ORIG. 18/12/74 WH *. ; see original documentation of CERNLIB package F112. double * trlta(const double* u, const double* a, double* b, int m, int n); trlta.F -- translated by f2c (version 19970219).; CERN PROGLIB# F112 TRLTA .VERSION KERNFOR 4.15 861204; ORIG. 18/12/74 WH. ; see original documentation of CERNLIB package F112. double * trqsq(const double* q, const double* s, double* r, int m); trqsq.F -- translated by f2c (version 19970219).; CERN PROGLIB# F112 TRQSQ .VERSION KERNFOR 4.15 861204 *; ORIG. 18/12/74 WH *. ; see original documentation of CERNLIB package F112. double * trsa(const double* s, const double* a, double* b, int m, int n); trsa.F -- translated by f2c (version 19970219).; CERN PROGLIB# F112 TRSA .VERSION KERNFOR 4.15 861204 *; ORIG. 18/12/74 WH *. ; see original documentation of CERNLIB package F112. Local variables. double * trsat(const double* s, const double* a, double* b, int m, int n); trsat.F -- translated by f2c (version 19970219); CERN PROGLIB# F112 TRSAT .VERSION KERNFOR 4.15 861204; ORIG. 18/12/74 WH. ; see original documentation of CERNLIB package F112. float * trsequ(float* smx, int m = 3, float* b = 0, int n = 1); Linear Equations, Matrix Inversion; trsequ solves the matrix equation. SMX*x = B. which represents a system of m simultaneous linear equations with n right-hand sides:; SMX is an unpacked symmetric matrix (all elements) (m x m); B is an unpacked matrix of right-hand sides (n x m). double * trsequ(double* smx, int m = 3, double* b = 0, int n = 1); Linear Equations, Matrix Inversion; trsequ solves the matrix equation. SMX*x = B. which represents a system of m simultaneous linear equations with n right-hand sides:; SMX is an unpacked symmetric matrix (all elements) (m x m); B is an unpacked matrix of right-hand sides (n x m). float * mxmad(const float* a, const float* b",MatchSource.WIKI,root/html532/TCL.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCL.html
https://root.cern/root/html532/TClass.html:3065,Availability,Error,Error,3065,"lShowMembers(void* obj, TMemberInspector& insp, Int_t isATObject = -1) const; Bool_tCanIgnoreTObjectStreamer(); Bool_tCanSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; voidCopyCollectionProxy(const TVirtualCollectionProxy&); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDeleteArray(void* ary, Bool_t dtorOnly = kFALSE); voidDestructor(void* obj, Bool_t dtorOnly = kFALSE); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDump() const; voidDump(void* obj) const; void*DynamicCast(const TClass* base, void* obj, Bool_t up = kTRUE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; char*EscapeChars(const char* text) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); TVirtualStreamerInfo*FindConversionStreamerInfo(const char* onfile_classname, UInt_t checksum) const; TVirtualStreamerInfo*FindConversionStreamerInfo(const TClass* onfile_cl, UInt_t checksum) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TVirtualStreamerInfo*FindStreamerInfo(UInt_t checksum) const; TClass*GetActualClass(const void* object) const; TClass*GetBaseClass(const char* classname); TClass*GetBaseClass(const TClass* base); Int_tGetBaseClassOffset(cons",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:3236,Availability,error,error,3236,"t char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; voidCopyCollectionProxy(const TVirtualCollectionProxy&); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDeleteArray(void* ary, Bool_t dtorOnly = kFALSE); voidDestructor(void* obj, Bool_t dtorOnly = kFALSE); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDump() const; voidDump(void* obj) const; void*DynamicCast(const TClass* base, void* obj, Bool_t up = kTRUE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; char*EscapeChars(const char* text) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); TVirtualStreamerInfo*FindConversionStreamerInfo(const char* onfile_classname, UInt_t checksum) const; TVirtualStreamerInfo*FindConversionStreamerInfo(const TClass* onfile_cl, UInt_t checksum) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TVirtualStreamerInfo*FindStreamerInfo(UInt_t checksum) const; TClass*GetActualClass(const void* object) const; TClass*GetBaseClass(const char* classname); TClass*GetBaseClass(const TClass* base); Int_tGetBaseClassOffset(const TClass* base); TClass*GetBaseDataMember(const char* datamember); UInt_tGetCheckSum(UInt_t code = 0) const; static TClass*GetClass(const char* name, Bool_t load = kTRUE, ",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:3320,Availability,error,error,3320," virtual TObject*Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; voidCopyCollectionProxy(const TVirtualCollectionProxy&); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDeleteArray(void* ary, Bool_t dtorOnly = kFALSE); voidDestructor(void* obj, Bool_t dtorOnly = kFALSE); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDump() const; voidDump(void* obj) const; void*DynamicCast(const TClass* base, void* obj, Bool_t up = kTRUE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; char*EscapeChars(const char* text) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); TVirtualStreamerInfo*FindConversionStreamerInfo(const char* onfile_classname, UInt_t checksum) const; TVirtualStreamerInfo*FindConversionStreamerInfo(const TClass* onfile_cl, UInt_t checksum) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TVirtualStreamerInfo*FindStreamerInfo(UInt_t checksum) const; TClass*GetActualClass(const void* object) const; TClass*GetBaseClass(const char* classname); TClass*GetBaseClass(const TClass* base); Int_tGetBaseClassOffset(const TClass* base); TClass*GetBaseDataMember(const char* datamember); UInt_tGetCheckSum(UInt_t code = 0) const; static TClass*GetClass(const char* name, Bool_t load = kTRUE, Bool_t silent = kFALSE); static TClass*GetClass(const type_info& typeinfo, Bool_t lo",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:19816,Availability,error,error,19816,"ect contains the full dictionary; of a class. It has list to baseclasses, datamembers and methods. void ForceReload(TClass* oldcl); we found at least one equivalent.; let's force a reload. void Init(const char* name, Version_t cversion, const type_info* info, TVirtualIsAProxy* isa, ShowMembersFunc_t showmember, const char* dfil, const char* ifil, Int_t dl, Int_t il, Bool_t silent); Initialize a TClass object. This object contains the full dictionary; of a class. It has list to baseclasses, datamembers and methods. TClass(const TClass& tc); copy constructor. TClass& operator=(const TClass& ); assignement operator. ~TClass(); TClass dtor. Deletes all list that might have been created. Int_t ReadRules(); Read the class.rules files from the default location:.; $ROOTSYS/etc/class.rules (or ROOTETCDIR/class.rules). Int_t ReadRules(const char* filename); Read a class.rules file which contains one rule per line with comment; starting with a #; Returns the number of rules loaded.; Returns -1 in case of error. Bool_t AddRule(const char* rule); Add a schema evolution customization rule.; The syntax of the rule can be either the short form:; [type=Read] classname membername [attributes=... ] [version=[...] ] [checksum=[...] ] [oldtype=...] [code={...}]; or the long form; [type=Read] sourceClass=classname [targetclass=newClassname] [ source=""type membername; [type2 membername2]"" ]; [target=""membername3;membername4""] [attributes=... ] [version=...] [checksum=...] [code={...}|functionname]. For example to set HepMC::GenVertex::m_event to _not_ owned the object it is pointing to:; HepMC::GenVertex m_event attributes=NotOwner. Semantic of the tags:; type : the type of the rule, valid values: Read, ReadRaw, Write, WriteRaw, the default is 'Read'.; sourceClass : the name of the class as it is on the rule file; targetClass : the name of the class as it is in the current code ; defaults to the value of sourceClass; source : the types and names of the data members from the class on file ",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:34869,Availability,down,down,34869,"is lost. Note that to be effective for objects streamed object-wise this function; must be called for the class deriving directly from TObject, eg, assuming; that BigTrack derives from Track and Track derives from TObject, one must do:; Track::Class()->IgnoreTObjectStreamer();; and not:; BigTrack::Class()->IgnoreTObjectStreamer();; To be effective for object streamed member-wise or split in a TTree,; this function must be called for the most derived class (i.e. BigTrack). Bool_t InheritsFrom(const char* cl) const; Return kTRUE if this class inherits from a class with name ""classname"".; note that the function returns KTRUE in case classname is the class itself. Bool_t InheritsFrom(const TClass* cl) const; Return kTRUE if this class inherits from class cl.; note that the function returns KTRUE in case cl is the class itself. void * DynamicCast(const TClass* base, void* obj, Bool_t up = kTRUE); Cast obj of this class type up to baseclass cl if up is true.; Cast obj of this class type down from baseclass cl if up is false.; If this class is not a baseclass of cl return 0, else the pointer; to the cl part of this (up) or to this (down). void * New(TClass::ENewType defConstructor = kClassNew) const; Return a pointer to a newly allocated object of this class.; The class must have a default constructor. For meaning of; defConstructor, see TClass::IsCallingNew(). The constructor actually called here can be customized by; using the rootcint pragma:; #pragma link C++ ioctortype UserClass;; For example, with this pragma and a class named MyClass,; this method will called the first of the following 3; constructors which exists and is public:; MyClass(UserClass*);; MyClass(TRootIOCtor*);; MyClass(); // Or a constructor with all its arguments defaulted. When more than one pragma ioctortype is used, the first seen as priority; For example with:; #pragma link C++ ioctortype UserClass1;; #pragma link C++ ioctortype UserClass2;; We look in the following order:; MyClass(UserClass1*);; ",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:35016,Availability,down,down,35016,"called for the class deriving directly from TObject, eg, assuming; that BigTrack derives from Track and Track derives from TObject, one must do:; Track::Class()->IgnoreTObjectStreamer();; and not:; BigTrack::Class()->IgnoreTObjectStreamer();; To be effective for object streamed member-wise or split in a TTree,; this function must be called for the most derived class (i.e. BigTrack). Bool_t InheritsFrom(const char* cl) const; Return kTRUE if this class inherits from a class with name ""classname"".; note that the function returns KTRUE in case classname is the class itself. Bool_t InheritsFrom(const TClass* cl) const; Return kTRUE if this class inherits from class cl.; note that the function returns KTRUE in case cl is the class itself. void * DynamicCast(const TClass* base, void* obj, Bool_t up = kTRUE); Cast obj of this class type up to baseclass cl if up is true.; Cast obj of this class type down from baseclass cl if up is false.; If this class is not a baseclass of cl return 0, else the pointer; to the cl part of this (up) or to this (down). void * New(TClass::ENewType defConstructor = kClassNew) const; Return a pointer to a newly allocated object of this class.; The class must have a default constructor. For meaning of; defConstructor, see TClass::IsCallingNew(). The constructor actually called here can be customized by; using the rootcint pragma:; #pragma link C++ ioctortype UserClass;; For example, with this pragma and a class named MyClass,; this method will called the first of the following 3; constructors which exists and is public:; MyClass(UserClass*);; MyClass(TRootIOCtor*);; MyClass(); // Or a constructor with all its arguments defaulted. When more than one pragma ioctortype is used, the first seen as priority; For example with:; #pragma link C++ ioctortype UserClass1;; #pragma link C++ ioctortype UserClass2;; We look in the following order:; MyClass(UserClass1*);; MyClass(UserClass2*);; MyClass(TRootIOCtor*);; MyClass(); // Or a constructor with all its a",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:20986,Deployability,update,updated,20986,"or the long form; [type=Read] sourceClass=classname [targetclass=newClassname] [ source=""type membername; [type2 membername2]"" ]; [target=""membername3;membername4""] [attributes=... ] [version=...] [checksum=...] [code={...}|functionname]. For example to set HepMC::GenVertex::m_event to _not_ owned the object it is pointing to:; HepMC::GenVertex m_event attributes=NotOwner. Semantic of the tags:; type : the type of the rule, valid values: Read, ReadRaw, Write, WriteRaw, the default is 'Read'.; sourceClass : the name of the class as it is on the rule file; targetClass : the name of the class as it is in the current code ; defaults to the value of sourceClass; source : the types and names of the data members from the class on file that are needed, the list is separated by semi-colons ';'; oldtype: in the short form only, indicates the type on disk of the data member.; target : the names of the data members updated by this rule, the list is separated by semi-colons ';'; attributes : list of possible qualifiers amongs:; Owner, NotOwner; version : list of the version of the class layout that this rule applies to. The syntax can be [1,4,5] or [2-] or [1-3] or [-3]; checksum : comma delimited list of the checksums of the class layout that this rule applies to.; code={...} : code to be executed for the rule or name of the function implementing it. void AdoptSchemaRules(ROOT::TSchemaRuleSet* rules); Adopt a new set of Data Model Evolution rules. const ROOT::TSchemaRuleSet* GetSchemaRules() const; Return the set of the schema rules if any. ROOT::TSchemaRuleSet* GetSchemaRules(Bool_t create = kFALSE); Return the set of the schema rules if any.; If create is true, create an empty set. void AddImplFile(const char* filename, int line). void AddRef(TClassRef* ref); Register a TClassRef object which points to this TClass object.; When this TClass object is deleted, 'ref' will be 'Reset'. Int_t AutoBrowse(TObject* obj, TBrowser* browser); Browse external object inherited from TObject",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:39837,Deployability,install,installs,39837,"one after the CINT dictionary has; been fully populated and can not be delayed efficiently. Long_t Property() const; Set TObject::fBits and fStreamerType to cache information about the; class. The bits are; kIsTObject : the class inherits from TObject; kStartWithTObject: TObject is the left-most class in the inheritance tree; kIsForeign : the class doe not have a Streamer method; The value of fStreamerType are; kTObject : the class inherits from TObject; kForeign : the class does not have a Streamer method; kInstrumented: the class does have a Streamer method; kExternal: the class has a free standing way of streaming itself; kEmulated: the class is missing its shared library. void SetCollectionProxy(const ROOT::TCollectionProxyInfo& ); Create the collection proxy object (and the streamer object) from; using the information in the TCollectionProxyInfo. void SetContextMenuTitle(const char* title); Change (i.e. set) the title of the TNamed. void SetGlobalIsA(IsAGlobalFunc_t ); This function installs a global IsA function for this class.; The global IsA function will be used if there is no local IsA function (fIsA). A global IsA function has the signature:. TClass *func( TClass *cl, const void *obj);. 'cl' is a pointer to the TClass object that corresponds to the; 'pointer type' used to retrieve the value 'obj'. For example with:; TNamed * m = new TNamed(""example"",""test"");; TObject* o = m; and; the global IsA function would be called with TObject::Class() as; the first parameter and the exact numerical value in the pointer; 'o'. In other word, inside the global IsA function. it is safe to C-style; cast the value of 'obj' into a pointer to the class described by 'cl'. void SetUnloaded(); Call this method to indicate that the shared library containing this; class's code has been removed (unloaded) from the process's memory. TVirtualStreamerInfo * SetStreamerInfo(Int_t version, const char* info = """"); Info is a string describing the names and types of attributes; written b",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:42561,Deployability,Install,Install,42561,"rom Victor Perevovchikov (perev@bnl.gov). if code==1 data members of type enum are not counted in the checksum; if code==2 return the checksum of data members and base classes, not including the ranges and array size found in comments.; This is needed for backward compatibility. WARNING: this function must be kept in sync with TClass::GetCheckSum.; They are both used to handle backward compatibility and should both return the same values.; TStreamerInfo uses the information in TStreamerElement while TClass uses the information; from TClass::GetListOfBases and TClass::GetListOfDataMembers. void AdoptReferenceProxy(TVirtualRefProxy* proxy); Adopt the Reference proxy pointer to indicate that this class; represents a reference.; When a new proxy is adopted, the old one is deleted. void AdoptMemberStreamer(const char* name, TMemberStreamer* strm); Adopt the TMemberStreamer pointer to by p and use it to Stream non basic; member name. void SetMemberStreamer(const char* name, MemberStreamerFunc_t strm); Install a new member streamer (p will be copied). Int_t ReadBuffer(TBuffer& b, void* pointer, Int_t version, UInt_t start, UInt_t count); Function called by the Streamer functions to deserialize information; from buffer b into object at p.; This function assumes that the class version and the byte count information; have been read.; version is the version number of the class; start is the starting position in the buffer b; count is the number of bytes for this object in the buffer. Int_t ReadBuffer(TBuffer& b, void* pointer); Function called by the Streamer functions to deserialize information; from buffer b into object at p. Int_t WriteBuffer(TBuffer& b, void* pointer, const char* info = """"); Function called by the Streamer functions to serialize object at p; to buffer b. The optional argument info may be specified to give an; alternative StreamerInfo instead of using the default StreamerInfo; automatically built from the class definition.; For more information, see class TV",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:44959,Deployability,Install,Install,44959,"t. void StreamerTObjectEmulated(void* object, TBuffer& b, const TClass* onfile_class) const; Case of TObjects when we do not have the library defining the class. void StreamerInstrumented(void* object, TBuffer& b, const TClass* onfile_class) const; Case of instrumented class with a library. void StreamerStreamerInfo(void* object, TBuffer& b, const TClass* onfile_class) const; Case of where we should directly use the StreamerInfo.; case kForeign:; case kForeign|kEmulated:; case kInstrumented|kEmulated:; case kEmulated:. void StreamerDefault(void* object, TBuffer& b, const TClass* onfile_class) const; Default streaming in cases where either we have no way to know what to do; or if Property() has not yet been called. void AdoptStreamer(TClassStreamer* strm); Adopt a TClassStreamer object. Ownership is transfered to this TClass; object. void SetStreamerFunc(ClassStreamerFunc_t strm); Set a wrapper/accessor function around this class custom streamer. void SetMerge(ROOT::MergeFunc_t mergeFunc); Install a new wrapper around 'Merge'. void SetResetAfterMerge(ROOT::ResetAfterMergeFunc_t resetFunc); Install a new wrapper around 'ResetAfterMerge'. void SetNew(ROOT::NewFunc_t newFunc); Install a new wrapper around 'new'. void SetNewArray(ROOT::NewArrFunc_t newArrayFunc); Install a new wrapper around 'new []'. void SetDelete(ROOT::DelFunc_t deleteFunc); Install a new wrapper around 'delete'. void SetDeleteArray(ROOT::DelArrFunc_t deleteArrayFunc); Install a new wrapper around 'delete []'. void SetDestructor(ROOT::DesFunc_t destructorFunc); Install a new wrapper around the destructor. void SetDirectoryAutoAdd(ROOT::DirAutoAdd_t dirAutoAddFunc); Install a new wrapper around the directory auto add function..; The function autoAddFunc has the signature void (*)(void *obj, TDirectory dir); and should register 'obj' to the directory if dir is not null; and unregister 'obj' from its current directory if dir is null. TVirtualStreamerInfo * FindStreamerInfo(UInt_t checksum) const; Find th",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:45061,Deployability,Install,Install,45061," of TObjects when we do not have the library defining the class. void StreamerInstrumented(void* object, TBuffer& b, const TClass* onfile_class) const; Case of instrumented class with a library. void StreamerStreamerInfo(void* object, TBuffer& b, const TClass* onfile_class) const; Case of where we should directly use the StreamerInfo.; case kForeign:; case kForeign|kEmulated:; case kInstrumented|kEmulated:; case kEmulated:. void StreamerDefault(void* object, TBuffer& b, const TClass* onfile_class) const; Default streaming in cases where either we have no way to know what to do; or if Property() has not yet been called. void AdoptStreamer(TClassStreamer* strm); Adopt a TClassStreamer object. Ownership is transfered to this TClass; object. void SetStreamerFunc(ClassStreamerFunc_t strm); Set a wrapper/accessor function around this class custom streamer. void SetMerge(ROOT::MergeFunc_t mergeFunc); Install a new wrapper around 'Merge'. void SetResetAfterMerge(ROOT::ResetAfterMergeFunc_t resetFunc); Install a new wrapper around 'ResetAfterMerge'. void SetNew(ROOT::NewFunc_t newFunc); Install a new wrapper around 'new'. void SetNewArray(ROOT::NewArrFunc_t newArrayFunc); Install a new wrapper around 'new []'. void SetDelete(ROOT::DelFunc_t deleteFunc); Install a new wrapper around 'delete'. void SetDeleteArray(ROOT::DelArrFunc_t deleteArrayFunc); Install a new wrapper around 'delete []'. void SetDestructor(ROOT::DesFunc_t destructorFunc); Install a new wrapper around the destructor. void SetDirectoryAutoAdd(ROOT::DirAutoAdd_t dirAutoAddFunc); Install a new wrapper around the directory auto add function..; The function autoAddFunc has the signature void (*)(void *obj, TDirectory dir); and should register 'obj' to the directory if dir is not null; and unregister 'obj' from its current directory if dir is null. TVirtualStreamerInfo * FindStreamerInfo(UInt_t checksum) const; Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. TVirtualStreamerInfo * Fin",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:45147,Deployability,Install,Install,45147,"id* object, TBuffer& b, const TClass* onfile_class) const; Case of instrumented class with a library. void StreamerStreamerInfo(void* object, TBuffer& b, const TClass* onfile_class) const; Case of where we should directly use the StreamerInfo.; case kForeign:; case kForeign|kEmulated:; case kInstrumented|kEmulated:; case kEmulated:. void StreamerDefault(void* object, TBuffer& b, const TClass* onfile_class) const; Default streaming in cases where either we have no way to know what to do; or if Property() has not yet been called. void AdoptStreamer(TClassStreamer* strm); Adopt a TClassStreamer object. Ownership is transfered to this TClass; object. void SetStreamerFunc(ClassStreamerFunc_t strm); Set a wrapper/accessor function around this class custom streamer. void SetMerge(ROOT::MergeFunc_t mergeFunc); Install a new wrapper around 'Merge'. void SetResetAfterMerge(ROOT::ResetAfterMergeFunc_t resetFunc); Install a new wrapper around 'ResetAfterMerge'. void SetNew(ROOT::NewFunc_t newFunc); Install a new wrapper around 'new'. void SetNewArray(ROOT::NewArrFunc_t newArrayFunc); Install a new wrapper around 'new []'. void SetDelete(ROOT::DelFunc_t deleteFunc); Install a new wrapper around 'delete'. void SetDeleteArray(ROOT::DelArrFunc_t deleteArrayFunc); Install a new wrapper around 'delete []'. void SetDestructor(ROOT::DesFunc_t destructorFunc); Install a new wrapper around the destructor. void SetDirectoryAutoAdd(ROOT::DirAutoAdd_t dirAutoAddFunc); Install a new wrapper around the directory auto add function..; The function autoAddFunc has the signature void (*)(void *obj, TDirectory dir); and should register 'obj' to the directory if dir is not null; and unregister 'obj' from its current directory if dir is null. TVirtualStreamerInfo * FindStreamerInfo(UInt_t checksum) const; Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. TVirtualStreamerInfo * FindStreamerInfo(TObjArray* arr, UInt_t checksum) const; Find the TVirtualStreamerInfo in the St",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:45234,Deployability,Install,Install,45234,"ass with a library. void StreamerStreamerInfo(void* object, TBuffer& b, const TClass* onfile_class) const; Case of where we should directly use the StreamerInfo.; case kForeign:; case kForeign|kEmulated:; case kInstrumented|kEmulated:; case kEmulated:. void StreamerDefault(void* object, TBuffer& b, const TClass* onfile_class) const; Default streaming in cases where either we have no way to know what to do; or if Property() has not yet been called. void AdoptStreamer(TClassStreamer* strm); Adopt a TClassStreamer object. Ownership is transfered to this TClass; object. void SetStreamerFunc(ClassStreamerFunc_t strm); Set a wrapper/accessor function around this class custom streamer. void SetMerge(ROOT::MergeFunc_t mergeFunc); Install a new wrapper around 'Merge'. void SetResetAfterMerge(ROOT::ResetAfterMergeFunc_t resetFunc); Install a new wrapper around 'ResetAfterMerge'. void SetNew(ROOT::NewFunc_t newFunc); Install a new wrapper around 'new'. void SetNewArray(ROOT::NewArrFunc_t newArrayFunc); Install a new wrapper around 'new []'. void SetDelete(ROOT::DelFunc_t deleteFunc); Install a new wrapper around 'delete'. void SetDeleteArray(ROOT::DelArrFunc_t deleteArrayFunc); Install a new wrapper around 'delete []'. void SetDestructor(ROOT::DesFunc_t destructorFunc); Install a new wrapper around the destructor. void SetDirectoryAutoAdd(ROOT::DirAutoAdd_t dirAutoAddFunc); Install a new wrapper around the directory auto add function..; The function autoAddFunc has the signature void (*)(void *obj, TDirectory dir); and should register 'obj' to the directory if dir is not null; and unregister 'obj' from its current directory if dir is null. TVirtualStreamerInfo * FindStreamerInfo(UInt_t checksum) const; Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. TVirtualStreamerInfo * FindStreamerInfo(TObjArray* arr, UInt_t checksum) const; Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. TVirtualStreamerInfo * GetConversionStreame",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:45317,Deployability,Install,Install,45317,"onfile_class) const; Case of where we should directly use the StreamerInfo.; case kForeign:; case kForeign|kEmulated:; case kInstrumented|kEmulated:; case kEmulated:. void StreamerDefault(void* object, TBuffer& b, const TClass* onfile_class) const; Default streaming in cases where either we have no way to know what to do; or if Property() has not yet been called. void AdoptStreamer(TClassStreamer* strm); Adopt a TClassStreamer object. Ownership is transfered to this TClass; object. void SetStreamerFunc(ClassStreamerFunc_t strm); Set a wrapper/accessor function around this class custom streamer. void SetMerge(ROOT::MergeFunc_t mergeFunc); Install a new wrapper around 'Merge'. void SetResetAfterMerge(ROOT::ResetAfterMergeFunc_t resetFunc); Install a new wrapper around 'ResetAfterMerge'. void SetNew(ROOT::NewFunc_t newFunc); Install a new wrapper around 'new'. void SetNewArray(ROOT::NewArrFunc_t newArrayFunc); Install a new wrapper around 'new []'. void SetDelete(ROOT::DelFunc_t deleteFunc); Install a new wrapper around 'delete'. void SetDeleteArray(ROOT::DelArrFunc_t deleteArrayFunc); Install a new wrapper around 'delete []'. void SetDestructor(ROOT::DesFunc_t destructorFunc); Install a new wrapper around the destructor. void SetDirectoryAutoAdd(ROOT::DirAutoAdd_t dirAutoAddFunc); Install a new wrapper around the directory auto add function..; The function autoAddFunc has the signature void (*)(void *obj, TDirectory dir); and should register 'obj' to the directory if dir is not null; and unregister 'obj' from its current directory if dir is null. TVirtualStreamerInfo * FindStreamerInfo(UInt_t checksum) const; Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. TVirtualStreamerInfo * FindStreamerInfo(TObjArray* arr, UInt_t checksum) const; Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. TVirtualStreamerInfo * GetConversionStreamerInfo(const char* onfile_classname, Int_t version) const; Return a Conversion StreamerI",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:45413,Deployability,Install,Install,45413,"; case kForeign|kEmulated:; case kInstrumented|kEmulated:; case kEmulated:. void StreamerDefault(void* object, TBuffer& b, const TClass* onfile_class) const; Default streaming in cases where either we have no way to know what to do; or if Property() has not yet been called. void AdoptStreamer(TClassStreamer* strm); Adopt a TClassStreamer object. Ownership is transfered to this TClass; object. void SetStreamerFunc(ClassStreamerFunc_t strm); Set a wrapper/accessor function around this class custom streamer. void SetMerge(ROOT::MergeFunc_t mergeFunc); Install a new wrapper around 'Merge'. void SetResetAfterMerge(ROOT::ResetAfterMergeFunc_t resetFunc); Install a new wrapper around 'ResetAfterMerge'. void SetNew(ROOT::NewFunc_t newFunc); Install a new wrapper around 'new'. void SetNewArray(ROOT::NewArrFunc_t newArrayFunc); Install a new wrapper around 'new []'. void SetDelete(ROOT::DelFunc_t deleteFunc); Install a new wrapper around 'delete'. void SetDeleteArray(ROOT::DelArrFunc_t deleteArrayFunc); Install a new wrapper around 'delete []'. void SetDestructor(ROOT::DesFunc_t destructorFunc); Install a new wrapper around the destructor. void SetDirectoryAutoAdd(ROOT::DirAutoAdd_t dirAutoAddFunc); Install a new wrapper around the directory auto add function..; The function autoAddFunc has the signature void (*)(void *obj, TDirectory dir); and should register 'obj' to the directory if dir is not null; and unregister 'obj' from its current directory if dir is null. TVirtualStreamerInfo * FindStreamerInfo(UInt_t checksum) const; Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. TVirtualStreamerInfo * FindStreamerInfo(TObjArray* arr, UInt_t checksum) const; Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. TVirtualStreamerInfo * GetConversionStreamerInfo(const char* onfile_classname, Int_t version) const; Return a Conversion StreamerInfo from the class 'classname' for version number 'version' to this class, if any. TVirtual",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:45507,Deployability,Install,Install,45507,"oid* object, TBuffer& b, const TClass* onfile_class) const; Default streaming in cases where either we have no way to know what to do; or if Property() has not yet been called. void AdoptStreamer(TClassStreamer* strm); Adopt a TClassStreamer object. Ownership is transfered to this TClass; object. void SetStreamerFunc(ClassStreamerFunc_t strm); Set a wrapper/accessor function around this class custom streamer. void SetMerge(ROOT::MergeFunc_t mergeFunc); Install a new wrapper around 'Merge'. void SetResetAfterMerge(ROOT::ResetAfterMergeFunc_t resetFunc); Install a new wrapper around 'ResetAfterMerge'. void SetNew(ROOT::NewFunc_t newFunc); Install a new wrapper around 'new'. void SetNewArray(ROOT::NewArrFunc_t newArrayFunc); Install a new wrapper around 'new []'. void SetDelete(ROOT::DelFunc_t deleteFunc); Install a new wrapper around 'delete'. void SetDeleteArray(ROOT::DelArrFunc_t deleteArrayFunc); Install a new wrapper around 'delete []'. void SetDestructor(ROOT::DesFunc_t destructorFunc); Install a new wrapper around the destructor. void SetDirectoryAutoAdd(ROOT::DirAutoAdd_t dirAutoAddFunc); Install a new wrapper around the directory auto add function..; The function autoAddFunc has the signature void (*)(void *obj, TDirectory dir); and should register 'obj' to the directory if dir is not null; and unregister 'obj' from its current directory if dir is null. TVirtualStreamerInfo * FindStreamerInfo(UInt_t checksum) const; Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. TVirtualStreamerInfo * FindStreamerInfo(TObjArray* arr, UInt_t checksum) const; Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. TVirtualStreamerInfo * GetConversionStreamerInfo(const char* onfile_classname, Int_t version) const; Return a Conversion StreamerInfo from the class 'classname' for version number 'version' to this class, if any. TVirtualStreamerInfo * GetConversionStreamerInfo(const TClass* onfile_cl, Int_t version) const; Return a C",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:45613,Deployability,Install,Install,45613," way to know what to do; or if Property() has not yet been called. void AdoptStreamer(TClassStreamer* strm); Adopt a TClassStreamer object. Ownership is transfered to this TClass; object. void SetStreamerFunc(ClassStreamerFunc_t strm); Set a wrapper/accessor function around this class custom streamer. void SetMerge(ROOT::MergeFunc_t mergeFunc); Install a new wrapper around 'Merge'. void SetResetAfterMerge(ROOT::ResetAfterMergeFunc_t resetFunc); Install a new wrapper around 'ResetAfterMerge'. void SetNew(ROOT::NewFunc_t newFunc); Install a new wrapper around 'new'. void SetNewArray(ROOT::NewArrFunc_t newArrayFunc); Install a new wrapper around 'new []'. void SetDelete(ROOT::DelFunc_t deleteFunc); Install a new wrapper around 'delete'. void SetDeleteArray(ROOT::DelArrFunc_t deleteArrayFunc); Install a new wrapper around 'delete []'. void SetDestructor(ROOT::DesFunc_t destructorFunc); Install a new wrapper around the destructor. void SetDirectoryAutoAdd(ROOT::DirAutoAdd_t dirAutoAddFunc); Install a new wrapper around the directory auto add function..; The function autoAddFunc has the signature void (*)(void *obj, TDirectory dir); and should register 'obj' to the directory if dir is not null; and unregister 'obj' from its current directory if dir is null. TVirtualStreamerInfo * FindStreamerInfo(UInt_t checksum) const; Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. TVirtualStreamerInfo * FindStreamerInfo(TObjArray* arr, UInt_t checksum) const; Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. TVirtualStreamerInfo * GetConversionStreamerInfo(const char* onfile_classname, Int_t version) const; Return a Conversion StreamerInfo from the class 'classname' for version number 'version' to this class, if any. TVirtualStreamerInfo * GetConversionStreamerInfo(const TClass* onfile_cl, Int_t version) const; Return a Conversion StreamerInfo from the class represened by cl for version number 'version' to this class, if any. TVi",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:35114,Energy Efficiency,allocate,allocated,35114,"rom TObject, one must do:; Track::Class()->IgnoreTObjectStreamer();; and not:; BigTrack::Class()->IgnoreTObjectStreamer();; To be effective for object streamed member-wise or split in a TTree,; this function must be called for the most derived class (i.e. BigTrack). Bool_t InheritsFrom(const char* cl) const; Return kTRUE if this class inherits from a class with name ""classname"".; note that the function returns KTRUE in case classname is the class itself. Bool_t InheritsFrom(const TClass* cl) const; Return kTRUE if this class inherits from class cl.; note that the function returns KTRUE in case cl is the class itself. void * DynamicCast(const TClass* base, void* obj, Bool_t up = kTRUE); Cast obj of this class type up to baseclass cl if up is true.; Cast obj of this class type down from baseclass cl if up is false.; If this class is not a baseclass of cl return 0, else the pointer; to the cl part of this (up) or to this (down). void * New(TClass::ENewType defConstructor = kClassNew) const; Return a pointer to a newly allocated object of this class.; The class must have a default constructor. For meaning of; defConstructor, see TClass::IsCallingNew(). The constructor actually called here can be customized by; using the rootcint pragma:; #pragma link C++ ioctortype UserClass;; For example, with this pragma and a class named MyClass,; this method will called the first of the following 3; constructors which exists and is public:; MyClass(UserClass*);; MyClass(TRootIOCtor*);; MyClass(); // Or a constructor with all its arguments defaulted. When more than one pragma ioctortype is used, the first seen as priority; For example with:; #pragma link C++ ioctortype UserClass1;; #pragma link C++ ioctortype UserClass2;; We look in the following order:; MyClass(UserClass1*);; MyClass(UserClass2*);; MyClass(TRootIOCtor*);; MyClass(); // Or a constructor with all its arguments defaulted. void * New(void* arena, TClass::ENewType defConstructor = kClassNew) const; Return a pointer to a n",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:36089,Energy Efficiency,allocate,allocated,36089,"efConstructor = kClassNew) const; Return a pointer to a newly allocated object of this class.; The class must have a default constructor. For meaning of; defConstructor, see TClass::IsCallingNew(). The constructor actually called here can be customized by; using the rootcint pragma:; #pragma link C++ ioctortype UserClass;; For example, with this pragma and a class named MyClass,; this method will called the first of the following 3; constructors which exists and is public:; MyClass(UserClass*);; MyClass(TRootIOCtor*);; MyClass(); // Or a constructor with all its arguments defaulted. When more than one pragma ioctortype is used, the first seen as priority; For example with:; #pragma link C++ ioctortype UserClass1;; #pragma link C++ ioctortype UserClass2;; We look in the following order:; MyClass(UserClass1*);; MyClass(UserClass2*);; MyClass(TRootIOCtor*);; MyClass(); // Or a constructor with all its arguments defaulted. void * New(void* arena, TClass::ENewType defConstructor = kClassNew) const; Return a pointer to a newly allocated object of this class.; The class must have a default constructor. For meaning of; defConstructor, see TClass::IsCallingNew(). void * NewArray(Long_t nElements, TClass::ENewType defConstructor = kClassNew) const; Return a pointer to a newly allocated array of objects; of this class.; The class must have a default constructor. For meaning of; defConstructor, see TClass::IsCallingNew(). void * NewArray(Long_t nElements, void* arena, TClass::ENewType defConstructor = kClassNew) const; Return a pointer to a newly allocated object of this class.; The class must have a default constructor. For meaning of; defConstructor, see TClass::IsCallingNew(). void Destructor(void* obj, Bool_t dtorOnly = kFALSE); Explicitly call destructor for object. void DeleteArray(void* ary, Bool_t dtorOnly = kFALSE); Explicitly call operator delete[] for an array. void SetCanSplit(Int_t splitmode); Set the splitability of this class:; -1: Use the default calculation; 0:",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:36339,Energy Efficiency,allocate,allocated,36339,"ed by; using the rootcint pragma:; #pragma link C++ ioctortype UserClass;; For example, with this pragma and a class named MyClass,; this method will called the first of the following 3; constructors which exists and is public:; MyClass(UserClass*);; MyClass(TRootIOCtor*);; MyClass(); // Or a constructor with all its arguments defaulted. When more than one pragma ioctortype is used, the first seen as priority; For example with:; #pragma link C++ ioctortype UserClass1;; #pragma link C++ ioctortype UserClass2;; We look in the following order:; MyClass(UserClass1*);; MyClass(UserClass2*);; MyClass(TRootIOCtor*);; MyClass(); // Or a constructor with all its arguments defaulted. void * New(void* arena, TClass::ENewType defConstructor = kClassNew) const; Return a pointer to a newly allocated object of this class.; The class must have a default constructor. For meaning of; defConstructor, see TClass::IsCallingNew(). void * NewArray(Long_t nElements, TClass::ENewType defConstructor = kClassNew) const; Return a pointer to a newly allocated array of objects; of this class.; The class must have a default constructor. For meaning of; defConstructor, see TClass::IsCallingNew(). void * NewArray(Long_t nElements, void* arena, TClass::ENewType defConstructor = kClassNew) const; Return a pointer to a newly allocated object of this class.; The class must have a default constructor. For meaning of; defConstructor, see TClass::IsCallingNew(). void Destructor(void* obj, Bool_t dtorOnly = kFALSE); Explicitly call destructor for object. void DeleteArray(void* ary, Bool_t dtorOnly = kFALSE); Explicitly call operator delete[] for an array. void SetCanSplit(Int_t splitmode); Set the splitability of this class:; -1: Use the default calculation; 0: Disallow splitting; 1: Always allow splitting. void SetClassVersion(Version_t version); Private function. Set the class version for the 'class' represented by; this TClass object. See the public interface:; ROOT::ResetClassVersion; defined in TClassT",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:36613,Energy Efficiency,allocate,allocated,36613,"otIOCtor*);; MyClass(); // Or a constructor with all its arguments defaulted. When more than one pragma ioctortype is used, the first seen as priority; For example with:; #pragma link C++ ioctortype UserClass1;; #pragma link C++ ioctortype UserClass2;; We look in the following order:; MyClass(UserClass1*);; MyClass(UserClass2*);; MyClass(TRootIOCtor*);; MyClass(); // Or a constructor with all its arguments defaulted. void * New(void* arena, TClass::ENewType defConstructor = kClassNew) const; Return a pointer to a newly allocated object of this class.; The class must have a default constructor. For meaning of; defConstructor, see TClass::IsCallingNew(). void * NewArray(Long_t nElements, TClass::ENewType defConstructor = kClassNew) const; Return a pointer to a newly allocated array of objects; of this class.; The class must have a default constructor. For meaning of; defConstructor, see TClass::IsCallingNew(). void * NewArray(Long_t nElements, void* arena, TClass::ENewType defConstructor = kClassNew) const; Return a pointer to a newly allocated object of this class.; The class must have a default constructor. For meaning of; defConstructor, see TClass::IsCallingNew(). void Destructor(void* obj, Bool_t dtorOnly = kFALSE); Explicitly call destructor for object. void DeleteArray(void* ary, Bool_t dtorOnly = kFALSE); Explicitly call operator delete[] for an array. void SetCanSplit(Int_t splitmode); Set the splitability of this class:; -1: Use the default calculation; 0: Disallow splitting; 1: Always allow splitting. void SetClassVersion(Version_t version); Private function. Set the class version for the 'class' represented by; this TClass object. See the public interface:; ROOT::ResetClassVersion; defined in TClassTable.cxx. Note on class version numbers:; If no class number has been specified, TClass::GetVersion will return -1; The Class Version 0 request the whole object to be transient; The Class Version 1, unless specified via ClassDef indicates that the; I/O should us",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:38913,Energy Efficiency,efficient,efficiently,38913,"fer and return class object. void Store(TBuffer& b) const; Store class description on I/O buffer. Bool_t IsLoaded() const; Return true if the shared library of this class is currently in the a; process's memory. Return false, after the shared library has been; unloaded or if this is an 'emulated' class created from a file's StreamerInfo. Bool_t IsStartingWithTObject() const; Returns true if this class inherits from TObject and if the start of; the TObject parts is at the very beginning of the objects.; Concretly this means that the following code is proper for this class:; ThisClass *ptr;; void *void_ptr = (void)ptr;; TObject *obj = (TObject*)void_ptr;; This code would be wrong if 'ThisClass' did not inherit 'first' from; TObject. Bool_t IsTObject() const; Return kTRUE is the class inherits from TObject. Bool_t IsForeign() const; Return kTRUE is the class is Foreign (the class does not have a Streamer method). void PostLoadCheck(); Do the initialization that can only be done after the CINT dictionary has; been fully populated and can not be delayed efficiently. Long_t Property() const; Set TObject::fBits and fStreamerType to cache information about the; class. The bits are; kIsTObject : the class inherits from TObject; kStartWithTObject: TObject is the left-most class in the inheritance tree; kIsForeign : the class doe not have a Streamer method; The value of fStreamerType are; kTObject : the class inherits from TObject; kForeign : the class does not have a Streamer method; kInstrumented: the class does have a Streamer method; kExternal: the class has a free standing way of streaming itself; kEmulated: the class is missing its shared library. void SetCollectionProxy(const ROOT::TCollectionProxyInfo& ); Create the collection proxy object (and the streamer object) from; using the information in the TCollectionProxyInfo. void SetContextMenuTitle(const char* title); Change (i.e. set) the title of the TNamed. void SetGlobalIsA(IsAGlobalFunc_t ); This function installs a ",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:14806,Integrability,interface,interface,14806,"ew; };; enum { kLoading; kDefault; kEmulated; kTObject; kInstrumented; kForeign; kExternal; };; enum TDictionary::ESTLType { kNone; kVector; kList; kDeque; kMap; kMultimap; kSet; kMultiset; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TList*fAllPubDataall public data members (including from base classes); TList*fAllPubMethodall public methods (including from base classes); TList*fBaselinked list for base classes; Int_tfCanSplit!Indicates whether this class can be split or not.; UInt_tfCheckSumchecksum of data members and base classes; ClassInfo_t*fClassInfopointer to CINT class info class; TList*fClassMenuListlist of class menu items; Version_tfClassVersionClass version Identifier; TVirtualCollectionProxy*fCollectionProxyCollection interface; TStringfContextMenuTitlecontext menu title; map<std::string,TObjArray*>*fConversionStreamerInfoArray of the streamer infos derived from another class.; TVirtualStreamerInfo*fCurrentInfo!cached current streamer info.; TList*fDatalinked list for data members; Short_tfDeclFileLineline of class declaration; const char*fDeclFileNamename of class declaration file; void*fDeletepointer to a function deleting one object.; void*fDeleteArraypointer to a function deleting an array of objects.; void*fDestructorpointer to a function call an object's destructor.; void*fDirAutoAddpointer which implements the Directory Auto Add feature for this class.']'; IsAGlobalFunc_tfGlobalIsApointer to a global IsA function.; Short_tfImplFileLineline of class implementation; const char*fImplFileNamename of class implementation file; UInt_tfInstanceCountnumber of instances of this class; void*fInterShowMembersInterpreter call setup for ShowMembers; TVirtu",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:18143,Integrability,interface,interface,18143,"VirtualStreamerInfo; Int_tfStreamerType!cached of the streaming method to use; const type_info*fTypeInfopointer to the C++ type information.; Bool_tfVersionUsed!Indicates whether GetClassVersion has been called; static TClass::ENewTypefgCallingNewIntent of why/how TClass::New() is called; static Int_tfgClassCountprovides unique id for a each class; static THashTable*fgClassShortTypedefHash; static THashTable*fgClassTypedefHash. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IdMap_t * GetIdMap(). void AddClass(TClass* cl); static: Add a class to the list and map of classes. void RemoveClass(TClass* cl); static: Remove a class from the list and map of classes. TClass(); Default ctor. TClass(const char* name, Bool_t silent = kFALSE); Create a TClass object. This object contains the full dictionary; of a class. It has list to baseclasses, datamembers and methods.; Use this ctor to create a standalone TClass object. Most useful; to get a TClass interface to an interpreted class. Used by TTabCom.; Normally you would use TClass::GetClass(""class"") to get access to a; TClass object for a certain class. TClass(const char* name, Version_t cversion, const char* dfil = 0, const char* ifil = 0, Int_t dl = 0, Int_t il = 0, Bool_t silent = kFALSE); Create a TClass object. This object contains the full dictionary; of a class. It has list to baseclasses, datamembers and methods. TClass(const char* name, Version_t cversion, const type_info& info, TVirtualIsAProxy* isa, ShowMembersFunc_t showmember, const char* dfil, const char* ifil, Int_t dl, Int_t il, Bool_t silent = kFALSE); Create a TClass object. This object contains the full dictionary; of a class. It has list to baseclasses, datamembers and methods. void ForceReload(TClass* oldcl); we found at least one equivalent.; let's force a reload. void Init(const char* name, Version_t cversion, const type_info* info, TVirtualIsAProxy* isa, ShowMembersFunc_t showmember, const char* dfil, const c",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:27084,Integrability,wrap,wrapper,27084,"nheritance. TClass * GetBaseClass(const TClass* base); Return pointer to the base class ""cl"". Returns 0 in case ""cl""; is not a base class. Takes care of multiple inheritance. Int_t GetBaseClassOffsetRecurse(const TClass* base); Return data member offset to the base class ""cl"".; Returns -1 in case ""cl"" is not a base class.; Returns -2 if cl is a base class, but we can't find the offset; because it's virtual.; Takes care of multiple inheritance. Int_t GetBaseClassOffset(const TClass* base); Return data member offset to the base class ""cl"".; Returns -1 in case ""cl"" is not a base class.; Takes care of multiple inheritance. TClass * GetBaseDataMember(const char* datamember); Return pointer to (base) class that contains datamember. TVirtualCollectionProxy * GetCollectionProxy() const; Return the proxy describinb the collection (if any). TClassStreamer * GetStreamer() const; Return the Streamer Class allowing streaming (if any). ClassStreamerFunc_t GetStreamerFunc() const; Get a wrapper/accessor function around this class custom streamer (member function). TVirtualIsAProxy* GetIsAProxy() const; Return the proxy implementing the IsA functionality. TClass * GetClass(const char* name, Bool_t load = kTRUE, Bool_t silent = kFALSE); Static method returning pointer to TClass of the specified class name.; If load is true an attempt is made to obtain the class by loading; the appropriate shared library (directed by the rootmap file).; If silent is 'true', do not warn about missing dictionary for the class.; (typically used for class that are used only for transient members); Returns 0 in case class is not found. THashTable * GetClassShortTypedefHash(); Return the class' names massaged with TClassEdit::ShortType with kDropStlDefault. TClass * GetClass(const type_info& typeinfo, Bool_t load = kTRUE, Bool_t silent = kFALSE); Return pointer to class with name. VoidFuncPtr_t GetDict(const char* cname); Return a pointer to the dictionary loading function generated by; rootcint. VoidFuncP",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:29113,Integrability,depend,depends,29113,"generated by; rootcint. VoidFuncPtr_t GetDict(const type_info& info); Return a pointer to the dictionary loading function generated by; rootcint. TDataMember * GetDataMember(const char* datamember) const; Return pointer to datamember object with name ""datamember"". Long_t GetDataMemberOffset(const char* membername) const; return offset for member name. name can be a data member in; the class itself, one of its base classes, or one member in; one of the aggregated classes. In case of an emulated class, the list of emulated TRealData is built. TRealData* GetRealData(const char* name) const; -- Return pointer to TRealData element with name ""name"". Name can be a data member in the class itself,; one of its base classes, or a member in; one of the aggregated classes. In case of an emulated class, the list of emulated TRealData is built. const char * GetSharedLibs(); Get the list of shared libraries containing the code for class cls.; The first library in the list is the one containing the class, the; others are the libraries the first one depends on. Returns 0; in case the library is not found. TList * GetListOfBases(); Return list containing the TBaseClass(es) of a class. TList * GetListOfDataMembers(); Return list containing the TDataMembers of a class. TList * GetListOfMethods(); Return list containing the TMethods of a class. TList * GetListOfAllPublicMethods(); Returns a list of all public methods of this class and its base classes.; Refers to a subset of the methods in GetListOfMethods() so don't do; GetListOfAllPublicMethods()->Delete().; Algorithm used to get the list is:; - put all methods of the class in the list (also protected and private; ones).; - loop over all base classes and add only those methods not already in the; list (also protected and private ones).; - once finished, loop over resulting list and remove all private and; protected methods. TList * GetListOfAllPublicDataMembers(); Returns a list of all public data members of this class and its base; c",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:32519,Integrability,interface,interface,32519,"'arenaTo'. TList * GetMenuList() const; Return the list of menu items associated with the class. TMethod * GetMethodAny(const char* method); Return pointer to method without looking at parameters.; Does not look in (possible) base classes. TMethod * GetMethodAllAny(const char* method); Return pointer to method without looking at parameters.; Does look in all base classes. TMethod * GetMethod(const char* method, const char* params); Find the best method (if there is one) matching the parameters.; The params string must contain argument values, like ""3189, \""aap\"", 1.3"".; The function invokes GetClassMethod to search for a possible method; in the class itself or in its base classes. Returns 0 in case method; is not found. TMethod * GetMethodWithPrototype(const char* method, const char* proto); Find the method with a given prototype. The proto string must be of the; form: ""char*,int,double"". Returns 0 in case method is not found. TMethod * GetClassMethod(Long_t faddr); Look for a method in this class that has the interface function; address faddr. TMethod * GetClassMethod(const char* name, const char* signature); Look for a method in this class that has the name and; signature. Int_t GetNdata(); Return the number of data members of this class; Note that in case the list of data members is not yet created, it will be done; by GetListOfDataMembers(). Int_t GetNmethods(); Return the number of methods of this class; Note that in case the list of methods is not yet created, it will be done; by GetListOfMethods(). TVirtualStreamerInfo* GetStreamerInfo(Int_t version = 0) const; returns a pointer to the TVirtualStreamerInfo object for version; If the object doest not exist, it is created. Note: There are two special version numbers:. 0: Use the class version from the currently loaded class library.; -1: Assume no class library loaded (emulated class). Warning: If we create a new streamer info, whether or not the build; optimizes is controlled externally to us by a global varia",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:37248,Integrability,interface,interface,37248,"wType defConstructor = kClassNew) const; Return a pointer to a newly allocated array of objects; of this class.; The class must have a default constructor. For meaning of; defConstructor, see TClass::IsCallingNew(). void * NewArray(Long_t nElements, void* arena, TClass::ENewType defConstructor = kClassNew) const; Return a pointer to a newly allocated object of this class.; The class must have a default constructor. For meaning of; defConstructor, see TClass::IsCallingNew(). void Destructor(void* obj, Bool_t dtorOnly = kFALSE); Explicitly call destructor for object. void DeleteArray(void* ary, Bool_t dtorOnly = kFALSE); Explicitly call operator delete[] for an array. void SetCanSplit(Int_t splitmode); Set the splitability of this class:; -1: Use the default calculation; 0: Disallow splitting; 1: Always allow splitting. void SetClassVersion(Version_t version); Private function. Set the class version for the 'class' represented by; this TClass object. See the public interface:; ROOT::ResetClassVersion; defined in TClassTable.cxx. Note on class version numbers:; If no class number has been specified, TClass::GetVersion will return -1; The Class Version 0 request the whole object to be transient; The Class Version 1, unless specified via ClassDef indicates that the; I/O should use the TClass checksum to distinguish the layout of the class. void SetCurrentStreamerInfo(TVirtualStreamerInfo* info); Set pointer to current TVirtualStreamerInfo. Int_t Size() const; Return size of object of this class. TClass * Load(TBuffer& b); Load class description from I/O buffer and return class object. void Store(TBuffer& b) const; Store class description on I/O buffer. Bool_t IsLoaded() const; Return true if the shared library of this class is currently in the a; process's memory. Return false, after the shared library has been; unloaded or if this is an 'emulated' class created from a file's StreamerInfo. Bool_t IsStartingWithTObject() const; Returns true if this class inherits from TOb",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:44854,Integrability,wrap,wrapper,44854,"st TClass* onfile_class) const; Case of TObjects when fIsOffsetStreamerSet is known to have been set. void StreamerTObjectEmulated(void* object, TBuffer& b, const TClass* onfile_class) const; Case of TObjects when we do not have the library defining the class. void StreamerInstrumented(void* object, TBuffer& b, const TClass* onfile_class) const; Case of instrumented class with a library. void StreamerStreamerInfo(void* object, TBuffer& b, const TClass* onfile_class) const; Case of where we should directly use the StreamerInfo.; case kForeign:; case kForeign|kEmulated:; case kInstrumented|kEmulated:; case kEmulated:. void StreamerDefault(void* object, TBuffer& b, const TClass* onfile_class) const; Default streaming in cases where either we have no way to know what to do; or if Property() has not yet been called. void AdoptStreamer(TClassStreamer* strm); Adopt a TClassStreamer object. Ownership is transfered to this TClass; object. void SetStreamerFunc(ClassStreamerFunc_t strm); Set a wrapper/accessor function around this class custom streamer. void SetMerge(ROOT::MergeFunc_t mergeFunc); Install a new wrapper around 'Merge'. void SetResetAfterMerge(ROOT::ResetAfterMergeFunc_t resetFunc); Install a new wrapper around 'ResetAfterMerge'. void SetNew(ROOT::NewFunc_t newFunc); Install a new wrapper around 'new'. void SetNewArray(ROOT::NewArrFunc_t newArrayFunc); Install a new wrapper around 'new []'. void SetDelete(ROOT::DelFunc_t deleteFunc); Install a new wrapper around 'delete'. void SetDeleteArray(ROOT::DelArrFunc_t deleteArrayFunc); Install a new wrapper around 'delete []'. void SetDestructor(ROOT::DesFunc_t destructorFunc); Install a new wrapper around the destructor. void SetDirectoryAutoAdd(ROOT::DirAutoAdd_t dirAutoAddFunc); Install a new wrapper around the directory auto add function..; The function autoAddFunc has the signature void (*)(void *obj, TDirectory dir); and should register 'obj' to the directory if dir is not null; and unregister 'obj' from its current",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:44973,Integrability,wrap,wrapper,44973,"t. void StreamerTObjectEmulated(void* object, TBuffer& b, const TClass* onfile_class) const; Case of TObjects when we do not have the library defining the class. void StreamerInstrumented(void* object, TBuffer& b, const TClass* onfile_class) const; Case of instrumented class with a library. void StreamerStreamerInfo(void* object, TBuffer& b, const TClass* onfile_class) const; Case of where we should directly use the StreamerInfo.; case kForeign:; case kForeign|kEmulated:; case kInstrumented|kEmulated:; case kEmulated:. void StreamerDefault(void* object, TBuffer& b, const TClass* onfile_class) const; Default streaming in cases where either we have no way to know what to do; or if Property() has not yet been called. void AdoptStreamer(TClassStreamer* strm); Adopt a TClassStreamer object. Ownership is transfered to this TClass; object. void SetStreamerFunc(ClassStreamerFunc_t strm); Set a wrapper/accessor function around this class custom streamer. void SetMerge(ROOT::MergeFunc_t mergeFunc); Install a new wrapper around 'Merge'. void SetResetAfterMerge(ROOT::ResetAfterMergeFunc_t resetFunc); Install a new wrapper around 'ResetAfterMerge'. void SetNew(ROOT::NewFunc_t newFunc); Install a new wrapper around 'new'. void SetNewArray(ROOT::NewArrFunc_t newArrayFunc); Install a new wrapper around 'new []'. void SetDelete(ROOT::DelFunc_t deleteFunc); Install a new wrapper around 'delete'. void SetDeleteArray(ROOT::DelArrFunc_t deleteArrayFunc); Install a new wrapper around 'delete []'. void SetDestructor(ROOT::DesFunc_t destructorFunc); Install a new wrapper around the destructor. void SetDirectoryAutoAdd(ROOT::DirAutoAdd_t dirAutoAddFunc); Install a new wrapper around the directory auto add function..; The function autoAddFunc has the signature void (*)(void *obj, TDirectory dir); and should register 'obj' to the directory if dir is not null; and unregister 'obj' from its current directory if dir is null. TVirtualStreamerInfo * FindStreamerInfo(UInt_t checksum) const; Find th",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:45075,Integrability,wrap,wrapper,45075," of TObjects when we do not have the library defining the class. void StreamerInstrumented(void* object, TBuffer& b, const TClass* onfile_class) const; Case of instrumented class with a library. void StreamerStreamerInfo(void* object, TBuffer& b, const TClass* onfile_class) const; Case of where we should directly use the StreamerInfo.; case kForeign:; case kForeign|kEmulated:; case kInstrumented|kEmulated:; case kEmulated:. void StreamerDefault(void* object, TBuffer& b, const TClass* onfile_class) const; Default streaming in cases where either we have no way to know what to do; or if Property() has not yet been called. void AdoptStreamer(TClassStreamer* strm); Adopt a TClassStreamer object. Ownership is transfered to this TClass; object. void SetStreamerFunc(ClassStreamerFunc_t strm); Set a wrapper/accessor function around this class custom streamer. void SetMerge(ROOT::MergeFunc_t mergeFunc); Install a new wrapper around 'Merge'. void SetResetAfterMerge(ROOT::ResetAfterMergeFunc_t resetFunc); Install a new wrapper around 'ResetAfterMerge'. void SetNew(ROOT::NewFunc_t newFunc); Install a new wrapper around 'new'. void SetNewArray(ROOT::NewArrFunc_t newArrayFunc); Install a new wrapper around 'new []'. void SetDelete(ROOT::DelFunc_t deleteFunc); Install a new wrapper around 'delete'. void SetDeleteArray(ROOT::DelArrFunc_t deleteArrayFunc); Install a new wrapper around 'delete []'. void SetDestructor(ROOT::DesFunc_t destructorFunc); Install a new wrapper around the destructor. void SetDirectoryAutoAdd(ROOT::DirAutoAdd_t dirAutoAddFunc); Install a new wrapper around the directory auto add function..; The function autoAddFunc has the signature void (*)(void *obj, TDirectory dir); and should register 'obj' to the directory if dir is not null; and unregister 'obj' from its current directory if dir is null. TVirtualStreamerInfo * FindStreamerInfo(UInt_t checksum) const; Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. TVirtualStreamerInfo * Fin",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:45161,Integrability,wrap,wrapper,45161,"id* object, TBuffer& b, const TClass* onfile_class) const; Case of instrumented class with a library. void StreamerStreamerInfo(void* object, TBuffer& b, const TClass* onfile_class) const; Case of where we should directly use the StreamerInfo.; case kForeign:; case kForeign|kEmulated:; case kInstrumented|kEmulated:; case kEmulated:. void StreamerDefault(void* object, TBuffer& b, const TClass* onfile_class) const; Default streaming in cases where either we have no way to know what to do; or if Property() has not yet been called. void AdoptStreamer(TClassStreamer* strm); Adopt a TClassStreamer object. Ownership is transfered to this TClass; object. void SetStreamerFunc(ClassStreamerFunc_t strm); Set a wrapper/accessor function around this class custom streamer. void SetMerge(ROOT::MergeFunc_t mergeFunc); Install a new wrapper around 'Merge'. void SetResetAfterMerge(ROOT::ResetAfterMergeFunc_t resetFunc); Install a new wrapper around 'ResetAfterMerge'. void SetNew(ROOT::NewFunc_t newFunc); Install a new wrapper around 'new'. void SetNewArray(ROOT::NewArrFunc_t newArrayFunc); Install a new wrapper around 'new []'. void SetDelete(ROOT::DelFunc_t deleteFunc); Install a new wrapper around 'delete'. void SetDeleteArray(ROOT::DelArrFunc_t deleteArrayFunc); Install a new wrapper around 'delete []'. void SetDestructor(ROOT::DesFunc_t destructorFunc); Install a new wrapper around the destructor. void SetDirectoryAutoAdd(ROOT::DirAutoAdd_t dirAutoAddFunc); Install a new wrapper around the directory auto add function..; The function autoAddFunc has the signature void (*)(void *obj, TDirectory dir); and should register 'obj' to the directory if dir is not null; and unregister 'obj' from its current directory if dir is null. TVirtualStreamerInfo * FindStreamerInfo(UInt_t checksum) const; Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. TVirtualStreamerInfo * FindStreamerInfo(TObjArray* arr, UInt_t checksum) const; Find the TVirtualStreamerInfo in the St",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:45248,Integrability,wrap,wrapper,45248,"ass with a library. void StreamerStreamerInfo(void* object, TBuffer& b, const TClass* onfile_class) const; Case of where we should directly use the StreamerInfo.; case kForeign:; case kForeign|kEmulated:; case kInstrumented|kEmulated:; case kEmulated:. void StreamerDefault(void* object, TBuffer& b, const TClass* onfile_class) const; Default streaming in cases where either we have no way to know what to do; or if Property() has not yet been called. void AdoptStreamer(TClassStreamer* strm); Adopt a TClassStreamer object. Ownership is transfered to this TClass; object. void SetStreamerFunc(ClassStreamerFunc_t strm); Set a wrapper/accessor function around this class custom streamer. void SetMerge(ROOT::MergeFunc_t mergeFunc); Install a new wrapper around 'Merge'. void SetResetAfterMerge(ROOT::ResetAfterMergeFunc_t resetFunc); Install a new wrapper around 'ResetAfterMerge'. void SetNew(ROOT::NewFunc_t newFunc); Install a new wrapper around 'new'. void SetNewArray(ROOT::NewArrFunc_t newArrayFunc); Install a new wrapper around 'new []'. void SetDelete(ROOT::DelFunc_t deleteFunc); Install a new wrapper around 'delete'. void SetDeleteArray(ROOT::DelArrFunc_t deleteArrayFunc); Install a new wrapper around 'delete []'. void SetDestructor(ROOT::DesFunc_t destructorFunc); Install a new wrapper around the destructor. void SetDirectoryAutoAdd(ROOT::DirAutoAdd_t dirAutoAddFunc); Install a new wrapper around the directory auto add function..; The function autoAddFunc has the signature void (*)(void *obj, TDirectory dir); and should register 'obj' to the directory if dir is not null; and unregister 'obj' from its current directory if dir is null. TVirtualStreamerInfo * FindStreamerInfo(UInt_t checksum) const; Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. TVirtualStreamerInfo * FindStreamerInfo(TObjArray* arr, UInt_t checksum) const; Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. TVirtualStreamerInfo * GetConversionStreame",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:45331,Integrability,wrap,wrapper,45331,"onfile_class) const; Case of where we should directly use the StreamerInfo.; case kForeign:; case kForeign|kEmulated:; case kInstrumented|kEmulated:; case kEmulated:. void StreamerDefault(void* object, TBuffer& b, const TClass* onfile_class) const; Default streaming in cases where either we have no way to know what to do; or if Property() has not yet been called. void AdoptStreamer(TClassStreamer* strm); Adopt a TClassStreamer object. Ownership is transfered to this TClass; object. void SetStreamerFunc(ClassStreamerFunc_t strm); Set a wrapper/accessor function around this class custom streamer. void SetMerge(ROOT::MergeFunc_t mergeFunc); Install a new wrapper around 'Merge'. void SetResetAfterMerge(ROOT::ResetAfterMergeFunc_t resetFunc); Install a new wrapper around 'ResetAfterMerge'. void SetNew(ROOT::NewFunc_t newFunc); Install a new wrapper around 'new'. void SetNewArray(ROOT::NewArrFunc_t newArrayFunc); Install a new wrapper around 'new []'. void SetDelete(ROOT::DelFunc_t deleteFunc); Install a new wrapper around 'delete'. void SetDeleteArray(ROOT::DelArrFunc_t deleteArrayFunc); Install a new wrapper around 'delete []'. void SetDestructor(ROOT::DesFunc_t destructorFunc); Install a new wrapper around the destructor. void SetDirectoryAutoAdd(ROOT::DirAutoAdd_t dirAutoAddFunc); Install a new wrapper around the directory auto add function..; The function autoAddFunc has the signature void (*)(void *obj, TDirectory dir); and should register 'obj' to the directory if dir is not null; and unregister 'obj' from its current directory if dir is null. TVirtualStreamerInfo * FindStreamerInfo(UInt_t checksum) const; Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. TVirtualStreamerInfo * FindStreamerInfo(TObjArray* arr, UInt_t checksum) const; Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. TVirtualStreamerInfo * GetConversionStreamerInfo(const char* onfile_classname, Int_t version) const; Return a Conversion StreamerI",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:45427,Integrability,wrap,wrapper,45427,"; case kForeign|kEmulated:; case kInstrumented|kEmulated:; case kEmulated:. void StreamerDefault(void* object, TBuffer& b, const TClass* onfile_class) const; Default streaming in cases where either we have no way to know what to do; or if Property() has not yet been called. void AdoptStreamer(TClassStreamer* strm); Adopt a TClassStreamer object. Ownership is transfered to this TClass; object. void SetStreamerFunc(ClassStreamerFunc_t strm); Set a wrapper/accessor function around this class custom streamer. void SetMerge(ROOT::MergeFunc_t mergeFunc); Install a new wrapper around 'Merge'. void SetResetAfterMerge(ROOT::ResetAfterMergeFunc_t resetFunc); Install a new wrapper around 'ResetAfterMerge'. void SetNew(ROOT::NewFunc_t newFunc); Install a new wrapper around 'new'. void SetNewArray(ROOT::NewArrFunc_t newArrayFunc); Install a new wrapper around 'new []'. void SetDelete(ROOT::DelFunc_t deleteFunc); Install a new wrapper around 'delete'. void SetDeleteArray(ROOT::DelArrFunc_t deleteArrayFunc); Install a new wrapper around 'delete []'. void SetDestructor(ROOT::DesFunc_t destructorFunc); Install a new wrapper around the destructor. void SetDirectoryAutoAdd(ROOT::DirAutoAdd_t dirAutoAddFunc); Install a new wrapper around the directory auto add function..; The function autoAddFunc has the signature void (*)(void *obj, TDirectory dir); and should register 'obj' to the directory if dir is not null; and unregister 'obj' from its current directory if dir is null. TVirtualStreamerInfo * FindStreamerInfo(UInt_t checksum) const; Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. TVirtualStreamerInfo * FindStreamerInfo(TObjArray* arr, UInt_t checksum) const; Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. TVirtualStreamerInfo * GetConversionStreamerInfo(const char* onfile_classname, Int_t version) const; Return a Conversion StreamerInfo from the class 'classname' for version number 'version' to this class, if any. TVirtual",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:45521,Integrability,wrap,wrapper,45521,"oid* object, TBuffer& b, const TClass* onfile_class) const; Default streaming in cases where either we have no way to know what to do; or if Property() has not yet been called. void AdoptStreamer(TClassStreamer* strm); Adopt a TClassStreamer object. Ownership is transfered to this TClass; object. void SetStreamerFunc(ClassStreamerFunc_t strm); Set a wrapper/accessor function around this class custom streamer. void SetMerge(ROOT::MergeFunc_t mergeFunc); Install a new wrapper around 'Merge'. void SetResetAfterMerge(ROOT::ResetAfterMergeFunc_t resetFunc); Install a new wrapper around 'ResetAfterMerge'. void SetNew(ROOT::NewFunc_t newFunc); Install a new wrapper around 'new'. void SetNewArray(ROOT::NewArrFunc_t newArrayFunc); Install a new wrapper around 'new []'. void SetDelete(ROOT::DelFunc_t deleteFunc); Install a new wrapper around 'delete'. void SetDeleteArray(ROOT::DelArrFunc_t deleteArrayFunc); Install a new wrapper around 'delete []'. void SetDestructor(ROOT::DesFunc_t destructorFunc); Install a new wrapper around the destructor. void SetDirectoryAutoAdd(ROOT::DirAutoAdd_t dirAutoAddFunc); Install a new wrapper around the directory auto add function..; The function autoAddFunc has the signature void (*)(void *obj, TDirectory dir); and should register 'obj' to the directory if dir is not null; and unregister 'obj' from its current directory if dir is null. TVirtualStreamerInfo * FindStreamerInfo(UInt_t checksum) const; Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. TVirtualStreamerInfo * FindStreamerInfo(TObjArray* arr, UInt_t checksum) const; Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. TVirtualStreamerInfo * GetConversionStreamerInfo(const char* onfile_classname, Int_t version) const; Return a Conversion StreamerInfo from the class 'classname' for version number 'version' to this class, if any. TVirtualStreamerInfo * GetConversionStreamerInfo(const TClass* onfile_cl, Int_t version) const; Return a C",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:45627,Integrability,wrap,wrapper,45627," way to know what to do; or if Property() has not yet been called. void AdoptStreamer(TClassStreamer* strm); Adopt a TClassStreamer object. Ownership is transfered to this TClass; object. void SetStreamerFunc(ClassStreamerFunc_t strm); Set a wrapper/accessor function around this class custom streamer. void SetMerge(ROOT::MergeFunc_t mergeFunc); Install a new wrapper around 'Merge'. void SetResetAfterMerge(ROOT::ResetAfterMergeFunc_t resetFunc); Install a new wrapper around 'ResetAfterMerge'. void SetNew(ROOT::NewFunc_t newFunc); Install a new wrapper around 'new'. void SetNewArray(ROOT::NewArrFunc_t newArrayFunc); Install a new wrapper around 'new []'. void SetDelete(ROOT::DelFunc_t deleteFunc); Install a new wrapper around 'delete'. void SetDeleteArray(ROOT::DelArrFunc_t deleteArrayFunc); Install a new wrapper around 'delete []'. void SetDestructor(ROOT::DesFunc_t destructorFunc); Install a new wrapper around the destructor. void SetDirectoryAutoAdd(ROOT::DirAutoAdd_t dirAutoAddFunc); Install a new wrapper around the directory auto add function..; The function autoAddFunc has the signature void (*)(void *obj, TDirectory dir); and should register 'obj' to the directory if dir is not null; and unregister 'obj' from its current directory if dir is null. TVirtualStreamerInfo * FindStreamerInfo(UInt_t checksum) const; Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. TVirtualStreamerInfo * FindStreamerInfo(TObjArray* arr, UInt_t checksum) const; Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. TVirtualStreamerInfo * GetConversionStreamerInfo(const char* onfile_classname, Int_t version) const; Return a Conversion StreamerInfo from the class 'classname' for version number 'version' to this class, if any. TVirtualStreamerInfo * GetConversionStreamerInfo(const TClass* onfile_cl, Int_t version) const; Return a Conversion StreamerInfo from the class represened by cl for version number 'version' to this class, if any. TVi",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:47207,Integrability,wrap,wrapper,47207,"treamerInfo * GetConversionStreamerInfo(const char* onfile_classname, Int_t version) const; Return a Conversion StreamerInfo from the class 'classname' for version number 'version' to this class, if any. TVirtualStreamerInfo * GetConversionStreamerInfo(const TClass* onfile_cl, Int_t version) const; Return a Conversion StreamerInfo from the class represened by cl for version number 'version' to this class, if any. TVirtualStreamerInfo * FindConversionStreamerInfo(const char* onfile_classname, UInt_t checksum) const; Return a Conversion StreamerInfo from the class 'classname' for the layout represented by 'checksum' to this class, if any. TVirtualStreamerInfo * FindConversionStreamerInfo(const TClass* onfile_cl, UInt_t checksum) const; Return a Conversion StreamerInfo from the class represened by cl for the layout represented by 'checksum' to this class, if any. Bool_t HasDefaultConstructor() const; Return true if we have access to a default constructor. ROOT::MergeFunc_t GetMerge() const; Return the wrapper around Merge. ROOT::ResetAfterMergeFunc_t GetResetAfterMerge() const; Return the wrapper around Merge. ROOT::NewFunc_t GetNew() const; Return the wrapper around new ThisClass(). ROOT::NewArrFunc_t GetNewArray() const; Return the wrapper around new ThisClass[]. ROOT::DelFunc_t GetDelete() const; Return the wrapper around delete ThiObject. ROOT::DelArrFunc_t GetDeleteArray() const; Return the wrapper around delete [] ThiObject. ROOT::DesFunc_t GetDestructor() const; Return the wrapper around the destructor. ROOT::DirAutoAdd_t GetDirectoryAutoAdd() const; Return the wrapper around the directory auto add function. void SetClassSize(Int_t sizof); { fSizeof = sizof; }. void AddInstance(Bool_t heap = kFALSE); { fInstanceCount++; if (heap) fOnHeap++; }. Bool_t CanIgnoreTObjectStreamer(); { return TestBit(kIgnoreTObjectStreamer);}. void Dump() const; { TDictionary::Dump(); }. Version_t GetClassVersion() const; { fVersionUsed = kTRUE; return fClassVersion; }. const char * Ge",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:47296,Integrability,wrap,wrapper,47296,"sion) const; Return a Conversion StreamerInfo from the class 'classname' for version number 'version' to this class, if any. TVirtualStreamerInfo * GetConversionStreamerInfo(const TClass* onfile_cl, Int_t version) const; Return a Conversion StreamerInfo from the class represened by cl for version number 'version' to this class, if any. TVirtualStreamerInfo * FindConversionStreamerInfo(const char* onfile_classname, UInt_t checksum) const; Return a Conversion StreamerInfo from the class 'classname' for the layout represented by 'checksum' to this class, if any. TVirtualStreamerInfo * FindConversionStreamerInfo(const TClass* onfile_cl, UInt_t checksum) const; Return a Conversion StreamerInfo from the class represened by cl for the layout represented by 'checksum' to this class, if any. Bool_t HasDefaultConstructor() const; Return true if we have access to a default constructor. ROOT::MergeFunc_t GetMerge() const; Return the wrapper around Merge. ROOT::ResetAfterMergeFunc_t GetResetAfterMerge() const; Return the wrapper around Merge. ROOT::NewFunc_t GetNew() const; Return the wrapper around new ThisClass(). ROOT::NewArrFunc_t GetNewArray() const; Return the wrapper around new ThisClass[]. ROOT::DelFunc_t GetDelete() const; Return the wrapper around delete ThiObject. ROOT::DelArrFunc_t GetDeleteArray() const; Return the wrapper around delete [] ThiObject. ROOT::DesFunc_t GetDestructor() const; Return the wrapper around the destructor. ROOT::DirAutoAdd_t GetDirectoryAutoAdd() const; Return the wrapper around the directory auto add function. void SetClassSize(Int_t sizof); { fSizeof = sizof; }. void AddInstance(Bool_t heap = kFALSE); { fInstanceCount++; if (heap) fOnHeap++; }. Bool_t CanIgnoreTObjectStreamer(); { return TestBit(kIgnoreTObjectStreamer);}. void Dump() const; { TDictionary::Dump(); }. Version_t GetClassVersion() const; { fVersionUsed = kTRUE; return fClassVersion; }. const char * GetDeclFileName() const; { return fDeclFileName; }. Short_t GetDeclFileLine() con",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:47361,Integrability,wrap,wrapper,47361,"on number 'version' to this class, if any. TVirtualStreamerInfo * GetConversionStreamerInfo(const TClass* onfile_cl, Int_t version) const; Return a Conversion StreamerInfo from the class represened by cl for version number 'version' to this class, if any. TVirtualStreamerInfo * FindConversionStreamerInfo(const char* onfile_classname, UInt_t checksum) const; Return a Conversion StreamerInfo from the class 'classname' for the layout represented by 'checksum' to this class, if any. TVirtualStreamerInfo * FindConversionStreamerInfo(const TClass* onfile_cl, UInt_t checksum) const; Return a Conversion StreamerInfo from the class represened by cl for the layout represented by 'checksum' to this class, if any. Bool_t HasDefaultConstructor() const; Return true if we have access to a default constructor. ROOT::MergeFunc_t GetMerge() const; Return the wrapper around Merge. ROOT::ResetAfterMergeFunc_t GetResetAfterMerge() const; Return the wrapper around Merge. ROOT::NewFunc_t GetNew() const; Return the wrapper around new ThisClass(). ROOT::NewArrFunc_t GetNewArray() const; Return the wrapper around new ThisClass[]. ROOT::DelFunc_t GetDelete() const; Return the wrapper around delete ThiObject. ROOT::DelArrFunc_t GetDeleteArray() const; Return the wrapper around delete [] ThiObject. ROOT::DesFunc_t GetDestructor() const; Return the wrapper around the destructor. ROOT::DirAutoAdd_t GetDirectoryAutoAdd() const; Return the wrapper around the directory auto add function. void SetClassSize(Int_t sizof); { fSizeof = sizof; }. void AddInstance(Bool_t heap = kFALSE); { fInstanceCount++; if (heap) fOnHeap++; }. Bool_t CanIgnoreTObjectStreamer(); { return TestBit(kIgnoreTObjectStreamer);}. void Dump() const; { TDictionary::Dump(); }. Version_t GetClassVersion() const; { fVersionUsed = kTRUE; return fClassVersion; }. const char * GetDeclFileName() const; { return fDeclFileName; }. Short_t GetDeclFileLine() const; { return fDeclFileLine; }. ClassInfo_t * GetClassInfo() const; { return fClass",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:47444,Integrability,wrap,wrapper,47444,"StreamerInfo(const TClass* onfile_cl, Int_t version) const; Return a Conversion StreamerInfo from the class represened by cl for version number 'version' to this class, if any. TVirtualStreamerInfo * FindConversionStreamerInfo(const char* onfile_classname, UInt_t checksum) const; Return a Conversion StreamerInfo from the class 'classname' for the layout represented by 'checksum' to this class, if any. TVirtualStreamerInfo * FindConversionStreamerInfo(const TClass* onfile_cl, UInt_t checksum) const; Return a Conversion StreamerInfo from the class represened by cl for the layout represented by 'checksum' to this class, if any. Bool_t HasDefaultConstructor() const; Return true if we have access to a default constructor. ROOT::MergeFunc_t GetMerge() const; Return the wrapper around Merge. ROOT::ResetAfterMergeFunc_t GetResetAfterMerge() const; Return the wrapper around Merge. ROOT::NewFunc_t GetNew() const; Return the wrapper around new ThisClass(). ROOT::NewArrFunc_t GetNewArray() const; Return the wrapper around new ThisClass[]. ROOT::DelFunc_t GetDelete() const; Return the wrapper around delete ThiObject. ROOT::DelArrFunc_t GetDeleteArray() const; Return the wrapper around delete [] ThiObject. ROOT::DesFunc_t GetDestructor() const; Return the wrapper around the destructor. ROOT::DirAutoAdd_t GetDirectoryAutoAdd() const; Return the wrapper around the directory auto add function. void SetClassSize(Int_t sizof); { fSizeof = sizof; }. void AddInstance(Bool_t heap = kFALSE); { fInstanceCount++; if (heap) fOnHeap++; }. Bool_t CanIgnoreTObjectStreamer(); { return TestBit(kIgnoreTObjectStreamer);}. void Dump() const; { TDictionary::Dump(); }. Version_t GetClassVersion() const; { fVersionUsed = kTRUE; return fClassVersion; }. const char * GetDeclFileName() const; { return fDeclFileName; }. Short_t GetDeclFileLine() const; { return fDeclFileLine; }. ClassInfo_t * GetClassInfo() const; { return fClassInfo; }. const char * GetContextMenuTitle() const; { return fContextMenuTitle; ",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:47522,Integrability,wrap,wrapper,47522,"treamerInfo from the class represened by cl for version number 'version' to this class, if any. TVirtualStreamerInfo * FindConversionStreamerInfo(const char* onfile_classname, UInt_t checksum) const; Return a Conversion StreamerInfo from the class 'classname' for the layout represented by 'checksum' to this class, if any. TVirtualStreamerInfo * FindConversionStreamerInfo(const TClass* onfile_cl, UInt_t checksum) const; Return a Conversion StreamerInfo from the class represened by cl for the layout represented by 'checksum' to this class, if any. Bool_t HasDefaultConstructor() const; Return true if we have access to a default constructor. ROOT::MergeFunc_t GetMerge() const; Return the wrapper around Merge. ROOT::ResetAfterMergeFunc_t GetResetAfterMerge() const; Return the wrapper around Merge. ROOT::NewFunc_t GetNew() const; Return the wrapper around new ThisClass(). ROOT::NewArrFunc_t GetNewArray() const; Return the wrapper around new ThisClass[]. ROOT::DelFunc_t GetDelete() const; Return the wrapper around delete ThiObject. ROOT::DelArrFunc_t GetDeleteArray() const; Return the wrapper around delete [] ThiObject. ROOT::DesFunc_t GetDestructor() const; Return the wrapper around the destructor. ROOT::DirAutoAdd_t GetDirectoryAutoAdd() const; Return the wrapper around the directory auto add function. void SetClassSize(Int_t sizof); { fSizeof = sizof; }. void AddInstance(Bool_t heap = kFALSE); { fInstanceCount++; if (heap) fOnHeap++; }. Bool_t CanIgnoreTObjectStreamer(); { return TestBit(kIgnoreTObjectStreamer);}. void Dump() const; { TDictionary::Dump(); }. Version_t GetClassVersion() const; { fVersionUsed = kTRUE; return fClassVersion; }. const char * GetDeclFileName() const; { return fDeclFileName; }. Short_t GetDeclFileLine() const; { return fDeclFileLine; }. ClassInfo_t * GetClassInfo() const; { return fClassInfo; }. const char * GetContextMenuTitle() const; { return fContextMenuTitle; }. TVirtualStreamerInfo * GetCurrentStreamerInfo(). TList * GetListOfRealData() c",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:47609,Integrability,wrap,wrapper,47609,"s, if any. TVirtualStreamerInfo * FindConversionStreamerInfo(const char* onfile_classname, UInt_t checksum) const; Return a Conversion StreamerInfo from the class 'classname' for the layout represented by 'checksum' to this class, if any. TVirtualStreamerInfo * FindConversionStreamerInfo(const TClass* onfile_cl, UInt_t checksum) const; Return a Conversion StreamerInfo from the class represened by cl for the layout represented by 'checksum' to this class, if any. Bool_t HasDefaultConstructor() const; Return true if we have access to a default constructor. ROOT::MergeFunc_t GetMerge() const; Return the wrapper around Merge. ROOT::ResetAfterMergeFunc_t GetResetAfterMerge() const; Return the wrapper around Merge. ROOT::NewFunc_t GetNew() const; Return the wrapper around new ThisClass(). ROOT::NewArrFunc_t GetNewArray() const; Return the wrapper around new ThisClass[]. ROOT::DelFunc_t GetDelete() const; Return the wrapper around delete ThiObject. ROOT::DelArrFunc_t GetDeleteArray() const; Return the wrapper around delete [] ThiObject. ROOT::DesFunc_t GetDestructor() const; Return the wrapper around the destructor. ROOT::DirAutoAdd_t GetDirectoryAutoAdd() const; Return the wrapper around the directory auto add function. void SetClassSize(Int_t sizof); { fSizeof = sizof; }. void AddInstance(Bool_t heap = kFALSE); { fInstanceCount++; if (heap) fOnHeap++; }. Bool_t CanIgnoreTObjectStreamer(); { return TestBit(kIgnoreTObjectStreamer);}. void Dump() const; { TDictionary::Dump(); }. Version_t GetClassVersion() const; { fVersionUsed = kTRUE; return fClassVersion; }. const char * GetDeclFileName() const; { return fDeclFileName; }. Short_t GetDeclFileLine() const; { return fDeclFileLine; }. ClassInfo_t * GetClassInfo() const; { return fClassInfo; }. const char * GetContextMenuTitle() const; { return fContextMenuTitle; }. TVirtualStreamerInfo * GetCurrentStreamerInfo(). TList * GetListOfRealData() const; { return fRealData; }. const char * GetImplFileName() const; { return fImplFil",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:47695,Integrability,wrap,wrapper,47695,"name, UInt_t checksum) const; Return a Conversion StreamerInfo from the class 'classname' for the layout represented by 'checksum' to this class, if any. TVirtualStreamerInfo * FindConversionStreamerInfo(const TClass* onfile_cl, UInt_t checksum) const; Return a Conversion StreamerInfo from the class represened by cl for the layout represented by 'checksum' to this class, if any. Bool_t HasDefaultConstructor() const; Return true if we have access to a default constructor. ROOT::MergeFunc_t GetMerge() const; Return the wrapper around Merge. ROOT::ResetAfterMergeFunc_t GetResetAfterMerge() const; Return the wrapper around Merge. ROOT::NewFunc_t GetNew() const; Return the wrapper around new ThisClass(). ROOT::NewArrFunc_t GetNewArray() const; Return the wrapper around new ThisClass[]. ROOT::DelFunc_t GetDelete() const; Return the wrapper around delete ThiObject. ROOT::DelArrFunc_t GetDeleteArray() const; Return the wrapper around delete [] ThiObject. ROOT::DesFunc_t GetDestructor() const; Return the wrapper around the destructor. ROOT::DirAutoAdd_t GetDirectoryAutoAdd() const; Return the wrapper around the directory auto add function. void SetClassSize(Int_t sizof); { fSizeof = sizof; }. void AddInstance(Bool_t heap = kFALSE); { fInstanceCount++; if (heap) fOnHeap++; }. Bool_t CanIgnoreTObjectStreamer(); { return TestBit(kIgnoreTObjectStreamer);}. void Dump() const; { TDictionary::Dump(); }. Version_t GetClassVersion() const; { fVersionUsed = kTRUE; return fClassVersion; }. const char * GetDeclFileName() const; { return fDeclFileName; }. Short_t GetDeclFileLine() const; { return fDeclFileLine; }. ClassInfo_t * GetClassInfo() const; { return fClassInfo; }. const char * GetContextMenuTitle() const; { return fContextMenuTitle; }. TVirtualStreamerInfo * GetCurrentStreamerInfo(). TList * GetListOfRealData() const; { return fRealData; }. const char * GetImplFileName() const; { return fImplFileName; }. Short_t GetImplFileLine() const; { return fImplFileLine; }. UInt_t GetInstan",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:47785,Integrability,wrap,wrapper,47785,"the layout represented by 'checksum' to this class, if any. TVirtualStreamerInfo * FindConversionStreamerInfo(const TClass* onfile_cl, UInt_t checksum) const; Return a Conversion StreamerInfo from the class represened by cl for the layout represented by 'checksum' to this class, if any. Bool_t HasDefaultConstructor() const; Return true if we have access to a default constructor. ROOT::MergeFunc_t GetMerge() const; Return the wrapper around Merge. ROOT::ResetAfterMergeFunc_t GetResetAfterMerge() const; Return the wrapper around Merge. ROOT::NewFunc_t GetNew() const; Return the wrapper around new ThisClass(). ROOT::NewArrFunc_t GetNewArray() const; Return the wrapper around new ThisClass[]. ROOT::DelFunc_t GetDelete() const; Return the wrapper around delete ThiObject. ROOT::DelArrFunc_t GetDeleteArray() const; Return the wrapper around delete [] ThiObject. ROOT::DesFunc_t GetDestructor() const; Return the wrapper around the destructor. ROOT::DirAutoAdd_t GetDirectoryAutoAdd() const; Return the wrapper around the directory auto add function. void SetClassSize(Int_t sizof); { fSizeof = sizof; }. void AddInstance(Bool_t heap = kFALSE); { fInstanceCount++; if (heap) fOnHeap++; }. Bool_t CanIgnoreTObjectStreamer(); { return TestBit(kIgnoreTObjectStreamer);}. void Dump() const; { TDictionary::Dump(); }. Version_t GetClassVersion() const; { fVersionUsed = kTRUE; return fClassVersion; }. const char * GetDeclFileName() const; { return fDeclFileName; }. Short_t GetDeclFileLine() const; { return fDeclFileLine; }. ClassInfo_t * GetClassInfo() const; { return fClassInfo; }. const char * GetContextMenuTitle() const; { return fContextMenuTitle; }. TVirtualStreamerInfo * GetCurrentStreamerInfo(). TList * GetListOfRealData() const; { return fRealData; }. const char * GetImplFileName() const; { return fImplFileName; }. Short_t GetImplFileLine() const; { return fImplFileLine; }. UInt_t GetInstanceCount() const; { return fInstanceCount; }. UInt_t GetHeapInstanceCount() const; { return fOn",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:17591,Modifiability,Inherit,Inheritance,17591,"chemaRuleSet*fSchemaRules! Schema evolution rules; TStringfSharedLibsshared libraries containing class code; ShowMembersFunc_tfShowMemberspointer to the class's ShowMembers function; Int_tfSizeofSizeof the class.; TClassStreamer*fStreamerpointer to streamer function; ClassStreamerFunc_tfStreamerFuncWrapper around this class custom Streamer member function.; G__p2memfuncfStreamerImpl! Pointer to the function implementing the right streaming behavior for the class represented by this object.; TObjArray*fStreamerInfoArray of TVirtualStreamerInfo; Int_tfStreamerType!cached of the streaming method to use; const type_info*fTypeInfopointer to the C++ type information.; Bool_tfVersionUsed!Indicates whether GetClassVersion has been called; static TClass::ENewTypefgCallingNewIntent of why/how TClass::New() is called; static Int_tfgClassCountprovides unique id for a each class; static THashTable*fgClassShortTypedefHash; static THashTable*fgClassTypedefHash. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IdMap_t * GetIdMap(). void AddClass(TClass* cl); static: Add a class to the list and map of classes. void RemoveClass(TClass* cl); static: Remove a class from the list and map of classes. TClass(); Default ctor. TClass(const char* name, Bool_t silent = kFALSE); Create a TClass object. This object contains the full dictionary; of a class. It has list to baseclasses, datamembers and methods.; Use this ctor to create a standalone TClass object. Most useful; to get a TClass interface to an interpreted class. Used by TTabCom.; Normally you would use TClass::GetClass(""class"") to get access to a; TClass object for a certain class. TClass(const char* name, Version_t cversion, const char* dfil = 0, const char* ifil = 0, Int_t dl = 0, Int_t il = 0, Bool_t silent = kFALSE); Create a TClass object. This object contains the full dictionary; of a class. It has list to baseclasses, datamembers and methods. TClass(const char* name, Version_t cversion,",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:17604,Modifiability,Inherit,Inherited,17604,"chemaRuleSet*fSchemaRules! Schema evolution rules; TStringfSharedLibsshared libraries containing class code; ShowMembersFunc_tfShowMemberspointer to the class's ShowMembers function; Int_tfSizeofSizeof the class.; TClassStreamer*fStreamerpointer to streamer function; ClassStreamerFunc_tfStreamerFuncWrapper around this class custom Streamer member function.; G__p2memfuncfStreamerImpl! Pointer to the function implementing the right streaming behavior for the class represented by this object.; TObjArray*fStreamerInfoArray of TVirtualStreamerInfo; Int_tfStreamerType!cached of the streaming method to use; const type_info*fTypeInfopointer to the C++ type information.; Bool_tfVersionUsed!Indicates whether GetClassVersion has been called; static TClass::ENewTypefgCallingNewIntent of why/how TClass::New() is called; static Int_tfgClassCountprovides unique id for a each class; static THashTable*fgClassShortTypedefHash; static THashTable*fgClassTypedefHash. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IdMap_t * GetIdMap(). void AddClass(TClass* cl); static: Add a class to the list and map of classes. void RemoveClass(TClass* cl); static: Remove a class from the list and map of classes. TClass(); Default ctor. TClass(const char* name, Bool_t silent = kFALSE); Create a TClass object. This object contains the full dictionary; of a class. It has list to baseclasses, datamembers and methods.; Use this ctor to create a standalone TClass object. Most useful; to get a TClass interface to an interpreted class. Used by TTabCom.; Normally you would use TClass::GetClass(""class"") to get access to a; TClass object for a certain class. TClass(const char* name, Version_t cversion, const char* dfil = 0, const char* ifil = 0, Int_t dl = 0, Int_t il = 0, Bool_t silent = kFALSE); Create a TClass object. This object contains the full dictionary; of a class. It has list to baseclasses, datamembers and methods. TClass(const char* name, Version_t cversion,",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:22047,Modifiability,inherit,inherited,22047,"eparated by semi-colons ';'; attributes : list of possible qualifiers amongs:; Owner, NotOwner; version : list of the version of the class layout that this rule applies to. The syntax can be [1,4,5] or [2-] or [1-3] or [-3]; checksum : comma delimited list of the checksums of the class layout that this rule applies to.; code={...} : code to be executed for the rule or name of the function implementing it. void AdoptSchemaRules(ROOT::TSchemaRuleSet* rules); Adopt a new set of Data Model Evolution rules. const ROOT::TSchemaRuleSet* GetSchemaRules() const; Return the set of the schema rules if any. ROOT::TSchemaRuleSet* GetSchemaRules(Bool_t create = kFALSE); Return the set of the schema rules if any.; If create is true, create an empty set. void AddImplFile(const char* filename, int line). void AddRef(TClassRef* ref); Register a TClassRef object which points to this TClass object.; When this TClass object is deleted, 'ref' will be 'Reset'. Int_t AutoBrowse(TObject* obj, TBrowser* browser); Browse external object inherited from TObject.; It passes through inheritance tree and calls TBrowser::Add; in appropriate cases. Static function. Int_t Browse(void* obj, TBrowser* b) const; Browse objects of of the class described by this TClass object. void Browse(TBrowser* b); This method is called by a browser to get the class information. void BuildRealData(void* pointer = 0, Bool_t isTransient = kFALSE); Build a full list of persistent data members.; Scans the list of all data members in the class itself and also; in all base classes. For each persistent data member, inserts a; TRealData object in the list fRealData. If pointer is not 0, uses the object at pointer; otherwise creates a temporary object of this class. void BuildEmulatedRealData(const char* name, Long_t offset, TClass* cl); Build the list of real data for an emulated class. void CalculateStreamerOffset() const; Calculate the offset between an object of this class to; its base class TObject. The pointer can be adj",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:22090,Modifiability,inherit,inheritance,22090,"wner; version : list of the version of the class layout that this rule applies to. The syntax can be [1,4,5] or [2-] or [1-3] or [-3]; checksum : comma delimited list of the checksums of the class layout that this rule applies to.; code={...} : code to be executed for the rule or name of the function implementing it. void AdoptSchemaRules(ROOT::TSchemaRuleSet* rules); Adopt a new set of Data Model Evolution rules. const ROOT::TSchemaRuleSet* GetSchemaRules() const; Return the set of the schema rules if any. ROOT::TSchemaRuleSet* GetSchemaRules(Bool_t create = kFALSE); Return the set of the schema rules if any.; If create is true, create an empty set. void AddImplFile(const char* filename, int line). void AddRef(TClassRef* ref); Register a TClassRef object which points to this TClass object.; When this TClass object is deleted, 'ref' will be 'Reset'. Int_t AutoBrowse(TObject* obj, TBrowser* browser); Browse external object inherited from TObject.; It passes through inheritance tree and calls TBrowser::Add; in appropriate cases. Static function. Int_t Browse(void* obj, TBrowser* b) const; Browse objects of of the class described by this TClass object. void Browse(TBrowser* b); This method is called by a browser to get the class information. void BuildRealData(void* pointer = 0, Bool_t isTransient = kFALSE); Build a full list of persistent data members.; Scans the list of all data members in the class itself and also; in all base classes. For each persistent data member, inserts a; TRealData object in the list fRealData. If pointer is not 0, uses the object at pointer; otherwise creates a temporary object of this class. void BuildEmulatedRealData(const char* name, Long_t offset, TClass* cl); Build the list of real data for an emulated class. void CalculateStreamerOffset() const; Calculate the offset between an object of this class to; its base class TObject. The pointer can be adjusted by; that offset to access any virtual method of TObject like; Streamer() and ShowMemb",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:24086,Modifiability,inherit,inheritance,24086,"od of TObject like; Streamer() and ShowMembers(). Bool_t CallShowMembers(void* obj, TMemberInspector& insp, Int_t isATObject = -1) const; Call ShowMembers() on the obj of this class type, passing insp and parent.; isATObject is -1 if unknown, 0 if it is not a TObject, and 1 if it is a TObject.; The function returns whether it was able to call ShowMembers(). void InterpretedShowMembers(void* obj, TMemberInspector& insp); Do a ShowMembers() traversal of all members and base classes' members; using the reflection information from the interpreter. Works also for; ionterpreted objects. Bool_t CanSplit() const; Return true if the data member of this TClass can be saved separately. TObject * Clone(const char* newname = """") const; Create a Clone of this TClass object using a different name but using the same 'dictionary'.; This effectively creates a hard alias for the class name. void CopyCollectionProxy(const TVirtualCollectionProxy& ); Copy the argument. void Draw(Option_t* option = """"); Draw detailed class inheritance structure.; If a class B inherits from a class A, the description of B is drawn; on the right side of the description of A.; Member functions overridden by B are shown in class A with a blue line; erasing the corresponding member function. void Dump(void* obj) const; Dump contents of object on stdout.; Using the information in the object dictionary; each data member is interpreted.; If a data member is a pointer, the pointer value is printed; 'obj' is assume to point to an object of the class describe by this TClass. The following output is the Dump of a TArrow object:; fAngle 0 Arrow opening angle (degrees); fArrowSize 0.2 Arrow Size; fOption.*fData; fX1 0.1 X of 1st point; fY1 0.15 Y of 1st point; fX2 0.67 X of 2nd point; fY2 0.83 Y of 2nd point; fUniqueID 0 object unique identifier; fBits 50331648 bit field status word; fLineColor 1 line color; fLineStyle 1 line style; fLineWidth 1 line width; fFillColor 19 fill area color; fFillStyle 1001 fill area style",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:24123,Modifiability,inherit,inherits,24123,"ector& insp, Int_t isATObject = -1) const; Call ShowMembers() on the obj of this class type, passing insp and parent.; isATObject is -1 if unknown, 0 if it is not a TObject, and 1 if it is a TObject.; The function returns whether it was able to call ShowMembers(). void InterpretedShowMembers(void* obj, TMemberInspector& insp); Do a ShowMembers() traversal of all members and base classes' members; using the reflection information from the interpreter. Works also for; ionterpreted objects. Bool_t CanSplit() const; Return true if the data member of this TClass can be saved separately. TObject * Clone(const char* newname = """") const; Create a Clone of this TClass object using a different name but using the same 'dictionary'.; This effectively creates a hard alias for the class name. void CopyCollectionProxy(const TVirtualCollectionProxy& ); Copy the argument. void Draw(Option_t* option = """"); Draw detailed class inheritance structure.; If a class B inherits from a class A, the description of B is drawn; on the right side of the description of A.; Member functions overridden by B are shown in class A with a blue line; erasing the corresponding member function. void Dump(void* obj) const; Dump contents of object on stdout.; Using the information in the object dictionary; each data member is interpreted.; If a data member is a pointer, the pointer value is printed; 'obj' is assume to point to an object of the class describe by this TClass. The following output is the Dump of a TArrow object:; fAngle 0 Arrow opening angle (degrees); fArrowSize 0.2 Arrow Size; fOption.*fData; fX1 0.1 X of 1st point; fY1 0.15 Y of 1st point; fX2 0.67 X of 2nd point; fY2 0.83 Y of 2nd point; fUniqueID 0 object unique identifier; fBits 50331648 bit field status word; fLineColor 1 line color; fLineStyle 1 line style; fLineWidth 1 line width; fFillColor 19 fill area color; fFillStyle 1001 fill area style. char * EscapeChars(const char* text) const; Introduce an escape character (@) in front of a s",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:26096,Modifiability,inherit,inheritance,26096,"(const char* text) const; Introduce an escape character (@) in front of a special chars.; You need to use the result immediately before it is being overwritten. TClass * GetActualClass(const void* object) const; Return a pointer the the real class of the object.; This is equivalent to object->IsA() when the class has a ClassDef.; It is REQUIRED that object is coming from a proper pointer to the; class represented by 'this'.; Example: Special case:; class MyClass : public AnotherClass, public TObject; then on return, one must do:; TObject *obj = (TObject*)((void*)myobject)directory->Get(""some object of MyClass"");; MyClass::Class()->GetActualClass(obj); // this would be wrong!!!; Also if the class represented by 'this' and NONE of its parents classes; have a virtual ptr table, the result will be 'this' and NOT the actual; class. TClass * GetBaseClass(const char* classname); Return pointer to the base class ""classname"". Returns 0 in case; ""classname"" is not a base class. Takes care of multiple inheritance. TClass * GetBaseClass(const TClass* base); Return pointer to the base class ""cl"". Returns 0 in case ""cl""; is not a base class. Takes care of multiple inheritance. Int_t GetBaseClassOffsetRecurse(const TClass* base); Return data member offset to the base class ""cl"".; Returns -1 in case ""cl"" is not a base class.; Returns -2 if cl is a base class, but we can't find the offset; because it's virtual.; Takes care of multiple inheritance. Int_t GetBaseClassOffset(const TClass* base); Return data member offset to the base class ""cl"".; Returns -1 in case ""cl"" is not a base class.; Takes care of multiple inheritance. TClass * GetBaseDataMember(const char* datamember); Return pointer to (base) class that contains datamember. TVirtualCollectionProxy * GetCollectionProxy() const; Return the proxy describinb the collection (if any). TClassStreamer * GetStreamer() const; Return the Streamer Class allowing streaming (if any). ClassStreamerFunc_t GetStreamerFunc() const; Get a wrappe",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:26259,Modifiability,inherit,inheritance,26259,"lass * GetActualClass(const void* object) const; Return a pointer the the real class of the object.; This is equivalent to object->IsA() when the class has a ClassDef.; It is REQUIRED that object is coming from a proper pointer to the; class represented by 'this'.; Example: Special case:; class MyClass : public AnotherClass, public TObject; then on return, one must do:; TObject *obj = (TObject*)((void*)myobject)directory->Get(""some object of MyClass"");; MyClass::Class()->GetActualClass(obj); // this would be wrong!!!; Also if the class represented by 'this' and NONE of its parents classes; have a virtual ptr table, the result will be 'this' and NOT the actual; class. TClass * GetBaseClass(const char* classname); Return pointer to the base class ""classname"". Returns 0 in case; ""classname"" is not a base class. Takes care of multiple inheritance. TClass * GetBaseClass(const TClass* base); Return pointer to the base class ""cl"". Returns 0 in case ""cl""; is not a base class. Takes care of multiple inheritance. Int_t GetBaseClassOffsetRecurse(const TClass* base); Return data member offset to the base class ""cl"".; Returns -1 in case ""cl"" is not a base class.; Returns -2 if cl is a base class, but we can't find the offset; because it's virtual.; Takes care of multiple inheritance. Int_t GetBaseClassOffset(const TClass* base); Return data member offset to the base class ""cl"".; Returns -1 in case ""cl"" is not a base class.; Takes care of multiple inheritance. TClass * GetBaseDataMember(const char* datamember); Return pointer to (base) class that contains datamember. TVirtualCollectionProxy * GetCollectionProxy() const; Return the proxy describinb the collection (if any). TClassStreamer * GetStreamer() const; Return the Streamer Class allowing streaming (if any). ClassStreamerFunc_t GetStreamerFunc() const; Get a wrapper/accessor function around this class custom streamer (member function). TVirtualIsAProxy* GetIsAProxy() const; Return the proxy implementing the IsA functionality",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:26532,Modifiability,inherit,inheritance,26532,"e: Special case:; class MyClass : public AnotherClass, public TObject; then on return, one must do:; TObject *obj = (TObject*)((void*)myobject)directory->Get(""some object of MyClass"");; MyClass::Class()->GetActualClass(obj); // this would be wrong!!!; Also if the class represented by 'this' and NONE of its parents classes; have a virtual ptr table, the result will be 'this' and NOT the actual; class. TClass * GetBaseClass(const char* classname); Return pointer to the base class ""classname"". Returns 0 in case; ""classname"" is not a base class. Takes care of multiple inheritance. TClass * GetBaseClass(const TClass* base); Return pointer to the base class ""cl"". Returns 0 in case ""cl""; is not a base class. Takes care of multiple inheritance. Int_t GetBaseClassOffsetRecurse(const TClass* base); Return data member offset to the base class ""cl"".; Returns -1 in case ""cl"" is not a base class.; Returns -2 if cl is a base class, but we can't find the offset; because it's virtual.; Takes care of multiple inheritance. Int_t GetBaseClassOffset(const TClass* base); Return data member offset to the base class ""cl"".; Returns -1 in case ""cl"" is not a base class.; Takes care of multiple inheritance. TClass * GetBaseDataMember(const char* datamember); Return pointer to (base) class that contains datamember. TVirtualCollectionProxy * GetCollectionProxy() const; Return the proxy describinb the collection (if any). TClassStreamer * GetStreamer() const; Return the Streamer Class allowing streaming (if any). ClassStreamerFunc_t GetStreamerFunc() const; Get a wrapper/accessor function around this class custom streamer (member function). TVirtualIsAProxy* GetIsAProxy() const; Return the proxy implementing the IsA functionality. TClass * GetClass(const char* name, Bool_t load = kTRUE, Bool_t silent = kFALSE); Static method returning pointer to TClass of the specified class name.; If load is true an attempt is made to obtain the class by loading; the appropriate shared library (directed by the ro",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:26711,Modifiability,inherit,inheritance,26711,"ss"");; MyClass::Class()->GetActualClass(obj); // this would be wrong!!!; Also if the class represented by 'this' and NONE of its parents classes; have a virtual ptr table, the result will be 'this' and NOT the actual; class. TClass * GetBaseClass(const char* classname); Return pointer to the base class ""classname"". Returns 0 in case; ""classname"" is not a base class. Takes care of multiple inheritance. TClass * GetBaseClass(const TClass* base); Return pointer to the base class ""cl"". Returns 0 in case ""cl""; is not a base class. Takes care of multiple inheritance. Int_t GetBaseClassOffsetRecurse(const TClass* base); Return data member offset to the base class ""cl"".; Returns -1 in case ""cl"" is not a base class.; Returns -2 if cl is a base class, but we can't find the offset; because it's virtual.; Takes care of multiple inheritance. Int_t GetBaseClassOffset(const TClass* base); Return data member offset to the base class ""cl"".; Returns -1 in case ""cl"" is not a base class.; Takes care of multiple inheritance. TClass * GetBaseDataMember(const char* datamember); Return pointer to (base) class that contains datamember. TVirtualCollectionProxy * GetCollectionProxy() const; Return the proxy describinb the collection (if any). TClassStreamer * GetStreamer() const; Return the Streamer Class allowing streaming (if any). ClassStreamerFunc_t GetStreamerFunc() const; Get a wrapper/accessor function around this class custom streamer (member function). TVirtualIsAProxy* GetIsAProxy() const; Return the proxy implementing the IsA functionality. TClass * GetClass(const char* name, Bool_t load = kTRUE, Bool_t silent = kFALSE); Static method returning pointer to TClass of the specified class name.; If load is true an attempt is made to obtain the class by loading; the appropriate shared library (directed by the rootmap file).; If silent is 'true', do not warn about missing dictionary for the class.; (typically used for class that are used only for transient members); Returns 0 in case clas",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:33488,Modifiability,variab,variable,33488,"ook for a method in this class that has the interface function; address faddr. TMethod * GetClassMethod(const char* name, const char* signature); Look for a method in this class that has the name and; signature. Int_t GetNdata(); Return the number of data members of this class; Note that in case the list of data members is not yet created, it will be done; by GetListOfDataMembers(). Int_t GetNmethods(); Return the number of methods of this class; Note that in case the list of methods is not yet created, it will be done; by GetListOfMethods(). TVirtualStreamerInfo* GetStreamerInfo(Int_t version = 0) const; returns a pointer to the TVirtualStreamerInfo object for version; If the object doest not exist, it is created. Note: There are two special version numbers:. 0: Use the class version from the currently loaded class library.; -1: Assume no class library loaded (emulated class). Warning: If we create a new streamer info, whether or not the build; optimizes is controlled externally to us by a global variable!; Don't call us unless you have set that variable properly; with TStreamer::Optimize()!. void IgnoreTObjectStreamer(Bool_t ignore = kTRUE); When the class kIgnoreTObjectStreamer bit is set, the automatically; generated Streamer will not call TObject::Streamer.; This option saves the TObject space overhead on the file.; However, the information (fBits, fUniqueID) of TObject is lost. Note that to be effective for objects streamed object-wise this function; must be called for the class deriving directly from TObject, eg, assuming; that BigTrack derives from Track and Track derives from TObject, one must do:; Track::Class()->IgnoreTObjectStreamer();; and not:; BigTrack::Class()->IgnoreTObjectStreamer();; To be effective for object streamed member-wise or split in a TTree,; this function must be called for the most derived class (i.e. BigTrack). Bool_t InheritsFrom(const char* cl) const; Return kTRUE if this class inherits from a class with name ""classname"".; note that",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:33538,Modifiability,variab,variable,33538,"ook for a method in this class that has the interface function; address faddr. TMethod * GetClassMethod(const char* name, const char* signature); Look for a method in this class that has the name and; signature. Int_t GetNdata(); Return the number of data members of this class; Note that in case the list of data members is not yet created, it will be done; by GetListOfDataMembers(). Int_t GetNmethods(); Return the number of methods of this class; Note that in case the list of methods is not yet created, it will be done; by GetListOfMethods(). TVirtualStreamerInfo* GetStreamerInfo(Int_t version = 0) const; returns a pointer to the TVirtualStreamerInfo object for version; If the object doest not exist, it is created. Note: There are two special version numbers:. 0: Use the class version from the currently loaded class library.; -1: Assume no class library loaded (emulated class). Warning: If we create a new streamer info, whether or not the build; optimizes is controlled externally to us by a global variable!; Don't call us unless you have set that variable properly; with TStreamer::Optimize()!. void IgnoreTObjectStreamer(Bool_t ignore = kTRUE); When the class kIgnoreTObjectStreamer bit is set, the automatically; generated Streamer will not call TObject::Streamer.; This option saves the TObject space overhead on the file.; However, the information (fBits, fUniqueID) of TObject is lost. Note that to be effective for objects streamed object-wise this function; must be called for the class deriving directly from TObject, eg, assuming; that BigTrack derives from Track and Track derives from TObject, one must do:; Track::Class()->IgnoreTObjectStreamer();; and not:; BigTrack::Class()->IgnoreTObjectStreamer();; To be effective for object streamed member-wise or split in a TTree,; this function must be called for the most derived class (i.e. BigTrack). Bool_t InheritsFrom(const char* cl) const; Return kTRUE if this class inherits from a class with name ""classname"".; note that",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:34357,Modifiability,Inherit,InheritsFrom,34357,"o, whether or not the build; optimizes is controlled externally to us by a global variable!; Don't call us unless you have set that variable properly; with TStreamer::Optimize()!. void IgnoreTObjectStreamer(Bool_t ignore = kTRUE); When the class kIgnoreTObjectStreamer bit is set, the automatically; generated Streamer will not call TObject::Streamer.; This option saves the TObject space overhead on the file.; However, the information (fBits, fUniqueID) of TObject is lost. Note that to be effective for objects streamed object-wise this function; must be called for the class deriving directly from TObject, eg, assuming; that BigTrack derives from Track and Track derives from TObject, one must do:; Track::Class()->IgnoreTObjectStreamer();; and not:; BigTrack::Class()->IgnoreTObjectStreamer();; To be effective for object streamed member-wise or split in a TTree,; this function must be called for the most derived class (i.e. BigTrack). Bool_t InheritsFrom(const char* cl) const; Return kTRUE if this class inherits from a class with name ""classname"".; note that the function returns KTRUE in case classname is the class itself. Bool_t InheritsFrom(const TClass* cl) const; Return kTRUE if this class inherits from class cl.; note that the function returns KTRUE in case cl is the class itself. void * DynamicCast(const TClass* base, void* obj, Bool_t up = kTRUE); Cast obj of this class type up to baseclass cl if up is true.; Cast obj of this class type down from baseclass cl if up is false.; If this class is not a baseclass of cl return 0, else the pointer; to the cl part of this (up) or to this (down). void * New(TClass::ENewType defConstructor = kClassNew) const; Return a pointer to a newly allocated object of this class.; The class must have a default constructor. For meaning of; defConstructor, see TClass::IsCallingNew(). The constructor actually called here can be customized by; using the rootcint pragma:; #pragma link C++ ioctortype UserClass;; For example, with this pragma ",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:34420,Modifiability,inherit,inherits,34420,"o, whether or not the build; optimizes is controlled externally to us by a global variable!; Don't call us unless you have set that variable properly; with TStreamer::Optimize()!. void IgnoreTObjectStreamer(Bool_t ignore = kTRUE); When the class kIgnoreTObjectStreamer bit is set, the automatically; generated Streamer will not call TObject::Streamer.; This option saves the TObject space overhead on the file.; However, the information (fBits, fUniqueID) of TObject is lost. Note that to be effective for objects streamed object-wise this function; must be called for the class deriving directly from TObject, eg, assuming; that BigTrack derives from Track and Track derives from TObject, one must do:; Track::Class()->IgnoreTObjectStreamer();; and not:; BigTrack::Class()->IgnoreTObjectStreamer();; To be effective for object streamed member-wise or split in a TTree,; this function must be called for the most derived class (i.e. BigTrack). Bool_t InheritsFrom(const char* cl) const; Return kTRUE if this class inherits from a class with name ""classname"".; note that the function returns KTRUE in case classname is the class itself. Bool_t InheritsFrom(const TClass* cl) const; Return kTRUE if this class inherits from class cl.; note that the function returns KTRUE in case cl is the class itself. void * DynamicCast(const TClass* base, void* obj, Bool_t up = kTRUE); Cast obj of this class type up to baseclass cl if up is true.; Cast obj of this class type down from baseclass cl if up is false.; If this class is not a baseclass of cl return 0, else the pointer; to the cl part of this (up) or to this (down). void * New(TClass::ENewType defConstructor = kClassNew) const; Return a pointer to a newly allocated object of this class.; The class must have a default constructor. For meaning of; defConstructor, see TClass::IsCallingNew(). The constructor actually called here can be customized by; using the rootcint pragma:; #pragma link C++ ioctortype UserClass;; For example, with this pragma ",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:34549,Modifiability,Inherit,InheritsFrom,34549,"d IgnoreTObjectStreamer(Bool_t ignore = kTRUE); When the class kIgnoreTObjectStreamer bit is set, the automatically; generated Streamer will not call TObject::Streamer.; This option saves the TObject space overhead on the file.; However, the information (fBits, fUniqueID) of TObject is lost. Note that to be effective for objects streamed object-wise this function; must be called for the class deriving directly from TObject, eg, assuming; that BigTrack derives from Track and Track derives from TObject, one must do:; Track::Class()->IgnoreTObjectStreamer();; and not:; BigTrack::Class()->IgnoreTObjectStreamer();; To be effective for object streamed member-wise or split in a TTree,; this function must be called for the most derived class (i.e. BigTrack). Bool_t InheritsFrom(const char* cl) const; Return kTRUE if this class inherits from a class with name ""classname"".; note that the function returns KTRUE in case classname is the class itself. Bool_t InheritsFrom(const TClass* cl) const; Return kTRUE if this class inherits from class cl.; note that the function returns KTRUE in case cl is the class itself. void * DynamicCast(const TClass* base, void* obj, Bool_t up = kTRUE); Cast obj of this class type up to baseclass cl if up is true.; Cast obj of this class type down from baseclass cl if up is false.; If this class is not a baseclass of cl return 0, else the pointer; to the cl part of this (up) or to this (down). void * New(TClass::ENewType defConstructor = kClassNew) const; Return a pointer to a newly allocated object of this class.; The class must have a default constructor. For meaning of; defConstructor, see TClass::IsCallingNew(). The constructor actually called here can be customized by; using the rootcint pragma:; #pragma link C++ ioctortype UserClass;; For example, with this pragma and a class named MyClass,; this method will called the first of the following 3; constructors which exists and is public:; MyClass(UserClass*);; MyClass(TRootIOCtor*);; MyClass(); /",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:34614,Modifiability,inherit,inherits,34614,"d IgnoreTObjectStreamer(Bool_t ignore = kTRUE); When the class kIgnoreTObjectStreamer bit is set, the automatically; generated Streamer will not call TObject::Streamer.; This option saves the TObject space overhead on the file.; However, the information (fBits, fUniqueID) of TObject is lost. Note that to be effective for objects streamed object-wise this function; must be called for the class deriving directly from TObject, eg, assuming; that BigTrack derives from Track and Track derives from TObject, one must do:; Track::Class()->IgnoreTObjectStreamer();; and not:; BigTrack::Class()->IgnoreTObjectStreamer();; To be effective for object streamed member-wise or split in a TTree,; this function must be called for the most derived class (i.e. BigTrack). Bool_t InheritsFrom(const char* cl) const; Return kTRUE if this class inherits from a class with name ""classname"".; note that the function returns KTRUE in case classname is the class itself. Bool_t InheritsFrom(const TClass* cl) const; Return kTRUE if this class inherits from class cl.; note that the function returns KTRUE in case cl is the class itself. void * DynamicCast(const TClass* base, void* obj, Bool_t up = kTRUE); Cast obj of this class type up to baseclass cl if up is true.; Cast obj of this class type down from baseclass cl if up is false.; If this class is not a baseclass of cl return 0, else the pointer; to the cl part of this (up) or to this (down). void * New(TClass::ENewType defConstructor = kClassNew) const; Return a pointer to a newly allocated object of this class.; The class must have a default constructor. For meaning of; defConstructor, see TClass::IsCallingNew(). The constructor actually called here can be customized by; using the rootcint pragma:; #pragma link C++ ioctortype UserClass;; For example, with this pragma and a class named MyClass,; this method will called the first of the following 3; constructors which exists and is public:; MyClass(UserClass*);; MyClass(TRootIOCtor*);; MyClass(); /",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:38253,Modifiability,inherit,inherits,38253,"tClassVersion; defined in TClassTable.cxx. Note on class version numbers:; If no class number has been specified, TClass::GetVersion will return -1; The Class Version 0 request the whole object to be transient; The Class Version 1, unless specified via ClassDef indicates that the; I/O should use the TClass checksum to distinguish the layout of the class. void SetCurrentStreamerInfo(TVirtualStreamerInfo* info); Set pointer to current TVirtualStreamerInfo. Int_t Size() const; Return size of object of this class. TClass * Load(TBuffer& b); Load class description from I/O buffer and return class object. void Store(TBuffer& b) const; Store class description on I/O buffer. Bool_t IsLoaded() const; Return true if the shared library of this class is currently in the a; process's memory. Return false, after the shared library has been; unloaded or if this is an 'emulated' class created from a file's StreamerInfo. Bool_t IsStartingWithTObject() const; Returns true if this class inherits from TObject and if the start of; the TObject parts is at the very beginning of the objects.; Concretly this means that the following code is proper for this class:; ThisClass *ptr;; void *void_ptr = (void)ptr;; TObject *obj = (TObject*)void_ptr;; This code would be wrong if 'ThisClass' did not inherit 'first' from; TObject. Bool_t IsTObject() const; Return kTRUE is the class inherits from TObject. Bool_t IsForeign() const; Return kTRUE is the class is Foreign (the class does not have a Streamer method). void PostLoadCheck(); Do the initialization that can only be done after the CINT dictionary has; been fully populated and can not be delayed efficiently. Long_t Property() const; Set TObject::fBits and fStreamerType to cache information about the; class. The bits are; kIsTObject : the class inherits from TObject; kStartWithTObject: TObject is the left-most class in the inheritance tree; kIsForeign : the class doe not have a Streamer method; The value of fStreamerType are; kTObject : the class i",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:38558,Modifiability,inherit,inherit,38558,"ransient; The Class Version 1, unless specified via ClassDef indicates that the; I/O should use the TClass checksum to distinguish the layout of the class. void SetCurrentStreamerInfo(TVirtualStreamerInfo* info); Set pointer to current TVirtualStreamerInfo. Int_t Size() const; Return size of object of this class. TClass * Load(TBuffer& b); Load class description from I/O buffer and return class object. void Store(TBuffer& b) const; Store class description on I/O buffer. Bool_t IsLoaded() const; Return true if the shared library of this class is currently in the a; process's memory. Return false, after the shared library has been; unloaded or if this is an 'emulated' class created from a file's StreamerInfo. Bool_t IsStartingWithTObject() const; Returns true if this class inherits from TObject and if the start of; the TObject parts is at the very beginning of the objects.; Concretly this means that the following code is proper for this class:; ThisClass *ptr;; void *void_ptr = (void)ptr;; TObject *obj = (TObject*)void_ptr;; This code would be wrong if 'ThisClass' did not inherit 'first' from; TObject. Bool_t IsTObject() const; Return kTRUE is the class inherits from TObject. Bool_t IsForeign() const; Return kTRUE is the class is Foreign (the class does not have a Streamer method). void PostLoadCheck(); Do the initialization that can only be done after the CINT dictionary has; been fully populated and can not be delayed efficiently. Long_t Property() const; Set TObject::fBits and fStreamerType to cache information about the; class. The bits are; kIsTObject : the class inherits from TObject; kStartWithTObject: TObject is the left-most class in the inheritance tree; kIsForeign : the class doe not have a Streamer method; The value of fStreamerType are; kTObject : the class inherits from TObject; kForeign : the class does not have a Streamer method; kInstrumented: the class does have a Streamer method; kExternal: the class has a free standing way of streaming itself; kEmu",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:38641,Modifiability,inherit,inherits,38641,". void SetCurrentStreamerInfo(TVirtualStreamerInfo* info); Set pointer to current TVirtualStreamerInfo. Int_t Size() const; Return size of object of this class. TClass * Load(TBuffer& b); Load class description from I/O buffer and return class object. void Store(TBuffer& b) const; Store class description on I/O buffer. Bool_t IsLoaded() const; Return true if the shared library of this class is currently in the a; process's memory. Return false, after the shared library has been; unloaded or if this is an 'emulated' class created from a file's StreamerInfo. Bool_t IsStartingWithTObject() const; Returns true if this class inherits from TObject and if the start of; the TObject parts is at the very beginning of the objects.; Concretly this means that the following code is proper for this class:; ThisClass *ptr;; void *void_ptr = (void)ptr;; TObject *obj = (TObject*)void_ptr;; This code would be wrong if 'ThisClass' did not inherit 'first' from; TObject. Bool_t IsTObject() const; Return kTRUE is the class inherits from TObject. Bool_t IsForeign() const; Return kTRUE is the class is Foreign (the class does not have a Streamer method). void PostLoadCheck(); Do the initialization that can only be done after the CINT dictionary has; been fully populated and can not be delayed efficiently. Long_t Property() const; Set TObject::fBits and fStreamerType to cache information about the; class. The bits are; kIsTObject : the class inherits from TObject; kStartWithTObject: TObject is the left-most class in the inheritance tree; kIsForeign : the class doe not have a Streamer method; The value of fStreamerType are; kTObject : the class inherits from TObject; kForeign : the class does not have a Streamer method; kInstrumented: the class does have a Streamer method; kExternal: the class has a free standing way of streaming itself; kEmulated: the class is missing its shared library. void SetCollectionProxy(const ROOT::TCollectionProxyInfo& ); Create the collection proxy object (and the st",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:39064,Modifiability,inherit,inherits,39064,"ct and if the start of; the TObject parts is at the very beginning of the objects.; Concretly this means that the following code is proper for this class:; ThisClass *ptr;; void *void_ptr = (void)ptr;; TObject *obj = (TObject*)void_ptr;; This code would be wrong if 'ThisClass' did not inherit 'first' from; TObject. Bool_t IsTObject() const; Return kTRUE is the class inherits from TObject. Bool_t IsForeign() const; Return kTRUE is the class is Foreign (the class does not have a Streamer method). void PostLoadCheck(); Do the initialization that can only be done after the CINT dictionary has; been fully populated and can not be delayed efficiently. Long_t Property() const; Set TObject::fBits and fStreamerType to cache information about the; class. The bits are; kIsTObject : the class inherits from TObject; kStartWithTObject: TObject is the left-most class in the inheritance tree; kIsForeign : the class doe not have a Streamer method; The value of fStreamerType are; kTObject : the class inherits from TObject; kForeign : the class does not have a Streamer method; kInstrumented: the class does have a Streamer method; kExternal: the class has a free standing way of streaming itself; kEmulated: the class is missing its shared library. void SetCollectionProxy(const ROOT::TCollectionProxyInfo& ); Create the collection proxy object (and the streamer object) from; using the information in the TCollectionProxyInfo. void SetContextMenuTitle(const char* title); Change (i.e. set) the title of the TNamed. void SetGlobalIsA(IsAGlobalFunc_t ); This function installs a global IsA function for this class.; The global IsA function will be used if there is no local IsA function (fIsA). A global IsA function has the signature:. TClass *func( TClass *cl, const void *obj);. 'cl' is a pointer to the TClass object that corresponds to the; 'pointer type' used to retrieve the value 'obj'. For example with:; TNamed * m = new TNamed(""example"",""test"");; TObject* o = m; and; the global IsA function ",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:39144,Modifiability,inherit,inheritance,39144,"ct and if the start of; the TObject parts is at the very beginning of the objects.; Concretly this means that the following code is proper for this class:; ThisClass *ptr;; void *void_ptr = (void)ptr;; TObject *obj = (TObject*)void_ptr;; This code would be wrong if 'ThisClass' did not inherit 'first' from; TObject. Bool_t IsTObject() const; Return kTRUE is the class inherits from TObject. Bool_t IsForeign() const; Return kTRUE is the class is Foreign (the class does not have a Streamer method). void PostLoadCheck(); Do the initialization that can only be done after the CINT dictionary has; been fully populated and can not be delayed efficiently. Long_t Property() const; Set TObject::fBits and fStreamerType to cache information about the; class. The bits are; kIsTObject : the class inherits from TObject; kStartWithTObject: TObject is the left-most class in the inheritance tree; kIsForeign : the class doe not have a Streamer method; The value of fStreamerType are; kTObject : the class inherits from TObject; kForeign : the class does not have a Streamer method; kInstrumented: the class does have a Streamer method; kExternal: the class has a free standing way of streaming itself; kEmulated: the class is missing its shared library. void SetCollectionProxy(const ROOT::TCollectionProxyInfo& ); Create the collection proxy object (and the streamer object) from; using the information in the TCollectionProxyInfo. void SetContextMenuTitle(const char* title); Change (i.e. set) the title of the TNamed. void SetGlobalIsA(IsAGlobalFunc_t ); This function installs a global IsA function for this class.; The global IsA function will be used if there is no local IsA function (fIsA). A global IsA function has the signature:. TClass *func( TClass *cl, const void *obj);. 'cl' is a pointer to the TClass object that corresponds to the; 'pointer type' used to retrieve the value 'obj'. For example with:; TNamed * m = new TNamed(""example"",""test"");; TObject* o = m; and; the global IsA function ",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:39270,Modifiability,inherit,inherits,39270,"ct and if the start of; the TObject parts is at the very beginning of the objects.; Concretly this means that the following code is proper for this class:; ThisClass *ptr;; void *void_ptr = (void)ptr;; TObject *obj = (TObject*)void_ptr;; This code would be wrong if 'ThisClass' did not inherit 'first' from; TObject. Bool_t IsTObject() const; Return kTRUE is the class inherits from TObject. Bool_t IsForeign() const; Return kTRUE is the class is Foreign (the class does not have a Streamer method). void PostLoadCheck(); Do the initialization that can only be done after the CINT dictionary has; been fully populated and can not be delayed efficiently. Long_t Property() const; Set TObject::fBits and fStreamerType to cache information about the; class. The bits are; kIsTObject : the class inherits from TObject; kStartWithTObject: TObject is the left-most class in the inheritance tree; kIsForeign : the class doe not have a Streamer method; The value of fStreamerType are; kTObject : the class inherits from TObject; kForeign : the class does not have a Streamer method; kInstrumented: the class does have a Streamer method; kExternal: the class has a free standing way of streaming itself; kEmulated: the class is missing its shared library. void SetCollectionProxy(const ROOT::TCollectionProxyInfo& ); Create the collection proxy object (and the streamer object) from; using the information in the TCollectionProxyInfo. void SetContextMenuTitle(const char* title); Change (i.e. set) the title of the TNamed. void SetGlobalIsA(IsAGlobalFunc_t ); This function installs a global IsA function for this class.; The global IsA function will be used if there is no local IsA function (fIsA). A global IsA function has the signature:. TClass *func( TClass *cl, const void *obj);. 'cl' is a pointer to the TClass object that corresponds to the; 'pointer type' used to retrieve the value 'obj'. For example with:; TNamed * m = new TNamed(""example"",""test"");; TObject* o = m; and; the global IsA function ",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:644,Performance,load,load,644,". TClass. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » META; » TClass. class TClass: public TDictionary. The ROOT global object gROOT contains a list of all defined; classes. This list is build when a reference to a class dictionary; is made. When this happens, the static ""class""::Dictionary(); function is called to create a TClass object describing the; class. The Dictionary() function is defined in the ClassDef; macro and stored (at program startup or library load time) together; with the class name in the TClassTable singleton object.; For a description of all dictionary classes see TDictionary. Function Members (Methods); public:. TClass(); TClass(const char* name, Bool_t silent = kFALSE); TClass(const char* name, Version_t cversion, const char* dfil = 0, const char* ifil = 0, Int_t dl = 0, Int_t il = 0, Bool_t silent = kFALSE); TClass(const char* name, Version_t cversion, const type_info& info, TVirtualIsAProxy* isa, ShowMembersFunc_t showmember, const char* dfil, const char* ifil, Int_t dl, Int_t il, Bool_t silent = kFALSE); virtual~TClass(); voidTObject::AbstractMethod(const char* method) const; static voidAddClass(TClass* cl); voidAddImplFile(const char* filename, int line); voidAddInstance(Bool_t heap = kFALSE); voidAddRef(TClassRef* ref); static Bool_tAddRule(const char* rule); voidAdoptMemberStreamer(const char* name, TMemberStreamer* strm); voidAdoptReferenceProxy(TVirtualRefProxy* proxy); voidAdoptSchemaRules(ROOT::TSchemaRuleSet* rules); voidAdoptStreamer(TClassStreamer* strm); virtual voidTObject::AppendPad(Option_t* option = """"); static Int_tAutoBrowse(TObject* obj, TBrowser* browser); virtual voidBrowse(TBrowser* b); Int_tBrowse(void* obj, TBrowser* b) const; voidBuildEmulatedRealData(const char* name, Long_t offset, TClass* cl); voidBuildRealData(void* pointer = 0, Bool_t is",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:4225,Performance,load,load,4225,", Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); TVirtualStreamerInfo*FindConversionStreamerInfo(const char* onfile_classname, UInt_t checksum) const; TVirtualStreamerInfo*FindConversionStreamerInfo(const TClass* onfile_cl, UInt_t checksum) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TVirtualStreamerInfo*FindStreamerInfo(UInt_t checksum) const; TClass*GetActualClass(const void* object) const; TClass*GetBaseClass(const char* classname); TClass*GetBaseClass(const TClass* base); Int_tGetBaseClassOffset(const TClass* base); TClass*GetBaseDataMember(const char* datamember); UInt_tGetCheckSum(UInt_t code = 0) const; static TClass*GetClass(const char* name, Bool_t load = kTRUE, Bool_t silent = kFALSE); static TClass*GetClass(const type_info& typeinfo, Bool_t load = kTRUE, Bool_t silent = kFALSE); ClassInfo_t*GetClassInfo() const; Version_tGetClassVersion() const; TVirtualCollectionProxy*GetCollectionProxy() const; const char*GetContextMenuTitle() const; TVirtualStreamerInfo*GetConversionStreamerInfo(const char* onfile_classname, Int_t version) const; TVirtualStreamerInfo*GetConversionStreamerInfo(const TClass* onfile_cl, Int_t version) const; TVirtualStreamerInfo*GetCurrentStreamerInfo(); TDataMember*GetDataMember(const char* datamember) const; Long_tGetDataMemberOffset(const char* membername) const; Short_tGetDeclFileLine() const; const char*GetDeclFileName() const; ROOT::DelFunc_tGetDelete() const; ROOT::DelArrFunc_tGetDeleteArray() const; ROOT::DesFunc_tGetDestructor() const; static VoidFuncPtr_tGetDict(const char* cname); static VoidFuncPtr_tGetDict(const type_info& info); static TDictionary*TDictionary::GetDictionary(const char* name); static ",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:4321,Performance,load,load,4321,"or = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); TVirtualStreamerInfo*FindConversionStreamerInfo(const char* onfile_classname, UInt_t checksum) const; TVirtualStreamerInfo*FindConversionStreamerInfo(const TClass* onfile_cl, UInt_t checksum) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TVirtualStreamerInfo*FindStreamerInfo(UInt_t checksum) const; TClass*GetActualClass(const void* object) const; TClass*GetBaseClass(const char* classname); TClass*GetBaseClass(const TClass* base); Int_tGetBaseClassOffset(const TClass* base); TClass*GetBaseDataMember(const char* datamember); UInt_tGetCheckSum(UInt_t code = 0) const; static TClass*GetClass(const char* name, Bool_t load = kTRUE, Bool_t silent = kFALSE); static TClass*GetClass(const type_info& typeinfo, Bool_t load = kTRUE, Bool_t silent = kFALSE); ClassInfo_t*GetClassInfo() const; Version_tGetClassVersion() const; TVirtualCollectionProxy*GetCollectionProxy() const; const char*GetContextMenuTitle() const; TVirtualStreamerInfo*GetConversionStreamerInfo(const char* onfile_classname, Int_t version) const; TVirtualStreamerInfo*GetConversionStreamerInfo(const TClass* onfile_cl, Int_t version) const; TVirtualStreamerInfo*GetCurrentStreamerInfo(); TDataMember*GetDataMember(const char* datamember) const; Long_tGetDataMemberOffset(const char* membername) const; Short_tGetDeclFileLine() const; const char*GetDeclFileName() const; ROOT::DelFunc_tGetDelete() const; ROOT::DelArrFunc_tGetDeleteArray() const; ROOT::DesFunc_tGetDestructor() const; static VoidFuncPtr_tGetDict(const char* cname); static VoidFuncPtr_tGetDict(const type_info& info); static TDictionary*TDictionary::GetDictionary(const char* name); static TDictionary*TDictionary::GetDictionary(const type_info& typeinfo); ROOT::DirAutoAdd_tGetDirector",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:8003,Performance,Load,Load,8003,"st; const type_info*GetTypeInfo() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); Bool_tHasDefaultConstructor() const; virtual ULong_tTNamed::Hash() const; voidIgnoreTObjectStreamer(Bool_t ignore = kTRUE); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tInheritsFrom(const char* cl) const; virtual Bool_tInheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidInterpretedShowMembers(void* obj, TMemberInspector& insp); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; static TClass::ENewTypeIsCallingNew(); virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tIsFolder() const; Bool_tIsFolder(void* obj) const; Bool_tIsForeign() const; Bool_tIsLoaded() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tIsStartingWithTObject() const; Bool_tIsTObject() const; Bool_tTObject::IsZombie() const; static TClass*Load(TBuffer& b); virtual voidls(Option_t* opt = """") const; voidMakeCustomMenuList(); voidTObject::MayNotUse(const char* method) const; voidMove(void* arenaFrom, void* arenaTo) const; void*New(TClass::ENewType defConstructor = kClassNew) const; void*New(void* arena, TClass::ENewType defConstructor = kClassNew) const; void*NewArray(Long_t nElements, TClass::ENewType defConstructor = kClassNew) const; void*NewArray(Long_t nElements, void* arena, TClass::ENewType defConstructor = kClassNew) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator ne",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:15003,Performance,cache,cached,15003,"nup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TList*fAllPubDataall public data members (including from base classes); TList*fAllPubMethodall public methods (including from base classes); TList*fBaselinked list for base classes; Int_tfCanSplit!Indicates whether this class can be split or not.; UInt_tfCheckSumchecksum of data members and base classes; ClassInfo_t*fClassInfopointer to CINT class info class; TList*fClassMenuListlist of class menu items; Version_tfClassVersionClass version Identifier; TVirtualCollectionProxy*fCollectionProxyCollection interface; TStringfContextMenuTitlecontext menu title; map<std::string,TObjArray*>*fConversionStreamerInfoArray of the streamer infos derived from another class.; TVirtualStreamerInfo*fCurrentInfo!cached current streamer info.; TList*fDatalinked list for data members; Short_tfDeclFileLineline of class declaration; const char*fDeclFileNamename of class declaration file; void*fDeletepointer to a function deleting one object.; void*fDeleteArraypointer to a function deleting an array of objects.; void*fDestructorpointer to a function call an object's destructor.; void*fDirAutoAddpointer which implements the Directory Auto Add feature for this class.']'; IsAGlobalFunc_tfGlobalIsApointer to a global IsA function.; Short_tfImplFileLineline of class implementation; const char*fImplFileNamename of class implementation file; UInt_tfInstanceCountnumber of instances of this class; void*fInterShowMembersInterpreter call setup for ShowMembers; TVirtualIsAProxy*fIsA!pointer to the class's IsA proxy.; TMethodCall*fIsAMethod!saved info to call a IsA member function; Bool_tfIsOffsetStreamerSet!saved remember if fOffsetStreamer has been set.; void*fMergepointer to a function implementing Mergin",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:17185,Performance,cache,cached,17185,"amer!saved info to call Streamer; UInt_tfOnHeapnumber of instances on heap; Long_tfProperty!Property; TList*fRealDatalinked list for persistent members including base classes; TVirtualRefProxy*fRefProxy!Pointer to reference proxy if this class represents a reference; TClassRef*fRefStart!List of references to this object; void*fResetAfterMergepointer to a function implementing Merging objects of this class.; ROOT::TSchemaRuleSet*fSchemaRules! Schema evolution rules; TStringfSharedLibsshared libraries containing class code; ShowMembersFunc_tfShowMemberspointer to the class's ShowMembers function; Int_tfSizeofSizeof the class.; TClassStreamer*fStreamerpointer to streamer function; ClassStreamerFunc_tfStreamerFuncWrapper around this class custom Streamer member function.; G__p2memfuncfStreamerImpl! Pointer to the function implementing the right streaming behavior for the class represented by this object.; TObjArray*fStreamerInfoArray of TVirtualStreamerInfo; Int_tfStreamerType!cached of the streaming method to use; const type_info*fTypeInfopointer to the C++ type information.; Bool_tfVersionUsed!Indicates whether GetClassVersion has been called; static TClass::ENewTypefgCallingNewIntent of why/how TClass::New() is called; static Int_tfgClassCountprovides unique id for a each class; static THashTable*fgClassShortTypedefHash; static THashTable*fgClassTypedefHash. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IdMap_t * GetIdMap(). void AddClass(TClass* cl); static: Add a class to the list and map of classes. void RemoveClass(TClass* cl); static: Remove a class from the list and map of classes. TClass(); Default ctor. TClass(const char* name, Bool_t silent = kFALSE); Create a TClass object. This object contains the full dictionary; of a class. It has list to baseclasses, datamembers and methods.; Use this ctor to create a standalone TClass object. Most useful; to get a TClass interface to an interpreted class. Used by TTabCom.; No",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:19785,Performance,load,loaded,19785,"dl, Int_t il, Bool_t silent = kFALSE); Create a TClass object. This object contains the full dictionary; of a class. It has list to baseclasses, datamembers and methods. void ForceReload(TClass* oldcl); we found at least one equivalent.; let's force a reload. void Init(const char* name, Version_t cversion, const type_info* info, TVirtualIsAProxy* isa, ShowMembersFunc_t showmember, const char* dfil, const char* ifil, Int_t dl, Int_t il, Bool_t silent); Initialize a TClass object. This object contains the full dictionary; of a class. It has list to baseclasses, datamembers and methods. TClass(const TClass& tc); copy constructor. TClass& operator=(const TClass& ); assignement operator. ~TClass(); TClass dtor. Deletes all list that might have been created. Int_t ReadRules(); Read the class.rules files from the default location:.; $ROOTSYS/etc/class.rules (or ROOTETCDIR/class.rules). Int_t ReadRules(const char* filename); Read a class.rules file which contains one rule per line with comment; starting with a #; Returns the number of rules loaded.; Returns -1 in case of error. Bool_t AddRule(const char* rule); Add a schema evolution customization rule.; The syntax of the rule can be either the short form:; [type=Read] classname membername [attributes=... ] [version=[...] ] [checksum=[...] ] [oldtype=...] [code={...}]; or the long form; [type=Read] sourceClass=classname [targetclass=newClassname] [ source=""type membername; [type2 membername2]"" ]; [target=""membername3;membername4""] [attributes=... ] [version=...] [checksum=...] [code={...}|functionname]. For example to set HepMC::GenVertex::m_event to _not_ owned the object it is pointing to:; HepMC::GenVertex m_event attributes=NotOwner. Semantic of the tags:; type : the type of the rule, valid values: Read, ReadRaw, Write, WriteRaw, the default is 'Read'.; sourceClass : the name of the class as it is on the rule file; targetClass : the name of the class as it is in the current code ; defaults to the value of sourceClass; s",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:27298,Performance,load,load,27298,"n data member offset to the base class ""cl"".; Returns -1 in case ""cl"" is not a base class.; Returns -2 if cl is a base class, but we can't find the offset; because it's virtual.; Takes care of multiple inheritance. Int_t GetBaseClassOffset(const TClass* base); Return data member offset to the base class ""cl"".; Returns -1 in case ""cl"" is not a base class.; Takes care of multiple inheritance. TClass * GetBaseDataMember(const char* datamember); Return pointer to (base) class that contains datamember. TVirtualCollectionProxy * GetCollectionProxy() const; Return the proxy describinb the collection (if any). TClassStreamer * GetStreamer() const; Return the Streamer Class allowing streaming (if any). ClassStreamerFunc_t GetStreamerFunc() const; Get a wrapper/accessor function around this class custom streamer (member function). TVirtualIsAProxy* GetIsAProxy() const; Return the proxy implementing the IsA functionality. TClass * GetClass(const char* name, Bool_t load = kTRUE, Bool_t silent = kFALSE); Static method returning pointer to TClass of the specified class name.; If load is true an attempt is made to obtain the class by loading; the appropriate shared library (directed by the rootmap file).; If silent is 'true', do not warn about missing dictionary for the class.; (typically used for class that are used only for transient members); Returns 0 in case class is not found. THashTable * GetClassShortTypedefHash(); Return the class' names massaged with TClassEdit::ShortType with kDropStlDefault. TClass * GetClass(const type_info& typeinfo, Bool_t load = kTRUE, Bool_t silent = kFALSE); Return pointer to class with name. VoidFuncPtr_t GetDict(const char* cname); Return a pointer to the dictionary loading function generated by; rootcint. VoidFuncPtr_t GetDict(const type_info& info); Return a pointer to the dictionary loading function generated by; rootcint. TDataMember * GetDataMember(const char* datamember) const; Return pointer to datamember object with name ""datamember"". Lo",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:27412,Performance,load,load,27412,"d the offset; because it's virtual.; Takes care of multiple inheritance. Int_t GetBaseClassOffset(const TClass* base); Return data member offset to the base class ""cl"".; Returns -1 in case ""cl"" is not a base class.; Takes care of multiple inheritance. TClass * GetBaseDataMember(const char* datamember); Return pointer to (base) class that contains datamember. TVirtualCollectionProxy * GetCollectionProxy() const; Return the proxy describinb the collection (if any). TClassStreamer * GetStreamer() const; Return the Streamer Class allowing streaming (if any). ClassStreamerFunc_t GetStreamerFunc() const; Get a wrapper/accessor function around this class custom streamer (member function). TVirtualIsAProxy* GetIsAProxy() const; Return the proxy implementing the IsA functionality. TClass * GetClass(const char* name, Bool_t load = kTRUE, Bool_t silent = kFALSE); Static method returning pointer to TClass of the specified class name.; If load is true an attempt is made to obtain the class by loading; the appropriate shared library (directed by the rootmap file).; If silent is 'true', do not warn about missing dictionary for the class.; (typically used for class that are used only for transient members); Returns 0 in case class is not found. THashTable * GetClassShortTypedefHash(); Return the class' names massaged with TClassEdit::ShortType with kDropStlDefault. TClass * GetClass(const type_info& typeinfo, Bool_t load = kTRUE, Bool_t silent = kFALSE); Return pointer to class with name. VoidFuncPtr_t GetDict(const char* cname); Return a pointer to the dictionary loading function generated by; rootcint. VoidFuncPtr_t GetDict(const type_info& info); Return a pointer to the dictionary loading function generated by; rootcint. TDataMember * GetDataMember(const char* datamember) const; Return pointer to datamember object with name ""datamember"". Long_t GetDataMemberOffset(const char* membername) const; return offset for member name. name can be a data member in; the class itself, one of ",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:27467,Performance,load,loading,27467,"d the offset; because it's virtual.; Takes care of multiple inheritance. Int_t GetBaseClassOffset(const TClass* base); Return data member offset to the base class ""cl"".; Returns -1 in case ""cl"" is not a base class.; Takes care of multiple inheritance. TClass * GetBaseDataMember(const char* datamember); Return pointer to (base) class that contains datamember. TVirtualCollectionProxy * GetCollectionProxy() const; Return the proxy describinb the collection (if any). TClassStreamer * GetStreamer() const; Return the Streamer Class allowing streaming (if any). ClassStreamerFunc_t GetStreamerFunc() const; Get a wrapper/accessor function around this class custom streamer (member function). TVirtualIsAProxy* GetIsAProxy() const; Return the proxy implementing the IsA functionality. TClass * GetClass(const char* name, Bool_t load = kTRUE, Bool_t silent = kFALSE); Static method returning pointer to TClass of the specified class name.; If load is true an attempt is made to obtain the class by loading; the appropriate shared library (directed by the rootmap file).; If silent is 'true', do not warn about missing dictionary for the class.; (typically used for class that are used only for transient members); Returns 0 in case class is not found. THashTable * GetClassShortTypedefHash(); Return the class' names massaged with TClassEdit::ShortType with kDropStlDefault. TClass * GetClass(const type_info& typeinfo, Bool_t load = kTRUE, Bool_t silent = kFALSE); Return pointer to class with name. VoidFuncPtr_t GetDict(const char* cname); Return a pointer to the dictionary loading function generated by; rootcint. VoidFuncPtr_t GetDict(const type_info& info); Return a pointer to the dictionary loading function generated by; rootcint. TDataMember * GetDataMember(const char* datamember) const; Return pointer to datamember object with name ""datamember"". Long_t GetDataMemberOffset(const char* membername) const; return offset for member name. name can be a data member in; the class itself, one of ",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:27896,Performance,load,load,27896,"scribinb the collection (if any). TClassStreamer * GetStreamer() const; Return the Streamer Class allowing streaming (if any). ClassStreamerFunc_t GetStreamerFunc() const; Get a wrapper/accessor function around this class custom streamer (member function). TVirtualIsAProxy* GetIsAProxy() const; Return the proxy implementing the IsA functionality. TClass * GetClass(const char* name, Bool_t load = kTRUE, Bool_t silent = kFALSE); Static method returning pointer to TClass of the specified class name.; If load is true an attempt is made to obtain the class by loading; the appropriate shared library (directed by the rootmap file).; If silent is 'true', do not warn about missing dictionary for the class.; (typically used for class that are used only for transient members); Returns 0 in case class is not found. THashTable * GetClassShortTypedefHash(); Return the class' names massaged with TClassEdit::ShortType with kDropStlDefault. TClass * GetClass(const type_info& typeinfo, Bool_t load = kTRUE, Bool_t silent = kFALSE); Return pointer to class with name. VoidFuncPtr_t GetDict(const char* cname); Return a pointer to the dictionary loading function generated by; rootcint. VoidFuncPtr_t GetDict(const type_info& info); Return a pointer to the dictionary loading function generated by; rootcint. TDataMember * GetDataMember(const char* datamember) const; Return pointer to datamember object with name ""datamember"". Long_t GetDataMemberOffset(const char* membername) const; return offset for member name. name can be a data member in; the class itself, one of its base classes, or one member in; one of the aggregated classes. In case of an emulated class, the list of emulated TRealData is built. TRealData* GetRealData(const char* name) const; -- Return pointer to TRealData element with name ""name"". Name can be a data member in the class itself,; one of its base classes, or a member in; one of the aggregated classes. In case of an emulated class, the list of emulated TRealData is built.",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:28047,Performance,load,loading,28047,"ny). ClassStreamerFunc_t GetStreamerFunc() const; Get a wrapper/accessor function around this class custom streamer (member function). TVirtualIsAProxy* GetIsAProxy() const; Return the proxy implementing the IsA functionality. TClass * GetClass(const char* name, Bool_t load = kTRUE, Bool_t silent = kFALSE); Static method returning pointer to TClass of the specified class name.; If load is true an attempt is made to obtain the class by loading; the appropriate shared library (directed by the rootmap file).; If silent is 'true', do not warn about missing dictionary for the class.; (typically used for class that are used only for transient members); Returns 0 in case class is not found. THashTable * GetClassShortTypedefHash(); Return the class' names massaged with TClassEdit::ShortType with kDropStlDefault. TClass * GetClass(const type_info& typeinfo, Bool_t load = kTRUE, Bool_t silent = kFALSE); Return pointer to class with name. VoidFuncPtr_t GetDict(const char* cname); Return a pointer to the dictionary loading function generated by; rootcint. VoidFuncPtr_t GetDict(const type_info& info); Return a pointer to the dictionary loading function generated by; rootcint. TDataMember * GetDataMember(const char* datamember) const; Return pointer to datamember object with name ""datamember"". Long_t GetDataMemberOffset(const char* membername) const; return offset for member name. name can be a data member in; the class itself, one of its base classes, or one member in; one of the aggregated classes. In case of an emulated class, the list of emulated TRealData is built. TRealData* GetRealData(const char* name) const; -- Return pointer to TRealData element with name ""name"". Name can be a data member in the class itself,; one of its base classes, or a member in; one of the aggregated classes. In case of an emulated class, the list of emulated TRealData is built. const char * GetSharedLibs(); Get the list of shared libraries containing the code for class cls.; The first library in t",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:28169,Performance,load,loading,28169,"ber function). TVirtualIsAProxy* GetIsAProxy() const; Return the proxy implementing the IsA functionality. TClass * GetClass(const char* name, Bool_t load = kTRUE, Bool_t silent = kFALSE); Static method returning pointer to TClass of the specified class name.; If load is true an attempt is made to obtain the class by loading; the appropriate shared library (directed by the rootmap file).; If silent is 'true', do not warn about missing dictionary for the class.; (typically used for class that are used only for transient members); Returns 0 in case class is not found. THashTable * GetClassShortTypedefHash(); Return the class' names massaged with TClassEdit::ShortType with kDropStlDefault. TClass * GetClass(const type_info& typeinfo, Bool_t load = kTRUE, Bool_t silent = kFALSE); Return pointer to class with name. VoidFuncPtr_t GetDict(const char* cname); Return a pointer to the dictionary loading function generated by; rootcint. VoidFuncPtr_t GetDict(const type_info& info); Return a pointer to the dictionary loading function generated by; rootcint. TDataMember * GetDataMember(const char* datamember) const; Return pointer to datamember object with name ""datamember"". Long_t GetDataMemberOffset(const char* membername) const; return offset for member name. name can be a data member in; the class itself, one of its base classes, or one member in; one of the aggregated classes. In case of an emulated class, the list of emulated TRealData is built. TRealData* GetRealData(const char* name) const; -- Return pointer to TRealData element with name ""name"". Name can be a data member in the class itself,; one of its base classes, or a member in; one of the aggregated classes. In case of an emulated class, the list of emulated TRealData is built. const char * GetSharedLibs(); Get the list of shared libraries containing the code for class cls.; The first library in the list is the one containing the class, the; others are the libraries the first one depends on. Returns 0; in case the ",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:33290,Performance,load,loaded,33290,"nst char* proto); Find the method with a given prototype. The proto string must be of the; form: ""char*,int,double"". Returns 0 in case method is not found. TMethod * GetClassMethod(Long_t faddr); Look for a method in this class that has the interface function; address faddr. TMethod * GetClassMethod(const char* name, const char* signature); Look for a method in this class that has the name and; signature. Int_t GetNdata(); Return the number of data members of this class; Note that in case the list of data members is not yet created, it will be done; by GetListOfDataMembers(). Int_t GetNmethods(); Return the number of methods of this class; Note that in case the list of methods is not yet created, it will be done; by GetListOfMethods(). TVirtualStreamerInfo* GetStreamerInfo(Int_t version = 0) const; returns a pointer to the TVirtualStreamerInfo object for version; If the object doest not exist, it is created. Note: There are two special version numbers:. 0: Use the class version from the currently loaded class library.; -1: Assume no class library loaded (emulated class). Warning: If we create a new streamer info, whether or not the build; optimizes is controlled externally to us by a global variable!; Don't call us unless you have set that variable properly; with TStreamer::Optimize()!. void IgnoreTObjectStreamer(Bool_t ignore = kTRUE); When the class kIgnoreTObjectStreamer bit is set, the automatically; generated Streamer will not call TObject::Streamer.; This option saves the TObject space overhead on the file.; However, the information (fBits, fUniqueID) of TObject is lost. Note that to be effective for objects streamed object-wise this function; must be called for the class deriving directly from TObject, eg, assuming; that BigTrack derives from Track and Track derives from TObject, one must do:; Track::Class()->IgnoreTObjectStreamer();; and not:; BigTrack::Class()->IgnoreTObjectStreamer();; To be effective for object streamed member-wise or split in a TTree,; t",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:33341,Performance,load,loaded,33341,"e proto string must be of the; form: ""char*,int,double"". Returns 0 in case method is not found. TMethod * GetClassMethod(Long_t faddr); Look for a method in this class that has the interface function; address faddr. TMethod * GetClassMethod(const char* name, const char* signature); Look for a method in this class that has the name and; signature. Int_t GetNdata(); Return the number of data members of this class; Note that in case the list of data members is not yet created, it will be done; by GetListOfDataMembers(). Int_t GetNmethods(); Return the number of methods of this class; Note that in case the list of methods is not yet created, it will be done; by GetListOfMethods(). TVirtualStreamerInfo* GetStreamerInfo(Int_t version = 0) const; returns a pointer to the TVirtualStreamerInfo object for version; If the object doest not exist, it is created. Note: There are two special version numbers:. 0: Use the class version from the currently loaded class library.; -1: Assume no class library loaded (emulated class). Warning: If we create a new streamer info, whether or not the build; optimizes is controlled externally to us by a global variable!; Don't call us unless you have set that variable properly; with TStreamer::Optimize()!. void IgnoreTObjectStreamer(Bool_t ignore = kTRUE); When the class kIgnoreTObjectStreamer bit is set, the automatically; generated Streamer will not call TObject::Streamer.; This option saves the TObject space overhead on the file.; However, the information (fBits, fUniqueID) of TObject is lost. Note that to be effective for objects streamed object-wise this function; must be called for the class deriving directly from TObject, eg, assuming; that BigTrack derives from Track and Track derives from TObject, one must do:; Track::Class()->IgnoreTObjectStreamer();; and not:; BigTrack::Class()->IgnoreTObjectStreamer();; To be effective for object streamed member-wise or split in a TTree,; this function must be called for the most derived class (i.e.",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:33435,Performance,optimiz,optimizes,33435,"ook for a method in this class that has the interface function; address faddr. TMethod * GetClassMethod(const char* name, const char* signature); Look for a method in this class that has the name and; signature. Int_t GetNdata(); Return the number of data members of this class; Note that in case the list of data members is not yet created, it will be done; by GetListOfDataMembers(). Int_t GetNmethods(); Return the number of methods of this class; Note that in case the list of methods is not yet created, it will be done; by GetListOfMethods(). TVirtualStreamerInfo* GetStreamerInfo(Int_t version = 0) const; returns a pointer to the TVirtualStreamerInfo object for version; If the object doest not exist, it is created. Note: There are two special version numbers:. 0: Use the class version from the currently loaded class library.; -1: Assume no class library loaded (emulated class). Warning: If we create a new streamer info, whether or not the build; optimizes is controlled externally to us by a global variable!; Don't call us unless you have set that variable properly; with TStreamer::Optimize()!. void IgnoreTObjectStreamer(Bool_t ignore = kTRUE); When the class kIgnoreTObjectStreamer bit is set, the automatically; generated Streamer will not call TObject::Streamer.; This option saves the TObject space overhead on the file.; However, the information (fBits, fUniqueID) of TObject is lost. Note that to be effective for objects streamed object-wise this function; must be called for the class deriving directly from TObject, eg, assuming; that BigTrack derives from Track and Track derives from TObject, one must do:; Track::Class()->IgnoreTObjectStreamer();; and not:; BigTrack::Class()->IgnoreTObjectStreamer();; To be effective for object streamed member-wise or split in a TTree,; this function must be called for the most derived class (i.e. BigTrack). Bool_t InheritsFrom(const char* cl) const; Return kTRUE if this class inherits from a class with name ""classname"".; note that",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:33573,Performance,Optimiz,Optimize,33573,"ook for a method in this class that has the interface function; address faddr. TMethod * GetClassMethod(const char* name, const char* signature); Look for a method in this class that has the name and; signature. Int_t GetNdata(); Return the number of data members of this class; Note that in case the list of data members is not yet created, it will be done; by GetListOfDataMembers(). Int_t GetNmethods(); Return the number of methods of this class; Note that in case the list of methods is not yet created, it will be done; by GetListOfMethods(). TVirtualStreamerInfo* GetStreamerInfo(Int_t version = 0) const; returns a pointer to the TVirtualStreamerInfo object for version; If the object doest not exist, it is created. Note: There are two special version numbers:. 0: Use the class version from the currently loaded class library.; -1: Assume no class library loaded (emulated class). Warning: If we create a new streamer info, whether or not the build; optimizes is controlled externally to us by a global variable!; Don't call us unless you have set that variable properly; with TStreamer::Optimize()!. void IgnoreTObjectStreamer(Bool_t ignore = kTRUE); When the class kIgnoreTObjectStreamer bit is set, the automatically; generated Streamer will not call TObject::Streamer.; This option saves the TObject space overhead on the file.; However, the information (fBits, fUniqueID) of TObject is lost. Note that to be effective for objects streamed object-wise this function; must be called for the class deriving directly from TObject, eg, assuming; that BigTrack derives from Track and Track derives from TObject, one must do:; Track::Class()->IgnoreTObjectStreamer();; and not:; BigTrack::Class()->IgnoreTObjectStreamer();; To be effective for object streamed member-wise or split in a TTree,; this function must be called for the most derived class (i.e. BigTrack). Bool_t InheritsFrom(const char* cl) const; Return kTRUE if this class inherits from a class with name ""classname"".; note that",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:37795,Performance,Load,Load,37795,"for object. void DeleteArray(void* ary, Bool_t dtorOnly = kFALSE); Explicitly call operator delete[] for an array. void SetCanSplit(Int_t splitmode); Set the splitability of this class:; -1: Use the default calculation; 0: Disallow splitting; 1: Always allow splitting. void SetClassVersion(Version_t version); Private function. Set the class version for the 'class' represented by; this TClass object. See the public interface:; ROOT::ResetClassVersion; defined in TClassTable.cxx. Note on class version numbers:; If no class number has been specified, TClass::GetVersion will return -1; The Class Version 0 request the whole object to be transient; The Class Version 1, unless specified via ClassDef indicates that the; I/O should use the TClass checksum to distinguish the layout of the class. void SetCurrentStreamerInfo(TVirtualStreamerInfo* info); Set pointer to current TVirtualStreamerInfo. Int_t Size() const; Return size of object of this class. TClass * Load(TBuffer& b); Load class description from I/O buffer and return class object. void Store(TBuffer& b) const; Store class description on I/O buffer. Bool_t IsLoaded() const; Return true if the shared library of this class is currently in the a; process's memory. Return false, after the shared library has been; unloaded or if this is an 'emulated' class created from a file's StreamerInfo. Bool_t IsStartingWithTObject() const; Returns true if this class inherits from TObject and if the start of; the TObject parts is at the very beginning of the objects.; Concretly this means that the following code is proper for this class:; ThisClass *ptr;; void *void_ptr = (void)ptr;; TObject *obj = (TObject*)void_ptr;; This code would be wrong if 'ThisClass' did not inherit 'first' from; TObject. Bool_t IsTObject() const; Return kTRUE is the class inherits from TObject. Bool_t IsForeign() const; Return kTRUE is the class is Foreign (the class does not have a Streamer method). void PostLoadCheck(); Do the initialization that can only b",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:37813,Performance,Load,Load,37813,"for object. void DeleteArray(void* ary, Bool_t dtorOnly = kFALSE); Explicitly call operator delete[] for an array. void SetCanSplit(Int_t splitmode); Set the splitability of this class:; -1: Use the default calculation; 0: Disallow splitting; 1: Always allow splitting. void SetClassVersion(Version_t version); Private function. Set the class version for the 'class' represented by; this TClass object. See the public interface:; ROOT::ResetClassVersion; defined in TClassTable.cxx. Note on class version numbers:; If no class number has been specified, TClass::GetVersion will return -1; The Class Version 0 request the whole object to be transient; The Class Version 1, unless specified via ClassDef indicates that the; I/O should use the TClass checksum to distinguish the layout of the class. void SetCurrentStreamerInfo(TVirtualStreamerInfo* info); Set pointer to current TVirtualStreamerInfo. Int_t Size() const; Return size of object of this class. TClass * Load(TBuffer& b); Load class description from I/O buffer and return class object. void Store(TBuffer& b) const; Store class description on I/O buffer. Bool_t IsLoaded() const; Return true if the shared library of this class is currently in the a; process's memory. Return false, after the shared library has been; unloaded or if this is an 'emulated' class created from a file's StreamerInfo. Bool_t IsStartingWithTObject() const; Returns true if this class inherits from TObject and if the start of; the TObject parts is at the very beginning of the objects.; Concretly this means that the following code is proper for this class:; ThisClass *ptr;; void *void_ptr = (void)ptr;; TObject *obj = (TObject*)void_ptr;; This code would be wrong if 'ThisClass' did not inherit 'first' from; TObject. Bool_t IsTObject() const; Return kTRUE is the class inherits from TObject. Bool_t IsForeign() const; Return kTRUE is the class is Foreign (the class does not have a Streamer method). void PostLoadCheck(); Do the initialization that can only b",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:38991,Performance,cache,cache,38991,"rn true if the shared library of this class is currently in the a; process's memory. Return false, after the shared library has been; unloaded or if this is an 'emulated' class created from a file's StreamerInfo. Bool_t IsStartingWithTObject() const; Returns true if this class inherits from TObject and if the start of; the TObject parts is at the very beginning of the objects.; Concretly this means that the following code is proper for this class:; ThisClass *ptr;; void *void_ptr = (void)ptr;; TObject *obj = (TObject*)void_ptr;; This code would be wrong if 'ThisClass' did not inherit 'first' from; TObject. Bool_t IsTObject() const; Return kTRUE is the class inherits from TObject. Bool_t IsForeign() const; Return kTRUE is the class is Foreign (the class does not have a Streamer method). void PostLoadCheck(); Do the initialization that can only be done after the CINT dictionary has; been fully populated and can not be delayed efficiently. Long_t Property() const; Set TObject::fBits and fStreamerType to cache information about the; class. The bits are; kIsTObject : the class inherits from TObject; kStartWithTObject: TObject is the left-most class in the inheritance tree; kIsForeign : the class doe not have a Streamer method; The value of fStreamerType are; kTObject : the class inherits from TObject; kForeign : the class does not have a Streamer method; kInstrumented: the class does have a Streamer method; kExternal: the class has a free standing way of streaming itself; kEmulated: the class is missing its shared library. void SetCollectionProxy(const ROOT::TCollectionProxyInfo& ); Create the collection proxy object (and the streamer object) from; using the information in the TCollectionProxyInfo. void SetContextMenuTitle(const char* title); Change (i.e. set) the title of the TNamed. void SetGlobalIsA(IsAGlobalFunc_t ); This function installs a global IsA function for this class.; The global IsA function will be used if there is no local IsA function (fIsA). A global IsA",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:49455,Performance,perform,performance,49455,"t_t sizof); { fSizeof = sizof; }. void AddInstance(Bool_t heap = kFALSE); { fInstanceCount++; if (heap) fOnHeap++; }. Bool_t CanIgnoreTObjectStreamer(); { return TestBit(kIgnoreTObjectStreamer);}. void Dump() const; { TDictionary::Dump(); }. Version_t GetClassVersion() const; { fVersionUsed = kTRUE; return fClassVersion; }. const char * GetDeclFileName() const; { return fDeclFileName; }. Short_t GetDeclFileLine() const; { return fDeclFileLine; }. ClassInfo_t * GetClassInfo() const; { return fClassInfo; }. const char * GetContextMenuTitle() const; { return fContextMenuTitle; }. TVirtualStreamerInfo * GetCurrentStreamerInfo(). TList * GetListOfRealData() const; { return fRealData; }. const char * GetImplFileName() const; { return fImplFileName; }. Short_t GetImplFileLine() const; { return fImplFileLine; }. UInt_t GetInstanceCount() const; { return fInstanceCount; }. UInt_t GetHeapInstanceCount() const; { return fOnHeap; }. TVirtualRefProxy * GetReferenceProxy() const; { return fRefProxy; }. ShowMembersFunc_t GetShowMembersWrapper() const; { return fShowMembers; }. TObjArray * GetStreamerInfos() const; { return fStreamerInfo; }. const type_info * GetTypeInfo() const; { return fTypeInfo; }. Bool_t IsFolder() const; { return kTRUE; }. void ResetInstanceCount(); { fInstanceCount = fOnHeap = 0; }. void SetDeclFile(const char* name, int line); { fDeclFileName = name; fDeclFileLine = line; }. void SetImplFileName(const char* implFileName); { fImplFileName = implFileName; }. ENewType IsCallingNew(). void Streamer(void* obj, TBuffer& b, const TClass* onfile_class = 0) const; Inline for performance, skipping one function call. » Author: Rene Brun 07/01/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: TClass.h 39694 2011-06-13 21:10:32Z pcanal $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:40438,Safety,safe,safe,40438,"the class is missing its shared library. void SetCollectionProxy(const ROOT::TCollectionProxyInfo& ); Create the collection proxy object (and the streamer object) from; using the information in the TCollectionProxyInfo. void SetContextMenuTitle(const char* title); Change (i.e. set) the title of the TNamed. void SetGlobalIsA(IsAGlobalFunc_t ); This function installs a global IsA function for this class.; The global IsA function will be used if there is no local IsA function (fIsA). A global IsA function has the signature:. TClass *func( TClass *cl, const void *obj);. 'cl' is a pointer to the TClass object that corresponds to the; 'pointer type' used to retrieve the value 'obj'. For example with:; TNamed * m = new TNamed(""example"",""test"");; TObject* o = m; and; the global IsA function would be called with TObject::Class() as; the first parameter and the exact numerical value in the pointer; 'o'. In other word, inside the global IsA function. it is safe to C-style; cast the value of 'obj' into a pointer to the class described by 'cl'. void SetUnloaded(); Call this method to indicate that the shared library containing this; class's code has been removed (unloaded) from the process's memory. TVirtualStreamerInfo * SetStreamerInfo(Int_t version, const char* info = """"); Info is a string describing the names and types of attributes; written by the class Streamer function.; If info is an empty string (when called by TObject::StreamerInfo); the default Streamer info string is build. This corresponds to; the case of an automatically generated Streamer.; In case of user defined Streamer function, it is the user responsability; to implement a StreamerInfo function (override TObject::StreamerInfo).; The user must call IsA()->SetStreamerInfo(info) from this function. UInt_t GetCheckSum(UInt_t code = 0) const; Compute and/or return the class check sum.; The class ckecksum is used by the automatic schema evolution algorithm; to uniquely identify a class version.; The check sum is bu",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:3606,Security,checksum,checksum,3606,"ay(void* ary, Bool_t dtorOnly = kFALSE); voidDestructor(void* obj, Bool_t dtorOnly = kFALSE); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDump() const; voidDump(void* obj) const; void*DynamicCast(const TClass* base, void* obj, Bool_t up = kTRUE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; char*EscapeChars(const char* text) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); TVirtualStreamerInfo*FindConversionStreamerInfo(const char* onfile_classname, UInt_t checksum) const; TVirtualStreamerInfo*FindConversionStreamerInfo(const TClass* onfile_cl, UInt_t checksum) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TVirtualStreamerInfo*FindStreamerInfo(UInt_t checksum) const; TClass*GetActualClass(const void* object) const; TClass*GetBaseClass(const char* classname); TClass*GetBaseClass(const TClass* base); Int_tGetBaseClassOffset(const TClass* base); TClass*GetBaseDataMember(const char* datamember); UInt_tGetCheckSum(UInt_t code = 0) const; static TClass*GetClass(const char* name, Bool_t load = kTRUE, Bool_t silent = kFALSE); static TClass*GetClass(const type_info& typeinfo, Bool_t load = kTRUE, Bool_t silent = kFALSE); ClassInfo_t*GetClassInfo() const; Version_tGetClassVersion() const; TVirtualCollectionProxy*GetCollectionProxy() const; const char*GetContextMenuTitle() const; TVirtualStreamerInfo*GetConversionStreamerInfo(const char* onfile_classname, Int_t version)",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:3703,Security,checksum,checksum,3703,"tual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDump() const; voidDump(void* obj) const; void*DynamicCast(const TClass* base, void* obj, Bool_t up = kTRUE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; char*EscapeChars(const char* text) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); TVirtualStreamerInfo*FindConversionStreamerInfo(const char* onfile_classname, UInt_t checksum) const; TVirtualStreamerInfo*FindConversionStreamerInfo(const TClass* onfile_cl, UInt_t checksum) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TVirtualStreamerInfo*FindStreamerInfo(UInt_t checksum) const; TClass*GetActualClass(const void* object) const; TClass*GetBaseClass(const char* classname); TClass*GetBaseClass(const TClass* base); Int_tGetBaseClassOffset(const TClass* base); TClass*GetBaseDataMember(const char* datamember); UInt_tGetCheckSum(UInt_t code = 0) const; static TClass*GetClass(const char* name, Bool_t load = kTRUE, Bool_t silent = kFALSE); static TClass*GetClass(const type_info& typeinfo, Bool_t load = kTRUE, Bool_t silent = kFALSE); ClassInfo_t*GetClassInfo() const; Version_tGetClassVersion() const; TVirtualCollectionProxy*GetCollectionProxy() const; const char*GetContextMenuTitle() const; TVirtualStreamerInfo*GetConversionStreamerInfo(const char* onfile_classname, Int_t version) const; TVirtualStreamerInfo*GetConversionStreamerInfo(const TClass* onfile_cl, Int_t version) co",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:3889,Security,checksum,checksum,3889,"n_t* option = """") constMENU ; virtual voidDump() const; voidDump(void* obj) const; void*DynamicCast(const TClass* base, void* obj, Bool_t up = kTRUE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; char*EscapeChars(const char* text) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); TVirtualStreamerInfo*FindConversionStreamerInfo(const char* onfile_classname, UInt_t checksum) const; TVirtualStreamerInfo*FindConversionStreamerInfo(const TClass* onfile_cl, UInt_t checksum) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TVirtualStreamerInfo*FindStreamerInfo(UInt_t checksum) const; TClass*GetActualClass(const void* object) const; TClass*GetBaseClass(const char* classname); TClass*GetBaseClass(const TClass* base); Int_tGetBaseClassOffset(const TClass* base); TClass*GetBaseDataMember(const char* datamember); UInt_tGetCheckSum(UInt_t code = 0) const; static TClass*GetClass(const char* name, Bool_t load = kTRUE, Bool_t silent = kFALSE); static TClass*GetClass(const type_info& typeinfo, Bool_t load = kTRUE, Bool_t silent = kFALSE); ClassInfo_t*GetClassInfo() const; Version_tGetClassVersion() const; TVirtualCollectionProxy*GetCollectionProxy() const; const char*GetContextMenuTitle() const; TVirtualStreamerInfo*GetConversionStreamerInfo(const char* onfile_classname, Int_t version) const; TVirtualStreamerInfo*GetConversionStreamerInfo(const TClass* onfile_cl, Int_t version) const; TVirtualStreamerInfo*GetCurrentStreamerInfo(); TDataMember*GetDataMember(const char* datamember) const; Long_tGetDataMemberOffset(const char* membername) const; Short_tGetDeclFileLi",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:7201,Security,Hash,Hash,7201,"etNdata(); ROOT::NewFunc_tGetNew() const; ROOT::NewArrFunc_tGetNewArray() const; Int_tGetNmethods(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TRealData*GetRealData(const char* name) const; TVirtualRefProxy*GetReferenceProxy() const; ROOT::ResetAfterMergeFunc_tGetResetAfterMerge() const; const ROOT::TSchemaRuleSet*GetSchemaRules() const; ROOT::TSchemaRuleSet*GetSchemaRules(Bool_t create = kFALSE); const char*GetSharedLibs(); ShowMembersFunc_tGetShowMembersWrapper() const; TClassStreamer*GetStreamer() const; ClassStreamerFunc_tGetStreamerFunc() const; TVirtualStreamerInfo*GetStreamerInfo(Int_t version = 0) const; TObjArray*GetStreamerInfos() const; virtual const char*TNamed::GetTitle() const; const type_info*GetTypeInfo() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); Bool_tHasDefaultConstructor() const; virtual ULong_tTNamed::Hash() const; voidIgnoreTObjectStreamer(Bool_t ignore = kTRUE); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tInheritsFrom(const char* cl) const; virtual Bool_tInheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidInterpretedShowMembers(void* obj, TMemberInspector& insp); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; static TClass::ENewTypeIsCallingNew(); virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tIsFolder() const; Bool_tIsFolder(void* obj) const; Bool_tIsForeign() const; Bool_tIsLoaded() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tIsStartingWithTObject() const; Bool_tIsTObject() const; Bool_tTObject::IsZombie() const; static TClass*Load(TBuffer& b); virtual voidls(Option_t* opt = """") const; voidMakeCustomMenuList(); voidTObject::MayNotUse(const char* method) const; voidMove(void* arenaFrom, void* arenaTo) const; void*New(TClass::",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:12296,Security,checksum,checksum,12296,"virtual voidTObject::SetUniqueID(UInt_t uid); voidSetUnloaded(); virtual voidShowMembers(TMemberInspector& insp); Int_tSize() const; virtual Int_tTNamed::Sizeof() const; voidStore(TBuffer& b) const; virtual voidStreamer(TBuffer& b); voidStreamer(void* obj, TBuffer& b, const TClass* onfile_class = 0) const; voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; Int_tWriteBuffer(TBuffer& b, void* pointer, const char* info = """"). protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; TVirtualStreamerInfo*FindStreamerInfo(TObjArray* arr, UInt_t checksum) const; static THashTable*GetClassShortTypedefHash(); voidTObject::MakeZombie(). private:. TClass(const TClass& tc); voidForceReload(TClass* oldcl); Int_tGetBaseClassOffsetRecurse(const TClass* base); TMethod*GetClassMethod(Long_t faddr); TMethod*GetClassMethod(const char* name, const char* signature); static ROOT::TMapTypeToTClass*GetIdMap(); voidInit(const char* name, Version_t cversion, const type_info* info, TVirtualIsAProxy* isa, ShowMembersFunc_t showmember, const char* dfil, const char* ifil, Int_t dl, Int_t il, Bool_t silent); TClass&operator=(const TClass&); voidSetClassSize(Int_t sizof); voidSetClassVersion(Version_t version); voidStreamerDefault(void* object, TBuffer& b, const TClass* onfile_class) const; voidStreamerExternal(void* object, TBuffer& b, const TClass* onfile_class) const; voidStreamerInstrumented(void* object, TBuffer& b, const TClass* onfile_class) const; voidStreamerStreamerInfo(void* object, TBuffer& b, const TClas",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:18252,Security,access,access,18252,"nfopointer to the C++ type information.; Bool_tfVersionUsed!Indicates whether GetClassVersion has been called; static TClass::ENewTypefgCallingNewIntent of why/how TClass::New() is called; static Int_tfgClassCountprovides unique id for a each class; static THashTable*fgClassShortTypedefHash; static THashTable*fgClassTypedefHash. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IdMap_t * GetIdMap(). void AddClass(TClass* cl); static: Add a class to the list and map of classes. void RemoveClass(TClass* cl); static: Remove a class from the list and map of classes. TClass(); Default ctor. TClass(const char* name, Bool_t silent = kFALSE); Create a TClass object. This object contains the full dictionary; of a class. It has list to baseclasses, datamembers and methods.; Use this ctor to create a standalone TClass object. Most useful; to get a TClass interface to an interpreted class. Used by TTabCom.; Normally you would use TClass::GetClass(""class"") to get access to a; TClass object for a certain class. TClass(const char* name, Version_t cversion, const char* dfil = 0, const char* ifil = 0, Int_t dl = 0, Int_t il = 0, Bool_t silent = kFALSE); Create a TClass object. This object contains the full dictionary; of a class. It has list to baseclasses, datamembers and methods. TClass(const char* name, Version_t cversion, const type_info& info, TVirtualIsAProxy* isa, ShowMembersFunc_t showmember, const char* dfil, const char* ifil, Int_t dl, Int_t il, Bool_t silent = kFALSE); Create a TClass object. This object contains the full dictionary; of a class. It has list to baseclasses, datamembers and methods. void ForceReload(TClass* oldcl); we found at least one equivalent.; let's force a reload. void Init(const char* name, Version_t cversion, const type_info* info, TVirtualIsAProxy* isa, ShowMembersFunc_t showmember, const char* dfil, const char* ifil, Int_t dl, Int_t il, Bool_t silent); Initialize a TClass object. This object contains the fu",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:20024,Security,checksum,checksum,20024,"sion_t cversion, const type_info* info, TVirtualIsAProxy* isa, ShowMembersFunc_t showmember, const char* dfil, const char* ifil, Int_t dl, Int_t il, Bool_t silent); Initialize a TClass object. This object contains the full dictionary; of a class. It has list to baseclasses, datamembers and methods. TClass(const TClass& tc); copy constructor. TClass& operator=(const TClass& ); assignement operator. ~TClass(); TClass dtor. Deletes all list that might have been created. Int_t ReadRules(); Read the class.rules files from the default location:.; $ROOTSYS/etc/class.rules (or ROOTETCDIR/class.rules). Int_t ReadRules(const char* filename); Read a class.rules file which contains one rule per line with comment; starting with a #; Returns the number of rules loaded.; Returns -1 in case of error. Bool_t AddRule(const char* rule); Add a schema evolution customization rule.; The syntax of the rule can be either the short form:; [type=Read] classname membername [attributes=... ] [version=[...] ] [checksum=[...] ] [oldtype=...] [code={...}]; or the long form; [type=Read] sourceClass=classname [targetclass=newClassname] [ source=""type membername; [type2 membername2]"" ]; [target=""membername3;membername4""] [attributes=... ] [version=...] [checksum=...] [code={...}|functionname]. For example to set HepMC::GenVertex::m_event to _not_ owned the object it is pointing to:; HepMC::GenVertex m_event attributes=NotOwner. Semantic of the tags:; type : the type of the rule, valid values: Read, ReadRaw, Write, WriteRaw, the default is 'Read'.; sourceClass : the name of the class as it is on the rule file; targetClass : the name of the class as it is in the current code ; defaults to the value of sourceClass; source : the types and names of the data members from the class on file that are needed, the list is separated by semi-colons ';'; oldtype: in the short form only, indicates the type on disk of the data member.; target : the names of the data members updated by this rule, the list is separat",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:20267,Security,checksum,checksum,20267,"ss. It has list to baseclasses, datamembers and methods. TClass(const TClass& tc); copy constructor. TClass& operator=(const TClass& ); assignement operator. ~TClass(); TClass dtor. Deletes all list that might have been created. Int_t ReadRules(); Read the class.rules files from the default location:.; $ROOTSYS/etc/class.rules (or ROOTETCDIR/class.rules). Int_t ReadRules(const char* filename); Read a class.rules file which contains one rule per line with comment; starting with a #; Returns the number of rules loaded.; Returns -1 in case of error. Bool_t AddRule(const char* rule); Add a schema evolution customization rule.; The syntax of the rule can be either the short form:; [type=Read] classname membername [attributes=... ] [version=[...] ] [checksum=[...] ] [oldtype=...] [code={...}]; or the long form; [type=Read] sourceClass=classname [targetclass=newClassname] [ source=""type membername; [type2 membername2]"" ]; [target=""membername3;membername4""] [attributes=... ] [version=...] [checksum=...] [code={...}|functionname]. For example to set HepMC::GenVertex::m_event to _not_ owned the object it is pointing to:; HepMC::GenVertex m_event attributes=NotOwner. Semantic of the tags:; type : the type of the rule, valid values: Read, ReadRaw, Write, WriteRaw, the default is 'Read'.; sourceClass : the name of the class as it is on the rule file; targetClass : the name of the class as it is in the current code ; defaults to the value of sourceClass; source : the types and names of the data members from the class on file that are needed, the list is separated by semi-colons ';'; oldtype: in the short form only, indicates the type on disk of the data member.; target : the names of the data members updated by this rule, the list is separated by semi-colons ';'; attributes : list of possible qualifiers amongs:; Owner, NotOwner; version : list of the version of the class layout that this rule applies to. The syntax can be [1,4,5] or [2-] or [1-3] or [-3]; checksum : comma delimite",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:21246,Security,checksum,checksum,21246,"checksum=...] [code={...}|functionname]. For example to set HepMC::GenVertex::m_event to _not_ owned the object it is pointing to:; HepMC::GenVertex m_event attributes=NotOwner. Semantic of the tags:; type : the type of the rule, valid values: Read, ReadRaw, Write, WriteRaw, the default is 'Read'.; sourceClass : the name of the class as it is on the rule file; targetClass : the name of the class as it is in the current code ; defaults to the value of sourceClass; source : the types and names of the data members from the class on file that are needed, the list is separated by semi-colons ';'; oldtype: in the short form only, indicates the type on disk of the data member.; target : the names of the data members updated by this rule, the list is separated by semi-colons ';'; attributes : list of possible qualifiers amongs:; Owner, NotOwner; version : list of the version of the class layout that this rule applies to. The syntax can be [1,4,5] or [2-] or [1-3] or [-3]; checksum : comma delimited list of the checksums of the class layout that this rule applies to.; code={...} : code to be executed for the rule or name of the function implementing it. void AdoptSchemaRules(ROOT::TSchemaRuleSet* rules); Adopt a new set of Data Model Evolution rules. const ROOT::TSchemaRuleSet* GetSchemaRules() const; Return the set of the schema rules if any. ROOT::TSchemaRuleSet* GetSchemaRules(Bool_t create = kFALSE); Return the set of the schema rules if any.; If create is true, create an empty set. void AddImplFile(const char* filename, int line). void AddRef(TClassRef* ref); Register a TClassRef object which points to this TClass object.; When this TClass object is deleted, 'ref' will be 'Reset'. Int_t AutoBrowse(TObject* obj, TBrowser* browser); Browse external object inherited from TObject.; It passes through inheritance tree and calls TBrowser::Add; in appropriate cases. Static function. Int_t Browse(void* obj, TBrowser* b) const; Browse objects of of the class described by this TCl",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:21285,Security,checksum,checksums,21285,"checksum=...] [code={...}|functionname]. For example to set HepMC::GenVertex::m_event to _not_ owned the object it is pointing to:; HepMC::GenVertex m_event attributes=NotOwner. Semantic of the tags:; type : the type of the rule, valid values: Read, ReadRaw, Write, WriteRaw, the default is 'Read'.; sourceClass : the name of the class as it is on the rule file; targetClass : the name of the class as it is in the current code ; defaults to the value of sourceClass; source : the types and names of the data members from the class on file that are needed, the list is separated by semi-colons ';'; oldtype: in the short form only, indicates the type on disk of the data member.; target : the names of the data members updated by this rule, the list is separated by semi-colons ';'; attributes : list of possible qualifiers amongs:; Owner, NotOwner; version : list of the version of the class layout that this rule applies to. The syntax can be [1,4,5] or [2-] or [1-3] or [-3]; checksum : comma delimited list of the checksums of the class layout that this rule applies to.; code={...} : code to be executed for the rule or name of the function implementing it. void AdoptSchemaRules(ROOT::TSchemaRuleSet* rules); Adopt a new set of Data Model Evolution rules. const ROOT::TSchemaRuleSet* GetSchemaRules() const; Return the set of the schema rules if any. ROOT::TSchemaRuleSet* GetSchemaRules(Bool_t create = kFALSE); Return the set of the schema rules if any.; If create is true, create an empty set. void AddImplFile(const char* filename, int line). void AddRef(TClassRef* ref); Register a TClassRef object which points to this TClass object.; When this TClass object is deleted, 'ref' will be 'Reset'. Int_t AutoBrowse(TObject* obj, TBrowser* browser); Browse external object inherited from TObject.; It passes through inheritance tree and calls TBrowser::Add; in appropriate cases. Static function. Int_t Browse(void* obj, TBrowser* b) const; Browse objects of of the class described by this TCl",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:23046,Security,access,access,23046,"rom TObject.; It passes through inheritance tree and calls TBrowser::Add; in appropriate cases. Static function. Int_t Browse(void* obj, TBrowser* b) const; Browse objects of of the class described by this TClass object. void Browse(TBrowser* b); This method is called by a browser to get the class information. void BuildRealData(void* pointer = 0, Bool_t isTransient = kFALSE); Build a full list of persistent data members.; Scans the list of all data members in the class itself and also; in all base classes. For each persistent data member, inserts a; TRealData object in the list fRealData. If pointer is not 0, uses the object at pointer; otherwise creates a temporary object of this class. void BuildEmulatedRealData(const char* name, Long_t offset, TClass* cl); Build the list of real data for an emulated class. void CalculateStreamerOffset() const; Calculate the offset between an object of this class to; its base class TObject. The pointer can be adjusted by; that offset to access any virtual method of TObject like; Streamer() and ShowMembers(). Bool_t CallShowMembers(void* obj, TMemberInspector& insp, Int_t isATObject = -1) const; Call ShowMembers() on the obj of this class type, passing insp and parent.; isATObject is -1 if unknown, 0 if it is not a TObject, and 1 if it is a TObject.; The function returns whether it was able to call ShowMembers(). void InterpretedShowMembers(void* obj, TMemberInspector& insp); Do a ShowMembers() traversal of all members and base classes' members; using the reflection information from the interpreter. Works also for; ionterpreted objects. Bool_t CanSplit() const; Return true if the data member of this TClass can be saved separately. TObject * Clone(const char* newname = """") const; Create a Clone of this TClass object using a different name but using the same 'dictionary'.; This effectively creates a hard alias for the class name. void CopyCollectionProxy(const TVirtualCollectionProxy& ); Copy the argument. void Draw(Option_t* option",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:27092,Security,access,accessor,27092,"nheritance. TClass * GetBaseClass(const TClass* base); Return pointer to the base class ""cl"". Returns 0 in case ""cl""; is not a base class. Takes care of multiple inheritance. Int_t GetBaseClassOffsetRecurse(const TClass* base); Return data member offset to the base class ""cl"".; Returns -1 in case ""cl"" is not a base class.; Returns -2 if cl is a base class, but we can't find the offset; because it's virtual.; Takes care of multiple inheritance. Int_t GetBaseClassOffset(const TClass* base); Return data member offset to the base class ""cl"".; Returns -1 in case ""cl"" is not a base class.; Takes care of multiple inheritance. TClass * GetBaseDataMember(const char* datamember); Return pointer to (base) class that contains datamember. TVirtualCollectionProxy * GetCollectionProxy() const; Return the proxy describinb the collection (if any). TClassStreamer * GetStreamer() const; Return the Streamer Class allowing streaming (if any). ClassStreamerFunc_t GetStreamerFunc() const; Get a wrapper/accessor function around this class custom streamer (member function). TVirtualIsAProxy* GetIsAProxy() const; Return the proxy implementing the IsA functionality. TClass * GetClass(const char* name, Bool_t load = kTRUE, Bool_t silent = kFALSE); Static method returning pointer to TClass of the specified class name.; If load is true an attempt is made to obtain the class by loading; the appropriate shared library (directed by the rootmap file).; If silent is 'true', do not warn about missing dictionary for the class.; (typically used for class that are used only for transient members); Returns 0 in case class is not found. THashTable * GetClassShortTypedefHash(); Return the class' names massaged with TClassEdit::ShortType with kDropStlDefault. TClass * GetClass(const type_info& typeinfo, Bool_t load = kTRUE, Bool_t silent = kFALSE); Return pointer to class with name. VoidFuncPtr_t GetDict(const char* cname); Return a pointer to the dictionary loading function generated by; rootcint. VoidFuncP",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:30254,Security,access,accessible,30254,") of a class. TList * GetListOfDataMembers(); Return list containing the TDataMembers of a class. TList * GetListOfMethods(); Return list containing the TMethods of a class. TList * GetListOfAllPublicMethods(); Returns a list of all public methods of this class and its base classes.; Refers to a subset of the methods in GetListOfMethods() so don't do; GetListOfAllPublicMethods()->Delete().; Algorithm used to get the list is:; - put all methods of the class in the list (also protected and private; ones).; - loop over all base classes and add only those methods not already in the; list (also protected and private ones).; - once finished, loop over resulting list and remove all private and; protected methods. TList * GetListOfAllPublicDataMembers(); Returns a list of all public data members of this class and its base; classes. Refers to a subset of the data members in GetListOfDatamembers(); so don't do GetListOfAllPublicDataMembers()->Delete(). void GetMenuItems(TList* listitems); Returns list of methods accessible by context menu. Bool_t IsFolder(void* obj) const; Return kTRUE if the class has elements. void RemoveRef(TClassRef* ref); Unregister the TClassRef object. void ReplaceWith(TClass* newcl, Bool_t recurse = kTRUE) const; Inform the other objects to replace this object by the new TClass (newcl). void ResetClassInfo(Long_t tagnum); Make sure that the current ClassInfo is up to date. void ResetMenuList(); Resets the menu list to it's standard value. void ls(Option_t* opt = """") const; The ls function lists the contents of a class on stdout. Ls output; is typically much less verbose then Dump().; If options contains 'streamerinfo', run ls on the list of streamerInfos; and the list of conversion streamerInfos. void MakeCustomMenuList(); Makes a customizable version of the popup menu list, i.e. makes a list; of TClassMenuItem objects of methods accessible by context menu.; The standard (and different) way consists in having just one element; in this list, correspondi",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:31113,Security,access,accessible,31113,"ta members in GetListOfDatamembers(); so don't do GetListOfAllPublicDataMembers()->Delete(). void GetMenuItems(TList* listitems); Returns list of methods accessible by context menu. Bool_t IsFolder(void* obj) const; Return kTRUE if the class has elements. void RemoveRef(TClassRef* ref); Unregister the TClassRef object. void ReplaceWith(TClass* newcl, Bool_t recurse = kTRUE) const; Inform the other objects to replace this object by the new TClass (newcl). void ResetClassInfo(Long_t tagnum); Make sure that the current ClassInfo is up to date. void ResetMenuList(); Resets the menu list to it's standard value. void ls(Option_t* opt = """") const; The ls function lists the contents of a class on stdout. Ls output; is typically much less verbose then Dump().; If options contains 'streamerinfo', run ls on the list of streamerInfos; and the list of conversion streamerInfos. void MakeCustomMenuList(); Makes a customizable version of the popup menu list, i.e. makes a list; of TClassMenuItem objects of methods accessible by context menu.; The standard (and different) way consists in having just one element; in this list, corresponding to the whole standard list.; Once the customizable version is done, one can remove or add elements. void Move(void* arenaFrom, void* arenaTo) const; Register the fact that an object was moved from the memory location; 'arenaFrom' to the memory location 'arenaTo'. TList * GetMenuList() const; Return the list of menu items associated with the class. TMethod * GetMethodAny(const char* method); Return pointer to method without looking at parameters.; Does not look in (possible) base classes. TMethod * GetMethodAllAny(const char* method); Return pointer to method without looking at parameters.; Does look in all base classes. TMethod * GetMethod(const char* method, const char* params); Find the best method (if there is one) matching the parameters.; The params string must contain argument values, like ""3189, \""aap\"", 1.3"".; The function invokes GetClassMe",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:37578,Security,checksum,checksum,37578,":IsCallingNew(). void * NewArray(Long_t nElements, void* arena, TClass::ENewType defConstructor = kClassNew) const; Return a pointer to a newly allocated object of this class.; The class must have a default constructor. For meaning of; defConstructor, see TClass::IsCallingNew(). void Destructor(void* obj, Bool_t dtorOnly = kFALSE); Explicitly call destructor for object. void DeleteArray(void* ary, Bool_t dtorOnly = kFALSE); Explicitly call operator delete[] for an array. void SetCanSplit(Int_t splitmode); Set the splitability of this class:; -1: Use the default calculation; 0: Disallow splitting; 1: Always allow splitting. void SetClassVersion(Version_t version); Private function. Set the class version for the 'class' represented by; this TClass object. See the public interface:; ROOT::ResetClassVersion; defined in TClassTable.cxx. Note on class version numbers:; If no class number has been specified, TClass::GetVersion will return -1; The Class Version 0 request the whole object to be transient; The Class Version 1, unless specified via ClassDef indicates that the; I/O should use the TClass checksum to distinguish the layout of the class. void SetCurrentStreamerInfo(TVirtualStreamerInfo* info); Set pointer to current TVirtualStreamerInfo. Int_t Size() const; Return size of object of this class. TClass * Load(TBuffer& b); Load class description from I/O buffer and return class object. void Store(TBuffer& b) const; Store class description on I/O buffer. Bool_t IsLoaded() const; Return true if the shared library of this class is currently in the a; process's memory. Return false, after the shared library has been; unloaded or if this is an 'emulated' class created from a file's StreamerInfo. Bool_t IsStartingWithTObject() const; Returns true if this class inherits from TObject and if the start of; the TObject parts is at the very beginning of the objects.; Concretly this means that the following code is proper for this class:; ThisClass *ptr;; void *void_ptr = (void)p",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:41652,Security,checksum,checksum,41652,"tualStreamerInfo * SetStreamerInfo(Int_t version, const char* info = """"); Info is a string describing the names and types of attributes; written by the class Streamer function.; If info is an empty string (when called by TObject::StreamerInfo); the default Streamer info string is build. This corresponds to; the case of an automatically generated Streamer.; In case of user defined Streamer function, it is the user responsability; to implement a StreamerInfo function (override TObject::StreamerInfo).; The user must call IsA()->SetStreamerInfo(info) from this function. UInt_t GetCheckSum(UInt_t code = 0) const; Compute and/or return the class check sum.; The class ckecksum is used by the automatic schema evolution algorithm; to uniquely identify a class version.; The check sum is built from the names/types of base classes and; data members.; Algorithm from Victor Perevovchikov (perev@bnl.gov). if code==1 data members of type enum are not counted in the checksum; if code==2 return the checksum of data members and base classes, not including the ranges and array size found in comments.; This is needed for backward compatibility. WARNING: this function must be kept in sync with TClass::GetCheckSum.; They are both used to handle backward compatibility and should both return the same values.; TStreamerInfo uses the information in TStreamerElement while TClass uses the information; from TClass::GetListOfBases and TClass::GetListOfDataMembers. void AdoptReferenceProxy(TVirtualRefProxy* proxy); Adopt the Reference proxy pointer to indicate that this class; represents a reference.; When a new proxy is adopted, the old one is deleted. void AdoptMemberStreamer(const char* name, TMemberStreamer* strm); Adopt the TMemberStreamer pointer to by p and use it to Stream non basic; member name. void SetMemberStreamer(const char* name, MemberStreamerFunc_t strm); Install a new member streamer (p will be copied). Int_t ReadBuffer(TBuffer& b, void* pointer, Int_t version, UInt_t start, UInt",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:41684,Security,checksum,checksum,41684,"tualStreamerInfo * SetStreamerInfo(Int_t version, const char* info = """"); Info is a string describing the names and types of attributes; written by the class Streamer function.; If info is an empty string (when called by TObject::StreamerInfo); the default Streamer info string is build. This corresponds to; the case of an automatically generated Streamer.; In case of user defined Streamer function, it is the user responsability; to implement a StreamerInfo function (override TObject::StreamerInfo).; The user must call IsA()->SetStreamerInfo(info) from this function. UInt_t GetCheckSum(UInt_t code = 0) const; Compute and/or return the class check sum.; The class ckecksum is used by the automatic schema evolution algorithm; to uniquely identify a class version.; The check sum is built from the names/types of base classes and; data members.; Algorithm from Victor Perevovchikov (perev@bnl.gov). if code==1 data members of type enum are not counted in the checksum; if code==2 return the checksum of data members and base classes, not including the ranges and array size found in comments.; This is needed for backward compatibility. WARNING: this function must be kept in sync with TClass::GetCheckSum.; They are both used to handle backward compatibility and should both return the same values.; TStreamerInfo uses the information in TStreamerElement while TClass uses the information; from TClass::GetListOfBases and TClass::GetListOfDataMembers. void AdoptReferenceProxy(TVirtualRefProxy* proxy); Adopt the Reference proxy pointer to indicate that this class; represents a reference.; When a new proxy is adopted, the old one is deleted. void AdoptMemberStreamer(const char* name, TMemberStreamer* strm); Adopt the TMemberStreamer pointer to by p and use it to Stream non basic; member name. void SetMemberStreamer(const char* name, MemberStreamerFunc_t strm); Install a new member streamer (p will be copied). Int_t ReadBuffer(TBuffer& b, void* pointer, Int_t version, UInt_t start, UInt",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:44862,Security,access,accessor,44862,"st TClass* onfile_class) const; Case of TObjects when fIsOffsetStreamerSet is known to have been set. void StreamerTObjectEmulated(void* object, TBuffer& b, const TClass* onfile_class) const; Case of TObjects when we do not have the library defining the class. void StreamerInstrumented(void* object, TBuffer& b, const TClass* onfile_class) const; Case of instrumented class with a library. void StreamerStreamerInfo(void* object, TBuffer& b, const TClass* onfile_class) const; Case of where we should directly use the StreamerInfo.; case kForeign:; case kForeign|kEmulated:; case kInstrumented|kEmulated:; case kEmulated:. void StreamerDefault(void* object, TBuffer& b, const TClass* onfile_class) const; Default streaming in cases where either we have no way to know what to do; or if Property() has not yet been called. void AdoptStreamer(TClassStreamer* strm); Adopt a TClassStreamer object. Ownership is transfered to this TClass; object. void SetStreamerFunc(ClassStreamerFunc_t strm); Set a wrapper/accessor function around this class custom streamer. void SetMerge(ROOT::MergeFunc_t mergeFunc); Install a new wrapper around 'Merge'. void SetResetAfterMerge(ROOT::ResetAfterMergeFunc_t resetFunc); Install a new wrapper around 'ResetAfterMerge'. void SetNew(ROOT::NewFunc_t newFunc); Install a new wrapper around 'new'. void SetNewArray(ROOT::NewArrFunc_t newArrayFunc); Install a new wrapper around 'new []'. void SetDelete(ROOT::DelFunc_t deleteFunc); Install a new wrapper around 'delete'. void SetDeleteArray(ROOT::DelArrFunc_t deleteArrayFunc); Install a new wrapper around 'delete []'. void SetDestructor(ROOT::DesFunc_t destructorFunc); Install a new wrapper around the destructor. void SetDirectoryAutoAdd(ROOT::DirAutoAdd_t dirAutoAddFunc); Install a new wrapper around the directory auto add function..; The function autoAddFunc has the signature void (*)(void *obj, TDirectory dir); and should register 'obj' to the directory if dir is not null; and unregister 'obj' from its current",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:45931,Security,checksum,checksum,45931,"nc); Install a new wrapper around 'Merge'. void SetResetAfterMerge(ROOT::ResetAfterMergeFunc_t resetFunc); Install a new wrapper around 'ResetAfterMerge'. void SetNew(ROOT::NewFunc_t newFunc); Install a new wrapper around 'new'. void SetNewArray(ROOT::NewArrFunc_t newArrayFunc); Install a new wrapper around 'new []'. void SetDelete(ROOT::DelFunc_t deleteFunc); Install a new wrapper around 'delete'. void SetDeleteArray(ROOT::DelArrFunc_t deleteArrayFunc); Install a new wrapper around 'delete []'. void SetDestructor(ROOT::DesFunc_t destructorFunc); Install a new wrapper around the destructor. void SetDirectoryAutoAdd(ROOT::DirAutoAdd_t dirAutoAddFunc); Install a new wrapper around the directory auto add function..; The function autoAddFunc has the signature void (*)(void *obj, TDirectory dir); and should register 'obj' to the directory if dir is not null; and unregister 'obj' from its current directory if dir is null. TVirtualStreamerInfo * FindStreamerInfo(UInt_t checksum) const; Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. TVirtualStreamerInfo * FindStreamerInfo(TObjArray* arr, UInt_t checksum) const; Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. TVirtualStreamerInfo * GetConversionStreamerInfo(const char* onfile_classname, Int_t version) const; Return a Conversion StreamerInfo from the class 'classname' for version number 'version' to this class, if any. TVirtualStreamerInfo * GetConversionStreamerInfo(const TClass* onfile_cl, Int_t version) const; Return a Conversion StreamerInfo from the class represened by cl for version number 'version' to this class, if any. TVirtualStreamerInfo * FindConversionStreamerInfo(const char* onfile_classname, UInt_t checksum) const; Return a Conversion StreamerInfo from the class 'classname' for the layout represented by 'checksum' to this class, if any. TVirtualStreamerInfo * FindConversionStreamerInfo(const TClass* onfile_cl, UInt_t checksum) const; Return a Conversi",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:46016,Security,checksum,checksum,46016,"nc); Install a new wrapper around 'Merge'. void SetResetAfterMerge(ROOT::ResetAfterMergeFunc_t resetFunc); Install a new wrapper around 'ResetAfterMerge'. void SetNew(ROOT::NewFunc_t newFunc); Install a new wrapper around 'new'. void SetNewArray(ROOT::NewArrFunc_t newArrayFunc); Install a new wrapper around 'new []'. void SetDelete(ROOT::DelFunc_t deleteFunc); Install a new wrapper around 'delete'. void SetDeleteArray(ROOT::DelArrFunc_t deleteArrayFunc); Install a new wrapper around 'delete []'. void SetDestructor(ROOT::DesFunc_t destructorFunc); Install a new wrapper around the destructor. void SetDirectoryAutoAdd(ROOT::DirAutoAdd_t dirAutoAddFunc); Install a new wrapper around the directory auto add function..; The function autoAddFunc has the signature void (*)(void *obj, TDirectory dir); and should register 'obj' to the directory if dir is not null; and unregister 'obj' from its current directory if dir is null. TVirtualStreamerInfo * FindStreamerInfo(UInt_t checksum) const; Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. TVirtualStreamerInfo * FindStreamerInfo(TObjArray* arr, UInt_t checksum) const; Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. TVirtualStreamerInfo * GetConversionStreamerInfo(const char* onfile_classname, Int_t version) const; Return a Conversion StreamerInfo from the class 'classname' for version number 'version' to this class, if any. TVirtualStreamerInfo * GetConversionStreamerInfo(const TClass* onfile_cl, Int_t version) const; Return a Conversion StreamerInfo from the class represened by cl for version number 'version' to this class, if any. TVirtualStreamerInfo * FindConversionStreamerInfo(const char* onfile_classname, UInt_t checksum) const; Return a Conversion StreamerInfo from the class 'classname' for the layout represented by 'checksum' to this class, if any. TVirtualStreamerInfo * FindConversionStreamerInfo(const TClass* onfile_cl, UInt_t checksum) const; Return a Conversi",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:46089,Security,checksum,checksum,46089,"ge'. void SetNew(ROOT::NewFunc_t newFunc); Install a new wrapper around 'new'. void SetNewArray(ROOT::NewArrFunc_t newArrayFunc); Install a new wrapper around 'new []'. void SetDelete(ROOT::DelFunc_t deleteFunc); Install a new wrapper around 'delete'. void SetDeleteArray(ROOT::DelArrFunc_t deleteArrayFunc); Install a new wrapper around 'delete []'. void SetDestructor(ROOT::DesFunc_t destructorFunc); Install a new wrapper around the destructor. void SetDirectoryAutoAdd(ROOT::DirAutoAdd_t dirAutoAddFunc); Install a new wrapper around the directory auto add function..; The function autoAddFunc has the signature void (*)(void *obj, TDirectory dir); and should register 'obj' to the directory if dir is not null; and unregister 'obj' from its current directory if dir is null. TVirtualStreamerInfo * FindStreamerInfo(UInt_t checksum) const; Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. TVirtualStreamerInfo * FindStreamerInfo(TObjArray* arr, UInt_t checksum) const; Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. TVirtualStreamerInfo * GetConversionStreamerInfo(const char* onfile_classname, Int_t version) const; Return a Conversion StreamerInfo from the class 'classname' for version number 'version' to this class, if any. TVirtualStreamerInfo * GetConversionStreamerInfo(const TClass* onfile_cl, Int_t version) const; Return a Conversion StreamerInfo from the class represened by cl for version number 'version' to this class, if any. TVirtualStreamerInfo * FindConversionStreamerInfo(const char* onfile_classname, UInt_t checksum) const; Return a Conversion StreamerInfo from the class 'classname' for the layout represented by 'checksum' to this class, if any. TVirtualStreamerInfo * FindConversionStreamerInfo(const TClass* onfile_cl, UInt_t checksum) const; Return a Conversion StreamerInfo from the class represened by cl for the layout represented by 'checksum' to this class, if any. Bool_t HasDefaultConstructor() const; ",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:46174,Security,checksum,checksum,46174,"ge'. void SetNew(ROOT::NewFunc_t newFunc); Install a new wrapper around 'new'. void SetNewArray(ROOT::NewArrFunc_t newArrayFunc); Install a new wrapper around 'new []'. void SetDelete(ROOT::DelFunc_t deleteFunc); Install a new wrapper around 'delete'. void SetDeleteArray(ROOT::DelArrFunc_t deleteArrayFunc); Install a new wrapper around 'delete []'. void SetDestructor(ROOT::DesFunc_t destructorFunc); Install a new wrapper around the destructor. void SetDirectoryAutoAdd(ROOT::DirAutoAdd_t dirAutoAddFunc); Install a new wrapper around the directory auto add function..; The function autoAddFunc has the signature void (*)(void *obj, TDirectory dir); and should register 'obj' to the directory if dir is not null; and unregister 'obj' from its current directory if dir is null. TVirtualStreamerInfo * FindStreamerInfo(UInt_t checksum) const; Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. TVirtualStreamerInfo * FindStreamerInfo(TObjArray* arr, UInt_t checksum) const; Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. TVirtualStreamerInfo * GetConversionStreamerInfo(const char* onfile_classname, Int_t version) const; Return a Conversion StreamerInfo from the class 'classname' for version number 'version' to this class, if any. TVirtualStreamerInfo * GetConversionStreamerInfo(const TClass* onfile_cl, Int_t version) const; Return a Conversion StreamerInfo from the class represened by cl for version number 'version' to this class, if any. TVirtualStreamerInfo * FindConversionStreamerInfo(const char* onfile_classname, UInt_t checksum) const; Return a Conversion StreamerInfo from the class 'classname' for the layout represented by 'checksum' to this class, if any. TVirtualStreamerInfo * FindConversionStreamerInfo(const TClass* onfile_cl, UInt_t checksum) const; Return a Conversion StreamerInfo from the class represened by cl for the layout represented by 'checksum' to this class, if any. Bool_t HasDefaultConstructor() const; ",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:46697,Security,checksum,checksum,46697,"d (*)(void *obj, TDirectory dir); and should register 'obj' to the directory if dir is not null; and unregister 'obj' from its current directory if dir is null. TVirtualStreamerInfo * FindStreamerInfo(UInt_t checksum) const; Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. TVirtualStreamerInfo * FindStreamerInfo(TObjArray* arr, UInt_t checksum) const; Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. TVirtualStreamerInfo * GetConversionStreamerInfo(const char* onfile_classname, Int_t version) const; Return a Conversion StreamerInfo from the class 'classname' for version number 'version' to this class, if any. TVirtualStreamerInfo * GetConversionStreamerInfo(const TClass* onfile_cl, Int_t version) const; Return a Conversion StreamerInfo from the class represened by cl for version number 'version' to this class, if any. TVirtualStreamerInfo * FindConversionStreamerInfo(const char* onfile_classname, UInt_t checksum) const; Return a Conversion StreamerInfo from the class 'classname' for the layout represented by 'checksum' to this class, if any. TVirtualStreamerInfo * FindConversionStreamerInfo(const TClass* onfile_cl, UInt_t checksum) const; Return a Conversion StreamerInfo from the class represened by cl for the layout represented by 'checksum' to this class, if any. Bool_t HasDefaultConstructor() const; Return true if we have access to a default constructor. ROOT::MergeFunc_t GetMerge() const; Return the wrapper around Merge. ROOT::ResetAfterMergeFunc_t GetResetAfterMerge() const; Return the wrapper around Merge. ROOT::NewFunc_t GetNew() const; Return the wrapper around new ThisClass(). ROOT::NewArrFunc_t GetNewArray() const; Return the wrapper around new ThisClass[]. ROOT::DelFunc_t GetDelete() const; Return the wrapper around delete ThiObject. ROOT::DelArrFunc_t GetDeleteArray() const; Return the wrapper around delete [] ThiObject. ROOT::DesFunc_t GetDestructor() const; Return the wrapper around the destructo",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:46805,Security,checksum,checksum,46805,"d (*)(void *obj, TDirectory dir); and should register 'obj' to the directory if dir is not null; and unregister 'obj' from its current directory if dir is null. TVirtualStreamerInfo * FindStreamerInfo(UInt_t checksum) const; Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. TVirtualStreamerInfo * FindStreamerInfo(TObjArray* arr, UInt_t checksum) const; Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. TVirtualStreamerInfo * GetConversionStreamerInfo(const char* onfile_classname, Int_t version) const; Return a Conversion StreamerInfo from the class 'classname' for version number 'version' to this class, if any. TVirtualStreamerInfo * GetConversionStreamerInfo(const TClass* onfile_cl, Int_t version) const; Return a Conversion StreamerInfo from the class represened by cl for version number 'version' to this class, if any. TVirtualStreamerInfo * FindConversionStreamerInfo(const char* onfile_classname, UInt_t checksum) const; Return a Conversion StreamerInfo from the class 'classname' for the layout represented by 'checksum' to this class, if any. TVirtualStreamerInfo * FindConversionStreamerInfo(const TClass* onfile_cl, UInt_t checksum) const; Return a Conversion StreamerInfo from the class represened by cl for the layout represented by 'checksum' to this class, if any. Bool_t HasDefaultConstructor() const; Return true if we have access to a default constructor. ROOT::MergeFunc_t GetMerge() const; Return the wrapper around Merge. ROOT::ResetAfterMergeFunc_t GetResetAfterMerge() const; Return the wrapper around Merge. ROOT::NewFunc_t GetNew() const; Return the wrapper around new ThisClass(). ROOT::NewArrFunc_t GetNewArray() const; Return the wrapper around new ThisClass[]. ROOT::DelFunc_t GetDelete() const; Return the wrapper around delete ThiObject. ROOT::DelArrFunc_t GetDeleteArray() const; Return the wrapper around delete [] ThiObject. ROOT::DesFunc_t GetDestructor() const; Return the wrapper around the destructo",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:46920,Security,checksum,checksum,46920,"d the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. TVirtualStreamerInfo * FindStreamerInfo(TObjArray* arr, UInt_t checksum) const; Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. TVirtualStreamerInfo * GetConversionStreamerInfo(const char* onfile_classname, Int_t version) const; Return a Conversion StreamerInfo from the class 'classname' for version number 'version' to this class, if any. TVirtualStreamerInfo * GetConversionStreamerInfo(const TClass* onfile_cl, Int_t version) const; Return a Conversion StreamerInfo from the class represened by cl for version number 'version' to this class, if any. TVirtualStreamerInfo * FindConversionStreamerInfo(const char* onfile_classname, UInt_t checksum) const; Return a Conversion StreamerInfo from the class 'classname' for the layout represented by 'checksum' to this class, if any. TVirtualStreamerInfo * FindConversionStreamerInfo(const TClass* onfile_cl, UInt_t checksum) const; Return a Conversion StreamerInfo from the class represened by cl for the layout represented by 'checksum' to this class, if any. Bool_t HasDefaultConstructor() const; Return true if we have access to a default constructor. ROOT::MergeFunc_t GetMerge() const; Return the wrapper around Merge. ROOT::ResetAfterMergeFunc_t GetResetAfterMerge() const; Return the wrapper around Merge. ROOT::NewFunc_t GetNew() const; Return the wrapper around new ThisClass(). ROOT::NewArrFunc_t GetNewArray() const; Return the wrapper around new ThisClass[]. ROOT::DelFunc_t GetDelete() const; Return the wrapper around delete ThiObject. ROOT::DelArrFunc_t GetDeleteArray() const; Return the wrapper around delete [] ThiObject. ROOT::DesFunc_t GetDestructor() const; Return the wrapper around the destructor. ROOT::DirAutoAdd_t GetDirectoryAutoAdd() const; Return the wrapper around the directory auto add function. void SetClassSize(Int_t sizof); { fSizeof = sizof; }. void AddInstance(Bool_t heap = kFALSE); { fInstanceCount++; if (",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:47033,Security,checksum,checksum,47033,"d the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. TVirtualStreamerInfo * FindStreamerInfo(TObjArray* arr, UInt_t checksum) const; Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. TVirtualStreamerInfo * GetConversionStreamerInfo(const char* onfile_classname, Int_t version) const; Return a Conversion StreamerInfo from the class 'classname' for version number 'version' to this class, if any. TVirtualStreamerInfo * GetConversionStreamerInfo(const TClass* onfile_cl, Int_t version) const; Return a Conversion StreamerInfo from the class represened by cl for version number 'version' to this class, if any. TVirtualStreamerInfo * FindConversionStreamerInfo(const char* onfile_classname, UInt_t checksum) const; Return a Conversion StreamerInfo from the class 'classname' for the layout represented by 'checksum' to this class, if any. TVirtualStreamerInfo * FindConversionStreamerInfo(const TClass* onfile_cl, UInt_t checksum) const; Return a Conversion StreamerInfo from the class represened by cl for the layout represented by 'checksum' to this class, if any. Bool_t HasDefaultConstructor() const; Return true if we have access to a default constructor. ROOT::MergeFunc_t GetMerge() const; Return the wrapper around Merge. ROOT::ResetAfterMergeFunc_t GetResetAfterMerge() const; Return the wrapper around Merge. ROOT::NewFunc_t GetNew() const; Return the wrapper around new ThisClass(). ROOT::NewArrFunc_t GetNewArray() const; Return the wrapper around new ThisClass[]. ROOT::DelFunc_t GetDelete() const; Return the wrapper around delete ThiObject. ROOT::DelArrFunc_t GetDeleteArray() const; Return the wrapper around delete [] ThiObject. ROOT::DesFunc_t GetDestructor() const; Return the wrapper around the destructor. ROOT::DirAutoAdd_t GetDirectoryAutoAdd() const; Return the wrapper around the directory auto add function. void SetClassSize(Int_t sizof); { fSizeof = sizof; }. void AddInstance(Bool_t heap = kFALSE); { fInstanceCount++; if (",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:47127,Security,access,access,47127,"he TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. TVirtualStreamerInfo * GetConversionStreamerInfo(const char* onfile_classname, Int_t version) const; Return a Conversion StreamerInfo from the class 'classname' for version number 'version' to this class, if any. TVirtualStreamerInfo * GetConversionStreamerInfo(const TClass* onfile_cl, Int_t version) const; Return a Conversion StreamerInfo from the class represened by cl for version number 'version' to this class, if any. TVirtualStreamerInfo * FindConversionStreamerInfo(const char* onfile_classname, UInt_t checksum) const; Return a Conversion StreamerInfo from the class 'classname' for the layout represented by 'checksum' to this class, if any. TVirtualStreamerInfo * FindConversionStreamerInfo(const TClass* onfile_cl, UInt_t checksum) const; Return a Conversion StreamerInfo from the class represened by cl for the layout represented by 'checksum' to this class, if any. Bool_t HasDefaultConstructor() const; Return true if we have access to a default constructor. ROOT::MergeFunc_t GetMerge() const; Return the wrapper around Merge. ROOT::ResetAfterMergeFunc_t GetResetAfterMerge() const; Return the wrapper around Merge. ROOT::NewFunc_t GetNew() const; Return the wrapper around new ThisClass(). ROOT::NewArrFunc_t GetNewArray() const; Return the wrapper around new ThisClass[]. ROOT::DelFunc_t GetDelete() const; Return the wrapper around delete ThiObject. ROOT::DelArrFunc_t GetDeleteArray() const; Return the wrapper around delete [] ThiObject. ROOT::DesFunc_t GetDestructor() const; Return the wrapper around the destructor. ROOT::DirAutoAdd_t GetDirectoryAutoAdd() const; Return the wrapper around the directory auto add function. void SetClassSize(Int_t sizof); { fSizeof = sizof; }. void AddInstance(Bool_t heap = kFALSE); { fInstanceCount++; if (heap) fOnHeap++; }. Bool_t CanIgnoreTObjectStreamer(); { return TestBit(kIgnoreTObjectStreamer);}. void Dump() const; { TDictionary::Dump(); }. Version_t GetClas",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:11694,Testability,Test,TestBit,11694,"e(const char* title); voidSetCurrentStreamerInfo(TVirtualStreamerInfo* info); voidSetDeclFile(const char* name, int line); voidSetDelete(ROOT::DelFunc_t deleteFunc); voidSetDeleteArray(ROOT::DelArrFunc_t deleteArrayFunc); voidSetDestructor(ROOT::DesFunc_t destructorFunc); voidSetDirectoryAutoAdd(ROOT::DirAutoAdd_t dirAutoAddFunc); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetGlobalIsA(IsAGlobalFunc_t); voidSetImplFileName(const char* implFileName); voidSetMemberStreamer(const char* name, MemberStreamerFunc_t strm); voidSetMerge(ROOT::MergeFunc_t mergeFunc); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); voidSetNew(ROOT::NewFunc_t newFunc); voidSetNewArray(ROOT::NewArrFunc_t newArrayFunc); static voidTObject::SetObjectStat(Bool_t stat); voidSetResetAfterMerge(ROOT::ResetAfterMergeFunc_t resetFunc); voidSetStreamerFunc(ClassStreamerFunc_t strm); TVirtualStreamerInfo*SetStreamerInfo(Int_t version, const char* info = """"); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); voidSetUnloaded(); virtual voidShowMembers(TMemberInspector& insp); Int_tSize() const; virtual Int_tTNamed::Sizeof() const; voidStore(TBuffer& b) const; virtual voidStreamer(TBuffer& b); voidStreamer(void* obj, TBuffer& b, const TClass* onfile_class = 0) const; voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; Int_tWriteBuffer(TBuffer& b, void* pointer, const char* info = """").",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:11733,Testability,Test,TestBits,11733,"e(const char* title); voidSetCurrentStreamerInfo(TVirtualStreamerInfo* info); voidSetDeclFile(const char* name, int line); voidSetDelete(ROOT::DelFunc_t deleteFunc); voidSetDeleteArray(ROOT::DelArrFunc_t deleteArrayFunc); voidSetDestructor(ROOT::DesFunc_t destructorFunc); voidSetDirectoryAutoAdd(ROOT::DirAutoAdd_t dirAutoAddFunc); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetGlobalIsA(IsAGlobalFunc_t); voidSetImplFileName(const char* implFileName); voidSetMemberStreamer(const char* name, MemberStreamerFunc_t strm); voidSetMerge(ROOT::MergeFunc_t mergeFunc); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); voidSetNew(ROOT::NewFunc_t newFunc); voidSetNewArray(ROOT::NewArrFunc_t newArrayFunc); static voidTObject::SetObjectStat(Bool_t stat); voidSetResetAfterMerge(ROOT::ResetAfterMergeFunc_t resetFunc); voidSetStreamerFunc(ClassStreamerFunc_t strm); TVirtualStreamerInfo*SetStreamerInfo(Int_t version, const char* info = """"); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); voidSetUnloaded(); virtual voidShowMembers(TMemberInspector& insp); Int_tSize() const; virtual Int_tTNamed::Sizeof() const; voidStore(TBuffer& b) const; virtual voidStreamer(TBuffer& b); voidStreamer(void* obj, TBuffer& b, const TClass* onfile_class = 0) const; voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; Int_tWriteBuffer(TBuffer& b, void* pointer, const char* info = """").",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:40218,Testability,test,test,40218,"erits from TObject; kForeign : the class does not have a Streamer method; kInstrumented: the class does have a Streamer method; kExternal: the class has a free standing way of streaming itself; kEmulated: the class is missing its shared library. void SetCollectionProxy(const ROOT::TCollectionProxyInfo& ); Create the collection proxy object (and the streamer object) from; using the information in the TCollectionProxyInfo. void SetContextMenuTitle(const char* title); Change (i.e. set) the title of the TNamed. void SetGlobalIsA(IsAGlobalFunc_t ); This function installs a global IsA function for this class.; The global IsA function will be used if there is no local IsA function (fIsA). A global IsA function has the signature:. TClass *func( TClass *cl, const void *obj);. 'cl' is a pointer to the TClass object that corresponds to the; 'pointer type' used to retrieve the value 'obj'. For example with:; TNamed * m = new TNamed(""example"",""test"");; TObject* o = m; and; the global IsA function would be called with TObject::Class() as; the first parameter and the exact numerical value in the pointer; 'o'. In other word, inside the global IsA function. it is safe to C-style; cast the value of 'obj' into a pointer to the class described by 'cl'. void SetUnloaded(); Call this method to indicate that the shared library containing this; class's code has been removed (unloaded) from the process's memory. TVirtualStreamerInfo * SetStreamerInfo(Int_t version, const char* info = """"); Info is a string describing the names and types of attributes; written by the class Streamer function.; If info is an empty string (when called by TObject::StreamerInfo); the default Streamer info string is build. This corresponds to; the case of an automatically generated Streamer.; In case of user defined Streamer function, it is the user responsability; to implement a StreamerInfo function (override TObject::StreamerInfo).; The user must call IsA()->SetStreamerInfo(info) from this function. UInt_t GetChe",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:48015,Testability,Test,TestBit,48015," layout represented by 'checksum' to this class, if any. Bool_t HasDefaultConstructor() const; Return true if we have access to a default constructor. ROOT::MergeFunc_t GetMerge() const; Return the wrapper around Merge. ROOT::ResetAfterMergeFunc_t GetResetAfterMerge() const; Return the wrapper around Merge. ROOT::NewFunc_t GetNew() const; Return the wrapper around new ThisClass(). ROOT::NewArrFunc_t GetNewArray() const; Return the wrapper around new ThisClass[]. ROOT::DelFunc_t GetDelete() const; Return the wrapper around delete ThiObject. ROOT::DelArrFunc_t GetDeleteArray() const; Return the wrapper around delete [] ThiObject. ROOT::DesFunc_t GetDestructor() const; Return the wrapper around the destructor. ROOT::DirAutoAdd_t GetDirectoryAutoAdd() const; Return the wrapper around the directory auto add function. void SetClassSize(Int_t sizof); { fSizeof = sizof; }. void AddInstance(Bool_t heap = kFALSE); { fInstanceCount++; if (heap) fOnHeap++; }. Bool_t CanIgnoreTObjectStreamer(); { return TestBit(kIgnoreTObjectStreamer);}. void Dump() const; { TDictionary::Dump(); }. Version_t GetClassVersion() const; { fVersionUsed = kTRUE; return fClassVersion; }. const char * GetDeclFileName() const; { return fDeclFileName; }. Short_t GetDeclFileLine() const; { return fDeclFileLine; }. ClassInfo_t * GetClassInfo() const; { return fClassInfo; }. const char * GetContextMenuTitle() const; { return fContextMenuTitle; }. TVirtualStreamerInfo * GetCurrentStreamerInfo(). TList * GetListOfRealData() const; { return fRealData; }. const char * GetImplFileName() const; { return fImplFileName; }. Short_t GetImplFileLine() const; { return fImplFileLine; }. UInt_t GetInstanceCount() const; { return fInstanceCount; }. UInt_t GetHeapInstanceCount() const; { return fOnHeap; }. TVirtualRefProxy * GetReferenceProxy() const; { return fRefProxy; }. ShowMembersFunc_t GetShowMembersWrapper() const; { return fShowMembers; }. TObjArray * GetStreamerInfos() const; { return fStreamerInfo; }. const type_in",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClass.html:2294,Usability,Clear,Clear,2294," static voidAddClass(TClass* cl); voidAddImplFile(const char* filename, int line); voidAddInstance(Bool_t heap = kFALSE); voidAddRef(TClassRef* ref); static Bool_tAddRule(const char* rule); voidAdoptMemberStreamer(const char* name, TMemberStreamer* strm); voidAdoptReferenceProxy(TVirtualRefProxy* proxy); voidAdoptSchemaRules(ROOT::TSchemaRuleSet* rules); voidAdoptStreamer(TClassStreamer* strm); virtual voidTObject::AppendPad(Option_t* option = """"); static Int_tAutoBrowse(TObject* obj, TBrowser* browser); virtual voidBrowse(TBrowser* b); Int_tBrowse(void* obj, TBrowser* b) const; voidBuildEmulatedRealData(const char* name, Long_t offset, TClass* cl); voidBuildRealData(void* pointer = 0, Bool_t isTransient = kFALSE); voidCalculateStreamerOffset() const; Bool_tCallShowMembers(void* obj, TMemberInspector& insp, Int_t isATObject = -1) const; Bool_tCanIgnoreTObjectStreamer(); Bool_tCanSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; voidCopyCollectionProxy(const TVirtualCollectionProxy&); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDeleteArray(void* ary, Bool_t dtorOnly = kFALSE); voidDestructor(void* obj, Bool_t dtorOnly = kFALSE); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDump() const; voidDump(void* obj) const; void*DynamicCast(const TClass* base, void* obj, Bool_t up = kTRUE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; char*EscapeChars(const char* text) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TOb",MatchSource.WIKI,root/html532/TClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClass.html
https://root.cern/root/html532/TClassDocInfo.html:1574,Availability,Error,Error,1574,"t char* decl = 0, const char* impl = 0); TClassDocInfo(TDictionary* cl, const char* htmlfilename = """", const char* fsdecl = """", const char* fsimpl = """", const char* decl = 0, const char* impl = 0); virtual~TClassDocInfo(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TDictionary*GetClass() const; const char*GetDeclFileName() const; const char*GetDeclFileSysName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const char*GetHtmlFileName() const; virtual const char*TObject::GetIconName() const; const char*GetImplFileName() const; const char*GetImplFileSysName() const; TList&GetListOfTypedefs(); TModuleDocInfo*GetModule() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; s",MatchSource.WIKI,root/html532/TClassDocInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassDocInfo.html
https://root.cern/root/html532/TClassDocInfo.html:1703,Availability,error,error,1703,"onst char* fsimpl = """", const char* decl = 0, const char* impl = 0); virtual~TClassDocInfo(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TDictionary*GetClass() const; const char*GetDeclFileName() const; const char*GetDeclFileSysName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const char*GetHtmlFileName() const; virtual const char*TObject::GetIconName() const; const char*GetImplFileName() const; const char*GetImplFileSysName() const; TList&GetListOfTypedefs(); TModuleDocInfo*GetModule() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; ",MatchSource.WIKI,root/html532/TClassDocInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassDocInfo.html
https://root.cern/root/html532/TClassDocInfo.html:1787,Availability,error,error,1787,"ocInfo(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TDictionary*GetClass() const; const char*GetDeclFileName() const; const char*GetDeclFileSysName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const char*GetHtmlFileName() const; virtual const char*TObject::GetIconName() const; const char*GetImplFileName() const; const char*GetImplFileSysName() const; TList&GetListOfTypedefs(); TModuleDocInfo*GetModule() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTime",MatchSource.WIKI,root/html532/TClassDocInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassDocInfo.html
https://root.cern/root/html532/TClassDocInfo.html:2952,Modifiability,Inherit,InheritsFrom,2952,"Object::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TDictionary*GetClass() const; const char*GetDeclFileName() const; const char*GetDeclFileSysName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const char*GetHtmlFileName() const; virtual const char*TObject::GetIconName() const; const char*GetImplFileName() const; const char*GetImplFileSysName() const; TList&GetListOfTypedefs(); TModuleDocInfo*GetModule() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tHash() const; Bool_tHaveSource() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tIsSelected() const; virtual Bool_tIsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](siz",MatchSource.WIKI,root/html532/TClassDocInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassDocInfo.html
https://root.cern/root/html532/TClassDocInfo.html:3018,Modifiability,Inherit,InheritsFrom,3018,"t::FindObject(const TObject* obj) const; TDictionary*GetClass() const; const char*GetDeclFileName() const; const char*GetDeclFileSysName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const char*GetHtmlFileName() const; virtual const char*TObject::GetIconName() const; const char*GetImplFileName() const; const char*GetImplFileSysName() const; TList&GetListOfTypedefs(); TModuleDocInfo*GetModule() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tHash() const; Bool_tHaveSource() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tIsSelected() const; virtual Bool_tIsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObjec",MatchSource.WIKI,root/html532/TClassDocInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassDocInfo.html
https://root.cern/root/html532/TClassDocInfo.html:6510,Modifiability,Inherit,Inheritance,6510,"tual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TClassDocInfo(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TDictionary*fClassclass (or typedef) represented by this info object; TStringfDeclFileNameheader; TStringfDeclFileSysNamefile system's location of the header; TStringfHtmlFileNamename of the HTML doc file; TStringfImplFileNamesource; TStringfImplFileSysNamefile system's location of the source; TModuleDocInfo*fModulemodule this class is in; Bool_tfSelectedselected for doc output; TListfTypedefstypedefs to this class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const char* GetName() const; Get the class name, or (UNKNOWN) is no TClass object was found. ULong_t Hash() const; Forward to TClass::Hash(), return -1 if no TClass object was found. Int_t Compare(const TObject* obj) const; Compare two TClassDocInfo objects; used for sorting. TClassDocInfo(TClass* cl, const char* htmlfilename = """", const char* fsdecl = """", const char* fsimpl = """", const char* decl = 0, const char* impl = 0); initialize the object. { }. TClassDocInfo(TDictionary* cl, const char* htmlfilename = """", const char* fsdecl = """", const char* fsimpl = """", const char* decl = 0, const char* impl = 0); { }. virtual ~TClassDocInfo(); {}. TDictionary* GetClass() const; { return fClass; }. const char* GetHtmlFileName() const; { return fHtmlFileName; }. const char* GetDeclFileName() const; { return fDeclFileName; }. const char* GetImplFileName() const; { return fImplFileName; }. const char* GetDeclFileSysName() const; { return fDeclFil",MatchSource.WIKI,root/html532/TClassDocInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassDocInfo.html
https://root.cern/root/html532/TClassDocInfo.html:6523,Modifiability,Inherit,Inherited,6523,"tual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TClassDocInfo(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TDictionary*fClassclass (or typedef) represented by this info object; TStringfDeclFileNameheader; TStringfDeclFileSysNamefile system's location of the header; TStringfHtmlFileNamename of the HTML doc file; TStringfImplFileNamesource; TStringfImplFileSysNamefile system's location of the source; TModuleDocInfo*fModulemodule this class is in; Bool_tfSelectedselected for doc output; TListfTypedefstypedefs to this class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const char* GetName() const; Get the class name, or (UNKNOWN) is no TClass object was found. ULong_t Hash() const; Forward to TClass::Hash(), return -1 if no TClass object was found. Int_t Compare(const TObject* obj) const; Compare two TClassDocInfo objects; used for sorting. TClassDocInfo(TClass* cl, const char* htmlfilename = """", const char* fsdecl = """", const char* fsimpl = """", const char* decl = 0, const char* impl = 0); initialize the object. { }. TClassDocInfo(TDictionary* cl, const char* htmlfilename = """", const char* fsdecl = """", const char* fsimpl = """", const char* decl = 0, const char* impl = 0); { }. virtual ~TClassDocInfo(); {}. TDictionary* GetClass() const; { return fClass; }. const char* GetHtmlFileName() const; { return fHtmlFileName; }. const char* GetDeclFileName() const; { return fDeclFileName; }. const char* GetImplFileName() const; { return fImplFileName; }. const char* GetDeclFileSysName() const; { return fDeclFil",MatchSource.WIKI,root/html532/TClassDocInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassDocInfo.html
https://root.cern/root/html532/TClassDocInfo.html:292,Performance,Cache,Caches,292,". TClassDocInfo. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HTML; » TClassDocInfo. class TClassDocInfo: public TObject. Caches class documentation information, like which module it belongs to,; and whether THtml should generate documentation for the class. Function Members (Methods); public:. TClassDocInfo(TClass* cl, const char* htmlfilename = """", const char* fsdecl = """", const char* fsimpl = """", const char* decl = 0, const char* impl = 0); TClassDocInfo(TDictionary* cl, const char* htmlfilename = """", const char* fsdecl = """", const char* fsimpl = """", const char* decl = 0, const char* impl = 0); virtual~TClassDocInfo(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const;",MatchSource.WIKI,root/html532/TClassDocInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassDocInfo.html
https://root.cern/root/html532/TClassDocInfo.html:6688,Security,Hash,Hash,6688," va) const; voidTObject::MakeZombie(). private:. TClassDocInfo(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TDictionary*fClassclass (or typedef) represented by this info object; TStringfDeclFileNameheader; TStringfDeclFileSysNamefile system's location of the header; TStringfHtmlFileNamename of the HTML doc file; TStringfImplFileNamesource; TStringfImplFileSysNamefile system's location of the source; TModuleDocInfo*fModulemodule this class is in; Bool_tfSelectedselected for doc output; TListfTypedefstypedefs to this class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const char* GetName() const; Get the class name, or (UNKNOWN) is no TClass object was found. ULong_t Hash() const; Forward to TClass::Hash(), return -1 if no TClass object was found. Int_t Compare(const TObject* obj) const; Compare two TClassDocInfo objects; used for sorting. TClassDocInfo(TClass* cl, const char* htmlfilename = """", const char* fsdecl = """", const char* fsimpl = """", const char* decl = 0, const char* impl = 0); initialize the object. { }. TClassDocInfo(TDictionary* cl, const char* htmlfilename = """", const char* fsdecl = """", const char* fsimpl = """", const char* decl = 0, const char* impl = 0); { }. virtual ~TClassDocInfo(); {}. TDictionary* GetClass() const; { return fClass; }. const char* GetHtmlFileName() const; { return fHtmlFileName; }. const char* GetDeclFileName() const; { return fDeclFileName; }. const char* GetImplFileName() const; { return fImplFileName; }. const char* GetDeclFileSysName() const; { return fDeclFileSysName; }. const char* GetImplFileSysName() const; { return fImplFileSysName; }. void SetModule(TModuleDocInfo* module); { fModule = module; }. TModuleDocInfo* GetModule() const; { retur",MatchSource.WIKI,root/html532/TClassDocInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassDocInfo.html
https://root.cern/root/html532/TClassDocInfo.html:6721,Security,Hash,Hash,6721," va) const; voidTObject::MakeZombie(). private:. TClassDocInfo(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TDictionary*fClassclass (or typedef) represented by this info object; TStringfDeclFileNameheader; TStringfDeclFileSysNamefile system's location of the header; TStringfHtmlFileNamename of the HTML doc file; TStringfImplFileNamesource; TStringfImplFileSysNamefile system's location of the source; TModuleDocInfo*fModulemodule this class is in; Bool_tfSelectedselected for doc output; TListfTypedefstypedefs to this class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const char* GetName() const; Get the class name, or (UNKNOWN) is no TClass object was found. ULong_t Hash() const; Forward to TClass::Hash(), return -1 if no TClass object was found. Int_t Compare(const TObject* obj) const; Compare two TClassDocInfo objects; used for sorting. TClassDocInfo(TClass* cl, const char* htmlfilename = """", const char* fsdecl = """", const char* fsimpl = """", const char* decl = 0, const char* impl = 0); initialize the object. { }. TClassDocInfo(TDictionary* cl, const char* htmlfilename = """", const char* fsdecl = """", const char* fsimpl = """", const char* decl = 0, const char* impl = 0); { }. virtual ~TClassDocInfo(); {}. TDictionary* GetClass() const; { return fClass; }. const char* GetHtmlFileName() const; { return fHtmlFileName; }. const char* GetDeclFileName() const; { return fDeclFileName; }. const char* GetImplFileName() const; { return fImplFileName; }. const char* GetDeclFileSysName() const; { return fDeclFileSysName; }. const char* GetImplFileSysName() const; { return fImplFileSysName; }. void SetModule(TModuleDocInfo* module); { fModule = module; }. TModuleDocInfo* GetModule() const; { retur",MatchSource.WIKI,root/html532/TClassDocInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassDocInfo.html
https://root.cern/root/html532/TClassDocInfo.html:5263,Testability,Test,TestBit,5263,"tatic voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetDeclFileName(const char* name); voidSetDeclFileSysName(const char* fsname); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetHtmlFileName(const char* name); voidSetImplFileName(const char* name); voidSetImplFileSysName(const char* fsname); voidSetModule(TModuleDocInfo* module); static voidTObject::SetObjectStat(Bool_t stat); voidSetSelected(Bool_t sel = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TClassDocInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassDocInfo.html
https://root.cern/root/html532/TClassDocInfo.html:5302,Testability,Test,TestBits,5302,"tatic voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetDeclFileName(const char* name); voidSetDeclFileSysName(const char* fsname); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetHtmlFileName(const char* name); voidSetImplFileName(const char* name); voidSetImplFileSysName(const char* fsname); voidSetModule(TModuleDocInfo* module); static voidTObject::SetObjectStat(Bool_t stat); voidSetSelected(Bool_t sel = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TClassDocInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassDocInfo.html
https://root.cern/root/html532/TClassDocInfo.html:1043,Usability,Clear,Clear,1043," TClassDocInfo(TClass* cl, const char* htmlfilename = """", const char* fsdecl = """", const char* fsimpl = """", const char* decl = 0, const char* impl = 0); TClassDocInfo(TDictionary* cl, const char* htmlfilename = """", const char* fsdecl = """", const char* fsimpl = """", const char* decl = 0, const char* impl = 0); virtual~TClassDocInfo(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const;",MatchSource.WIKI,root/html532/TClassDocInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassDocInfo.html
https://root.cern/root/html532/TClassDocOutput.html:2720,Availability,Error,Error,2720,"Copy(TObject& object) const; Bool_tTDocOutput::CopyHtmlFile(const char* sourceName, const char* destName = """"); voidCreateClassHierarchy(ostream& out, const char* docFileName); virtual voidTDocOutput::CreateClassIndex(); virtual voidTDocOutput::CreateClassTypeDefs(); virtual voidTDocOutput::CreateHierarchy(); virtual voidTDocOutput::CreateModuleIndex(); virtual voidTDocOutput::CreateProductIndex(); virtual voidTDocOutput::CreateTypeIndex(); virtual voidTDocOutput::DecorateEntityBegin(TString& str, Ssiz_t& pos, TDocParser::EParseContext type); virtual voidTDocOutput::DecorateEntityEnd(TString& str, Ssiz_t& pos, TDocParser::EParseContext type); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidTDocOutput::FixupAuthorSourceInfo(TString& authors); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const char*TDocOutput::GetExtension() const; THtml*TDocOutput::GetHtml(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; ",MatchSource.WIKI,root/html532/TClassDocOutput.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassDocOutput.html
https://root.cern/root/html532/TClassDocOutput.html:2849,Availability,error,error,2849,"erarchy(ostream& out, const char* docFileName); virtual voidTDocOutput::CreateClassIndex(); virtual voidTDocOutput::CreateClassTypeDefs(); virtual voidTDocOutput::CreateHierarchy(); virtual voidTDocOutput::CreateModuleIndex(); virtual voidTDocOutput::CreateProductIndex(); virtual voidTDocOutput::CreateTypeIndex(); virtual voidTDocOutput::DecorateEntityBegin(TString& str, Ssiz_t& pos, TDocParser::EParseContext type); virtual voidTDocOutput::DecorateEntityEnd(TString& str, Ssiz_t& pos, TDocParser::EParseContext type); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidTDocOutput::FixupAuthorSourceInfo(TString& authors); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const char*TDocOutput::GetExtension() const; THtml*TDocOutput::GetHtml(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() con",MatchSource.WIKI,root/html532/TClassDocOutput.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassDocOutput.html
https://root.cern/root/html532/TClassDocOutput.html:2933,Availability,error,error,2933,"ndex(); virtual voidTDocOutput::CreateClassTypeDefs(); virtual voidTDocOutput::CreateHierarchy(); virtual voidTDocOutput::CreateModuleIndex(); virtual voidTDocOutput::CreateProductIndex(); virtual voidTDocOutput::CreateTypeIndex(); virtual voidTDocOutput::DecorateEntityBegin(TString& str, Ssiz_t& pos, TDocParser::EParseContext type); virtual voidTDocOutput::DecorateEntityEnd(TString& str, Ssiz_t& pos, TDocParser::EParseContext type); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidTDocOutput::FixupAuthorSourceInfo(TString& authors); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const char*TDocOutput::GetExtension() const; THtml*TDocOutput::GetHtml(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual",MatchSource.WIKI,root/html532/TClassDocOutput.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassDocOutput.html
https://root.cern/root/html532/TClassDocOutput.html:11585,Availability,down,down,11585,"ludes; Libraries. Function documentation; TClassDocOutput(THtml& html, TClass* cl, TList* typedefs); Create an object given the invoking THtml object, and the TClass; object that we will generate output for. ~TClassDocOutput(); Destructor, deletes fParser. void Class2Html(Bool_t force = kFALSE); Create HTML files for a single class. void ListFunctions(ostream& classFile); Write the list of functions. void ListDataMembers(ostream& classFile); Write the list of data members and enums. Bool_t ClassDotCharts(ostream& out); This function builds the class charts for one class in GraphViz/Dot format,; i.e. the inheritance diagram, the include dependencies, and the library; dependency. Input: out - output file stream. void ClassHtmlTree(ostream& out, TClass* classPtr, TClassDocOutput::ETraverse dir = kBoth, int depth = 1); This function builds the class tree for one class in HTML; (inherited and succeeding classes, called recursively). Input: out - output file stream; classPtr - pointer to the class; dir - direction to traverse tree: up, down or both. void ClassTree(TVirtualPad* canvas, Bool_t force = kFALSE); It makes a graphical class tree. Input: psCanvas - pointer to the current canvas; classPtr - pointer to the class. Bool_t CreateDotClassChartInh(const char* filename); Build the class tree for one class in GraphViz/Dot format. Input: filename - output dot file incl. path. Bool_t CreateDotClassChartInhMem(const char* filename); Build the class tree of inherited members for one class in GraphViz/Dot format. Input: filename - output dot file incl. path. Bool_t CreateDotClassChartIncl(const char* filename); Build the include dependency graph for one class in; GraphViz/Dot format. Input: filename - output dot file incl. path. Bool_t CreateDotClassChartLib(const char* filename); Build the library dependency graph for one class in; GraphViz/Dot format. Input: filename - output dot file incl. path. void CreateClassHierarchy(ostream& out, const char* docFileName); Create the h",MatchSource.WIKI,root/html532/TClassDocOutput.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassDocOutput.html
https://root.cern/root/html532/TClassDocOutput.html:14609,Deployability,update,updates,14609,"TML header is written to out. void DescendHierarchy(ostream& out, TClass* basePtr, Int_t maxLines = 0, Int_t depth = 1); Descend hierarchy recursively; loop over all classes and look for classes with base class basePtr. void MakeTree(Bool_t force = kFALSE); Create an output file with a graphical representation of the class; inheritance. If force, replace existing output file.; This routine does nothing if fHtml->HaveDot() is true - use; ClassDotCharts() instead!. void WriteClassDescription(ostream& out, const TString& description); Called by TDocParser::LocateMethods(), this hook writes out the class description; found by TDocParser. It's even called if none is found, i.e. if the first method; has occurred before a class description is found, so missing class descriptions; can be handled.; For HTML, its creates the description block, the list of functions and data; members, and the inheritance tree or, if Graphviz's dot is found, the class charts. void WriteClassDocHeader(ostream& classFile); Write out the introduction of a class description (shortcuts and links). void WriteMethod(ostream& out, TString& ret, TString& name, TString& params, const char* file, TString& anchor, TString& comment, TString& codeOneLiner, TDocMethodWrapper* guessedMethod); Write method name with return type ret and parameters param to out.; Build a link using file and anchor. Cooment it with comment, and; show the code codeOneLiner (set if the func consists of only one line; of code, immediately surrounded by ""{"",""}""). Also updates fMethodNames's; count of method names. TClassDocOutput(THtml& html, TClass* cl, TList* typedefs). » Author: Axel Naumann 2007-01-09 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/html:$Id: TClassDocOutput.h 31111 2009-11-12 09:57:56Z axel $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TClassDocOutput.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassDocOutput.html
https://root.cern/root/html532/TClassDocOutput.html:751,Integrability,interface,interfaces,751,". TClassDocOutput. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HTML; » TClassDocOutput. class TClassDocOutput: public TDocOutput. Write the documentation for a class or namespace. The documentation is; parsed by TDocParser and then passed to TClassDocOutput to generate; the class doc header, the class description, members overview, and method; documentation. All generic output functionality is in TDocOutput; it is; re-used in this derived class. You usually do not use this class yourself; it is invoked indirectly by; THtml. Customization of the output should happen via the interfaces defined; by THtml. Function Members (Methods); public:. TClassDocOutput(const TClassDocOutput&); TClassDocOutput(THtml& html, TClass* cl, TList* typedefs); virtual~TClassDocOutput(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDocOutput::AdjustSourcePath(TString& line, const char* relpath = ""../""); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); voidClass2Html(Bool_t force = kFALSE); Bool_tClassDotCharts(ostream& out); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; voidTDocOutput::Convert(istream& in, const char* infilename, const char* outfilename, const char* title, const char* relpath = ""../"", Int_t includeOutput = 0, const char* context = """", TGClient* gclient = 0); virtual voidTObject::Copy(TObject& object) const; Bool_tTDocOutput::CopyHtmlFile(const char* sourceName, const char* destName = """"); voidCreateClassHierarchy(ostream& out, const char* docFileName); virtual voidTDocOutput::CreateClassIndex(); virtual voidTDocOutput::CreateClassTypeDefs(); virtual vo",MatchSource.WIKI,root/html532/TClassDocOutput.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassDocOutput.html
https://root.cern/root/html532/TClassDocOutput.html:11183,Integrability,depend,dependencies,11183,"; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TClass*fCurrentClassclass to generate output for; TList*fCurrentClassesTypedefstypedefs to the current class; Int_tfHierarchyLinescounter for no. lines in hierarchy; THtml*TDocOutput::fHtmlTHtml object we belong to; TDocParser*fParserparser we use. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TClassDocOutput(THtml& html, TClass* cl, TList* typedefs); Create an object given the invoking THtml object, and the TClass; object that we will generate output for. ~TClassDocOutput(); Destructor, deletes fParser. void Class2Html(Bool_t force = kFALSE); Create HTML files for a single class. void ListFunctions(ostream& classFile); Write the list of functions. void ListDataMembers(ostream& classFile); Write the list of data members and enums. Bool_t ClassDotCharts(ostream& out); This function builds the class charts for one class in GraphViz/Dot format,; i.e. the inheritance diagram, the include dependencies, and the library; dependency. Input: out - output file stream. void ClassHtmlTree(ostream& out, TClass* classPtr, TClassDocOutput::ETraverse dir = kBoth, int depth = 1); This function builds the class tree for one class in HTML; (inherited and succeeding classes, called recursively). Input: out - output file stream; classPtr - pointer to the class; dir - direction to traverse tree: up, down or both. void ClassTree(TVirtualPad* canvas, Bool_t force = kFALSE); It makes a graphical class tree. Input: psCanvas - pointer to the current canvas; classPtr - pointer to the class. Bool_t CreateDotClassChartInh(const char* filename); Build the class tree for one class in GraphViz/Dot format. Input: filename - output dot file incl. path. Bool_t CreateDotClassChartInhMem(const char* filename); Build the class tree of inherited members for one class in GraphViz/Dot format. Input: filename - output dot file incl. path. Bool_t CreateDotClassChartIncl(const char* filename); Build the include",MatchSource.WIKI,root/html532/TClassDocOutput.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassDocOutput.html
https://root.cern/root/html532/TClassDocOutput.html:11214,Integrability,depend,dependency,11214,"; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TClass*fCurrentClassclass to generate output for; TList*fCurrentClassesTypedefstypedefs to the current class; Int_tfHierarchyLinescounter for no. lines in hierarchy; THtml*TDocOutput::fHtmlTHtml object we belong to; TDocParser*fParserparser we use. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TClassDocOutput(THtml& html, TClass* cl, TList* typedefs); Create an object given the invoking THtml object, and the TClass; object that we will generate output for. ~TClassDocOutput(); Destructor, deletes fParser. void Class2Html(Bool_t force = kFALSE); Create HTML files for a single class. void ListFunctions(ostream& classFile); Write the list of functions. void ListDataMembers(ostream& classFile); Write the list of data members and enums. Bool_t ClassDotCharts(ostream& out); This function builds the class charts for one class in GraphViz/Dot format,; i.e. the inheritance diagram, the include dependencies, and the library; dependency. Input: out - output file stream. void ClassHtmlTree(ostream& out, TClass* classPtr, TClassDocOutput::ETraverse dir = kBoth, int depth = 1); This function builds the class tree for one class in HTML; (inherited and succeeding classes, called recursively). Input: out - output file stream; classPtr - pointer to the class; dir - direction to traverse tree: up, down or both. void ClassTree(TVirtualPad* canvas, Bool_t force = kFALSE); It makes a graphical class tree. Input: psCanvas - pointer to the current canvas; classPtr - pointer to the class. Bool_t CreateDotClassChartInh(const char* filename); Build the class tree for one class in GraphViz/Dot format. Input: filename - output dot file incl. path. Bool_t CreateDotClassChartInhMem(const char* filename); Build the class tree of inherited members for one class in GraphViz/Dot format. Input: filename - output dot file incl. path. Bool_t CreateDotClassChartIncl(const char* filename); Build the include",MatchSource.WIKI,root/html532/TClassDocOutput.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassDocOutput.html
https://root.cern/root/html532/TClassDocOutput.html:12186,Integrability,depend,dependency,12186,"clude dependencies, and the library; dependency. Input: out - output file stream. void ClassHtmlTree(ostream& out, TClass* classPtr, TClassDocOutput::ETraverse dir = kBoth, int depth = 1); This function builds the class tree for one class in HTML; (inherited and succeeding classes, called recursively). Input: out - output file stream; classPtr - pointer to the class; dir - direction to traverse tree: up, down or both. void ClassTree(TVirtualPad* canvas, Bool_t force = kFALSE); It makes a graphical class tree. Input: psCanvas - pointer to the current canvas; classPtr - pointer to the class. Bool_t CreateDotClassChartInh(const char* filename); Build the class tree for one class in GraphViz/Dot format. Input: filename - output dot file incl. path. Bool_t CreateDotClassChartInhMem(const char* filename); Build the class tree of inherited members for one class in GraphViz/Dot format. Input: filename - output dot file incl. path. Bool_t CreateDotClassChartIncl(const char* filename); Build the include dependency graph for one class in; GraphViz/Dot format. Input: filename - output dot file incl. path. Bool_t CreateDotClassChartLib(const char* filename); Build the library dependency graph for one class in; GraphViz/Dot format. Input: filename - output dot file incl. path. void CreateClassHierarchy(ostream& out, const char* docFileName); Create the hierarchical class list part for the current class's; base classes. docFileName contains doc for fCurrentClass. Bool_t CreateHierarchyDot(); Create a hierarchical class list; The algorithm descends from the base classes and branches into; all derived classes. Mixing classes are displayed several times. void CreateSourceOutputStream(ostream& out, const char* extension, TString& filename); Open a Class.cxx.html file, where Class is defined by classPtr, and .cxx.html by extension; It's created in fHtml->GetOutputDir()/src. If successful, the HTML header is written to out. void DescendHierarchy(ostream& out, TClass* basePtr, Int_t maxL",MatchSource.WIKI,root/html532/TClassDocOutput.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassDocOutput.html
https://root.cern/root/html532/TClassDocOutput.html:12359,Integrability,depend,dependency,12359,"int depth = 1); This function builds the class tree for one class in HTML; (inherited and succeeding classes, called recursively). Input: out - output file stream; classPtr - pointer to the class; dir - direction to traverse tree: up, down or both. void ClassTree(TVirtualPad* canvas, Bool_t force = kFALSE); It makes a graphical class tree. Input: psCanvas - pointer to the current canvas; classPtr - pointer to the class. Bool_t CreateDotClassChartInh(const char* filename); Build the class tree for one class in GraphViz/Dot format. Input: filename - output dot file incl. path. Bool_t CreateDotClassChartInhMem(const char* filename); Build the class tree of inherited members for one class in GraphViz/Dot format. Input: filename - output dot file incl. path. Bool_t CreateDotClassChartIncl(const char* filename); Build the include dependency graph for one class in; GraphViz/Dot format. Input: filename - output dot file incl. path. Bool_t CreateDotClassChartLib(const char* filename); Build the library dependency graph for one class in; GraphViz/Dot format. Input: filename - output dot file incl. path. void CreateClassHierarchy(ostream& out, const char* docFileName); Create the hierarchical class list part for the current class's; base classes. docFileName contains doc for fCurrentClass. Bool_t CreateHierarchyDot(); Create a hierarchical class list; The algorithm descends from the base classes and branches into; all derived classes. Mixing classes are displayed several times. void CreateSourceOutputStream(ostream& out, const char* extension, TString& filename); Open a Class.cxx.html file, where Class is defined by classPtr, and .cxx.html by extension; It's created in fHtml->GetOutputDir()/src. If successful, the HTML header is written to out. void DescendHierarchy(ostream& out, TClass* basePtr, Int_t maxLines = 0, Int_t depth = 1); Descend hierarchy recursively; loop over all classes and look for classes with base class basePtr. void MakeTree(Bool_t force = kFALSE); Create an",MatchSource.WIKI,root/html532/TClassDocOutput.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassDocOutput.html
https://root.cern/root/html532/TClassDocOutput.html:13469,Integrability,rout,routine,13469," char* docFileName); Create the hierarchical class list part for the current class's; base classes. docFileName contains doc for fCurrentClass. Bool_t CreateHierarchyDot(); Create a hierarchical class list; The algorithm descends from the base classes and branches into; all derived classes. Mixing classes are displayed several times. void CreateSourceOutputStream(ostream& out, const char* extension, TString& filename); Open a Class.cxx.html file, where Class is defined by classPtr, and .cxx.html by extension; It's created in fHtml->GetOutputDir()/src. If successful, the HTML header is written to out. void DescendHierarchy(ostream& out, TClass* basePtr, Int_t maxLines = 0, Int_t depth = 1); Descend hierarchy recursively; loop over all classes and look for classes with base class basePtr. void MakeTree(Bool_t force = kFALSE); Create an output file with a graphical representation of the class; inheritance. If force, replace existing output file.; This routine does nothing if fHtml->HaveDot() is true - use; ClassDotCharts() instead!. void WriteClassDescription(ostream& out, const TString& description); Called by TDocParser::LocateMethods(), this hook writes out the class description; found by TDocParser. It's even called if none is found, i.e. if the first method; has occurred before a class description is found, so missing class descriptions; can be handled.; For HTML, its creates the description block, the list of functions and data; members, and the inheritance tree or, if Graphviz's dot is found, the class charts. void WriteClassDocHeader(ostream& classFile); Write out the introduction of a class description (shortcuts and links). void WriteMethod(ostream& out, TString& ret, TString& name, TString& params, const char* file, TString& anchor, TString& comment, TString& codeOneLiner, TDocMethodWrapper* guessedMethod); Write method name with return type ret and parameters param to out.; Build a link using file and anchor. Cooment it with comment, and; show the code codeO",MatchSource.WIKI,root/html532/TClassDocOutput.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassDocOutput.html
https://root.cern/root/html532/TClassDocOutput.html:3952,Modifiability,Inherit,InheritsFrom,3952,"Object::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidTDocOutput::FixupAuthorSourceInfo(TString& authors); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const char*TDocOutput::GetExtension() const; THtml*TDocOutput::GetHtml(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTDocOutput::IsModified(TClass* classPtr, TDocOutput::EFileType type); Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidMakeTree(Bool_t force = kFALSE); voidTObject::MayNotUse(const char* method) const; virtual voidTDocOutput::NameSpace2FileName(TString& name); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObjec",MatchSource.WIKI,root/html532/TClassDocOutput.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassDocOutput.html
https://root.cern/root/html532/TClassDocOutput.html:4018,Modifiability,Inherit,InheritsFrom,4018,"dTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidTDocOutput::FixupAuthorSourceInfo(TString& authors); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const char*TDocOutput::GetExtension() const; THtml*TDocOutput::GetHtml(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTDocOutput::IsModified(TClass* classPtr, TDocOutput::EFileType type); Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidMakeTree(Bool_t force = kFALSE); voidTObject::MayNotUse(const char* method) const; virtual voidTDocOutput::NameSpace2FileName(TString& name); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator ",MatchSource.WIKI,root/html532/TClassDocOutput.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassDocOutput.html
https://root.cern/root/html532/TClassDocOutput.html:10504,Modifiability,Inherit,Inheritance,10504," out); voidTDocOutput::WriteModuleLinks(ostream& out, TModuleDocInfo* super); virtual voidTDocOutput::WriteSearch(ostream& out); voidTDocOutput::WriteTopLinks(ostream& out, TModuleDocInfo* module, const char* classname = 0, Bool_t withLocation = kTRUE). Data Members; public:. enum ETraverse { kUp; kDown; kBoth; };; enum TDocOutput::EGraphvizTool { kDot; kNeato; kFdp; kCirco; };; enum TDocOutput::EFileType { kSource; kInclude; kTree; kDoc; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TClass*fCurrentClassclass to generate output for; TList*fCurrentClassesTypedefstypedefs to the current class; Int_tfHierarchyLinescounter for no. lines in hierarchy; THtml*TDocOutput::fHtmlTHtml object we belong to; TDocParser*fParserparser we use. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TClassDocOutput(THtml& html, TClass* cl, TList* typedefs); Create an object given the invoking THtml object, and the TClass; object that we will generate output for. ~TClassDocOutput(); Destructor, deletes fParser. void Class2Html(Bool_t force = kFALSE); Create HTML files for a single class. void ListFunctions(ostream& classFile); Write the list of functions. void ListDataMembers(ostream& classFile); Write the list of data members and enums. Bool_t ClassDotCharts(ostream& out); This function builds the class charts for one class in GraphViz/Dot format,; i.e. the inheritance diagram, the include dependencies, and the library; dependency. Input: out - output file stream. void ClassHtmlTree(ostream& out, TClass* classPtr, TClassDocOutput::ETraverse dir = kBoth, int depth = 1); This function builds the class tree for one class in HTML; (inherited and succeeding classes, called recursively). Input: out - output file stream; classPtr - point",MatchSource.WIKI,root/html532/TClassDocOutput.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassDocOutput.html
https://root.cern/root/html532/TClassDocOutput.html:10517,Modifiability,Inherit,Inherited,10517," out); voidTDocOutput::WriteModuleLinks(ostream& out, TModuleDocInfo* super); virtual voidTDocOutput::WriteSearch(ostream& out); voidTDocOutput::WriteTopLinks(ostream& out, TModuleDocInfo* module, const char* classname = 0, Bool_t withLocation = kTRUE). Data Members; public:. enum ETraverse { kUp; kDown; kBoth; };; enum TDocOutput::EGraphvizTool { kDot; kNeato; kFdp; kCirco; };; enum TDocOutput::EFileType { kSource; kInclude; kTree; kDoc; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TClass*fCurrentClassclass to generate output for; TList*fCurrentClassesTypedefstypedefs to the current class; Int_tfHierarchyLinescounter for no. lines in hierarchy; THtml*TDocOutput::fHtmlTHtml object we belong to; TDocParser*fParserparser we use. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TClassDocOutput(THtml& html, TClass* cl, TList* typedefs); Create an object given the invoking THtml object, and the TClass; object that we will generate output for. ~TClassDocOutput(); Destructor, deletes fParser. void Class2Html(Bool_t force = kFALSE); Create HTML files for a single class. void ListFunctions(ostream& classFile); Write the list of functions. void ListDataMembers(ostream& classFile); Write the list of data members and enums. Bool_t ClassDotCharts(ostream& out); This function builds the class charts for one class in GraphViz/Dot format,; i.e. the inheritance diagram, the include dependencies, and the library; dependency. Input: out - output file stream. void ClassHtmlTree(ostream& out, TClass* classPtr, TClassDocOutput::ETraverse dir = kBoth, int depth = 1); This function builds the class tree for one class in HTML; (inherited and succeeding classes, called recursively). Input: out - output file stream; classPtr - point",MatchSource.WIKI,root/html532/TClassDocOutput.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassDocOutput.html
https://root.cern/root/html532/TClassDocOutput.html:11150,Modifiability,inherit,inheritance,11150,"; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TClass*fCurrentClassclass to generate output for; TList*fCurrentClassesTypedefstypedefs to the current class; Int_tfHierarchyLinescounter for no. lines in hierarchy; THtml*TDocOutput::fHtmlTHtml object we belong to; TDocParser*fParserparser we use. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TClassDocOutput(THtml& html, TClass* cl, TList* typedefs); Create an object given the invoking THtml object, and the TClass; object that we will generate output for. ~TClassDocOutput(); Destructor, deletes fParser. void Class2Html(Bool_t force = kFALSE); Create HTML files for a single class. void ListFunctions(ostream& classFile); Write the list of functions. void ListDataMembers(ostream& classFile); Write the list of data members and enums. Bool_t ClassDotCharts(ostream& out); This function builds the class charts for one class in GraphViz/Dot format,; i.e. the inheritance diagram, the include dependencies, and the library; dependency. Input: out - output file stream. void ClassHtmlTree(ostream& out, TClass* classPtr, TClassDocOutput::ETraverse dir = kBoth, int depth = 1); This function builds the class tree for one class in HTML; (inherited and succeeding classes, called recursively). Input: out - output file stream; classPtr - pointer to the class; dir - direction to traverse tree: up, down or both. void ClassTree(TVirtualPad* canvas, Bool_t force = kFALSE); It makes a graphical class tree. Input: psCanvas - pointer to the current canvas; classPtr - pointer to the class. Bool_t CreateDotClassChartInh(const char* filename); Build the class tree for one class in GraphViz/Dot format. Input: filename - output dot file incl. path. Bool_t CreateDotClassChartInhMem(const char* filename); Build the class tree of inherited members for one class in GraphViz/Dot format. Input: filename - output dot file incl. path. Bool_t CreateDotClassChartIncl(const char* filename); Build the include",MatchSource.WIKI,root/html532/TClassDocOutput.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassDocOutput.html
https://root.cern/root/html532/TClassDocOutput.html:11426,Modifiability,inherit,inherited,11426,"escounter for no. lines in hierarchy; THtml*TDocOutput::fHtmlTHtml object we belong to; TDocParser*fParserparser we use. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TClassDocOutput(THtml& html, TClass* cl, TList* typedefs); Create an object given the invoking THtml object, and the TClass; object that we will generate output for. ~TClassDocOutput(); Destructor, deletes fParser. void Class2Html(Bool_t force = kFALSE); Create HTML files for a single class. void ListFunctions(ostream& classFile); Write the list of functions. void ListDataMembers(ostream& classFile); Write the list of data members and enums. Bool_t ClassDotCharts(ostream& out); This function builds the class charts for one class in GraphViz/Dot format,; i.e. the inheritance diagram, the include dependencies, and the library; dependency. Input: out - output file stream. void ClassHtmlTree(ostream& out, TClass* classPtr, TClassDocOutput::ETraverse dir = kBoth, int depth = 1); This function builds the class tree for one class in HTML; (inherited and succeeding classes, called recursively). Input: out - output file stream; classPtr - pointer to the class; dir - direction to traverse tree: up, down or both. void ClassTree(TVirtualPad* canvas, Bool_t force = kFALSE); It makes a graphical class tree. Input: psCanvas - pointer to the current canvas; classPtr - pointer to the class. Bool_t CreateDotClassChartInh(const char* filename); Build the class tree for one class in GraphViz/Dot format. Input: filename - output dot file incl. path. Bool_t CreateDotClassChartInhMem(const char* filename); Build the class tree of inherited members for one class in GraphViz/Dot format. Input: filename - output dot file incl. path. Bool_t CreateDotClassChartIncl(const char* filename); Build the include dependency graph for one class in; GraphViz/Dot format. Input: filename - output dot file incl. path. Bool_t CreateDotClassChartLib(const char* filename); Build the library dependency",MatchSource.WIKI,root/html532/TClassDocOutput.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassDocOutput.html
https://root.cern/root/html532/TClassDocOutput.html:12012,Modifiability,inherit,inherited,12012," of data members and enums. Bool_t ClassDotCharts(ostream& out); This function builds the class charts for one class in GraphViz/Dot format,; i.e. the inheritance diagram, the include dependencies, and the library; dependency. Input: out - output file stream. void ClassHtmlTree(ostream& out, TClass* classPtr, TClassDocOutput::ETraverse dir = kBoth, int depth = 1); This function builds the class tree for one class in HTML; (inherited and succeeding classes, called recursively). Input: out - output file stream; classPtr - pointer to the class; dir - direction to traverse tree: up, down or both. void ClassTree(TVirtualPad* canvas, Bool_t force = kFALSE); It makes a graphical class tree. Input: psCanvas - pointer to the current canvas; classPtr - pointer to the class. Bool_t CreateDotClassChartInh(const char* filename); Build the class tree for one class in GraphViz/Dot format. Input: filename - output dot file incl. path. Bool_t CreateDotClassChartInhMem(const char* filename); Build the class tree of inherited members for one class in GraphViz/Dot format. Input: filename - output dot file incl. path. Bool_t CreateDotClassChartIncl(const char* filename); Build the include dependency graph for one class in; GraphViz/Dot format. Input: filename - output dot file incl. path. Bool_t CreateDotClassChartLib(const char* filename); Build the library dependency graph for one class in; GraphViz/Dot format. Input: filename - output dot file incl. path. void CreateClassHierarchy(ostream& out, const char* docFileName); Create the hierarchical class list part for the current class's; base classes. docFileName contains doc for fCurrentClass. Bool_t CreateHierarchyDot(); Create a hierarchical class list; The algorithm descends from the base classes and branches into; all derived classes. Mixing classes are displayed several times. void CreateSourceOutputStream(ostream& out, const char* extension, TString& filename); Open a Class.cxx.html file, where Class is defined by classPtr, and .c",MatchSource.WIKI,root/html532/TClassDocOutput.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassDocOutput.html
https://root.cern/root/html532/TClassDocOutput.html:13410,Modifiability,inherit,inheritance,13410,"endency graph for one class in; GraphViz/Dot format. Input: filename - output dot file incl. path. void CreateClassHierarchy(ostream& out, const char* docFileName); Create the hierarchical class list part for the current class's; base classes. docFileName contains doc for fCurrentClass. Bool_t CreateHierarchyDot(); Create a hierarchical class list; The algorithm descends from the base classes and branches into; all derived classes. Mixing classes are displayed several times. void CreateSourceOutputStream(ostream& out, const char* extension, TString& filename); Open a Class.cxx.html file, where Class is defined by classPtr, and .cxx.html by extension; It's created in fHtml->GetOutputDir()/src. If successful, the HTML header is written to out. void DescendHierarchy(ostream& out, TClass* basePtr, Int_t maxLines = 0, Int_t depth = 1); Descend hierarchy recursively; loop over all classes and look for classes with base class basePtr. void MakeTree(Bool_t force = kFALSE); Create an output file with a graphical representation of the class; inheritance. If force, replace existing output file.; This routine does nothing if fHtml->HaveDot() is true - use; ClassDotCharts() instead!. void WriteClassDescription(ostream& out, const TString& description); Called by TDocParser::LocateMethods(), this hook writes out the class description; found by TDocParser. It's even called if none is found, i.e. if the first method; has occurred before a class description is found, so missing class descriptions; can be handled.; For HTML, its creates the description block, the list of functions and data; members, and the inheritance tree or, if Graphviz's dot is found, the class charts. void WriteClassDocHeader(ostream& classFile); Write out the introduction of a class description (shortcuts and links). void WriteMethod(ostream& out, TString& ret, TString& name, TString& params, const char* file, TString& anchor, TString& comment, TString& codeOneLiner, TDocMethodWrapper* guessedMethod); Write meth",MatchSource.WIKI,root/html532/TClassDocOutput.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassDocOutput.html
https://root.cern/root/html532/TClassDocOutput.html:13979,Modifiability,inherit,inheritance,13979,"lass is defined by classPtr, and .cxx.html by extension; It's created in fHtml->GetOutputDir()/src. If successful, the HTML header is written to out. void DescendHierarchy(ostream& out, TClass* basePtr, Int_t maxLines = 0, Int_t depth = 1); Descend hierarchy recursively; loop over all classes and look for classes with base class basePtr. void MakeTree(Bool_t force = kFALSE); Create an output file with a graphical representation of the class; inheritance. If force, replace existing output file.; This routine does nothing if fHtml->HaveDot() is true - use; ClassDotCharts() instead!. void WriteClassDescription(ostream& out, const TString& description); Called by TDocParser::LocateMethods(), this hook writes out the class description; found by TDocParser. It's even called if none is found, i.e. if the first method; has occurred before a class description is found, so missing class descriptions; can be handled.; For HTML, its creates the description block, the list of functions and data; members, and the inheritance tree or, if Graphviz's dot is found, the class charts. void WriteClassDocHeader(ostream& classFile); Write out the introduction of a class description (shortcuts and links). void WriteMethod(ostream& out, TString& ret, TString& name, TString& params, const char* file, TString& anchor, TString& comment, TString& codeOneLiner, TDocMethodWrapper* guessedMethod); Write method name with return type ret and parameters param to out.; Build a link using file and anchor. Cooment it with comment, and; show the code codeOneLiner (set if the func consists of only one line; of code, immediately surrounded by ""{"",""}""). Also updates fMethodNames's; count of method names. TClassDocOutput(THtml& html, TClass* cl, TList* typedefs). » Author: Axel Naumann 2007-01-09 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/html:$Id: TClassDocOutput.h 31111 2009-11-12 09:57:56Z axel $ » Last generated: 2011-11-03 20:10; This page has been automatically ge",MatchSource.WIKI,root/html532/TClassDocOutput.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassDocOutput.html
https://root.cern/root/html532/TClassDocOutput.html:3842,Security,Hash,Hash,3842,"t_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidTDocOutput::FixupAuthorSourceInfo(TString& authors); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const char*TDocOutput::GetExtension() const; THtml*TDocOutput::GetHtml(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTDocOutput::IsModified(TClass* classPtr, TDocOutput::EFileType type); Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidMakeTree(Bool_t force = kFALSE); voidTObject::MayNotUse(const char* method) const; virtual voidTDocOutput::NameSpace2FileName(TString& name); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static void",MatchSource.WIKI,root/html532/TClassDocOutput.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassDocOutput.html
https://root.cern/root/html532/TClassDocOutput.html:6877,Testability,Test,TestBit,6877,"TSubString& str, TDataMember* entity, const char* comment = 0); virtual voidTDocOutput::ReferenceEntity(TSubString& str, TDataType* entity, const char* comment = 0); virtual voidTDocOutput::ReferenceEntity(TSubString& str, TMethod* entity, const char* comment = 0); virtual Bool_tTDocOutput::ReferenceIsRelative(const char* reference) const; virtual const char*TDocOutput::ReplaceSpecialChars(char c); voidTDocOutput::ReplaceSpecialChars(TString& text); voidTDocOutput::ReplaceSpecialChars(ostream& out, const char* string); voidTDocOutput::ReplaceSpecialChars(TString& text, Ssiz_t& pos); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTDocOutput::WriteHtmlFooter(ostream& out, const char* dir = """", const char* lastUpdate = """", const char* author = """", const char* copyright = """"); virtual voidTDocOutput::WriteHtmlHeader(ostream& out, const char* title, const char* dir = """", TClass* cls = 0); voidTDocOutput::WriteLineNumbers(ostream& out, Long_t nLines, const TString& infileBase) const.",MatchSource.WIKI,root/html532/TClassDocOutput.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassDocOutput.html
https://root.cern/root/html532/TClassDocOutput.html:6916,Testability,Test,TestBits,6916,"TSubString& str, TDataMember* entity, const char* comment = 0); virtual voidTDocOutput::ReferenceEntity(TSubString& str, TDataType* entity, const char* comment = 0); virtual voidTDocOutput::ReferenceEntity(TSubString& str, TMethod* entity, const char* comment = 0); virtual Bool_tTDocOutput::ReferenceIsRelative(const char* reference) const; virtual const char*TDocOutput::ReplaceSpecialChars(char c); voidTDocOutput::ReplaceSpecialChars(TString& text); voidTDocOutput::ReplaceSpecialChars(ostream& out, const char* string); voidTDocOutput::ReplaceSpecialChars(TString& text, Ssiz_t& pos); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTDocOutput::WriteHtmlFooter(ostream& out, const char* dir = """", const char* lastUpdate = """", const char* author = """", const char* copyright = """"); virtual voidTDocOutput::WriteHtmlHeader(ostream& out, const char* title, const char* dir = """", TClass* cls = 0); voidTDocOutput::WriteLineNumbers(ostream& out, Long_t nLines, const TString& infileBase) const.",MatchSource.WIKI,root/html532/TClassDocOutput.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassDocOutput.html
https://root.cern/root/html532/TClassDocOutput.html:1349,Usability,Clear,Clear,1349,"The documentation is; parsed by TDocParser and then passed to TClassDocOutput to generate; the class doc header, the class description, members overview, and method; documentation. All generic output functionality is in TDocOutput; it is; re-used in this derived class. You usually do not use this class yourself; it is invoked indirectly by; THtml. Customization of the output should happen via the interfaces defined; by THtml. Function Members (Methods); public:. TClassDocOutput(const TClassDocOutput&); TClassDocOutput(THtml& html, TClass* cl, TList* typedefs); virtual~TClassDocOutput(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDocOutput::AdjustSourcePath(TString& line, const char* relpath = ""../""); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); voidClass2Html(Bool_t force = kFALSE); Bool_tClassDotCharts(ostream& out); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; voidTDocOutput::Convert(istream& in, const char* infilename, const char* outfilename, const char* title, const char* relpath = ""../"", Int_t includeOutput = 0, const char* context = """", TGClient* gclient = 0); virtual voidTObject::Copy(TObject& object) const; Bool_tTDocOutput::CopyHtmlFile(const char* sourceName, const char* destName = """"); voidCreateClassHierarchy(ostream& out, const char* docFileName); virtual voidTDocOutput::CreateClassIndex(); virtual voidTDocOutput::CreateClassTypeDefs(); virtual voidTDocOutput::CreateHierarchy(); virtual voidTDocOutput::CreateModuleIndex(); virtual voidTDocOutput::CreateProductIndex(); virtual voidTDocOutput::CreateTypeIndex(); virtual voidTDocOutput::DecorateEntityBegin(TString& str, Ssiz_t& pos, TDocParser::EParseContext type); virtual voidTDocOutput::DecorateEntityEnd(TString& str, Ssiz_t& pos, TDocParser:",MatchSource.WIKI,root/html532/TClassDocOutput.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassDocOutput.html
https://root.cern/root/html532/TClassEdit.html:889,Testability,test,testAlloc,889,". TClassEdit. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; namespace description; function members; data members; class charts. ROOT; » CORE; » METAUTILS; » TClassEdit. namespace TClassEdit. Function Members (Methods); public:. stringCleanType(const char* typeDesc, int mode = 0, const char** tail = 0); stringGetLong64_Name(const string& original); intGetSplit(const char* type, vector<std::string>& output, int& nestedLoc, TClassEdit::EModType mode = TClassEdit::kNone); stringInsertStd(const char* tname); boolIsDefAlloc(const char* alloc, const char* classname); boolIsDefAlloc(const char* alloc, const char* keyclassname, const char* valueclassname); boolIsDefComp(const char* comp, const char* classname); boolIsStdClass(const char* type); boolIsSTLBitset(const char* type); intIsSTLCont(const char* type, int testAlloc = 0); boolIsVectorBool(const char* name); stringResolveTypedef(const char* tname, bool resolveAll = false); stringShortType(const char* typeDesc, int mode); intSTLArgs(int kind); intSTLKind(const char* type). Data Members. Class Charts; Function documentation; int IsSTLCont(int testAlloc=0). void ShortType(const char* typeDesc, int mode). std::string CleanType(const char* typeDesc, int mode = 0, const char** tail = 0). bool IsDefAlloc(const char* alloc, const char* classname). bool IsDefAlloc(const char* alloc, const char* keyclassname, const char* valueclassname). bool IsDefComp(const char* comp, const char* classname). bool IsSTLBitset(const char* type). bool IsStdClass(const char* type). bool IsVectorBool(const char* name). std::string GetLong64_Name(const string& original). int GetSplit(const char* type, vector<std::string>& output, int& nestedLoc, TClassEdit::EModType mode = TClassEdit::kNone). int STLKind(const char* type). int STLArgs(int kind). std::string ResolveTypedef(const char* tname, bool resolveAll = false). std::string InsertStd(const char* tname). » Author: Victor Pere",MatchSource.WIKI,root/html532/TClassEdit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassEdit.html
https://root.cern/root/html532/TClassEdit.html:1178,Testability,test,testAlloc,1178,"unction members; data members; class charts. ROOT; » CORE; » METAUTILS; » TClassEdit. namespace TClassEdit. Function Members (Methods); public:. stringCleanType(const char* typeDesc, int mode = 0, const char** tail = 0); stringGetLong64_Name(const string& original); intGetSplit(const char* type, vector<std::string>& output, int& nestedLoc, TClassEdit::EModType mode = TClassEdit::kNone); stringInsertStd(const char* tname); boolIsDefAlloc(const char* alloc, const char* classname); boolIsDefAlloc(const char* alloc, const char* keyclassname, const char* valueclassname); boolIsDefComp(const char* comp, const char* classname); boolIsStdClass(const char* type); boolIsSTLBitset(const char* type); intIsSTLCont(const char* type, int testAlloc = 0); boolIsVectorBool(const char* name); stringResolveTypedef(const char* tname, bool resolveAll = false); stringShortType(const char* typeDesc, int mode); intSTLArgs(int kind); intSTLKind(const char* type). Data Members. Class Charts; Function documentation; int IsSTLCont(int testAlloc=0). void ShortType(const char* typeDesc, int mode). std::string CleanType(const char* typeDesc, int mode = 0, const char** tail = 0). bool IsDefAlloc(const char* alloc, const char* classname). bool IsDefAlloc(const char* alloc, const char* keyclassname, const char* valueclassname). bool IsDefComp(const char* comp, const char* classname). bool IsSTLBitset(const char* type). bool IsStdClass(const char* type). bool IsVectorBool(const char* name). std::string GetLong64_Name(const string& original). int GetSplit(const char* type, vector<std::string>& output, int& nestedLoc, TClassEdit::EModType mode = TClassEdit::kNone). int STLKind(const char* type). int STLArgs(int kind). std::string ResolveTypedef(const char* tname, bool resolveAll = false). std::string InsertStd(const char* tname). » Author: Victor Perev 10/04/2003 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TClassEdit.h 38309 2011-03-04 17:14:19Z pcanal $ »",MatchSource.WIKI,root/html532/TClassEdit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassEdit.html
https://root.cern/root/html532/TClassGenerator.html:654,Availability,avail,available,654,". TClassGenerator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » META; » TClassGenerator. class TClassGenerator: public TObject. TClassGenerator. Objects following this interface can be passed onto the TROOT object; to implement a user customized way to create the TClass objects. Use TROOT::AddClassGenerator to register a concrete instance. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TClass*GetClass(const char* cla",MatchSource.WIKI,root/html532/TClassGenerator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassGenerator.html
https://root.cern/root/html532/TClassGenerator.html:1471,Availability,Error,Error,1471," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TClass*GetClass(const char* cla",MatchSource.WIKI,root/html532/TClassGenerator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassGenerator.html
https://root.cern/root/html532/TClassGenerator.html:1600,Availability,error,error,1600," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TClass*GetClass(const char* cla",MatchSource.WIKI,root/html532/TClassGenerator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassGenerator.html
https://root.cern/root/html532/TClassGenerator.html:1684,Availability,error,error,1684," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TClass*GetClass(const char* classname, Bool_t load); virtual TClass*GetClass(const type_info& typeinfo, Bool_t load); virtual TClass*GetClass(const char* classname, Bool_t load, Bool_t silent); virtual TClass*GetClass(const type_info& typeinfo, Bool_t load, Bool_t silent); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::Han",MatchSource.WIKI,root/html532/TClassGenerator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassGenerator.html
https://root.cern/root/html532/TClassGenerator.html:346,Integrability,interface,interface,346,". TClassGenerator. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » META; » TClassGenerator. class TClassGenerator: public TObject. TClassGenerator. Objects following this interface can be passed onto the TROOT object; to implement a user customized way to create the TClass objects. Use TROOT::AddClassGenerator to register a concrete instance. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TClass*GetClass(const char* cla",MatchSource.WIKI,root/html532/TClassGenerator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassGenerator.html
https://root.cern/root/html532/TClassGenerator.html:2846,Modifiability,Inherit,InheritsFrom,2846,"t*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TClass*GetClass(const char* classname, Bool_t load); virtual TClass*GetClass(const type_info& typeinfo, Bool_t load); virtual TClass*GetClass(const char* classname, Bool_t load, Bool_t silent); virtual TClass*GetClass(const type_info& typeinfo, Bool_t load, Bool_t silent); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TOb",MatchSource.WIKI,root/html532/TClassGenerator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassGenerator.html
https://root.cern/root/html532/TClassGenerator.html:2912,Modifiability,Inherit,InheritsFrom,2912,"ject::FindObject(const TObject* obj) const; virtual TClass*GetClass(const char* classname, Bool_t load); virtual TClass*GetClass(const type_info& typeinfo, Bool_t load); virtual TClass*GetClass(const char* classname, Bool_t load, Bool_t silent); virtual TClass*GetClass(const type_info& typeinfo, Bool_t load, Bool_t silent); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TClassGenerator&operato",MatchSource.WIKI,root/html532/TClassGenerator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassGenerator.html
https://root.cern/root/html532/TClassGenerator.html:5675,Modifiability,Inherit,Inheritance,5675,"j); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. (unknown)(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TClass * GetClass(const char* classname, Bool_t load, Bool_t silent); Default implementation for backward compatibility ignoring the value of 'silent'. TClass * GetClass(const type_info& typeinfo, Bool_t load, Bool_t silent); Default implementation for backward compatibility ignoring the value of 'silent'. TClass * GetClass(const char* classname, Bool_t load). TClass * GetClass(const type_info& typeinfo, Bool_t load). » Author: Philippe Canal 24/06/2003 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers, and al. *; » Last changed: root/base:$Id: TClassGenerator.h 30751 2009-10-15 16:45:32Z pcanal $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TClassGenerator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassGenerator.html
https://root.cern/root/html532/TClassGenerator.html:5688,Modifiability,Inherit,Inherited,5688,"j); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. (unknown)(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TClass * GetClass(const char* classname, Bool_t load, Bool_t silent); Default implementation for backward compatibility ignoring the value of 'silent'. TClass * GetClass(const type_info& typeinfo, Bool_t load, Bool_t silent); Default implementation for backward compatibility ignoring the value of 'silent'. TClass * GetClass(const char* classname, Bool_t load). TClass * GetClass(const type_info& typeinfo, Bool_t load). » Author: Philippe Canal 24/06/2003 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers, and al. *; » Last changed: root/base:$Id: TClassGenerator.h 30751 2009-10-15 16:45:32Z pcanal $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TClassGenerator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassGenerator.html
https://root.cern/root/html532/TClassGenerator.html:2016,Performance,load,load,2016,"virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TClass*GetClass(const char* classname, Bool_t load); virtual TClass*GetClass(const type_info& typeinfo, Bool_t load); virtual TClass*GetClass(const char* classname, Bool_t load, Bool_t silent); virtual TClass*GetClass(const type_info& typeinfo, Bool_t load, Bool_t silent); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UIn",MatchSource.WIKI,root/html532/TClassGenerator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassGenerator.html
https://root.cern/root/html532/TClassGenerator.html:2081,Performance,load,load,2081,"voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TClass*GetClass(const char* classname, Bool_t load); virtual TClass*GetClass(const type_info& typeinfo, Bool_t load); virtual TClass*GetClass(const char* classname, Bool_t load, Bool_t silent); virtual TClass*GetClass(const type_info& typeinfo, Bool_t load, Bool_t silent); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqua",MatchSource.WIKI,root/html532/TClassGenerator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassGenerator.html
https://root.cern/root/html532/TClassGenerator.html:2142,Performance,load,load,2142,"::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TClass*GetClass(const char* classname, Bool_t load); virtual TClass*GetClass(const type_info& typeinfo, Bool_t load); virtual TClass*GetClass(const char* classname, Bool_t load, Bool_t silent); virtual TClass*GetClass(const type_info& typeinfo, Bool_t load, Bool_t silent); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder(",MatchSource.WIKI,root/html532/TClassGenerator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassGenerator.html
https://root.cern/root/html532/TClassGenerator.html:2222,Performance,load,load,2222,"Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TClass*GetClass(const char* classname, Bool_t load); virtual TClass*GetClass(const type_info& typeinfo, Bool_t load); virtual TClass*GetClass(const char* classname, Bool_t load, Bool_t silent); virtual TClass*GetClass(const type_info& typeinfo, Bool_t load, Bool_t silent); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() co",MatchSource.WIKI,root/html532/TClassGenerator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassGenerator.html
https://root.cern/root/html532/TClassGenerator.html:5800,Performance,load,load,5800,"j); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. (unknown)(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TClass * GetClass(const char* classname, Bool_t load, Bool_t silent); Default implementation for backward compatibility ignoring the value of 'silent'. TClass * GetClass(const type_info& typeinfo, Bool_t load, Bool_t silent); Default implementation for backward compatibility ignoring the value of 'silent'. TClass * GetClass(const char* classname, Bool_t load). TClass * GetClass(const type_info& typeinfo, Bool_t load). » Author: Philippe Canal 24/06/2003 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers, and al. *; » Last changed: root/base:$Id: TClassGenerator.h 30751 2009-10-15 16:45:32Z pcanal $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TClassGenerator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassGenerator.html
https://root.cern/root/html532/TClassGenerator.html:5956,Performance,load,load,5956,"j); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. (unknown)(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TClass * GetClass(const char* classname, Bool_t load, Bool_t silent); Default implementation for backward compatibility ignoring the value of 'silent'. TClass * GetClass(const type_info& typeinfo, Bool_t load, Bool_t silent); Default implementation for backward compatibility ignoring the value of 'silent'. TClass * GetClass(const char* classname, Bool_t load). TClass * GetClass(const type_info& typeinfo, Bool_t load). » Author: Philippe Canal 24/06/2003 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers, and al. *; » Last changed: root/base:$Id: TClassGenerator.h 30751 2009-10-15 16:45:32Z pcanal $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TClassGenerator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassGenerator.html
https://root.cern/root/html532/TClassGenerator.html:6108,Performance,load,load,6108,"j); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. (unknown)(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TClass * GetClass(const char* classname, Bool_t load, Bool_t silent); Default implementation for backward compatibility ignoring the value of 'silent'. TClass * GetClass(const type_info& typeinfo, Bool_t load, Bool_t silent); Default implementation for backward compatibility ignoring the value of 'silent'. TClass * GetClass(const char* classname, Bool_t load). TClass * GetClass(const type_info& typeinfo, Bool_t load). » Author: Philippe Canal 24/06/2003 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers, and al. *; » Last changed: root/base:$Id: TClassGenerator.h 30751 2009-10-15 16:45:32Z pcanal $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TClassGenerator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassGenerator.html
https://root.cern/root/html532/TClassGenerator.html:6167,Performance,load,load,6167,"j); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. (unknown)(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TClass * GetClass(const char* classname, Bool_t load, Bool_t silent); Default implementation for backward compatibility ignoring the value of 'silent'. TClass * GetClass(const type_info& typeinfo, Bool_t load, Bool_t silent); Default implementation for backward compatibility ignoring the value of 'silent'. TClass * GetClass(const char* classname, Bool_t load). TClass * GetClass(const type_info& typeinfo, Bool_t load). » Author: Philippe Canal 24/06/2003 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers, and al. *; » Last changed: root/base:$Id: TClassGenerator.h 30751 2009-10-15 16:45:32Z pcanal $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TClassGenerator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassGenerator.html
https://root.cern/root/html532/TClassGenerator.html:2736,Security,Hash,Hash,2736,"ent, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TClass*GetClass(const char* classname, Bool_t load); virtual TClass*GetClass(const type_info& typeinfo, Bool_t load); virtual TClass*GetClass(const char* classname, Bool_t load, Bool_t silent); virtual TClass*GetClass(const type_info& typeinfo, Bool_t load, Bool_t silent); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator ",MatchSource.WIKI,root/html532/TClassGenerator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassGenerator.html
https://root.cern/root/html532/TClassGenerator.html:4862,Testability,Test,TestBit,4862,"const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TClassGenerator&operator=(const TClassGenerator&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TClassGenerator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassGenerator.html
https://root.cern/root/html532/TClassGenerator.html:4901,Testability,Test,TestBits,4901,"const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TClassGenerator&operator=(const TClassGenerator&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TClassGenerator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassGenerator.html
https://root.cern/root/html532/TClassGenerator.html:931,Usability,Clear,Clear,931," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TClass*GetClass(const char* cla",MatchSource.WIKI,root/html532/TClassGenerator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassGenerator.html
https://root.cern/root/html532/TClassMenuItem.html:1941,Availability,Error,Error,1941,"lassMenuItem(Int_t type, TClass* parent, const char* title = """", const char* functionname = """", TObject* obj = 0, const char* args = """", Int_t selfobjposition = -1, Bool_t self = kFALSE); virtual~TClassMenuItem(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*GetArgs() const; virtual TObject*GetCalledObject() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*GetFunctionName() const; virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tGetSelfObjectPos() const; virtual const char*GetTit",MatchSource.WIKI,root/html532/TClassMenuItem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassMenuItem.html
https://root.cern/root/html532/TClassMenuItem.html:2070,Availability,error,error,2070,"s = """", Int_t selfobjposition = -1, Bool_t self = kFALSE); virtual~TClassMenuItem(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*GetArgs() const; virtual TObject*GetCalledObject() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*GetFunctionName() const; virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tGetSelfObjectPos() const; virtual const char*GetTitle() const; virtual Int_tGetType() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* ",MatchSource.WIKI,root/html532/TClassMenuItem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassMenuItem.html
https://root.cern/root/html532/TClassMenuItem.html:2154,Availability,error,error,2154," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*GetArgs() const; virtual TObject*GetCalledObject() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*GetFunctionName() const; virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tGetSelfObjectPos() const; virtual const char*GetTitle() const; virtual Int_tGetType() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* ",MatchSource.WIKI,root/html532/TClassMenuItem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassMenuItem.html
https://root.cern/root/html532/TClassMenuItem.html:5273,Deployability,toggle,toggle,5273,"r* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetCall(TObject* obj, const char* method, const char* args = """", Int_t selfobjposition = 0); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetSelf(Bool_t self); virtual voidSetTitle(const char* title); virtual voidSetToggle(Bool_t toggle = kTRUE); virtual voidSetType(Int_t type); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TClassMenuItem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassMenuItem.html
https://root.cern/root/html532/TClassMenuItem.html:7012,Deployability,toggle,toggle,7012,"ufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. TClassMenuItem(const TClassMenuItem&); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); TClassMenuItem&operator=(const TClassMenuItem&). Data Members; public:. enum EClassMenuItemType { kPopupUserFunction; kPopupSeparator; kPopupStandardList; };; enum { kIsExternal; kIsSelf; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TStringfArgsarguments type list *** NOT CHECKED ***; TObject*fCalledObjectobject to be called; TStringfFunctionNamename of the function or method to be called; TClass*fParentparent class; Bool_tfSelfflag to indicate that object to be called is the selected one; Int_tfSelfObjectPosrang in argument list corresponding to the object being clicked on; TList*fSubMenulist of submenu items; TStringfTitletitle if not standard; Bool_tfToggleflag toggle method; TClassMenuItem::EClassMenuItemTypefTypetype flag (EClassMenuItemType). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TClassMenuItem(); Default TClassMenuItem ctor. TClassMenuItems are constructed in TClass; with a standard content but may be customized later; fType = 0 : external method/function; fType = 1 : separator; fType = 2 : standard methods list. TClassMenuItem(Int_t type, TClass* parent, const char* title = """", const char* functionname = """", TObject* obj = 0, const char* args = """", Int_t selfobjposition = -1, Bool_t self = kFALSE); TClassMenuItem ctor. TClassMenuItems are constructed in TClass; with a standard content but may be customized later; type = 0 : external method/function; type = 1 : separator; type = 2 : standard methods list; self i",MatchSource.WIKI,root/html532/TClassMenuItem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassMenuItem.html
https://root.cern/root/html532/TClassMenuItem.html:9304,Deployability,toggle,toggle,9304,"rd methods list; self indicates if the object to be called is the one selected; by the popup menu; selfobjposition, if non zero, indicates the position in the arguments; list of the argument corresponding to the selected (clicked) object.; This argument in the calling method should be a TObject*; Note: It is the responsability of the caller/creator to add to to the; menu list. TClassMenuItem(const TClassMenuItem& ); copy constructor; Note: It is the responsability of the caller/creator to add to to the; menu list. TClassMenuItem& operator=(const TClassMenuItem& ); assignement operator; Note: It is the responsability of the caller/creator to add to to the; menu list. ~TClassMenuItem(); TClassMenuItem dtor. const char * GetTitle() const; { return fTitle; }. const char * GetFunctionName() const; { return fFunctionName; }. const char * GetArgs() const; { return fArgs; }. TObject * GetCalledObject() const; { return fCalledObject; }. Int_t GetType() const; { return fType; }. Int_t GetSelfObjectPos() const; { return fSelfObjectPos; }. Bool_t IsCallSelf() const; { return fSelf; }. Bool_t IsSeparator() const; { return fType==kPopupSeparator ? kTRUE : kFALSE; }. Bool_t IsStandardList() const; { return fType==kPopupStandardList ? kTRUE : kFALSE; }. Bool_t IsToggle() const; { return fToggle; }. void SetType(Int_t type); { fType = (EClassMenuItemType) type; }. void SetTitle(const char* title); { fTitle = title; }. void SetSelf(Bool_t self); { fSelf = self; }. void SetToggle(Bool_t toggle = kTRUE); { fToggle = toggle; }. void SetCall(TObject* obj, const char* method, const char* args = """", Int_t selfobjposition = 0). » Author: Damir Buskulic 23/11/2001 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: TClassMenuItem.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TClassMenuItem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassMenuItem.html
https://root.cern/root/html532/TClassMenuItem.html:9333,Deployability,toggle,toggle,9333,"rd methods list; self indicates if the object to be called is the one selected; by the popup menu; selfobjposition, if non zero, indicates the position in the arguments; list of the argument corresponding to the selected (clicked) object.; This argument in the calling method should be a TObject*; Note: It is the responsability of the caller/creator to add to to the; menu list. TClassMenuItem(const TClassMenuItem& ); copy constructor; Note: It is the responsability of the caller/creator to add to to the; menu list. TClassMenuItem& operator=(const TClassMenuItem& ); assignement operator; Note: It is the responsability of the caller/creator to add to to the; menu list. ~TClassMenuItem(); TClassMenuItem dtor. const char * GetTitle() const; { return fTitle; }. const char * GetFunctionName() const; { return fFunctionName; }. const char * GetArgs() const; { return fArgs; }. TObject * GetCalledObject() const; { return fCalledObject; }. Int_t GetType() const; { return fType; }. Int_t GetSelfObjectPos() const; { return fSelfObjectPos; }. Bool_t IsCallSelf() const; { return fSelf; }. Bool_t IsSeparator() const; { return fType==kPopupSeparator ? kTRUE : kFALSE; }. Bool_t IsStandardList() const; { return fType==kPopupStandardList ? kTRUE : kFALSE; }. Bool_t IsToggle() const; { return fToggle; }. void SetType(Int_t type); { fType = (EClassMenuItemType) type; }. void SetTitle(const char* title); { fTitle = title; }. void SetSelf(Bool_t self); { fSelf = self; }. void SetToggle(Bool_t toggle = kTRUE); { fToggle = toggle; }. void SetCall(TObject* obj, const char* method, const char* args = """", Int_t selfobjposition = 0). » Author: Damir Buskulic 23/11/2001 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: TClassMenuItem.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TClassMenuItem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassMenuItem.html
https://root.cern/root/html532/TClassMenuItem.html:3215,Modifiability,Inherit,InheritsFrom,3215,", Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*GetArgs() const; virtual TObject*GetCalledObject() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*GetFunctionName() const; virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tGetSelfObjectPos() const; virtual const char*GetTitle() const; virtual Int_tGetType() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsCallSelf() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tIsSeparator() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tIsStandardList() const; virtual Bool_tIsToggle() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp)",MatchSource.WIKI,root/html532/TClassMenuItem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassMenuItem.html
https://root.cern/root/html532/TClassMenuItem.html:3281,Modifiability,Inherit,InheritsFrom,3281,"char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*GetArgs() const; virtual TObject*GetCalledObject() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*GetFunctionName() const; virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tGetSelfObjectPos() const; virtual const char*GetTitle() const; virtual Int_tGetType() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsCallSelf() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tIsSeparator() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tIsStandardList() const; virtual Bool_tIsToggle() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator ne",MatchSource.WIKI,root/html532/TClassMenuItem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassMenuItem.html
https://root.cern/root/html532/TClassMenuItem.html:7112,Modifiability,Inherit,Inheritance,7112,"tor=(const TClassMenuItem&). Data Members; public:. enum EClassMenuItemType { kPopupUserFunction; kPopupSeparator; kPopupStandardList; };; enum { kIsExternal; kIsSelf; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TStringfArgsarguments type list *** NOT CHECKED ***; TObject*fCalledObjectobject to be called; TStringfFunctionNamename of the function or method to be called; TClass*fParentparent class; Bool_tfSelfflag to indicate that object to be called is the selected one; Int_tfSelfObjectPosrang in argument list corresponding to the object being clicked on; TList*fSubMenulist of submenu items; TStringfTitletitle if not standard; Bool_tfToggleflag toggle method; TClassMenuItem::EClassMenuItemTypefTypetype flag (EClassMenuItemType). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TClassMenuItem(); Default TClassMenuItem ctor. TClassMenuItems are constructed in TClass; with a standard content but may be customized later; fType = 0 : external method/function; fType = 1 : separator; fType = 2 : standard methods list. TClassMenuItem(Int_t type, TClass* parent, const char* title = """", const char* functionname = """", TObject* obj = 0, const char* args = """", Int_t selfobjposition = -1, Bool_t self = kFALSE); TClassMenuItem ctor. TClassMenuItems are constructed in TClass; with a standard content but may be customized later; type = 0 : external method/function; type = 1 : separator; type = 2 : standard methods list; self indicates if the object to be called is the one selected; by the popup menu; selfobjposition, if non zero, indicates the position in the arguments; list of the argument corresponding to the selected (clicked) object.; This argument in the calling method should be a TObject*; Note: It is the responsabilit",MatchSource.WIKI,root/html532/TClassMenuItem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassMenuItem.html
https://root.cern/root/html532/TClassMenuItem.html:7125,Modifiability,Inherit,Inherited,7125,"tor=(const TClassMenuItem&). Data Members; public:. enum EClassMenuItemType { kPopupUserFunction; kPopupSeparator; kPopupStandardList; };; enum { kIsExternal; kIsSelf; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TStringfArgsarguments type list *** NOT CHECKED ***; TObject*fCalledObjectobject to be called; TStringfFunctionNamename of the function or method to be called; TClass*fParentparent class; Bool_tfSelfflag to indicate that object to be called is the selected one; Int_tfSelfObjectPosrang in argument list corresponding to the object being clicked on; TList*fSubMenulist of submenu items; TStringfTitletitle if not standard; Bool_tfToggleflag toggle method; TClassMenuItem::EClassMenuItemTypefTypetype flag (EClassMenuItemType). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TClassMenuItem(); Default TClassMenuItem ctor. TClassMenuItems are constructed in TClass; with a standard content but may be customized later; fType = 0 : external method/function; fType = 1 : separator; fType = 2 : standard methods list. TClassMenuItem(Int_t type, TClass* parent, const char* title = """", const char* functionname = """", TObject* obj = 0, const char* args = """", Int_t selfobjposition = -1, Bool_t self = kFALSE); TClassMenuItem ctor. TClassMenuItems are constructed in TClass; with a standard content but may be customized later; type = 0 : external method/function; type = 1 : separator; type = 2 : standard methods list; self indicates if the object to be called is the one selected; by the popup menu; selfobjposition, if non zero, indicates the position in the arguments; list of the argument corresponding to the selected (clicked) object.; This argument in the calling method should be a TObject*; Note: It is the responsabilit",MatchSource.WIKI,root/html532/TClassMenuItem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassMenuItem.html
https://root.cern/root/html532/TClassMenuItem.html:3105,Security,Hash,Hash,3105,"ute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*GetArgs() const; virtual TObject*GetCalledObject() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*GetFunctionName() const; virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tGetSelfObjectPos() const; virtual const char*GetTitle() const; virtual Int_tGetType() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsCallSelf() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tIsSeparator() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tIsStandardList() const; virtual Bool_tIsToggle() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void*",MatchSource.WIKI,root/html532/TClassMenuItem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassMenuItem.html
https://root.cern/root/html532/TClassMenuItem.html:5578,Testability,Test,TestBit,5578,"r* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetCall(TObject* obj, const char* method, const char* args = """", Int_t selfobjposition = 0); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetSelf(Bool_t self); virtual voidSetTitle(const char* title); virtual voidSetToggle(Bool_t toggle = kTRUE); virtual voidSetType(Int_t type); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TClassMenuItem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassMenuItem.html
https://root.cern/root/html532/TClassMenuItem.html:5617,Testability,Test,TestBits,5617,"r* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetCall(TObject* obj, const char* method, const char* args = """", Int_t selfobjposition = 0); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetSelf(Bool_t self); virtual voidSetTitle(const char* title); virtual voidSetToggle(Bool_t toggle = kTRUE); virtual voidSetType(Int_t type); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TClassMenuItem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassMenuItem.html
https://root.cern/root/html532/TClassMenuItem.html:1401,Usability,Clear,Clear,1401," TClassMenuItem(); TClassMenuItem(Int_t type, TClass* parent, const char* title = """", const char* functionname = """", TObject* obj = 0, const char* args = """", Int_t selfobjposition = -1, Bool_t self = kFALSE); virtual~TClassMenuItem(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual",MatchSource.WIKI,root/html532/TClassMenuItem.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassMenuItem.html
https://root.cern/root/html532/TClassRef.html:1068,Modifiability,Inherit,Inheritance,1068,er file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » META; » TClassRef. class TClassRef. TClassRef. Reference to a TClass object and intrusive list of other; to thise same TClass object references. Function Members (Methods); public:. TClassRef(); TClassRef(TClass* cl); TClassRef(const char* classname); TClassRef(const TClassRef&); ~TClassRef(); TClass*GetClass() const; const char*GetClassName(); TClass*operator TClass*() const; TClass*operator->() const; TClassRef&operator=(const TClassRef& rhs); TClassRef&operator=(TClass* rhs); voidReset(); voidSetName(const char* new_name). private:. voidAssign(const TClassRef&); voidAssign(TClass*); TClass*InternalGetClass() const; voidListReset(). Data Members; private:. stringfClassNameName of referenced class; TClass*fClassPtr! Ptr to the TClass object; TClassRef*fNext! link to the next refs ; TClassRef*fPrevious! link to the previous refs. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Assign(const TClassRef& ). void Assign(TClass* ). TClass * InternalGetClass() const. void ListReset(). TClassRef(); {}. TClassRef(TClass* cl). TClassRef(const char* classname). TClassRef(const TClassRef& ). TClassRef & operator=(const TClassRef& rhs); Inline implementation of operator= to speed the no-op case. TClassRef & operator=(TClass* rhs); Inline implementation of operator= to speed the no-op case. ~TClassRef(); { if (fClassPtr) fClassPtr->RemoveRef(this); }. void SetName(const char* new_name). const char * GetClassName(); { return fClassName.c_str(); }. TClass * GetClass() const; { return fClassPtr ? fClassPtr : InternalGetClass(); }. void Reset(); { if (fClassPtr) fClassPtr->RemoveRef(this); fClassPtr = 0; }. TClass* operator->() const; { return fClassPtr ? fClassPtr : InternalGetClass(); }. operator TClass*() const; { return fClassPtr ? fClassPtr : InternalGetClass(); }. » Author: Philippe Canal 15/03/2005 » Copyright (C),MatchSource.WIKI,root/html532/TClassRef.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassRef.html
https://root.cern/root/html532/TClassRef.html:1081,Modifiability,Inherit,Inherited,1081,er file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » META; » TClassRef. class TClassRef. TClassRef. Reference to a TClass object and intrusive list of other; to thise same TClass object references. Function Members (Methods); public:. TClassRef(); TClassRef(TClass* cl); TClassRef(const char* classname); TClassRef(const TClassRef&); ~TClassRef(); TClass*GetClass() const; const char*GetClassName(); TClass*operator TClass*() const; TClass*operator->() const; TClassRef&operator=(const TClassRef& rhs); TClassRef&operator=(TClass* rhs); voidReset(); voidSetName(const char* new_name). private:. voidAssign(const TClassRef&); voidAssign(TClass*); TClass*InternalGetClass() const; voidListReset(). Data Members; private:. stringfClassNameName of referenced class; TClass*fClassPtr! Ptr to the TClass object; TClassRef*fNext! link to the next refs ; TClassRef*fPrevious! link to the previous refs. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Assign(const TClassRef& ). void Assign(TClass* ). TClass * InternalGetClass() const. void ListReset(). TClassRef(); {}. TClassRef(TClass* cl). TClassRef(const char* classname). TClassRef(const TClassRef& ). TClassRef & operator=(const TClassRef& rhs); Inline implementation of operator= to speed the no-op case. TClassRef & operator=(TClass* rhs); Inline implementation of operator= to speed the no-op case. ~TClassRef(); { if (fClassPtr) fClassPtr->RemoveRef(this); }. void SetName(const char* new_name). const char * GetClassName(); { return fClassName.c_str(); }. TClass * GetClass() const; { return fClassPtr ? fClassPtr : InternalGetClass(); }. void Reset(); { if (fClassPtr) fClassPtr->RemoveRef(this); fClassPtr = 0; }. TClass* operator->() const; { return fClassPtr ? fClassPtr : InternalGetClass(); }. operator TClass*() const; { return fClassPtr ? fClassPtr : InternalGetClass(); }. » Author: Philippe Canal 15/03/2005 » Copyright (C),MatchSource.WIKI,root/html532/TClassRef.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassRef.html
https://root.cern/root/html532/TClassStreamer.html:1711,Integrability,rout,routine,1711,"s TClassStreamer. TClassStreamer is used to stream an object of a specific class. The address passed to operator() will be the address of the start; of the object. Function Members (Methods); public:. TClassStreamer(ClassStreamerFunc_t pointer); TClassStreamer(const TClassStreamer& rhs); virtual~TClassStreamer(); virtual TClassStreamer*Generate() const; virtual const TClass*GetOnFileClass() const; virtual voidoperator()(TBuffer& b, void* objp); TClassStreamer&operator=(const TClassStreamer&); virtual voidSetOnFileClass(const TClass* cl); virtual voidStream(TBuffer& b, void* objp, const TClass* onfileClass). protected:. TClassStreamer(). Data Members; protected:. TClassReffOnFileClass. private:. ClassStreamerFunc_tfStreamer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TClassStreamer(); {}. TClassStreamer(ClassStreamerFunc_t pointer); {}. TClassStreamer(const TClassStreamer& rhs); {}. void SetOnFileClass(const TClass* cl); { fOnFileClass = const_cast<TClass*>(cl); }. const TClass* GetOnFileClass() const; { return fOnFileClass; }. TClassStreamer * Generate() const; Virtual copy constructor. virtual ~TClassStreamer(); {}. void operator()(TBuffer& b, void* objp); The address passed to operator() will be the address of the start of the; object. void Stream(TBuffer& b, void* objp, const TClass* onfileClass); The address passed to operator() will be the address of the start of the; object. Overload this routine, if your derived class can optimize; the handling of the onfileClass (rather than storing and restoring from the; fOnFileClass member. » Author: Victor Perev and Philippe Canal 08/05/02 » Copyright (C) 1995-2003, Rene Brun, Fons Rademakers and al. *; » Last changed: root/base:$Id: TClassStreamer.h 36096 2010-10-05 21:27:26Z pcanal $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TClassStreamer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassStreamer.html
https://root.cern/root/html532/TClassStreamer.html:993,Modifiability,Inherit,Inheritance,993,"Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » META; » TClassStreamer. class TClassStreamer. TClassStreamer is used to stream an object of a specific class. The address passed to operator() will be the address of the start; of the object. Function Members (Methods); public:. TClassStreamer(ClassStreamerFunc_t pointer); TClassStreamer(const TClassStreamer& rhs); virtual~TClassStreamer(); virtual TClassStreamer*Generate() const; virtual const TClass*GetOnFileClass() const; virtual voidoperator()(TBuffer& b, void* objp); TClassStreamer&operator=(const TClassStreamer&); virtual voidSetOnFileClass(const TClass* cl); virtual voidStream(TBuffer& b, void* objp, const TClass* onfileClass). protected:. TClassStreamer(). Data Members; protected:. TClassReffOnFileClass. private:. ClassStreamerFunc_tfStreamer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TClassStreamer(); {}. TClassStreamer(ClassStreamerFunc_t pointer); {}. TClassStreamer(const TClassStreamer& rhs); {}. void SetOnFileClass(const TClass* cl); { fOnFileClass = const_cast<TClass*>(cl); }. const TClass* GetOnFileClass() const; { return fOnFileClass; }. TClassStreamer * Generate() const; Virtual copy constructor. virtual ~TClassStreamer(); {}. void operator()(TBuffer& b, void* objp); The address passed to operator() will be the address of the start of the; object. void Stream(TBuffer& b, void* objp, const TClass* onfileClass); The address passed to operator() will be the address of the start of the; object. Overload this routine, if your derived class can optimize; the handling of the onfileClass (rather than storing and restoring from the; fOnFileClass member. » Author: Victor Perev and Philippe Canal 08/05/02 » Copyright (C) 1995-2003, Rene Brun, Fons Rademakers and al. *; » Last changed: root/base:$Id: TClassStreamer.h 3",MatchSource.WIKI,root/html532/TClassStreamer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassStreamer.html
https://root.cern/root/html532/TClassStreamer.html:1006,Modifiability,Inherit,Inherited,1006,"Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » META; » TClassStreamer. class TClassStreamer. TClassStreamer is used to stream an object of a specific class. The address passed to operator() will be the address of the start; of the object. Function Members (Methods); public:. TClassStreamer(ClassStreamerFunc_t pointer); TClassStreamer(const TClassStreamer& rhs); virtual~TClassStreamer(); virtual TClassStreamer*Generate() const; virtual const TClass*GetOnFileClass() const; virtual voidoperator()(TBuffer& b, void* objp); TClassStreamer&operator=(const TClassStreamer&); virtual voidSetOnFileClass(const TClass* cl); virtual voidStream(TBuffer& b, void* objp, const TClass* onfileClass). protected:. TClassStreamer(). Data Members; protected:. TClassReffOnFileClass. private:. ClassStreamerFunc_tfStreamer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TClassStreamer(); {}. TClassStreamer(ClassStreamerFunc_t pointer); {}. TClassStreamer(const TClassStreamer& rhs); {}. void SetOnFileClass(const TClass* cl); { fOnFileClass = const_cast<TClass*>(cl); }. const TClass* GetOnFileClass() const; { return fOnFileClass; }. TClassStreamer * Generate() const; Virtual copy constructor. virtual ~TClassStreamer(); {}. void operator()(TBuffer& b, void* objp); The address passed to operator() will be the address of the start of the; object. void Stream(TBuffer& b, void* objp, const TClass* onfileClass); The address passed to operator() will be the address of the start of the; object. Overload this routine, if your derived class can optimize; the handling of the onfileClass (rather than storing and restoring from the; fOnFileClass member. » Author: Victor Perev and Philippe Canal 08/05/02 » Copyright (C) 1995-2003, Rene Brun, Fons Rademakers and al. *; » Last changed: root/base:$Id: TClassStreamer.h 3",MatchSource.WIKI,root/html532/TClassStreamer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassStreamer.html
https://root.cern/root/html532/TClassStreamer.html:1746,Performance,optimiz,optimize,1746,"s TClassStreamer. TClassStreamer is used to stream an object of a specific class. The address passed to operator() will be the address of the start; of the object. Function Members (Methods); public:. TClassStreamer(ClassStreamerFunc_t pointer); TClassStreamer(const TClassStreamer& rhs); virtual~TClassStreamer(); virtual TClassStreamer*Generate() const; virtual const TClass*GetOnFileClass() const; virtual voidoperator()(TBuffer& b, void* objp); TClassStreamer&operator=(const TClassStreamer&); virtual voidSetOnFileClass(const TClass* cl); virtual voidStream(TBuffer& b, void* objp, const TClass* onfileClass). protected:. TClassStreamer(). Data Members; protected:. TClassReffOnFileClass. private:. ClassStreamerFunc_tfStreamer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TClassStreamer(); {}. TClassStreamer(ClassStreamerFunc_t pointer); {}. TClassStreamer(const TClassStreamer& rhs); {}. void SetOnFileClass(const TClass* cl); { fOnFileClass = const_cast<TClass*>(cl); }. const TClass* GetOnFileClass() const; { return fOnFileClass; }. TClassStreamer * Generate() const; Virtual copy constructor. virtual ~TClassStreamer(); {}. void operator()(TBuffer& b, void* objp); The address passed to operator() will be the address of the start of the; object. void Stream(TBuffer& b, void* objp, const TClass* onfileClass); The address passed to operator() will be the address of the start of the; object. Overload this routine, if your derived class can optimize; the handling of the onfileClass (rather than storing and restoring from the; fOnFileClass member. » Author: Victor Perev and Philippe Canal 08/05/02 » Copyright (C) 1995-2003, Rene Brun, Fons Rademakers and al. *; » Last changed: root/base:$Id: TClassStreamer.h 36096 2010-10-05 21:27:26Z pcanal $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TClassStreamer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassStreamer.html
https://root.cern/root/html532/TClassTable.html:1583,Availability,Error,Error,1583," TClassTable(const TClassTable&); virtual~TClassTable(); voidTObject::AbstractMethod(const char* method) const; static voidAdd(const char* cname, Version_t id, const type_info& info, VoidFuncPtr_t dict, Int_t pragmabits); virtual voidTObject::AppendPad(Option_t* option = """"); static char*At(int index); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); intClasses(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* nam",MatchSource.WIKI,root/html532/TClassTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTable.html
https://root.cern/root/html532/TClassTable.html:1712,Availability,error,error,1712,"Add(const char* cname, Version_t id, const type_info& info, VoidFuncPtr_t dict, Int_t pragmabits); virtual voidTObject::AppendPad(Option_t* option = """"); static char*At(int index); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); intClasses(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; static VoidFuncPtr_tGetDict(const char* cname); static VoidFuncPtr_tGetDict(const type_info& info); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; static Version_tGetID(const char* cname); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; static Int_tGetPragmaBits(const char* name); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TT",MatchSource.WIKI,root/html532/TClassTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTable.html
https://root.cern/root/html532/TClassTable.html:1796,Availability,error,error,1796,"t pragmabits); virtual voidTObject::AppendPad(Option_t* option = """"); static char*At(int index); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); intClasses(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; static VoidFuncPtr_tGetDict(const char* cname); static VoidFuncPtr_tGetDict(const type_info& info); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; static Version_tGetID(const char* cname); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; static Int_tGetPragmaBits(const char* name); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const ",MatchSource.WIKI,root/html532/TClassTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTable.html
https://root.cern/root/html532/TClassTable.html:2863,Modifiability,Inherit,InheritsFrom,2863,"t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; static VoidFuncPtr_tGetDict(const char* cname); static VoidFuncPtr_tGetDict(const type_info& info); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; static Version_tGetID(const char* cname); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; static Int_tGetPragmaBits(const char* name); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; static voidInit(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; static char*Next(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObje",MatchSource.WIKI,root/html532/TClassTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTable.html
https://root.cern/root/html532/TClassTable.html:2929,Modifiability,Inherit,InheritsFrom,2929,"msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; static VoidFuncPtr_tGetDict(const char* cname); static VoidFuncPtr_tGetDict(const type_info& info); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; static Version_tGetID(const char* cname); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; static Int_tGetPragmaBits(const char* name); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; static voidInit(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; static char*Next(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t",MatchSource.WIKI,root/html532/TClassTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTable.html
https://root.cern/root/html532/TClassTable.html:6216,Modifiability,Inherit,Inheritance,6216,"t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TClassTable(); static TClassRec*FindElement(const char* cname, Bool_t insert = kFALSE); static TClassRec*FindElementImpl(const char* cname, Bool_t insert); static voidSortTable(). Data Members; public:. enum { kNoStreamer; kNoInputOperator; kAutoStreamer; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. static intfgCursor; static ROOT::TMapTypeToClassRec*fgIdMap; static intfgSize; static Bool_tfgSorted; static TClassRec**fgSortedTable; static TClassRec**fgTable; static intfgTally. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TClassTable(); TClassTable is a singleton (i.e. only one can exist per application). ~TClassTable(); TClassTable singleton is deleted in Terminate(). void Print(Option_t* option = """") const; Print the class table. Before printing the table is sorted; alphabetically. Only classes specified in option are listed.; The default is to list all classes.; Standard wilcarding notation supported. char * At(int index); Returns class at index from sorted class table. Don't use this iterator; while modifying the class table. The class table can be modified; when making calls like TClass::GetClass(), etc.; Returns 0 if index points beyond last class name. int Classes(). { return fgTally; }. void Init(); { fgCursor = 0; SortTable(); }. void Add(const char* cname, Version_t id, const type_info& info, VoidFuncPtr_t dict, Int_t pragmabits); Add a class to the class table (this is a static function). void Remove(const char* cname); Remove a class from th",MatchSource.WIKI,root/html532/TClassTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTable.html
https://root.cern/root/html532/TClassTable.html:6229,Modifiability,Inherit,Inherited,6229,"t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TClassTable(); static TClassRec*FindElement(const char* cname, Bool_t insert = kFALSE); static TClassRec*FindElementImpl(const char* cname, Bool_t insert); static voidSortTable(). Data Members; public:. enum { kNoStreamer; kNoInputOperator; kAutoStreamer; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. static intfgCursor; static ROOT::TMapTypeToClassRec*fgIdMap; static intfgSize; static Bool_tfgSorted; static TClassRec**fgSortedTable; static TClassRec**fgTable; static intfgTally. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TClassTable(); TClassTable is a singleton (i.e. only one can exist per application). ~TClassTable(); TClassTable singleton is deleted in Terminate(). void Print(Option_t* option = """") const; Print the class table. Before printing the table is sorted; alphabetically. Only classes specified in option are listed.; The default is to list all classes.; Standard wilcarding notation supported. char * At(int index); Returns class at index from sorted class table. Don't use this iterator; while modifying the class table. The class table can be modified; when making calls like TClass::GetClass(), etc.; Returns 0 if index points beyond last class name. int Classes(). { return fgTally; }. void Init(); { fgCursor = 0; SortTable(); }. void Add(const char* cname, Version_t id, const type_info& info, VoidFuncPtr_t dict, Int_t pragmabits); Add a class to the class table (this is a static function). void Remove(const char* cname); Remove a class from th",MatchSource.WIKI,root/html532/TClassTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTable.html
https://root.cern/root/html532/TClassTable.html:376,Security,hash,hash,376,". TClassTable. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TClassTable. class TClassTable: public TObject. This class registers for all classes their name, id and dictionary; function in a hash table. Classes are automatically added by the; ctor of a special init class when a global of this init class is; initialized when the program starts (see the ClassImp macro). Function Members (Methods); public:. TClassTable(const TClassTable&); virtual~TClassTable(); voidTObject::AbstractMethod(const char* method) const; static voidAdd(const char* cname, Version_t id, const type_info& info, VoidFuncPtr_t dict, Int_t pragmabits); virtual voidTObject::AppendPad(Option_t* option = """"); static char*At(int index); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); intClasses(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* nam",MatchSource.WIKI,root/html532/TClassTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTable.html
https://root.cern/root/html532/TClassTable.html:2753,Security,Hash,Hash,2753,"ethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; static VoidFuncPtr_tGetDict(const char* cname); static VoidFuncPtr_tGetDict(const type_info& info); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; static Version_tGetID(const char* cname); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; static Int_tGetPragmaBits(const char* name); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; static voidInit(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; static char*Next(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ",MatchSource.WIKI,root/html532/TClassTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTable.html
https://root.cern/root/html532/TClassTable.html:7472,Security,hash,hash,7472,"ted in Terminate(). void Print(Option_t* option = """") const; Print the class table. Before printing the table is sorted; alphabetically. Only classes specified in option are listed.; The default is to list all classes.; Standard wilcarding notation supported. char * At(int index); Returns class at index from sorted class table. Don't use this iterator; while modifying the class table. The class table can be modified; when making calls like TClass::GetClass(), etc.; Returns 0 if index points beyond last class name. int Classes(). { return fgTally; }. void Init(); { fgCursor = 0; SortTable(); }. void Add(const char* cname, Version_t id, const type_info& info, VoidFuncPtr_t dict, Int_t pragmabits); Add a class to the class table (this is a static function). void Remove(const char* cname); Remove a class from the class table. This happens when a shared library; is unloaded (i.e. the dtor's of the global init objects are called). TClassRec * FindElementImpl(const char* cname, Bool_t insert); Find a class by name in the class table (using hash of name). Returns; 0 if the class is not in the table. Unless arguments insert is true in; which case a new entry is created and returned. TClassRec * FindElement(const char* cname, Bool_t insert = kFALSE); Find a class by name in the class table (using hash of name). Returns; 0 if the class is not in the table. Unless arguments insert is true in; which case a new entry is created and returned. Version_t GetID(const char* cname); Returns the ID of a class. Int_t GetPragmaBits(const char* name); Returns the pragma bits as specified in the LinkDef.h file. VoidFuncPtr_t GetDict(const char* cname); Given the class name returns the Dictionary() function of a class; (uses hash of name). VoidFuncPtr_t GetDict(const type_info& info); Given the type_info returns the Dictionary() function of a class; (uses hash of type_info::name()). char * Next(); Returns next class from sorted class table. Don't use this iterator; while modifying the class t",MatchSource.WIKI,root/html532/TClassTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTable.html
https://root.cern/root/html532/TClassTable.html:7731,Security,hash,hash,7731,"d. char * At(int index); Returns class at index from sorted class table. Don't use this iterator; while modifying the class table. The class table can be modified; when making calls like TClass::GetClass(), etc.; Returns 0 if index points beyond last class name. int Classes(). { return fgTally; }. void Init(); { fgCursor = 0; SortTable(); }. void Add(const char* cname, Version_t id, const type_info& info, VoidFuncPtr_t dict, Int_t pragmabits); Add a class to the class table (this is a static function). void Remove(const char* cname); Remove a class from the class table. This happens when a shared library; is unloaded (i.e. the dtor's of the global init objects are called). TClassRec * FindElementImpl(const char* cname, Bool_t insert); Find a class by name in the class table (using hash of name). Returns; 0 if the class is not in the table. Unless arguments insert is true in; which case a new entry is created and returned. TClassRec * FindElement(const char* cname, Bool_t insert = kFALSE); Find a class by name in the class table (using hash of name). Returns; 0 if the class is not in the table. Unless arguments insert is true in; which case a new entry is created and returned. Version_t GetID(const char* cname); Returns the ID of a class. Int_t GetPragmaBits(const char* name); Returns the pragma bits as specified in the LinkDef.h file. VoidFuncPtr_t GetDict(const char* cname); Given the class name returns the Dictionary() function of a class; (uses hash of name). VoidFuncPtr_t GetDict(const type_info& info); Given the type_info returns the Dictionary() function of a class; (uses hash of type_info::name()). char * Next(); Returns next class from sorted class table. Don't use this iterator; while modifying the class table. The class table can be modified; when making calls like TClass::GetClass(), etc. void PrintTable(); Print the class table. Before printing the table is sorted; alphabetically. void SortTable(); Sort the class table by ascending class ID's. void Termi",MatchSource.WIKI,root/html532/TClassTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTable.html
https://root.cern/root/html532/TClassTable.html:8152,Security,hash,hash,8152,"t dict, Int_t pragmabits); Add a class to the class table (this is a static function). void Remove(const char* cname); Remove a class from the class table. This happens when a shared library; is unloaded (i.e. the dtor's of the global init objects are called). TClassRec * FindElementImpl(const char* cname, Bool_t insert); Find a class by name in the class table (using hash of name). Returns; 0 if the class is not in the table. Unless arguments insert is true in; which case a new entry is created and returned. TClassRec * FindElement(const char* cname, Bool_t insert = kFALSE); Find a class by name in the class table (using hash of name). Returns; 0 if the class is not in the table. Unless arguments insert is true in; which case a new entry is created and returned. Version_t GetID(const char* cname); Returns the ID of a class. Int_t GetPragmaBits(const char* name); Returns the pragma bits as specified in the LinkDef.h file. VoidFuncPtr_t GetDict(const char* cname); Given the class name returns the Dictionary() function of a class; (uses hash of name). VoidFuncPtr_t GetDict(const type_info& info); Given the type_info returns the Dictionary() function of a class; (uses hash of type_info::name()). char * Next(); Returns next class from sorted class table. Don't use this iterator; while modifying the class table. The class table can be modified; when making calls like TClass::GetClass(), etc. void PrintTable(); Print the class table. Before printing the table is sorted; alphabetically. void SortTable(); Sort the class table by ascending class ID's. void Terminate(); Deletes the class table (this static class function calls the dtor). TClassTable(). » Author: Fons Rademakers 11/08/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id: TClassTable.h 33854 2010-06-12 14:09:50Z pcanal $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in gener",MatchSource.WIKI,root/html532/TClassTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTable.html
https://root.cern/root/html532/TClassTable.html:8285,Security,hash,hash,8285,"to the class table (this is a static function). void Remove(const char* cname); Remove a class from the class table. This happens when a shared library; is unloaded (i.e. the dtor's of the global init objects are called). TClassRec * FindElementImpl(const char* cname, Bool_t insert); Find a class by name in the class table (using hash of name). Returns; 0 if the class is not in the table. Unless arguments insert is true in; which case a new entry is created and returned. TClassRec * FindElement(const char* cname, Bool_t insert = kFALSE); Find a class by name in the class table (using hash of name). Returns; 0 if the class is not in the table. Unless arguments insert is true in; which case a new entry is created and returned. Version_t GetID(const char* cname); Returns the ID of a class. Int_t GetPragmaBits(const char* name); Returns the pragma bits as specified in the LinkDef.h file. VoidFuncPtr_t GetDict(const char* cname); Given the class name returns the Dictionary() function of a class; (uses hash of name). VoidFuncPtr_t GetDict(const type_info& info); Given the type_info returns the Dictionary() function of a class; (uses hash of type_info::name()). char * Next(); Returns next class from sorted class table. Don't use this iterator; while modifying the class table. The class table can be modified; when making calls like TClass::GetClass(), etc. void PrintTable(); Print the class table. Before printing the table is sorted; alphabetically. void SortTable(); Sort the class table by ascending class ID's. void Terminate(); Deletes the class table (this static class function calls the dtor). TClassTable(). » Author: Fons Rademakers 11/08/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id: TClassTable.h 33854 2010-06-12 14:09:50Z pcanal $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TClassTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTable.html
https://root.cern/root/html532/TClassTable.html:4988,Testability,Test,TestBit,4988,"st; voidTObject::MayNotUse(const char* method) const; static char*Next(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TClassTable&operator=(const TClassTable&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; static voidPrintTable(); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); static voidRemove(const char* cname); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; static voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TClassTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTable.html
https://root.cern/root/html532/TClassTable.html:5027,Testability,Test,TestBits,5027,"st; voidTObject::MayNotUse(const char* method) const; static char*Next(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TClassTable&operator=(const TClassTable&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; static voidPrintTable(); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); static voidRemove(const char* cname); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; static voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TClassTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTable.html
https://root.cern/root/html532/TClassTable.html:1043,Usability,Clear,Clear,1043," TClassTable(const TClassTable&); virtual~TClassTable(); voidTObject::AbstractMethod(const char* method) const; static voidAdd(const char* cname, Version_t id, const type_info& info, VoidFuncPtr_t dict, Int_t pragmabits); virtual voidTObject::AppendPad(Option_t* option = """"); static char*At(int index); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); intClasses(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* nam",MatchSource.WIKI,root/html532/TClassTable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTable.html
https://root.cern/root/html532/TClassTree.html:749,Availability,down,down,749,". TClassTree. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » GPAD; » TClassTree. class TClassTree: public TNamed. Draw inheritance tree and their relations for a list of classes; The following options are supported; - Direct inheritance (default); - Multiple inheritance; - Composition; - References by data members and member functions; - References from Code. The list of classes is specified:; - either in the TClassTree constructor as a second argument; - or the parameter to TClassTRee::Draw. Note that the ClassTree viewer can also be started from the canvas; pull down menu ""Classes"". In the list of classes, class names are separated by a "":""; wildcarding is supported.; The following formats are supported, eg in TClassTree::Draw; 1- Draw(""ClassA""); Draw inheritance tree for ClassA; Show all classes referenced by ClassA; 2- Draw(""*ClassB""); Draw inheritance tree for ClassB; and all the classes deriving from ClassB; 3- Draw("">ClassC""); Draw inheritance tree for ClassC; Show classes referencing ClassC; 4- Draw(""ClassD<""); Draw inheritance tree for ClassD; Show classes referenced by ClassD; Show all classes referencing ClassD; 5- Draw(""Cla*""); Draw inheritance tree for all classes with name starting with ""Cla""; Show classes referenced by these classes; 6- Draw(""ClassA:ClassB<""); Draw inheritance tree for ClassA; Show all classes referenced by ClassA; Draw inheritance tree for ClassB; Show classes referenced by ClassB; Show all classes referencing ClassB. example; Draw(""TTree<""); Draw inheritance tree for the Root class TTree; Show all classes referenced by TTree; Show all classes using TTree. By default, only direct inheritance is drawn.; Use TClassTree::ShowLinks(option) to show additional references; option = ""H"" to show links to embedded classes; option = ""M"" to show multiple inheritance; opti",MatchSource.WIKI,root/html532/TClassTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTree.html
https://root.cern/root/html532/TClassTree.html:5542,Availability,Error,Error,5542,,MatchSource.WIKI,root/html532/TClassTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTree.html
https://root.cern/root/html532/TClassTree.html:5671,Availability,error,error,5671,"assTree&); TClassTree(const char* name, const char* classes = """"); virtual~TClassTree(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(const char* classes = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual Int_tFindClass(const char* classname); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetClasses() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*GetSourceDir() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual U",MatchSource.WIKI,root/html532/TClassTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTree.html
https://root.cern/root/html532/TClassTree.html:5755,Availability,error,error,5755,"e(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(const char* classes = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual Int_tFindClass(const char* classname); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetClasses() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*GetSourceDir() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char",MatchSource.WIKI,root/html532/TClassTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTree.html
https://root.cern/root/html532/TClassTree.html:13101,Deployability,configurat,configuration,13101,"d examples. Int_t FindClass(const char* classname); Find class number corresponding to classname in list of local classes. void FindClassesUsedBy(Int_t iclass); Select all classes used/referenced by the class number iclass. void FindClassesUsing(Int_t iclass); Select all classes using/referencing the class number iclass. void FindClassPosition(const char* classname, Float_t& x, Float_t& y); Search the TPaveClass object in the pad with label=classname; returns the x and y position of the center of the pave. void Init(); Initialize the data structures. void ls(Option_t* option = """") const; list classes names and titles. TObjString * Mark(const char* classname, TList* los, Int_t abit); set bit abit in class classname in list los. void Paint(Option_t* option = """"); Draw the current class setting in fClasses and fStatus. void PaintClass(Int_t iclass, Float_t xleft, Float_t y); Paint one class level. void SaveAs(const char* filename = """", Option_t* option = """") const; save current configuration in a Root file; if filename is blank, the name of the file will be the current objectname.root; all the current settings are preserved; the Root file produced can be looked at by a another Root session; with no access to the original classes.; By default a message is printed. Specify option ""Q"" to remove the message. void ScanClasses(Int_t iclass); Select all classes used by/referenced/referencing the class number iclass; and build the list of these classes. void SetClasses(const char* classes, Option_t* option = ""ID""); Set the list of classes for which the hierarchy is to be drawn; See Paint for the syntax. void SetLabelDx(Float_t labeldx = 0.15); Set the size along x of the TPavellabel showing the class name. void SetYoffset(Float_t offset = 0); Set the offset at the top of the picture; The default offset is computed automatically taking into account; classes not inheriting from TObject. void ShowClassesUsedBy(const char* classes); mark classes used by the list of classes in class",MatchSource.WIKI,root/html532/TClassTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTree.html
https://root.cern/root/html532/TClassTree.html:3321,Energy Efficiency,green,green,3321,"; It shows all the classes derived from the base class TH1. /*. */. The ClassTree class uses the services of the class TPaveClass to; show the class names. By clicking with the right mouse button in; one TPaveClass object, one can invoke the following functions of TClassTree:; - ShowLinks(option) with by default option = ""HMR""; - Draw(classes). By default the class drawn is the one being pointed; - ShowClassesUsedBy(classes) (by default the pointed class); - ShowClassesUsing(classes) (by default the pointed class). The following picture has been generated with the following statements; TClassTree tc1(""tc1"",""TObject"");; tc1.SetShowLinks(""HMR"");. /*. */. Note that in case of embedded classes or pointers to classes,; the corresponding dashed lines or arrows respectively start; in the TPaveClass object at an X position reflecting the position; in the list of data members. - References by data members to other classes are show with a full red line; - Multiple inheritance is shown with a dashed blue line; - ""Has a"" relation is shown with a dotted cyan line; - References from code is shown by a full green line. Use TClassTree::SetSourceDir to specify the search path for source files.; By default the search path includes the ROOTSYS/src directory, the current; directory and the subdirectory src. The first time TClassTree::Draw is invoked, all the classes in the; current application are processed, including the parsing of the code; to find all classes referenced by the include statements.; This process may take a few seconds. The following commands will be; much faster. A TClassTree object may be saved in a Root file.; This object can be processed later by a Root program that ignores; the original classes. This interesting possibility allows to send; the class structure of an application to a colleague who does not have; your classes.; Example:; TFile f(""myClasses.root"",""recreate""); TClassTree *ct = new TClassTree(""ct"",""ATLF*""); ct->Write();; You can send at this point the fi",MatchSource.WIKI,root/html532/TClassTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTree.html
https://root.cern/root/html532/TClassTree.html:4439,Integrability,depend,dependencies,4439,"ry and the subdirectory src. The first time TClassTree::Draw is invoked, all the classes in the; current application are processed, including the parsing of the code; to find all classes referenced by the include statements.; This process may take a few seconds. The following commands will be; much faster. A TClassTree object may be saved in a Root file.; This object can be processed later by a Root program that ignores; the original classes. This interesting possibility allows to send; the class structure of an application to a colleague who does not have; your classes.; Example:; TFile f(""myClasses.root"",""recreate""); TClassTree *ct = new TClassTree(""ct"",""ATLF*""); ct->Write();; You can send at this point the file myClass.root to a colleague who can; run the following Root basic session; TFile f(""myClass.root""); //connect the file; tt.ls(); //to list all classes and titles; tt.Draw(""ATLFDisplay"") //show class ATLFDisplay with all its dependencies; At this point, one has still access to all the classes present; in the original session and select any combination of these classes; to be displayed. Function Members (Methods); public:. TClassTree(); TClassTree(const TClassTree&); TClassTree(const char* name, const char* classes = """"); virtual~TClassTree(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(const char* classes = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voi",MatchSource.WIKI,root/html532/TClassTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTree.html
https://root.cern/root/html532/TClassTree.html:13372,Integrability,message,message,13372,"lect all classes using/referencing the class number iclass. void FindClassPosition(const char* classname, Float_t& x, Float_t& y); Search the TPaveClass object in the pad with label=classname; returns the x and y position of the center of the pave. void Init(); Initialize the data structures. void ls(Option_t* option = """") const; list classes names and titles. TObjString * Mark(const char* classname, TList* los, Int_t abit); set bit abit in class classname in list los. void Paint(Option_t* option = """"); Draw the current class setting in fClasses and fStatus. void PaintClass(Int_t iclass, Float_t xleft, Float_t y); Paint one class level. void SaveAs(const char* filename = """", Option_t* option = """") const; save current configuration in a Root file; if filename is blank, the name of the file will be the current objectname.root; all the current settings are preserved; the Root file produced can be looked at by a another Root session; with no access to the original classes.; By default a message is printed. Specify option ""Q"" to remove the message. void ScanClasses(Int_t iclass); Select all classes used by/referenced/referencing the class number iclass; and build the list of these classes. void SetClasses(const char* classes, Option_t* option = ""ID""); Set the list of classes for which the hierarchy is to be drawn; See Paint for the syntax. void SetLabelDx(Float_t labeldx = 0.15); Set the size along x of the TPavellabel showing the class name. void SetYoffset(Float_t offset = 0); Set the offset at the top of the picture; The default offset is computed automatically taking into account; classes not inheriting from TObject. void ShowClassesUsedBy(const char* classes); mark classes used by the list of classes in classes. void ShowClassesUsing(const char* classes); mark classes using any class in the list of classes in classes. void ShowCod(); Draw the Code References relationships. void ShowHas(); Draw the ""Has a"" relationships. void ShowLinks(Option_t* option = ""HMR""); Set ",MatchSource.WIKI,root/html532/TClassTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTree.html
https://root.cern/root/html532/TClassTree.html:13425,Integrability,message,message,13425," class number iclass. void FindClassPosition(const char* classname, Float_t& x, Float_t& y); Search the TPaveClass object in the pad with label=classname; returns the x and y position of the center of the pave. void Init(); Initialize the data structures. void ls(Option_t* option = """") const; list classes names and titles. TObjString * Mark(const char* classname, TList* los, Int_t abit); set bit abit in class classname in list los. void Paint(Option_t* option = """"); Draw the current class setting in fClasses and fStatus. void PaintClass(Int_t iclass, Float_t xleft, Float_t y); Paint one class level. void SaveAs(const char* filename = """", Option_t* option = """") const; save current configuration in a Root file; if filename is blank, the name of the file will be the current objectname.root; all the current settings are preserved; the Root file produced can be looked at by a another Root session; with no access to the original classes.; By default a message is printed. Specify option ""Q"" to remove the message. void ScanClasses(Int_t iclass); Select all classes used by/referenced/referencing the class number iclass; and build the list of these classes. void SetClasses(const char* classes, Option_t* option = ""ID""); Set the list of classes for which the hierarchy is to be drawn; See Paint for the syntax. void SetLabelDx(Float_t labeldx = 0.15); Set the size along x of the TPavellabel showing the class name. void SetYoffset(Float_t offset = 0); Set the offset at the top of the picture; The default offset is computed automatically taking into account; classes not inheriting from TObject. void ShowClassesUsedBy(const char* classes); mark classes used by the list of classes in classes. void ShowClassesUsing(const char* classes); mark classes using any class in the list of classes in classes. void ShowCod(); Draw the Code References relationships. void ShowHas(); Draw the ""Has a"" relationships. void ShowLinks(Option_t* option = ""HMR""); Set link options in the ClassTree object. ",MatchSource.WIKI,root/html532/TClassTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTree.html
https://root.cern/root/html532/TClassTree.html:297,Modifiability,inherit,inheritance,297,". TClassTree. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » GPAD; » TClassTree. class TClassTree: public TNamed. Draw inheritance tree and their relations for a list of classes; The following options are supported; - Direct inheritance (default); - Multiple inheritance; - Composition; - References by data members and member functions; - References from Code. The list of classes is specified:; - either in the TClassTree constructor as a second argument; - or the parameter to TClassTRee::Draw. Note that the ClassTree viewer can also be started from the canvas; pull down menu ""Classes"". In the list of classes, class names are separated by a "":""; wildcarding is supported.; The following formats are supported, eg in TClassTree::Draw; 1- Draw(""ClassA""); Draw inheritance tree for ClassA; Show all classes referenced by ClassA; 2- Draw(""*ClassB""); Draw inheritance tree for ClassB; and all the classes deriving from ClassB; 3- Draw("">ClassC""); Draw inheritance tree for ClassC; Show classes referencing ClassC; 4- Draw(""ClassD<""); Draw inheritance tree for ClassD; Show classes referenced by ClassD; Show all classes referencing ClassD; 5- Draw(""Cla*""); Draw inheritance tree for all classes with name starting with ""Cla""; Show classes referenced by these classes; 6- Draw(""ClassA:ClassB<""); Draw inheritance tree for ClassA; Show all classes referenced by ClassA; Draw inheritance tree for ClassB; Show classes referenced by ClassB; Show all classes referencing ClassB. example; Draw(""TTree<""); Draw inheritance tree for the Root class TTree; Show all classes referenced by TTree; Show all classes using TTree. By default, only direct inheritance is drawn.; Use TClassTree::ShowLinks(option) to show additional references; option = ""H"" to show links to embedded classes; option = ""M"" to show multiple inheritance; opti",MatchSource.WIKI,root/html532/TClassTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTree.html
https://root.cern/root/html532/TClassTree.html:403,Modifiability,inherit,inheritance,403,". TClassTree. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » GPAD; » TClassTree. class TClassTree: public TNamed. Draw inheritance tree and their relations for a list of classes; The following options are supported; - Direct inheritance (default); - Multiple inheritance; - Composition; - References by data members and member functions; - References from Code. The list of classes is specified:; - either in the TClassTree constructor as a second argument; - or the parameter to TClassTRee::Draw. Note that the ClassTree viewer can also be started from the canvas; pull down menu ""Classes"". In the list of classes, class names are separated by a "":""; wildcarding is supported.; The following formats are supported, eg in TClassTree::Draw; 1- Draw(""ClassA""); Draw inheritance tree for ClassA; Show all classes referenced by ClassA; 2- Draw(""*ClassB""); Draw inheritance tree for ClassB; and all the classes deriving from ClassB; 3- Draw("">ClassC""); Draw inheritance tree for ClassC; Show classes referencing ClassC; 4- Draw(""ClassD<""); Draw inheritance tree for ClassD; Show classes referenced by ClassD; Show all classes referencing ClassD; 5- Draw(""Cla*""); Draw inheritance tree for all classes with name starting with ""Cla""; Show classes referenced by these classes; 6- Draw(""ClassA:ClassB<""); Draw inheritance tree for ClassA; Show all classes referenced by ClassA; Draw inheritance tree for ClassB; Show classes referenced by ClassB; Show all classes referencing ClassB. example; Draw(""TTree<""); Draw inheritance tree for the Root class TTree; Show all classes referenced by TTree; Show all classes using TTree. By default, only direct inheritance is drawn.; Use TClassTree::ShowLinks(option) to show additional references; option = ""H"" to show links to embedded classes; option = ""M"" to show multiple inheritance; opti",MatchSource.WIKI,root/html532/TClassTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTree.html
https://root.cern/root/html532/TClassTree.html:437,Modifiability,inherit,inheritance,437,". TClassTree. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » GPAD; » TClassTree. class TClassTree: public TNamed. Draw inheritance tree and their relations for a list of classes; The following options are supported; - Direct inheritance (default); - Multiple inheritance; - Composition; - References by data members and member functions; - References from Code. The list of classes is specified:; - either in the TClassTree constructor as a second argument; - or the parameter to TClassTRee::Draw. Note that the ClassTree viewer can also be started from the canvas; pull down menu ""Classes"". In the list of classes, class names are separated by a "":""; wildcarding is supported.; The following formats are supported, eg in TClassTree::Draw; 1- Draw(""ClassA""); Draw inheritance tree for ClassA; Show all classes referenced by ClassA; 2- Draw(""*ClassB""); Draw inheritance tree for ClassB; and all the classes deriving from ClassB; 3- Draw("">ClassC""); Draw inheritance tree for ClassC; Show classes referencing ClassC; 4- Draw(""ClassD<""); Draw inheritance tree for ClassD; Show classes referenced by ClassD; Show all classes referencing ClassD; 5- Draw(""Cla*""); Draw inheritance tree for all classes with name starting with ""Cla""; Show classes referenced by these classes; 6- Draw(""ClassA:ClassB<""); Draw inheritance tree for ClassA; Show all classes referenced by ClassA; Draw inheritance tree for ClassB; Show classes referenced by ClassB; Show all classes referencing ClassB. example; Draw(""TTree<""); Draw inheritance tree for the Root class TTree; Show all classes referenced by TTree; Show all classes using TTree. By default, only direct inheritance is drawn.; Use TClassTree::ShowLinks(option) to show additional references; option = ""H"" to show links to embedded classes; option = ""M"" to show multiple inheritance; opti",MatchSource.WIKI,root/html532/TClassTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTree.html
https://root.cern/root/html532/TClassTree.html:942,Modifiability,inherit,inheritance,942,"Tree. class TClassTree: public TNamed. Draw inheritance tree and their relations for a list of classes; The following options are supported; - Direct inheritance (default); - Multiple inheritance; - Composition; - References by data members and member functions; - References from Code. The list of classes is specified:; - either in the TClassTree constructor as a second argument; - or the parameter to TClassTRee::Draw. Note that the ClassTree viewer can also be started from the canvas; pull down menu ""Classes"". In the list of classes, class names are separated by a "":""; wildcarding is supported.; The following formats are supported, eg in TClassTree::Draw; 1- Draw(""ClassA""); Draw inheritance tree for ClassA; Show all classes referenced by ClassA; 2- Draw(""*ClassB""); Draw inheritance tree for ClassB; and all the classes deriving from ClassB; 3- Draw("">ClassC""); Draw inheritance tree for ClassC; Show classes referencing ClassC; 4- Draw(""ClassD<""); Draw inheritance tree for ClassD; Show classes referenced by ClassD; Show all classes referencing ClassD; 5- Draw(""Cla*""); Draw inheritance tree for all classes with name starting with ""Cla""; Show classes referenced by these classes; 6- Draw(""ClassA:ClassB<""); Draw inheritance tree for ClassA; Show all classes referenced by ClassA; Draw inheritance tree for ClassB; Show classes referenced by ClassB; Show all classes referencing ClassB. example; Draw(""TTree<""); Draw inheritance tree for the Root class TTree; Show all classes referenced by TTree; Show all classes using TTree. By default, only direct inheritance is drawn.; Use TClassTree::ShowLinks(option) to show additional references; option = ""H"" to show links to embedded classes; option = ""M"" to show multiple inheritance; option = ""R"" to show pointers to other classes from data members; option = ""C"" to show classes used by the code(implementation) of a class. The following picture is produced directly by:; TClassTree ct(""ct"",""*TH1""); It shows all the classes derived from the",MatchSource.WIKI,root/html532/TClassTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTree.html
https://root.cern/root/html532/TClassTree.html:1035,Modifiability,inherit,inheritance,1035,"Tree. class TClassTree: public TNamed. Draw inheritance tree and their relations for a list of classes; The following options are supported; - Direct inheritance (default); - Multiple inheritance; - Composition; - References by data members and member functions; - References from Code. The list of classes is specified:; - either in the TClassTree constructor as a second argument; - or the parameter to TClassTRee::Draw. Note that the ClassTree viewer can also be started from the canvas; pull down menu ""Classes"". In the list of classes, class names are separated by a "":""; wildcarding is supported.; The following formats are supported, eg in TClassTree::Draw; 1- Draw(""ClassA""); Draw inheritance tree for ClassA; Show all classes referenced by ClassA; 2- Draw(""*ClassB""); Draw inheritance tree for ClassB; and all the classes deriving from ClassB; 3- Draw("">ClassC""); Draw inheritance tree for ClassC; Show classes referencing ClassC; 4- Draw(""ClassD<""); Draw inheritance tree for ClassD; Show classes referenced by ClassD; Show all classes referencing ClassD; 5- Draw(""Cla*""); Draw inheritance tree for all classes with name starting with ""Cla""; Show classes referenced by these classes; 6- Draw(""ClassA:ClassB<""); Draw inheritance tree for ClassA; Show all classes referenced by ClassA; Draw inheritance tree for ClassB; Show classes referenced by ClassB; Show all classes referencing ClassB. example; Draw(""TTree<""); Draw inheritance tree for the Root class TTree; Show all classes referenced by TTree; Show all classes using TTree. By default, only direct inheritance is drawn.; Use TClassTree::ShowLinks(option) to show additional references; option = ""H"" to show links to embedded classes; option = ""M"" to show multiple inheritance; option = ""R"" to show pointers to other classes from data members; option = ""C"" to show classes used by the code(implementation) of a class. The following picture is produced directly by:; TClassTree ct(""ct"",""*TH1""); It shows all the classes derived from the",MatchSource.WIKI,root/html532/TClassTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTree.html
https://root.cern/root/html532/TClassTree.html:1131,Modifiability,inherit,inheritance,1131,"Tree. class TClassTree: public TNamed. Draw inheritance tree and their relations for a list of classes; The following options are supported; - Direct inheritance (default); - Multiple inheritance; - Composition; - References by data members and member functions; - References from Code. The list of classes is specified:; - either in the TClassTree constructor as a second argument; - or the parameter to TClassTRee::Draw. Note that the ClassTree viewer can also be started from the canvas; pull down menu ""Classes"". In the list of classes, class names are separated by a "":""; wildcarding is supported.; The following formats are supported, eg in TClassTree::Draw; 1- Draw(""ClassA""); Draw inheritance tree for ClassA; Show all classes referenced by ClassA; 2- Draw(""*ClassB""); Draw inheritance tree for ClassB; and all the classes deriving from ClassB; 3- Draw("">ClassC""); Draw inheritance tree for ClassC; Show classes referencing ClassC; 4- Draw(""ClassD<""); Draw inheritance tree for ClassD; Show classes referenced by ClassD; Show all classes referencing ClassD; 5- Draw(""Cla*""); Draw inheritance tree for all classes with name starting with ""Cla""; Show classes referenced by these classes; 6- Draw(""ClassA:ClassB<""); Draw inheritance tree for ClassA; Show all classes referenced by ClassA; Draw inheritance tree for ClassB; Show classes referenced by ClassB; Show all classes referencing ClassB. example; Draw(""TTree<""); Draw inheritance tree for the Root class TTree; Show all classes referenced by TTree; Show all classes using TTree. By default, only direct inheritance is drawn.; Use TClassTree::ShowLinks(option) to show additional references; option = ""H"" to show links to embedded classes; option = ""M"" to show multiple inheritance; option = ""R"" to show pointers to other classes from data members; option = ""C"" to show classes used by the code(implementation) of a class. The following picture is produced directly by:; TClassTree ct(""ct"",""*TH1""); It shows all the classes derived from the",MatchSource.WIKI,root/html532/TClassTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTree.html
https://root.cern/root/html532/TClassTree.html:1218,Modifiability,inherit,inheritance,1218,"Tree. class TClassTree: public TNamed. Draw inheritance tree and their relations for a list of classes; The following options are supported; - Direct inheritance (default); - Multiple inheritance; - Composition; - References by data members and member functions; - References from Code. The list of classes is specified:; - either in the TClassTree constructor as a second argument; - or the parameter to TClassTRee::Draw. Note that the ClassTree viewer can also be started from the canvas; pull down menu ""Classes"". In the list of classes, class names are separated by a "":""; wildcarding is supported.; The following formats are supported, eg in TClassTree::Draw; 1- Draw(""ClassA""); Draw inheritance tree for ClassA; Show all classes referenced by ClassA; 2- Draw(""*ClassB""); Draw inheritance tree for ClassB; and all the classes deriving from ClassB; 3- Draw("">ClassC""); Draw inheritance tree for ClassC; Show classes referencing ClassC; 4- Draw(""ClassD<""); Draw inheritance tree for ClassD; Show classes referenced by ClassD; Show all classes referencing ClassD; 5- Draw(""Cla*""); Draw inheritance tree for all classes with name starting with ""Cla""; Show classes referenced by these classes; 6- Draw(""ClassA:ClassB<""); Draw inheritance tree for ClassA; Show all classes referenced by ClassA; Draw inheritance tree for ClassB; Show classes referenced by ClassB; Show all classes referencing ClassB. example; Draw(""TTree<""); Draw inheritance tree for the Root class TTree; Show all classes referenced by TTree; Show all classes using TTree. By default, only direct inheritance is drawn.; Use TClassTree::ShowLinks(option) to show additional references; option = ""H"" to show links to embedded classes; option = ""M"" to show multiple inheritance; option = ""R"" to show pointers to other classes from data members; option = ""C"" to show classes used by the code(implementation) of a class. The following picture is produced directly by:; TClassTree ct(""ct"",""*TH1""); It shows all the classes derived from the",MatchSource.WIKI,root/html532/TClassTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTree.html
https://root.cern/root/html532/TClassTree.html:1341,Modifiability,inherit,inheritance,1341,"Tree. class TClassTree: public TNamed. Draw inheritance tree and their relations for a list of classes; The following options are supported; - Direct inheritance (default); - Multiple inheritance; - Composition; - References by data members and member functions; - References from Code. The list of classes is specified:; - either in the TClassTree constructor as a second argument; - or the parameter to TClassTRee::Draw. Note that the ClassTree viewer can also be started from the canvas; pull down menu ""Classes"". In the list of classes, class names are separated by a "":""; wildcarding is supported.; The following formats are supported, eg in TClassTree::Draw; 1- Draw(""ClassA""); Draw inheritance tree for ClassA; Show all classes referenced by ClassA; 2- Draw(""*ClassB""); Draw inheritance tree for ClassB; and all the classes deriving from ClassB; 3- Draw("">ClassC""); Draw inheritance tree for ClassC; Show classes referencing ClassC; 4- Draw(""ClassD<""); Draw inheritance tree for ClassD; Show classes referenced by ClassD; Show all classes referencing ClassD; 5- Draw(""Cla*""); Draw inheritance tree for all classes with name starting with ""Cla""; Show classes referenced by these classes; 6- Draw(""ClassA:ClassB<""); Draw inheritance tree for ClassA; Show all classes referenced by ClassA; Draw inheritance tree for ClassB; Show classes referenced by ClassB; Show all classes referencing ClassB. example; Draw(""TTree<""); Draw inheritance tree for the Root class TTree; Show all classes referenced by TTree; Show all classes using TTree. By default, only direct inheritance is drawn.; Use TClassTree::ShowLinks(option) to show additional references; option = ""H"" to show links to embedded classes; option = ""M"" to show multiple inheritance; option = ""R"" to show pointers to other classes from data members; option = ""C"" to show classes used by the code(implementation) of a class. The following picture is produced directly by:; TClassTree ct(""ct"",""*TH1""); It shows all the classes derived from the",MatchSource.WIKI,root/html532/TClassTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTree.html
https://root.cern/root/html532/TClassTree.html:1479,Modifiability,inherit,inheritance,1479,"Tree. class TClassTree: public TNamed. Draw inheritance tree and their relations for a list of classes; The following options are supported; - Direct inheritance (default); - Multiple inheritance; - Composition; - References by data members and member functions; - References from Code. The list of classes is specified:; - either in the TClassTree constructor as a second argument; - or the parameter to TClassTRee::Draw. Note that the ClassTree viewer can also be started from the canvas; pull down menu ""Classes"". In the list of classes, class names are separated by a "":""; wildcarding is supported.; The following formats are supported, eg in TClassTree::Draw; 1- Draw(""ClassA""); Draw inheritance tree for ClassA; Show all classes referenced by ClassA; 2- Draw(""*ClassB""); Draw inheritance tree for ClassB; and all the classes deriving from ClassB; 3- Draw("">ClassC""); Draw inheritance tree for ClassC; Show classes referencing ClassC; 4- Draw(""ClassD<""); Draw inheritance tree for ClassD; Show classes referenced by ClassD; Show all classes referencing ClassD; 5- Draw(""Cla*""); Draw inheritance tree for all classes with name starting with ""Cla""; Show classes referenced by these classes; 6- Draw(""ClassA:ClassB<""); Draw inheritance tree for ClassA; Show all classes referenced by ClassA; Draw inheritance tree for ClassB; Show classes referenced by ClassB; Show all classes referencing ClassB. example; Draw(""TTree<""); Draw inheritance tree for the Root class TTree; Show all classes referenced by TTree; Show all classes using TTree. By default, only direct inheritance is drawn.; Use TClassTree::ShowLinks(option) to show additional references; option = ""H"" to show links to embedded classes; option = ""M"" to show multiple inheritance; option = ""R"" to show pointers to other classes from data members; option = ""C"" to show classes used by the code(implementation) of a class. The following picture is produced directly by:; TClassTree ct(""ct"",""*TH1""); It shows all the classes derived from the",MatchSource.WIKI,root/html532/TClassTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTree.html
https://root.cern/root/html532/TClassTree.html:1552,Modifiability,inherit,inheritance,1552,"Tree. class TClassTree: public TNamed. Draw inheritance tree and their relations for a list of classes; The following options are supported; - Direct inheritance (default); - Multiple inheritance; - Composition; - References by data members and member functions; - References from Code. The list of classes is specified:; - either in the TClassTree constructor as a second argument; - or the parameter to TClassTRee::Draw. Note that the ClassTree viewer can also be started from the canvas; pull down menu ""Classes"". In the list of classes, class names are separated by a "":""; wildcarding is supported.; The following formats are supported, eg in TClassTree::Draw; 1- Draw(""ClassA""); Draw inheritance tree for ClassA; Show all classes referenced by ClassA; 2- Draw(""*ClassB""); Draw inheritance tree for ClassB; and all the classes deriving from ClassB; 3- Draw("">ClassC""); Draw inheritance tree for ClassC; Show classes referencing ClassC; 4- Draw(""ClassD<""); Draw inheritance tree for ClassD; Show classes referenced by ClassD; Show all classes referencing ClassD; 5- Draw(""Cla*""); Draw inheritance tree for all classes with name starting with ""Cla""; Show classes referenced by these classes; 6- Draw(""ClassA:ClassB<""); Draw inheritance tree for ClassA; Show all classes referenced by ClassA; Draw inheritance tree for ClassB; Show classes referenced by ClassB; Show all classes referencing ClassB. example; Draw(""TTree<""); Draw inheritance tree for the Root class TTree; Show all classes referenced by TTree; Show all classes using TTree. By default, only direct inheritance is drawn.; Use TClassTree::ShowLinks(option) to show additional references; option = ""H"" to show links to embedded classes; option = ""M"" to show multiple inheritance; option = ""R"" to show pointers to other classes from data members; option = ""C"" to show classes used by the code(implementation) of a class. The following picture is produced directly by:; TClassTree ct(""ct"",""*TH1""); It shows all the classes derived from the",MatchSource.WIKI,root/html532/TClassTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTree.html
https://root.cern/root/html532/TClassTree.html:1683,Modifiability,inherit,inheritance,1683,"rted from the canvas; pull down menu ""Classes"". In the list of classes, class names are separated by a "":""; wildcarding is supported.; The following formats are supported, eg in TClassTree::Draw; 1- Draw(""ClassA""); Draw inheritance tree for ClassA; Show all classes referenced by ClassA; 2- Draw(""*ClassB""); Draw inheritance tree for ClassB; and all the classes deriving from ClassB; 3- Draw("">ClassC""); Draw inheritance tree for ClassC; Show classes referencing ClassC; 4- Draw(""ClassD<""); Draw inheritance tree for ClassD; Show classes referenced by ClassD; Show all classes referencing ClassD; 5- Draw(""Cla*""); Draw inheritance tree for all classes with name starting with ""Cla""; Show classes referenced by these classes; 6- Draw(""ClassA:ClassB<""); Draw inheritance tree for ClassA; Show all classes referenced by ClassA; Draw inheritance tree for ClassB; Show classes referenced by ClassB; Show all classes referencing ClassB. example; Draw(""TTree<""); Draw inheritance tree for the Root class TTree; Show all classes referenced by TTree; Show all classes using TTree. By default, only direct inheritance is drawn.; Use TClassTree::ShowLinks(option) to show additional references; option = ""H"" to show links to embedded classes; option = ""M"" to show multiple inheritance; option = ""R"" to show pointers to other classes from data members; option = ""C"" to show classes used by the code(implementation) of a class. The following picture is produced directly by:; TClassTree ct(""ct"",""*TH1""); It shows all the classes derived from the base class TH1. /*. */. The ClassTree class uses the services of the class TPaveClass to; show the class names. By clicking with the right mouse button in; one TPaveClass object, one can invoke the following functions of TClassTree:; - ShowLinks(option) with by default option = ""HMR""; - Draw(classes). By default the class drawn is the one being pointed; - ShowClassesUsedBy(classes) (by default the pointed class); - ShowClassesUsing(classes) (by default the pointed",MatchSource.WIKI,root/html532/TClassTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTree.html
https://root.cern/root/html532/TClassTree.html:1818,Modifiability,inherit,inheritance,1818,"ted by a "":""; wildcarding is supported.; The following formats are supported, eg in TClassTree::Draw; 1- Draw(""ClassA""); Draw inheritance tree for ClassA; Show all classes referenced by ClassA; 2- Draw(""*ClassB""); Draw inheritance tree for ClassB; and all the classes deriving from ClassB; 3- Draw("">ClassC""); Draw inheritance tree for ClassC; Show classes referencing ClassC; 4- Draw(""ClassD<""); Draw inheritance tree for ClassD; Show classes referenced by ClassD; Show all classes referencing ClassD; 5- Draw(""Cla*""); Draw inheritance tree for all classes with name starting with ""Cla""; Show classes referenced by these classes; 6- Draw(""ClassA:ClassB<""); Draw inheritance tree for ClassA; Show all classes referenced by ClassA; Draw inheritance tree for ClassB; Show classes referenced by ClassB; Show all classes referencing ClassB. example; Draw(""TTree<""); Draw inheritance tree for the Root class TTree; Show all classes referenced by TTree; Show all classes using TTree. By default, only direct inheritance is drawn.; Use TClassTree::ShowLinks(option) to show additional references; option = ""H"" to show links to embedded classes; option = ""M"" to show multiple inheritance; option = ""R"" to show pointers to other classes from data members; option = ""C"" to show classes used by the code(implementation) of a class. The following picture is produced directly by:; TClassTree ct(""ct"",""*TH1""); It shows all the classes derived from the base class TH1. /*. */. The ClassTree class uses the services of the class TPaveClass to; show the class names. By clicking with the right mouse button in; one TPaveClass object, one can invoke the following functions of TClassTree:; - ShowLinks(option) with by default option = ""HMR""; - Draw(classes). By default the class drawn is the one being pointed; - ShowClassesUsedBy(classes) (by default the pointed class); - ShowClassesUsing(classes) (by default the pointed class). The following picture has been generated with the following statements; TClassTree t",MatchSource.WIKI,root/html532/TClassTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTree.html
https://root.cern/root/html532/TClassTree.html:1984,Modifiability,inherit,inheritance,1984," referenced by ClassA; 2- Draw(""*ClassB""); Draw inheritance tree for ClassB; and all the classes deriving from ClassB; 3- Draw("">ClassC""); Draw inheritance tree for ClassC; Show classes referencing ClassC; 4- Draw(""ClassD<""); Draw inheritance tree for ClassD; Show classes referenced by ClassD; Show all classes referencing ClassD; 5- Draw(""Cla*""); Draw inheritance tree for all classes with name starting with ""Cla""; Show classes referenced by these classes; 6- Draw(""ClassA:ClassB<""); Draw inheritance tree for ClassA; Show all classes referenced by ClassA; Draw inheritance tree for ClassB; Show classes referenced by ClassB; Show all classes referencing ClassB. example; Draw(""TTree<""); Draw inheritance tree for the Root class TTree; Show all classes referenced by TTree; Show all classes using TTree. By default, only direct inheritance is drawn.; Use TClassTree::ShowLinks(option) to show additional references; option = ""H"" to show links to embedded classes; option = ""M"" to show multiple inheritance; option = ""R"" to show pointers to other classes from data members; option = ""C"" to show classes used by the code(implementation) of a class. The following picture is produced directly by:; TClassTree ct(""ct"",""*TH1""); It shows all the classes derived from the base class TH1. /*. */. The ClassTree class uses the services of the class TPaveClass to; show the class names. By clicking with the right mouse button in; one TPaveClass object, one can invoke the following functions of TClassTree:; - ShowLinks(option) with by default option = ""HMR""; - Draw(classes). By default the class drawn is the one being pointed; - ShowClassesUsedBy(classes) (by default the pointed class); - ShowClassesUsing(classes) (by default the pointed class). The following picture has been generated with the following statements; TClassTree tc1(""tc1"",""TObject"");; tc1.SetShowLinks(""HMR"");. /*. */. Note that in case of embedded classes or pointers to classes,; the corresponding dashed lines or arrows respectively",MatchSource.WIKI,root/html532/TClassTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTree.html
https://root.cern/root/html532/TClassTree.html:3180,Modifiability,inherit,inheritance,3180,"; It shows all the classes derived from the base class TH1. /*. */. The ClassTree class uses the services of the class TPaveClass to; show the class names. By clicking with the right mouse button in; one TPaveClass object, one can invoke the following functions of TClassTree:; - ShowLinks(option) with by default option = ""HMR""; - Draw(classes). By default the class drawn is the one being pointed; - ShowClassesUsedBy(classes) (by default the pointed class); - ShowClassesUsing(classes) (by default the pointed class). The following picture has been generated with the following statements; TClassTree tc1(""tc1"",""TObject"");; tc1.SetShowLinks(""HMR"");. /*. */. Note that in case of embedded classes or pointers to classes,; the corresponding dashed lines or arrows respectively start; in the TPaveClass object at an X position reflecting the position; in the list of data members. - References by data members to other classes are show with a full red line; - Multiple inheritance is shown with a dashed blue line; - ""Has a"" relation is shown with a dotted cyan line; - References from code is shown by a full green line. Use TClassTree::SetSourceDir to specify the search path for source files.; By default the search path includes the ROOTSYS/src directory, the current; directory and the subdirectory src. The first time TClassTree::Draw is invoked, all the classes in the; current application are processed, including the parsing of the code; to find all classes referenced by the include statements.; This process may take a few seconds. The following commands will be; much faster. A TClassTree object may be saved in a Root file.; This object can be processed later by a Root program that ignores; the original classes. This interesting possibility allows to send; the class structure of an application to a colleague who does not have; your classes.; Example:; TFile f(""myClasses.root"",""recreate""); TClassTree *ct = new TClassTree(""ct"",""ATLF*""); ct->Write();; You can send at this point the fi",MatchSource.WIKI,root/html532/TClassTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTree.html
https://root.cern/root/html532/TClassTree.html:6798,Modifiability,Inherit,InheritsFrom,6798,"_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual Int_tFindClass(const char* classname); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetClasses() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*GetSourceDir() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::oper",MatchSource.WIKI,root/html532/TClassTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTree.html
https://root.cern/root/html532/TClassTree.html:6864,Modifiability,Inherit,InheritsFrom,6864,"ar* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual Int_tFindClass(const char* classname); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetClasses() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*GetSourceDir() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TClassTree&operator=(const TClass",MatchSource.WIKI,root/html532/TClassTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTree.html
https://root.cern/root/html532/TClassTree.html:11481,Modifiability,inherit,inheritance,11481,"t_t xleft, Float_t y); virtual voidScanClasses(Int_t iclass); virtual voidShowCod(); virtual voidShowHas(); virtual voidShowMul(); virtual voidShowRef(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringfClassesList of classes to be drawn; TString**fCnames![fNclasses] class names; Int_t*fCparent!parent number of classes (temporary); TClass**fCpointer![fNclasses] pointers to the TClass objects; Int_t*fCstatus[fNclasses] classes status; TString**fCtitles![fNclasses] class titles; char**fDerived![fNclasses] table to indicate if i derives from j; Float_tfLabelDxwidth along x of TPaveLabels in per cent of pad; TList**fLinks![fNclasses] for each class, the list of referenced(ing) classes; TStringTNamed::fNameobject identifier; Int_tfNclassescurrent number of classes; Int_t*fNdata[fNclasses] Number of data members per class; TString**fOptions![fNclasses] List of options per class; Int_t*fParents[fNclasses] parent number of classes (permanent); Int_tfShowCodif 1 show classes referenced by implementation; Int_tfShowHasif 1 show ""has a"" relationship; Int_tfShowMulif 1 show multiple inheritance; Int_tfShowRefif 1 show classes relationship other than inheritance; TStringfSourceDirConcatenated source directories; TStringTNamed::fTitleobject title; Float_tfYoffsetoffset at top of picture in per cent of pad. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TClassTree(); TClassTree default constructor. TClassTree(const char* name, const char* classes = """"); TClassTree constructor. ~TClassTree(); TClassTree default destructor. void Draw(const char* classes = """"); Draw the inheritance tree and relations for the list of classes; see this class header for the syntax and examples. Int_t FindClass(const ch",MatchSource.WIKI,root/html532/TClassTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTree.html
https://root.cern/root/html532/TClassTree.html:11549,Modifiability,inherit,inheritance,11549,"t_t xleft, Float_t y); virtual voidScanClasses(Int_t iclass); virtual voidShowCod(); virtual voidShowHas(); virtual voidShowMul(); virtual voidShowRef(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringfClassesList of classes to be drawn; TString**fCnames![fNclasses] class names; Int_t*fCparent!parent number of classes (temporary); TClass**fCpointer![fNclasses] pointers to the TClass objects; Int_t*fCstatus[fNclasses] classes status; TString**fCtitles![fNclasses] class titles; char**fDerived![fNclasses] table to indicate if i derives from j; Float_tfLabelDxwidth along x of TPaveLabels in per cent of pad; TList**fLinks![fNclasses] for each class, the list of referenced(ing) classes; TStringTNamed::fNameobject identifier; Int_tfNclassescurrent number of classes; Int_t*fNdata[fNclasses] Number of data members per class; TString**fOptions![fNclasses] List of options per class; Int_t*fParents[fNclasses] parent number of classes (permanent); Int_tfShowCodif 1 show classes referenced by implementation; Int_tfShowHasif 1 show ""has a"" relationship; Int_tfShowMulif 1 show multiple inheritance; Int_tfShowRefif 1 show classes relationship other than inheritance; TStringfSourceDirConcatenated source directories; TStringTNamed::fTitleobject title; Float_tfYoffsetoffset at top of picture in per cent of pad. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TClassTree(); TClassTree default constructor. TClassTree(const char* name, const char* classes = """"); TClassTree constructor. ~TClassTree(); TClassTree default destructor. void Draw(const char* classes = """"); Draw the inheritance tree and relations for the list of classes; see this class header for the syntax and examples. Int_t FindClass(const ch",MatchSource.WIKI,root/html532/TClassTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTree.html
https://root.cern/root/html532/TClassTree.html:11721,Modifiability,Inherit,Inheritance,11721,"fNclasses] pointers to the TClass objects; Int_t*fCstatus[fNclasses] classes status; TString**fCtitles![fNclasses] class titles; char**fDerived![fNclasses] table to indicate if i derives from j; Float_tfLabelDxwidth along x of TPaveLabels in per cent of pad; TList**fLinks![fNclasses] for each class, the list of referenced(ing) classes; TStringTNamed::fNameobject identifier; Int_tfNclassescurrent number of classes; Int_t*fNdata[fNclasses] Number of data members per class; TString**fOptions![fNclasses] List of options per class; Int_t*fParents[fNclasses] parent number of classes (permanent); Int_tfShowCodif 1 show classes referenced by implementation; Int_tfShowHasif 1 show ""has a"" relationship; Int_tfShowMulif 1 show multiple inheritance; Int_tfShowRefif 1 show classes relationship other than inheritance; TStringfSourceDirConcatenated source directories; TStringTNamed::fTitleobject title; Float_tfYoffsetoffset at top of picture in per cent of pad. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TClassTree(); TClassTree default constructor. TClassTree(const char* name, const char* classes = """"); TClassTree constructor. ~TClassTree(); TClassTree default destructor. void Draw(const char* classes = """"); Draw the inheritance tree and relations for the list of classes; see this class header for the syntax and examples. Int_t FindClass(const char* classname); Find class number corresponding to classname in list of local classes. void FindClassesUsedBy(Int_t iclass); Select all classes used/referenced by the class number iclass. void FindClassesUsing(Int_t iclass); Select all classes using/referencing the class number iclass. void FindClassPosition(const char* classname, Float_t& x, Float_t& y); Search the TPaveClass object in the pad with label=classname; returns the x and y position of the center of the pave. void Init(); Initialize the data structures. void ls(Option_t* option = """") const; list classes names and titles. TObjString",MatchSource.WIKI,root/html532/TClassTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTree.html
https://root.cern/root/html532/TClassTree.html:11734,Modifiability,Inherit,Inherited,11734,"fNclasses] pointers to the TClass objects; Int_t*fCstatus[fNclasses] classes status; TString**fCtitles![fNclasses] class titles; char**fDerived![fNclasses] table to indicate if i derives from j; Float_tfLabelDxwidth along x of TPaveLabels in per cent of pad; TList**fLinks![fNclasses] for each class, the list of referenced(ing) classes; TStringTNamed::fNameobject identifier; Int_tfNclassescurrent number of classes; Int_t*fNdata[fNclasses] Number of data members per class; TString**fOptions![fNclasses] List of options per class; Int_t*fParents[fNclasses] parent number of classes (permanent); Int_tfShowCodif 1 show classes referenced by implementation; Int_tfShowHasif 1 show ""has a"" relationship; Int_tfShowMulif 1 show multiple inheritance; Int_tfShowRefif 1 show classes relationship other than inheritance; TStringfSourceDirConcatenated source directories; TStringTNamed::fTitleobject title; Float_tfYoffsetoffset at top of picture in per cent of pad. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TClassTree(); TClassTree default constructor. TClassTree(const char* name, const char* classes = """"); TClassTree constructor. ~TClassTree(); TClassTree default destructor. void Draw(const char* classes = """"); Draw the inheritance tree and relations for the list of classes; see this class header for the syntax and examples. Int_t FindClass(const char* classname); Find class number corresponding to classname in list of local classes. void FindClassesUsedBy(Int_t iclass); Select all classes used/referenced by the class number iclass. void FindClassesUsing(Int_t iclass); Select all classes using/referencing the class number iclass. void FindClassPosition(const char* classname, Float_t& x, Float_t& y); Search the TPaveClass object in the pad with label=classname; returns the x and y position of the center of the pave. void Init(); Initialize the data structures. void ls(Option_t* option = """") const; list classes names and titles. TObjString",MatchSource.WIKI,root/html532/TClassTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTree.html
https://root.cern/root/html532/TClassTree.html:12016,Modifiability,inherit,inheritance,12016,", the list of referenced(ing) classes; TStringTNamed::fNameobject identifier; Int_tfNclassescurrent number of classes; Int_t*fNdata[fNclasses] Number of data members per class; TString**fOptions![fNclasses] List of options per class; Int_t*fParents[fNclasses] parent number of classes (permanent); Int_tfShowCodif 1 show classes referenced by implementation; Int_tfShowHasif 1 show ""has a"" relationship; Int_tfShowMulif 1 show multiple inheritance; Int_tfShowRefif 1 show classes relationship other than inheritance; TStringfSourceDirConcatenated source directories; TStringTNamed::fTitleobject title; Float_tfYoffsetoffset at top of picture in per cent of pad. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TClassTree(); TClassTree default constructor. TClassTree(const char* name, const char* classes = """"); TClassTree constructor. ~TClassTree(); TClassTree default destructor. void Draw(const char* classes = """"); Draw the inheritance tree and relations for the list of classes; see this class header for the syntax and examples. Int_t FindClass(const char* classname); Find class number corresponding to classname in list of local classes. void FindClassesUsedBy(Int_t iclass); Select all classes used/referenced by the class number iclass. void FindClassesUsing(Int_t iclass); Select all classes using/referencing the class number iclass. void FindClassPosition(const char* classname, Float_t& x, Float_t& y); Search the TPaveClass object in the pad with label=classname; returns the x and y position of the center of the pave. void Init(); Initialize the data structures. void ls(Option_t* option = """") const; list classes names and titles. TObjString * Mark(const char* classname, TList* los, Int_t abit); set bit abit in class classname in list los. void Paint(Option_t* option = """"); Draw the current class setting in fClasses and fStatus. void PaintClass(Int_t iclass, Float_t xleft, Float_t y); Paint one class level. void SaveAs(const char* fil",MatchSource.WIKI,root/html532/TClassTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTree.html
https://root.cern/root/html532/TClassTree.html:13101,Modifiability,config,configuration,13101,"d examples. Int_t FindClass(const char* classname); Find class number corresponding to classname in list of local classes. void FindClassesUsedBy(Int_t iclass); Select all classes used/referenced by the class number iclass. void FindClassesUsing(Int_t iclass); Select all classes using/referencing the class number iclass. void FindClassPosition(const char* classname, Float_t& x, Float_t& y); Search the TPaveClass object in the pad with label=classname; returns the x and y position of the center of the pave. void Init(); Initialize the data structures. void ls(Option_t* option = """") const; list classes names and titles. TObjString * Mark(const char* classname, TList* los, Int_t abit); set bit abit in class classname in list los. void Paint(Option_t* option = """"); Draw the current class setting in fClasses and fStatus. void PaintClass(Int_t iclass, Float_t xleft, Float_t y); Paint one class level. void SaveAs(const char* filename = """", Option_t* option = """") const; save current configuration in a Root file; if filename is blank, the name of the file will be the current objectname.root; all the current settings are preserved; the Root file produced can be looked at by a another Root session; with no access to the original classes.; By default a message is printed. Specify option ""Q"" to remove the message. void ScanClasses(Int_t iclass); Select all classes used by/referenced/referencing the class number iclass; and build the list of these classes. void SetClasses(const char* classes, Option_t* option = ""ID""); Set the list of classes for which the hierarchy is to be drawn; See Paint for the syntax. void SetLabelDx(Float_t labeldx = 0.15); Set the size along x of the TPavellabel showing the class name. void SetYoffset(Float_t offset = 0); Set the offset at the top of the picture; The default offset is computed automatically taking into account; classes not inheriting from TObject. void ShowClassesUsedBy(const char* classes); mark classes used by the list of classes in class",MatchSource.WIKI,root/html532/TClassTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTree.html
https://root.cern/root/html532/TClassTree.html:13993,Modifiability,inherit,inheriting,13993,"and fStatus. void PaintClass(Int_t iclass, Float_t xleft, Float_t y); Paint one class level. void SaveAs(const char* filename = """", Option_t* option = """") const; save current configuration in a Root file; if filename is blank, the name of the file will be the current objectname.root; all the current settings are preserved; the Root file produced can be looked at by a another Root session; with no access to the original classes.; By default a message is printed. Specify option ""Q"" to remove the message. void ScanClasses(Int_t iclass); Select all classes used by/referenced/referencing the class number iclass; and build the list of these classes. void SetClasses(const char* classes, Option_t* option = ""ID""); Set the list of classes for which the hierarchy is to be drawn; See Paint for the syntax. void SetLabelDx(Float_t labeldx = 0.15); Set the size along x of the TPavellabel showing the class name. void SetYoffset(Float_t offset = 0); Set the offset at the top of the picture; The default offset is computed automatically taking into account; classes not inheriting from TObject. void ShowClassesUsedBy(const char* classes); mark classes used by the list of classes in classes. void ShowClassesUsing(const char* classes); mark classes using any class in the list of classes in classes. void ShowCod(); Draw the Code References relationships. void ShowHas(); Draw the ""Has a"" relationships. void ShowLinks(Option_t* option = ""HMR""); Set link options in the ClassTree object. ""C"" show References from code; ""H"" show Has a relations; ""M"" show Multiple Inheritance; ""R"" show References from data members. void ShowMul(); Draw the Multiple inheritance relationships. void ShowRef(); Draw the References relationships (other than inheritance or composition). void Streamer(TBuffer& b); Stream an object of class TClassTree.; the status of the object is saved and can be replayed in a subsequent session. TClassTree(). const char * GetClasses() const; {return fClasses.Data();}. const char * Get",MatchSource.WIKI,root/html532/TClassTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTree.html
https://root.cern/root/html532/TClassTree.html:14487,Modifiability,Inherit,Inheritance,14487,"fy option ""Q"" to remove the message. void ScanClasses(Int_t iclass); Select all classes used by/referenced/referencing the class number iclass; and build the list of these classes. void SetClasses(const char* classes, Option_t* option = ""ID""); Set the list of classes for which the hierarchy is to be drawn; See Paint for the syntax. void SetLabelDx(Float_t labeldx = 0.15); Set the size along x of the TPavellabel showing the class name. void SetYoffset(Float_t offset = 0); Set the offset at the top of the picture; The default offset is computed automatically taking into account; classes not inheriting from TObject. void ShowClassesUsedBy(const char* classes); mark classes used by the list of classes in classes. void ShowClassesUsing(const char* classes); mark classes using any class in the list of classes in classes. void ShowCod(); Draw the Code References relationships. void ShowHas(); Draw the ""Has a"" relationships. void ShowLinks(Option_t* option = ""HMR""); Set link options in the ClassTree object. ""C"" show References from code; ""H"" show Has a relations; ""M"" show Multiple Inheritance; ""R"" show References from data members. void ShowMul(); Draw the Multiple inheritance relationships. void ShowRef(); Draw the References relationships (other than inheritance or composition). void Streamer(TBuffer& b); Stream an object of class TClassTree.; the status of the object is saved and can be replayed in a subsequent session. TClassTree(). const char * GetClasses() const; {return fClasses.Data();}. const char * GetSourceDir() const; {return fSourceDir.Data();}. void SetSourceDir(const char* dir = ""src""); {fSourceDir = dir;}. » Author: Rene Brun 01/12/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gpad:$Id: TClassTree.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TClassTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTree.html
https://root.cern/root/html532/TClassTree.html:14573,Modifiability,inherit,inheritance,14573,"fy option ""Q"" to remove the message. void ScanClasses(Int_t iclass); Select all classes used by/referenced/referencing the class number iclass; and build the list of these classes. void SetClasses(const char* classes, Option_t* option = ""ID""); Set the list of classes for which the hierarchy is to be drawn; See Paint for the syntax. void SetLabelDx(Float_t labeldx = 0.15); Set the size along x of the TPavellabel showing the class name. void SetYoffset(Float_t offset = 0); Set the offset at the top of the picture; The default offset is computed automatically taking into account; classes not inheriting from TObject. void ShowClassesUsedBy(const char* classes); mark classes used by the list of classes in classes. void ShowClassesUsing(const char* classes); mark classes using any class in the list of classes in classes. void ShowCod(); Draw the Code References relationships. void ShowHas(); Draw the ""Has a"" relationships. void ShowLinks(Option_t* option = ""HMR""); Set link options in the ClassTree object. ""C"" show References from code; ""H"" show Has a relations; ""M"" show Multiple Inheritance; ""R"" show References from data members. void ShowMul(); Draw the Multiple inheritance relationships. void ShowRef(); Draw the References relationships (other than inheritance or composition). void Streamer(TBuffer& b); Stream an object of class TClassTree.; the status of the object is saved and can be replayed in a subsequent session. TClassTree(). const char * GetClasses() const; {return fClasses.Data();}. const char * GetSourceDir() const; {return fSourceDir.Data();}. void SetSourceDir(const char* dir = ""src""); {fSourceDir = dir;}. » Author: Rene Brun 01/12/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gpad:$Id: TClassTree.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TClassTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTree.html
https://root.cern/root/html532/TClassTree.html:14662,Modifiability,inherit,inheritance,14662,"fy option ""Q"" to remove the message. void ScanClasses(Int_t iclass); Select all classes used by/referenced/referencing the class number iclass; and build the list of these classes. void SetClasses(const char* classes, Option_t* option = ""ID""); Set the list of classes for which the hierarchy is to be drawn; See Paint for the syntax. void SetLabelDx(Float_t labeldx = 0.15); Set the size along x of the TPavellabel showing the class name. void SetYoffset(Float_t offset = 0); Set the offset at the top of the picture; The default offset is computed automatically taking into account; classes not inheriting from TObject. void ShowClassesUsedBy(const char* classes); mark classes used by the list of classes in classes. void ShowClassesUsing(const char* classes); mark classes using any class in the list of classes in classes. void ShowCod(); Draw the Code References relationships. void ShowHas(); Draw the ""Has a"" relationships. void ShowLinks(Option_t* option = ""HMR""); Set link options in the ClassTree object. ""C"" show References from code; ""H"" show Has a relations; ""M"" show Multiple Inheritance; ""R"" show References from data members. void ShowMul(); Draw the Multiple inheritance relationships. void ShowRef(); Draw the References relationships (other than inheritance or composition). void Streamer(TBuffer& b); Stream an object of class TClassTree.; the status of the object is saved and can be replayed in a subsequent session. TClassTree(). const char * GetClasses() const; {return fClasses.Data();}. const char * GetSourceDir() const; {return fSourceDir.Data();}. void SetSourceDir(const char* dir = ""src""); {fSourceDir = dir;}. » Author: Rene Brun 01/12/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gpad:$Id: TClassTree.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TClassTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTree.html
https://root.cern/root/html532/TClassTree.html:4482,Security,access,access,4482,"ry and the subdirectory src. The first time TClassTree::Draw is invoked, all the classes in the; current application are processed, including the parsing of the code; to find all classes referenced by the include statements.; This process may take a few seconds. The following commands will be; much faster. A TClassTree object may be saved in a Root file.; This object can be processed later by a Root program that ignores; the original classes. This interesting possibility allows to send; the class structure of an application to a colleague who does not have; your classes.; Example:; TFile f(""myClasses.root"",""recreate""); TClassTree *ct = new TClassTree(""ct"",""ATLF*""); ct->Write();; You can send at this point the file myClass.root to a colleague who can; run the following Root basic session; TFile f(""myClass.root""); //connect the file; tt.ls(); //to list all classes and titles; tt.Draw(""ATLFDisplay"") //show class ATLFDisplay with all its dependencies; At this point, one has still access to all the classes present; in the original session and select any combination of these classes; to be displayed. Function Members (Methods); public:. TClassTree(); TClassTree(const TClassTree&); TClassTree(const char* name, const char* classes = """"); virtual~TClassTree(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(const char* classes = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voi",MatchSource.WIKI,root/html532/TClassTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTree.html
https://root.cern/root/html532/TClassTree.html:6688,Security,Hash,Hash,6688," voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual Int_tFindClass(const char* classname); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetClasses() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*GetSourceDir() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t",MatchSource.WIKI,root/html532/TClassTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTree.html
https://root.cern/root/html532/TClassTree.html:13326,Security,access,access,13326,"l classes used/referenced by the class number iclass. void FindClassesUsing(Int_t iclass); Select all classes using/referencing the class number iclass. void FindClassPosition(const char* classname, Float_t& x, Float_t& y); Search the TPaveClass object in the pad with label=classname; returns the x and y position of the center of the pave. void Init(); Initialize the data structures. void ls(Option_t* option = """") const; list classes names and titles. TObjString * Mark(const char* classname, TList* los, Int_t abit); set bit abit in class classname in list los. void Paint(Option_t* option = """"); Draw the current class setting in fClasses and fStatus. void PaintClass(Int_t iclass, Float_t xleft, Float_t y); Paint one class level. void SaveAs(const char* filename = """", Option_t* option = """") const; save current configuration in a Root file; if filename is blank, the name of the file will be the current objectname.root; all the current settings are preserved; the Root file produced can be looked at by a another Root session; with no access to the original classes.; By default a message is printed. Specify option ""Q"" to remove the message. void ScanClasses(Int_t iclass); Select all classes used by/referenced/referencing the class number iclass; and build the list of these classes. void SetClasses(const char* classes, Option_t* option = ""ID""); Set the list of classes for which the hierarchy is to be drawn; See Paint for the syntax. void SetLabelDx(Float_t labeldx = 0.15); Set the size along x of the TPavellabel showing the class name. void SetYoffset(Float_t offset = 0); Set the offset at the top of the picture; The default offset is computed automatically taking into account; classes not inheriting from TObject. void ShowClassesUsedBy(const char* classes); mark classes used by the list of classes in classes. void ShowClassesUsing(const char* classes); mark classes using any class in the list of classes in classes. void ShowCod(); Draw the Code References relationships. v",MatchSource.WIKI,root/html532/TClassTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTree.html
https://root.cern/root/html532/TClassTree.html:9354,Testability,Test,TestBit,9354,"SaveAs(const char* filename = """", Option_t* option = """") const; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetClasses(const char* classes, Option_t* option = ""ID""); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetLabelDx(Float_t labeldx = 0.15); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetSourceDir(const char* dir = ""src""); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetYoffset(Float_t offset = 0); virtual voidShowClassesUsedBy(const char* classes); virtual voidShowClassesUsing(const char* classes); virtual voidShowLinks(Option_t* option = ""HMR""); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidFindClassesUsedBy(Int_t iclass); virtual voidFindClassesUsing(Int_t iclass); virtual voidFindClassPosition(const char* classname, Float_t& x, Float_t& y); virtual voidInit(); voidTObject::MakeZombie(); TObjString*Mark(const char* classname, TList* los, Int_t abit); virtual voidPaintClass(Int_t iclass, Float_",MatchSource.WIKI,root/html532/TClassTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTree.html
https://root.cern/root/html532/TClassTree.html:9393,Testability,Test,TestBits,9393,"SaveAs(const char* filename = """", Option_t* option = """") const; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetClasses(const char* classes, Option_t* option = ""ID""); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetLabelDx(Float_t labeldx = 0.15); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetSourceDir(const char* dir = ""src""); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetYoffset(Float_t offset = 0); virtual voidShowClassesUsedBy(const char* classes); virtual voidShowClassesUsing(const char* classes); virtual voidShowLinks(Option_t* option = ""HMR""); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidFindClassesUsedBy(Int_t iclass); virtual voidFindClassesUsing(Int_t iclass); virtual voidFindClassPosition(const char* classname, Float_t& x, Float_t& y); virtual voidInit(); voidTObject::MakeZombie(); TObjString*Mark(const char* classname, TList* los, Int_t abit); virtual voidPaintClass(Int_t iclass, Float_",MatchSource.WIKI,root/html532/TClassTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTree.html
https://root.cern/root/html532/TClassTree.html:5005,Usability,Clear,Clear,5005,,MatchSource.WIKI,root/html532/TClassTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClassTree.html
https://root.cern/root/html532/TClonesArray.html:2142,Availability,error,error,2142,",y,z,...);. }. a.Delete(); // or a.Clear() or a.Clear(""C""); }. To reduce the number of call to the constructor (especially useful; if the user class requires memory allocation), the object can be; added (and constructed when needed) using ConstructedAt which only; calls the constructor once per slot. TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; TTrack *track = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);. }. a.Clear(); // or a.Clear(""C"");; }. Note: the only supported way to add objects to a TClonesArray is; via the new with placement method or the ConstructedAt method.; The other Add() methods ofTObjArray and its base classes are not; allowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save about 19 hours. NOTE 1. C/C++ offers the possibility of allocating and deleting memory.; Forgetting to delete allocated memory is a programming error called a; ""memory leak"", i.e. the memory of your process grows and eventually; your program crashes. Even if you *always* delete the allocated; memory, the recovered space may not be efficiently reused. The; process knows that there are portions of free memory, but when you; allocate it again, a fresh piece of memory is grabbed. Your program; is free from semantic errors, but the total memory of your process; still grows, because your program's memory is full of ""holes"" which; reduce the efficiency of memory access; this is called ""memory; fragmentation"". Moreover new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClones",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:2304,Availability,recover,recovered,2304,"cation), the object can be; added (and constructed when needed) using ConstructedAt which only; calls the constructor once per slot. TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; TTrack *track = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);. }. a.Clear(); // or a.Clear(""C"");; }. Note: the only supported way to add objects to a TClonesArray is; via the new with placement method or the ConstructedAt method.; The other Add() methods ofTObjArray and its base classes are not; allowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save about 19 hours. NOTE 1. C/C++ offers the possibility of allocating and deleting memory.; Forgetting to delete allocated memory is a programming error called a; ""memory leak"", i.e. the memory of your process grows and eventually; your program crashes. Even if you *always* delete the allocated; memory, the recovered space may not be efficiently reused. The; process knows that there are portions of free memory, but when you; allocate it again, a fresh piece of memory is grabbed. Your program; is free from semantic errors, but the total memory of your process; still grows, because your program's memory is full of ""holes"" which; reduce the efficiency of memory access; this is called ""memory; fragmentation"". Moreover new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; wh",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:2515,Availability,error,errors,2515," *track = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);. }. a.Clear(); // or a.Clear(""C"");; }. Note: the only supported way to add objects to a TClonesArray is; via the new with placement method or the ConstructedAt method.; The other Add() methods ofTObjArray and its base classes are not; allowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save about 19 hours. NOTE 1. C/C++ offers the possibility of allocating and deleting memory.; Forgetting to delete allocated memory is a programming error called a; ""memory leak"", i.e. the memory of your process grows and eventually; your program crashes. Even if you *always* delete the allocated; memory, the recovered space may not be efficiently reused. The; process knows that there are portions of free memory, but when you; allocate it again, a fresh piece of memory is grabbed. Your program; is free from semantic errors, but the total memory of your process; still grows, because your program's memory is full of ""holes"" which; reduce the efficiency of memory access; this is called ""memory; fragmentation"". Moreover new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; which should be Clear()ed during the job several times. Deleting a; TClonesArray is a double waste. Not only you do not avoid memory; fragmentation, but you worsen it because the TClonesArray itself; is a rather heavy structure, and there is quite some code in the; destructor, so you have more me",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:6701,Availability,Error,Error,6701,"er(Bool_t bypass = kTRUE); Bool_tCanBypassStreamer() const; Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; virtual voidCompress(); TObject*ConstructedAt(Int_t idx); TObject*ConstructedAt(Int_t idx, Option_t* clear_options); Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDelete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExpand(Int_t newSize); virtual voidExpandCreate(Int_t n); virtual voidExpandCreateFast(Int_t n); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObjArray::FindObject(const char* name) const; virtual TObject*TObjArray::FindObject(const TObject* obj) const; virtual TObject*TObjArray::First() const; static voidTCollection::GarbageCollect(TObject* obj); TClass*GetClass() const; static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTObjArray::GetEntries() const; Int_tTObjArray::GetEntriesFast() const; virtual const char*TObject::GetIconName() const; vir",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:6830,Availability,error,error,6830,"nst char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; virtual voidCompress(); TObject*ConstructedAt(Int_t idx); TObject*ConstructedAt(Int_t idx, Option_t* clear_options); Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDelete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExpand(Int_t newSize); virtual voidExpandCreate(Int_t n); virtual voidExpandCreateFast(Int_t n); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObjArray::FindObject(const char* name) const; virtual TObject*TObjArray::FindObject(const TObject* obj) const; virtual TObject*TObjArray::First() const; static voidTCollection::GarbageCollect(TObject* obj); TClass*GetClass() const; static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTObjArray::GetEntries() const; Int_tTObjArray::GetEntriesFast() const; virtual const char*TObject::GetIconName() const; virtual Int_tTObjArray::GetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t ",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:6914,Availability,error,error,6914,"al TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; virtual voidCompress(); TObject*ConstructedAt(Int_t idx); TObject*ConstructedAt(Int_t idx, Option_t* clear_options); Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDelete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExpand(Int_t newSize); virtual voidExpandCreate(Int_t n); virtual voidExpandCreateFast(Int_t n); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObjArray::FindObject(const char* name) const; virtual TObject*TObjArray::FindObject(const TObject* obj) const; virtual TObject*TObjArray::First() const; static voidTCollection::GarbageCollect(TObject* obj); TClass*GetClass() const; static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTObjArray::GetEntries() const; Int_tTObjArray::GetEntriesFast() const; virtual const char*TObject::GetIconName() const; virtual Int_tTObjArray::GetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; TObject**TObjArray::GetObjectRef() const; virtual TObject**TObj",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:23279,Availability,error,error,23279,"nt_t upto = kMaxInt); If objects in array are sortable (i.e. IsSortable() returns true; for all objects) then sort array. void Streamer(TBuffer& b); Write all objects in array to the I/O buffer. ATTENTION: empty slots; are also stored (using one byte per slot). If you don't want this; use a TOrdCollection or TList. TObject *& operator[](Int_t idx); Return pointer to reserved area in which a new object of clones; class can be constructed. This operator should not be used for; lefthand side assignments, like a[2] = xxx. Only like,; new (a[2]) myClass, or xxx = a[2]. Of course right hand side usage; is only legal after the object has been constructed via the; new operator or via the New() method. To remove elements from; the clones array use Remove() or RemoveAt(). TObject * operator[](Int_t idx) const; Return the object at position idx. Returns 0 if idx is out of bounds. TObject * New(Int_t idx); Create an object of type fClass with the default ctor at the specified; index. Returns 0 in case of error. void AbsorbObjects(TClonesArray* tc); Directly move the object pointers from tc without cloning (copying).; This TClonesArray takes over ownership of all of tc's object; pointers. The tc array is left empty upon return. void AbsorbObjects(TClonesArray* tc, Int_t idx1, Int_t idx2); Directly move the rang of object pointers from tc without cloning; (copying).; This TClonesArray takes over ownership of all of tc's object pointers; from idx1 to idx2. The tc array is re-arranged by return. void MultiSort(Int_t nTCs, TClonesArray** tcs, Int_t upto = kMaxInt); Sort multiple TClonesArrays simultaneously with this array.; If objects in array are sortable (i.e. IsSortable() returns true; for all objects) then sort array. TObject * AddrAt(Int_t idx). TClass * GetClass() const; { return fClass; }. void AddFirst(TObject* ); { MayNotUse(""AddFirst""); }. void AddLast(TObject* ); { MayNotUse(""AddLast""); }. void AddAt(TObject* , Int_t ); { MayNotUse(""AddAt""); }. void AddAtAndExpand(TObjec",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:385,Energy Efficiency,allocate,allocated,385,". TClonesArray. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TClonesArray. class TClonesArray: public TObjArray. An array of clone (identical) objects. Memory for the objects; stored in the array is allocated only once in the lifetime of the; clones array. All objects must be of the same class. For the rest; this class has the same properties as TObjArray. To reduce the very large number of new and delete calls in large; loops like this (O(100000) x O(10000) times new/delete):. TObjArray a(10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; a[i] = new TTrack(x,y,z,...);. }. a.Delete();; }. One better uses a TClonesArray which reduces the number of; new/delete calls to only O(10000):. TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; new(a[i]) TTrack(x,y,z,...);. }. a.Delete(); // or a.Clear() or a.Clear(""C""); }. To reduce the number of call to the constructor (especially useful; if the user class requires memory allocation), the object can be; added (and constructed when needed) using ConstructedAt which only; calls the constructor once per slot. TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; TTrack *track = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);. }. a.Clear(); // or a.Clear(""C"");; }. Note: the only supported way to add objects to a TClonesArray is; via the new with placement method or the ConstructedAt method.; The other Add() methods ofTObjArray and its base classes are not; allowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save abo",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:548,Energy Efficiency,reduce,reduce,548,". TClonesArray. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TClonesArray. class TClonesArray: public TObjArray. An array of clone (identical) objects. Memory for the objects; stored in the array is allocated only once in the lifetime of the; clones array. All objects must be of the same class. For the rest; this class has the same properties as TObjArray. To reduce the very large number of new and delete calls in large; loops like this (O(100000) x O(10000) times new/delete):. TObjArray a(10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; a[i] = new TTrack(x,y,z,...);. }. a.Delete();; }. One better uses a TClonesArray which reduces the number of; new/delete calls to only O(10000):. TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; new(a[i]) TTrack(x,y,z,...);. }. a.Delete(); // or a.Clear() or a.Clear(""C""); }. To reduce the number of call to the constructor (especially useful; if the user class requires memory allocation), the object can be; added (and constructed when needed) using ConstructedAt which only; calls the constructor once per slot. TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; TTrack *track = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);. }. a.Clear(); // or a.Clear(""C"");; }. Note: the only supported way to add objects to a TClonesArray is; via the new with placement method or the ConstructedAt method.; The other Add() methods ofTObjArray and its base classes are not; allowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save abo",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:898,Energy Efficiency,reduce,reduces,898,". TClonesArray. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TClonesArray. class TClonesArray: public TObjArray. An array of clone (identical) objects. Memory for the objects; stored in the array is allocated only once in the lifetime of the; clones array. All objects must be of the same class. For the rest; this class has the same properties as TObjArray. To reduce the very large number of new and delete calls in large; loops like this (O(100000) x O(10000) times new/delete):. TObjArray a(10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; a[i] = new TTrack(x,y,z,...);. }. a.Delete();; }. One better uses a TClonesArray which reduces the number of; new/delete calls to only O(10000):. TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; new(a[i]) TTrack(x,y,z,...);. }. a.Delete(); // or a.Clear() or a.Clear(""C""); }. To reduce the number of call to the constructor (especially useful; if the user class requires memory allocation), the object can be; added (and constructed when needed) using ConstructedAt which only; calls the constructor once per slot. TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; TTrack *track = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);. }. a.Clear(); // or a.Clear(""C"");; }. Note: the only supported way to add objects to a TClonesArray is; via the new with placement method or the ConstructedAt method.; The other Add() methods ofTObjArray and its base classes are not; allowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save abo",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:1196,Energy Efficiency,reduce,reduce,1196,"clone (identical) objects. Memory for the objects; stored in the array is allocated only once in the lifetime of the; clones array. All objects must be of the same class. For the rest; this class has the same properties as TObjArray. To reduce the very large number of new and delete calls in large; loops like this (O(100000) x O(10000) times new/delete):. TObjArray a(10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; a[i] = new TTrack(x,y,z,...);. }. a.Delete();; }. One better uses a TClonesArray which reduces the number of; new/delete calls to only O(10000):. TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; new(a[i]) TTrack(x,y,z,...);. }. a.Delete(); // or a.Clear() or a.Clear(""C""); }. To reduce the number of call to the constructor (especially useful; if the user class requires memory allocation), the object can be; added (and constructed when needed) using ConstructedAt which only; calls the constructor once per slot. TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; TTrack *track = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);. }. a.Clear(); // or a.Clear(""C"");; }. Note: the only supported way to add objects to a TClonesArray is; via the new with placement method or the ConstructedAt method.; The other Add() methods ofTObjArray and its base classes are not; allowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save about 19 hours. NOTE 1. C/C++ offers the possibility of allocating and deleting memory.; Forgetting to delete allocated memory is a programming error called a; ""memory leak"", i.e. the memory of your process grows and eventually; your program crashes. Even if you *always* delete the allocated; memory, the recovere",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:2108,Energy Efficiency,allocate,allocated,2108,",y,z,...);. }. a.Delete(); // or a.Clear() or a.Clear(""C""); }. To reduce the number of call to the constructor (especially useful; if the user class requires memory allocation), the object can be; added (and constructed when needed) using ConstructedAt which only; calls the constructor once per slot. TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; TTrack *track = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);. }. a.Clear(); // or a.Clear(""C"");; }. Note: the only supported way to add objects to a TClonesArray is; via the new with placement method or the ConstructedAt method.; The other Add() methods ofTObjArray and its base classes are not; allowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save about 19 hours. NOTE 1. C/C++ offers the possibility of allocating and deleting memory.; Forgetting to delete allocated memory is a programming error called a; ""memory leak"", i.e. the memory of your process grows and eventually; your program crashes. Even if you *always* delete the allocated; memory, the recovered space may not be efficiently reused. The; process knows that there are portions of free memory, but when you; allocate it again, a fresh piece of memory is grabbed. Your program; is free from semantic errors, but the total memory of your process; still grows, because your program's memory is full of ""holes"" which; reduce the efficiency of memory access; this is called ""memory; fragmentation"". Moreover new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClones",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:2281,Energy Efficiency,allocate,allocated,2281,"cation), the object can be; added (and constructed when needed) using ConstructedAt which only; calls the constructor once per slot. TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; TTrack *track = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);. }. a.Clear(); // or a.Clear(""C"");; }. Note: the only supported way to add objects to a TClonesArray is; via the new with placement method or the ConstructedAt method.; The other Add() methods ofTObjArray and its base classes are not; allowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save about 19 hours. NOTE 1. C/C++ offers the possibility of allocating and deleting memory.; Forgetting to delete allocated memory is a programming error called a; ""memory leak"", i.e. the memory of your process grows and eventually; your program crashes. Even if you *always* delete the allocated; memory, the recovered space may not be efficiently reused. The; process knows that there are portions of free memory, but when you; allocate it again, a fresh piece of memory is grabbed. Your program; is free from semantic errors, but the total memory of your process; still grows, because your program's memory is full of ""holes"" which; reduce the efficiency of memory access; this is called ""memory; fragmentation"". Moreover new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; wh",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:2331,Energy Efficiency,efficient,efficiently,2331,"cation), the object can be; added (and constructed when needed) using ConstructedAt which only; calls the constructor once per slot. TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; TTrack *track = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);. }. a.Clear(); // or a.Clear(""C"");; }. Note: the only supported way to add objects to a TClonesArray is; via the new with placement method or the ConstructedAt method.; The other Add() methods ofTObjArray and its base classes are not; allowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save about 19 hours. NOTE 1. C/C++ offers the possibility of allocating and deleting memory.; Forgetting to delete allocated memory is a programming error called a; ""memory leak"", i.e. the memory of your process grows and eventually; your program crashes. Even if you *always* delete the allocated; memory, the recovered space may not be efficiently reused. The; process knows that there are portions of free memory, but when you; allocate it again, a fresh piece of memory is grabbed. Your program; is free from semantic errors, but the total memory of your process; still grows, because your program's memory is full of ""holes"" which; reduce the efficiency of memory access; this is called ""memory; fragmentation"". Moreover new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; wh",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:2424,Energy Efficiency,allocate,allocate,2424,"or once per slot. TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; TTrack *track = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);. }. a.Clear(); // or a.Clear(""C"");; }. Note: the only supported way to add objects to a TClonesArray is; via the new with placement method or the ConstructedAt method.; The other Add() methods ofTObjArray and its base classes are not; allowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save about 19 hours. NOTE 1. C/C++ offers the possibility of allocating and deleting memory.; Forgetting to delete allocated memory is a programming error called a; ""memory leak"", i.e. the memory of your process grows and eventually; your program crashes. Even if you *always* delete the allocated; memory, the recovered space may not be efficiently reused. The; process knows that there are portions of free memory, but when you; allocate it again, a fresh piece of memory is grabbed. Your program; is free from semantic errors, but the total memory of your process; still grows, because your program's memory is full of ""holes"" which; reduce the efficiency of memory access; this is called ""memory; fragmentation"". Moreover new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; which should be Clear()ed during the job several times. Deleting a; TClonesArray is a double waste. Not only you do n",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:2630,Energy Efficiency,reduce,reduce,2630," *track = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);. }. a.Clear(); // or a.Clear(""C"");; }. Note: the only supported way to add objects to a TClonesArray is; via the new with placement method or the ConstructedAt method.; The other Add() methods ofTObjArray and its base classes are not; allowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save about 19 hours. NOTE 1. C/C++ offers the possibility of allocating and deleting memory.; Forgetting to delete allocated memory is a programming error called a; ""memory leak"", i.e. the memory of your process grows and eventually; your program crashes. Even if you *always* delete the allocated; memory, the recovered space may not be efficiently reused. The; process knows that there are portions of free memory, but when you; allocate it again, a fresh piece of memory is grabbed. Your program; is free from semantic errors, but the total memory of your process; still grows, because your program's memory is full of ""holes"" which; reduce the efficiency of memory access; this is called ""memory; fragmentation"". Moreover new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; which should be Clear()ed during the job several times. Deleting a; TClonesArray is a double waste. Not only you do not avoid memory; fragmentation, but you worsen it because the TClonesArray itself; is a rather heavy structure, and there is quite some code in the; destructor, so you have more me",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:3144,Energy Efficiency,allocate,allocated,3144,"mory leak"", i.e. the memory of your process grows and eventually; your program crashes. Even if you *always* delete the allocated; memory, the recovered space may not be efficiently reused. The; process knows that there are portions of free memory, but when you; allocate it again, a fresh piece of memory is grabbed. Your program; is free from semantic errors, but the total memory of your process; still grows, because your program's memory is full of ""holes"" which; reduce the efficiency of memory access; this is called ""memory; fragmentation"". Moreover new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; which should be Clear()ed during the job several times. Deleting a; TClonesArray is a double waste. Not only you do not avoid memory; fragmentation, but you worsen it because the TClonesArray itself; is a rather heavy structure, and there is quite some code in the; destructor, so you have more memory fragmentation and slower code. NOTE 2. When investigating misuse of TClonesArray, please make sure of the following:. * Use Clear() or Clear(""C"") instead of Delete(). This will improve; program execution time.; * TClonesArray object classes containing pointers allocate memory.; To avoid causing memory leaks, special Clear(""C"") must be used; for clearing TClonesArray. When option ""C"" is specified, ROOT; automatically executes the Clear() method (by default it is; empty contained in TObject). This method must be overridden in; the relevant TClonesArray object",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:3860,Energy Efficiency,allocate,allocate,3860,"ou to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; which should be Clear()ed during the job several times. Deleting a; TClonesArray is a double waste. Not only you do not avoid memory; fragmentation, but you worsen it because the TClonesArray itself; is a rather heavy structure, and there is quite some code in the; destructor, so you have more memory fragmentation and slower code. NOTE 2. When investigating misuse of TClonesArray, please make sure of the following:. * Use Clear() or Clear(""C"") instead of Delete(). This will improve; program execution time.; * TClonesArray object classes containing pointers allocate memory.; To avoid causing memory leaks, special Clear(""C"") must be used; for clearing TClonesArray. When option ""C"" is specified, ROOT; automatically executes the Clear() method (by default it is; empty contained in TObject). This method must be overridden in; the relevant TClonesArray object class, implementing the reset; procedure for pointer objects.; * To reduce memory fragmentation, please make sure that the; TClonesArrays are not destroyed and created on every event. They; must only be constructed/destructed at the beginning/end of the; run. Function Members (Methods); public:. TClonesArray(); TClonesArray(const TClonesArray& tc); TClonesArray(const char* classname, Int_t size = 1000, Bool_t call_dtor = kFALSE); TClonesArray(const TClass* cl, Int_t size = 1000, Bool_t call_dtor = kFALSE); virtual~TClonesArray(); voidAbsorbObjects(TClonesArray* tc); voidAbsorbObjects(TClonesArray* tc, Int_t idx1, Int_t idx2); voidTObject::AbstractMethod(const char* metho",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:4231,Energy Efficiency,reduce,reduce,4231,"onesArray,; which should be Clear()ed during the job several times. Deleting a; TClonesArray is a double waste. Not only you do not avoid memory; fragmentation, but you worsen it because the TClonesArray itself; is a rather heavy structure, and there is quite some code in the; destructor, so you have more memory fragmentation and slower code. NOTE 2. When investigating misuse of TClonesArray, please make sure of the following:. * Use Clear() or Clear(""C"") instead of Delete(). This will improve; program execution time.; * TClonesArray object classes containing pointers allocate memory.; To avoid causing memory leaks, special Clear(""C"") must be used; for clearing TClonesArray. When option ""C"" is specified, ROOT; automatically executes the Clear() method (by default it is; empty contained in TObject). This method must be overridden in; the relevant TClonesArray object class, implementing the reset; procedure for pointer objects.; * To reduce memory fragmentation, please make sure that the; TClonesArrays are not destroyed and created on every event. They; must only be constructed/destructed at the beginning/end of the; run. Function Members (Methods); public:. TClonesArray(); TClonesArray(const TClonesArray& tc); TClonesArray(const char* classname, Int_t size = 1000, Bool_t call_dtor = kFALSE); TClonesArray(const TClass* cl, Int_t size = 1000, Bool_t call_dtor = kFALSE); virtual~TClonesArray(); voidAbsorbObjects(TClonesArray* tc); voidAbsorbObjects(TClonesArray* tc, Int_t idx1, Int_t idx2); voidTObject::AbstractMethod(const char* method) const; virtual voidTObjArray::Add(TObject* obj); virtual voidAddAfter(const TObject*, TObject*); virtual voidTCollection::AddAll(const TCollection* col); virtual voidAddAt(TObject*, Int_t); virtual voidAddAtAndExpand(TObject*, Int_t); virtual Int_tAddAtFree(TObject*); virtual voidAddBefore(const TObject*, TObject*); virtual voidAddFirst(TObject*); virtual voidAddLast(TObject*); TObject*AddrAt(Int_t idx); voidTCollection::AddVector(TObje",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:17930,Energy Efficiency,allocate,allocated,17930,"ptimized mode in such a way that data members of the same type; are written as an array improving the I/O performance.; 3- In a new program, T1 is read and a new Tree T2 is created; with the object Foo in split>1; 4- When the T2 branch is created, the StreamerInfo for the class Bar; is created with no optimization (mandatory for the split mode).; The optimized Bar StreamerInfo is going to be used to read; the TClonesArray in T1. The result will be Bar objects with; data member values not in the right sequence.; The solution to this problem is to call BypassStreamer(kFALSE); for the TClonesArray. In this case, the normal Bar::Streamer function; will be called. The Bar::Streamer function works OK independently; if the Bar StreamerInfo had been generated in optimized mode or not. void Compress(); Remove empty slots from array. TObject * ConstructedAt(Int_t idx); Get an object at index 'idx' that is guaranteed to have been constructed.; It might be either a freshly allocated object or one that had already been; allocated (and assumingly used). In the later case, it is the callers; responsability to insure that the object is returned to a known state,; usually by calling the Clear method on the TClonesArray. Tests to see if the destructor has been called on the object.; If so, or if the object has never been constructed the class constructor is called using; New(). If not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. TObject * ConstructedAt(Int_t idx, Option_t* clear_options); Get an object at index 'idx' that is guaranteed to have been constructed.; It might be either a freshly allocated object or one that had already been; allocated (and assumingly used). In the later case, the function Clear; will be called and passed the value of 'clear_options'. Tests to see if the destructor has been called on the object.; If so, or if the o",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:17977,Energy Efficiency,allocate,allocated,17977,"ptimized mode in such a way that data members of the same type; are written as an array improving the I/O performance.; 3- In a new program, T1 is read and a new Tree T2 is created; with the object Foo in split>1; 4- When the T2 branch is created, the StreamerInfo for the class Bar; is created with no optimization (mandatory for the split mode).; The optimized Bar StreamerInfo is going to be used to read; the TClonesArray in T1. The result will be Bar objects with; data member values not in the right sequence.; The solution to this problem is to call BypassStreamer(kFALSE); for the TClonesArray. In this case, the normal Bar::Streamer function; will be called. The Bar::Streamer function works OK independently; if the Bar StreamerInfo had been generated in optimized mode or not. void Compress(); Remove empty slots from array. TObject * ConstructedAt(Int_t idx); Get an object at index 'idx' that is guaranteed to have been constructed.; It might be either a freshly allocated object or one that had already been; allocated (and assumingly used). In the later case, it is the callers; responsability to insure that the object is returned to a known state,; usually by calling the Clear method on the TClonesArray. Tests to see if the destructor has been called on the object.; If so, or if the object has never been constructed the class constructor is called using; New(). If not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. TObject * ConstructedAt(Int_t idx, Option_t* clear_options); Get an object at index 'idx' that is guaranteed to have been constructed.; It might be either a freshly allocated object or one that had already been; allocated (and assumingly used). In the later case, the function Clear; will be called and passed the value of 'clear_options'. Tests to see if the destructor has been called on the object.; If so, or if the o",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:18445,Energy Efficiency,allocate,allocate,18445,"quence.; The solution to this problem is to call BypassStreamer(kFALSE); for the TClonesArray. In this case, the normal Bar::Streamer function; will be called. The Bar::Streamer function works OK independently; if the Bar StreamerInfo had been generated in optimized mode or not. void Compress(); Remove empty slots from array. TObject * ConstructedAt(Int_t idx); Get an object at index 'idx' that is guaranteed to have been constructed.; It might be either a freshly allocated object or one that had already been; allocated (and assumingly used). In the later case, it is the callers; responsability to insure that the object is returned to a known state,; usually by calling the Clear method on the TClonesArray. Tests to see if the destructor has been called on the object.; If so, or if the object has never been constructed the class constructor is called using; New(). If not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. TObject * ConstructedAt(Int_t idx, Option_t* clear_options); Get an object at index 'idx' that is guaranteed to have been constructed.; It might be either a freshly allocated object or one that had already been; allocated (and assumingly used). In the later case, the function Clear; will be called and passed the value of 'clear_options'. Tests to see if the destructor has been called on the object.; If so, or if the object has never been constructed the class constructor is called using; New(). If not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. void Clear(Option_t* option = """"); Clear the clones array. Only use this routine when your objects don't; allocate memory since it will not call the object dtors.; However, if the class in the TClonesArray implements the function; Cle",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:18698,Energy Efficiency,allocate,allocated,18698,"imized mode or not. void Compress(); Remove empty slots from array. TObject * ConstructedAt(Int_t idx); Get an object at index 'idx' that is guaranteed to have been constructed.; It might be either a freshly allocated object or one that had already been; allocated (and assumingly used). In the later case, it is the callers; responsability to insure that the object is returned to a known state,; usually by calling the Clear method on the TClonesArray. Tests to see if the destructor has been called on the object.; If so, or if the object has never been constructed the class constructor is called using; New(). If not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. TObject * ConstructedAt(Int_t idx, Option_t* clear_options); Get an object at index 'idx' that is guaranteed to have been constructed.; It might be either a freshly allocated object or one that had already been; allocated (and assumingly used). In the later case, the function Clear; will be called and passed the value of 'clear_options'. Tests to see if the destructor has been called on the object.; If so, or if the object has never been constructed the class constructor is called using; New(). If not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. void Clear(Option_t* option = """"); Clear the clones array. Only use this routine when your objects don't; allocate memory since it will not call the object dtors.; However, if the class in the TClonesArray implements the function; Clear(Option_t *option) and if option = ""C"" the function Clear(); is called for all objects in the array. In the function Clear(), one; can delete objects or dynamic arrays allocated in the class.; This procedure is much faster than calling TClonesArray::Delete(",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:18745,Energy Efficiency,allocate,allocated,18745,"imized mode or not. void Compress(); Remove empty slots from array. TObject * ConstructedAt(Int_t idx); Get an object at index 'idx' that is guaranteed to have been constructed.; It might be either a freshly allocated object or one that had already been; allocated (and assumingly used). In the later case, it is the callers; responsability to insure that the object is returned to a known state,; usually by calling the Clear method on the TClonesArray. Tests to see if the destructor has been called on the object.; If so, or if the object has never been constructed the class constructor is called using; New(). If not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. TObject * ConstructedAt(Int_t idx, Option_t* clear_options); Get an object at index 'idx' that is guaranteed to have been constructed.; It might be either a freshly allocated object or one that had already been; allocated (and assumingly used). In the later case, the function Clear; will be called and passed the value of 'clear_options'. Tests to see if the destructor has been called on the object.; If so, or if the object has never been constructed the class constructor is called using; New(). If not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. void Clear(Option_t* option = """"); Clear the clones array. Only use this routine when your objects don't; allocate memory since it will not call the object dtors.; However, if the class in the TClonesArray implements the function; Clear(Option_t *option) and if option = ""C"" the function Clear(); is called for all objects in the array. In the function Clear(), one; can delete objects or dynamic arrays allocated in the class.; This procedure is much faster than calling TClonesArray::Delete(",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:19141,Energy Efficiency,allocate,allocate,19141," the TClonesArray. Tests to see if the destructor has been called on the object.; If so, or if the object has never been constructed the class constructor is called using; New(). If not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. TObject * ConstructedAt(Int_t idx, Option_t* clear_options); Get an object at index 'idx' that is guaranteed to have been constructed.; It might be either a freshly allocated object or one that had already been; allocated (and assumingly used). In the later case, the function Clear; will be called and passed the value of 'clear_options'. Tests to see if the destructor has been called on the object.; If so, or if the object has never been constructed the class constructor is called using; New(). If not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. void Clear(Option_t* option = """"); Clear the clones array. Only use this routine when your objects don't; allocate memory since it will not call the object dtors.; However, if the class in the TClonesArray implements the function; Clear(Option_t *option) and if option = ""C"" the function Clear(); is called for all objects in the array. In the function Clear(), one; can delete objects or dynamic arrays allocated in the class.; This procedure is much faster than calling TClonesArray::Delete().; When the option starts with ""C+"", eg ""C+xyz"" the objects in the array; are in turn cleared with the option ""xyz"". void Delete(Option_t* option = """"); Clear the clones array. Use this routine when your objects allocate; memory (e.g. objects inheriting from TNamed or containing TStrings; allocate memory). If not you better use Clear() since if is faster. void Expand(Int_t newSize); Expand or shrink the array to newSize elements. vo",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:19335,Energy Efficiency,allocate,allocate,19335," not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. TObject * ConstructedAt(Int_t idx, Option_t* clear_options); Get an object at index 'idx' that is guaranteed to have been constructed.; It might be either a freshly allocated object or one that had already been; allocated (and assumingly used). In the later case, the function Clear; will be called and passed the value of 'clear_options'. Tests to see if the destructor has been called on the object.; If so, or if the object has never been constructed the class constructor is called using; New(). If not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. void Clear(Option_t* option = """"); Clear the clones array. Only use this routine when your objects don't; allocate memory since it will not call the object dtors.; However, if the class in the TClonesArray implements the function; Clear(Option_t *option) and if option = ""C"" the function Clear(); is called for all objects in the array. In the function Clear(), one; can delete objects or dynamic arrays allocated in the class.; This procedure is much faster than calling TClonesArray::Delete().; When the option starts with ""C+"", eg ""C+xyz"" the objects in the array; are in turn cleared with the option ""xyz"". void Delete(Option_t* option = """"); Clear the clones array. Use this routine when your objects allocate; memory (e.g. objects inheriting from TNamed or containing TStrings; allocate memory). If not you better use Clear() since if is faster. void Expand(Int_t newSize); Expand or shrink the array to newSize elements. void ExpandCreate(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shr",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:19633,Energy Efficiency,allocate,allocated,19633," index 'idx' that is guaranteed to have been constructed.; It might be either a freshly allocated object or one that had already been; allocated (and assumingly used). In the later case, the function Clear; will be called and passed the value of 'clear_options'. Tests to see if the destructor has been called on the object.; If so, or if the object has never been constructed the class constructor is called using; New(). If not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. void Clear(Option_t* option = """"); Clear the clones array. Only use this routine when your objects don't; allocate memory since it will not call the object dtors.; However, if the class in the TClonesArray implements the function; Clear(Option_t *option) and if option = ""C"" the function Clear(); is called for all objects in the array. In the function Clear(), one; can delete objects or dynamic arrays allocated in the class.; This procedure is much faster than calling TClonesArray::Delete().; When the option starts with ""C+"", eg ""C+xyz"" the objects in the array; are in turn cleared with the option ""xyz"". void Delete(Option_t* option = """"); Clear the clones array. Use this routine when your objects allocate; memory (e.g. objects inheriting from TNamed or containing TStrings; allocate memory). If not you better use Clear() since if is faster. void Expand(Int_t newSize); Expand or shrink the array to newSize elements. void ExpandCreate(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrunk and the allocated space is freed.; This routine is typically used to create a clonesarray into which; one can directly copy object data without going via the; ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly). void ExpandCreateFast(Int_t n); Expand or sh",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:19935,Energy Efficiency,allocate,allocate,19935,"object.; If so, or if the object has never been constructed the class constructor is called using; New(). If not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. void Clear(Option_t* option = """"); Clear the clones array. Only use this routine when your objects don't; allocate memory since it will not call the object dtors.; However, if the class in the TClonesArray implements the function; Clear(Option_t *option) and if option = ""C"" the function Clear(); is called for all objects in the array. In the function Clear(), one; can delete objects or dynamic arrays allocated in the class.; This procedure is much faster than calling TClonesArray::Delete().; When the option starts with ""C+"", eg ""C+xyz"" the objects in the array; are in turn cleared with the option ""xyz"". void Delete(Option_t* option = """"); Clear the clones array. Use this routine when your objects allocate; memory (e.g. objects inheriting from TNamed or containing TStrings; allocate memory). If not you better use Clear() since if is faster. void Expand(Int_t newSize); Expand or shrink the array to newSize elements. void ExpandCreate(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrunk and the allocated space is freed.; This routine is typically used to create a clonesarray into which; one can directly copy object data without going via the; ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly). void ExpandCreateFast(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrinked but the allocated space is _not_ freed.; This routine is typically used to create a clonesarray into which; one can directly copy object data without going via the; ""ne",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:20013,Energy Efficiency,allocate,allocate,20013,"ass constructor is called using; New(). If not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. void Clear(Option_t* option = """"); Clear the clones array. Only use this routine when your objects don't; allocate memory since it will not call the object dtors.; However, if the class in the TClonesArray implements the function; Clear(Option_t *option) and if option = ""C"" the function Clear(); is called for all objects in the array. In the function Clear(), one; can delete objects or dynamic arrays allocated in the class.; This procedure is much faster than calling TClonesArray::Delete().; When the option starts with ""C+"", eg ""C+xyz"" the objects in the array; are in turn cleared with the option ""xyz"". void Delete(Option_t* option = """"); Clear the clones array. Use this routine when your objects allocate; memory (e.g. objects inheriting from TNamed or containing TStrings; allocate memory). If not you better use Clear() since if is faster. void Expand(Int_t newSize); Expand or shrink the array to newSize elements. void ExpandCreate(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrunk and the allocated space is freed.; This routine is typically used to create a clonesarray into which; one can directly copy object data without going via the; ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly). void ExpandCreateFast(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrinked but the allocated space is _not_ freed.; This routine is typically used to create a clonesarray into which; one can directly copy object data without going via the; ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly).; This",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:20351,Energy Efficiency,allocate,allocated,20351,"'t; allocate memory since it will not call the object dtors.; However, if the class in the TClonesArray implements the function; Clear(Option_t *option) and if option = ""C"" the function Clear(); is called for all objects in the array. In the function Clear(), one; can delete objects or dynamic arrays allocated in the class.; This procedure is much faster than calling TClonesArray::Delete().; When the option starts with ""C+"", eg ""C+xyz"" the objects in the array; are in turn cleared with the option ""xyz"". void Delete(Option_t* option = """"); Clear the clones array. Use this routine when your objects allocate; memory (e.g. objects inheriting from TNamed or containing TStrings; allocate memory). If not you better use Clear() since if is faster. void Expand(Int_t newSize); Expand or shrink the array to newSize elements. void ExpandCreate(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrunk and the allocated space is freed.; This routine is typically used to create a clonesarray into which; one can directly copy object data without going via the; ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly). void ExpandCreateFast(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrinked but the allocated space is _not_ freed.; This routine is typically used to create a clonesarray into which; one can directly copy object data without going via the; ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly).; This is a simplified version of ExpandCreate used in the TTree mechanism. TObject * RemoveAt(Int_t idx); Remove object at index idx. TObject * Remove(TObject* obj); Remove object from array. void RemoveRange(Int_t idx1, Int_t idx2); Remove objects from index idx1 to idx2 included. void SetClass(const TClass* cl, Int_t size = 1000); Create ",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:20767,Energy Efficiency,allocate,allocated,20767,"with ""C+"", eg ""C+xyz"" the objects in the array; are in turn cleared with the option ""xyz"". void Delete(Option_t* option = """"); Clear the clones array. Use this routine when your objects allocate; memory (e.g. objects inheriting from TNamed or containing TStrings; allocate memory). If not you better use Clear() since if is faster. void Expand(Int_t newSize); Expand or shrink the array to newSize elements. void ExpandCreate(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrunk and the allocated space is freed.; This routine is typically used to create a clonesarray into which; one can directly copy object data without going via the; ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly). void ExpandCreateFast(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrinked but the allocated space is _not_ freed.; This routine is typically used to create a clonesarray into which; one can directly copy object data without going via the; ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly).; This is a simplified version of ExpandCreate used in the TTree mechanism. TObject * RemoveAt(Int_t idx); Remove object at index idx. TObject * Remove(TObject* obj); Remove object from array. void RemoveRange(Int_t idx1, Int_t idx2); Remove objects from index idx1 to idx2 included. void SetClass(const TClass* cl, Int_t size = 1000); Create an array of clone objects of class cl. The class must inherit from; TObject. If the class defines an own operator delete(), make sure that; it looks like this:. void MyClass::operator delete(void *vp); {; if ((Long_t) vp != TObject::GetDtorOnly()); ::operator delete(vp); // delete space; else; TObject::SetDtorOnly(0);; }. The second argument s indicates an approximate number of objects; that will be entered in the ",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:19302,Integrability,rout,routine,19302," not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. TObject * ConstructedAt(Int_t idx, Option_t* clear_options); Get an object at index 'idx' that is guaranteed to have been constructed.; It might be either a freshly allocated object or one that had already been; allocated (and assumingly used). In the later case, the function Clear; will be called and passed the value of 'clear_options'. Tests to see if the destructor has been called on the object.; If so, or if the object has never been constructed the class constructor is called using; New(). If not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. void Clear(Option_t* option = """"); Clear the clones array. Only use this routine when your objects don't; allocate memory since it will not call the object dtors.; However, if the class in the TClonesArray implements the function; Clear(Option_t *option) and if option = ""C"" the function Clear(); is called for all objects in the array. In the function Clear(), one; can delete objects or dynamic arrays allocated in the class.; This procedure is much faster than calling TClonesArray::Delete().; When the option starts with ""C+"", eg ""C+xyz"" the objects in the array; are in turn cleared with the option ""xyz"". void Delete(Option_t* option = """"); Clear the clones array. Use this routine when your objects allocate; memory (e.g. objects inheriting from TNamed or containing TStrings; allocate memory). If not you better use Clear() since if is faster. void Expand(Int_t newSize); Expand or shrink the array to newSize elements. void ExpandCreate(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shr",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:19909,Integrability,rout,routine,19909,"object.; If so, or if the object has never been constructed the class constructor is called using; New(). If not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. void Clear(Option_t* option = """"); Clear the clones array. Only use this routine when your objects don't; allocate memory since it will not call the object dtors.; However, if the class in the TClonesArray implements the function; Clear(Option_t *option) and if option = ""C"" the function Clear(); is called for all objects in the array. In the function Clear(), one; can delete objects or dynamic arrays allocated in the class.; This procedure is much faster than calling TClonesArray::Delete().; When the option starts with ""C+"", eg ""C+xyz"" the objects in the array; are in turn cleared with the option ""xyz"". void Delete(Option_t* option = """"); Clear the clones array. Use this routine when your objects allocate; memory (e.g. objects inheriting from TNamed or containing TStrings; allocate memory). If not you better use Clear() since if is faster. void Expand(Int_t newSize); Expand or shrink the array to newSize elements. void ExpandCreate(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrunk and the allocated space is freed.; This routine is typically used to create a clonesarray into which; one can directly copy object data without going via the; ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly). void ExpandCreateFast(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrinked but the allocated space is _not_ freed.; This routine is typically used to create a clonesarray into which; one can directly copy object data without going via the; ""ne",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:20383,Integrability,rout,routine,20383,"nction; Clear(Option_t *option) and if option = ""C"" the function Clear(); is called for all objects in the array. In the function Clear(), one; can delete objects or dynamic arrays allocated in the class.; This procedure is much faster than calling TClonesArray::Delete().; When the option starts with ""C+"", eg ""C+xyz"" the objects in the array; are in turn cleared with the option ""xyz"". void Delete(Option_t* option = """"); Clear the clones array. Use this routine when your objects allocate; memory (e.g. objects inheriting from TNamed or containing TStrings; allocate memory). If not you better use Clear() since if is faster. void Expand(Int_t newSize); Expand or shrink the array to newSize elements. void ExpandCreate(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrunk and the allocated space is freed.; This routine is typically used to create a clonesarray into which; one can directly copy object data without going via the; ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly). void ExpandCreateFast(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrinked but the allocated space is _not_ freed.; This routine is typically used to create a clonesarray into which; one can directly copy object data without going via the; ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly).; This is a simplified version of ExpandCreate used in the TTree mechanism. TObject * RemoveAt(Int_t idx); Remove object at index idx. TObject * Remove(TObject* obj); Remove object from array. void RemoveRange(Int_t idx1, Int_t idx2); Remove objects from index idx1 to idx2 included. void SetClass(const TClass* cl, Int_t size = 1000); Create an array of clone objects of class cl. The class must inherit from; TObject. If the class defines an own operator delete(",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:20805,Integrability,rout,routine,20805,"; Clear the clones array. Use this routine when your objects allocate; memory (e.g. objects inheriting from TNamed or containing TStrings; allocate memory). If not you better use Clear() since if is faster. void Expand(Int_t newSize); Expand or shrink the array to newSize elements. void ExpandCreate(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrunk and the allocated space is freed.; This routine is typically used to create a clonesarray into which; one can directly copy object data without going via the; ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly). void ExpandCreateFast(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrinked but the allocated space is _not_ freed.; This routine is typically used to create a clonesarray into which; one can directly copy object data without going via the; ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly).; This is a simplified version of ExpandCreate used in the TTree mechanism. TObject * RemoveAt(Int_t idx); Remove object at index idx. TObject * Remove(TObject* obj); Remove object from array. void RemoveRange(Int_t idx1, Int_t idx2); Remove objects from index idx1 to idx2 included. void SetClass(const TClass* cl, Int_t size = 1000); Create an array of clone objects of class cl. The class must inherit from; TObject. If the class defines an own operator delete(), make sure that; it looks like this:. void MyClass::operator delete(void *vp); {; if ((Long_t) vp != TObject::GetDtorOnly()); ::operator delete(vp); // delete space; else; TObject::SetDtorOnly(0);; }. The second argument s indicates an approximate number of objects; that will be entered in the array. If more than s objects are entered,; the array will be automatically expanded. NB: This function should not be called ",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:8482,Modifiability,Inherit,InheritsFrom,8482,"l Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTObjArray::GetEntries() const; Int_tTObjArray::GetEntriesFast() const; virtual const char*TObject::GetIconName() const; virtual Int_tTObjArray::GetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; TObject**TObjArray::GetObjectRef() const; virtual TObject**TObjArray::GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tTCollection::GetSize() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Int_tTCollection::GrowBy(Int_t delta) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTCollection::Hash() const; virtual Int_tTObjArray::IndexOf(const TObject* obj) const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTCollection::IsArgNull(const char* where, const TObject* obj) const; virtual Bool_tTObjArray::IsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTCollection::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tTCollection::IsOwner() const; virtual Bool_tTCollection::IsSortable() const; virtual Bool_tTSeqCollection::IsSorted() const; Bool_tTObject::IsZombie() const; virtual TObject*TObjArray::Last() const; Int_tTSeqCollection::LastIndex() const; Int_tTObjArray::LowerBound() const; virtual voidTCollection::ls(Option_t* option = """") const; virtual TIterator*TObjArray::MakeIterator(Bool_t dir = kIterForward) const; virtual TIterator*TCollection::MakeReverseIterator() const; voidTObject::MayNotUse(const char* method) const; Long64_tTSeqCollecti",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:8548,Modifiability,Inherit,InheritsFrom,8548,"etDtorOnly(); virtual Int_tTObjArray::GetEntries() const; Int_tTObjArray::GetEntriesFast() const; virtual const char*TObject::GetIconName() const; virtual Int_tTObjArray::GetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; TObject**TObjArray::GetObjectRef() const; virtual TObject**TObjArray::GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tTCollection::GetSize() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Int_tTCollection::GrowBy(Int_t delta) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTCollection::Hash() const; virtual Int_tTObjArray::IndexOf(const TObject* obj) const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTCollection::IsArgNull(const char* where, const TObject* obj) const; virtual Bool_tTObjArray::IsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTCollection::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tTCollection::IsOwner() const; virtual Bool_tTCollection::IsSortable() const; virtual Bool_tTSeqCollection::IsSorted() const; Bool_tTObject::IsZombie() const; virtual TObject*TObjArray::Last() const; Int_tTSeqCollection::LastIndex() const; Int_tTObjArray::LowerBound() const; virtual voidTCollection::ls(Option_t* option = """") const; virtual TIterator*TObjArray::MakeIterator(Bool_t dir = kIterForward) const; virtual TIterator*TCollection::MakeReverseIterator() const; voidTObject::MayNotUse(const char* method) const; Long64_tTSeqCollection::Merge(TCollection* list); voidMultiSort(Int_t nTCs, TClonesArr",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:14606,Modifiability,Inherit,Inheritance,14606,"entry, Option_t* option, Int_t recurse) const; virtual voidTCollection::PrintCollectionHeader(Option_t* option) const. Data Members; public:. enum { kForgetBits; kNoSplit; kBypassStreamer; };; enum TCollection::[unnamed] { kIsOwner; kInitCapacity; kInitHashTableCapacity; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TClass*fClass!Pointer to the class; TObject**TObjArray::fCont!Array contents; TObjArray*fKeep!Saved copies of pointers to objects; Int_tTObjArray::fLastLast element in array containing an object; Int_tTObjArray::fLowerBoundLower bound of the array; TStringTCollection::fNamename of the collection; Int_tTCollection::fSizenumber of elements in collection; Bool_tTSeqCollection::fSortedtrue if collection has been sorted. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TClonesArray(); Default Constructor. TClonesArray(const char* classname, Int_t size = 1000, Bool_t call_dtor = kFALSE); Create an array of clone objects of classname. The class must inherit from; TObject. If the class defines its own operator delete(), make sure that; it looks like this:. void MyClass::operator delete(void *vp); {; if ((Long_t) vp != TObject::GetDtorOnly()); ::operator delete(vp); // delete space; else; TObject::SetDtorOnly(0);; }. The second argument s indicates an approximate number of objects; that will be entered in the array. If more than s objects are entered,; the array will be automatically expanded. The third argument is not used anymore and only there for backward; compatibility reasons. TClonesArray(const TClass* cl, Int_t size = 1000, Bool_t call_dtor = kFALSE); Create an array of clone objects of class cl. The class must inherit from; TObject. If the class defines an own operator delete(), make sure that; ",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:14619,Modifiability,Inherit,Inherited,14619,"entry, Option_t* option, Int_t recurse) const; virtual voidTCollection::PrintCollectionHeader(Option_t* option) const. Data Members; public:. enum { kForgetBits; kNoSplit; kBypassStreamer; };; enum TCollection::[unnamed] { kIsOwner; kInitCapacity; kInitHashTableCapacity; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TClass*fClass!Pointer to the class; TObject**TObjArray::fCont!Array contents; TObjArray*fKeep!Saved copies of pointers to objects; Int_tTObjArray::fLastLast element in array containing an object; Int_tTObjArray::fLowerBoundLower bound of the array; TStringTCollection::fNamename of the collection; Int_tTCollection::fSizenumber of elements in collection; Bool_tTSeqCollection::fSortedtrue if collection has been sorted. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TClonesArray(); Default Constructor. TClonesArray(const char* classname, Int_t size = 1000, Bool_t call_dtor = kFALSE); Create an array of clone objects of classname. The class must inherit from; TObject. If the class defines its own operator delete(), make sure that; it looks like this:. void MyClass::operator delete(void *vp); {; if ((Long_t) vp != TObject::GetDtorOnly()); ::operator delete(vp); // delete space; else; TObject::SetDtorOnly(0);; }. The second argument s indicates an approximate number of objects; that will be entered in the array. If more than s objects are entered,; the array will be automatically expanded. The third argument is not used anymore and only there for backward; compatibility reasons. TClonesArray(const TClass* cl, Int_t size = 1000, Bool_t call_dtor = kFALSE); Create an array of clone objects of class cl. The class must inherit from; TObject. If the class defines an own operator delete(), make sure that; ",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:14865,Modifiability,inherit,inherit,14865,"tCapacity; kInitHashTableCapacity; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TClass*fClass!Pointer to the class; TObject**TObjArray::fCont!Array contents; TObjArray*fKeep!Saved copies of pointers to objects; Int_tTObjArray::fLastLast element in array containing an object; Int_tTObjArray::fLowerBoundLower bound of the array; TStringTCollection::fNamename of the collection; Int_tTCollection::fSizenumber of elements in collection; Bool_tTSeqCollection::fSortedtrue if collection has been sorted. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TClonesArray(); Default Constructor. TClonesArray(const char* classname, Int_t size = 1000, Bool_t call_dtor = kFALSE); Create an array of clone objects of classname. The class must inherit from; TObject. If the class defines its own operator delete(), make sure that; it looks like this:. void MyClass::operator delete(void *vp); {; if ((Long_t) vp != TObject::GetDtorOnly()); ::operator delete(vp); // delete space; else; TObject::SetDtorOnly(0);; }. The second argument s indicates an approximate number of objects; that will be entered in the array. If more than s objects are entered,; the array will be automatically expanded. The third argument is not used anymore and only there for backward; compatibility reasons. TClonesArray(const TClass* cl, Int_t size = 1000, Bool_t call_dtor = kFALSE); Create an array of clone objects of class cl. The class must inherit from; TObject. If the class defines an own operator delete(), make sure that; it looks like this:. void MyClass::operator delete(void *vp); {; if ((Long_t) vp != TObject::GetDtorOnly()); ::operator delete(vp); // delete space; else; TObject::SetDtorOnly(0);; }. The second argument, s, indicates an approximate num",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:15546,Modifiability,inherit,inherit,15546,"fSortedtrue if collection has been sorted. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TClonesArray(); Default Constructor. TClonesArray(const char* classname, Int_t size = 1000, Bool_t call_dtor = kFALSE); Create an array of clone objects of classname. The class must inherit from; TObject. If the class defines its own operator delete(), make sure that; it looks like this:. void MyClass::operator delete(void *vp); {; if ((Long_t) vp != TObject::GetDtorOnly()); ::operator delete(vp); // delete space; else; TObject::SetDtorOnly(0);; }. The second argument s indicates an approximate number of objects; that will be entered in the array. If more than s objects are entered,; the array will be automatically expanded. The third argument is not used anymore and only there for backward; compatibility reasons. TClonesArray(const TClass* cl, Int_t size = 1000, Bool_t call_dtor = kFALSE); Create an array of clone objects of class cl. The class must inherit from; TObject. If the class defines an own operator delete(), make sure that; it looks like this:. void MyClass::operator delete(void *vp); {; if ((Long_t) vp != TObject::GetDtorOnly()); ::operator delete(vp); // delete space; else; TObject::SetDtorOnly(0);; }. The second argument, s, indicates an approximate number of objects; that will be entered in the array. If more than s objects are entered,; the array will be automatically expanded. The third argument is not used anymore and only there for backward; compatibility reasons. TClonesArray(const TClonesArray& tc); Copy ctor. TClonesArray& operator=(const TClonesArray& tc); Assignment operator. ~TClonesArray(); Delete a clones array. void BypassStreamer(Bool_t bypass = kTRUE); When the kBypassStreamer bit is set, the automatically; generated Streamer can call directly TClass::WriteBuffer.; Bypassing the Streamer improves the performance when writing/reading; the objects in the TClonesArray. However there is a drawback:; When a TC",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:19966,Modifiability,inherit,inheriting,19966,"ass constructor is called using; New(). If not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. void Clear(Option_t* option = """"); Clear the clones array. Only use this routine when your objects don't; allocate memory since it will not call the object dtors.; However, if the class in the TClonesArray implements the function; Clear(Option_t *option) and if option = ""C"" the function Clear(); is called for all objects in the array. In the function Clear(), one; can delete objects or dynamic arrays allocated in the class.; This procedure is much faster than calling TClonesArray::Delete().; When the option starts with ""C+"", eg ""C+xyz"" the objects in the array; are in turn cleared with the option ""xyz"". void Delete(Option_t* option = """"); Clear the clones array. Use this routine when your objects allocate; memory (e.g. objects inheriting from TNamed or containing TStrings; allocate memory). If not you better use Clear() since if is faster. void Expand(Int_t newSize); Expand or shrink the array to newSize elements. void ExpandCreate(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrunk and the allocated space is freed.; This routine is typically used to create a clonesarray into which; one can directly copy object data without going via the; ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly). void ExpandCreateFast(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrinked but the allocated space is _not_ freed.; This routine is typically used to create a clonesarray into which; one can directly copy object data without going via the; ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly).; This",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:21385,Modifiability,inherit,inherit,21385,"ne is typically used to create a clonesarray into which; one can directly copy object data without going via the; ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly). void ExpandCreateFast(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrinked but the allocated space is _not_ freed.; This routine is typically used to create a clonesarray into which; one can directly copy object data without going via the; ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly).; This is a simplified version of ExpandCreate used in the TTree mechanism. TObject * RemoveAt(Int_t idx); Remove object at index idx. TObject * Remove(TObject* obj); Remove object from array. void RemoveRange(Int_t idx1, Int_t idx2); Remove objects from index idx1 to idx2 included. void SetClass(const TClass* cl, Int_t size = 1000); Create an array of clone objects of class cl. The class must inherit from; TObject. If the class defines an own operator delete(), make sure that; it looks like this:. void MyClass::operator delete(void *vp); {; if ((Long_t) vp != TObject::GetDtorOnly()); ::operator delete(vp); // delete space; else; TObject::SetDtorOnly(0);; }. The second argument s indicates an approximate number of objects; that will be entered in the array. If more than s objects are entered,; the array will be automatically expanded. NB: This function should not be called in the TClonesArray is already; initialized with a class. void SetClass(const char* classname, Int_t size = 1000); see TClonesArray::SetClass(const TClass*). void SetOwner(Bool_t enable = kTRUE); A TClonesArray is always the owner of the object it contains.; However the collection its inherits from (TObjArray) does not.; Hence this member function needs to be a nop for TClonesArray. void Sort(Int_t upto = kMaxInt); If objects in array are sortable (i.e. IsSortable() returns true; for all objects) then sort ar",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:22160,Modifiability,inherit,inherits,22160,"bject from array. void RemoveRange(Int_t idx1, Int_t idx2); Remove objects from index idx1 to idx2 included. void SetClass(const TClass* cl, Int_t size = 1000); Create an array of clone objects of class cl. The class must inherit from; TObject. If the class defines an own operator delete(), make sure that; it looks like this:. void MyClass::operator delete(void *vp); {; if ((Long_t) vp != TObject::GetDtorOnly()); ::operator delete(vp); // delete space; else; TObject::SetDtorOnly(0);; }. The second argument s indicates an approximate number of objects; that will be entered in the array. If more than s objects are entered,; the array will be automatically expanded. NB: This function should not be called in the TClonesArray is already; initialized with a class. void SetClass(const char* classname, Int_t size = 1000); see TClonesArray::SetClass(const TClass*). void SetOwner(Bool_t enable = kTRUE); A TClonesArray is always the owner of the object it contains.; However the collection its inherits from (TObjArray) does not.; Hence this member function needs to be a nop for TClonesArray. void Sort(Int_t upto = kMaxInt); If objects in array are sortable (i.e. IsSortable() returns true; for all objects) then sort array. void Streamer(TBuffer& b); Write all objects in array to the I/O buffer. ATTENTION: empty slots; are also stored (using one byte per slot). If you don't want this; use a TOrdCollection or TList. TObject *& operator[](Int_t idx); Return pointer to reserved area in which a new object of clones; class can be constructed. This operator should not be used for; lefthand side assignments, like a[2] = xxx. Only like,; new (a[2]) myClass, or xxx = a[2]. Of course right hand side usage; is only legal after the object has been constructed via the; new operator or via the New() method. To remove elements from; the clones array use Remove() or RemoveAt(). TObject * operator[](Int_t idx) const; Return the object at position idx. Returns 0 if idx is out of bounds. TObject * ",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:2966,Performance,perform,performance,2966,"; allowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save about 19 hours. NOTE 1. C/C++ offers the possibility of allocating and deleting memory.; Forgetting to delete allocated memory is a programming error called a; ""memory leak"", i.e. the memory of your process grows and eventually; your program crashes. Even if you *always* delete the allocated; memory, the recovered space may not be efficiently reused. The; process knows that there are portions of free memory, but when you; allocate it again, a fresh piece of memory is grabbed. Your program; is free from semantic errors, but the total memory of your process; still grows, because your program's memory is full of ""holes"" which; reduce the efficiency of memory access; this is called ""memory; fragmentation"". Moreover new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; which should be Clear()ed during the job several times. Deleting a; TClonesArray is a double waste. Not only you do not avoid memory; fragmentation, but you worsen it because the TClonesArray itself; is a rather heavy structure, and there is quite some code in the; destructor, so you have more memory fragmentation and slower code. NOTE 2. When investigating misuse of TClonesArray, please make sure of the following:. * Use Clear() or Clear(""C"") instead of Delete(). This will improve; program execution time.; * TClonesArray object classes containing pointers allocate memory.; To avoid caus",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:16443,Performance,perform,performance,16443,"Bool_t call_dtor = kFALSE); Create an array of clone objects of class cl. The class must inherit from; TObject. If the class defines an own operator delete(), make sure that; it looks like this:. void MyClass::operator delete(void *vp); {; if ((Long_t) vp != TObject::GetDtorOnly()); ::operator delete(vp); // delete space; else; TObject::SetDtorOnly(0);; }. The second argument, s, indicates an approximate number of objects; that will be entered in the array. If more than s objects are entered,; the array will be automatically expanded. The third argument is not used anymore and only there for backward; compatibility reasons. TClonesArray(const TClonesArray& tc); Copy ctor. TClonesArray& operator=(const TClonesArray& tc); Assignment operator. ~TClonesArray(); Delete a clones array. void BypassStreamer(Bool_t bypass = kTRUE); When the kBypassStreamer bit is set, the automatically; generated Streamer can call directly TClass::WriteBuffer.; Bypassing the Streamer improves the performance when writing/reading; the objects in the TClonesArray. However there is a drawback:; When a TClonesArray is written with split=0 bypassing the Streamer,; the StreamerInfo of the class in the array being optimized,; one cannot use later the TClonesArray with split>0. For example,; there is a problem with the following scenario:; 1- A class Foo has a TClonesArray of Bar objects; 2- The Foo object is written with split=0 to Tree T1.; In this case the StreamerInfo for the class Bar is created; in optimized mode in such a way that data members of the same type; are written as an array improving the I/O performance.; 3- In a new program, T1 is read and a new Tree T2 is created; with the object Foo in split>1; 4- When the T2 branch is created, the StreamerInfo for the class Bar; is created with no optimization (mandatory for the split mode).; The optimized Bar StreamerInfo is going to be used to read; the TClonesArray in T1. The result will be Bar objects with; data member values not in the rig",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:16658,Performance,optimiz,optimized,16658," make sure that; it looks like this:. void MyClass::operator delete(void *vp); {; if ((Long_t) vp != TObject::GetDtorOnly()); ::operator delete(vp); // delete space; else; TObject::SetDtorOnly(0);; }. The second argument, s, indicates an approximate number of objects; that will be entered in the array. If more than s objects are entered,; the array will be automatically expanded. The third argument is not used anymore and only there for backward; compatibility reasons. TClonesArray(const TClonesArray& tc); Copy ctor. TClonesArray& operator=(const TClonesArray& tc); Assignment operator. ~TClonesArray(); Delete a clones array. void BypassStreamer(Bool_t bypass = kTRUE); When the kBypassStreamer bit is set, the automatically; generated Streamer can call directly TClass::WriteBuffer.; Bypassing the Streamer improves the performance when writing/reading; the objects in the TClonesArray. However there is a drawback:; When a TClonesArray is written with split=0 bypassing the Streamer,; the StreamerInfo of the class in the array being optimized,; one cannot use later the TClonesArray with split>0. For example,; there is a problem with the following scenario:; 1- A class Foo has a TClonesArray of Bar objects; 2- The Foo object is written with split=0 to Tree T1.; In this case the StreamerInfo for the class Bar is created; in optimized mode in such a way that data members of the same type; are written as an array improving the I/O performance.; 3- In a new program, T1 is read and a new Tree T2 is created; with the object Foo in split>1; 4- When the T2 branch is created, the StreamerInfo for the class Bar; is created with no optimization (mandatory for the split mode).; The optimized Bar StreamerInfo is going to be used to read; the TClonesArray in T1. The result will be Bar objects with; data member values not in the right sequence.; The solution to this problem is to call BypassStreamer(kFALSE); for the TClonesArray. In this case, the normal Bar::Streamer function; will be c",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:16953,Performance,optimiz,optimized,16953,"tically expanded. The third argument is not used anymore and only there for backward; compatibility reasons. TClonesArray(const TClonesArray& tc); Copy ctor. TClonesArray& operator=(const TClonesArray& tc); Assignment operator. ~TClonesArray(); Delete a clones array. void BypassStreamer(Bool_t bypass = kTRUE); When the kBypassStreamer bit is set, the automatically; generated Streamer can call directly TClass::WriteBuffer.; Bypassing the Streamer improves the performance when writing/reading; the objects in the TClonesArray. However there is a drawback:; When a TClonesArray is written with split=0 bypassing the Streamer,; the StreamerInfo of the class in the array being optimized,; one cannot use later the TClonesArray with split>0. For example,; there is a problem with the following scenario:; 1- A class Foo has a TClonesArray of Bar objects; 2- The Foo object is written with split=0 to Tree T1.; In this case the StreamerInfo for the class Bar is created; in optimized mode in such a way that data members of the same type; are written as an array improving the I/O performance.; 3- In a new program, T1 is read and a new Tree T2 is created; with the object Foo in split>1; 4- When the T2 branch is created, the StreamerInfo for the class Bar; is created with no optimization (mandatory for the split mode).; The optimized Bar StreamerInfo is going to be used to read; the TClonesArray in T1. The result will be Bar objects with; data member values not in the right sequence.; The solution to this problem is to call BypassStreamer(kFALSE); for the TClonesArray. In this case, the normal Bar::Streamer function; will be called. The Bar::Streamer function works OK independently; if the Bar StreamerInfo had been generated in optimized mode or not. void Compress(); Remove empty slots from array. TObject * ConstructedAt(Int_t idx); Get an object at index 'idx' that is guaranteed to have been constructed.; It might be either a freshly allocated object or one that had already been; all",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:17060,Performance,perform,performance,17060,"tically expanded. The third argument is not used anymore and only there for backward; compatibility reasons. TClonesArray(const TClonesArray& tc); Copy ctor. TClonesArray& operator=(const TClonesArray& tc); Assignment operator. ~TClonesArray(); Delete a clones array. void BypassStreamer(Bool_t bypass = kTRUE); When the kBypassStreamer bit is set, the automatically; generated Streamer can call directly TClass::WriteBuffer.; Bypassing the Streamer improves the performance when writing/reading; the objects in the TClonesArray. However there is a drawback:; When a TClonesArray is written with split=0 bypassing the Streamer,; the StreamerInfo of the class in the array being optimized,; one cannot use later the TClonesArray with split>0. For example,; there is a problem with the following scenario:; 1- A class Foo has a TClonesArray of Bar objects; 2- The Foo object is written with split=0 to Tree T1.; In this case the StreamerInfo for the class Bar is created; in optimized mode in such a way that data members of the same type; are written as an array improving the I/O performance.; 3- In a new program, T1 is read and a new Tree T2 is created; with the object Foo in split>1; 4- When the T2 branch is created, the StreamerInfo for the class Bar; is created with no optimization (mandatory for the split mode).; The optimized Bar StreamerInfo is going to be used to read; the TClonesArray in T1. The result will be Bar objects with; data member values not in the right sequence.; The solution to this problem is to call BypassStreamer(kFALSE); for the TClonesArray. In this case, the normal Bar::Streamer function; will be called. The Bar::Streamer function works OK independently; if the Bar StreamerInfo had been generated in optimized mode or not. void Compress(); Remove empty slots from array. TObject * ConstructedAt(Int_t idx); Get an object at index 'idx' that is guaranteed to have been constructed.; It might be either a freshly allocated object or one that had already been; all",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:17257,Performance,optimiz,optimization,17257," Assignment operator. ~TClonesArray(); Delete a clones array. void BypassStreamer(Bool_t bypass = kTRUE); When the kBypassStreamer bit is set, the automatically; generated Streamer can call directly TClass::WriteBuffer.; Bypassing the Streamer improves the performance when writing/reading; the objects in the TClonesArray. However there is a drawback:; When a TClonesArray is written with split=0 bypassing the Streamer,; the StreamerInfo of the class in the array being optimized,; one cannot use later the TClonesArray with split>0. For example,; there is a problem with the following scenario:; 1- A class Foo has a TClonesArray of Bar objects; 2- The Foo object is written with split=0 to Tree T1.; In this case the StreamerInfo for the class Bar is created; in optimized mode in such a way that data members of the same type; are written as an array improving the I/O performance.; 3- In a new program, T1 is read and a new Tree T2 is created; with the object Foo in split>1; 4- When the T2 branch is created, the StreamerInfo for the class Bar; is created with no optimization (mandatory for the split mode).; The optimized Bar StreamerInfo is going to be used to read; the TClonesArray in T1. The result will be Bar objects with; data member values not in the right sequence.; The solution to this problem is to call BypassStreamer(kFALSE); for the TClonesArray. In this case, the normal Bar::Streamer function; will be called. The Bar::Streamer function works OK independently; if the Bar StreamerInfo had been generated in optimized mode or not. void Compress(); Remove empty slots from array. TObject * ConstructedAt(Int_t idx); Get an object at index 'idx' that is guaranteed to have been constructed.; It might be either a freshly allocated object or one that had already been; allocated (and assumingly used). In the later case, it is the callers; responsability to insure that the object is returned to a known state,; usually by calling the Clear method on the TClonesArray. Tests to s",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:17307,Performance,optimiz,optimized,17307,"lly; generated Streamer can call directly TClass::WriteBuffer.; Bypassing the Streamer improves the performance when writing/reading; the objects in the TClonesArray. However there is a drawback:; When a TClonesArray is written with split=0 bypassing the Streamer,; the StreamerInfo of the class in the array being optimized,; one cannot use later the TClonesArray with split>0. For example,; there is a problem with the following scenario:; 1- A class Foo has a TClonesArray of Bar objects; 2- The Foo object is written with split=0 to Tree T1.; In this case the StreamerInfo for the class Bar is created; in optimized mode in such a way that data members of the same type; are written as an array improving the I/O performance.; 3- In a new program, T1 is read and a new Tree T2 is created; with the object Foo in split>1; 4- When the T2 branch is created, the StreamerInfo for the class Bar; is created with no optimization (mandatory for the split mode).; The optimized Bar StreamerInfo is going to be used to read; the TClonesArray in T1. The result will be Bar objects with; data member values not in the right sequence.; The solution to this problem is to call BypassStreamer(kFALSE); for the TClonesArray. In this case, the normal Bar::Streamer function; will be called. The Bar::Streamer function works OK independently; if the Bar StreamerInfo had been generated in optimized mode or not. void Compress(); Remove empty slots from array. TObject * ConstructedAt(Int_t idx); Get an object at index 'idx' that is guaranteed to have been constructed.; It might be either a freshly allocated object or one that had already been; allocated (and assumingly used). In the later case, it is the callers; responsability to insure that the object is returned to a known state,; usually by calling the Clear method on the TClonesArray. Tests to see if the destructor has been called on the object.; If so, or if the object has never been constructed the class constructor is called using; New(). If not,",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:17719,Performance,optimiz,optimized,17719,"use later the TClonesArray with split>0. For example,; there is a problem with the following scenario:; 1- A class Foo has a TClonesArray of Bar objects; 2- The Foo object is written with split=0 to Tree T1.; In this case the StreamerInfo for the class Bar is created; in optimized mode in such a way that data members of the same type; are written as an array improving the I/O performance.; 3- In a new program, T1 is read and a new Tree T2 is created; with the object Foo in split>1; 4- When the T2 branch is created, the StreamerInfo for the class Bar; is created with no optimization (mandatory for the split mode).; The optimized Bar StreamerInfo is going to be used to read; the TClonesArray in T1. The result will be Bar objects with; data member values not in the right sequence.; The solution to this problem is to call BypassStreamer(kFALSE); for the TClonesArray. In this case, the normal Bar::Streamer function; will be called. The Bar::Streamer function works OK independently; if the Bar StreamerInfo had been generated in optimized mode or not. void Compress(); Remove empty slots from array. TObject * ConstructedAt(Int_t idx); Get an object at index 'idx' that is guaranteed to have been constructed.; It might be either a freshly allocated object or one that had already been; allocated (and assumingly used). In the later case, it is the callers; responsability to insure that the object is returned to a known state,; usually by calling the Clear method on the TClonesArray. Tests to see if the destructor has been called on the object.; If so, or if the object has never been constructed the class constructor is called using; New(). If not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. TObject * ConstructedAt(Int_t idx, Option_t* clear_options); Get an object at index 'idx' that is guaranteed to have been constructed.; It might be ",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:2304,Safety,recover,recovered,2304,"cation), the object can be; added (and constructed when needed) using ConstructedAt which only; calls the constructor once per slot. TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; TTrack *track = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);. }. a.Clear(); // or a.Clear(""C"");; }. Note: the only supported way to add objects to a TClonesArray is; via the new with placement method or the ConstructedAt method.; The other Add() methods ofTObjArray and its base classes are not; allowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save about 19 hours. NOTE 1. C/C++ offers the possibility of allocating and deleting memory.; Forgetting to delete allocated memory is a programming error called a; ""memory leak"", i.e. the memory of your process grows and eventually; your program crashes. Even if you *always* delete the allocated; memory, the recovered space may not be efficiently reused. The; process knows that there are portions of free memory, but when you; allocate it again, a fresh piece of memory is grabbed. Your program; is free from semantic errors, but the total memory of your process; still grows, because your program's memory is full of ""holes"" which; reduce the efficiency of memory access; this is called ""memory; fragmentation"". Moreover new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; wh",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:2899,Safety,avoid,avoiding,2899,"; allowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save about 19 hours. NOTE 1. C/C++ offers the possibility of allocating and deleting memory.; Forgetting to delete allocated memory is a programming error called a; ""memory leak"", i.e. the memory of your process grows and eventually; your program crashes. Even if you *always* delete the allocated; memory, the recovered space may not be efficiently reused. The; process knows that there are portions of free memory, but when you; allocate it again, a fresh piece of memory is grabbed. Your program; is free from semantic errors, but the total memory of your process; still grows, because your program's memory is full of ""holes"" which; reduce the efficiency of memory access; this is called ""memory; fragmentation"". Moreover new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; which should be Clear()ed during the job several times. Deleting a; TClonesArray is a double waste. Not only you do not avoid memory; fragmentation, but you worsen it because the TClonesArray itself; is a rather heavy structure, and there is quite some code in the; destructor, so you have more memory fragmentation and slower code. NOTE 2. When investigating misuse of TClonesArray, please make sure of the following:. * Use Clear() or Clear(""C"") instead of Delete(). This will improve; program execution time.; * TClonesArray object classes containing pointers allocate memory.; To avoid caus",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:3417,Safety,avoid,avoid,3417,"ic errors, but the total memory of your process; still grows, because your program's memory is full of ""holes"" which; reduce the efficiency of memory access; this is called ""memory; fragmentation"". Moreover new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; which should be Clear()ed during the job several times. Deleting a; TClonesArray is a double waste. Not only you do not avoid memory; fragmentation, but you worsen it because the TClonesArray itself; is a rather heavy structure, and there is quite some code in the; destructor, so you have more memory fragmentation and slower code. NOTE 2. When investigating misuse of TClonesArray, please make sure of the following:. * Use Clear() or Clear(""C"") instead of Delete(). This will improve; program execution time.; * TClonesArray object classes containing pointers allocate memory.; To avoid causing memory leaks, special Clear(""C"") must be used; for clearing TClonesArray. When option ""C"" is specified, ROOT; automatically executes the Clear() method (by default it is; empty contained in TObject). This method must be overridden in; the relevant TClonesArray object class, implementing the reset; procedure for pointer objects.; * To reduce memory fragmentation, please make sure that the; TClonesArrays are not destroyed and created on every event. They; must only be constructed/destructed at the beginning/end of the; run. Function Members (Methods); public:. TClonesArray(); TClonesArray(const TClonesArray& tc);",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:3881,Safety,avoid,avoid,3881,"ntation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; which should be Clear()ed during the job several times. Deleting a; TClonesArray is a double waste. Not only you do not avoid memory; fragmentation, but you worsen it because the TClonesArray itself; is a rather heavy structure, and there is quite some code in the; destructor, so you have more memory fragmentation and slower code. NOTE 2. When investigating misuse of TClonesArray, please make sure of the following:. * Use Clear() or Clear(""C"") instead of Delete(). This will improve; program execution time.; * TClonesArray object classes containing pointers allocate memory.; To avoid causing memory leaks, special Clear(""C"") must be used; for clearing TClonesArray. When option ""C"" is specified, ROOT; automatically executes the Clear() method (by default it is; empty contained in TObject). This method must be overridden in; the relevant TClonesArray object class, implementing the reset; procedure for pointer objects.; * To reduce memory fragmentation, please make sure that the; TClonesArrays are not destroyed and created on every event. They; must only be constructed/destructed at the beginning/end of the; run. Function Members (Methods); public:. TClonesArray(); TClonesArray(const TClonesArray& tc); TClonesArray(const char* classname, Int_t size = 1000, Bool_t call_dtor = kFALSE); TClonesArray(const TClass* cl, Int_t size = 1000, Bool_t call_dtor = kFALSE); virtual~TClonesArray(); voidAbsorbObjects(TClonesArray* tc); voidAbsorbObjects(TClonesArray* tc, Int_t idx1, Int_t idx2); voidTObject::AbstractMethod(const char* method) const; virtual voidTObjArray::Add(TObject* obj); virtual voidAddAfter(const T",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:2662,Security,access,access,2662," *track = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);. }. a.Clear(); // or a.Clear(""C"");; }. Note: the only supported way to add objects to a TClonesArray is; via the new with placement method or the ConstructedAt method.; The other Add() methods ofTObjArray and its base classes are not; allowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save about 19 hours. NOTE 1. C/C++ offers the possibility of allocating and deleting memory.; Forgetting to delete allocated memory is a programming error called a; ""memory leak"", i.e. the memory of your process grows and eventually; your program crashes. Even if you *always* delete the allocated; memory, the recovered space may not be efficiently reused. The; process knows that there are portions of free memory, but when you; allocate it again, a fresh piece of memory is grabbed. Your program; is free from semantic errors, but the total memory of your process; still grows, because your program's memory is full of ""holes"" which; reduce the efficiency of memory access; this is called ""memory; fragmentation"". Moreover new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; which should be Clear()ed during the job several times. Deleting a; TClonesArray is a double waste. Not only you do not avoid memory; fragmentation, but you worsen it because the TClonesArray itself; is a rather heavy structure, and there is quite some code in the; destructor, so you have more me",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:8313,Security,Hash,Hash,8313,"bject*TObjArray::First() const; static voidTCollection::GarbageCollect(TObject* obj); TClass*GetClass() const; static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTObjArray::GetEntries() const; Int_tTObjArray::GetEntriesFast() const; virtual const char*TObject::GetIconName() const; virtual Int_tTObjArray::GetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; TObject**TObjArray::GetObjectRef() const; virtual TObject**TObjArray::GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tTCollection::GetSize() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Int_tTCollection::GrowBy(Int_t delta) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTCollection::Hash() const; virtual Int_tTObjArray::IndexOf(const TObject* obj) const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTCollection::IsArgNull(const char* where, const TObject* obj) const; virtual Bool_tTObjArray::IsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTCollection::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tTCollection::IsOwner() const; virtual Bool_tTCollection::IsSortable() const; virtual Bool_tTSeqCollection::IsSorted() const; Bool_tTObject::IsZombie() const; virtual TObject*TObjArray::Last() const; Int_tTSeqCollection::LastIndex() const; Int_tTObjArray::LowerBound() const; virtual voidTCollection::ls(Option_t* option = """") const; virtual TIterator*TObjArray::Make",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:5430,Testability,Assert,AssertClass,5430,,MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:12659,Testability,Test,TestBit,12659," virtual Int_tTObject::Read(const char* name); virtual voidTObjArray::RecursiveRemove(TObject* obj); virtual TObject*Remove(TObject* obj); virtual voidTSeqCollection::RemoveAfter(TObject* after); voidTCollection::RemoveAll(); virtual voidTCollection::RemoveAll(TCollection* col); virtual TObject*RemoveAt(Int_t idx); virtual voidTSeqCollection::RemoveBefore(TObject* before); virtual voidTSeqCollection::RemoveFirst(); virtual voidTSeqCollection::RemoveLast(); virtual voidRemoveRange(Int_t idx1, Int_t idx2); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetClass(const char* classname, Int_t size = 1000); voidSetClass(const TClass* cl, Int_t size = 1000); voidTCollection::SetCurrentCollection(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTObjArray::SetLast(Int_t last); voidTCollection::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOwner(Bool_t enable = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidSort(Int_t upto = kMaxInt); static voidTCollection::StartGarbageCollection(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TObject*TObjArray::UncheckedAt(Int_t i) const; voidTSeqCollection::UnSort(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:12698,Testability,Test,TestBits,12698," virtual Int_tTObject::Read(const char* name); virtual voidTObjArray::RecursiveRemove(TObject* obj); virtual TObject*Remove(TObject* obj); virtual voidTSeqCollection::RemoveAfter(TObject* after); voidTCollection::RemoveAll(); virtual voidTCollection::RemoveAll(TCollection* col); virtual TObject*RemoveAt(Int_t idx); virtual voidTSeqCollection::RemoveBefore(TObject* before); virtual voidTSeqCollection::RemoveFirst(); virtual voidTSeqCollection::RemoveLast(); virtual voidRemoveRange(Int_t idx1, Int_t idx2); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetClass(const char* classname, Int_t size = 1000); voidSetClass(const TClass* cl, Int_t size = 1000); voidTCollection::SetCurrentCollection(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTObjArray::SetLast(Int_t last); voidTCollection::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOwner(Bool_t enable = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidSort(Int_t upto = kMaxInt); static voidTCollection::StartGarbageCollection(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TObject*TObjArray::UncheckedAt(Int_t i) const; voidTSeqCollection::UnSort(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:18177,Testability,Test,Tests,18177,"treamerInfo for the class Bar; is created with no optimization (mandatory for the split mode).; The optimized Bar StreamerInfo is going to be used to read; the TClonesArray in T1. The result will be Bar objects with; data member values not in the right sequence.; The solution to this problem is to call BypassStreamer(kFALSE); for the TClonesArray. In this case, the normal Bar::Streamer function; will be called. The Bar::Streamer function works OK independently; if the Bar StreamerInfo had been generated in optimized mode or not. void Compress(); Remove empty slots from array. TObject * ConstructedAt(Int_t idx); Get an object at index 'idx' that is guaranteed to have been constructed.; It might be either a freshly allocated object or one that had already been; allocated (and assumingly used). In the later case, it is the callers; responsability to insure that the object is returned to a known state,; usually by calling the Clear method on the TClonesArray. Tests to see if the destructor has been called on the object.; If so, or if the object has never been constructed the class constructor is called using; New(). If not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. TObject * ConstructedAt(Int_t idx, Option_t* clear_options); Get an object at index 'idx' that is guaranteed to have been constructed.; It might be either a freshly allocated object or one that had already been; allocated (and assumingly used). In the later case, the function Clear; will be called and passed the value of 'clear_options'. Tests to see if the destructor has been called on the object.; If so, or if the object has never been constructed the class constructor is called using; New(). If not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in thei",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:18873,Testability,Test,Tests,18873," might be either a freshly allocated object or one that had already been; allocated (and assumingly used). In the later case, it is the callers; responsability to insure that the object is returned to a known state,; usually by calling the Clear method on the TClonesArray. Tests to see if the destructor has been called on the object.; If so, or if the object has never been constructed the class constructor is called using; New(). If not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. TObject * ConstructedAt(Int_t idx, Option_t* clear_options); Get an object at index 'idx' that is guaranteed to have been constructed.; It might be either a freshly allocated object or one that had already been; allocated (and assumingly used). In the later case, the function Clear; will be called and passed the value of 'clear_options'. Tests to see if the destructor has been called on the object.; If so, or if the object has never been constructed the class constructor is called using; New(). If not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. void Clear(Option_t* option = """"); Clear the clones array. Only use this routine when your objects don't; allocate memory since it will not call the object dtors.; However, if the class in the TClonesArray implements the function; Clear(Option_t *option) and if option = ""C"" the function Clear(); is called for all objects in the array. In the function Clear(), one; can delete objects or dynamic arrays allocated in the class.; This procedure is much faster than calling TClonesArray::Delete().; When the option starts with ""C+"", eg ""C+xyz"" the objects in the array; are in turn cleared with the option ""xyz"". void Delete(Option_t* option = """"); Clear the clones array. Use",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:24573,Testability,Test,TestBit,24573," method. To remove elements from; the clones array use Remove() or RemoveAt(). TObject * operator[](Int_t idx) const; Return the object at position idx. Returns 0 if idx is out of bounds. TObject * New(Int_t idx); Create an object of type fClass with the default ctor at the specified; index. Returns 0 in case of error. void AbsorbObjects(TClonesArray* tc); Directly move the object pointers from tc without cloning (copying).; This TClonesArray takes over ownership of all of tc's object; pointers. The tc array is left empty upon return. void AbsorbObjects(TClonesArray* tc, Int_t idx1, Int_t idx2); Directly move the rang of object pointers from tc without cloning; (copying).; This TClonesArray takes over ownership of all of tc's object pointers; from idx1 to idx2. The tc array is re-arranged by return. void MultiSort(Int_t nTCs, TClonesArray** tcs, Int_t upto = kMaxInt); Sort multiple TClonesArrays simultaneously with this array.; If objects in array are sortable (i.e. IsSortable() returns true; for all objects) then sort array. TObject * AddrAt(Int_t idx). TClass * GetClass() const; { return fClass; }. void AddFirst(TObject* ); { MayNotUse(""AddFirst""); }. void AddLast(TObject* ); { MayNotUse(""AddLast""); }. void AddAt(TObject* , Int_t ); { MayNotUse(""AddAt""); }. void AddAtAndExpand(TObject* , Int_t ); { MayNotUse(""AddAtAndExpand""); }. Int_t AddAtFree(TObject* ); { MayNotUse(""AddAtFree""); return 0; }. void AddAfter(const TObject* , TObject* ); { MayNotUse(""AddAfter""); }. void AddBefore(const TObject* , TObject* ); { MayNotUse(""AddBefore""); }. Bool_t CanBypassStreamer() const; { return TestBit(kBypassStreamer); }. » Author: Rene Brun 11/02/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id: TClonesArray.h 40562 2011-08-11 16:05:17Z pcanal $ » Last generated: 2011-12-02 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:1165,Usability,Clear,Clear,1165,"tion; function members; data members; class charts. ROOT; » CORE; » CONT; » TClonesArray. class TClonesArray: public TObjArray. An array of clone (identical) objects. Memory for the objects; stored in the array is allocated only once in the lifetime of the; clones array. All objects must be of the same class. For the rest; this class has the same properties as TObjArray. To reduce the very large number of new and delete calls in large; loops like this (O(100000) x O(10000) times new/delete):. TObjArray a(10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; a[i] = new TTrack(x,y,z,...);. }. a.Delete();; }. One better uses a TClonesArray which reduces the number of; new/delete calls to only O(10000):. TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; new(a[i]) TTrack(x,y,z,...);. }. a.Delete(); // or a.Clear() or a.Clear(""C""); }. To reduce the number of call to the constructor (especially useful; if the user class requires memory allocation), the object can be; added (and constructed when needed) using ConstructedAt which only; calls the constructor once per slot. TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; TTrack *track = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);. }. a.Clear(); // or a.Clear(""C"");; }. Note: the only supported way to add objects to a TClonesArray is; via the new with placement method or the ConstructedAt method.; The other Add() methods ofTObjArray and its base classes are not; allowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save about 19 hours. NOTE 1. C/C++ offers the possibility of allocating and deleting memory.; Forgetting to delete allocated memory is a programming error called a; ""memory leak"",",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:1178,Usability,Clear,Clear,1178," members; data members; class charts. ROOT; » CORE; » CONT; » TClonesArray. class TClonesArray: public TObjArray. An array of clone (identical) objects. Memory for the objects; stored in the array is allocated only once in the lifetime of the; clones array. All objects must be of the same class. For the rest; this class has the same properties as TObjArray. To reduce the very large number of new and delete calls in large; loops like this (O(100000) x O(10000) times new/delete):. TObjArray a(10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; a[i] = new TTrack(x,y,z,...);. }. a.Delete();; }. One better uses a TClonesArray which reduces the number of; new/delete calls to only O(10000):. TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; new(a[i]) TTrack(x,y,z,...);. }. a.Delete(); // or a.Clear() or a.Clear(""C""); }. To reduce the number of call to the constructor (especially useful; if the user class requires memory allocation), the object can be; added (and constructed when needed) using ConstructedAt which only; calls the constructor once per slot. TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; TTrack *track = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);. }. a.Clear(); // or a.Clear(""C"");; }. Note: the only supported way to add objects to a TClonesArray is; via the new with placement method or the ConstructedAt method.; The other Add() methods ofTObjArray and its base classes are not; allowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save about 19 hours. NOTE 1. C/C++ offers the possibility of allocating and deleting memory.; Forgetting to delete allocated memory is a programming error called a; ""memory leak"", i.e. the mem",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:1663,Usability,Clear,Clear,1663,"bjArray a(10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; a[i] = new TTrack(x,y,z,...);. }. a.Delete();; }. One better uses a TClonesArray which reduces the number of; new/delete calls to only O(10000):. TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; new(a[i]) TTrack(x,y,z,...);. }. a.Delete(); // or a.Clear() or a.Clear(""C""); }. To reduce the number of call to the constructor (especially useful; if the user class requires memory allocation), the object can be; added (and constructed when needed) using ConstructedAt which only; calls the constructor once per slot. TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; TTrack *track = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);. }. a.Clear(); // or a.Clear(""C"");; }. Note: the only supported way to add objects to a TClonesArray is; via the new with placement method or the ConstructedAt method.; The other Add() methods ofTObjArray and its base classes are not; allowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save about 19 hours. NOTE 1. C/C++ offers the possibility of allocating and deleting memory.; Forgetting to delete allocated memory is a programming error called a; ""memory leak"", i.e. the memory of your process grows and eventually; your program crashes. Even if you *always* delete the allocated; memory, the recovered space may not be efficiently reused. The; process knows that there are portions of free memory, but when you; allocate it again, a fresh piece of memory is grabbed. Your program; is free from semantic errors, but the total memory of your process; still grows, because your program's memory is full of ""holes"" which; reduce the efficiency of memory access; th",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:1680,Usability,Clear,Clear,1680,";; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; a[i] = new TTrack(x,y,z,...);. }. a.Delete();; }. One better uses a TClonesArray which reduces the number of; new/delete calls to only O(10000):. TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; new(a[i]) TTrack(x,y,z,...);. }. a.Delete(); // or a.Clear() or a.Clear(""C""); }. To reduce the number of call to the constructor (especially useful; if the user class requires memory allocation), the object can be; added (and constructed when needed) using ConstructedAt which only; calls the constructor once per slot. TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; TTrack *track = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);. }. a.Clear(); // or a.Clear(""C"");; }. Note: the only supported way to add objects to a TClonesArray is; via the new with placement method or the ConstructedAt method.; The other Add() methods ofTObjArray and its base classes are not; allowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save about 19 hours. NOTE 1. C/C++ offers the possibility of allocating and deleting memory.; Forgetting to delete allocated memory is a programming error called a; ""memory leak"", i.e. the memory of your process grows and eventually; your program crashes. Even if you *always* delete the allocated; memory, the recovered space may not be efficiently reused. The; process knows that there are portions of free memory, but when you; allocate it again, a fresh piece of memory is grabbed. Your program; is free from semantic errors, but the total memory of your process; still grows, because your program's memory is full of ""holes"" which; reduce the efficiency of memory access; this is called ""me",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:3068,Usability,Clear,Clear,3068,"lity of allocating and deleting memory.; Forgetting to delete allocated memory is a programming error called a; ""memory leak"", i.e. the memory of your process grows and eventually; your program crashes. Even if you *always* delete the allocated; memory, the recovered space may not be efficiently reused. The; process knows that there are portions of free memory, but when you; allocate it again, a fresh piece of memory is grabbed. Your program; is free from semantic errors, but the total memory of your process; still grows, because your program's memory is full of ""holes"" which; reduce the efficiency of memory access; this is called ""memory; fragmentation"". Moreover new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; which should be Clear()ed during the job several times. Deleting a; TClonesArray is a double waste. Not only you do not avoid memory; fragmentation, but you worsen it because the TClonesArray itself; is a rather heavy structure, and there is quite some code in the; destructor, so you have more memory fragmentation and slower code. NOTE 2. When investigating misuse of TClonesArray, please make sure of the following:. * Use Clear() or Clear(""C"") instead of Delete(). This will improve; program execution time.; * TClonesArray object classes containing pointers allocate memory.; To avoid causing memory leaks, special Clear(""C"") must be used; for clearing TClonesArray. When option ""C"" is specified, ROOT; automatically executes the Clear() method ",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:3313,Usability,Clear,Clear,3313,"memory, the recovered space may not be efficiently reused. The; process knows that there are portions of free memory, but when you; allocate it again, a fresh piece of memory is grabbed. Your program; is free from semantic errors, but the total memory of your process; still grows, because your program's memory is full of ""holes"" which; reduce the efficiency of memory access; this is called ""memory; fragmentation"". Moreover new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; which should be Clear()ed during the job several times. Deleting a; TClonesArray is a double waste. Not only you do not avoid memory; fragmentation, but you worsen it because the TClonesArray itself; is a rather heavy structure, and there is quite some code in the; destructor, so you have more memory fragmentation and slower code. NOTE 2. When investigating misuse of TClonesArray, please make sure of the following:. * Use Clear() or Clear(""C"") instead of Delete(). This will improve; program execution time.; * TClonesArray object classes containing pointers allocate memory.; To avoid causing memory leaks, special Clear(""C"") must be used; for clearing TClonesArray. When option ""C"" is specified, ROOT; automatically executes the Clear() method (by default it is; empty contained in TObject). This method must be overridden in; the relevant TClonesArray object class, implementing the reset; procedure for pointer objects.; * To reduce memory fragmentation, please make sure that the; TClon",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:3723,Usability,Clear,Clear,3723,"nsive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; which should be Clear()ed during the job several times. Deleting a; TClonesArray is a double waste. Not only you do not avoid memory; fragmentation, but you worsen it because the TClonesArray itself; is a rather heavy structure, and there is quite some code in the; destructor, so you have more memory fragmentation and slower code. NOTE 2. When investigating misuse of TClonesArray, please make sure of the following:. * Use Clear() or Clear(""C"") instead of Delete(). This will improve; program execution time.; * TClonesArray object classes containing pointers allocate memory.; To avoid causing memory leaks, special Clear(""C"") must be used; for clearing TClonesArray. When option ""C"" is specified, ROOT; automatically executes the Clear() method (by default it is; empty contained in TObject). This method must be overridden in; the relevant TClonesArray object class, implementing the reset; procedure for pointer objects.; * To reduce memory fragmentation, please make sure that the; TClonesArrays are not destroyed and created on every event. They; must only be constructed/destructed at the beginning/end of the; run. Function Members (Methods); public:. TClonesArray(); TClonesArray(const TClonesArray& tc); TClonesArray(const char* classname, Int_t size = 1000, Bool_t call_dtor = kFALSE); TClonesArray(const TClass* cl, Int_t size = 1000, Bool_t call_dtor = kFALSE); virtual~TClonesArray(); voidAbsorbObjects(TClonesArray* tc); voidA",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:3734,Usability,Clear,Clear,3734,"nsive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; which should be Clear()ed during the job several times. Deleting a; TClonesArray is a double waste. Not only you do not avoid memory; fragmentation, but you worsen it because the TClonesArray itself; is a rather heavy structure, and there is quite some code in the; destructor, so you have more memory fragmentation and slower code. NOTE 2. When investigating misuse of TClonesArray, please make sure of the following:. * Use Clear() or Clear(""C"") instead of Delete(). This will improve; program execution time.; * TClonesArray object classes containing pointers allocate memory.; To avoid causing memory leaks, special Clear(""C"") must be used; for clearing TClonesArray. When option ""C"" is specified, ROOT; automatically executes the Clear() method (by default it is; empty contained in TObject). This method must be overridden in; the relevant TClonesArray object class, implementing the reset; procedure for pointer objects.; * To reduce memory fragmentation, please make sure that the; TClonesArrays are not destroyed and created on every event. They; must only be constructed/destructed at the beginning/end of the; run. Function Members (Methods); public:. TClonesArray(); TClonesArray(const TClonesArray& tc); TClonesArray(const char* classname, Int_t size = 1000, Bool_t call_dtor = kFALSE); TClonesArray(const TClass* cl, Int_t size = 1000, Bool_t call_dtor = kFALSE); virtual~TClonesArray(); voidAbsorbObjects(TClonesArray* tc); voidA",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:3917,Usability,Clear,Clear,3917,"ntation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; which should be Clear()ed during the job several times. Deleting a; TClonesArray is a double waste. Not only you do not avoid memory; fragmentation, but you worsen it because the TClonesArray itself; is a rather heavy structure, and there is quite some code in the; destructor, so you have more memory fragmentation and slower code. NOTE 2. When investigating misuse of TClonesArray, please make sure of the following:. * Use Clear() or Clear(""C"") instead of Delete(). This will improve; program execution time.; * TClonesArray object classes containing pointers allocate memory.; To avoid causing memory leaks, special Clear(""C"") must be used; for clearing TClonesArray. When option ""C"" is specified, ROOT; automatically executes the Clear() method (by default it is; empty contained in TObject). This method must be overridden in; the relevant TClonesArray object class, implementing the reset; procedure for pointer objects.; * To reduce memory fragmentation, please make sure that the; TClonesArrays are not destroyed and created on every event. They; must only be constructed/destructed at the beginning/end of the; run. Function Members (Methods); public:. TClonesArray(); TClonesArray(const TClonesArray& tc); TClonesArray(const char* classname, Int_t size = 1000, Bool_t call_dtor = kFALSE); TClonesArray(const TClass* cl, Int_t size = 1000, Bool_t call_dtor = kFALSE); virtual~TClonesArray(); voidAbsorbObjects(TClonesArray* tc); voidAbsorbObjects(TClonesArray* tc, Int_t idx1, Int_t idx2); voidTObject::AbstractMethod(const char* method) const; virtual voidTObjArray::Add(TObject* obj); virtual voidAddAfter(const T",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:3946,Usability,clear,clearing,3946,"ntation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; which should be Clear()ed during the job several times. Deleting a; TClonesArray is a double waste. Not only you do not avoid memory; fragmentation, but you worsen it because the TClonesArray itself; is a rather heavy structure, and there is quite some code in the; destructor, so you have more memory fragmentation and slower code. NOTE 2. When investigating misuse of TClonesArray, please make sure of the following:. * Use Clear() or Clear(""C"") instead of Delete(). This will improve; program execution time.; * TClonesArray object classes containing pointers allocate memory.; To avoid causing memory leaks, special Clear(""C"") must be used; for clearing TClonesArray. When option ""C"" is specified, ROOT; automatically executes the Clear() method (by default it is; empty contained in TObject). This method must be overridden in; the relevant TClonesArray object class, implementing the reset; procedure for pointer objects.; * To reduce memory fragmentation, please make sure that the; TClonesArrays are not destroyed and created on every event. They; must only be constructed/destructed at the beginning/end of the; run. Function Members (Methods); public:. TClonesArray(); TClonesArray(const TClonesArray& tc); TClonesArray(const char* classname, Int_t size = 1000, Bool_t call_dtor = kFALSE); TClonesArray(const TClass* cl, Int_t size = 1000, Bool_t call_dtor = kFALSE); virtual~TClonesArray(); voidAbsorbObjects(TClonesArray* tc); voidAbsorbObjects(TClonesArray* tc, Int_t idx1, Int_t idx2); voidTObject::AbstractMethod(const char* method) const; virtual voidTObjArray::Add(TObject* obj); virtual voidAddAfter(const T",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:4032,Usability,Clear,Clear,4032," TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; which should be Clear()ed during the job several times. Deleting a; TClonesArray is a double waste. Not only you do not avoid memory; fragmentation, but you worsen it because the TClonesArray itself; is a rather heavy structure, and there is quite some code in the; destructor, so you have more memory fragmentation and slower code. NOTE 2. When investigating misuse of TClonesArray, please make sure of the following:. * Use Clear() or Clear(""C"") instead of Delete(). This will improve; program execution time.; * TClonesArray object classes containing pointers allocate memory.; To avoid causing memory leaks, special Clear(""C"") must be used; for clearing TClonesArray. When option ""C"" is specified, ROOT; automatically executes the Clear() method (by default it is; empty contained in TObject). This method must be overridden in; the relevant TClonesArray object class, implementing the reset; procedure for pointer objects.; * To reduce memory fragmentation, please make sure that the; TClonesArrays are not destroyed and created on every event. They; must only be constructed/destructed at the beginning/end of the; run. Function Members (Methods); public:. TClonesArray(); TClonesArray(const TClonesArray& tc); TClonesArray(const char* classname, Int_t size = 1000, Bool_t call_dtor = kFALSE); TClonesArray(const TClass* cl, Int_t size = 1000, Bool_t call_dtor = kFALSE); virtual~TClonesArray(); voidAbsorbObjects(TClonesArray* tc); voidAbsorbObjects(TClonesArray* tc, Int_t idx1, Int_t idx2); voidTObject::AbstractMethod(const char* method) const; virtual voidTObjArray::Add(TObject* obj); virtual voidAddAfter(const TObject*, TObject*); virtual voidTCollection::AddAll(const TCollection* col); virtual voidAddAt(TObject*, Int_",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:18143,Usability,Clear,Clear,18143,"m, T1 is read and a new Tree T2 is created; with the object Foo in split>1; 4- When the T2 branch is created, the StreamerInfo for the class Bar; is created with no optimization (mandatory for the split mode).; The optimized Bar StreamerInfo is going to be used to read; the TClonesArray in T1. The result will be Bar objects with; data member values not in the right sequence.; The solution to this problem is to call BypassStreamer(kFALSE); for the TClonesArray. In this case, the normal Bar::Streamer function; will be called. The Bar::Streamer function works OK independently; if the Bar StreamerInfo had been generated in optimized mode or not. void Compress(); Remove empty slots from array. TObject * ConstructedAt(Int_t idx); Get an object at index 'idx' that is guaranteed to have been constructed.; It might be either a freshly allocated object or one that had already been; allocated (and assumingly used). In the later case, it is the callers; responsability to insure that the object is returned to a known state,; usually by calling the Clear method on the TClonesArray. Tests to see if the destructor has been called on the object.; If so, or if the object has never been constructed the class constructor is called using; New(). If not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. TObject * ConstructedAt(Int_t idx, Option_t* clear_options); Get an object at index 'idx' that is guaranteed to have been constructed.; It might be either a freshly allocated object or one that had already been; allocated (and assumingly used). In the later case, the function Clear; will be called and passed the value of 'clear_options'. Tests to see if the destructor has been called on the object.; If so, or if the object has never been constructed the class constructor is called using; New(). If not, return a pointer to the correct memory location.; Th",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:18513,Usability,Clear,Clear,18513,"quence.; The solution to this problem is to call BypassStreamer(kFALSE); for the TClonesArray. In this case, the normal Bar::Streamer function; will be called. The Bar::Streamer function works OK independently; if the Bar StreamerInfo had been generated in optimized mode or not. void Compress(); Remove empty slots from array. TObject * ConstructedAt(Int_t idx); Get an object at index 'idx' that is guaranteed to have been constructed.; It might be either a freshly allocated object or one that had already been; allocated (and assumingly used). In the later case, it is the callers; responsability to insure that the object is returned to a known state,; usually by calling the Clear method on the TClonesArray. Tests to see if the destructor has been called on the object.; If so, or if the object has never been constructed the class constructor is called using; New(). If not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. TObject * ConstructedAt(Int_t idx, Option_t* clear_options); Get an object at index 'idx' that is guaranteed to have been constructed.; It might be either a freshly allocated object or one that had already been; allocated (and assumingly used). In the later case, the function Clear; will be called and passed the value of 'clear_options'. Tests to see if the destructor has been called on the object.; If so, or if the object has never been constructed the class constructor is called using; New(). If not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. void Clear(Option_t* option = """"); Clear the clones array. Only use this routine when your objects don't; allocate memory since it will not call the object dtors.; However, if the class in the TClonesArray implements the function; Cle",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:18810,Usability,Clear,Clear,18810,"; Get an object at index 'idx' that is guaranteed to have been constructed.; It might be either a freshly allocated object or one that had already been; allocated (and assumingly used). In the later case, it is the callers; responsability to insure that the object is returned to a known state,; usually by calling the Clear method on the TClonesArray. Tests to see if the destructor has been called on the object.; If so, or if the object has never been constructed the class constructor is called using; New(). If not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. TObject * ConstructedAt(Int_t idx, Option_t* clear_options); Get an object at index 'idx' that is guaranteed to have been constructed.; It might be either a freshly allocated object or one that had already been; allocated (and assumingly used). In the later case, the function Clear; will be called and passed the value of 'clear_options'. Tests to see if the destructor has been called on the object.; If so, or if the object has never been constructed the class constructor is called using; New(). If not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. void Clear(Option_t* option = """"); Clear the clones array. Only use this routine when your objects don't; allocate memory since it will not call the object dtors.; However, if the class in the TClonesArray implements the function; Clear(Option_t *option) and if option = ""C"" the function Clear(); is called for all objects in the array. In the function Clear(), one; can delete objects or dynamic arrays allocated in the class.; This procedure is much faster than calling TClonesArray::Delete().; When the option starts with ""C+"", eg ""C+xyz"" the objects in the array; are in turn cleared with the",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:19209,Usability,Clear,Clear,19209," the TClonesArray. Tests to see if the destructor has been called on the object.; If so, or if the object has never been constructed the class constructor is called using; New(). If not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. TObject * ConstructedAt(Int_t idx, Option_t* clear_options); Get an object at index 'idx' that is guaranteed to have been constructed.; It might be either a freshly allocated object or one that had already been; allocated (and assumingly used). In the later case, the function Clear; will be called and passed the value of 'clear_options'. Tests to see if the destructor has been called on the object.; If so, or if the object has never been constructed the class constructor is called using; New(). If not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. void Clear(Option_t* option = """"); Clear the clones array. Only use this routine when your objects don't; allocate memory since it will not call the object dtors.; However, if the class in the TClonesArray implements the function; Clear(Option_t *option) and if option = ""C"" the function Clear(); is called for all objects in the array. In the function Clear(), one; can delete objects or dynamic arrays allocated in the class.; This procedure is much faster than calling TClonesArray::Delete().; When the option starts with ""C+"", eg ""C+xyz"" the objects in the array; are in turn cleared with the option ""xyz"". void Delete(Option_t* option = """"); Clear the clones array. Use this routine when your objects allocate; memory (e.g. objects inheriting from TNamed or containing TStrings; allocate memory). If not you better use Clear() since if is faster. void Expand(Int_t newSize); Expand or shrink the array to newSize elements. vo",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:19234,Usability,Clear,Clear,19234,"object has never been constructed the class constructor is called using; New(). If not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. TObject * ConstructedAt(Int_t idx, Option_t* clear_options); Get an object at index 'idx' that is guaranteed to have been constructed.; It might be either a freshly allocated object or one that had already been; allocated (and assumingly used). In the later case, the function Clear; will be called and passed the value of 'clear_options'. Tests to see if the destructor has been called on the object.; If so, or if the object has never been constructed the class constructor is called using; New(). If not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. void Clear(Option_t* option = """"); Clear the clones array. Only use this routine when your objects don't; allocate memory since it will not call the object dtors.; However, if the class in the TClonesArray implements the function; Clear(Option_t *option) and if option = ""C"" the function Clear(); is called for all objects in the array. In the function Clear(), one; can delete objects or dynamic arrays allocated in the class.; This procedure is much faster than calling TClonesArray::Delete().; When the option starts with ""C+"", eg ""C+xyz"" the objects in the array; are in turn cleared with the option ""xyz"". void Delete(Option_t* option = """"); Clear the clones array. Use this routine when your objects allocate; memory (e.g. objects inheriting from TNamed or containing TStrings; allocate memory). If not you better use Clear() since if is faster. void Expand(Int_t newSize); Expand or shrink the array to newSize elements. void ExpandCreate(Int_t n); Expand or shrink the array to n elements and create the clone; objects by",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:19264,Usability,Clear,Clear,19264,"object has never been constructed the class constructor is called using; New(). If not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. TObject * ConstructedAt(Int_t idx, Option_t* clear_options); Get an object at index 'idx' that is guaranteed to have been constructed.; It might be either a freshly allocated object or one that had already been; allocated (and assumingly used). In the later case, the function Clear; will be called and passed the value of 'clear_options'. Tests to see if the destructor has been called on the object.; If so, or if the object has never been constructed the class constructor is called using; New(). If not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. void Clear(Option_t* option = """"); Clear the clones array. Only use this routine when your objects don't; allocate memory since it will not call the object dtors.; However, if the class in the TClonesArray implements the function; Clear(Option_t *option) and if option = ""C"" the function Clear(); is called for all objects in the array. In the function Clear(), one; can delete objects or dynamic arrays allocated in the class.; This procedure is much faster than calling TClonesArray::Delete().; When the option starts with ""C+"", eg ""C+xyz"" the objects in the array; are in turn cleared with the option ""xyz"". void Delete(Option_t* option = """"); Clear the clones array. Use this routine when your objects allocate; memory (e.g. objects inheriting from TNamed or containing TStrings; allocate memory). If not you better use Clear() since if is faster. void Expand(Int_t newSize); Expand or shrink the array to newSize elements. void ExpandCreate(Int_t n); Expand or shrink the array to n elements and create the clone; objects by",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:19460,Usability,Clear,Clear,19460,"set (but not deallocated) in their Clear(); functions. TObject * ConstructedAt(Int_t idx, Option_t* clear_options); Get an object at index 'idx' that is guaranteed to have been constructed.; It might be either a freshly allocated object or one that had already been; allocated (and assumingly used). In the later case, the function Clear; will be called and passed the value of 'clear_options'. Tests to see if the destructor has been called on the object.; If so, or if the object has never been constructed the class constructor is called using; New(). If not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. void Clear(Option_t* option = """"); Clear the clones array. Only use this routine when your objects don't; allocate memory since it will not call the object dtors.; However, if the class in the TClonesArray implements the function; Clear(Option_t *option) and if option = ""C"" the function Clear(); is called for all objects in the array. In the function Clear(), one; can delete objects or dynamic arrays allocated in the class.; This procedure is much faster than calling TClonesArray::Delete().; When the option starts with ""C+"", eg ""C+xyz"" the objects in the array; are in turn cleared with the option ""xyz"". void Delete(Option_t* option = """"); Clear the clones array. Use this routine when your objects allocate; memory (e.g. objects inheriting from TNamed or containing TStrings; allocate memory). If not you better use Clear() since if is faster. void Expand(Int_t newSize); Expand or shrink the array to newSize elements. void ExpandCreate(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrunk and the allocated space is freed.; This routine is typically used to create a clonesarray into which; one can directly copy object data",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:19517,Usability,Clear,Clear,19517,"set (but not deallocated) in their Clear(); functions. TObject * ConstructedAt(Int_t idx, Option_t* clear_options); Get an object at index 'idx' that is guaranteed to have been constructed.; It might be either a freshly allocated object or one that had already been; allocated (and assumingly used). In the later case, the function Clear; will be called and passed the value of 'clear_options'. Tests to see if the destructor has been called on the object.; If so, or if the object has never been constructed the class constructor is called using; New(). If not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. void Clear(Option_t* option = """"); Clear the clones array. Only use this routine when your objects don't; allocate memory since it will not call the object dtors.; However, if the class in the TClonesArray implements the function; Clear(Option_t *option) and if option = ""C"" the function Clear(); is called for all objects in the array. In the function Clear(), one; can delete objects or dynamic arrays allocated in the class.; This procedure is much faster than calling TClonesArray::Delete().; When the option starts with ""C+"", eg ""C+xyz"" the objects in the array; are in turn cleared with the option ""xyz"". void Delete(Option_t* option = """"); Clear the clones array. Use this routine when your objects allocate; memory (e.g. objects inheriting from TNamed or containing TStrings; allocate memory). If not you better use Clear() since if is faster. void Expand(Int_t newSize); Expand or shrink the array to newSize elements. void ExpandCreate(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrunk and the allocated space is freed.; This routine is typically used to create a clonesarray into which; one can directly copy object data",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:19582,Usability,Clear,Clear,19582," index 'idx' that is guaranteed to have been constructed.; It might be either a freshly allocated object or one that had already been; allocated (and assumingly used). In the later case, the function Clear; will be called and passed the value of 'clear_options'. Tests to see if the destructor has been called on the object.; If so, or if the object has never been constructed the class constructor is called using; New(). If not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. void Clear(Option_t* option = """"); Clear the clones array. Only use this routine when your objects don't; allocate memory since it will not call the object dtors.; However, if the class in the TClonesArray implements the function; Clear(Option_t *option) and if option = ""C"" the function Clear(); is called for all objects in the array. In the function Clear(), one; can delete objects or dynamic arrays allocated in the class.; This procedure is much faster than calling TClonesArray::Delete().; When the option starts with ""C+"", eg ""C+xyz"" the objects in the array; are in turn cleared with the option ""xyz"". void Delete(Option_t* option = """"); Clear the clones array. Use this routine when your objects allocate; memory (e.g. objects inheriting from TNamed or containing TStrings; allocate memory). If not you better use Clear() since if is faster. void Expand(Int_t newSize); Expand or shrink the array to newSize elements. void ExpandCreate(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrunk and the allocated space is freed.; This routine is typically used to create a clonesarray into which; one can directly copy object data without going via the; ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly). void ExpandCreateFast(Int_t n); Expand or sh",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:19809,Usability,clear,cleared,19809,"the later case, the function Clear; will be called and passed the value of 'clear_options'. Tests to see if the destructor has been called on the object.; If so, or if the object has never been constructed the class constructor is called using; New(). If not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. void Clear(Option_t* option = """"); Clear the clones array. Only use this routine when your objects don't; allocate memory since it will not call the object dtors.; However, if the class in the TClonesArray implements the function; Clear(Option_t *option) and if option = ""C"" the function Clear(); is called for all objects in the array. In the function Clear(), one; can delete objects or dynamic arrays allocated in the class.; This procedure is much faster than calling TClonesArray::Delete().; When the option starts with ""C+"", eg ""C+xyz"" the objects in the array; are in turn cleared with the option ""xyz"". void Delete(Option_t* option = """"); Clear the clones array. Use this routine when your objects allocate; memory (e.g. objects inheriting from TNamed or containing TStrings; allocate memory). If not you better use Clear() since if is faster. void Expand(Int_t newSize); Expand or shrink the array to newSize elements. void ExpandCreate(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrunk and the allocated space is freed.; This routine is typically used to create a clonesarray into which; one can directly copy object data without going via the; ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly). void ExpandCreateFast(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrinked but the allocated space",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:19876,Usability,Clear,Clear,19876,"s'. Tests to see if the destructor has been called on the object.; If so, or if the object has never been constructed the class constructor is called using; New(). If not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. void Clear(Option_t* option = """"); Clear the clones array. Only use this routine when your objects don't; allocate memory since it will not call the object dtors.; However, if the class in the TClonesArray implements the function; Clear(Option_t *option) and if option = ""C"" the function Clear(); is called for all objects in the array. In the function Clear(), one; can delete objects or dynamic arrays allocated in the class.; This procedure is much faster than calling TClonesArray::Delete().; When the option starts with ""C+"", eg ""C+xyz"" the objects in the array; are in turn cleared with the option ""xyz"". void Delete(Option_t* option = """"); Clear the clones array. Use this routine when your objects allocate; memory (e.g. objects inheriting from TNamed or containing TStrings; allocate memory). If not you better use Clear() since if is faster. void Expand(Int_t newSize); Expand or shrink the array to newSize elements. void ExpandCreate(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrunk and the allocated space is freed.; This routine is typically used to create a clonesarray into which; one can directly copy object data without going via the; ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly). void ExpandCreateFast(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrinked but the allocated space is _not_ freed.; This routine is typically used to create a clonesarray into which; on",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:20053,Usability,Clear,Clear,20053,"er to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. void Clear(Option_t* option = """"); Clear the clones array. Only use this routine when your objects don't; allocate memory since it will not call the object dtors.; However, if the class in the TClonesArray implements the function; Clear(Option_t *option) and if option = ""C"" the function Clear(); is called for all objects in the array. In the function Clear(), one; can delete objects or dynamic arrays allocated in the class.; This procedure is much faster than calling TClonesArray::Delete().; When the option starts with ""C+"", eg ""C+xyz"" the objects in the array; are in turn cleared with the option ""xyz"". void Delete(Option_t* option = """"); Clear the clones array. Use this routine when your objects allocate; memory (e.g. objects inheriting from TNamed or containing TStrings; allocate memory). If not you better use Clear() since if is faster. void Expand(Int_t newSize); Expand or shrink the array to newSize elements. void ExpandCreate(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrunk and the allocated space is freed.; This routine is typically used to create a clonesarray into which; one can directly copy object data without going via the; ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly). void ExpandCreateFast(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrinked but the allocated space is _not_ freed.; This routine is typically used to create a clonesarray into which; one can directly copy object data without going via the; ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly).; This is a simplified version of ExpandCreate used in the TTree me",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TClonesArray.html:21000,Usability,simpl,simplified,21000,"ory). If not you better use Clear() since if is faster. void Expand(Int_t newSize); Expand or shrink the array to newSize elements. void ExpandCreate(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrunk and the allocated space is freed.; This routine is typically used to create a clonesarray into which; one can directly copy object data without going via the; ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly). void ExpandCreateFast(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrinked but the allocated space is _not_ freed.; This routine is typically used to create a clonesarray into which; one can directly copy object data without going via the; ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly).; This is a simplified version of ExpandCreate used in the TTree mechanism. TObject * RemoveAt(Int_t idx); Remove object at index idx. TObject * Remove(TObject* obj); Remove object from array. void RemoveRange(Int_t idx1, Int_t idx2); Remove objects from index idx1 to idx2 included. void SetClass(const TClass* cl, Int_t size = 1000); Create an array of clone objects of class cl. The class must inherit from; TObject. If the class defines an own operator delete(), make sure that; it looks like this:. void MyClass::operator delete(void *vp); {; if ((Long_t) vp != TObject::GetDtorOnly()); ::operator delete(vp); // delete space; else; TObject::SetDtorOnly(0);; }. The second argument s indicates an approximate number of objects; that will be entered in the array. If more than s objects are entered,; the array will be automatically expanded. NB: This function should not be called in the TClonesArray is already; initialized with a class. void SetClass(const char* classname, Int_t size = 1000); see TClonesArray::SetClass(const TCla",MatchSource.WIKI,root/html532/TClonesArray.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TClonesArray.html
https://root.cern/root/html532/TCollection.html:1344,Availability,avail,available,1344," describes the base; protocol all collection classes have to implement. The ROOT; collection classes always store pointers to objects that inherit; from TObject. They never adopt the objects. Therefore, it is the; user's responsability to take care of deleting the actual objects; once they are not needed anymore. In exceptional cases, when the; user is 100% sure nothing else is referencing the objects in the; collection, one can delete all objects and the collection at the; same time using the Delete() function. Collections can be iterated using an iterator object (see; TIterator). Depending on the concrete collection class there may be; some additional methods of iterating. See the repective classes. TCollection inherits from TObject since we want to be able to have; collections of collections. In a later release the collections may become templatized. /*. */. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TCollection(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TObject* obj); virtual voidAddAll(const TCollection* col); voidAddVector(TObject* obj1); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tAssertClass(TClass* cl) const; virtual voidBrowse(TBrowser* b); Int_tCapacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; Bool_tContains(const char* name) const; Bool_tContains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDelete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDump() ",MatchSource.WIKI,root/html532/TCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollection.html
https://root.cern/root/html532/TCollection.html:2402,Availability,Error,Error,2402,"TObject::AbstractMethod(const char* method) const; virtual voidAdd(TObject* obj); virtual voidAddAll(const TCollection* col); voidAddVector(TObject* obj1); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tAssertClass(TClass* cl) const; virtual voidBrowse(TBrowser* b); Int_tCapacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; Bool_tContains(const char* name) const; Bool_tContains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDelete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDump() const; static voidEmptyGarbageCollection(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*FindObject(const char* name) const; virtual TObject*FindObject(const TObject* obj) const; static voidGarbageCollect(TObject* obj); static TCollection*GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntries() const; virtual const char*TObject::GetIconName() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tGetSize() const; virtual ",MatchSource.WIKI,root/html532/TCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollection.html
https://root.cern/root/html532/TCollection.html:2531,Availability,error,error,2531,"dAddVector(TObject* obj1); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tAssertClass(TClass* cl) const; virtual voidBrowse(TBrowser* b); Int_tCapacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; Bool_tContains(const char* name) const; Bool_tContains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDelete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDump() const; static voidEmptyGarbageCollection(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*FindObject(const char* name) const; virtual TObject*FindObject(const TObject* obj) const; static voidGarbageCollect(TObject* obj); static TCollection*GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntries() const; virtual const char*TObject::GetIconName() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tGetSize() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Int_tGrowBy(Int_t delta) const; virtual",MatchSource.WIKI,root/html532/TCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollection.html
https://root.cern/root/html532/TCollection.html:2615,Availability,error,error,2615,"ol_tAssertClass(TClass* cl) const; virtual voidBrowse(TBrowser* b); Int_tCapacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; Bool_tContains(const char* name) const; Bool_tContains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDelete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDump() const; static voidEmptyGarbageCollection(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*FindObject(const char* name) const; virtual TObject*FindObject(const TObject* obj) const; static voidGarbageCollect(TObject* obj); static TCollection*GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntries() const; virtual const char*TObject::GetIconName() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tGetSize() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Int_tGrowBy(Int_t delta) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tHash() const; virtual voi",MatchSource.WIKI,root/html532/TCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollection.html
https://root.cern/root/html532/TCollection.html:1154,Deployability,release,release,1154,"ion; function members; data members; class charts. ROOT; » CORE; » CONT; » TCollection. class TCollection: public TObject. Collection abstract base class. This class describes the base; protocol all collection classes have to implement. The ROOT; collection classes always store pointers to objects that inherit; from TObject. They never adopt the objects. Therefore, it is the; user's responsability to take care of deleting the actual objects; once they are not needed anymore. In exceptional cases, when the; user is 100% sure nothing else is referencing the objects in the; collection, one can delete all objects and the collection at the; same time using the Delete() function. Collections can be iterated using an iterator object (see; TIterator). Depending on the concrete collection class there may be; some additional methods of iterating. See the repective classes. TCollection inherits from TObject since we want to be able to have; collections of collections. In a later release the collections may become templatized. /*. */. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TCollection(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TObject* obj); virtual voidAddAll(const TCollection* col); voidAddVector(TObject* obj1); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tAssertClass(TClass* cl) const; virtual voidBrowse(TBrowser* b); Int_tCapacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; Bool_tContains(const char* name) const; Bool_tContains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDelete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual vo",MatchSource.WIKI,root/html532/TCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollection.html
https://root.cern/root/html532/TCollection.html:9439,Energy Efficiency,efficient,efficient,9439,"= """") const; Make a clone of an collection using the Streamer facility.; If newname is specified, this will be the name of the new collection. Int_t Compare(const TObject* obj) const; Compare two TCollection objects. Returns 0 when equal, -1 when this is; smaller and +1 when bigger (like strcmp()). void Draw(Option_t* option = """"); Draw all objects in this collection. void Dump() const; Dump all objects in this collection. TObject * FindObject(const char* name) const; Find an object in this collection using its name. Requires a sequential; scan till the object has been found. Returns 0 if object with specified; name is not found. TObject * operator()(const char* name) const; Find an object in this collection by name. TObject * FindObject(const TObject* obj) const; Find an object in this collection using the object's IsEqual(); member function. Requires a sequential scan till the object has; been found. Returns 0 if object is not found.; Typically this function is overridden by a more efficient version; in concrete collection classes (e.g. THashTable). const char * GetName() const; Return name of this collection.; if no name, return the collection class name. Int_t GrowBy(Int_t delta) const; Increase the collection's capacity by delta slots. Bool_t IsArgNull(const char* where, const TObject* obj) const; Returns true if object is a null pointer. void ls(Option_t* option = """") const; List (ls) all objects in this collection.; Wildcarding supported, eg option=""xxx*"" lists only objects; with names xxx*. void Paint(Option_t* option = """"); Paint all objects in this collection. void PrintCollectionHeader(Option_t* option) const; Print the collection header. const char* GetCollectionEntryName(TObject* entry) const; For given collection entry return the string that is used to; identify the object and, potentially, perform wildcard/regexp; filtering on. void PrintCollectionEntry(TObject* entry, Option_t* option, Int_t recurse) const; Print the collection entry. void Print(Optio",MatchSource.WIKI,root/html532/TCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollection.html
https://root.cern/root/html532/TCollection.html:357,Integrability,protocol,protocol,357,". TCollection. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TCollection. class TCollection: public TObject. Collection abstract base class. This class describes the base; protocol all collection classes have to implement. The ROOT; collection classes always store pointers to objects that inherit; from TObject. They never adopt the objects. Therefore, it is the; user's responsability to take care of deleting the actual objects; once they are not needed anymore. In exceptional cases, when the; user is 100% sure nothing else is referencing the objects in the; collection, one can delete all objects and the collection at the; same time using the Delete() function. Collections can be iterated using an iterator object (see; TIterator). Depending on the concrete collection class there may be; some additional methods of iterating. See the repective classes. TCollection inherits from TObject since we want to be able to have; collections of collections. In a later release the collections may become templatized. /*. */. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TCollection(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TObject* obj); virtual voidAddAll(const TCollection* col); voidAddVector(TObject* obj1); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tAssertClass(TClass* cl) const; virtual voidBrowse(TBrowser* b); Int_tCapacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; Bool_tContains(const char* name) const; Bool_tContains(const TObject* obj) co",MatchSource.WIKI,root/html532/TCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollection.html
https://root.cern/root/html532/TCollection.html:925,Integrability,Depend,Depending,925,". TCollection. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TCollection. class TCollection: public TObject. Collection abstract base class. This class describes the base; protocol all collection classes have to implement. The ROOT; collection classes always store pointers to objects that inherit; from TObject. They never adopt the objects. Therefore, it is the; user's responsability to take care of deleting the actual objects; once they are not needed anymore. In exceptional cases, when the; user is 100% sure nothing else is referencing the objects in the; collection, one can delete all objects and the collection at the; same time using the Delete() function. Collections can be iterated using an iterator object (see; TIterator). Depending on the concrete collection class there may be; some additional methods of iterating. See the repective classes. TCollection inherits from TObject since we want to be able to have; collections of collections. In a later release the collections may become templatized. /*. */. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TCollection(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TObject* obj); virtual voidAddAll(const TCollection* col); voidAddVector(TObject* obj1); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tAssertClass(TClass* cl) const; virtual voidBrowse(TBrowser* b); Int_tCapacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; Bool_tContains(const char* name) const; Bool_tContains(const TObject* obj) co",MatchSource.WIKI,root/html532/TCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollection.html
https://root.cern/root/html532/TCollection.html:13960,Integrability,depend,depending,13960,"bufsize = 0); Write all objects in this collection. By default all objects in; the collection are written individually (each object gets its; own key). Note, this is recursive, i.e. objects in collections; in the collection are also written individually. To write all; objects using a single key specify a name and set option to; TObject::kSingleKey (i.e. 1). TCollection * GetCurrentCollection(); Return the globally accessible collection. void SetCurrentCollection(); Set this collection to be the globally accesible collection. void StartGarbageCollection(); Set up for garbage collection. void EmptyGarbageCollection(); Do the garbage collection. void GarbageCollect(TObject* obj); Add to the list of things to be cleaned up. void SetOwner(Bool_t enable = kTRUE); Set whether this collection is the owner (enable==true); of its content. If it is the owner of its contents,; these objects will be deleted whenever the collection itself; is delete. The objects might also be deleted or destructed when Clear; is called (depending on the collection). void operator=(const TCollection& ). virtual ~TCollection(); { }. void Add(TObject* obj). Int_t Capacity() const; { return fSize; }. void Clear(Option_t* option = """"). Bool_t Contains(const char* name) const; { return FindObject(name) != 0; }. Bool_t Contains(const TObject* obj) const; { return FindObject(obj) != 0; }. void Delete(Option_t* option = """"). Int_t GetEntries() const; { return GetSize(); }. TObject ** GetObjectRef(const TObject* obj) const. Int_t GetSize() const; { return fSize; }. ULong_t Hash() const; { return fName.Hash(); }. Bool_t IsEmpty() const; { return GetSize() <= 0; }. Bool_t IsFolder() const; { return kTRUE; }. Bool_t IsOwner() const; { return TestBit(kIsOwner); }. Bool_t IsSortable() const; { return kTRUE; }. TIterator * MakeIterator(Bool_t dir = kIterForward) const. TIterator * MakeReverseIterator() const; { return MakeIterator(kIterBackward); }. TObject * Remove(TObject* obj). void RemoveAll(TCollection* col)",MatchSource.WIKI,root/html532/TCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollection.html
https://root.cern/root/html532/TCollection.html:475,Modifiability,inherit,inherit,475,". TCollection. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TCollection. class TCollection: public TObject. Collection abstract base class. This class describes the base; protocol all collection classes have to implement. The ROOT; collection classes always store pointers to objects that inherit; from TObject. They never adopt the objects. Therefore, it is the; user's responsability to take care of deleting the actual objects; once they are not needed anymore. In exceptional cases, when the; user is 100% sure nothing else is referencing the objects in the; collection, one can delete all objects and the collection at the; same time using the Delete() function. Collections can be iterated using an iterator object (see; TIterator). Depending on the concrete collection class there may be; some additional methods of iterating. See the repective classes. TCollection inherits from TObject since we want to be able to have; collections of collections. In a later release the collections may become templatized. /*. */. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TCollection(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TObject* obj); virtual voidAddAll(const TCollection* col); voidAddVector(TObject* obj1); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tAssertClass(TClass* cl) const; virtual voidBrowse(TBrowser* b); Int_tCapacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; Bool_tContains(const char* name) const; Bool_tContains(const TObject* obj) co",MatchSource.WIKI,root/html532/TCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollection.html
https://root.cern/root/html532/TCollection.html:1059,Modifiability,inherit,inherits,1059,"der file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TCollection. class TCollection: public TObject. Collection abstract base class. This class describes the base; protocol all collection classes have to implement. The ROOT; collection classes always store pointers to objects that inherit; from TObject. They never adopt the objects. Therefore, it is the; user's responsability to take care of deleting the actual objects; once they are not needed anymore. In exceptional cases, when the; user is 100% sure nothing else is referencing the objects in the; collection, one can delete all objects and the collection at the; same time using the Delete() function. Collections can be iterated using an iterator object (see; TIterator). Depending on the concrete collection class there may be; some additional methods of iterating. See the repective classes. TCollection inherits from TObject since we want to be able to have; collections of collections. In a later release the collections may become templatized. /*. */. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TCollection(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TObject* obj); virtual voidAddAll(const TCollection* col); voidAddVector(TObject* obj1); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tAssertClass(TClass* cl) const; virtual voidBrowse(TBrowser* b); Int_tCapacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; Bool_tContains(const char* name) const; Bool_tContains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDelete(Option_t* option = ",MatchSource.WIKI,root/html532/TCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollection.html
https://root.cern/root/html532/TCollection.html:3703,Modifiability,Inherit,InheritsFrom,3703,"bject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*FindObject(const char* name) const; virtual TObject*FindObject(const TObject* obj) const; static voidGarbageCollect(TObject* obj); static TCollection*GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntries() const; virtual const char*TObject::GetIconName() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tGetSize() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Int_tGrowBy(Int_t delta) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tHash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsArgNull(const char* where, const TObject* obj) const; virtual Bool_tIsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tIsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tIsOwner() const; virtual Bool_tIsSortable() const; Bool_tTObject::IsZombie() const; virtual voidls(Option_t* option = """") const; virtual TIterator*MakeIterator(Bool_t dir = kIterForward) const; virtual TIterator*MakeReverseIterator() const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* pt",MatchSource.WIKI,root/html532/TCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollection.html
https://root.cern/root/html532/TCollection.html:3769,Modifiability,Inherit,InheritsFrom,3769,"l TObject*FindObject(const char* name) const; virtual TObject*FindObject(const TObject* obj) const; static voidGarbageCollect(TObject* obj); static TCollection*GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntries() const; virtual const char*TObject::GetIconName() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tGetSize() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Int_tGrowBy(Int_t delta) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tHash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsArgNull(const char* where, const TObject* obj) const; virtual Bool_tIsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tIsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tIsOwner() const; virtual Bool_tIsSortable() const; Bool_tTObject::IsZombie() const; virtual voidls(Option_t* option = """") const; virtual TIterator*MakeIterator(Bool_t dir = kIterForward) const; virtual TIterator*MakeReverseIterator() const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); vo",MatchSource.WIKI,root/html532/TCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollection.html
https://root.cern/root/html532/TCollection.html:7778,Modifiability,Inherit,Inheritance,7778,"tual const char*GetCollectionEntryName(TObject* entry) const; voidTObject::MakeZombie(); virtual voidPrintCollectionEntry(TObject* entry, Option_t* option, Int_t recurse) const; virtual voidPrintCollectionHeader(Option_t* option) const. private:. voidoperator=(const TCollection&). Data Members; public:. enum { kIsOwner; kInitCapacity; kInitHashTableCapacity; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringfNamename of the collection; Int_tfSizenumber of elements in collection. private:. static TCollection*fgCurrentCollectionused by macro R__FOR_EACH; static Bool_tfgEmptyingGarbageused by garbage collector; static TObjectTable*fgGarbageCollectionused by garbage collector; static Int_tfgGarbageStackused by garbage collector. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void AddAll(const TCollection* col); Add all objects from collection col to this collection. void AddVector(TObject *va_(obj1), ...); Add all arguments to the collection. The list of objects must be; temrinated by 0, e.g.: l.AddVector(o1, o2, o3, o4, 0);. Bool_t AssertClass(TClass* cl) const; Make sure all objects in this collection inherit from class cl. void Browse(TBrowser* b); Browse this collection (called by TBrowser).; If b=0, there is no Browse call TObject::Browse(0) instead.; This means TObject::Inspect() will be invoked indirectly. TObject * Clone(const char* newname = """") const; Make a clone of an collection using the Streamer facility.; If newname is specified, this will be the name of the new collection. Int_t Compare(const TObject* obj) const; Compare two TCollection objects. Returns 0 when equal, -1 when this is; smaller and +1 when bigger (like strcmp()). void Draw(Option_t* option = """"); Draw all objects in this colle",MatchSource.WIKI,root/html532/TCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollection.html
https://root.cern/root/html532/TCollection.html:7791,Modifiability,Inherit,Inherited,7791,"tual const char*GetCollectionEntryName(TObject* entry) const; voidTObject::MakeZombie(); virtual voidPrintCollectionEntry(TObject* entry, Option_t* option, Int_t recurse) const; virtual voidPrintCollectionHeader(Option_t* option) const. private:. voidoperator=(const TCollection&). Data Members; public:. enum { kIsOwner; kInitCapacity; kInitHashTableCapacity; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringfNamename of the collection; Int_tfSizenumber of elements in collection. private:. static TCollection*fgCurrentCollectionused by macro R__FOR_EACH; static Bool_tfgEmptyingGarbageused by garbage collector; static TObjectTable*fgGarbageCollectionused by garbage collector; static Int_tfgGarbageStackused by garbage collector. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void AddAll(const TCollection* col); Add all objects from collection col to this collection. void AddVector(TObject *va_(obj1), ...); Add all arguments to the collection. The list of objects must be; temrinated by 0, e.g.: l.AddVector(o1, o2, o3, o4, 0);. Bool_t AssertClass(TClass* cl) const; Make sure all objects in this collection inherit from class cl. void Browse(TBrowser* b); Browse this collection (called by TBrowser).; If b=0, there is no Browse call TObject::Browse(0) instead.; This means TObject::Inspect() will be invoked indirectly. TObject * Clone(const char* newname = """") const; Make a clone of an collection using the Streamer facility.; If newname is specified, this will be the name of the new collection. Int_t Compare(const TObject* obj) const; Compare two TCollection objects. Returns 0 when equal, -1 when this is; smaller and +1 when bigger (like strcmp()). void Draw(Option_t* option = """"); Draw all objects in this colle",MatchSource.WIKI,root/html532/TCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollection.html
https://root.cern/root/html532/TCollection.html:8190,Modifiability,inherit,inherit,8190,"y; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringfNamename of the collection; Int_tfSizenumber of elements in collection. private:. static TCollection*fgCurrentCollectionused by macro R__FOR_EACH; static Bool_tfgEmptyingGarbageused by garbage collector; static TObjectTable*fgGarbageCollectionused by garbage collector; static Int_tfgGarbageStackused by garbage collector. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void AddAll(const TCollection* col); Add all objects from collection col to this collection. void AddVector(TObject *va_(obj1), ...); Add all arguments to the collection. The list of objects must be; temrinated by 0, e.g.: l.AddVector(o1, o2, o3, o4, 0);. Bool_t AssertClass(TClass* cl) const; Make sure all objects in this collection inherit from class cl. void Browse(TBrowser* b); Browse this collection (called by TBrowser).; If b=0, there is no Browse call TObject::Browse(0) instead.; This means TObject::Inspect() will be invoked indirectly. TObject * Clone(const char* newname = """") const; Make a clone of an collection using the Streamer facility.; If newname is specified, this will be the name of the new collection. Int_t Compare(const TObject* obj) const; Compare two TCollection objects. Returns 0 when equal, -1 when this is; smaller and +1 when bigger (like strcmp()). void Draw(Option_t* option = """"); Draw all objects in this collection. void Dump() const; Dump all objects in this collection. TObject * FindObject(const char* name) const; Find an object in this collection using its name. Requires a sequential; scan till the object has been found. Returns 0 if object with specified; name is not found. TObject * operator()(const char* name) const; Find an object in this collection by ",MatchSource.WIKI,root/html532/TCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollection.html
https://root.cern/root/html532/TCollection.html:10276,Performance,perform,perform,10276,"Find an object in this collection using the object's IsEqual(); member function. Requires a sequential scan till the object has; been found. Returns 0 if object is not found.; Typically this function is overridden by a more efficient version; in concrete collection classes (e.g. THashTable). const char * GetName() const; Return name of this collection.; if no name, return the collection class name. Int_t GrowBy(Int_t delta) const; Increase the collection's capacity by delta slots. Bool_t IsArgNull(const char* where, const TObject* obj) const; Returns true if object is a null pointer. void ls(Option_t* option = """") const; List (ls) all objects in this collection.; Wildcarding supported, eg option=""xxx*"" lists only objects; with names xxx*. void Paint(Option_t* option = """"); Paint all objects in this collection. void PrintCollectionHeader(Option_t* option) const; Print the collection header. const char* GetCollectionEntryName(TObject* entry) const; For given collection entry return the string that is used to; identify the object and, potentially, perform wildcard/regexp; filtering on. void PrintCollectionEntry(TObject* entry, Option_t* option, Int_t recurse) const; Print the collection entry. void Print(Option_t* option = """") const; Defualt print for collections, calls Print(option, 1).; This will print the collection header and Print() methods of; all the collection entries. If you want to override Print() for a collection class, first; see if you can accomplish it by overriding the following protected; methods:; void PrintCollectionHeader(Option_t* option) const;; const char* GetCollectionEntryName(TObject* entry) const;; void PrintCollectionEntry(TObject* entry, Option_t* option, Int_t recurse) const;; Otherwise override the Print(Option_t *option, Int_t); variant. Remember to declare:; using TCollection::Print;; somewhere close to the method declaration. void Print(Option_t* option, Int_t recurse) const; Print the collection header and its elements. If recurse is n",MatchSource.WIKI,root/html532/TCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollection.html
https://root.cern/root/html532/TCollection.html:13356,Security,access,accessible,13356,"n col from this collection. void Streamer(TBuffer& b); Stream all objects in the collection to or from the I/O buffer. Int_t Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; Write all objects in this collection. By default all objects in; the collection are written individually (each object gets its; own key). Note, this is recursive, i.e. objects in collections; in the collection are also written individually. To write all; objects using a single key specify a name and set option to; TObject::kSingleKey (i.e. 1). Int_t Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); Write all objects in this collection. By default all objects in; the collection are written individually (each object gets its; own key). Note, this is recursive, i.e. objects in collections; in the collection are also written individually. To write all; objects using a single key specify a name and set option to; TObject::kSingleKey (i.e. 1). TCollection * GetCurrentCollection(); Return the globally accessible collection. void SetCurrentCollection(); Set this collection to be the globally accesible collection. void StartGarbageCollection(); Set up for garbage collection. void EmptyGarbageCollection(); Do the garbage collection. void GarbageCollect(TObject* obj); Add to the list of things to be cleaned up. void SetOwner(Bool_t enable = kTRUE); Set whether this collection is the owner (enable==true); of its content. If it is the owner of its contents,; these objects will be deleted whenever the collection itself; is delete. The objects might also be deleted or destructed when Clear; is called (depending on the collection). void operator=(const TCollection& ). virtual ~TCollection(); { }. void Add(TObject* obj). Int_t Capacity() const; { return fSize; }. void Clear(Option_t* option = """"). Bool_t Contains(const char* name) const; { return FindObject(name) != 0; }. Bool_t Contains(const TObject* obj) const; { return FindObject(obj) != 0; }. void Delete(Option_t* optio",MatchSource.WIKI,root/html532/TCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollection.html
https://root.cern/root/html532/TCollection.html:14497,Security,Hash,Hash,14497,"ssible collection. void SetCurrentCollection(); Set this collection to be the globally accesible collection. void StartGarbageCollection(); Set up for garbage collection. void EmptyGarbageCollection(); Do the garbage collection. void GarbageCollect(TObject* obj); Add to the list of things to be cleaned up. void SetOwner(Bool_t enable = kTRUE); Set whether this collection is the owner (enable==true); of its content. If it is the owner of its contents,; these objects will be deleted whenever the collection itself; is delete. The objects might also be deleted or destructed when Clear; is called (depending on the collection). void operator=(const TCollection& ). virtual ~TCollection(); { }. void Add(TObject* obj). Int_t Capacity() const; { return fSize; }. void Clear(Option_t* option = """"). Bool_t Contains(const char* name) const; { return FindObject(name) != 0; }. Bool_t Contains(const TObject* obj) const; { return FindObject(obj) != 0; }. void Delete(Option_t* option = """"). Int_t GetEntries() const; { return GetSize(); }. TObject ** GetObjectRef(const TObject* obj) const. Int_t GetSize() const; { return fSize; }. ULong_t Hash() const; { return fName.Hash(); }. Bool_t IsEmpty() const; { return GetSize() <= 0; }. Bool_t IsFolder() const; { return kTRUE; }. Bool_t IsOwner() const; { return TestBit(kIsOwner); }. Bool_t IsSortable() const; { return kTRUE; }. TIterator * MakeIterator(Bool_t dir = kIterForward) const. TIterator * MakeReverseIterator() const; { return MakeIterator(kIterBackward); }. TObject * Remove(TObject* obj). void RemoveAll(TCollection* col). void SetName(const char* name); { fName = name; }. » Author: Fons Rademakers 13/08/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id: TCollection.h 37411 2010-12-08 17:42:11Z pcanal $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollection.html
https://root.cern/root/html532/TCollection.html:14526,Security,Hash,Hash,14526,"ssible collection. void SetCurrentCollection(); Set this collection to be the globally accesible collection. void StartGarbageCollection(); Set up for garbage collection. void EmptyGarbageCollection(); Do the garbage collection. void GarbageCollect(TObject* obj); Add to the list of things to be cleaned up. void SetOwner(Bool_t enable = kTRUE); Set whether this collection is the owner (enable==true); of its content. If it is the owner of its contents,; these objects will be deleted whenever the collection itself; is delete. The objects might also be deleted or destructed when Clear; is called (depending on the collection). void operator=(const TCollection& ). virtual ~TCollection(); { }. void Add(TObject* obj). Int_t Capacity() const; { return fSize; }. void Clear(Option_t* option = """"). Bool_t Contains(const char* name) const; { return FindObject(name) != 0; }. Bool_t Contains(const TObject* obj) const; { return FindObject(obj) != 0; }. void Delete(Option_t* option = """"). Int_t GetEntries() const; { return GetSize(); }. TObject ** GetObjectRef(const TObject* obj) const. Int_t GetSize() const; { return fSize; }. ULong_t Hash() const; { return fName.Hash(); }. Bool_t IsEmpty() const; { return GetSize() <= 0; }. Bool_t IsFolder() const; { return kTRUE; }. Bool_t IsOwner() const; { return TestBit(kIsOwner); }. Bool_t IsSortable() const; { return kTRUE; }. TIterator * MakeIterator(Bool_t dir = kIterForward) const. TIterator * MakeReverseIterator() const; { return MakeIterator(kIterBackward); }. TObject * Remove(TObject* obj). void RemoveAll(TCollection* col). void SetName(const char* name); { fName = name; }. » Author: Fons Rademakers 13/08/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id: TCollection.h 37411 2010-12-08 17:42:11Z pcanal $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollection.html
https://root.cern/root/html532/TCollection.html:6345,Testability,Test,TestBit,6345,"ator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject*operator()(const char* name) const; virtual voidPaint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual voidPrint(Option_t* option, Int_t recurse) const; virtual voidPrint(Option_t* option, const char* wildcard, Int_t recurse = 1) const; virtual voidPrint(Option_t* option, TPRegexp& regexp, Int_t recurse = 1) const; virtual Int_tTObject::Read(const char* name); virtual voidRecursiveRemove(TObject* obj); virtual TObject*Remove(TObject* obj); voidRemoveAll(); virtual voidRemoveAll(TCollection* col); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCurrentCollection(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOwner(Bool_t enable = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); static voidStartGarbageCollection(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tWrite(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tWrite(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollection.html
https://root.cern/root/html532/TCollection.html:6384,Testability,Test,TestBits,6384,"ator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject*operator()(const char* name) const; virtual voidPaint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual voidPrint(Option_t* option, Int_t recurse) const; virtual voidPrint(Option_t* option, const char* wildcard, Int_t recurse = 1) const; virtual voidPrint(Option_t* option, TPRegexp& regexp, Int_t recurse = 1) const; virtual Int_tTObject::Read(const char* name); virtual voidRecursiveRemove(TObject* obj); virtual TObject*Remove(TObject* obj); voidRemoveAll(); virtual voidRemoveAll(TCollection* col); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCurrentCollection(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOwner(Bool_t enable = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); static voidStartGarbageCollection(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tWrite(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tWrite(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollection.html
https://root.cern/root/html532/TCollection.html:8118,Testability,Assert,AssertClass,8118,"y; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringfNamename of the collection; Int_tfSizenumber of elements in collection. private:. static TCollection*fgCurrentCollectionused by macro R__FOR_EACH; static Bool_tfgEmptyingGarbageused by garbage collector; static TObjectTable*fgGarbageCollectionused by garbage collector; static Int_tfgGarbageStackused by garbage collector. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void AddAll(const TCollection* col); Add all objects from collection col to this collection. void AddVector(TObject *va_(obj1), ...); Add all arguments to the collection. The list of objects must be; temrinated by 0, e.g.: l.AddVector(o1, o2, o3, o4, 0);. Bool_t AssertClass(TClass* cl) const; Make sure all objects in this collection inherit from class cl. void Browse(TBrowser* b); Browse this collection (called by TBrowser).; If b=0, there is no Browse call TObject::Browse(0) instead.; This means TObject::Inspect() will be invoked indirectly. TObject * Clone(const char* newname = """") const; Make a clone of an collection using the Streamer facility.; If newname is specified, this will be the name of the new collection. Int_t Compare(const TObject* obj) const; Compare two TCollection objects. Returns 0 when equal, -1 when this is; smaller and +1 when bigger (like strcmp()). void Draw(Option_t* option = """"); Draw all objects in this collection. void Dump() const; Dump all objects in this collection. TObject * FindObject(const char* name) const; Find an object in this collection using its name. Requires a sequential; scan till the object has been found. Returns 0 if object with specified; name is not found. TObject * operator()(const char* name) const; Find an object in this collection by ",MatchSource.WIKI,root/html532/TCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollection.html
https://root.cern/root/html532/TCollection.html:14666,Testability,Test,TestBit,14666,"ssible collection. void SetCurrentCollection(); Set this collection to be the globally accesible collection. void StartGarbageCollection(); Set up for garbage collection. void EmptyGarbageCollection(); Do the garbage collection. void GarbageCollect(TObject* obj); Add to the list of things to be cleaned up. void SetOwner(Bool_t enable = kTRUE); Set whether this collection is the owner (enable==true); of its content. If it is the owner of its contents,; these objects will be deleted whenever the collection itself; is delete. The objects might also be deleted or destructed when Clear; is called (depending on the collection). void operator=(const TCollection& ). virtual ~TCollection(); { }. void Add(TObject* obj). Int_t Capacity() const; { return fSize; }. void Clear(Option_t* option = """"). Bool_t Contains(const char* name) const; { return FindObject(name) != 0; }. Bool_t Contains(const TObject* obj) const; { return FindObject(obj) != 0; }. void Delete(Option_t* option = """"). Int_t GetEntries() const; { return GetSize(); }. TObject ** GetObjectRef(const TObject* obj) const. Int_t GetSize() const; { return fSize; }. ULong_t Hash() const; { return fName.Hash(); }. Bool_t IsEmpty() const; { return GetSize() <= 0; }. Bool_t IsFolder() const; { return kTRUE; }. Bool_t IsOwner() const; { return TestBit(kIsOwner); }. Bool_t IsSortable() const; { return kTRUE; }. TIterator * MakeIterator(Bool_t dir = kIterForward) const. TIterator * MakeReverseIterator() const; { return MakeIterator(kIterBackward); }. TObject * Remove(TObject* obj). void RemoveAll(TCollection* col). void SetName(const char* name); { fName = name; }. » Author: Fons Rademakers 13/08/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id: TCollection.h 37411 2010-12-08 17:42:11Z pcanal $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollection.html
https://root.cern/root/html532/TCollection.html:13942,Usability,Clear,Clear,13942,"bufsize = 0); Write all objects in this collection. By default all objects in; the collection are written individually (each object gets its; own key). Note, this is recursive, i.e. objects in collections; in the collection are also written individually. To write all; objects using a single key specify a name and set option to; TObject::kSingleKey (i.e. 1). TCollection * GetCurrentCollection(); Return the globally accessible collection. void SetCurrentCollection(); Set this collection to be the globally accesible collection. void StartGarbageCollection(); Set up for garbage collection. void EmptyGarbageCollection(); Do the garbage collection. void GarbageCollect(TObject* obj); Add to the list of things to be cleaned up. void SetOwner(Bool_t enable = kTRUE); Set whether this collection is the owner (enable==true); of its content. If it is the owner of its contents,; these objects will be deleted whenever the collection itself; is delete. The objects might also be deleted or destructed when Clear; is called (depending on the collection). void operator=(const TCollection& ). virtual ~TCollection(); { }. void Add(TObject* obj). Int_t Capacity() const; { return fSize; }. void Clear(Option_t* option = """"). Bool_t Contains(const char* name) const; { return FindObject(name) != 0; }. Bool_t Contains(const TObject* obj) const; { return FindObject(obj) != 0; }. void Delete(Option_t* option = """"). Int_t GetEntries() const; { return GetSize(); }. TObject ** GetObjectRef(const TObject* obj) const. Int_t GetSize() const; { return fSize; }. ULong_t Hash() const; { return fName.Hash(); }. Bool_t IsEmpty() const; { return GetSize() <= 0; }. Bool_t IsFolder() const; { return kTRUE; }. Bool_t IsOwner() const; { return TestBit(kIsOwner); }. Bool_t IsSortable() const; { return kTRUE; }. TIterator * MakeIterator(Bool_t dir = kIterForward) const. TIterator * MakeReverseIterator() const; { return MakeIterator(kIterBackward); }. TObject * Remove(TObject* obj). void RemoveAll(TCollection* col)",MatchSource.WIKI,root/html532/TCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollection.html
https://root.cern/root/html532/TCollection.html:14128,Usability,Clear,Clear,14128,"ons; in the collection are also written individually. To write all; objects using a single key specify a name and set option to; TObject::kSingleKey (i.e. 1). TCollection * GetCurrentCollection(); Return the globally accessible collection. void SetCurrentCollection(); Set this collection to be the globally accesible collection. void StartGarbageCollection(); Set up for garbage collection. void EmptyGarbageCollection(); Do the garbage collection. void GarbageCollect(TObject* obj); Add to the list of things to be cleaned up. void SetOwner(Bool_t enable = kTRUE); Set whether this collection is the owner (enable==true); of its content. If it is the owner of its contents,; these objects will be deleted whenever the collection itself; is delete. The objects might also be deleted or destructed when Clear; is called (depending on the collection). void operator=(const TCollection& ). virtual ~TCollection(); { }. void Add(TObject* obj). Int_t Capacity() const; { return fSize; }. void Clear(Option_t* option = """"). Bool_t Contains(const char* name) const; { return FindObject(name) != 0; }. Bool_t Contains(const TObject* obj) const; { return FindObject(obj) != 0; }. void Delete(Option_t* option = """"). Int_t GetEntries() const; { return GetSize(); }. TObject ** GetObjectRef(const TObject* obj) const. Int_t GetSize() const; { return fSize; }. ULong_t Hash() const; { return fName.Hash(); }. Bool_t IsEmpty() const; { return GetSize() <= 0; }. Bool_t IsFolder() const; { return kTRUE; }. Bool_t IsOwner() const; { return TestBit(kIsOwner); }. Bool_t IsSortable() const; { return kTRUE; }. TIterator * MakeIterator(Bool_t dir = kIterForward) const. TIterator * MakeReverseIterator() const; { return MakeIterator(kIterBackward); }. TObject * Remove(TObject* obj). void RemoveAll(TCollection* col). void SetName(const char* name); { fName = name; }. » Author: Fons Rademakers 13/08/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id: TCollection.h 37411 2",MatchSource.WIKI,root/html532/TCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollection.html
https://root.cern/root/html532/TCollectionClassStreamer.html:1338,Modifiability,Inherit,Inheritance,1338,"amer, public TCollectionStreamer. Small helper to save proxy environment in the event of; recursive calls. Function Members (Methods); public:. TCollectionClassStreamer(); TCollectionClassStreamer(const TCollectionClassStreamer& c); virtual~TCollectionClassStreamer(); voidTCollectionStreamer::AdoptStreamer(TGenCollectionProxy* streamer); virtual TClassStreamer*Generate() const; virtual const TClass*TClassStreamer::GetOnFileClass() const; TGenCollectionProxy*GetXYZ(); virtual voidoperator()(TBuffer& buff, void* obj); TClassStreamer&TClassStreamer::operator=(const TClassStreamer&); virtual voidTClassStreamer::SetOnFileClass(const TClass* cl); virtual voidStream(TBuffer& b, void* obj, const TClass* onfileClass); voidTCollectionStreamer::Streamer(TBuffer& refBuffer, void* obj, int siz, TClass* onFileClass). protected:. voidTCollectionStreamer::InvalidProxyError(). Data Members; protected:. TClassRefTClassStreamer::fOnFileClass; TGenCollectionProxy*TCollectionStreamer::fStreamer/ Pointer to worker streamer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCollectionClassStreamer(); Initializing constructor. { }. TCollectionClassStreamer(const TCollectionClassStreamer& c); Copy constructor. { }. virtual ~TCollectionClassStreamer(); Standard destructor. { }. void operator()(TBuffer& buff, void* obj); Streamer for I/O handling. { Streamer(buff,obj,0,fOnFileClass); }. void Stream(TBuffer& b, void* obj, const TClass* onfileClass). TClassStreamer * Generate() const; Virtual copy constructor. TGenCollectionProxy * GetXYZ(); { return TCollectionStreamer::fStreamer; }. » Author: Markus Frank 28/10/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id: TCollectionProxyFactory.h 41102 2011-10-03 21:42:02Z pcanal $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TCollectionClassStreamer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollectionClassStreamer.html
https://root.cern/root/html532/TCollectionClassStreamer.html:1351,Modifiability,Inherit,Inherited,1351,"amer, public TCollectionStreamer. Small helper to save proxy environment in the event of; recursive calls. Function Members (Methods); public:. TCollectionClassStreamer(); TCollectionClassStreamer(const TCollectionClassStreamer& c); virtual~TCollectionClassStreamer(); voidTCollectionStreamer::AdoptStreamer(TGenCollectionProxy* streamer); virtual TClassStreamer*Generate() const; virtual const TClass*TClassStreamer::GetOnFileClass() const; TGenCollectionProxy*GetXYZ(); virtual voidoperator()(TBuffer& buff, void* obj); TClassStreamer&TClassStreamer::operator=(const TClassStreamer&); virtual voidTClassStreamer::SetOnFileClass(const TClass* cl); virtual voidStream(TBuffer& b, void* obj, const TClass* onfileClass); voidTCollectionStreamer::Streamer(TBuffer& refBuffer, void* obj, int siz, TClass* onFileClass). protected:. voidTCollectionStreamer::InvalidProxyError(). Data Members; protected:. TClassRefTClassStreamer::fOnFileClass; TGenCollectionProxy*TCollectionStreamer::fStreamer/ Pointer to worker streamer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCollectionClassStreamer(); Initializing constructor. { }. TCollectionClassStreamer(const TCollectionClassStreamer& c); Copy constructor. { }. virtual ~TCollectionClassStreamer(); Standard destructor. { }. void operator()(TBuffer& buff, void* obj); Streamer for I/O handling. { Streamer(buff,obj,0,fOnFileClass); }. void Stream(TBuffer& b, void* obj, const TClass* onfileClass). TClassStreamer * Generate() const; Virtual copy constructor. TGenCollectionProxy * GetXYZ(); { return TCollectionStreamer::fStreamer; }. » Author: Markus Frank 28/10/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id: TCollectionProxyFactory.h 41102 2011-10-03 21:42:02Z pcanal $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TCollectionClassStreamer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollectionClassStreamer.html
https://root.cern/root/html532/TCollectionMemberStreamer.html:1186,Modifiability,Inherit,Inheritance,1186,". TCollectionMemberStreamer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TCollectionMemberStreamer. class TCollectionMemberStreamer: public TMemberStreamer, public TCollectionStreamer. Small helper to save proxy environment in the event of; recursive calls. Function Members (Methods); public:. TCollectionMemberStreamer(); TCollectionMemberStreamer(const TCollectionMemberStreamer& c); virtual~TCollectionMemberStreamer(); voidTCollectionStreamer::AdoptStreamer(TGenCollectionProxy* streamer); virtual const TClass*TMemberStreamer::GetOnFileClass() const; virtual voidoperator()(TBuffer& buff, void* obj, Int_t siz = 0); TMemberStreamer&TMemberStreamer::operator=(const TMemberStreamer&); virtual voidTMemberStreamer::SetOnFileClass(const TClass* cl); voidTCollectionStreamer::Streamer(TBuffer& refBuffer, void* obj, int siz, TClass* onFileClass). protected:. voidTCollectionStreamer::InvalidProxyError(). Data Members; protected:. TGenCollectionProxy*TCollectionStreamer::fStreamer/ Pointer to worker streamer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void operator()(TBuffer &buff, void *obj ); Streamer for I/O handling. { Streamer(buff,obj,0,fOnFileClass); }. TCollectionMemberStreamer(); Initializing constructor. { }. TCollectionMemberStreamer(const TCollectionMemberStreamer& c); Copy constructor. { }. virtual ~TCollectionMemberStreamer(); Standard destructor. { }. » Author: Markus Frank 28/10/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id: TCollectionProxyFactory.h 41102 2011-10-03 21:42:02Z pcanal $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TCollectionMemberStreamer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollectionMemberStreamer.html
https://root.cern/root/html532/TCollectionMemberStreamer.html:1199,Modifiability,Inherit,Inherited,1199,". TCollectionMemberStreamer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TCollectionMemberStreamer. class TCollectionMemberStreamer: public TMemberStreamer, public TCollectionStreamer. Small helper to save proxy environment in the event of; recursive calls. Function Members (Methods); public:. TCollectionMemberStreamer(); TCollectionMemberStreamer(const TCollectionMemberStreamer& c); virtual~TCollectionMemberStreamer(); voidTCollectionStreamer::AdoptStreamer(TGenCollectionProxy* streamer); virtual const TClass*TMemberStreamer::GetOnFileClass() const; virtual voidoperator()(TBuffer& buff, void* obj, Int_t siz = 0); TMemberStreamer&TMemberStreamer::operator=(const TMemberStreamer&); virtual voidTMemberStreamer::SetOnFileClass(const TClass* cl); voidTCollectionStreamer::Streamer(TBuffer& refBuffer, void* obj, int siz, TClass* onFileClass). protected:. voidTCollectionStreamer::InvalidProxyError(). Data Members; protected:. TGenCollectionProxy*TCollectionStreamer::fStreamer/ Pointer to worker streamer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void operator()(TBuffer &buff, void *obj ); Streamer for I/O handling. { Streamer(buff,obj,0,fOnFileClass); }. TCollectionMemberStreamer(); Initializing constructor. { }. TCollectionMemberStreamer(const TCollectionMemberStreamer& c); Copy constructor. { }. virtual ~TCollectionMemberStreamer(); Standard destructor. { }. » Author: Markus Frank 28/10/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id: TCollectionProxyFactory.h 41102 2011-10-03 21:42:02Z pcanal $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TCollectionMemberStreamer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollectionMemberStreamer.html
https://root.cern/root/html532/TCollectionMethodBrowsable.html:3129,Availability,Error,Error,3129,,MatchSource.WIKI,root/html532/TCollectionMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollectionMethodBrowsable.html
https://root.cern/root/html532/TCollectionMethodBrowsable.html:3258,Availability,error,error,3258,"CollectionMethodBrowsable&); virtual~TCollectionMethodBrowsable(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTVirtualBranchBrowsable::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); static Int_tTVirtualBranchBrowsable::FillListOfBrowsables(TList& list, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const TBranch*TVirtualBranchBrowsable::GetBranch() const; static Int_tGetBrowsables(TList& list, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); TClass*TVirtualBranchBrowsable::GetClassType() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TMethodBrowsable::GetIconName() const; TList*TVirtualBranchBrowsable::GetLeaves() const; virtual const char*TNamed::GetName() const; ",MatchSource.WIKI,root/html532/TCollectionMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollectionMethodBrowsable.html
https://root.cern/root/html532/TCollectionMethodBrowsable.html:3342,Availability,error,error,3342,"ractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTVirtualBranchBrowsable::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); static Int_tTVirtualBranchBrowsable::FillListOfBrowsables(TList& list, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const TBranch*TVirtualBranchBrowsable::GetBranch() const; static Int_tGetBrowsables(TList& list, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); TClass*TVirtualBranchBrowsable::GetClassType() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TMethodBrowsable::GetIconName() const; TList*TVirtualBranchBrowsable::GetLeaves() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject:",MatchSource.WIKI,root/html532/TCollectionMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollectionMethodBrowsable.html
https://root.cern/root/html532/TCollectionMethodBrowsable.html:9645,Integrability,Wrap,Wrapper,9645,"eListOfBrowsables_t generator). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCollectionMethodBrowsable(const TBranch* branch, TMethod* m, const TVirtualBranchBrowsable* parent = 0); Contructor, see TMethodBrowsable's constructor.; Prepends ""@"" to the name to make this method work on the container. Int_t GetBrowsables(TList& list, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); This methods fills list with TMethodBrowsables; for the branch's or parent's collection class and its base classes,; and returns the number of added elements. If called from a TBranch::Browse; overload, ""branch"" should be set to the calling TBranch, otherwise; ""parent"" should be set to the TVirtualBranchBrowsable being browsed. void Register(); Wrapper for the registration method. Needed against MSVC, which; assigned different addr to the same method, depending on what; translation unit you're in... void Unregister(); Wrapper for the registration method. Needed against MSVC, which; assigned different addr to the same method, depending on what; translation unit you're in... ~TCollectionMethodBrowsable(); {}. TCollectionMethodBrowsable(const TBranch* branch, TMethod* m, const TVirtualBranchBrowsable* parent = 0). » Author: Axel Naumann 14/10/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id: TBranchBrowsable.h 40605 2011-08-16 11:52:09Z rdm $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TCollectionMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollectionMethodBrowsable.html
https://root.cern/root/html532/TCollectionMethodBrowsable.html:9754,Integrability,depend,depending,9754,"eListOfBrowsables_t generator). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCollectionMethodBrowsable(const TBranch* branch, TMethod* m, const TVirtualBranchBrowsable* parent = 0); Contructor, see TMethodBrowsable's constructor.; Prepends ""@"" to the name to make this method work on the container. Int_t GetBrowsables(TList& list, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); This methods fills list with TMethodBrowsables; for the branch's or parent's collection class and its base classes,; and returns the number of added elements. If called from a TBranch::Browse; overload, ""branch"" should be set to the calling TBranch, otherwise; ""parent"" should be set to the TVirtualBranchBrowsable being browsed. void Register(); Wrapper for the registration method. Needed against MSVC, which; assigned different addr to the same method, depending on what; translation unit you're in... void Unregister(); Wrapper for the registration method. Needed against MSVC, which; assigned different addr to the same method, depending on what; translation unit you're in... ~TCollectionMethodBrowsable(); {}. TCollectionMethodBrowsable(const TBranch* branch, TMethod* m, const TVirtualBranchBrowsable* parent = 0). » Author: Axel Naumann 14/10/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id: TBranchBrowsable.h 40605 2011-08-16 11:52:09Z rdm $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TCollectionMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollectionMethodBrowsable.html
https://root.cern/root/html532/TCollectionMethodBrowsable.html:9822,Integrability,Wrap,Wrapper,9822,"eListOfBrowsables_t generator). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCollectionMethodBrowsable(const TBranch* branch, TMethod* m, const TVirtualBranchBrowsable* parent = 0); Contructor, see TMethodBrowsable's constructor.; Prepends ""@"" to the name to make this method work on the container. Int_t GetBrowsables(TList& list, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); This methods fills list with TMethodBrowsables; for the branch's or parent's collection class and its base classes,; and returns the number of added elements. If called from a TBranch::Browse; overload, ""branch"" should be set to the calling TBranch, otherwise; ""parent"" should be set to the TVirtualBranchBrowsable being browsed. void Register(); Wrapper for the registration method. Needed against MSVC, which; assigned different addr to the same method, depending on what; translation unit you're in... void Unregister(); Wrapper for the registration method. Needed against MSVC, which; assigned different addr to the same method, depending on what; translation unit you're in... ~TCollectionMethodBrowsable(); {}. TCollectionMethodBrowsable(const TBranch* branch, TMethod* m, const TVirtualBranchBrowsable* parent = 0). » Author: Axel Naumann 14/10/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id: TBranchBrowsable.h 40605 2011-08-16 11:52:09Z rdm $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TCollectionMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollectionMethodBrowsable.html
https://root.cern/root/html532/TCollectionMethodBrowsable.html:9931,Integrability,depend,depending,9931,"eListOfBrowsables_t generator). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCollectionMethodBrowsable(const TBranch* branch, TMethod* m, const TVirtualBranchBrowsable* parent = 0); Contructor, see TMethodBrowsable's constructor.; Prepends ""@"" to the name to make this method work on the container. Int_t GetBrowsables(TList& list, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); This methods fills list with TMethodBrowsables; for the branch's or parent's collection class and its base classes,; and returns the number of added elements. If called from a TBranch::Browse; overload, ""branch"" should be set to the calling TBranch, otherwise; ""parent"" should be set to the TVirtualBranchBrowsable being browsed. void Register(); Wrapper for the registration method. Needed against MSVC, which; assigned different addr to the same method, depending on what; translation unit you're in... void Unregister(); Wrapper for the registration method. Needed against MSVC, which; assigned different addr to the same method, depending on what; translation unit you're in... ~TCollectionMethodBrowsable(); {}. TCollectionMethodBrowsable(const TBranch* branch, TMethod* m, const TVirtualBranchBrowsable* parent = 0). » Author: Axel Naumann 14/10/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id: TBranchBrowsable.h 40605 2011-08-16 11:52:09Z rdm $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TCollectionMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollectionMethodBrowsable.html
https://root.cern/root/html532/TCollectionMethodBrowsable.html:458,Modifiability,extend,extend,458,". TCollectionMethodBrowsable. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TCollectionMethodBrowsable. class TCollectionMethodBrowsable: public TMethodBrowsable. TVirtualBranchBrowsable is a base class (not really abstract, but useless; by itself) for helper objects that extend TBranch's browsing support.; Each registered derived class's generator method is called, which fills; all created helper objects into a list which can then be browsed.; For details of what these browser helper objects can do, see e.g.; TMethodBrowsable, which allows methods to show up in the TBrowser. Only registered helper objects are created. By default, only; TMethodBrowsable, TNonSplitBrowsable, and TCollectionPropertyBrowsable; are registered (see RegisterDefaultGenerators). You can prevent any of; their objects to show up in the browser by unregistering the generator:; TMethodBrowsable::Unregister(); will stop creating browsable method helper objects from that call on.; Note that these helper objects are cached (in TBranch::fBrowsables);; already created (and thus cached) browsables will still appear in the; browser even after unregistering the corresponding generator. You can implement your own browsable objects and thier generator; see; e.g. the simple TCollectionPropertyBrowsable. Note that you will have; to register your generator just like any other, and that you should; implement the following methods for your own class, mainly for; consistency reasons:; static void Register() {; TVirtualBranchBrowsable::RegisterGenerator(GetBrowsables); }; static void Unregister() {; TVirtualBranchBrowsable::UnregisterGenerator(GetBrowsables); }; where GetBrowsables is a static member function of your class, that; creates the browsable helper objects, and has the signature; static Int_t GetBrowsables(TList& list, c",MatchSource.WIKI,root/html532/TCollectionMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollectionMethodBrowsable.html
https://root.cern/root/html532/TCollectionMethodBrowsable.html:4816,Modifiability,Inherit,InheritsFrom,4816,"rtualBranchBrowsable::GetBranch() const; static Int_tGetBrowsables(TList& list, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); TClass*TVirtualBranchBrowsable::GetClassType() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TMethodBrowsable::GetIconName() const; TList*TVirtualBranchBrowsable::GetLeaves() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const TVirtualBranchBrowsable*TVirtualBranchBrowsable::GetParent() const; voidTVirtualBranchBrowsable::GetScope(TString& scope) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTVirtualBranchBrowsable::IsFolder() const; static Bool_tTMethodBrowsable::IsMethodBrowsable(const TMethod* m); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::op",MatchSource.WIKI,root/html532/TCollectionMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollectionMethodBrowsable.html
https://root.cern/root/html532/TCollectionMethodBrowsable.html:4882,Modifiability,Inherit,InheritsFrom,4882,"(TList& list, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); TClass*TVirtualBranchBrowsable::GetClassType() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TMethodBrowsable::GetIconName() const; TList*TVirtualBranchBrowsable::GetLeaves() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const TVirtualBranchBrowsable*TVirtualBranchBrowsable::GetParent() const; voidTVirtualBranchBrowsable::GetScope(TString& scope) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTVirtualBranchBrowsable::IsFolder() const; static Bool_tTMethodBrowsable::IsMethodBrowsable(const TMethod* m); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size",MatchSource.WIKI,root/html532/TCollectionMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollectionMethodBrowsable.html
https://root.cern/root/html532/TCollectionMethodBrowsable.html:8898,Modifiability,Inherit,Inheritance,8898,"able::GetCollectionContainedType(const TBranch* b, const TVirtualBranchBrowsable* parent, TClass*& contained); static list<MethodCreateListOfBrowsables_t>&TVirtualBranchBrowsable::GetRegisteredGenerators(); voidTObject::MakeZombie(); static voidTVirtualBranchBrowsable::RegisterGenerator(TVirtualBranchBrowsable::MethodCreateListOfBrowsables_t generator); voidTVirtualBranchBrowsable::SetType(TClass* type); voidTVirtualBranchBrowsable::SetTypeIsPointer(Bool_t set = kTRUE); static voidTVirtualBranchBrowsable::UnregisterGenerator(TVirtualBranchBrowsable::MethodCreateListOfBrowsables_t generator). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCollectionMethodBrowsable(const TBranch* branch, TMethod* m, const TVirtualBranchBrowsable* parent = 0); Contructor, see TMethodBrowsable's constructor.; Prepends ""@"" to the name to make this method work on the container. Int_t GetBrowsables(TList& list, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); This methods fills list with TMethodBrowsables; for the branch's or parent's collection class and its base classes,; and returns the number of added elements. If called from a TBranch::Browse; overload, ""branch"" should be set to the calling TBranch, otherwise; ""parent"" should be set to the TVirtualBranchBrowsable being browsed. void Register(); Wrapper for the registration method. Needed against MSVC, which; assigned different addr to the same method, depending on what; translation unit you're in... void Unregister(); Wrapper for the registration method. Needed against MSVC, which; assigned different addr to the same m",MatchSource.WIKI,root/html532/TCollectionMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollectionMethodBrowsable.html
https://root.cern/root/html532/TCollectionMethodBrowsable.html:8911,Modifiability,Inherit,Inherited,8911,"able::GetCollectionContainedType(const TBranch* b, const TVirtualBranchBrowsable* parent, TClass*& contained); static list<MethodCreateListOfBrowsables_t>&TVirtualBranchBrowsable::GetRegisteredGenerators(); voidTObject::MakeZombie(); static voidTVirtualBranchBrowsable::RegisterGenerator(TVirtualBranchBrowsable::MethodCreateListOfBrowsables_t generator); voidTVirtualBranchBrowsable::SetType(TClass* type); voidTVirtualBranchBrowsable::SetTypeIsPointer(Bool_t set = kTRUE); static voidTVirtualBranchBrowsable::UnregisterGenerator(TVirtualBranchBrowsable::MethodCreateListOfBrowsables_t generator). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCollectionMethodBrowsable(const TBranch* branch, TMethod* m, const TVirtualBranchBrowsable* parent = 0); Contructor, see TMethodBrowsable's constructor.; Prepends ""@"" to the name to make this method work on the container. Int_t GetBrowsables(TList& list, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); This methods fills list with TMethodBrowsables; for the branch's or parent's collection class and its base classes,; and returns the number of added elements. If called from a TBranch::Browse; overload, ""branch"" should be set to the calling TBranch, otherwise; ""parent"" should be set to the TVirtualBranchBrowsable being browsed. void Register(); Wrapper for the registration method. Needed against MSVC, which; assigned different addr to the same method, depending on what; translation unit you're in... void Unregister(); Wrapper for the registration method. Needed against MSVC, which; assigned different addr to the same m",MatchSource.WIKI,root/html532/TCollectionMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollectionMethodBrowsable.html
https://root.cern/root/html532/TCollectionMethodBrowsable.html:1185,Performance,cache,cached,1185," » TREE; » TCollectionMethodBrowsable. class TCollectionMethodBrowsable: public TMethodBrowsable. TVirtualBranchBrowsable is a base class (not really abstract, but useless; by itself) for helper objects that extend TBranch's browsing support.; Each registered derived class's generator method is called, which fills; all created helper objects into a list which can then be browsed.; For details of what these browser helper objects can do, see e.g.; TMethodBrowsable, which allows methods to show up in the TBrowser. Only registered helper objects are created. By default, only; TMethodBrowsable, TNonSplitBrowsable, and TCollectionPropertyBrowsable; are registered (see RegisterDefaultGenerators). You can prevent any of; their objects to show up in the browser by unregistering the generator:; TMethodBrowsable::Unregister(); will stop creating browsable method helper objects from that call on.; Note that these helper objects are cached (in TBranch::fBrowsables);; already created (and thus cached) browsables will still appear in the; browser even after unregistering the corresponding generator. You can implement your own browsable objects and thier generator; see; e.g. the simple TCollectionPropertyBrowsable. Note that you will have; to register your generator just like any other, and that you should; implement the following methods for your own class, mainly for; consistency reasons:; static void Register() {; TVirtualBranchBrowsable::RegisterGenerator(GetBrowsables); }; static void Unregister() {; TVirtualBranchBrowsable::UnregisterGenerator(GetBrowsables); }; where GetBrowsables is a static member function of your class, that; creates the browsable helper objects, and has the signature; static Int_t GetBrowsables(TList& list, const TBranch* branch,; const TVirtualBranchBrowsable* parent=0);; It has to return the number of browsable helper objects for parent; (or, if NULL, for branch) which are added to the list. Function Members (Methods); public:. TCollectionMethodBrowsa",MatchSource.WIKI,root/html532/TCollectionMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollectionMethodBrowsable.html
https://root.cern/root/html532/TCollectionMethodBrowsable.html:1246,Performance,cache,cached,1246," » TREE; » TCollectionMethodBrowsable. class TCollectionMethodBrowsable: public TMethodBrowsable. TVirtualBranchBrowsable is a base class (not really abstract, but useless; by itself) for helper objects that extend TBranch's browsing support.; Each registered derived class's generator method is called, which fills; all created helper objects into a list which can then be browsed.; For details of what these browser helper objects can do, see e.g.; TMethodBrowsable, which allows methods to show up in the TBrowser. Only registered helper objects are created. By default, only; TMethodBrowsable, TNonSplitBrowsable, and TCollectionPropertyBrowsable; are registered (see RegisterDefaultGenerators). You can prevent any of; their objects to show up in the browser by unregistering the generator:; TMethodBrowsable::Unregister(); will stop creating browsable method helper objects from that call on.; Note that these helper objects are cached (in TBranch::fBrowsables);; already created (and thus cached) browsables will still appear in the; browser even after unregistering the corresponding generator. You can implement your own browsable objects and thier generator; see; e.g. the simple TCollectionPropertyBrowsable. Note that you will have; to register your generator just like any other, and that you should; implement the following methods for your own class, mainly for; consistency reasons:; static void Register() {; TVirtualBranchBrowsable::RegisterGenerator(GetBrowsables); }; static void Unregister() {; TVirtualBranchBrowsable::UnregisterGenerator(GetBrowsables); }; where GetBrowsables is a static member function of your class, that; creates the browsable helper objects, and has the signature; static Int_t GetBrowsables(TList& list, const TBranch* branch,; const TVirtualBranchBrowsable* parent=0);; It has to return the number of browsable helper objects for parent; (or, if NULL, for branch) which are added to the list. Function Members (Methods); public:. TCollectionMethodBrowsa",MatchSource.WIKI,root/html532/TCollectionMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollectionMethodBrowsable.html
https://root.cern/root/html532/TCollectionMethodBrowsable.html:4706,Security,Hash,Hash,4706,"ndObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const TBranch*TVirtualBranchBrowsable::GetBranch() const; static Int_tGetBrowsables(TList& list, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); TClass*TVirtualBranchBrowsable::GetClassType() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TMethodBrowsable::GetIconName() const; TList*TVirtualBranchBrowsable::GetLeaves() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const TVirtualBranchBrowsable*TVirtualBranchBrowsable::GetParent() const; voidTVirtualBranchBrowsable::GetScope(TString& scope) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTVirtualBranchBrowsable::IsFolder() const; static Bool_tTMethodBrowsable::IsMethodBrowsable(const TMethod* m); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); s",MatchSource.WIKI,root/html532/TCollectionMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollectionMethodBrowsable.html
https://root.cern/root/html532/TCollectionMethodBrowsable.html:7149,Testability,Test,TestBit,7149,"oid* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); static voidRegister(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTVirtualBranchBrowsable::TypeIsPointer() const; static voidUnregister(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TCollectionMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollectionMethodBrowsable.html
https://root.cern/root/html532/TCollectionMethodBrowsable.html:7188,Testability,Test,TestBits,7188,"oid* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); static voidRegister(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTVirtualBranchBrowsable::TypeIsPointer() const; static voidUnregister(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TCollectionMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollectionMethodBrowsable.html
https://root.cern/root/html532/TCollectionMethodBrowsable.html:1433,Usability,simpl,simple,1433,"ects that extend TBranch's browsing support.; Each registered derived class's generator method is called, which fills; all created helper objects into a list which can then be browsed.; For details of what these browser helper objects can do, see e.g.; TMethodBrowsable, which allows methods to show up in the TBrowser. Only registered helper objects are created. By default, only; TMethodBrowsable, TNonSplitBrowsable, and TCollectionPropertyBrowsable; are registered (see RegisterDefaultGenerators). You can prevent any of; their objects to show up in the browser by unregistering the generator:; TMethodBrowsable::Unregister(); will stop creating browsable method helper objects from that call on.; Note that these helper objects are cached (in TBranch::fBrowsables);; already created (and thus cached) browsables will still appear in the; browser even after unregistering the corresponding generator. You can implement your own browsable objects and thier generator; see; e.g. the simple TCollectionPropertyBrowsable. Note that you will have; to register your generator just like any other, and that you should; implement the following methods for your own class, mainly for; consistency reasons:; static void Register() {; TVirtualBranchBrowsable::RegisterGenerator(GetBrowsables); }; static void Unregister() {; TVirtualBranchBrowsable::UnregisterGenerator(GetBrowsables); }; where GetBrowsables is a static member function of your class, that; creates the browsable helper objects, and has the signature; static Int_t GetBrowsables(TList& list, const TBranch* branch,; const TVirtualBranchBrowsable* parent=0);; It has to return the number of browsable helper objects for parent; (or, if NULL, for branch) which are added to the list. Function Members (Methods); public:. TCollectionMethodBrowsable(const TCollectionMethodBrowsable&); virtual~TCollectionMethodBrowsable(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voi",MatchSource.WIKI,root/html532/TCollectionMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollectionMethodBrowsable.html
https://root.cern/root/html532/TCollectionMethodBrowsable.html:2586,Usability,Clear,Clear,2586,,MatchSource.WIKI,root/html532/TCollectionMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollectionMethodBrowsable.html
https://root.cern/root/html532/TCollectionPropertyBrowsable.html:3123,Availability,Error,Error,3123,,MatchSource.WIKI,root/html532/TCollectionPropertyBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollectionPropertyBrowsable.html
https://root.cern/root/html532/TCollectionPropertyBrowsable.html:3252,Availability,error,error,3252,"ertyBrowsable(const TCollectionPropertyBrowsable&); virtual~TCollectionPropertyBrowsable(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); static Int_tTVirtualBranchBrowsable::FillListOfBrowsables(TList& list, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const TBranch*TVirtualBranchBrowsable::GetBranch() const; static Int_tGetBrowsables(TList& list, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); TClass*TVirtualBranchBrowsable::GetClassType() const; const char*GetDraw() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TVirtualBranchBrowsable::GetIconName() const; TList*TVirtualBranchBrowsable::GetLeaves() const; virtual c",MatchSource.WIKI,root/html532/TCollectionPropertyBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollectionPropertyBrowsable.html
https://root.cern/root/html532/TCollectionPropertyBrowsable.html:3336,Availability,error,error,3336,"able(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); static Int_tTVirtualBranchBrowsable::FillListOfBrowsables(TList& list, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const TBranch*TVirtualBranchBrowsable::GetBranch() const; static Int_tGetBrowsables(TList& list, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); TClass*TVirtualBranchBrowsable::GetClassType() const; const char*GetDraw() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TVirtualBranchBrowsable::GetIconName() const; TList*TVirtualBranchBrowsable::GetLeaves() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int",MatchSource.WIKI,root/html532/TCollectionPropertyBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollectionPropertyBrowsable.html
https://root.cern/root/html532/TCollectionPropertyBrowsable.html:9730,Integrability,Wrap,Wrapper,9730,"gTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TStringfDrawstring to send to TTree::Draw(), NOT by GetScope()!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Browse(TBrowser* b); Browses a TCollectionPropertyBrowsable. The only difference to; the generic TVirtualBranchBrowsable::Browse is our fDraw. Int_t GetBrowsables(TList& list, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); If the element to browse (given by either parent of branch) contains; a collection (TClonesArray or something for which a TVirtualCollectionProxy; exists), we will add some special objects to the browser. For now there is; just one object ""@size"", returning the size of the collection (as in; std::list::size(), or TClonesArray::GetEntries()).; The objects we create are simply used to forward strings (like ""@size"") to; TTreeFormula via our Browse method. These strings are stored in fName. void Register(); Wrapper for the registration method. Needed against MSVC, which; assigned different addr to the same method, depending on what; translation unit you're in... void Unregister(); Wrapper for the registration method. Needed against MSVC, which; assigned different addr to the same method, depending on what; translation unit you're in... ~TCollectionPropertyBrowsable(); {}. const char* GetDraw() const; return the string passed to TTree::Draw. TCollectionPropertyBrowsable(const char* name, const char* title, const char* draw, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); constructor, which sets the name and title according to the parameters; (and thus differently than our base class TVirtualBranchBrowsable). » Author: Axel Naumann 14/10/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id: TBranchBrowsable.h 40605 2011-08-16 11:52:09Z rdm $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or su",MatchSource.WIKI,root/html532/TCollectionPropertyBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollectionPropertyBrowsable.html
https://root.cern/root/html532/TCollectionPropertyBrowsable.html:9839,Integrability,depend,depending,9839,"Drawstring to send to TTree::Draw(), NOT by GetScope()!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Browse(TBrowser* b); Browses a TCollectionPropertyBrowsable. The only difference to; the generic TVirtualBranchBrowsable::Browse is our fDraw. Int_t GetBrowsables(TList& list, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); If the element to browse (given by either parent of branch) contains; a collection (TClonesArray or something for which a TVirtualCollectionProxy; exists), we will add some special objects to the browser. For now there is; just one object ""@size"", returning the size of the collection (as in; std::list::size(), or TClonesArray::GetEntries()).; The objects we create are simply used to forward strings (like ""@size"") to; TTreeFormula via our Browse method. These strings are stored in fName. void Register(); Wrapper for the registration method. Needed against MSVC, which; assigned different addr to the same method, depending on what; translation unit you're in... void Unregister(); Wrapper for the registration method. Needed against MSVC, which; assigned different addr to the same method, depending on what; translation unit you're in... ~TCollectionPropertyBrowsable(); {}. const char* GetDraw() const; return the string passed to TTree::Draw. TCollectionPropertyBrowsable(const char* name, const char* title, const char* draw, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); constructor, which sets the name and title according to the parameters; (and thus differently than our base class TVirtualBranchBrowsable). » Author: Axel Naumann 14/10/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id: TBranchBrowsable.h 40605 2011-08-16 11:52:09Z rdm $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT sup",MatchSource.WIKI,root/html532/TCollectionPropertyBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollectionPropertyBrowsable.html
https://root.cern/root/html532/TCollectionPropertyBrowsable.html:9907,Integrability,Wrap,Wrapper,9907,"ing to send to TTree::Draw(), NOT by GetScope()!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Browse(TBrowser* b); Browses a TCollectionPropertyBrowsable. The only difference to; the generic TVirtualBranchBrowsable::Browse is our fDraw. Int_t GetBrowsables(TList& list, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); If the element to browse (given by either parent of branch) contains; a collection (TClonesArray or something for which a TVirtualCollectionProxy; exists), we will add some special objects to the browser. For now there is; just one object ""@size"", returning the size of the collection (as in; std::list::size(), or TClonesArray::GetEntries()).; The objects we create are simply used to forward strings (like ""@size"") to; TTreeFormula via our Browse method. These strings are stored in fName. void Register(); Wrapper for the registration method. Needed against MSVC, which; assigned different addr to the same method, depending on what; translation unit you're in... void Unregister(); Wrapper for the registration method. Needed against MSVC, which; assigned different addr to the same method, depending on what; translation unit you're in... ~TCollectionPropertyBrowsable(); {}. const char* GetDraw() const; return the string passed to TTree::Draw. TCollectionPropertyBrowsable(const char* name, const char* title, const char* draw, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); constructor, which sets the name and title according to the parameters; (and thus differently than our base class TVirtualBranchBrowsable). » Author: Axel Naumann 14/10/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id: TBranchBrowsable.h 40605 2011-08-16 11:52:09Z rdm $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TCollectionPropertyBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollectionPropertyBrowsable.html
https://root.cern/root/html532/TCollectionPropertyBrowsable.html:10016,Integrability,depend,depending,10016,"ing to send to TTree::Draw(), NOT by GetScope()!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Browse(TBrowser* b); Browses a TCollectionPropertyBrowsable. The only difference to; the generic TVirtualBranchBrowsable::Browse is our fDraw. Int_t GetBrowsables(TList& list, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); If the element to browse (given by either parent of branch) contains; a collection (TClonesArray or something for which a TVirtualCollectionProxy; exists), we will add some special objects to the browser. For now there is; just one object ""@size"", returning the size of the collection (as in; std::list::size(), or TClonesArray::GetEntries()).; The objects we create are simply used to forward strings (like ""@size"") to; TTreeFormula via our Browse method. These strings are stored in fName. void Register(); Wrapper for the registration method. Needed against MSVC, which; assigned different addr to the same method, depending on what; translation unit you're in... void Unregister(); Wrapper for the registration method. Needed against MSVC, which; assigned different addr to the same method, depending on what; translation unit you're in... ~TCollectionPropertyBrowsable(); {}. const char* GetDraw() const; return the string passed to TTree::Draw. TCollectionPropertyBrowsable(const char* name, const char* title, const char* draw, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); constructor, which sets the name and title according to the parameters; (and thus differently than our base class TVirtualBranchBrowsable). » Author: Axel Naumann 14/10/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id: TBranchBrowsable.h 40605 2011-08-16 11:52:09Z rdm $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TCollectionPropertyBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollectionPropertyBrowsable.html
https://root.cern/root/html532/TCollectionPropertyBrowsable.html:471,Modifiability,extend,extend,471,". TCollectionPropertyBrowsable. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TCollectionPropertyBrowsable. class TCollectionPropertyBrowsable: public TVirtualBranchBrowsable. TVirtualBranchBrowsable is a base class (not really abstract, but useless; by itself) for helper objects that extend TBranch's browsing support.; Each registered derived class's generator method is called, which fills; all created helper objects into a list which can then be browsed.; For details of what these browser helper objects can do, see e.g.; TMethodBrowsable, which allows methods to show up in the TBrowser. Only registered helper objects are created. By default, only; TMethodBrowsable, TNonSplitBrowsable, and TCollectionPropertyBrowsable; are registered (see RegisterDefaultGenerators). You can prevent any of; their objects to show up in the browser by unregistering the generator:; TMethodBrowsable::Unregister(); will stop creating browsable method helper objects from that call on.; Note that these helper objects are cached (in TBranch::fBrowsables);; already created (and thus cached) browsables will still appear in the; browser even after unregistering the corresponding generator. You can implement your own browsable objects and thier generator; see; e.g. the simple TCollectionPropertyBrowsable. Note that you will have; to register your generator just like any other, and that you should; implement the following methods for your own class, mainly for; consistency reasons:; static void Register() {; TVirtualBranchBrowsable::RegisterGenerator(GetBrowsables); }; static void Unregister() {; TVirtualBranchBrowsable::UnregisterGenerator(GetBrowsables); }; where GetBrowsables is a static member function of your class, that; creates the browsable helper objects, and has the signature; static Int_t GetBrowsables(T",MatchSource.WIKI,root/html532/TCollectionPropertyBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollectionPropertyBrowsable.html
https://root.cern/root/html532/TCollectionPropertyBrowsable.html:4845,Modifiability,Inherit,InheritsFrom,4845,"onst; static Int_tGetBrowsables(TList& list, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); TClass*TVirtualBranchBrowsable::GetClassType() const; const char*GetDraw() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TVirtualBranchBrowsable::GetIconName() const; TList*TVirtualBranchBrowsable::GetLeaves() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const TVirtualBranchBrowsable*TVirtualBranchBrowsable::GetParent() const; voidTVirtualBranchBrowsable::GetScope(TString& scope) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTVirtualBranchBrowsable::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t",MatchSource.WIKI,root/html532/TCollectionPropertyBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollectionPropertyBrowsable.html
https://root.cern/root/html532/TCollectionPropertyBrowsable.html:4911,Modifiability,Inherit,InheritsFrom,4911,", const TVirtualBranchBrowsable* parent = 0); TClass*TVirtualBranchBrowsable::GetClassType() const; const char*GetDraw() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TVirtualBranchBrowsable::GetIconName() const; TList*TVirtualBranchBrowsable::GetLeaves() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const TVirtualBranchBrowsable*TVirtualBranchBrowsable::GetParent() const; voidTVirtualBranchBrowsable::GetScope(TString& scope) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTVirtualBranchBrowsable::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TN",MatchSource.WIKI,root/html532/TCollectionPropertyBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollectionPropertyBrowsable.html
https://root.cern/root/html532/TCollectionPropertyBrowsable.html:8896,Modifiability,Inherit,Inheritance,8896,"sable* parent, TClass*& contained); static list<MethodCreateListOfBrowsables_t>&TVirtualBranchBrowsable::GetRegisteredGenerators(); voidTObject::MakeZombie(); static voidTVirtualBranchBrowsable::RegisterGenerator(TVirtualBranchBrowsable::MethodCreateListOfBrowsables_t generator); voidTVirtualBranchBrowsable::SetType(TClass* type); voidTVirtualBranchBrowsable::SetTypeIsPointer(Bool_t set = kTRUE); static voidTVirtualBranchBrowsable::UnregisterGenerator(TVirtualBranchBrowsable::MethodCreateListOfBrowsables_t generator). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TStringfDrawstring to send to TTree::Draw(), NOT by GetScope()!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Browse(TBrowser* b); Browses a TCollectionPropertyBrowsable. The only difference to; the generic TVirtualBranchBrowsable::Browse is our fDraw. Int_t GetBrowsables(TList& list, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); If the element to browse (given by either parent of branch) contains; a collection (TClonesArray or something for which a TVirtualCollectionProxy; exists), we will add some special objects to the browser. For now there is; just one object ""@size"", returning the size of the collection (as in; std::list::size(), or TClonesArray::GetEntries()).; The objects we create are simply used to forward strings (like ""@size"") to; TTreeFormula via our Browse method. These strings are stored in fName. void Register(); Wrapper for the registration method. Needed against MSVC, which; assigned different addr to the same method, depending on what; translation unit you're in... void Unregister(); Wrapper for the",MatchSource.WIKI,root/html532/TCollectionPropertyBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollectionPropertyBrowsable.html
https://root.cern/root/html532/TCollectionPropertyBrowsable.html:8909,Modifiability,Inherit,Inherited,8909,"sable* parent, TClass*& contained); static list<MethodCreateListOfBrowsables_t>&TVirtualBranchBrowsable::GetRegisteredGenerators(); voidTObject::MakeZombie(); static voidTVirtualBranchBrowsable::RegisterGenerator(TVirtualBranchBrowsable::MethodCreateListOfBrowsables_t generator); voidTVirtualBranchBrowsable::SetType(TClass* type); voidTVirtualBranchBrowsable::SetTypeIsPointer(Bool_t set = kTRUE); static voidTVirtualBranchBrowsable::UnregisterGenerator(TVirtualBranchBrowsable::MethodCreateListOfBrowsables_t generator). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TStringfDrawstring to send to TTree::Draw(), NOT by GetScope()!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Browse(TBrowser* b); Browses a TCollectionPropertyBrowsable. The only difference to; the generic TVirtualBranchBrowsable::Browse is our fDraw. Int_t GetBrowsables(TList& list, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); If the element to browse (given by either parent of branch) contains; a collection (TClonesArray or something for which a TVirtualCollectionProxy; exists), we will add some special objects to the browser. For now there is; just one object ""@size"", returning the size of the collection (as in; std::list::size(), or TClonesArray::GetEntries()).; The objects we create are simply used to forward strings (like ""@size"") to; TTreeFormula via our Browse method. These strings are stored in fName. void Register(); Wrapper for the registration method. Needed against MSVC, which; assigned different addr to the same method, depending on what; translation unit you're in... void Unregister(); Wrapper for the",MatchSource.WIKI,root/html532/TCollectionPropertyBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollectionPropertyBrowsable.html
https://root.cern/root/html532/TCollectionPropertyBrowsable.html:1198,Performance,cache,cached,1198,"TCollectionPropertyBrowsable. class TCollectionPropertyBrowsable: public TVirtualBranchBrowsable. TVirtualBranchBrowsable is a base class (not really abstract, but useless; by itself) for helper objects that extend TBranch's browsing support.; Each registered derived class's generator method is called, which fills; all created helper objects into a list which can then be browsed.; For details of what these browser helper objects can do, see e.g.; TMethodBrowsable, which allows methods to show up in the TBrowser. Only registered helper objects are created. By default, only; TMethodBrowsable, TNonSplitBrowsable, and TCollectionPropertyBrowsable; are registered (see RegisterDefaultGenerators). You can prevent any of; their objects to show up in the browser by unregistering the generator:; TMethodBrowsable::Unregister(); will stop creating browsable method helper objects from that call on.; Note that these helper objects are cached (in TBranch::fBrowsables);; already created (and thus cached) browsables will still appear in the; browser even after unregistering the corresponding generator. You can implement your own browsable objects and thier generator; see; e.g. the simple TCollectionPropertyBrowsable. Note that you will have; to register your generator just like any other, and that you should; implement the following methods for your own class, mainly for; consistency reasons:; static void Register() {; TVirtualBranchBrowsable::RegisterGenerator(GetBrowsables); }; static void Unregister() {; TVirtualBranchBrowsable::UnregisterGenerator(GetBrowsables); }; where GetBrowsables is a static member function of your class, that; creates the browsable helper objects, and has the signature; static Int_t GetBrowsables(TList& list, const TBranch* branch,; const TVirtualBranchBrowsable* parent=0);; It has to return the number of browsable helper objects for parent; (or, if NULL, for branch) which are added to the list. Function Members (Methods); public:. TCollectionPropertyBrow",MatchSource.WIKI,root/html532/TCollectionPropertyBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollectionPropertyBrowsable.html
https://root.cern/root/html532/TCollectionPropertyBrowsable.html:1259,Performance,cache,cached,1259,"TCollectionPropertyBrowsable. class TCollectionPropertyBrowsable: public TVirtualBranchBrowsable. TVirtualBranchBrowsable is a base class (not really abstract, but useless; by itself) for helper objects that extend TBranch's browsing support.; Each registered derived class's generator method is called, which fills; all created helper objects into a list which can then be browsed.; For details of what these browser helper objects can do, see e.g.; TMethodBrowsable, which allows methods to show up in the TBrowser. Only registered helper objects are created. By default, only; TMethodBrowsable, TNonSplitBrowsable, and TCollectionPropertyBrowsable; are registered (see RegisterDefaultGenerators). You can prevent any of; their objects to show up in the browser by unregistering the generator:; TMethodBrowsable::Unregister(); will stop creating browsable method helper objects from that call on.; Note that these helper objects are cached (in TBranch::fBrowsables);; already created (and thus cached) browsables will still appear in the; browser even after unregistering the corresponding generator. You can implement your own browsable objects and thier generator; see; e.g. the simple TCollectionPropertyBrowsable. Note that you will have; to register your generator just like any other, and that you should; implement the following methods for your own class, mainly for; consistency reasons:; static void Register() {; TVirtualBranchBrowsable::RegisterGenerator(GetBrowsables); }; static void Unregister() {; TVirtualBranchBrowsable::UnregisterGenerator(GetBrowsables); }; where GetBrowsables is a static member function of your class, that; creates the browsable helper objects, and has the signature; static Int_t GetBrowsables(TList& list, const TBranch* branch,; const TVirtualBranchBrowsable* parent=0);; It has to return the number of browsable helper objects for parent; (or, if NULL, for branch) which are added to the list. Function Members (Methods); public:. TCollectionPropertyBrow",MatchSource.WIKI,root/html532/TCollectionPropertyBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollectionPropertyBrowsable.html
https://root.cern/root/html532/TCollectionPropertyBrowsable.html:4735,Security,Hash,Hash,4735,"irtual TObject*TObject::FindObject(const TObject* obj) const; const TBranch*TVirtualBranchBrowsable::GetBranch() const; static Int_tGetBrowsables(TList& list, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); TClass*TVirtualBranchBrowsable::GetClassType() const; const char*GetDraw() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TVirtualBranchBrowsable::GetIconName() const; TList*TVirtualBranchBrowsable::GetLeaves() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const TVirtualBranchBrowsable*TVirtualBranchBrowsable::GetParent() const; voidTVirtualBranchBrowsable::GetScope(TString& scope) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTVirtualBranchBrowsable::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObj",MatchSource.WIKI,root/html532/TCollectionPropertyBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollectionPropertyBrowsable.html
https://root.cern/root/html532/TCollectionPropertyBrowsable.html:7110,Testability,Test,TestBit,7110,"oid* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); static voidRegister(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTVirtualBranchBrowsable::TypeIsPointer() const; static voidUnregister(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TCollectionPropertyBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollectionPropertyBrowsable.html
https://root.cern/root/html532/TCollectionPropertyBrowsable.html:7149,Testability,Test,TestBits,7149,"oid* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); static voidRegister(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTVirtualBranchBrowsable::TypeIsPointer() const; static voidUnregister(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TCollectionPropertyBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollectionPropertyBrowsable.html
https://root.cern/root/html532/TCollectionPropertyBrowsable.html:1446,Usability,simpl,simple,1446,"ects that extend TBranch's browsing support.; Each registered derived class's generator method is called, which fills; all created helper objects into a list which can then be browsed.; For details of what these browser helper objects can do, see e.g.; TMethodBrowsable, which allows methods to show up in the TBrowser. Only registered helper objects are created. By default, only; TMethodBrowsable, TNonSplitBrowsable, and TCollectionPropertyBrowsable; are registered (see RegisterDefaultGenerators). You can prevent any of; their objects to show up in the browser by unregistering the generator:; TMethodBrowsable::Unregister(); will stop creating browsable method helper objects from that call on.; Note that these helper objects are cached (in TBranch::fBrowsables);; already created (and thus cached) browsables will still appear in the; browser even after unregistering the corresponding generator. You can implement your own browsable objects and thier generator; see; e.g. the simple TCollectionPropertyBrowsable. Note that you will have; to register your generator just like any other, and that you should; implement the following methods for your own class, mainly for; consistency reasons:; static void Register() {; TVirtualBranchBrowsable::RegisterGenerator(GetBrowsables); }; static void Unregister() {; TVirtualBranchBrowsable::UnregisterGenerator(GetBrowsables); }; where GetBrowsables is a static member function of your class, that; creates the browsable helper objects, and has the signature; static Int_t GetBrowsables(TList& list, const TBranch* branch,; const TVirtualBranchBrowsable* parent=0);; It has to return the number of browsable helper objects for parent; (or, if NULL, for branch) which are added to the list. Function Members (Methods); public:. TCollectionPropertyBrowsable(const TCollectionPropertyBrowsable&); virtual~TCollectionPropertyBrowsable(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtu",MatchSource.WIKI,root/html532/TCollectionPropertyBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollectionPropertyBrowsable.html
https://root.cern/root/html532/TCollectionPropertyBrowsable.html:2580,Usability,Clear,Clear,2580,,MatchSource.WIKI,root/html532/TCollectionPropertyBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollectionPropertyBrowsable.html
https://root.cern/root/html532/TCollectionPropertyBrowsable.html:9592,Usability,simpl,simply,9592,"ct::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TStringfDrawstring to send to TTree::Draw(), NOT by GetScope()!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Browse(TBrowser* b); Browses a TCollectionPropertyBrowsable. The only difference to; the generic TVirtualBranchBrowsable::Browse is our fDraw. Int_t GetBrowsables(TList& list, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); If the element to browse (given by either parent of branch) contains; a collection (TClonesArray or something for which a TVirtualCollectionProxy; exists), we will add some special objects to the browser. For now there is; just one object ""@size"", returning the size of the collection (as in; std::list::size(), or TClonesArray::GetEntries()).; The objects we create are simply used to forward strings (like ""@size"") to; TTreeFormula via our Browse method. These strings are stored in fName. void Register(); Wrapper for the registration method. Needed against MSVC, which; assigned different addr to the same method, depending on what; translation unit you're in... void Unregister(); Wrapper for the registration method. Needed against MSVC, which; assigned different addr to the same method, depending on what; translation unit you're in... ~TCollectionPropertyBrowsable(); {}. const char* GetDraw() const; return the string passed to TTree::Draw. TCollectionPropertyBrowsable(const char* name, const char* title, const char* draw, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); constructor, which sets the name and title according to the parameters; (and thus differently than our base class TVirtualBranchBrowsable). » Author: Axel Naumann 14/10/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id: TBranchBrowsable.h 40605 2011-08",MatchSource.WIKI,root/html532/TCollectionPropertyBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollectionPropertyBrowsable.html
https://root.cern/root/html532/TCollectionProxyFactory.html:1268,Modifiability,Inherit,Inheritance,1268,"elper to save proxy environment in the event of; recursive calls. Function Members (Methods); public:. TCollectionProxyFactory(); TCollectionProxyFactory(const TCollectionProxyFactory&); ~TCollectionProxyFactory(); static TClassStreamer*GenEmulatedClassStreamer(const char* class_name, Bool_t silent); static TMemberStreamer*GenEmulatedMemberStreamer(const char* class_name, Bool_t silent); static TVirtualCollectionProxy*GenEmulatedProxy(const char* class_name, Bool_t silent); static TClassStreamer*GenExplicitClassStreamer(const ROOT::TCollectionProxyInfo& info, TClass* cl); static TMemberStreamer*GenExplicitMemberStreamer(const ROOT::TCollectionProxyInfo& info, TClass* cl); static TCollectionProxyFactory::Proxy_t*GenExplicitProxy(const ROOT::TCollectionProxyInfo& info, TClass* cl); static TGenCollectionStreamer*GenExplicitStreamer(const ROOT::TCollectionProxyInfo& info, TClass* cl); TCollectionProxyFactory&operator=(const TCollectionProxyFactory&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TVirtualCollectionProxy* GenEmulatedProxy(const char* class_name, Bool_t silent); Generate emulated collection proxy for a given class. TClassStreamer* GenEmulatedClassStreamer(const char* class_name, Bool_t silent); Generate emulated class streamer for a given collection class. TMemberStreamer* GenEmulatedMemberStreamer(const char* class_name, Bool_t silent); Generate emulated member streamer for a given collection class. Proxy_t* GenExplicitProxy(const ROOT::TCollectionProxyInfo& info, TClass* cl); Generate proxy from static functions. GenExplicitStreamer(const ROOT::TCollectionProxyInfo& info, TClass* cl); Generate streamer from static functions. GenExplicitClassStreamer(const ROOT::TCollectionProxyInfo& info, TClass* cl); Generate class streamer from static functions. GenExplicitMemberStreamer(const ROOT::TCollectionProxyInfo& info, TClass* cl); Generate member streamer from static functions. TCollectionStreamer& operator=(const TC",MatchSource.WIKI,root/html532/TCollectionProxyFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollectionProxyFactory.html
https://root.cern/root/html532/TCollectionProxyFactory.html:1281,Modifiability,Inherit,Inherited,1281,"elper to save proxy environment in the event of; recursive calls. Function Members (Methods); public:. TCollectionProxyFactory(); TCollectionProxyFactory(const TCollectionProxyFactory&); ~TCollectionProxyFactory(); static TClassStreamer*GenEmulatedClassStreamer(const char* class_name, Bool_t silent); static TMemberStreamer*GenEmulatedMemberStreamer(const char* class_name, Bool_t silent); static TVirtualCollectionProxy*GenEmulatedProxy(const char* class_name, Bool_t silent); static TClassStreamer*GenExplicitClassStreamer(const ROOT::TCollectionProxyInfo& info, TClass* cl); static TMemberStreamer*GenExplicitMemberStreamer(const ROOT::TCollectionProxyInfo& info, TClass* cl); static TCollectionProxyFactory::Proxy_t*GenExplicitProxy(const ROOT::TCollectionProxyInfo& info, TClass* cl); static TGenCollectionStreamer*GenExplicitStreamer(const ROOT::TCollectionProxyInfo& info, TClass* cl); TCollectionProxyFactory&operator=(const TCollectionProxyFactory&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TVirtualCollectionProxy* GenEmulatedProxy(const char* class_name, Bool_t silent); Generate emulated collection proxy for a given class. TClassStreamer* GenEmulatedClassStreamer(const char* class_name, Bool_t silent); Generate emulated class streamer for a given collection class. TMemberStreamer* GenEmulatedMemberStreamer(const char* class_name, Bool_t silent); Generate emulated member streamer for a given collection class. Proxy_t* GenExplicitProxy(const ROOT::TCollectionProxyInfo& info, TClass* cl); Generate proxy from static functions. GenExplicitStreamer(const ROOT::TCollectionProxyInfo& info, TClass* cl); Generate streamer from static functions. GenExplicitClassStreamer(const ROOT::TCollectionProxyInfo& info, TClass* cl); Generate class streamer from static functions. GenExplicitMemberStreamer(const ROOT::TCollectionProxyInfo& info, TClass* cl); Generate member streamer from static functions. TCollectionStreamer& operator=(const TC",MatchSource.WIKI,root/html532/TCollectionProxyFactory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollectionProxyFactory.html
https://root.cern/root/html532/TCollectionStreamer.html:989,Availability,Error,Error,989,". TCollectionStreamer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TCollectionStreamer. class TCollectionStreamer. Small helper to save proxy environment in the event of; recursive calls. Function Members (Methods); public:. TCollectionStreamer(); TCollectionStreamer(const TCollectionStreamer& c); virtual~TCollectionStreamer(); voidAdoptStreamer(TGenCollectionProxy* streamer); voidStreamer(TBuffer& refBuffer, void* obj, int siz, TClass* onFileClass). protected:. voidInvalidProxyError(). private:. TCollectionStreamer&operator=(const TCollectionStreamer&). Data Members; protected:. TGenCollectionProxy*fStreamer/ Pointer to worker streamer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCollectionStreamer& operator=(const TCollectionStreamer& ). void InvalidProxyError(); Issue Error about invalid proxy. TCollectionStreamer(); Initializing constructor. TCollectionStreamer(const TCollectionStreamer& c); Copy constructor. virtual ~TCollectionStreamer(); Standard destructor. void AdoptStreamer(TGenCollectionProxy* streamer); Attach worker proxy. void Streamer(TBuffer& refBuffer, void* obj, int siz, TClass* onFileClass); Streamer for I/O handling. » Author: Markus Frank 28/10/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id: TCollectionProxyFactory.h 41102 2011-10-03 21:42:02Z pcanal $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TCollectionStreamer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollectionStreamer.html
https://root.cern/root/html532/TCollectionStreamer.html:819,Modifiability,Inherit,Inheritance,819,". TCollectionStreamer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TCollectionStreamer. class TCollectionStreamer. Small helper to save proxy environment in the event of; recursive calls. Function Members (Methods); public:. TCollectionStreamer(); TCollectionStreamer(const TCollectionStreamer& c); virtual~TCollectionStreamer(); voidAdoptStreamer(TGenCollectionProxy* streamer); voidStreamer(TBuffer& refBuffer, void* obj, int siz, TClass* onFileClass). protected:. voidInvalidProxyError(). private:. TCollectionStreamer&operator=(const TCollectionStreamer&). Data Members; protected:. TGenCollectionProxy*fStreamer/ Pointer to worker streamer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCollectionStreamer& operator=(const TCollectionStreamer& ). void InvalidProxyError(); Issue Error about invalid proxy. TCollectionStreamer(); Initializing constructor. TCollectionStreamer(const TCollectionStreamer& c); Copy constructor. virtual ~TCollectionStreamer(); Standard destructor. void AdoptStreamer(TGenCollectionProxy* streamer); Attach worker proxy. void Streamer(TBuffer& refBuffer, void* obj, int siz, TClass* onFileClass); Streamer for I/O handling. » Author: Markus Frank 28/10/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id: TCollectionProxyFactory.h 41102 2011-10-03 21:42:02Z pcanal $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TCollectionStreamer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollectionStreamer.html
https://root.cern/root/html532/TCollectionStreamer.html:832,Modifiability,Inherit,Inherited,832,". TCollectionStreamer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TCollectionStreamer. class TCollectionStreamer. Small helper to save proxy environment in the event of; recursive calls. Function Members (Methods); public:. TCollectionStreamer(); TCollectionStreamer(const TCollectionStreamer& c); virtual~TCollectionStreamer(); voidAdoptStreamer(TGenCollectionProxy* streamer); voidStreamer(TBuffer& refBuffer, void* obj, int siz, TClass* onFileClass). protected:. voidInvalidProxyError(). private:. TCollectionStreamer&operator=(const TCollectionStreamer&). Data Members; protected:. TGenCollectionProxy*fStreamer/ Pointer to worker streamer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCollectionStreamer& operator=(const TCollectionStreamer& ). void InvalidProxyError(); Issue Error about invalid proxy. TCollectionStreamer(); Initializing constructor. TCollectionStreamer(const TCollectionStreamer& c); Copy constructor. virtual ~TCollectionStreamer(); Standard destructor. void AdoptStreamer(TGenCollectionProxy* streamer); Attach worker proxy. void Streamer(TBuffer& refBuffer, void* obj, int siz, TClass* onFileClass); Streamer for I/O handling. » Author: Markus Frank 28/10/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id: TCollectionProxyFactory.h 41102 2011-10-03 21:42:02Z pcanal $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TCollectionStreamer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCollectionStreamer.html
https://root.cern/root/html532/TColor.html:8986,Availability,Error,Error,8986,"owse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidCopy(TObject& color) const; static voidCreateColorsCircle(Int_t offset, const char* name, UChar_t* rgb); static voidCreateColorsGray(); static voidCreateColorsRectangle(Int_t offset, const char* name, UChar_t* rgb); static voidCreateColorWheel(); static Int_tCreateGradientColorTable(UInt_t Number, Double_t* Stops, Double_t* Red, Double_t* Green, Double_t* Blue, UInt_t NColors); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Float_tGetAlpha() const; Float_tGetBlue() const; static Int_tGetColor(const char* hexcolor); static Int_tGetColor(ULong_t pixel); static Int_tGetColor(Float_t r, Float_t g, Float_t b); static Int_tGetColor(Int_t r, Int_t g, Int_t b); static Int_tGetColorBright(Int_t color); static Int_tGetColorDark(Int_t color); static Int_tGetColorPalette(Int_t i); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Float_tGetGrayscale",MatchSource.WIKI,root/html532/TColor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColor.html
https://root.cern/root/html532/TColor.html:9115,Availability,error,error,9115,"on = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidCopy(TObject& color) const; static voidCreateColorsCircle(Int_t offset, const char* name, UChar_t* rgb); static voidCreateColorsGray(); static voidCreateColorsRectangle(Int_t offset, const char* name, UChar_t* rgb); static voidCreateColorWheel(); static Int_tCreateGradientColorTable(UInt_t Number, Double_t* Stops, Double_t* Red, Double_t* Green, Double_t* Blue, UInt_t NColors); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Float_tGetAlpha() const; Float_tGetBlue() const; static Int_tGetColor(const char* hexcolor); static Int_tGetColor(ULong_t pixel); static Int_tGetColor(Float_t r, Float_t g, Float_t b); static Int_tGetColor(Int_t r, Int_t g, Int_t b); static Int_tGetColorBright(Int_t color); static Int_tGetColorDark(Int_t color); static Int_tGetColorPalette(Int_t i); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Float_tGetGrayscale() const; Float_tGetGreen() const; virtual voidGetHLS(Float_t& h, Float_t& l, Float_t& s) const; Float_tGetHue() const; virtual c",MatchSource.WIKI,root/html532/TColor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColor.html
https://root.cern/root/html532/TColor.html:9199,Availability,error,error,9199,"_tTNamed::Compare(const TObject* obj) const; virtual voidCopy(TObject& color) const; static voidCreateColorsCircle(Int_t offset, const char* name, UChar_t* rgb); static voidCreateColorsGray(); static voidCreateColorsRectangle(Int_t offset, const char* name, UChar_t* rgb); static voidCreateColorWheel(); static Int_tCreateGradientColorTable(UInt_t Number, Double_t* Stops, Double_t* Red, Double_t* Green, Double_t* Blue, UInt_t NColors); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Float_tGetAlpha() const; Float_tGetBlue() const; static Int_tGetColor(const char* hexcolor); static Int_tGetColor(ULong_t pixel); static Int_tGetColor(Float_t r, Float_t g, Float_t b); static Int_tGetColor(Int_t r, Int_t g, Int_t b); static Int_tGetColorBright(Int_t color); static Int_tGetColorDark(Int_t color); static Int_tGetColorPalette(Int_t i); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Float_tGetGrayscale() const; Float_tGetGreen() const; virtual voidGetHLS(Float_t& h, Float_t& l, Float_t& s) const; Float_tGetHue() const; virtual const char*TObject::GetIconName() const; Float_tGetLight() const; virtual const char*",MatchSource.WIKI,root/html532/TColor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColor.html
https://root.cern/root/html532/TColor.html:23433,Availability,error,error,23433,"ent::GetColorByName(). String will be reused so copy immediately; if needed.; ; . void SaveColor(ostream& out, Int_t ci). Save a color with index > 228 as a C++ statement(s) on output stream out.; ; . Bool_t IsGrayscale(). Return whether all colors return grayscale values.; ; . void SetGrayscale(Bool_t set = kTRUE). Set whether all colors should return grayscale values.; ; . Int_t CreateGradientColorTable(UInt_t Number, Double_t* Stops, Double_t* Red, Double_t* Green, Double_t* Blue, UInt_t NColors). Static function creating a color table with several connected linear gradients.; ; Number: The number of end point colors that will form the gradients.; Must be at least 2.; Stops: Where in the whole table the end point colors should lie.; Each entry must be on [0, 1], each entry must be greater than; the previous entry.; Red, Green, Blue: The end point color values.; Each entry must be on [0, 1]; NColors: Total number of colors in the table. Must be at least 1.; ; Returns a positive value on success and -1 on error.; ; The table is constructed by tracing lines between the given points in; RGB space. Each color value may have a value between 0 and 1. The; difference between consecutive ""Stops"" values gives the fraction of; space in the whole table that should be used for the interval between; the corresponding color values.; ; Normally the first element of Stops should be 0 and the last should be 1.; If this is not true, fewer than NColors will be used in proportion with; the total interval between the first and last elements of Stops.; ; This definition is similar to the povray-definition of gradient; color tables.; ; For instance:; ; UInt_t Number = 3;; Double_t Red[3] = { 0.0, 1.0, 1.0 };; Double_t Green[3] = { 0.0, 0.0, 1.0 };; Double_t Blue[3] = { 1.0, 0.0, 1.0 };; Double_t Stops[3] = { 0.0, 0.4, 1.0 };; ; This defines a table in which there are three color end points:; RGB = {0, 0, 1}, {1, 0, 0}, and {1, 1, 1} = blue, red, white; The first 40% of the table is used",MatchSource.WIKI,root/html532/TColor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColor.html
https://root.cern/root/html532/TColor.html:3135,Deployability,toggle,toggle,3135,"Red, kBlue, kYellow, kPink, etc are defined in the header file; Rtypes.h that is included in all ROOT other header files. It is better; to use these keywords in user code instead of hardcoded color numbers, e.g.:. myObject.SetFillColor(kRed);; myObject.SetFillColor(kYellow-10);; myLine.SetLineColor(kMagenta+2);. Picture; Source. {; TColorWheel *w = new TColorWheel();; w->Draw();; return w->GetCanvas();; }; Bright and dark colors; The dark and bright color are used to give 3-D effects when drawing various; boxes (see TWbox, TPave, TPaveText, TPaveLabel, etc). The dark colors have an index = color_index+100; The bright colors have an index = color_index+150; Two static functions return the bright and dark color number; corresponding to a color index. If the bright or dark color does not; exist, they are created:; ; Int_t dark = TColor::GetColorDark(color_index);; Int_t bright = TColor::GetColorBright(color_index);; . Grayscale view of of canvas with colors; One can toggle between a grayscale preview and the regular colored mode using; TCanvas::SetGrayscale(). Note that in grayscale mode, access via RGB; will return grayscale values according to ITU standards (and close to b&w; printer grayscales), while access via HLS returns de-saturated grayscales. The; image below shows the ROOT color wheel in grayscale mode. Picture; Source. {; TColorWheel *w = new TColorWheel();; w->Draw();; w->GetCanvas()->SetGrayscale();; w->GetCanvas()->Modified();; w->GetCanvas()->Update();; return w->GetCanvas();; }; Color palettes; It is often very useful to represent a variable with a color map. The concept; of ""color palette"" allows to do that. One color palette is active at any time.; This ""current palette"" is set using:. gStyle->SetPalette(...);. This function has two parameters: the number of colors in the palette and an; array of containing the indices of colors in the palette. The following small; example demonstrates how to define and use the color palette:. Picture; Source. {; TCanv",MatchSource.WIKI,root/html532/TColor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColor.html
https://root.cern/root/html532/TColor.html:3636,Deployability,Update,Update,3636,"ive 3-D effects when drawing various; boxes (see TWbox, TPave, TPaveText, TPaveLabel, etc). The dark colors have an index = color_index+100; The bright colors have an index = color_index+150; Two static functions return the bright and dark color number; corresponding to a color index. If the bright or dark color does not; exist, they are created:; ; Int_t dark = TColor::GetColorDark(color_index);; Int_t bright = TColor::GetColorBright(color_index);; . Grayscale view of of canvas with colors; One can toggle between a grayscale preview and the regular colored mode using; TCanvas::SetGrayscale(). Note that in grayscale mode, access via RGB; will return grayscale values according to ITU standards (and close to b&w; printer grayscales), while access via HLS returns de-saturated grayscales. The; image below shows the ROOT color wheel in grayscale mode. Picture; Source. {; TColorWheel *w = new TColorWheel();; w->Draw();; w->GetCanvas()->SetGrayscale();; w->GetCanvas()->Modified();; w->GetCanvas()->Update();; return w->GetCanvas();; }; Color palettes; It is often very useful to represent a variable with a color map. The concept; of ""color palette"" allows to do that. One color palette is active at any time.; This ""current palette"" is set using:. gStyle->SetPalette(...);. This function has two parameters: the number of colors in the palette and an; array of containing the indices of colors in the palette. The following small; example demonstrates how to define and use the color palette:. Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""c1"",0,0,600,400);; TF2 *f1 = new TF2(""f1"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",1,3,1,3);; Int_t palette[5];; palette[0] = 15;; palette[1] = 20;; palette[2] = 23;; palette[3] = 30;; palette[4] = 32;; gStyle->SetPalette(5,palette);; f1->Draw(""colz"");; return c1;; }; To define more a complex palette with a continuous gradient of color, one; should use the static function TColor::CreateGradientColorTable().; The following example demonstrates h",MatchSource.WIKI,root/html532/TColor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColor.html
https://root.cern/root/html532/TColor.html:4491,Deployability,continuous,continuous,4491,"ed grayscales. The; image below shows the ROOT color wheel in grayscale mode. Picture; Source. {; TColorWheel *w = new TColorWheel();; w->Draw();; w->GetCanvas()->SetGrayscale();; w->GetCanvas()->Modified();; w->GetCanvas()->Update();; return w->GetCanvas();; }; Color palettes; It is often very useful to represent a variable with a color map. The concept; of ""color palette"" allows to do that. One color palette is active at any time.; This ""current palette"" is set using:. gStyle->SetPalette(...);. This function has two parameters: the number of colors in the palette and an; array of containing the indices of colors in the palette. The following small; example demonstrates how to define and use the color palette:. Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""c1"",0,0,600,400);; TF2 *f1 = new TF2(""f1"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",1,3,1,3);; Int_t palette[5];; palette[0] = 15;; palette[1] = 20;; palette[2] = 23;; palette[3] = 30;; palette[4] = 32;; gStyle->SetPalette(5,palette);; f1->Draw(""colz"");; return c1;; }; To define more a complex palette with a continuous gradient of color, one; should use the static function TColor::CreateGradientColorTable().; The following example demonstrates how to proceed:. Picture; Source. {; TCanvas *c2 = new TCanvas(""c2"",""c2"",0,0,600,400);; TF2 *f2 = new TF2(""f2"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",1,3,1,3);; UInt_t Number = 3;; Double_t Red[Number] = { 1.00, 0.00, 0.00};; Double_t Green[Number] = { 0.00, 1.00, 0.00};; Double_t Blue[Number] = { 1.00, 0.00, 1.00};; Double_t Length[Number] = { 0.00, 0.50, 1.00 };; Int_t nb=50;; TColor::CreateGradientColorTable(Number,Length,Red,Green,Blue,nb);; f2->SetContour(nb);; f2->Draw(""surf1z"");; return c2;; }; The function TColor::CreateGradientColorTable() automatically ; calls gStyle->SetPalette(), so there is not need to add one. After a call to TColor::CreateGradientColorTable() it is sometimes; useful to store the newly create palette for further use. In particular, it is; rec",MatchSource.WIKI,root/html532/TColor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColor.html
https://root.cern/root/html532/TColor.html:493,Energy Efficiency,green,green,493,". TColor. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TColor. class TColor: public TNamed. The color creation and management class. Introduction; Basic colors; The color wheel; Bright and dark colors; Gray scale view of of canvas with colors; Color palettes. Introduction; Colors are defined by their red, green and blue components, simply called the; RGB components. The colors are also known by the hue, light and saturation; components also known as the HLS components. When a new color is created the; components of both color systems are computed. At initialization time, a table of colors is generated. An existing color can; be retrieved by its index:. TColor *color = gROOT->GetColor(10);. Then it can be manipulated. For example its RGB components can be modified:. color->SetRGB(0.1, 0.2, 0.3);. A new color can be created the following way:. Int_t ci = 1756; // color index; TColor *color = new TColor(ci, 0.1, 0.2, 0.3);. Two sets of colors are initialized;. The basic colors: colors with index from 0 to 50.; The color wheel: colors with indices from 300 to 1000. Basic colors; The following image displays the 50 basic colors. Picture; Source. {; TCanvas *c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; c.DrawColorTable();; return c;; }; The color wheel; The wheel contains the recommended 216 colors to be used in web applications.; The colors in the color wheel are created by TColor::CreateColorWheel. Using this color set for your text, background or graphics will give your; application a consistent appearance across different platforms and browsers. Colors are grouped by hue, the aspect most important in human perception.; Touching color chips have the same hue, but with different brightness and; vividness. Colors of slightly different hues clash. If you intend to display; colors o",MatchSource.WIKI,root/html532/TColor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColor.html
https://root.cern/root/html532/TColor.html:4863,Energy Efficiency,Green,Green,4863,"lette"" is set using:. gStyle->SetPalette(...);. This function has two parameters: the number of colors in the palette and an; array of containing the indices of colors in the palette. The following small; example demonstrates how to define and use the color palette:. Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""c1"",0,0,600,400);; TF2 *f1 = new TF2(""f1"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",1,3,1,3);; Int_t palette[5];; palette[0] = 15;; palette[1] = 20;; palette[2] = 23;; palette[3] = 30;; palette[4] = 32;; gStyle->SetPalette(5,palette);; f1->Draw(""colz"");; return c1;; }; To define more a complex palette with a continuous gradient of color, one; should use the static function TColor::CreateGradientColorTable().; The following example demonstrates how to proceed:. Picture; Source. {; TCanvas *c2 = new TCanvas(""c2"",""c2"",0,0,600,400);; TF2 *f2 = new TF2(""f2"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",1,3,1,3);; UInt_t Number = 3;; Double_t Red[Number] = { 1.00, 0.00, 0.00};; Double_t Green[Number] = { 0.00, 1.00, 0.00};; Double_t Blue[Number] = { 1.00, 0.00, 1.00};; Double_t Length[Number] = { 0.00, 0.50, 1.00 };; Int_t nb=50;; TColor::CreateGradientColorTable(Number,Length,Red,Green,Blue,nb);; f2->SetContour(nb);; f2->Draw(""surf1z"");; return c2;; }; The function TColor::CreateGradientColorTable() automatically ; calls gStyle->SetPalette(), so there is not need to add one. After a call to TColor::CreateGradientColorTable() it is sometimes; useful to store the newly create palette for further use. In particular, it is; recommended to do if one wants to switch between several user define palettes.; To store a palette in an array it is enough to do:. Int_t MyPalette[100];; Double_t r[] = {0., 0.0, 1.0, 1.0, 1.0};; Double_t g[] = {0., 0.0, 0.0, 1.0, 1.0};; Double_t b[] = {0., 1.0, 0.0, 0.0, 1.0};; Double_t stop[] = {0., .25, .50, .75, 1.0};; Int_t FI = TColor::CreateGradientColorTable(5, stop, r, g, b, 100);; for (int i=0;i<100;i++) MyPalette[i] = FI+i;. Later on to reuse",MatchSource.WIKI,root/html532/TColor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColor.html
https://root.cern/root/html532/TColor.html:5061,Energy Efficiency,Green,Green,5061,"alette:. Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""c1"",0,0,600,400);; TF2 *f1 = new TF2(""f1"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",1,3,1,3);; Int_t palette[5];; palette[0] = 15;; palette[1] = 20;; palette[2] = 23;; palette[3] = 30;; palette[4] = 32;; gStyle->SetPalette(5,palette);; f1->Draw(""colz"");; return c1;; }; To define more a complex palette with a continuous gradient of color, one; should use the static function TColor::CreateGradientColorTable().; The following example demonstrates how to proceed:. Picture; Source. {; TCanvas *c2 = new TCanvas(""c2"",""c2"",0,0,600,400);; TF2 *f2 = new TF2(""f2"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",1,3,1,3);; UInt_t Number = 3;; Double_t Red[Number] = { 1.00, 0.00, 0.00};; Double_t Green[Number] = { 0.00, 1.00, 0.00};; Double_t Blue[Number] = { 1.00, 0.00, 1.00};; Double_t Length[Number] = { 0.00, 0.50, 1.00 };; Int_t nb=50;; TColor::CreateGradientColorTable(Number,Length,Red,Green,Blue,nb);; f2->SetContour(nb);; f2->Draw(""surf1z"");; return c2;; }; The function TColor::CreateGradientColorTable() automatically ; calls gStyle->SetPalette(), so there is not need to add one. After a call to TColor::CreateGradientColorTable() it is sometimes; useful to store the newly create palette for further use. In particular, it is; recommended to do if one wants to switch between several user define palettes.; To store a palette in an array it is enough to do:. Int_t MyPalette[100];; Double_t r[] = {0., 0.0, 1.0, 1.0, 1.0};; Double_t g[] = {0., 0.0, 0.0, 1.0, 1.0};; Double_t b[] = {0., 1.0, 0.0, 0.0, 1.0};; Double_t stop[] = {0., .25, .50, .75, 1.0};; Int_t FI = TColor::CreateGradientColorTable(5, stop, r, g, b, 100);; for (int i=0;i<100;i++) MyPalette[i] = FI+i;. Later on to reuse the palette MyPalette it will be enough to do. gStyle->SetPalette(100, MyPalette);. As only one palette is active, one need to use TExec to be able to; display plots using different palettes on the same pad.; The following macro illustrate this feature. Pic",MatchSource.WIKI,root/html532/TColor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColor.html
https://root.cern/root/html532/TColor.html:6448,Energy Efficiency,Green,Green,6448," between several user define palettes.; To store a palette in an array it is enough to do:. Int_t MyPalette[100];; Double_t r[] = {0., 0.0, 1.0, 1.0, 1.0};; Double_t g[] = {0., 0.0, 0.0, 1.0, 1.0};; Double_t b[] = {0., 1.0, 0.0, 0.0, 1.0};; Double_t stop[] = {0., .25, .50, .75, 1.0};; Int_t FI = TColor::CreateGradientColorTable(5, stop, r, g, b, 100);; for (int i=0;i<100;i++) MyPalette[i] = FI+i;. Later on to reuse the palette MyPalette it will be enough to do. gStyle->SetPalette(100, MyPalette);. As only one palette is active, one need to use TExec to be able to; display plots using different palettes on the same pad.; The following macro illustrate this feature. Picture; Source. //Draw color plots using different color palettes.; //Author:: Olivier Couet. #include ""TStyle.h""; #include ""TColor.h""; #include ""TF2.h""; #include ""TExec.h""; #include ""TCanvas.h"". ; void Pal1(); {; static Int_t colors[50];; static Bool_t initialized = kFALSE;. Double_t Red[3] = { 1.00, 0.00, 0.00};; Double_t Green[3] = { 0.00, 1.00, 0.00};; Double_t Blue[3] = { 1.00, 0.00, 1.00};; Double_t Length[3] = { 0.00, 0.50, 1.00 };. if(!initialized){; Int_t FI = TColor::CreateGradientColorTable(3,Length,Red,Green,Blue,50);; for (int i=0; i<50; i++) colors[i] = FI+i;; initialized = kTRUE;; return;; }; gStyle->SetPalette(50,colors);; }. void Pal2(); {; static Int_t colors[50];; static Bool_t initialized = kFALSE;. Double_t Red[3] = { 1.00, 0.50, 0.00};; Double_t Green[3] = { 0.50, 0.00, 1.00};; Double_t Blue[3] = { 1.00, 0.00, 0.50};; Double_t Length[3] = { 0.00, 0.50, 1.00 };. if(!initialized){; Int_t FI = TColor::CreateGradientColorTable(3,Length,Red,Green,Blue,50);; for (int i=0; i<50; i++) colors[i] = FI+i;; initialized = kTRUE;; return;; }; gStyle->SetPalette(50,colors);; }. TCanvas* multipalette() {; TCanvas *c3 = new TCanvas(""c3"",""C3"",0,0,600,400);; c3->Divide(2,1);; TF2 *f3 = new TF2(""f3"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",1,3,1,3);. c3->cd(1);; f3->Draw(""surf1""); ; TExec *ex1 = new TExec(",MatchSource.WIKI,root/html532/TColor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColor.html
https://root.cern/root/html532/TColor.html:6642,Energy Efficiency,Green,Green,6642,".0, 0.0, 0.0, 1.0};; Double_t stop[] = {0., .25, .50, .75, 1.0};; Int_t FI = TColor::CreateGradientColorTable(5, stop, r, g, b, 100);; for (int i=0;i<100;i++) MyPalette[i] = FI+i;. Later on to reuse the palette MyPalette it will be enough to do. gStyle->SetPalette(100, MyPalette);. As only one palette is active, one need to use TExec to be able to; display plots using different palettes on the same pad.; The following macro illustrate this feature. Picture; Source. //Draw color plots using different color palettes.; //Author:: Olivier Couet. #include ""TStyle.h""; #include ""TColor.h""; #include ""TF2.h""; #include ""TExec.h""; #include ""TCanvas.h"". ; void Pal1(); {; static Int_t colors[50];; static Bool_t initialized = kFALSE;. Double_t Red[3] = { 1.00, 0.00, 0.00};; Double_t Green[3] = { 0.00, 1.00, 0.00};; Double_t Blue[3] = { 1.00, 0.00, 1.00};; Double_t Length[3] = { 0.00, 0.50, 1.00 };. if(!initialized){; Int_t FI = TColor::CreateGradientColorTable(3,Length,Red,Green,Blue,50);; for (int i=0; i<50; i++) colors[i] = FI+i;; initialized = kTRUE;; return;; }; gStyle->SetPalette(50,colors);; }. void Pal2(); {; static Int_t colors[50];; static Bool_t initialized = kFALSE;. Double_t Red[3] = { 1.00, 0.50, 0.00};; Double_t Green[3] = { 0.50, 0.00, 1.00};; Double_t Blue[3] = { 1.00, 0.00, 0.50};; Double_t Length[3] = { 0.00, 0.50, 1.00 };. if(!initialized){; Int_t FI = TColor::CreateGradientColorTable(3,Length,Red,Green,Blue,50);; for (int i=0; i<50; i++) colors[i] = FI+i;; initialized = kTRUE;; return;; }; gStyle->SetPalette(50,colors);; }. TCanvas* multipalette() {; TCanvas *c3 = new TCanvas(""c3"",""C3"",0,0,600,400);; c3->Divide(2,1);; TF2 *f3 = new TF2(""f3"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",1,3,1,3);. c3->cd(1);; f3->Draw(""surf1""); ; TExec *ex1 = new TExec(""ex1"",""Pal1();"");; ex1->Draw();; f3->Draw(""surf1 same""); . c3->cd(2);; f3->Draw(""surf1""); ; TExec *ex2 = new TExec(""ex2"",""Pal2();"");; ex2->Draw();; f3->Draw(""surf1 same""); . return c3;; } . Function Members (Methods); pu",MatchSource.WIKI,root/html532/TColor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColor.html
https://root.cern/root/html532/TColor.html:6900,Energy Efficiency,Green,Green,6900,"enough to do. gStyle->SetPalette(100, MyPalette);. As only one palette is active, one need to use TExec to be able to; display plots using different palettes on the same pad.; The following macro illustrate this feature. Picture; Source. //Draw color plots using different color palettes.; //Author:: Olivier Couet. #include ""TStyle.h""; #include ""TColor.h""; #include ""TF2.h""; #include ""TExec.h""; #include ""TCanvas.h"". ; void Pal1(); {; static Int_t colors[50];; static Bool_t initialized = kFALSE;. Double_t Red[3] = { 1.00, 0.00, 0.00};; Double_t Green[3] = { 0.00, 1.00, 0.00};; Double_t Blue[3] = { 1.00, 0.00, 1.00};; Double_t Length[3] = { 0.00, 0.50, 1.00 };. if(!initialized){; Int_t FI = TColor::CreateGradientColorTable(3,Length,Red,Green,Blue,50);; for (int i=0; i<50; i++) colors[i] = FI+i;; initialized = kTRUE;; return;; }; gStyle->SetPalette(50,colors);; }. void Pal2(); {; static Int_t colors[50];; static Bool_t initialized = kFALSE;. Double_t Red[3] = { 1.00, 0.50, 0.00};; Double_t Green[3] = { 0.50, 0.00, 1.00};; Double_t Blue[3] = { 1.00, 0.00, 0.50};; Double_t Length[3] = { 0.00, 0.50, 1.00 };. if(!initialized){; Int_t FI = TColor::CreateGradientColorTable(3,Length,Red,Green,Blue,50);; for (int i=0; i<50; i++) colors[i] = FI+i;; initialized = kTRUE;; return;; }; gStyle->SetPalette(50,colors);; }. TCanvas* multipalette() {; TCanvas *c3 = new TCanvas(""c3"",""C3"",0,0,600,400);; c3->Divide(2,1);; TF2 *f3 = new TF2(""f3"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",1,3,1,3);. c3->cd(1);; f3->Draw(""surf1""); ; TExec *ex1 = new TExec(""ex1"",""Pal1();"");; ex1->Draw();; f3->Draw(""surf1 same""); . c3->cd(2);; f3->Draw(""surf1""); ; TExec *ex2 = new TExec(""ex2"",""Pal2();"");; ex2->Draw();; f3->Draw(""surf1 same""); . return c3;; } . Function Members (Methods); public:. TColor(); TColor(const TColor& color); TColor(Int_t color, Float_t r, Float_t g, Float_t b, const char* name = """", Float_t a = 1); virtual~TColor(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::",MatchSource.WIKI,root/html532/TColor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColor.html
https://root.cern/root/html532/TColor.html:7094,Energy Efficiency,Green,Green,7094," Picture; Source. //Draw color plots using different color palettes.; //Author:: Olivier Couet. #include ""TStyle.h""; #include ""TColor.h""; #include ""TF2.h""; #include ""TExec.h""; #include ""TCanvas.h"". ; void Pal1(); {; static Int_t colors[50];; static Bool_t initialized = kFALSE;. Double_t Red[3] = { 1.00, 0.00, 0.00};; Double_t Green[3] = { 0.00, 1.00, 0.00};; Double_t Blue[3] = { 1.00, 0.00, 1.00};; Double_t Length[3] = { 0.00, 0.50, 1.00 };. if(!initialized){; Int_t FI = TColor::CreateGradientColorTable(3,Length,Red,Green,Blue,50);; for (int i=0; i<50; i++) colors[i] = FI+i;; initialized = kTRUE;; return;; }; gStyle->SetPalette(50,colors);; }. void Pal2(); {; static Int_t colors[50];; static Bool_t initialized = kFALSE;. Double_t Red[3] = { 1.00, 0.50, 0.00};; Double_t Green[3] = { 0.50, 0.00, 1.00};; Double_t Blue[3] = { 1.00, 0.00, 0.50};; Double_t Length[3] = { 0.00, 0.50, 1.00 };. if(!initialized){; Int_t FI = TColor::CreateGradientColorTable(3,Length,Red,Green,Blue,50);; for (int i=0; i<50; i++) colors[i] = FI+i;; initialized = kTRUE;; return;; }; gStyle->SetPalette(50,colors);; }. TCanvas* multipalette() {; TCanvas *c3 = new TCanvas(""c3"",""C3"",0,0,600,400);; c3->Divide(2,1);; TF2 *f3 = new TF2(""f3"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",1,3,1,3);. c3->cd(1);; f3->Draw(""surf1""); ; TExec *ex1 = new TExec(""ex1"",""Pal1();"");; ex1->Draw();; f3->Draw(""surf1 same""); . c3->cd(2);; f3->Draw(""surf1""); ; TExec *ex2 = new TExec(""ex2"",""Pal2();"");; ex2->Draw();; f3->Draw(""surf1 same""); . return c3;; } . Function Members (Methods); public:. TColor(); TColor(const TColor& color); TColor(Int_t color, Float_t r, Float_t g, Float_t b, const char* name = """", Float_t a = 1); virtual~TColor(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); const char*AsHexString() const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option",MatchSource.WIKI,root/html532/TColor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColor.html
https://root.cern/root/html532/TColor.html:8600,Energy Efficiency,Green,Green,8600,,MatchSource.WIKI,root/html532/TColor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColor.html
https://root.cern/root/html532/TColor.html:15380,Energy Efficiency,Green,Green,15380,"r* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. voidAllocate(); static Float_tHLStoRGB1(Float_t rn1, Float_t rn2, Float_t huei). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. Float_tfAlphaAlpha (transparency); Float_tfBlueFraction of Blue; Float_tfGreenFraction of Green; Float_tfHueHue; Float_tfLightLight; Int_tfNumberColor number identifier; Float_tfRedFraction of Red; Float_tfSaturationSaturation; static Bool_tfgGrayscaleModeif set, GetColor will return grayscale; static Bool_tfgInitDonekTRUE once ROOT colors have been initialized; static TArrayIfgPaletteColor palette. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TColor(). Default constructor.; ; . TColor(Int_t color, Float_t r, Float_t g, Float_t b, const char* name = """", Float_t a = 1). Normal color constructor. Initialize a color structure.; Compute the RGB and HLS color components.; ; . ~TColor(). Color destructor.; ; . TColor(const TColor& color). Color copy constructor.; ; . void InitializeColors(). Initialize colors used by the TCanvas based graphics (via TColor objects).; This method should be called before the ApplicationImp is created (which; initializes the GUI colors).; ; . const char * AsHexString() const. Return color as hexadecimal string. This string can be directly passed; to, for example, TGClient::GetColorByName(). String will be reused s",MatchSource.WIKI,root/html532/TColor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColor.html
https://root.cern/root/html532/TColor.html:19565,Energy Efficiency,Allocate,Allocate,19565,"es.; ; . void RGB2HLS(Float_t r, Float_t g, Float_t b, Float_t& h, Float_t& l, Float_t& s). Static method to compute HLS from RGB. The r,g,b triplet is between; [0,1], hue is between [0,360], light and satur are [0,1].; ; . void RGB2HSV(Float_t r, Float_t g, Float_t b, Float_t& h, Float_t& s, Float_t& v). Static method to compute HSV from RGB.; ; The input values:; ; r,g,b triplet is between [0,1].; ; The returned values:; ; The hue value runs from 0 to 360.; The saturation is the degree of strength or purity and is from 0 to 1.; Purity is how much white is added to the color, so S=1 makes the purest; color (no white).; Brightness value also ranges from 0 to 1, where 0 is the black.; . . void RGB2HLS(Int_t r, Int_t g, Int_t b, Int_t& h, Int_t& l, Int_t& s). Static method to compute HLS from RGB. The r,g,b triplet is between; [0,255], hue, light and satur are between [0,255].; ; . void SetRGB(Float_t r, Float_t g, Float_t b). Initialize this color and its associated colors.; ; . void Allocate(). Make this color known to the graphics system.; ; . Int_t GetColor(const char* hexcolor). Static method returning color number for color specified by; hex color string of form: #rrggbb, where rr, gg and bb are in; hex between [0,FF], e.g. ""#c0c0c0"".; ; If specified color does not exist it will be created with as; name ""#rrggbb"" with rr, gg and bb in hex between [0,FF].; ; . Int_t GetColor(Float_t r, Float_t g, Float_t b). Static method returning color number for color specified by; r, g and b. The r,g,b should be in the range [0,1].; ; If specified color does not exist it will be created; with as name ""#rrggbb"" with rr, gg and bb in hex between; [0,FF].; ; . Int_t GetColor(ULong_t pixel). Static method returning color number for color specified by; system dependent pixel value. Pixel values can be obtained, e.g.,; from the GUI color picker.; ; . Int_t GetColor(Int_t r, Int_t g, Int_t b). Static method returning color number for color specified by; r, g and b. The r,g,b should b",MatchSource.WIKI,root/html532/TColor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColor.html
https://root.cern/root/html532/TColor.html:22877,Energy Efficiency,Green,Green,22877," or via TColor::GetPixel()) to r,g,b triplet.; The r,g,b triplet will be [0,1].; ; . void Pixel2RGB(ULong_t pixel, Int_t& r, Int_t& g, Int_t& b). Convert machine dependent pixel value (obtained via RGB2Pixel or; via Number2Pixel() or via TColor::GetPixel()) to r,g,b triplet.; The r,g,b triplet will be [0,255].; ; . const char * PixelAsHexString(ULong_t pixel). Convert machine dependent pixel value (obtained via RGB2Pixel or; via Number2Pixel() or via TColor::GetPixel()) to a hexadecimal string.; This string can be directly passed to, for example,; TGClient::GetColorByName(). String will be reused so copy immediately; if needed.; ; . void SaveColor(ostream& out, Int_t ci). Save a color with index > 228 as a C++ statement(s) on output stream out.; ; . Bool_t IsGrayscale(). Return whether all colors return grayscale values.; ; . void SetGrayscale(Bool_t set = kTRUE). Set whether all colors should return grayscale values.; ; . Int_t CreateGradientColorTable(UInt_t Number, Double_t* Stops, Double_t* Red, Double_t* Green, Double_t* Blue, UInt_t NColors). Static function creating a color table with several connected linear gradients.; ; Number: The number of end point colors that will form the gradients.; Must be at least 2.; Stops: Where in the whole table the end point colors should lie.; Each entry must be on [0, 1], each entry must be greater than; the previous entry.; Red, Green, Blue: The end point color values.; Each entry must be on [0, 1]; NColors: Total number of colors in the table. Must be at least 1.; ; Returns a positive value on success and -1 on error.; ; The table is constructed by tracing lines between the given points in; RGB space. Each color value may have a value between 0 and 1. The; difference between consecutive ""Stops"" values gives the fraction of; space in the whole table that should be used for the interval between; the corresponding color values.; ; Normally the first element of Stops should be 0 and the last should be 1.; If this is not true, ",MatchSource.WIKI,root/html532/TColor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColor.html
https://root.cern/root/html532/TColor.html:23246,Energy Efficiency,Green,Green,23246," via RGB2Pixel or; via Number2Pixel() or via TColor::GetPixel()) to a hexadecimal string.; This string can be directly passed to, for example,; TGClient::GetColorByName(). String will be reused so copy immediately; if needed.; ; . void SaveColor(ostream& out, Int_t ci). Save a color with index > 228 as a C++ statement(s) on output stream out.; ; . Bool_t IsGrayscale(). Return whether all colors return grayscale values.; ; . void SetGrayscale(Bool_t set = kTRUE). Set whether all colors should return grayscale values.; ; . Int_t CreateGradientColorTable(UInt_t Number, Double_t* Stops, Double_t* Red, Double_t* Green, Double_t* Blue, UInt_t NColors). Static function creating a color table with several connected linear gradients.; ; Number: The number of end point colors that will form the gradients.; Must be at least 2.; Stops: Where in the whole table the end point colors should lie.; Each entry must be on [0, 1], each entry must be greater than; the previous entry.; Red, Green, Blue: The end point color values.; Each entry must be on [0, 1]; NColors: Total number of colors in the table. Must be at least 1.; ; Returns a positive value on success and -1 on error.; ; The table is constructed by tracing lines between the given points in; RGB space. Each color value may have a value between 0 and 1. The; difference between consecutive ""Stops"" values gives the fraction of; space in the whole table that should be used for the interval between; the corresponding color values.; ; Normally the first element of Stops should be 0 and the last should be 1.; If this is not true, fewer than NColors will be used in proportion with; the total interval between the first and last elements of Stops.; ; This definition is similar to the povray-definition of gradient; color tables.; ; For instance:; ; UInt_t Number = 3;; Double_t Red[3] = { 0.0, 1.0, 1.0 };; Double_t Green[3] = { 0.0, 0.0, 1.0 };; Double_t Blue[3] = { 1.0, 0.0, 1.0 };; Double_t Stops[3] = { 0.0, 0.4, 1.0 };; ; This defines ",MatchSource.WIKI,root/html532/TColor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColor.html
https://root.cern/root/html532/TColor.html:24138,Energy Efficiency,Green,Green,24138,"olors should lie.; Each entry must be on [0, 1], each entry must be greater than; the previous entry.; Red, Green, Blue: The end point color values.; Each entry must be on [0, 1]; NColors: Total number of colors in the table. Must be at least 1.; ; Returns a positive value on success and -1 on error.; ; The table is constructed by tracing lines between the given points in; RGB space. Each color value may have a value between 0 and 1. The; difference between consecutive ""Stops"" values gives the fraction of; space in the whole table that should be used for the interval between; the corresponding color values.; ; Normally the first element of Stops should be 0 and the last should be 1.; If this is not true, fewer than NColors will be used in proportion with; the total interval between the first and last elements of Stops.; ; This definition is similar to the povray-definition of gradient; color tables.; ; For instance:; ; UInt_t Number = 3;; Double_t Red[3] = { 0.0, 1.0, 1.0 };; Double_t Green[3] = { 0.0, 0.0, 1.0 };; Double_t Blue[3] = { 1.0, 0.0, 1.0 };; Double_t Stops[3] = { 0.0, 0.4, 1.0 };; ; This defines a table in which there are three color end points:; RGB = {0, 0, 1}, {1, 0, 0}, and {1, 1, 1} = blue, red, white; The first 40% of the table is used to go linearly from blue to red.; The remaining 60% of the table is used to go linearly from red to white.; ; If you define a very short interval such that less than one color fits; in it, no colors at all will be allocated. If this occurs for all; intervals, ROOT will revert to the default palette.; ; Original code by Andreas Zoglauer (zog@mpe.mpg.de); ; . void SetPalette(Int_t ncolors, Int_t* colors). Static function.; The color palette is used by the histogram classes; (see TH1::Draw options).; For example TH1::Draw(""col"") draws a 2-D histogram with cells; represented by a box filled with a color CI function of the cell content.; if the cell content is N, the color CI used will be the color number; in colors[N],et",MatchSource.WIKI,root/html532/TColor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColor.html
https://root.cern/root/html532/TColor.html:24626,Energy Efficiency,allocate,allocated,24626,"he; difference between consecutive ""Stops"" values gives the fraction of; space in the whole table that should be used for the interval between; the corresponding color values.; ; Normally the first element of Stops should be 0 and the last should be 1.; If this is not true, fewer than NColors will be used in proportion with; the total interval between the first and last elements of Stops.; ; This definition is similar to the povray-definition of gradient; color tables.; ; For instance:; ; UInt_t Number = 3;; Double_t Red[3] = { 0.0, 1.0, 1.0 };; Double_t Green[3] = { 0.0, 0.0, 1.0 };; Double_t Blue[3] = { 1.0, 0.0, 1.0 };; Double_t Stops[3] = { 0.0, 0.4, 1.0 };; ; This defines a table in which there are three color end points:; RGB = {0, 0, 1}, {1, 0, 0}, and {1, 1, 1} = blue, red, white; The first 40% of the table is used to go linearly from blue to red.; The remaining 60% of the table is used to go linearly from red to white.; ; If you define a very short interval such that less than one color fits; in it, no colors at all will be allocated. If this occurs for all; intervals, ROOT will revert to the default palette.; ; Original code by Andreas Zoglauer (zog@mpe.mpg.de); ; . void SetPalette(Int_t ncolors, Int_t* colors). Static function.; The color palette is used by the histogram classes; (see TH1::Draw options).; For example TH1::Draw(""col"") draws a 2-D histogram with cells; represented by a box filled with a color CI function of the cell content.; if the cell content is N, the color CI used will be the color number; in colors[N],etc. If the maximum cell content is > ncolors, all; cell contents are scaled to ncolors.; ; if ncolors <= 0 a default palette (see below) of 50 colors is; defined. The colors defined in this palette are OK for coloring pads, labels.; ; if ncolors == 1 && colors == 0, then a Pretty Palette with a; Spectrum Violet->Red is created. It is recommended to use this Pretty; palette when drawing legos, surfaces or contours.; ; if ncolors > 50 and",MatchSource.WIKI,root/html532/TColor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColor.html
https://root.cern/root/html532/TColor.html:20342,Integrability,depend,dependent,20342,"t& l, Int_t& s). Static method to compute HLS from RGB. The r,g,b triplet is between; [0,255], hue, light and satur are between [0,255].; ; . void SetRGB(Float_t r, Float_t g, Float_t b). Initialize this color and its associated colors.; ; . void Allocate(). Make this color known to the graphics system.; ; . Int_t GetColor(const char* hexcolor). Static method returning color number for color specified by; hex color string of form: #rrggbb, where rr, gg and bb are in; hex between [0,FF], e.g. ""#c0c0c0"".; ; If specified color does not exist it will be created with as; name ""#rrggbb"" with rr, gg and bb in hex between [0,FF].; ; . Int_t GetColor(Float_t r, Float_t g, Float_t b). Static method returning color number for color specified by; r, g and b. The r,g,b should be in the range [0,1].; ; If specified color does not exist it will be created; with as name ""#rrggbb"" with rr, gg and bb in hex between; [0,FF].; ; . Int_t GetColor(ULong_t pixel). Static method returning color number for color specified by; system dependent pixel value. Pixel values can be obtained, e.g.,; from the GUI color picker.; ; . Int_t GetColor(Int_t r, Int_t g, Int_t b). Static method returning color number for color specified by; r, g and b. The r,g,b should be in the range [0,255].; If the specified color does not exist it will be created; with as name ""#rrggbb"" with rr, gg and bb in hex between; [0,FF].; ; . Int_t GetColorBright(Int_t color). Static function: Returns the bright color number corresponding to n; If the TColor object does not exist, it is created.; The convention is that the bright color nb = n+150; ; . Int_t GetColorDark(Int_t color). Static function: Returns the dark color number corresponding to n; If the TColor object does not exist, it is created.; The convention is that the dark color nd = n+100; ; . ULong_t Number2Pixel(Int_t ci). Static method that given a color index number, returns the corresponding; pixel value. This pixel value can be used in the GUI classes. This call",MatchSource.WIKI,root/html532/TColor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColor.html
https://root.cern/root/html532/TColor.html:21496,Integrability,depend,dependent,21496," returning color number for color specified by; r, g and b. The r,g,b should be in the range [0,255].; If the specified color does not exist it will be created; with as name ""#rrggbb"" with rr, gg and bb in hex between; [0,FF].; ; . Int_t GetColorBright(Int_t color). Static function: Returns the bright color number corresponding to n; If the TColor object does not exist, it is created.; The convention is that the bright color nb = n+150; ; . Int_t GetColorDark(Int_t color). Static function: Returns the dark color number corresponding to n; If the TColor object does not exist, it is created.; The convention is that the dark color nd = n+100; ; . ULong_t Number2Pixel(Int_t ci). Static method that given a color index number, returns the corresponding; pixel value. This pixel value can be used in the GUI classes. This call; does not work in batch mode since it needs to communicate with the; graphics system.; ; . ULong_t RGB2Pixel(Float_t r, Float_t g, Float_t b). Convert r,g,b to graphics system dependent pixel value.; The r,g,b triplet must be [0,1].; ; . ULong_t RGB2Pixel(Int_t r, Int_t g, Int_t b). Convert r,g,b to graphics system dependent pixel value.; The r,g,b triplet must be [0,255].; ; . void Pixel2RGB(ULong_t pixel, Float_t& r, Float_t& g, Float_t& b). Convert machine dependent pixel value (obtained via RGB2Pixel or; via Number2Pixel() or via TColor::GetPixel()) to r,g,b triplet.; The r,g,b triplet will be [0,1].; ; . void Pixel2RGB(ULong_t pixel, Int_t& r, Int_t& g, Int_t& b). Convert machine dependent pixel value (obtained via RGB2Pixel or; via Number2Pixel() or via TColor::GetPixel()) to r,g,b triplet.; The r,g,b triplet will be [0,255].; ; . const char * PixelAsHexString(ULong_t pixel). Convert machine dependent pixel value (obtained via RGB2Pixel or; via Number2Pixel() or via TColor::GetPixel()) to a hexadecimal string.; This string can be directly passed to, for example,; TGClient::GetColorByName(). String will be reused so copy immediately; if needed.; ;",MatchSource.WIKI,root/html532/TColor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColor.html
https://root.cern/root/html532/TColor.html:21637,Integrability,depend,dependent,21637,"it will be created; with as name ""#rrggbb"" with rr, gg and bb in hex between; [0,FF].; ; . Int_t GetColorBright(Int_t color). Static function: Returns the bright color number corresponding to n; If the TColor object does not exist, it is created.; The convention is that the bright color nb = n+150; ; . Int_t GetColorDark(Int_t color). Static function: Returns the dark color number corresponding to n; If the TColor object does not exist, it is created.; The convention is that the dark color nd = n+100; ; . ULong_t Number2Pixel(Int_t ci). Static method that given a color index number, returns the corresponding; pixel value. This pixel value can be used in the GUI classes. This call; does not work in batch mode since it needs to communicate with the; graphics system.; ; . ULong_t RGB2Pixel(Float_t r, Float_t g, Float_t b). Convert r,g,b to graphics system dependent pixel value.; The r,g,b triplet must be [0,1].; ; . ULong_t RGB2Pixel(Int_t r, Int_t g, Int_t b). Convert r,g,b to graphics system dependent pixel value.; The r,g,b triplet must be [0,255].; ; . void Pixel2RGB(ULong_t pixel, Float_t& r, Float_t& g, Float_t& b). Convert machine dependent pixel value (obtained via RGB2Pixel or; via Number2Pixel() or via TColor::GetPixel()) to r,g,b triplet.; The r,g,b triplet will be [0,1].; ; . void Pixel2RGB(ULong_t pixel, Int_t& r, Int_t& g, Int_t& b). Convert machine dependent pixel value (obtained via RGB2Pixel or; via Number2Pixel() or via TColor::GetPixel()) to r,g,b triplet.; The r,g,b triplet will be [0,255].; ; . const char * PixelAsHexString(ULong_t pixel). Convert machine dependent pixel value (obtained via RGB2Pixel or; via Number2Pixel() or via TColor::GetPixel()) to a hexadecimal string.; This string can be directly passed to, for example,; TGClient::GetColorByName(). String will be reused so copy immediately; if needed.; ; . void SaveColor(ostream& out, Int_t ci). Save a color with index > 228 as a C++ statement(s) on output stream out.; ; . Bool_t IsGrayscale(",MatchSource.WIKI,root/html532/TColor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColor.html
https://root.cern/root/html532/TColor.html:21784,Integrability,depend,dependent,21784," TColor object does not exist, it is created.; The convention is that the bright color nb = n+150; ; . Int_t GetColorDark(Int_t color). Static function: Returns the dark color number corresponding to n; If the TColor object does not exist, it is created.; The convention is that the dark color nd = n+100; ; . ULong_t Number2Pixel(Int_t ci). Static method that given a color index number, returns the corresponding; pixel value. This pixel value can be used in the GUI classes. This call; does not work in batch mode since it needs to communicate with the; graphics system.; ; . ULong_t RGB2Pixel(Float_t r, Float_t g, Float_t b). Convert r,g,b to graphics system dependent pixel value.; The r,g,b triplet must be [0,1].; ; . ULong_t RGB2Pixel(Int_t r, Int_t g, Int_t b). Convert r,g,b to graphics system dependent pixel value.; The r,g,b triplet must be [0,255].; ; . void Pixel2RGB(ULong_t pixel, Float_t& r, Float_t& g, Float_t& b). Convert machine dependent pixel value (obtained via RGB2Pixel or; via Number2Pixel() or via TColor::GetPixel()) to r,g,b triplet.; The r,g,b triplet will be [0,1].; ; . void Pixel2RGB(ULong_t pixel, Int_t& r, Int_t& g, Int_t& b). Convert machine dependent pixel value (obtained via RGB2Pixel or; via Number2Pixel() or via TColor::GetPixel()) to r,g,b triplet.; The r,g,b triplet will be [0,255].; ; . const char * PixelAsHexString(ULong_t pixel). Convert machine dependent pixel value (obtained via RGB2Pixel or; via Number2Pixel() or via TColor::GetPixel()) to a hexadecimal string.; This string can be directly passed to, for example,; TGClient::GetColorByName(). String will be reused so copy immediately; if needed.; ; . void SaveColor(ostream& out, Int_t ci). Save a color with index > 228 as a C++ statement(s) on output stream out.; ; . Bool_t IsGrayscale(). Return whether all colors return grayscale values.; ; . void SetGrayscale(Bool_t set = kTRUE). Set whether all colors should return grayscale values.; ; . Int_t CreateGradientColorTable(UInt_t Numbe",MatchSource.WIKI,root/html532/TColor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColor.html
https://root.cern/root/html532/TColor.html:22014,Integrability,depend,dependent,22014,"ot exist, it is created.; The convention is that the dark color nd = n+100; ; . ULong_t Number2Pixel(Int_t ci). Static method that given a color index number, returns the corresponding; pixel value. This pixel value can be used in the GUI classes. This call; does not work in batch mode since it needs to communicate with the; graphics system.; ; . ULong_t RGB2Pixel(Float_t r, Float_t g, Float_t b). Convert r,g,b to graphics system dependent pixel value.; The r,g,b triplet must be [0,1].; ; . ULong_t RGB2Pixel(Int_t r, Int_t g, Int_t b). Convert r,g,b to graphics system dependent pixel value.; The r,g,b triplet must be [0,255].; ; . void Pixel2RGB(ULong_t pixel, Float_t& r, Float_t& g, Float_t& b). Convert machine dependent pixel value (obtained via RGB2Pixel or; via Number2Pixel() or via TColor::GetPixel()) to r,g,b triplet.; The r,g,b triplet will be [0,1].; ; . void Pixel2RGB(ULong_t pixel, Int_t& r, Int_t& g, Int_t& b). Convert machine dependent pixel value (obtained via RGB2Pixel or; via Number2Pixel() or via TColor::GetPixel()) to r,g,b triplet.; The r,g,b triplet will be [0,255].; ; . const char * PixelAsHexString(ULong_t pixel). Convert machine dependent pixel value (obtained via RGB2Pixel or; via Number2Pixel() or via TColor::GetPixel()) to a hexadecimal string.; This string can be directly passed to, for example,; TGClient::GetColorByName(). String will be reused so copy immediately; if needed.; ; . void SaveColor(ostream& out, Int_t ci). Save a color with index > 228 as a C++ statement(s) on output stream out.; ; . Bool_t IsGrayscale(). Return whether all colors return grayscale values.; ; . void SetGrayscale(Bool_t set = kTRUE). Set whether all colors should return grayscale values.; ; . Int_t CreateGradientColorTable(UInt_t Number, Double_t* Stops, Double_t* Red, Double_t* Green, Double_t* Blue, UInt_t NColors). Static function creating a color table with several connected linear gradients.; ; Number: The number of end point colors that will form the grad",MatchSource.WIKI,root/html532/TColor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColor.html
https://root.cern/root/html532/TColor.html:22231,Integrability,depend,dependent,22231,"be used in the GUI classes. This call; does not work in batch mode since it needs to communicate with the; graphics system.; ; . ULong_t RGB2Pixel(Float_t r, Float_t g, Float_t b). Convert r,g,b to graphics system dependent pixel value.; The r,g,b triplet must be [0,1].; ; . ULong_t RGB2Pixel(Int_t r, Int_t g, Int_t b). Convert r,g,b to graphics system dependent pixel value.; The r,g,b triplet must be [0,255].; ; . void Pixel2RGB(ULong_t pixel, Float_t& r, Float_t& g, Float_t& b). Convert machine dependent pixel value (obtained via RGB2Pixel or; via Number2Pixel() or via TColor::GetPixel()) to r,g,b triplet.; The r,g,b triplet will be [0,1].; ; . void Pixel2RGB(ULong_t pixel, Int_t& r, Int_t& g, Int_t& b). Convert machine dependent pixel value (obtained via RGB2Pixel or; via Number2Pixel() or via TColor::GetPixel()) to r,g,b triplet.; The r,g,b triplet will be [0,255].; ; . const char * PixelAsHexString(ULong_t pixel). Convert machine dependent pixel value (obtained via RGB2Pixel or; via Number2Pixel() or via TColor::GetPixel()) to a hexadecimal string.; This string can be directly passed to, for example,; TGClient::GetColorByName(). String will be reused so copy immediately; if needed.; ; . void SaveColor(ostream& out, Int_t ci). Save a color with index > 228 as a C++ statement(s) on output stream out.; ; . Bool_t IsGrayscale(). Return whether all colors return grayscale values.; ; . void SetGrayscale(Bool_t set = kTRUE). Set whether all colors should return grayscale values.; ; . Int_t CreateGradientColorTable(UInt_t Number, Double_t* Stops, Double_t* Red, Double_t* Green, Double_t* Blue, UInt_t NColors). Static function creating a color table with several connected linear gradients.; ; Number: The number of end point colors that will form the gradients.; Must be at least 2.; Stops: Where in the whole table the end point colors should lie.; Each entry must be on [0, 1], each entry must be greater than; the previous entry.; Red, Green, Blue: The end point color valu",MatchSource.WIKI,root/html532/TColor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColor.html
https://root.cern/root/html532/TColor.html:3729,Modifiability,variab,variable,3729,"ive 3-D effects when drawing various; boxes (see TWbox, TPave, TPaveText, TPaveLabel, etc). The dark colors have an index = color_index+100; The bright colors have an index = color_index+150; Two static functions return the bright and dark color number; corresponding to a color index. If the bright or dark color does not; exist, they are created:; ; Int_t dark = TColor::GetColorDark(color_index);; Int_t bright = TColor::GetColorBright(color_index);; . Grayscale view of of canvas with colors; One can toggle between a grayscale preview and the regular colored mode using; TCanvas::SetGrayscale(). Note that in grayscale mode, access via RGB; will return grayscale values according to ITU standards (and close to b&w; printer grayscales), while access via HLS returns de-saturated grayscales. The; image below shows the ROOT color wheel in grayscale mode. Picture; Source. {; TColorWheel *w = new TColorWheel();; w->Draw();; w->GetCanvas()->SetGrayscale();; w->GetCanvas()->Modified();; w->GetCanvas()->Update();; return w->GetCanvas();; }; Color palettes; It is often very useful to represent a variable with a color map. The concept; of ""color palette"" allows to do that. One color palette is active at any time.; This ""current palette"" is set using:. gStyle->SetPalette(...);. This function has two parameters: the number of colors in the palette and an; array of containing the indices of colors in the palette. The following small; example demonstrates how to define and use the color palette:. Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""c1"",0,0,600,400);; TF2 *f1 = new TF2(""f1"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",1,3,1,3);; Int_t palette[5];; palette[0] = 15;; palette[1] = 20;; palette[2] = 23;; palette[3] = 30;; palette[4] = 32;; gStyle->SetPalette(5,palette);; f1->Draw(""colz"");; return c1;; }; To define more a complex palette with a continuous gradient of color, one; should use the static function TColor::CreateGradientColorTable().; The following example demonstrates h",MatchSource.WIKI,root/html532/TColor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColor.html
https://root.cern/root/html532/TColor.html:11189,Modifiability,Inherit,InheritsFrom,11189,"t char*TNamed::GetName() const; Int_tGetNumber() const; static Int_tGetNumberOfColors(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; ULong_tGetPixel() const; Float_tGetRed() const; virtual voidGetRGB(Float_t& r, Float_t& g, Float_t& b) const; Float_tGetSaturation() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; static voidHLS2RGB(Float_t h, Float_t l, Float_t s, Float_t& r, Float_t& g, Float_t& b); static voidHLS2RGB(Int_t h, Int_t l, Int_t s, Int_t& r, Int_t& g, Int_t& b); static voidHLStoRGB(Float_t h, Float_t l, Float_t s, Float_t& r, Float_t& g, Float_t& b); static voidHSV2RGB(Float_t h, Float_t s, Float_t v, Float_t& r, Float_t& g, Float_t& b); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; static voidInitializeColors(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; static Bool_tIsGrayscale(); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); static ULong_tNumber2Pixel(Int_t ci); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObjec",MatchSource.WIKI,root/html532/TColor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColor.html
https://root.cern/root/html532/TColor.html:11255,Modifiability,Inherit,InheritsFrom,11255,"_tGetNumberOfColors(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; ULong_tGetPixel() const; Float_tGetRed() const; virtual voidGetRGB(Float_t& r, Float_t& g, Float_t& b) const; Float_tGetSaturation() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; static voidHLS2RGB(Float_t h, Float_t l, Float_t s, Float_t& r, Float_t& g, Float_t& b); static voidHLS2RGB(Int_t h, Int_t l, Int_t s, Int_t& r, Int_t& g, Int_t& b); static voidHLStoRGB(Float_t h, Float_t l, Float_t s, Float_t& r, Float_t& g, Float_t& b); static voidHSV2RGB(Float_t h, Float_t s, Float_t v, Float_t& r, Float_t& g, Float_t& b); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; static voidInitializeColors(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; static Bool_tIsGrayscale(); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); static ULong_tNumber2Pixel(Int_t ci); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[]",MatchSource.WIKI,root/html532/TColor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColor.html
https://root.cern/root/html532/TColor.html:15707,Modifiability,Inherit,Inheritance,15707,"nt level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. voidAllocate(); static Float_tHLStoRGB1(Float_t rn1, Float_t rn2, Float_t huei). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. Float_tfAlphaAlpha (transparency); Float_tfBlueFraction of Blue; Float_tfGreenFraction of Green; Float_tfHueHue; Float_tfLightLight; Int_tfNumberColor number identifier; Float_tfRedFraction of Red; Float_tfSaturationSaturation; static Bool_tfgGrayscaleModeif set, GetColor will return grayscale; static Bool_tfgInitDonekTRUE once ROOT colors have been initialized; static TArrayIfgPaletteColor palette. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TColor(). Default constructor.; ; . TColor(Int_t color, Float_t r, Float_t g, Float_t b, const char* name = """", Float_t a = 1). Normal color constructor. Initialize a color structure.; Compute the RGB and HLS color components.; ; . ~TColor(). Color destructor.; ; . TColor(const TColor& color). Color copy constructor.; ; . void InitializeColors(). Initialize colors used by the TCanvas based graphics (via TColor objects).; This method should be called before the ApplicationImp is created (which; initializes the GUI colors).; ; . const char * AsHexString() const. Return color as hexadecimal string. This string can be directly passed; to, for example, TGClient::GetColorByName(). String will be reused so; copy immediately if needed.; ; . void Copy(TObject& color) const. Copy this color to obj.; ; . void CreateColorsGray(). Create the Gray scale colors in the Color Wheel; ; . void CreateColorsCircle(Int_t offset, const char* name, UChar_t* r",MatchSource.WIKI,root/html532/TColor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColor.html
https://root.cern/root/html532/TColor.html:15720,Modifiability,Inherit,Inherited,15720,"nt level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. voidAllocate(); static Float_tHLStoRGB1(Float_t rn1, Float_t rn2, Float_t huei). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. Float_tfAlphaAlpha (transparency); Float_tfBlueFraction of Blue; Float_tfGreenFraction of Green; Float_tfHueHue; Float_tfLightLight; Int_tfNumberColor number identifier; Float_tfRedFraction of Red; Float_tfSaturationSaturation; static Bool_tfgGrayscaleModeif set, GetColor will return grayscale; static Bool_tfgInitDonekTRUE once ROOT colors have been initialized; static TArrayIfgPaletteColor palette. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TColor(). Default constructor.; ; . TColor(Int_t color, Float_t r, Float_t g, Float_t b, const char* name = """", Float_t a = 1). Normal color constructor. Initialize a color structure.; Compute the RGB and HLS color components.; ; . ~TColor(). Color destructor.; ; . TColor(const TColor& color). Color copy constructor.; ; . void InitializeColors(). Initialize colors used by the TCanvas based graphics (via TColor objects).; This method should be called before the ApplicationImp is created (which; initializes the GUI colors).; ; . const char * AsHexString() const. Return color as hexadecimal string. This string can be directly passed; to, for example, TGClient::GetColorByName(). String will be reused so; copy immediately if needed.; ; . void Copy(TObject& color) const. Copy this color to obj.; ; . void CreateColorsGray(). Create the Gray scale colors in the Color Wheel; ; . void CreateColorsCircle(Int_t offset, const char* name, UChar_t* r",MatchSource.WIKI,root/html532/TColor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColor.html
https://root.cern/root/html532/TColor.html:3260,Security,access,access,3260," instead of hardcoded color numbers, e.g.:. myObject.SetFillColor(kRed);; myObject.SetFillColor(kYellow-10);; myLine.SetLineColor(kMagenta+2);. Picture; Source. {; TColorWheel *w = new TColorWheel();; w->Draw();; return w->GetCanvas();; }; Bright and dark colors; The dark and bright color are used to give 3-D effects when drawing various; boxes (see TWbox, TPave, TPaveText, TPaveLabel, etc). The dark colors have an index = color_index+100; The bright colors have an index = color_index+150; Two static functions return the bright and dark color number; corresponding to a color index. If the bright or dark color does not; exist, they are created:; ; Int_t dark = TColor::GetColorDark(color_index);; Int_t bright = TColor::GetColorBright(color_index);; . Grayscale view of of canvas with colors; One can toggle between a grayscale preview and the regular colored mode using; TCanvas::SetGrayscale(). Note that in grayscale mode, access via RGB; will return grayscale values according to ITU standards (and close to b&w; printer grayscales), while access via HLS returns de-saturated grayscales. The; image below shows the ROOT color wheel in grayscale mode. Picture; Source. {; TColorWheel *w = new TColorWheel();; w->Draw();; w->GetCanvas()->SetGrayscale();; w->GetCanvas()->Modified();; w->GetCanvas()->Update();; return w->GetCanvas();; }; Color palettes; It is often very useful to represent a variable with a color map. The concept; of ""color palette"" allows to do that. One color palette is active at any time.; This ""current palette"" is set using:. gStyle->SetPalette(...);. This function has two parameters: the number of colors in the palette and an; array of containing the indices of colors in the palette. The following small; example demonstrates how to define and use the color palette:. Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""c1"",0,0,600,400);; TF2 *f1 = new TF2(""f1"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",1,3,1,3);; Int_t palette[5];; palette[0] = 15;; palette[1] = 20",MatchSource.WIKI,root/html532/TColor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColor.html
https://root.cern/root/html532/TColor.html:3378,Security,access,access,3378," instead of hardcoded color numbers, e.g.:. myObject.SetFillColor(kRed);; myObject.SetFillColor(kYellow-10);; myLine.SetLineColor(kMagenta+2);. Picture; Source. {; TColorWheel *w = new TColorWheel();; w->Draw();; return w->GetCanvas();; }; Bright and dark colors; The dark and bright color are used to give 3-D effects when drawing various; boxes (see TWbox, TPave, TPaveText, TPaveLabel, etc). The dark colors have an index = color_index+100; The bright colors have an index = color_index+150; Two static functions return the bright and dark color number; corresponding to a color index. If the bright or dark color does not; exist, they are created:; ; Int_t dark = TColor::GetColorDark(color_index);; Int_t bright = TColor::GetColorBright(color_index);; . Grayscale view of of canvas with colors; One can toggle between a grayscale preview and the regular colored mode using; TCanvas::SetGrayscale(). Note that in grayscale mode, access via RGB; will return grayscale values according to ITU standards (and close to b&w; printer grayscales), while access via HLS returns de-saturated grayscales. The; image below shows the ROOT color wheel in grayscale mode. Picture; Source. {; TColorWheel *w = new TColorWheel();; w->Draw();; w->GetCanvas()->SetGrayscale();; w->GetCanvas()->Modified();; w->GetCanvas()->Update();; return w->GetCanvas();; }; Color palettes; It is often very useful to represent a variable with a color map. The concept; of ""color palette"" allows to do that. One color palette is active at any time.; This ""current palette"" is set using:. gStyle->SetPalette(...);. This function has two parameters: the number of colors in the palette and an; array of containing the indices of colors in the palette. The following small; example demonstrates how to define and use the color palette:. Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""c1"",0,0,600,400);; TF2 *f1 = new TF2(""f1"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",1,3,1,3);; Int_t palette[5];; palette[0] = 15;; palette[1] = 20",MatchSource.WIKI,root/html532/TColor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColor.html
https://root.cern/root/html532/TColor.html:10734,Security,Hash,Hash,10734,"r, Int_t g, Int_t b); static Int_tGetColorBright(Int_t color); static Int_tGetColorDark(Int_t color); static Int_tGetColorPalette(Int_t i); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Float_tGetGrayscale() const; Float_tGetGreen() const; virtual voidGetHLS(Float_t& h, Float_t& l, Float_t& s) const; Float_tGetHue() const; virtual const char*TObject::GetIconName() const; Float_tGetLight() const; virtual const char*TNamed::GetName() const; Int_tGetNumber() const; static Int_tGetNumberOfColors(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; ULong_tGetPixel() const; Float_tGetRed() const; virtual voidGetRGB(Float_t& r, Float_t& g, Float_t& b) const; Float_tGetSaturation() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; static voidHLS2RGB(Float_t h, Float_t l, Float_t s, Float_t& r, Float_t& g, Float_t& b); static voidHLS2RGB(Int_t h, Int_t l, Int_t s, Int_t& r, Int_t& g, Int_t& b); static voidHLStoRGB(Float_t h, Float_t l, Float_t s, Float_t& r, Float_t& g, Float_t& b); static voidHSV2RGB(Float_t h, Float_t s, Float_t v, Float_t& r, Float_t& g, Float_t& b); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; static voidInitializeColors(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; static Bool_tIsGrayscale(); Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidls(Option_t* option = """") const; voidTObject::MayNotUse(const",MatchSource.WIKI,root/html532/TColor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColor.html
https://root.cern/root/html532/TColor.html:14327,Testability,Test,TestBit,14327,"_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); static voidRGB2HLS(Float_t r, Float_t g, Float_t b, Float_t& h, Float_t& l, Float_t& s); static voidRGB2HLS(Int_t r, Int_t g, Int_t b, Int_t& h, Int_t& l, Int_t& s); static voidRGB2HSV(Float_t r, Float_t g, Float_t b, Float_t& h, Float_t& s, Float_t& v); static ULong_tRGB2Pixel(Int_t r, Int_t g, Int_t b); static ULong_tRGB2Pixel(Float_t r, Float_t g, Float_t b); static voidRGBtoHLS(Float_t r, Float_t g, Float_t b, Float_t& h, Float_t& l, Float_t& s); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; static voidSaveColor(ostream& out, Int_t ci); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidSetGrayscale(Bool_t set = kTRUE); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); static voidSetPalette(Int_t ncolors, Int_t* colors); virtual voidSetRGB(Float_t r, Float_t g, Float_t b); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TColor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColor.html
https://root.cern/root/html532/TColor.html:14366,Testability,Test,TestBits,14366,"_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); static voidRGB2HLS(Float_t r, Float_t g, Float_t b, Float_t& h, Float_t& l, Float_t& s); static voidRGB2HLS(Int_t r, Int_t g, Int_t b, Int_t& h, Int_t& l, Int_t& s); static voidRGB2HSV(Float_t r, Float_t g, Float_t b, Float_t& h, Float_t& s, Float_t& v); static ULong_tRGB2Pixel(Int_t r, Int_t g, Int_t b); static ULong_tRGB2Pixel(Float_t r, Float_t g, Float_t b); static voidRGBtoHLS(Float_t r, Float_t g, Float_t b, Float_t& h, Float_t& l, Float_t& s); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; static voidSaveColor(ostream& out, Int_t ci); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidSetGrayscale(Bool_t set = kTRUE); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); static voidSetPalette(Int_t ncolors, Int_t* colors); virtual voidSetRGB(Float_t r, Float_t g, Float_t b); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TColor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColor.html
https://root.cern/root/html532/TColor.html:520,Usability,simpl,simply,520,". TColor. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TColor. class TColor: public TNamed. The color creation and management class. Introduction; Basic colors; The color wheel; Bright and dark colors; Gray scale view of of canvas with colors; Color palettes. Introduction; Colors are defined by their red, green and blue components, simply called the; RGB components. The colors are also known by the hue, light and saturation; components also known as the HLS components. When a new color is created the; components of both color systems are computed. At initialization time, a table of colors is generated. An existing color can; be retrieved by its index:. TColor *color = gROOT->GetColor(10);. Then it can be manipulated. For example its RGB components can be modified:. color->SetRGB(0.1, 0.2, 0.3);. A new color can be created the following way:. Int_t ci = 1756; // color index; TColor *color = new TColor(ci, 0.1, 0.2, 0.3);. Two sets of colors are initialized;. The basic colors: colors with index from 0 to 50.; The color wheel: colors with indices from 300 to 1000. Basic colors; The following image displays the 50 basic colors. Picture; Source. {; TCanvas *c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; c.DrawColorTable();; return c;; }; The color wheel; The wheel contains the recommended 216 colors to be used in web applications.; The colors in the color wheel are created by TColor::CreateColorWheel. Using this color set for your text, background or graphics will give your; application a consistent appearance across different platforms and browsers. Colors are grouped by hue, the aspect most important in human perception.; Touching color chips have the same hue, but with different brightness and; vividness. Colors of slightly different hues clash. If you intend to display; colors o",MatchSource.WIKI,root/html532/TColor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColor.html
https://root.cern/root/html532/TColor.html:8098,Usability,Clear,Clear,8098,,MatchSource.WIKI,root/html532/TColor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColor.html
https://root.cern/root/html532/TColorWheel.html:2296,Availability,Error,Error,2296," TColorWheel(); virtual~TColorWheel(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Optio",MatchSource.WIKI,root/html532/TColorWheel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColorWheel.html
https://root.cern/root/html532/TColorWheel.html:2425,Availability,error,error,2425," TColorWheel(); virtual~TColorWheel(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Optio",MatchSource.WIKI,root/html532/TColorWheel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColorWheel.html
https://root.cern/root/html532/TColorWheel.html:2509,Availability,error,error,2509,"l~TColorWheel(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TCanvas*GetCanvas() const; virtual Int_tGetColor(Int_t px, Int_t py) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom",MatchSource.WIKI,root/html532/TColorWheel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColorWheel.html
https://root.cern/root/html532/TColorWheel.html:3500,Modifiability,Inherit,InheritsFrom,3500,"t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TCanvas*GetCanvas() const; virtual Int_tGetColor(Int_t px, Int_t py) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObje",MatchSource.WIKI,root/html532/TColorWheel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColorWheel.html
https://root.cern/root/html532/TColorWheel.html:3566,Modifiability,Inherit,InheritsFrom,3566,"t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TCanvas*GetCanvas() const; virtual Int_tGetColor(Int_t px, Int_t py) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidPaint(Option_",MatchSource.WIKI,root/html532/TColorWheel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColorWheel.html
https://root.cern/root/html532/TColorWheel.html:7705,Modifiability,Inherit,Inheritance,7705,"eel(const TColorWheel& org); TColorWheel&operator=(const TColorWheel& rhs). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TArc*fArc! pointer to utility arc; TCanvas*fCanvas! Canvas used to draw the Color Wheel; Double_tfDrCircles radius; TGraph*fGraph! pointer to utility graph; TLine*fLine! pointer to utility line; Double_tfR0Minimum radius for circles; Double_tfRgrayMaximum radius of gray circle; Double_tfRmaxMaximum radius for rectangles; Double_tfRminMinimum radius for rectangles; TText*fText! pointer to utility text; Double_tfX[15]X coordinates of the center of circles; Double_tfY[15]Y coordinates of the center of circles. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TColorWheel(); constructor. ~TColorWheel(); destructor. Int_t DistancetoPrimitive(Int_t px, Int_t py); always return the color wheel. void Draw(Option_t* option = """"); Paint the color wheel. Int_t GetColor(Int_t px, Int_t py) const; Return the color number pointed by the mouse. char * GetObjectInfo(Int_t px, Int_t py) const; Return the color number pointed by the mouse. Int_t InCircles(Double_t x, Double_t y, Int_t coffset, Double_t angle) const; Return the color number when the mouse point to a circle. Int_t InGray(Double_t x, Double_t y) const; Return the color number when the mouse point to the gray circle. Int_t InRectangles(Double_t x, Double_t y, Int_t coffset, Double_t angle) const; Return the color number when the mouse point to a rectangle. void Paint(Option_t* option = """"); Paint the color wheel. void PaintCircle(Int_t coffset, Int_t n, Double_t x, Double_t y, Double_t ang) const; Draw one color of type circle. void PaintCirc",MatchSource.WIKI,root/html532/TColorWheel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColorWheel.html
https://root.cern/root/html532/TColorWheel.html:7718,Modifiability,Inherit,Inherited,7718,"eel(const TColorWheel& org); TColorWheel&operator=(const TColorWheel& rhs). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TArc*fArc! pointer to utility arc; TCanvas*fCanvas! Canvas used to draw the Color Wheel; Double_tfDrCircles radius; TGraph*fGraph! pointer to utility graph; TLine*fLine! pointer to utility line; Double_tfR0Minimum radius for circles; Double_tfRgrayMaximum radius of gray circle; Double_tfRmaxMaximum radius for rectangles; Double_tfRminMinimum radius for rectangles; TText*fText! pointer to utility text; Double_tfX[15]X coordinates of the center of circles; Double_tfY[15]Y coordinates of the center of circles. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TColorWheel(); constructor. ~TColorWheel(); destructor. Int_t DistancetoPrimitive(Int_t px, Int_t py); always return the color wheel. void Draw(Option_t* option = """"); Paint the color wheel. Int_t GetColor(Int_t px, Int_t py) const; Return the color number pointed by the mouse. char * GetObjectInfo(Int_t px, Int_t py) const; Return the color number pointed by the mouse. Int_t InCircles(Double_t x, Double_t y, Int_t coffset, Double_t angle) const; Return the color number when the mouse point to a circle. Int_t InGray(Double_t x, Double_t y) const; Return the color number when the mouse point to the gray circle. Int_t InRectangles(Double_t x, Double_t y, Int_t coffset, Double_t angle) const; Return the color number when the mouse point to a rectangle. void Paint(Option_t* option = """"); Paint the color wheel. void PaintCircle(Int_t coffset, Int_t n, Double_t x, Double_t y, Double_t ang) const; Draw one color of type circle. void PaintCirc",MatchSource.WIKI,root/html532/TColorWheel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColorWheel.html
https://root.cern/root/html532/TColorWheel.html:3390,Security,Hash,Hash,3390,"thod, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TCanvas*GetCanvas() const; virtual Int_tGetColor(Int_t px, Int_t py) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator ne",MatchSource.WIKI,root/html532/TColorWheel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColorWheel.html
https://root.cern/root/html532/TColorWheel.html:5709,Testability,Test,TestBit,5709,"ete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidPaint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetCanvas(TCanvas* can); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TColorWheel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColorWheel.html
https://root.cern/root/html532/TColorWheel.html:5748,Testability,Test,TestBits,5748,"ete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidPaint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetCanvas(TCanvas* can); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TColorWheel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColorWheel.html
https://root.cern/root/html532/TColorWheel.html:1771,Usability,Clear,Clear,1771," TColorWheel(); virtual~TColorWheel(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Optio",MatchSource.WIKI,root/html532/TColorWheel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColorWheel.html
https://root.cern/root/html532/TColumnView.html:2135,Availability,Error,Error,2135," const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TDataSet::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; Int_tTChair::CopyRows(const TChair* srcChair, Int_t srcRow = 0, Int_t dstRow = 0, Int_t nRows = 0, Bool_t expand = kFALSE); virtual voidTChair::CopySet(TChair& chair); virtual voidTDataSet::Delete(Option_t* opt = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTChair::Draw(Option_t* opt); virtual TH1*TChair::Draw(TCut varexp, TCut selection, Option_t* option = """", Int_t nentries = 1000000000, Int_t firstentry = 0); virtual TH1*TChair::Draw(const char* varexp, const char* selection, Option_t* option = """", Int_t nentries = 1000000000, Int_t firstentry = 0); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TDataSet*TDataSet::Find(const char* path) const; virtual TDataSet*TDataSet::FindByName(const char* name, const char* path = """", Option_t* opt = """") const; virtual TDataSet*TDataSet::FindByPath(const char* path) const; virtual TDataSet*TDataSet::FindByTitle(const char* title, const char* path = """", Option_t* opt = """") const; virtual TObject*TDataSet::FindObject(const char* name) const; virtual TObject*TDataSet::FindObject(const TObject* o) const; virtual TDataSet*TDataSet::First() const; virtual voidTChair::Fit(const char* formula, const char* varexp, const char* selection = ",MatchSource.WIKI,root/html532/TColumnView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColumnView.html
https://root.cern/root/html532/TColumnView.html:2264,Availability,error,error,2264,"l Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; Int_tTChair::CopyRows(const TChair* srcChair, Int_t srcRow = 0, Int_t dstRow = 0, Int_t nRows = 0, Bool_t expand = kFALSE); virtual voidTChair::CopySet(TChair& chair); virtual voidTDataSet::Delete(Option_t* opt = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTChair::Draw(Option_t* opt); virtual TH1*TChair::Draw(TCut varexp, TCut selection, Option_t* option = """", Int_t nentries = 1000000000, Int_t firstentry = 0); virtual TH1*TChair::Draw(const char* varexp, const char* selection, Option_t* option = """", Int_t nentries = 1000000000, Int_t firstentry = 0); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TDataSet*TDataSet::Find(const char* path) const; virtual TDataSet*TDataSet::FindByName(const char* name, const char* path = """", Option_t* opt = """") const; virtual TDataSet*TDataSet::FindByPath(const char* path) const; virtual TDataSet*TDataSet::FindByTitle(const char* title, const char* path = """", Option_t* opt = """") const; virtual TObject*TDataSet::FindObject(const char* name) const; virtual TObject*TDataSet::FindObject(const TObject* o) const; virtual TDataSet*TDataSet::First() const; virtual voidTChair::Fit(const char* formula, const char* varexp, const char* selection = """", Option_t* option = """", Option_t* goption = """", Int_t nentries = 1000000000, Int_t firstentry = 0); virtual Char_t*TChair::Get",MatchSource.WIKI,root/html532/TColumnView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColumnView.html
https://root.cern/root/html532/TColumnView.html:2348,Availability,error,error,2348,"named) const; Int_tTChair::CopyRows(const TChair* srcChair, Int_t srcRow = 0, Int_t dstRow = 0, Int_t nRows = 0, Bool_t expand = kFALSE); virtual voidTChair::CopySet(TChair& chair); virtual voidTDataSet::Delete(Option_t* opt = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTChair::Draw(Option_t* opt); virtual TH1*TChair::Draw(TCut varexp, TCut selection, Option_t* option = """", Int_t nentries = 1000000000, Int_t firstentry = 0); virtual TH1*TChair::Draw(const char* varexp, const char* selection, Option_t* option = """", Int_t nentries = 1000000000, Int_t firstentry = 0); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TDataSet*TDataSet::Find(const char* path) const; virtual TDataSet*TDataSet::FindByName(const char* name, const char* path = """", Option_t* opt = """") const; virtual TDataSet*TDataSet::FindByPath(const char* path) const; virtual TDataSet*TDataSet::FindByTitle(const char* title, const char* path = """", Option_t* opt = """") const; virtual TObject*TDataSet::FindObject(const char* name) const; virtual TObject*TDataSet::FindObject(const TObject* o) const; virtual TDataSet*TDataSet::First() const; virtual voidTChair::Fit(const char* formula, const char* varexp, const char* selection = """", Option_t* option = """", Option_t* goption = """", Int_t nentries = 1000000000, Int_t firstentry = 0); virtual Char_t*TChair::GetArray() const; virtual TSeqCollection*TDataSet::GetCollection() const; virtual Optio",MatchSource.WIKI,root/html532/TColumnView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColumnView.html
https://root.cern/root/html532/TColumnView.html:8909,Deployability,Update,Update,8909,"Remove(TObject* obj); virtual voidTDataSet::Remove(TDataSet* set); virtual TDataSet*TDataSet::RemoveAt(Int_t idx); virtual voidTChair::Reset(Int_t c = 0); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTChair::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTChair::Set(Int_t n); virtual voidTChair::Set(Int_t n, Char_t* array); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTDataSet::SetMother(TDataSet* parent = 0); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTChair::SetNRows(Int_t n); virtual voidTDataSet::SetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTDataSet::SetParent(TDataSet* parent = 0); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTDataSet::SetWrite(); virtual voidShowMembers(TMemberInspector& insp); virtual voidTDataSet::Shunt(TDataSet* newParent = 0); virtual Int_tTNamed::Sizeof() const; virtual voidTDataSet::Sort(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; const TTable*TChair::Table() const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTDataSet::UnMark()MENU ; voidTDataSet::UnMarkAll()MENU ; virtual voidTChair::Update(); virtual voidTChair::Update(TDataSet* set, UInt_t opt = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TColumnView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColumnView.html
https://root.cern/root/html532/TColumnView.html:8939,Deployability,Update,Update,8939,"Remove(TObject* obj); virtual voidTDataSet::Remove(TDataSet* set); virtual TDataSet*TDataSet::RemoveAt(Int_t idx); virtual voidTChair::Reset(Int_t c = 0); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTChair::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTChair::Set(Int_t n); virtual voidTChair::Set(Int_t n, Char_t* array); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTDataSet::SetMother(TDataSet* parent = 0); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTChair::SetNRows(Int_t n); virtual voidTDataSet::SetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTDataSet::SetParent(TDataSet* parent = 0); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTDataSet::SetWrite(); virtual voidShowMembers(TMemberInspector& insp); virtual voidTDataSet::Shunt(TDataSet* newParent = 0); virtual Int_tTNamed::Sizeof() const; virtual voidTDataSet::Sort(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; const TTable*TChair::Table() const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTDataSet::UnMark()MENU ; voidTDataSet::UnMarkAll()MENU ; virtual voidTChair::Update(); virtual voidTChair::Update(TDataSet* set, UInt_t opt = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TColumnView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColumnView.html
https://root.cern/root/html532/TColumnView.html:4586,Modifiability,Inherit,InheritsFrom,4586,"bject*TDataSet::GetMother() const; virtual const char*TNamed::GetName() const; virtual Long_tTChair::GetNRows() const; TObjArray*TDataSet::GetObjArray() const; virtual TObject*TDataSet::GetObject() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TDataSet*TDataSet::GetParent() const; virtual TClass*TChair::GetRowClass() const; virtual TTableDescriptor*TChair::GetRowDescriptors() const; virtual Long_tTChair::GetRowSize() const; virtual Long_tTChair::GetTableSize() const; virtual const char*TNamed::GetTitle() const; virtual const Char_t*TChair::GetType() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Long_tTChair::HasData() const; virtual ULong_tTNamed::Hash() const; TH1*Histogram(const char* selection = """")MENU ; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; virtual TDataSet*TDataSet::Instance() const; static TDataSet*TDataSet::instance(); voidTDataSet::InvertAllMarks()MENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTDataSet::IsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tIsFolder() const; virtual Bool_tTDataSet::IsMarked() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTDataSet::IsThisDir(const char* dirname, int len = -1, int ignorecase = 0) const; Bool_tTObject::IsZombie() const; virtual TDataSet*TDataSet::Last() const; virtual voidTChair::ls(Option_t* option = """") const; virtual voidTChair::ls(Int_t deep) const; virtual Char_t*TChair::MakeExpression(const Char_t** expressions, Int_t nExpressions); voidTDataSet::Mark()MENU ; voidTDataSet::Mark(UInt_t flag, TDataSet::EBitOpt r",MatchSource.WIKI,root/html532/TColumnView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColumnView.html
https://root.cern/root/html532/TColumnView.html:4652,Modifiability,Inherit,InheritsFrom,4652,"ame() const; virtual Long_tTChair::GetNRows() const; TObjArray*TDataSet::GetObjArray() const; virtual TObject*TDataSet::GetObject() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TDataSet*TDataSet::GetParent() const; virtual TClass*TChair::GetRowClass() const; virtual TTableDescriptor*TChair::GetRowDescriptors() const; virtual Long_tTChair::GetRowSize() const; virtual Long_tTChair::GetTableSize() const; virtual const char*TNamed::GetTitle() const; virtual const Char_t*TChair::GetType() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Long_tTChair::HasData() const; virtual ULong_tTNamed::Hash() const; TH1*Histogram(const char* selection = """")MENU ; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; virtual TDataSet*TDataSet::Instance() const; static TDataSet*TDataSet::instance(); voidTDataSet::InvertAllMarks()MENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTDataSet::IsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tIsFolder() const; virtual Bool_tTDataSet::IsMarked() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTDataSet::IsThisDir(const char* dirname, int len = -1, int ignorecase = 0) const; Bool_tTObject::IsZombie() const; virtual TDataSet*TDataSet::Last() const; virtual voidTChair::ls(Option_t* option = """") const; virtual voidTChair::ls(Int_t deep) const; virtual Char_t*TChair::MakeExpression(const Char_t** expressions, Int_t nExpressions); voidTDataSet::Mark()MENU ; voidTDataSet::Mark(UInt_t flag, TDataSet::EBitOpt reset = kSet); voidTDataSet::MarkAll()MENU ; voidTObject::MayNotUse",MatchSource.WIKI,root/html532/TColumnView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColumnView.html
https://root.cern/root/html532/TColumnView.html:10832,Modifiability,Inherit,Inheritance,10832,"bject* mother); static TDataSet::EDataSetPassTDataSet::SortIt(TDataSet* ds); static TDataSet::EDataSetPassTDataSet::SortIt(TDataSet* ds, void* user). Data Members; public:. enum TDataSet::EDataSetPass { kContinue; kPrune; kStop; kUp; kStruct; kAll; kRefs; kMarked; };; enum TDataSet::ESetBits { kMark; kArray; };; enum TDataSet::EBitOpt { kSet; kReset; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. ULong_tTChair::fLastIndxindex pof the last used table row;; void*TChair::fLastRowpointer to the last used table row; fLastRow = table[fLastIndx]; TSeqCollection*TDataSet::fListList of the the the objects included into this dataset; TStringTNamed::fNameobject identifier; TDataSet*TDataSet::fParentpointer to mother of the directory; TTable*TChair::fTablethe ""TTable"" object this object is pthe proxy for; TStringTNamed::fTitleobject title; static TDataSet*TDataSet::fgMainSetpointer the main dataset;. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TColumnView(const char* colName = """", TTable* table = 0); constructor. ~TColumnView(); destructor. void Browse(TBrowser* b); Create a column histogram for the simple column. TH1 * Histogram(const char* selection = """"); Create a histogram from the context menu. Bool_t IsFolder() const; Treat the column with the pointer to the ""Ptr"" as a ""folder"". TColumnView(const char* colName = """", TTable* table = 0). » Author: Valery Fine(fine@bnl.gov) 13/03/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/table:$Id: TColumnView.h 21414 2007-12-17 14:15:59Z brun $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TColumnView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColumnView.html
https://root.cern/root/html532/TColumnView.html:10845,Modifiability,Inherit,Inherited,10845,"bject* mother); static TDataSet::EDataSetPassTDataSet::SortIt(TDataSet* ds); static TDataSet::EDataSetPassTDataSet::SortIt(TDataSet* ds, void* user). Data Members; public:. enum TDataSet::EDataSetPass { kContinue; kPrune; kStop; kUp; kStruct; kAll; kRefs; kMarked; };; enum TDataSet::ESetBits { kMark; kArray; };; enum TDataSet::EBitOpt { kSet; kReset; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. ULong_tTChair::fLastIndxindex pof the last used table row;; void*TChair::fLastRowpointer to the last used table row; fLastRow = table[fLastIndx]; TSeqCollection*TDataSet::fListList of the the the objects included into this dataset; TStringTNamed::fNameobject identifier; TDataSet*TDataSet::fParentpointer to mother of the directory; TTable*TChair::fTablethe ""TTable"" object this object is pthe proxy for; TStringTNamed::fTitleobject title; static TDataSet*TDataSet::fgMainSetpointer the main dataset;. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TColumnView(const char* colName = """", TTable* table = 0); constructor. ~TColumnView(); destructor. void Browse(TBrowser* b); Create a column histogram for the simple column. TH1 * Histogram(const char* selection = """"); Create a histogram from the context menu. Bool_t IsFolder() const; Treat the column with the pointer to the ""Ptr"" as a ""folder"". TColumnView(const char* colName = """", TTable* table = 0). » Author: Valery Fine(fine@bnl.gov) 13/03/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/table:$Id: TColumnView.h 21414 2007-12-17 14:15:59Z brun $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TColumnView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColumnView.html
https://root.cern/root/html532/TColumnView.html:4428,Security,Hash,Hash,4428,"l const char*TObject::GetIconName() const; TList*TDataSet::GetList() const; virtual Int_tTDataSet::GetListSize() const; static TDataSet*TDataSet::GetMainSet(); TObject*TDataSet::GetMother() const; virtual const char*TNamed::GetName() const; virtual Long_tTChair::GetNRows() const; TObjArray*TDataSet::GetObjArray() const; virtual TObject*TDataSet::GetObject() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TDataSet*TDataSet::GetParent() const; virtual TClass*TChair::GetRowClass() const; virtual TTableDescriptor*TChair::GetRowDescriptors() const; virtual Long_tTChair::GetRowSize() const; virtual Long_tTChair::GetTableSize() const; virtual const char*TNamed::GetTitle() const; virtual const Char_t*TChair::GetType() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Long_tTChair::HasData() const; virtual ULong_tTNamed::Hash() const; TH1*Histogram(const char* selection = """")MENU ; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; virtual TDataSet*TDataSet::Instance() const; static TDataSet*TDataSet::instance(); voidTDataSet::InvertAllMarks()MENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTDataSet::IsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tIsFolder() const; virtual Bool_tTDataSet::IsMarked() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTDataSet::IsThisDir(const char* dirname, int len = -1, int ignorecase = 0) const; Bool_tTObject::IsZombie() const; virtual TDataSet*TDataSet::Last() const; virtual voidTChair::ls(Option_t* option = """") const; virtual voidTChair::ls(Int_t deep) const; vir",MatchSource.WIKI,root/html532/TColumnView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColumnView.html
https://root.cern/root/html532/TColumnView.html:8763,Testability,Test,TestBit,8763,"Remove(TObject* obj); virtual voidTDataSet::Remove(TDataSet* set); virtual TDataSet*TDataSet::RemoveAt(Int_t idx); virtual voidTChair::Reset(Int_t c = 0); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTChair::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTChair::Set(Int_t n); virtual voidTChair::Set(Int_t n, Char_t* array); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTDataSet::SetMother(TDataSet* parent = 0); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTChair::SetNRows(Int_t n); virtual voidTDataSet::SetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTDataSet::SetParent(TDataSet* parent = 0); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTDataSet::SetWrite(); virtual voidShowMembers(TMemberInspector& insp); virtual voidTDataSet::Shunt(TDataSet* newParent = 0); virtual Int_tTNamed::Sizeof() const; virtual voidTDataSet::Sort(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; const TTable*TChair::Table() const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTDataSet::UnMark()MENU ; voidTDataSet::UnMarkAll()MENU ; virtual voidTChair::Update(); virtual voidTChair::Update(TDataSet* set, UInt_t opt = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TColumnView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColumnView.html
https://root.cern/root/html532/TColumnView.html:8802,Testability,Test,TestBits,8802,"Remove(TObject* obj); virtual voidTDataSet::Remove(TDataSet* set); virtual TDataSet*TDataSet::RemoveAt(Int_t idx); virtual voidTChair::Reset(Int_t c = 0); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTChair::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTChair::Set(Int_t n); virtual voidTChair::Set(Int_t n, Char_t* array); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTDataSet::SetMother(TDataSet* parent = 0); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTChair::SetNRows(Int_t n); virtual voidTDataSet::SetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTDataSet::SetParent(TDataSet* parent = 0); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTDataSet::SetWrite(); virtual voidShowMembers(TMemberInspector& insp); virtual voidTDataSet::Shunt(TDataSet* newParent = 0); virtual Int_tTNamed::Sizeof() const; virtual voidTDataSet::Sort(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; const TTable*TChair::Table() const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTDataSet::UnMark()MENU ; voidTDataSet::UnMarkAll()MENU ; virtual voidTChair::Update(); virtual voidTChair::Update(TDataSet* set, UInt_t opt = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TColumnView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColumnView.html
https://root.cern/root/html532/TColumnView.html:1166,Usability,Clear,Clear,1166," TColumnView(const TColumnView&); TColumnView(const char* colName = """", TTable* table = 0); virtual~TColumnView(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDataSet::Add(TDataSet* dataset); virtual voidTChair::AddAt(TDataSet* dataset, Int_t idx); virtual voidTChair::AddAt(const void* c, Int_t i); virtual voidTDataSet::AddAtAndExpand(TDataSet* dataset, Int_t idx = 0); virtual voidTDataSet::AddFirst(TDataSet* dataset); virtual voidTDataSet::AddLast(TDataSet* dataset); virtual voidTChair::Adopt(Int_t n, void* array); virtual voidTObject::AppendPad(Option_t* option = """"); const void*TChair::At(Int_t i) const; virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TDataSet::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; Int_tTChair::CopyRows(const TChair* srcChair, Int_t srcRow = 0, Int_t dstRow = 0, Int_t nRows = 0, Bool_t expand = kFALSE); virtual voidTChair::CopySet(TChair& chair); virtual voidTDataSet::Delete(Option_t* opt = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTChair::Draw(Option_t* opt); virtual TH1*TChair::Draw(TCut varexp, TCut selection, Option_t* option = """", Int_t nentries = 1000000000, Int_t firstentry = 0); virtual TH1*TChair::Draw(const char* varexp, const char* selection, Option_t* option = """", Int_t nentries = 1000000000, Int_t firstentry = 0); virtual voidTObject::DrawClass() constMENU",MatchSource.WIKI,root/html532/TColumnView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColumnView.html
https://root.cern/root/html532/TColumnView.html:11068,Usability,simpl,simple,11068,"bject* mother); static TDataSet::EDataSetPassTDataSet::SortIt(TDataSet* ds); static TDataSet::EDataSetPassTDataSet::SortIt(TDataSet* ds, void* user). Data Members; public:. enum TDataSet::EDataSetPass { kContinue; kPrune; kStop; kUp; kStruct; kAll; kRefs; kMarked; };; enum TDataSet::ESetBits { kMark; kArray; };; enum TDataSet::EBitOpt { kSet; kReset; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. ULong_tTChair::fLastIndxindex pof the last used table row;; void*TChair::fLastRowpointer to the last used table row; fLastRow = table[fLastIndx]; TSeqCollection*TDataSet::fListList of the the the objects included into this dataset; TStringTNamed::fNameobject identifier; TDataSet*TDataSet::fParentpointer to mother of the directory; TTable*TChair::fTablethe ""TTable"" object this object is pthe proxy for; TStringTNamed::fTitleobject title; static TDataSet*TDataSet::fgMainSetpointer the main dataset;. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TColumnView(const char* colName = """", TTable* table = 0); constructor. ~TColumnView(); destructor. void Browse(TBrowser* b); Create a column histogram for the simple column. TH1 * Histogram(const char* selection = """"); Create a histogram from the context menu. Bool_t IsFolder() const; Treat the column with the pointer to the ""Ptr"" as a ""folder"". TColumnView(const char* colName = """", TTable* table = 0). » Author: Valery Fine(fine@bnl.gov) 13/03/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/table:$Id: TColumnView.h 21414 2007-12-17 14:15:59Z brun $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TColumnView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TColumnView.html
https://root.cern/root/html532/TComplex.html:5072,Energy Efficiency,Power,Power,5072,"rn Log(c)/TMath::Log(2);}. TComplex Log10(const TComplex& c); {return Log(c)/TMath::Log(10);}. TComplex Sin(const TComplex& c). Cos(const TComplex& c). TComplex Tan(const TComplex& c); {TComplex cc=Cos(c); return Sin(c)*Conjugate(cc)/cc.Rho2();}. TComplex ASin(const TComplex& c); {return -I()*Log(I()*c+TMath::Sign(1.,c.Im())*Sqrt(1.-c*c));}. TComplex ACos(const TComplex& c); {return -I()*Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c-1.));}. TComplex ATan(const TComplex& c); {return -0.5*I()*Log((1.+I()*c)/(1.-I()*c));}. TComplex SinH(const TComplex& c). CosH(const TComplex& c). TComplex TanH(const TComplex& c); {TComplex cc=CosH(c); return SinH(c)*Conjugate(cc)/cc.Rho2();}. TComplex ASinH(const TComplex& c); {return Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c+1.));}. TComplex ACosH(const TComplex& c); {return Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c-1.));}. TComplex ATanH(const TComplex& c); {return 0.5*Log((1.+c)/(1.-c));}. Double_t Abs(const TComplex& c); {return c.Rho();}. TComplex Power(const TComplex& x, const TComplex& y). TComplex Power(const TComplex& x, Double_t y); {return TComplex(TMath::Power(x.Rho(),y),x.Theta()*y,kTRUE);}. TComplex Power(Double_t x, const TComplex& y). TComplex Power(const TComplex& x, Int_t y); {return TComplex(TMath::Power(x.Rho(),y),x.Theta()*y,kTRUE);}. Int_t Finite(const TComplex& c); {return TMath::Min(TMath::Finite(c.Re()),TMath::Finite(c.Im()));}. Int_t IsNaN(const TComplex& c); {return TMath::Max(TMath::IsNaN(c.Re()),TMath::IsNaN(c.Im()));}. TComplex Min(const TComplex& a, const TComplex& b); {return a.Rho()<=b.Rho()?a:b;}. TComplex Max(const TComplex& a, const TComplex& b); {return a.Rho()>=b.Rho()?a:b;}. TComplex Normalize(const TComplex& c); {return TComplex(1.,c.Theta(),kTRUE);}. TComplex Conjugate(const TComplex& c); {return TComplex(c.Re(),-c.Im());}. TComplex Range(const TComplex& lb, const TComplex& ub, const TComplex& c); {return Max(lb,Min(c,ub));}. » Author: Federico Carminati 22/04/2004 » Copyright (C) 1995-2004, Rene Brun and Fons",MatchSource.WIKI,root/html532/TComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TComplex.html
https://root.cern/root/html532/TComplex.html:5126,Energy Efficiency,Power,Power,5126,"rn Log(c)/TMath::Log(10);}. TComplex Sin(const TComplex& c). Cos(const TComplex& c). TComplex Tan(const TComplex& c); {TComplex cc=Cos(c); return Sin(c)*Conjugate(cc)/cc.Rho2();}. TComplex ASin(const TComplex& c); {return -I()*Log(I()*c+TMath::Sign(1.,c.Im())*Sqrt(1.-c*c));}. TComplex ACos(const TComplex& c); {return -I()*Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c-1.));}. TComplex ATan(const TComplex& c); {return -0.5*I()*Log((1.+I()*c)/(1.-I()*c));}. TComplex SinH(const TComplex& c). CosH(const TComplex& c). TComplex TanH(const TComplex& c); {TComplex cc=CosH(c); return SinH(c)*Conjugate(cc)/cc.Rho2();}. TComplex ASinH(const TComplex& c); {return Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c+1.));}. TComplex ACosH(const TComplex& c); {return Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c-1.));}. TComplex ATanH(const TComplex& c); {return 0.5*Log((1.+c)/(1.-c));}. Double_t Abs(const TComplex& c); {return c.Rho();}. TComplex Power(const TComplex& x, const TComplex& y). TComplex Power(const TComplex& x, Double_t y); {return TComplex(TMath::Power(x.Rho(),y),x.Theta()*y,kTRUE);}. TComplex Power(Double_t x, const TComplex& y). TComplex Power(const TComplex& x, Int_t y); {return TComplex(TMath::Power(x.Rho(),y),x.Theta()*y,kTRUE);}. Int_t Finite(const TComplex& c); {return TMath::Min(TMath::Finite(c.Re()),TMath::Finite(c.Im()));}. Int_t IsNaN(const TComplex& c); {return TMath::Max(TMath::IsNaN(c.Re()),TMath::IsNaN(c.Im()));}. TComplex Min(const TComplex& a, const TComplex& b); {return a.Rho()<=b.Rho()?a:b;}. TComplex Max(const TComplex& a, const TComplex& b); {return a.Rho()>=b.Rho()?a:b;}. TComplex Normalize(const TComplex& c); {return TComplex(1.,c.Theta(),kTRUE);}. TComplex Conjugate(const TComplex& c); {return TComplex(c.Re(),-c.Im());}. TComplex Range(const TComplex& lb, const TComplex& ub, const TComplex& c); {return Max(lb,Min(c,ub));}. » Author: Federico Carminati 22/04/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/mathcore:$Id: TComplex.h 22866",MatchSource.WIKI,root/html532/TComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TComplex.html
https://root.cern/root/html532/TComplex.html:5188,Energy Efficiency,Power,Power,5188,"rn Log(c)/TMath::Log(10);}. TComplex Sin(const TComplex& c). Cos(const TComplex& c). TComplex Tan(const TComplex& c); {TComplex cc=Cos(c); return Sin(c)*Conjugate(cc)/cc.Rho2();}. TComplex ASin(const TComplex& c); {return -I()*Log(I()*c+TMath::Sign(1.,c.Im())*Sqrt(1.-c*c));}. TComplex ACos(const TComplex& c); {return -I()*Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c-1.));}. TComplex ATan(const TComplex& c); {return -0.5*I()*Log((1.+I()*c)/(1.-I()*c));}. TComplex SinH(const TComplex& c). CosH(const TComplex& c). TComplex TanH(const TComplex& c); {TComplex cc=CosH(c); return SinH(c)*Conjugate(cc)/cc.Rho2();}. TComplex ASinH(const TComplex& c); {return Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c+1.));}. TComplex ACosH(const TComplex& c); {return Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c-1.));}. TComplex ATanH(const TComplex& c); {return 0.5*Log((1.+c)/(1.-c));}. Double_t Abs(const TComplex& c); {return c.Rho();}. TComplex Power(const TComplex& x, const TComplex& y). TComplex Power(const TComplex& x, Double_t y); {return TComplex(TMath::Power(x.Rho(),y),x.Theta()*y,kTRUE);}. TComplex Power(Double_t x, const TComplex& y). TComplex Power(const TComplex& x, Int_t y); {return TComplex(TMath::Power(x.Rho(),y),x.Theta()*y,kTRUE);}. Int_t Finite(const TComplex& c); {return TMath::Min(TMath::Finite(c.Re()),TMath::Finite(c.Im()));}. Int_t IsNaN(const TComplex& c); {return TMath::Max(TMath::IsNaN(c.Re()),TMath::IsNaN(c.Im()));}. TComplex Min(const TComplex& a, const TComplex& b); {return a.Rho()<=b.Rho()?a:b;}. TComplex Max(const TComplex& a, const TComplex& b); {return a.Rho()>=b.Rho()?a:b;}. TComplex Normalize(const TComplex& c); {return TComplex(1.,c.Theta(),kTRUE);}. TComplex Conjugate(const TComplex& c); {return TComplex(c.Re(),-c.Im());}. TComplex Range(const TComplex& lb, const TComplex& ub, const TComplex& c); {return Max(lb,Min(c,ub));}. » Author: Federico Carminati 22/04/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/mathcore:$Id: TComplex.h 22866",MatchSource.WIKI,root/html532/TComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TComplex.html
https://root.cern/root/html532/TComplex.html:5236,Energy Efficiency,Power,Power,5236," Tan(const TComplex& c); {TComplex cc=Cos(c); return Sin(c)*Conjugate(cc)/cc.Rho2();}. TComplex ASin(const TComplex& c); {return -I()*Log(I()*c+TMath::Sign(1.,c.Im())*Sqrt(1.-c*c));}. TComplex ACos(const TComplex& c); {return -I()*Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c-1.));}. TComplex ATan(const TComplex& c); {return -0.5*I()*Log((1.+I()*c)/(1.-I()*c));}. TComplex SinH(const TComplex& c). CosH(const TComplex& c). TComplex TanH(const TComplex& c); {TComplex cc=CosH(c); return SinH(c)*Conjugate(cc)/cc.Rho2();}. TComplex ASinH(const TComplex& c); {return Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c+1.));}. TComplex ACosH(const TComplex& c); {return Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c-1.));}. TComplex ATanH(const TComplex& c); {return 0.5*Log((1.+c)/(1.-c));}. Double_t Abs(const TComplex& c); {return c.Rho();}. TComplex Power(const TComplex& x, const TComplex& y). TComplex Power(const TComplex& x, Double_t y); {return TComplex(TMath::Power(x.Rho(),y),x.Theta()*y,kTRUE);}. TComplex Power(Double_t x, const TComplex& y). TComplex Power(const TComplex& x, Int_t y); {return TComplex(TMath::Power(x.Rho(),y),x.Theta()*y,kTRUE);}. Int_t Finite(const TComplex& c); {return TMath::Min(TMath::Finite(c.Re()),TMath::Finite(c.Im()));}. Int_t IsNaN(const TComplex& c); {return TMath::Max(TMath::IsNaN(c.Re()),TMath::IsNaN(c.Im()));}. TComplex Min(const TComplex& a, const TComplex& b); {return a.Rho()<=b.Rho()?a:b;}. TComplex Max(const TComplex& a, const TComplex& b); {return a.Rho()>=b.Rho()?a:b;}. TComplex Normalize(const TComplex& c); {return TComplex(1.,c.Theta(),kTRUE);}. TComplex Conjugate(const TComplex& c); {return TComplex(c.Re(),-c.Im());}. TComplex Range(const TComplex& lb, const TComplex& ub, const TComplex& c); {return Max(lb,Min(c,ub));}. » Author: Federico Carminati 22/04/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/mathcore:$Id: TComplex.h 22866 2008-03-27 15:32:50Z rdm $ » Last generated: 2011-11-03 20:10; This page has been automatical",MatchSource.WIKI,root/html532/TComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TComplex.html
https://root.cern/root/html532/TComplex.html:5283,Energy Efficiency,Power,Power,5283,"njugate(cc)/cc.Rho2();}. TComplex ASin(const TComplex& c); {return -I()*Log(I()*c+TMath::Sign(1.,c.Im())*Sqrt(1.-c*c));}. TComplex ACos(const TComplex& c); {return -I()*Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c-1.));}. TComplex ATan(const TComplex& c); {return -0.5*I()*Log((1.+I()*c)/(1.-I()*c));}. TComplex SinH(const TComplex& c). CosH(const TComplex& c). TComplex TanH(const TComplex& c); {TComplex cc=CosH(c); return SinH(c)*Conjugate(cc)/cc.Rho2();}. TComplex ASinH(const TComplex& c); {return Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c+1.));}. TComplex ACosH(const TComplex& c); {return Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c-1.));}. TComplex ATanH(const TComplex& c); {return 0.5*Log((1.+c)/(1.-c));}. Double_t Abs(const TComplex& c); {return c.Rho();}. TComplex Power(const TComplex& x, const TComplex& y). TComplex Power(const TComplex& x, Double_t y); {return TComplex(TMath::Power(x.Rho(),y),x.Theta()*y,kTRUE);}. TComplex Power(Double_t x, const TComplex& y). TComplex Power(const TComplex& x, Int_t y); {return TComplex(TMath::Power(x.Rho(),y),x.Theta()*y,kTRUE);}. Int_t Finite(const TComplex& c); {return TMath::Min(TMath::Finite(c.Re()),TMath::Finite(c.Im()));}. Int_t IsNaN(const TComplex& c); {return TMath::Max(TMath::IsNaN(c.Re()),TMath::IsNaN(c.Im()));}. TComplex Min(const TComplex& a, const TComplex& b); {return a.Rho()<=b.Rho()?a:b;}. TComplex Max(const TComplex& a, const TComplex& b); {return a.Rho()>=b.Rho()?a:b;}. TComplex Normalize(const TComplex& c); {return TComplex(1.,c.Theta(),kTRUE);}. TComplex Conjugate(const TComplex& c); {return TComplex(c.Re(),-c.Im());}. TComplex Range(const TComplex& lb, const TComplex& ub, const TComplex& c); {return Max(lb,Min(c,ub));}. » Author: Federico Carminati 22/04/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/mathcore:$Id: TComplex.h 22866 2008-03-27 15:32:50Z rdm $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the docume",MatchSource.WIKI,root/html532/TComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TComplex.html
https://root.cern/root/html532/TComplex.html:5342,Energy Efficiency,Power,Power,5342,"njugate(cc)/cc.Rho2();}. TComplex ASin(const TComplex& c); {return -I()*Log(I()*c+TMath::Sign(1.,c.Im())*Sqrt(1.-c*c));}. TComplex ACos(const TComplex& c); {return -I()*Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c-1.));}. TComplex ATan(const TComplex& c); {return -0.5*I()*Log((1.+I()*c)/(1.-I()*c));}. TComplex SinH(const TComplex& c). CosH(const TComplex& c). TComplex TanH(const TComplex& c); {TComplex cc=CosH(c); return SinH(c)*Conjugate(cc)/cc.Rho2();}. TComplex ASinH(const TComplex& c); {return Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c+1.));}. TComplex ACosH(const TComplex& c); {return Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c-1.));}. TComplex ATanH(const TComplex& c); {return 0.5*Log((1.+c)/(1.-c));}. Double_t Abs(const TComplex& c); {return c.Rho();}. TComplex Power(const TComplex& x, const TComplex& y). TComplex Power(const TComplex& x, Double_t y); {return TComplex(TMath::Power(x.Rho(),y),x.Theta()*y,kTRUE);}. TComplex Power(Double_t x, const TComplex& y). TComplex Power(const TComplex& x, Int_t y); {return TComplex(TMath::Power(x.Rho(),y),x.Theta()*y,kTRUE);}. Int_t Finite(const TComplex& c); {return TMath::Min(TMath::Finite(c.Re()),TMath::Finite(c.Im()));}. Int_t IsNaN(const TComplex& c); {return TMath::Max(TMath::IsNaN(c.Re()),TMath::IsNaN(c.Im()));}. TComplex Min(const TComplex& a, const TComplex& b); {return a.Rho()<=b.Rho()?a:b;}. TComplex Max(const TComplex& a, const TComplex& b); {return a.Rho()>=b.Rho()?a:b;}. TComplex Normalize(const TComplex& c); {return TComplex(1.,c.Theta(),kTRUE);}. TComplex Conjugate(const TComplex& c); {return TComplex(c.Re(),-c.Im());}. TComplex Range(const TComplex& lb, const TComplex& ub, const TComplex& c); {return Max(lb,Min(c,ub));}. » Author: Federico Carminati 22/04/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/mathcore:$Id: TComplex.h 22866 2008-03-27 15:32:50Z rdm $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the docume",MatchSource.WIKI,root/html532/TComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TComplex.html
https://root.cern/root/html532/TComplex.html:2868,Modifiability,Inherit,Inheritance,2868,"operator-=(const TComplex& c); TComplexoperator/(const TComplex& c) const; TComplexoperator/(Double_t c) const; TComplexoperator/=(const TComplex& c); TComplex&operator=(const TComplex&); static TComplexPower(const TComplex& x, const TComplex& y); static TComplexPower(const TComplex& x, Double_t y); static TComplexPower(Double_t x, const TComplex& y); static TComplexPower(const TComplex& x, Int_t y); static TComplexRange(const TComplex& lb, const TComplex& ub, const TComplex& c); Double_tRe() const; Double_tRho() const; Double_tRho2() const; virtual voidShowMembers(TMemberInspector& insp); static TComplexSin(const TComplex& c); static TComplexSinH(const TComplex& c); static TComplexSqrt(const TComplex& c); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); static TComplexTan(const TComplex& c); static TComplexTanH(const TComplex& c); Double_tTheta() const. Data Members; protected:. Double_tfImimaginary part; Double_tfRereal part. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TComplex(Double_t re, Double_t im = 0, Bool_t polar = kFALSE); Standard constructor. TComplex(); ctors and dtors. {}. TComplex(Double_t re, Double_t im = 0, Bool_t polar = kFALSE). virtual ~TComplex(); {}. TComplex I(); constants. {return TComplex(0,1);}. TComplex One(); {return TComplex(1,0);}. Double_t Re() const; getters and setters. {return fRe;}. Double_t Im() const; {return fIm;}. Double_t Rho() const; {return TMath::Sqrt(fRe*fRe+fIm*fIm);}. Double_t Rho2() const; {return fRe*fRe+fIm*fIm;}. Double_t Theta() const; {return (fIm||fRe)?TMath::ATan2(fIm,fRe):0;}. TComplex operator()(Double_t x, Double_t y, Bool_t polar = kFALSE). operator Double_t() const; Convertors. {return fRe;}. operator Float_t() const; {return static_cast<Float_t>(fRe);}. operator Int_t() const; {return static_cast<Int_t>(fRe);}. TComplex Sqrt(const TComplex& c); TMath:: extensions. {return TComplex(TMath::Sqrt(c.Rho()),0.5*c.Theta(),kTRUE);}. TComplex Exp(cons",MatchSource.WIKI,root/html532/TComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TComplex.html
https://root.cern/root/html532/TComplex.html:2881,Modifiability,Inherit,Inherited,2881,"operator-=(const TComplex& c); TComplexoperator/(const TComplex& c) const; TComplexoperator/(Double_t c) const; TComplexoperator/=(const TComplex& c); TComplex&operator=(const TComplex&); static TComplexPower(const TComplex& x, const TComplex& y); static TComplexPower(const TComplex& x, Double_t y); static TComplexPower(Double_t x, const TComplex& y); static TComplexPower(const TComplex& x, Int_t y); static TComplexRange(const TComplex& lb, const TComplex& ub, const TComplex& c); Double_tRe() const; Double_tRho() const; Double_tRho2() const; virtual voidShowMembers(TMemberInspector& insp); static TComplexSin(const TComplex& c); static TComplexSinH(const TComplex& c); static TComplexSqrt(const TComplex& c); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); static TComplexTan(const TComplex& c); static TComplexTanH(const TComplex& c); Double_tTheta() const. Data Members; protected:. Double_tfImimaginary part; Double_tfRereal part. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TComplex(Double_t re, Double_t im = 0, Bool_t polar = kFALSE); Standard constructor. TComplex(); ctors and dtors. {}. TComplex(Double_t re, Double_t im = 0, Bool_t polar = kFALSE). virtual ~TComplex(); {}. TComplex I(); constants. {return TComplex(0,1);}. TComplex One(); {return TComplex(1,0);}. Double_t Re() const; getters and setters. {return fRe;}. Double_t Im() const; {return fIm;}. Double_t Rho() const; {return TMath::Sqrt(fRe*fRe+fIm*fIm);}. Double_t Rho2() const; {return fRe*fRe+fIm*fIm;}. Double_t Theta() const; {return (fIm||fRe)?TMath::ATan2(fIm,fRe):0;}. TComplex operator()(Double_t x, Double_t y, Bool_t polar = kFALSE). operator Double_t() const; Convertors. {return fRe;}. operator Float_t() const; {return static_cast<Float_t>(fRe);}. operator Int_t() const; {return static_cast<Int_t>(fRe);}. TComplex Sqrt(const TComplex& c); TMath:: extensions. {return TComplex(TMath::Sqrt(c.Rho()),0.5*c.Theta(),kTRUE);}. TComplex Exp(cons",MatchSource.WIKI,root/html532/TComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TComplex.html
https://root.cern/root/html532/TComplex.html:3970,Testability,Log,Log,3970,"ol_t polar = kFALSE); Standard constructor. TComplex(); ctors and dtors. {}. TComplex(Double_t re, Double_t im = 0, Bool_t polar = kFALSE). virtual ~TComplex(); {}. TComplex I(); constants. {return TComplex(0,1);}. TComplex One(); {return TComplex(1,0);}. Double_t Re() const; getters and setters. {return fRe;}. Double_t Im() const; {return fIm;}. Double_t Rho() const; {return TMath::Sqrt(fRe*fRe+fIm*fIm);}. Double_t Rho2() const; {return fRe*fRe+fIm*fIm;}. Double_t Theta() const; {return (fIm||fRe)?TMath::ATan2(fIm,fRe):0;}. TComplex operator()(Double_t x, Double_t y, Bool_t polar = kFALSE). operator Double_t() const; Convertors. {return fRe;}. operator Float_t() const; {return static_cast<Float_t>(fRe);}. operator Int_t() const; {return static_cast<Int_t>(fRe);}. TComplex Sqrt(const TComplex& c); TMath:: extensions. {return TComplex(TMath::Sqrt(c.Rho()),0.5*c.Theta(),kTRUE);}. TComplex Exp(const TComplex& c); {return TComplex(TMath::Exp(c.fRe),c.fIm,kTRUE);}. TComplex Log(const TComplex& c); {return TComplex(0.5*TMath::Log(c.Rho2()),c.Theta());}. TComplex Log2(const TComplex& c); {return Log(c)/TMath::Log(2);}. TComplex Log10(const TComplex& c); {return Log(c)/TMath::Log(10);}. TComplex Sin(const TComplex& c). Cos(const TComplex& c). TComplex Tan(const TComplex& c); {TComplex cc=Cos(c); return Sin(c)*Conjugate(cc)/cc.Rho2();}. TComplex ASin(const TComplex& c); {return -I()*Log(I()*c+TMath::Sign(1.,c.Im())*Sqrt(1.-c*c));}. TComplex ACos(const TComplex& c); {return -I()*Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c-1.));}. TComplex ATan(const TComplex& c); {return -0.5*I()*Log((1.+I()*c)/(1.-I()*c));}. TComplex SinH(const TComplex& c). CosH(const TComplex& c). TComplex TanH(const TComplex& c); {TComplex cc=CosH(c); return SinH(c)*Conjugate(cc)/cc.Rho2();}. TComplex ASinH(const TComplex& c); {return Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c+1.));}. TComplex ACosH(const TComplex& c); {return Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c-1.));}. TComplex ATanH(const TComplex& c); {return 0.",MatchSource.WIKI,root/html532/TComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TComplex.html
https://root.cern/root/html532/TComplex.html:4022,Testability,Log,Log,4022,"structor. TComplex(); ctors and dtors. {}. TComplex(Double_t re, Double_t im = 0, Bool_t polar = kFALSE). virtual ~TComplex(); {}. TComplex I(); constants. {return TComplex(0,1);}. TComplex One(); {return TComplex(1,0);}. Double_t Re() const; getters and setters. {return fRe;}. Double_t Im() const; {return fIm;}. Double_t Rho() const; {return TMath::Sqrt(fRe*fRe+fIm*fIm);}. Double_t Rho2() const; {return fRe*fRe+fIm*fIm;}. Double_t Theta() const; {return (fIm||fRe)?TMath::ATan2(fIm,fRe):0;}. TComplex operator()(Double_t x, Double_t y, Bool_t polar = kFALSE). operator Double_t() const; Convertors. {return fRe;}. operator Float_t() const; {return static_cast<Float_t>(fRe);}. operator Int_t() const; {return static_cast<Int_t>(fRe);}. TComplex Sqrt(const TComplex& c); TMath:: extensions. {return TComplex(TMath::Sqrt(c.Rho()),0.5*c.Theta(),kTRUE);}. TComplex Exp(const TComplex& c); {return TComplex(TMath::Exp(c.fRe),c.fIm,kTRUE);}. TComplex Log(const TComplex& c); {return TComplex(0.5*TMath::Log(c.Rho2()),c.Theta());}. TComplex Log2(const TComplex& c); {return Log(c)/TMath::Log(2);}. TComplex Log10(const TComplex& c); {return Log(c)/TMath::Log(10);}. TComplex Sin(const TComplex& c). Cos(const TComplex& c). TComplex Tan(const TComplex& c); {TComplex cc=Cos(c); return Sin(c)*Conjugate(cc)/cc.Rho2();}. TComplex ASin(const TComplex& c); {return -I()*Log(I()*c+TMath::Sign(1.,c.Im())*Sqrt(1.-c*c));}. TComplex ACos(const TComplex& c); {return -I()*Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c-1.));}. TComplex ATan(const TComplex& c); {return -0.5*I()*Log((1.+I()*c)/(1.-I()*c));}. TComplex SinH(const TComplex& c). CosH(const TComplex& c). TComplex TanH(const TComplex& c); {TComplex cc=CosH(c); return SinH(c)*Conjugate(cc)/cc.Rho2();}. TComplex ASinH(const TComplex& c); {return Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c+1.));}. TComplex ACosH(const TComplex& c); {return Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c-1.));}. TComplex ATanH(const TComplex& c); {return 0.5*Log((1.+c)/(1.-c));}. Double_t A",MatchSource.WIKI,root/html532/TComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TComplex.html
https://root.cern/root/html532/TComplex.html:4092,Testability,Log,Log,4092,"e, Double_t im = 0, Bool_t polar = kFALSE). virtual ~TComplex(); {}. TComplex I(); constants. {return TComplex(0,1);}. TComplex One(); {return TComplex(1,0);}. Double_t Re() const; getters and setters. {return fRe;}. Double_t Im() const; {return fIm;}. Double_t Rho() const; {return TMath::Sqrt(fRe*fRe+fIm*fIm);}. Double_t Rho2() const; {return fRe*fRe+fIm*fIm;}. Double_t Theta() const; {return (fIm||fRe)?TMath::ATan2(fIm,fRe):0;}. TComplex operator()(Double_t x, Double_t y, Bool_t polar = kFALSE). operator Double_t() const; Convertors. {return fRe;}. operator Float_t() const; {return static_cast<Float_t>(fRe);}. operator Int_t() const; {return static_cast<Int_t>(fRe);}. TComplex Sqrt(const TComplex& c); TMath:: extensions. {return TComplex(TMath::Sqrt(c.Rho()),0.5*c.Theta(),kTRUE);}. TComplex Exp(const TComplex& c); {return TComplex(TMath::Exp(c.fRe),c.fIm,kTRUE);}. TComplex Log(const TComplex& c); {return TComplex(0.5*TMath::Log(c.Rho2()),c.Theta());}. TComplex Log2(const TComplex& c); {return Log(c)/TMath::Log(2);}. TComplex Log10(const TComplex& c); {return Log(c)/TMath::Log(10);}. TComplex Sin(const TComplex& c). Cos(const TComplex& c). TComplex Tan(const TComplex& c); {TComplex cc=Cos(c); return Sin(c)*Conjugate(cc)/cc.Rho2();}. TComplex ASin(const TComplex& c); {return -I()*Log(I()*c+TMath::Sign(1.,c.Im())*Sqrt(1.-c*c));}. TComplex ACos(const TComplex& c); {return -I()*Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c-1.));}. TComplex ATan(const TComplex& c); {return -0.5*I()*Log((1.+I()*c)/(1.-I()*c));}. TComplex SinH(const TComplex& c). CosH(const TComplex& c). TComplex TanH(const TComplex& c); {TComplex cc=CosH(c); return SinH(c)*Conjugate(cc)/cc.Rho2();}. TComplex ASinH(const TComplex& c); {return Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c+1.));}. TComplex ACosH(const TComplex& c); {return Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c-1.));}. TComplex ATanH(const TComplex& c); {return 0.5*Log((1.+c)/(1.-c));}. Double_t Abs(const TComplex& c); {return c.Rho();}. TComplex Power(cons",MatchSource.WIKI,root/html532/TComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TComplex.html
https://root.cern/root/html532/TComplex.html:4106,Testability,Log,Log,4106,"e, Double_t im = 0, Bool_t polar = kFALSE). virtual ~TComplex(); {}. TComplex I(); constants. {return TComplex(0,1);}. TComplex One(); {return TComplex(1,0);}. Double_t Re() const; getters and setters. {return fRe;}. Double_t Im() const; {return fIm;}. Double_t Rho() const; {return TMath::Sqrt(fRe*fRe+fIm*fIm);}. Double_t Rho2() const; {return fRe*fRe+fIm*fIm;}. Double_t Theta() const; {return (fIm||fRe)?TMath::ATan2(fIm,fRe):0;}. TComplex operator()(Double_t x, Double_t y, Bool_t polar = kFALSE). operator Double_t() const; Convertors. {return fRe;}. operator Float_t() const; {return static_cast<Float_t>(fRe);}. operator Int_t() const; {return static_cast<Int_t>(fRe);}. TComplex Sqrt(const TComplex& c); TMath:: extensions. {return TComplex(TMath::Sqrt(c.Rho()),0.5*c.Theta(),kTRUE);}. TComplex Exp(const TComplex& c); {return TComplex(TMath::Exp(c.fRe),c.fIm,kTRUE);}. TComplex Log(const TComplex& c); {return TComplex(0.5*TMath::Log(c.Rho2()),c.Theta());}. TComplex Log2(const TComplex& c); {return Log(c)/TMath::Log(2);}. TComplex Log10(const TComplex& c); {return Log(c)/TMath::Log(10);}. TComplex Sin(const TComplex& c). Cos(const TComplex& c). TComplex Tan(const TComplex& c); {TComplex cc=Cos(c); return Sin(c)*Conjugate(cc)/cc.Rho2();}. TComplex ASin(const TComplex& c); {return -I()*Log(I()*c+TMath::Sign(1.,c.Im())*Sqrt(1.-c*c));}. TComplex ACos(const TComplex& c); {return -I()*Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c-1.));}. TComplex ATan(const TComplex& c); {return -0.5*I()*Log((1.+I()*c)/(1.-I()*c));}. TComplex SinH(const TComplex& c). CosH(const TComplex& c). TComplex TanH(const TComplex& c); {TComplex cc=CosH(c); return SinH(c)*Conjugate(cc)/cc.Rho2();}. TComplex ASinH(const TComplex& c); {return Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c+1.));}. TComplex ACosH(const TComplex& c); {return Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c-1.));}. TComplex ATanH(const TComplex& c); {return 0.5*Log((1.+c)/(1.-c));}. Double_t Abs(const TComplex& c); {return c.Rho();}. TComplex Power(cons",MatchSource.WIKI,root/html532/TComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TComplex.html
https://root.cern/root/html532/TComplex.html:4159,Testability,Log,Log,4159,". TComplex I(); constants. {return TComplex(0,1);}. TComplex One(); {return TComplex(1,0);}. Double_t Re() const; getters and setters. {return fRe;}. Double_t Im() const; {return fIm;}. Double_t Rho() const; {return TMath::Sqrt(fRe*fRe+fIm*fIm);}. Double_t Rho2() const; {return fRe*fRe+fIm*fIm;}. Double_t Theta() const; {return (fIm||fRe)?TMath::ATan2(fIm,fRe):0;}. TComplex operator()(Double_t x, Double_t y, Bool_t polar = kFALSE). operator Double_t() const; Convertors. {return fRe;}. operator Float_t() const; {return static_cast<Float_t>(fRe);}. operator Int_t() const; {return static_cast<Int_t>(fRe);}. TComplex Sqrt(const TComplex& c); TMath:: extensions. {return TComplex(TMath::Sqrt(c.Rho()),0.5*c.Theta(),kTRUE);}. TComplex Exp(const TComplex& c); {return TComplex(TMath::Exp(c.fRe),c.fIm,kTRUE);}. TComplex Log(const TComplex& c); {return TComplex(0.5*TMath::Log(c.Rho2()),c.Theta());}. TComplex Log2(const TComplex& c); {return Log(c)/TMath::Log(2);}. TComplex Log10(const TComplex& c); {return Log(c)/TMath::Log(10);}. TComplex Sin(const TComplex& c). Cos(const TComplex& c). TComplex Tan(const TComplex& c); {TComplex cc=Cos(c); return Sin(c)*Conjugate(cc)/cc.Rho2();}. TComplex ASin(const TComplex& c); {return -I()*Log(I()*c+TMath::Sign(1.,c.Im())*Sqrt(1.-c*c));}. TComplex ACos(const TComplex& c); {return -I()*Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c-1.));}. TComplex ATan(const TComplex& c); {return -0.5*I()*Log((1.+I()*c)/(1.-I()*c));}. TComplex SinH(const TComplex& c). CosH(const TComplex& c). TComplex TanH(const TComplex& c); {TComplex cc=CosH(c); return SinH(c)*Conjugate(cc)/cc.Rho2();}. TComplex ASinH(const TComplex& c); {return Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c+1.));}. TComplex ACosH(const TComplex& c); {return Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c-1.));}. TComplex ATanH(const TComplex& c); {return 0.5*Log((1.+c)/(1.-c));}. Double_t Abs(const TComplex& c); {return c.Rho();}. TComplex Power(const TComplex& x, const TComplex& y). TComplex Power(const TComplex& x",MatchSource.WIKI,root/html532/TComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TComplex.html
https://root.cern/root/html532/TComplex.html:4173,Testability,Log,Log,4173,". TComplex I(); constants. {return TComplex(0,1);}. TComplex One(); {return TComplex(1,0);}. Double_t Re() const; getters and setters. {return fRe;}. Double_t Im() const; {return fIm;}. Double_t Rho() const; {return TMath::Sqrt(fRe*fRe+fIm*fIm);}. Double_t Rho2() const; {return fRe*fRe+fIm*fIm;}. Double_t Theta() const; {return (fIm||fRe)?TMath::ATan2(fIm,fRe):0;}. TComplex operator()(Double_t x, Double_t y, Bool_t polar = kFALSE). operator Double_t() const; Convertors. {return fRe;}. operator Float_t() const; {return static_cast<Float_t>(fRe);}. operator Int_t() const; {return static_cast<Int_t>(fRe);}. TComplex Sqrt(const TComplex& c); TMath:: extensions. {return TComplex(TMath::Sqrt(c.Rho()),0.5*c.Theta(),kTRUE);}. TComplex Exp(const TComplex& c); {return TComplex(TMath::Exp(c.fRe),c.fIm,kTRUE);}. TComplex Log(const TComplex& c); {return TComplex(0.5*TMath::Log(c.Rho2()),c.Theta());}. TComplex Log2(const TComplex& c); {return Log(c)/TMath::Log(2);}. TComplex Log10(const TComplex& c); {return Log(c)/TMath::Log(10);}. TComplex Sin(const TComplex& c). Cos(const TComplex& c). TComplex Tan(const TComplex& c); {TComplex cc=Cos(c); return Sin(c)*Conjugate(cc)/cc.Rho2();}. TComplex ASin(const TComplex& c); {return -I()*Log(I()*c+TMath::Sign(1.,c.Im())*Sqrt(1.-c*c));}. TComplex ACos(const TComplex& c); {return -I()*Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c-1.));}. TComplex ATan(const TComplex& c); {return -0.5*I()*Log((1.+I()*c)/(1.-I()*c));}. TComplex SinH(const TComplex& c). CosH(const TComplex& c). TComplex TanH(const TComplex& c); {TComplex cc=CosH(c); return SinH(c)*Conjugate(cc)/cc.Rho2();}. TComplex ASinH(const TComplex& c); {return Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c+1.));}. TComplex ACosH(const TComplex& c); {return Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c-1.));}. TComplex ATanH(const TComplex& c); {return 0.5*Log((1.+c)/(1.-c));}. Double_t Abs(const TComplex& c); {return c.Rho();}. TComplex Power(const TComplex& x, const TComplex& y). TComplex Power(const TComplex& x",MatchSource.WIKI,root/html532/TComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TComplex.html
https://root.cern/root/html532/TComplex.html:4383,Testability,Log,Log,4383,":Sqrt(fRe*fRe+fIm*fIm);}. Double_t Rho2() const; {return fRe*fRe+fIm*fIm;}. Double_t Theta() const; {return (fIm||fRe)?TMath::ATan2(fIm,fRe):0;}. TComplex operator()(Double_t x, Double_t y, Bool_t polar = kFALSE). operator Double_t() const; Convertors. {return fRe;}. operator Float_t() const; {return static_cast<Float_t>(fRe);}. operator Int_t() const; {return static_cast<Int_t>(fRe);}. TComplex Sqrt(const TComplex& c); TMath:: extensions. {return TComplex(TMath::Sqrt(c.Rho()),0.5*c.Theta(),kTRUE);}. TComplex Exp(const TComplex& c); {return TComplex(TMath::Exp(c.fRe),c.fIm,kTRUE);}. TComplex Log(const TComplex& c); {return TComplex(0.5*TMath::Log(c.Rho2()),c.Theta());}. TComplex Log2(const TComplex& c); {return Log(c)/TMath::Log(2);}. TComplex Log10(const TComplex& c); {return Log(c)/TMath::Log(10);}. TComplex Sin(const TComplex& c). Cos(const TComplex& c). TComplex Tan(const TComplex& c); {TComplex cc=Cos(c); return Sin(c)*Conjugate(cc)/cc.Rho2();}. TComplex ASin(const TComplex& c); {return -I()*Log(I()*c+TMath::Sign(1.,c.Im())*Sqrt(1.-c*c));}. TComplex ACos(const TComplex& c); {return -I()*Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c-1.));}. TComplex ATan(const TComplex& c); {return -0.5*I()*Log((1.+I()*c)/(1.-I()*c));}. TComplex SinH(const TComplex& c). CosH(const TComplex& c). TComplex TanH(const TComplex& c); {TComplex cc=CosH(c); return SinH(c)*Conjugate(cc)/cc.Rho2();}. TComplex ASinH(const TComplex& c); {return Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c+1.));}. TComplex ACosH(const TComplex& c); {return Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c-1.));}. TComplex ATanH(const TComplex& c); {return 0.5*Log((1.+c)/(1.-c));}. Double_t Abs(const TComplex& c); {return c.Rho();}. TComplex Power(const TComplex& x, const TComplex& y). TComplex Power(const TComplex& x, Double_t y); {return TComplex(TMath::Power(x.Rho(),y),x.Theta()*y,kTRUE);}. TComplex Power(Double_t x, const TComplex& y). TComplex Power(const TComplex& x, Int_t y); {return TComplex(TMath::Power(x.Rho(),y),x.Theta()*y,",MatchSource.WIKI,root/html532/TComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TComplex.html
https://root.cern/root/html532/TComplex.html:4480,Testability,Log,Log,4480,"nst; {return (fIm||fRe)?TMath::ATan2(fIm,fRe):0;}. TComplex operator()(Double_t x, Double_t y, Bool_t polar = kFALSE). operator Double_t() const; Convertors. {return fRe;}. operator Float_t() const; {return static_cast<Float_t>(fRe);}. operator Int_t() const; {return static_cast<Int_t>(fRe);}. TComplex Sqrt(const TComplex& c); TMath:: extensions. {return TComplex(TMath::Sqrt(c.Rho()),0.5*c.Theta(),kTRUE);}. TComplex Exp(const TComplex& c); {return TComplex(TMath::Exp(c.fRe),c.fIm,kTRUE);}. TComplex Log(const TComplex& c); {return TComplex(0.5*TMath::Log(c.Rho2()),c.Theta());}. TComplex Log2(const TComplex& c); {return Log(c)/TMath::Log(2);}. TComplex Log10(const TComplex& c); {return Log(c)/TMath::Log(10);}. TComplex Sin(const TComplex& c). Cos(const TComplex& c). TComplex Tan(const TComplex& c); {TComplex cc=Cos(c); return Sin(c)*Conjugate(cc)/cc.Rho2();}. TComplex ASin(const TComplex& c); {return -I()*Log(I()*c+TMath::Sign(1.,c.Im())*Sqrt(1.-c*c));}. TComplex ACos(const TComplex& c); {return -I()*Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c-1.));}. TComplex ATan(const TComplex& c); {return -0.5*I()*Log((1.+I()*c)/(1.-I()*c));}. TComplex SinH(const TComplex& c). CosH(const TComplex& c). TComplex TanH(const TComplex& c); {TComplex cc=CosH(c); return SinH(c)*Conjugate(cc)/cc.Rho2();}. TComplex ASinH(const TComplex& c); {return Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c+1.));}. TComplex ACosH(const TComplex& c); {return Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c-1.));}. TComplex ATanH(const TComplex& c); {return 0.5*Log((1.+c)/(1.-c));}. Double_t Abs(const TComplex& c); {return c.Rho();}. TComplex Power(const TComplex& x, const TComplex& y). TComplex Power(const TComplex& x, Double_t y); {return TComplex(TMath::Power(x.Rho(),y),x.Theta()*y,kTRUE);}. TComplex Power(Double_t x, const TComplex& y). TComplex Power(const TComplex& x, Int_t y); {return TComplex(TMath::Power(x.Rho(),y),x.Theta()*y,kTRUE);}. Int_t Finite(const TComplex& c); {return TMath::Min(TMath::Finite(c.Re()),TMath::Fini",MatchSource.WIKI,root/html532/TComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TComplex.html
https://root.cern/root/html532/TComplex.html:4577,Testability,Log,Log,4577,"FALSE). operator Double_t() const; Convertors. {return fRe;}. operator Float_t() const; {return static_cast<Float_t>(fRe);}. operator Int_t() const; {return static_cast<Int_t>(fRe);}. TComplex Sqrt(const TComplex& c); TMath:: extensions. {return TComplex(TMath::Sqrt(c.Rho()),0.5*c.Theta(),kTRUE);}. TComplex Exp(const TComplex& c); {return TComplex(TMath::Exp(c.fRe),c.fIm,kTRUE);}. TComplex Log(const TComplex& c); {return TComplex(0.5*TMath::Log(c.Rho2()),c.Theta());}. TComplex Log2(const TComplex& c); {return Log(c)/TMath::Log(2);}. TComplex Log10(const TComplex& c); {return Log(c)/TMath::Log(10);}. TComplex Sin(const TComplex& c). Cos(const TComplex& c). TComplex Tan(const TComplex& c); {TComplex cc=Cos(c); return Sin(c)*Conjugate(cc)/cc.Rho2();}. TComplex ASin(const TComplex& c); {return -I()*Log(I()*c+TMath::Sign(1.,c.Im())*Sqrt(1.-c*c));}. TComplex ACos(const TComplex& c); {return -I()*Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c-1.));}. TComplex ATan(const TComplex& c); {return -0.5*I()*Log((1.+I()*c)/(1.-I()*c));}. TComplex SinH(const TComplex& c). CosH(const TComplex& c). TComplex TanH(const TComplex& c); {TComplex cc=CosH(c); return SinH(c)*Conjugate(cc)/cc.Rho2();}. TComplex ASinH(const TComplex& c); {return Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c+1.));}. TComplex ACosH(const TComplex& c); {return Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c-1.));}. TComplex ATanH(const TComplex& c); {return 0.5*Log((1.+c)/(1.-c));}. Double_t Abs(const TComplex& c); {return c.Rho();}. TComplex Power(const TComplex& x, const TComplex& y). TComplex Power(const TComplex& x, Double_t y); {return TComplex(TMath::Power(x.Rho(),y),x.Theta()*y,kTRUE);}. TComplex Power(Double_t x, const TComplex& y). TComplex Power(const TComplex& x, Int_t y); {return TComplex(TMath::Power(x.Rho(),y),x.Theta()*y,kTRUE);}. Int_t Finite(const TComplex& c); {return TMath::Min(TMath::Finite(c.Re()),TMath::Finite(c.Im()));}. Int_t IsNaN(const TComplex& c); {return TMath::Max(TMath::IsNaN(c.Re()),TMath::IsNaN(c.Im()));}. ",MatchSource.WIKI,root/html532/TComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TComplex.html
https://root.cern/root/html532/TComplex.html:4807,Testability,Log,Log,4807,"TMath:: extensions. {return TComplex(TMath::Sqrt(c.Rho()),0.5*c.Theta(),kTRUE);}. TComplex Exp(const TComplex& c); {return TComplex(TMath::Exp(c.fRe),c.fIm,kTRUE);}. TComplex Log(const TComplex& c); {return TComplex(0.5*TMath::Log(c.Rho2()),c.Theta());}. TComplex Log2(const TComplex& c); {return Log(c)/TMath::Log(2);}. TComplex Log10(const TComplex& c); {return Log(c)/TMath::Log(10);}. TComplex Sin(const TComplex& c). Cos(const TComplex& c). TComplex Tan(const TComplex& c); {TComplex cc=Cos(c); return Sin(c)*Conjugate(cc)/cc.Rho2();}. TComplex ASin(const TComplex& c); {return -I()*Log(I()*c+TMath::Sign(1.,c.Im())*Sqrt(1.-c*c));}. TComplex ACos(const TComplex& c); {return -I()*Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c-1.));}. TComplex ATan(const TComplex& c); {return -0.5*I()*Log((1.+I()*c)/(1.-I()*c));}. TComplex SinH(const TComplex& c). CosH(const TComplex& c). TComplex TanH(const TComplex& c); {TComplex cc=CosH(c); return SinH(c)*Conjugate(cc)/cc.Rho2();}. TComplex ASinH(const TComplex& c); {return Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c+1.));}. TComplex ACosH(const TComplex& c); {return Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c-1.));}. TComplex ATanH(const TComplex& c); {return 0.5*Log((1.+c)/(1.-c));}. Double_t Abs(const TComplex& c); {return c.Rho();}. TComplex Power(const TComplex& x, const TComplex& y). TComplex Power(const TComplex& x, Double_t y); {return TComplex(TMath::Power(x.Rho(),y),x.Theta()*y,kTRUE);}. TComplex Power(Double_t x, const TComplex& y). TComplex Power(const TComplex& x, Int_t y); {return TComplex(TMath::Power(x.Rho(),y),x.Theta()*y,kTRUE);}. Int_t Finite(const TComplex& c); {return TMath::Min(TMath::Finite(c.Re()),TMath::Finite(c.Im()));}. Int_t IsNaN(const TComplex& c); {return TMath::Max(TMath::IsNaN(c.Re()),TMath::IsNaN(c.Im()));}. TComplex Min(const TComplex& a, const TComplex& b); {return a.Rho()<=b.Rho()?a:b;}. TComplex Max(const TComplex& a, const TComplex& b); {return a.Rho()>=b.Rho()?a:b;}. TComplex Normalize(const TComplex& c); {return TC",MatchSource.WIKI,root/html532/TComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TComplex.html
https://root.cern/root/html532/TComplex.html:4896,Testability,Log,Log,4896,"x Exp(const TComplex& c); {return TComplex(TMath::Exp(c.fRe),c.fIm,kTRUE);}. TComplex Log(const TComplex& c); {return TComplex(0.5*TMath::Log(c.Rho2()),c.Theta());}. TComplex Log2(const TComplex& c); {return Log(c)/TMath::Log(2);}. TComplex Log10(const TComplex& c); {return Log(c)/TMath::Log(10);}. TComplex Sin(const TComplex& c). Cos(const TComplex& c). TComplex Tan(const TComplex& c); {TComplex cc=Cos(c); return Sin(c)*Conjugate(cc)/cc.Rho2();}. TComplex ASin(const TComplex& c); {return -I()*Log(I()*c+TMath::Sign(1.,c.Im())*Sqrt(1.-c*c));}. TComplex ACos(const TComplex& c); {return -I()*Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c-1.));}. TComplex ATan(const TComplex& c); {return -0.5*I()*Log((1.+I()*c)/(1.-I()*c));}. TComplex SinH(const TComplex& c). CosH(const TComplex& c). TComplex TanH(const TComplex& c); {TComplex cc=CosH(c); return SinH(c)*Conjugate(cc)/cc.Rho2();}. TComplex ASinH(const TComplex& c); {return Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c+1.));}. TComplex ACosH(const TComplex& c); {return Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c-1.));}. TComplex ATanH(const TComplex& c); {return 0.5*Log((1.+c)/(1.-c));}. Double_t Abs(const TComplex& c); {return c.Rho();}. TComplex Power(const TComplex& x, const TComplex& y). TComplex Power(const TComplex& x, Double_t y); {return TComplex(TMath::Power(x.Rho(),y),x.Theta()*y,kTRUE);}. TComplex Power(Double_t x, const TComplex& y). TComplex Power(const TComplex& x, Int_t y); {return TComplex(TMath::Power(x.Rho(),y),x.Theta()*y,kTRUE);}. Int_t Finite(const TComplex& c); {return TMath::Min(TMath::Finite(c.Re()),TMath::Finite(c.Im()));}. Int_t IsNaN(const TComplex& c); {return TMath::Max(TMath::IsNaN(c.Re()),TMath::IsNaN(c.Im()));}. TComplex Min(const TComplex& a, const TComplex& b); {return a.Rho()<=b.Rho()?a:b;}. TComplex Max(const TComplex& a, const TComplex& b); {return a.Rho()>=b.Rho()?a:b;}. TComplex Normalize(const TComplex& c); {return TComplex(1.,c.Theta(),kTRUE);}. TComplex Conjugate(const TComplex& c); {return TComplex(c.R",MatchSource.WIKI,root/html532/TComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TComplex.html
https://root.cern/root/html532/TComplex.html:4989,Testability,Log,Log,4989,"); {return TComplex(0.5*TMath::Log(c.Rho2()),c.Theta());}. TComplex Log2(const TComplex& c); {return Log(c)/TMath::Log(2);}. TComplex Log10(const TComplex& c); {return Log(c)/TMath::Log(10);}. TComplex Sin(const TComplex& c). Cos(const TComplex& c). TComplex Tan(const TComplex& c); {TComplex cc=Cos(c); return Sin(c)*Conjugate(cc)/cc.Rho2();}. TComplex ASin(const TComplex& c); {return -I()*Log(I()*c+TMath::Sign(1.,c.Im())*Sqrt(1.-c*c));}. TComplex ACos(const TComplex& c); {return -I()*Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c-1.));}. TComplex ATan(const TComplex& c); {return -0.5*I()*Log((1.+I()*c)/(1.-I()*c));}. TComplex SinH(const TComplex& c). CosH(const TComplex& c). TComplex TanH(const TComplex& c); {TComplex cc=CosH(c); return SinH(c)*Conjugate(cc)/cc.Rho2();}. TComplex ASinH(const TComplex& c); {return Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c+1.));}. TComplex ACosH(const TComplex& c); {return Log(c+TMath::Sign(1.,c.Im())*Sqrt(c*c-1.));}. TComplex ATanH(const TComplex& c); {return 0.5*Log((1.+c)/(1.-c));}. Double_t Abs(const TComplex& c); {return c.Rho();}. TComplex Power(const TComplex& x, const TComplex& y). TComplex Power(const TComplex& x, Double_t y); {return TComplex(TMath::Power(x.Rho(),y),x.Theta()*y,kTRUE);}. TComplex Power(Double_t x, const TComplex& y). TComplex Power(const TComplex& x, Int_t y); {return TComplex(TMath::Power(x.Rho(),y),x.Theta()*y,kTRUE);}. Int_t Finite(const TComplex& c); {return TMath::Min(TMath::Finite(c.Re()),TMath::Finite(c.Im()));}. Int_t IsNaN(const TComplex& c); {return TMath::Max(TMath::IsNaN(c.Re()),TMath::IsNaN(c.Im()));}. TComplex Min(const TComplex& a, const TComplex& b); {return a.Rho()<=b.Rho()?a:b;}. TComplex Max(const TComplex& a, const TComplex& b); {return a.Rho()>=b.Rho()?a:b;}. TComplex Normalize(const TComplex& c); {return TComplex(1.,c.Theta(),kTRUE);}. TComplex Conjugate(const TComplex& c); {return TComplex(c.Re(),-c.Im());}. TComplex Range(const TComplex& lb, const TComplex& ub, const TComplex& c); {return Max(lb,Mi",MatchSource.WIKI,root/html532/TComplex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TComplex.html
https://root.cern/root/html532/TCondition.html:1379,Availability,Error,Error,1379," TCondition(TMutex* m = 0); virtual~TCondition(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); Int_tBroadcast(); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() con",MatchSource.WIKI,root/html532/TCondition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondition.html
https://root.cern/root/html532/TCondition.html:1508,Availability,error,error,1508," TCondition(TMutex* m = 0); virtual~TCondition(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); Int_tBroadcast(); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() con",MatchSource.WIKI,root/html532/TCondition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondition.html
https://root.cern/root/html532/TCondition.html:1592,Availability,error,error,1592,"ractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); Int_tBroadcast(); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TMutex*GetMutex() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) c",MatchSource.WIKI,root/html532/TCondition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondition.html
https://root.cern/root/html532/TCondition.html:6632,Availability,error,error,6632," fMutex our private mutex. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCondition(TMutex* m = 0); Create a condition variable. The actual condition implementation; will be provided via the TThreadFactory. If no external mutex is; provided one will be created. Use GetMutex() to get this mutex; and use it before calling Signal() or Broadcast(). ~TCondition(); Clean up condition variable. TMutex * GetMutex() const; Get internally created mutex. Use it to lock resources; before calling Signal() or Broadcast(). Returns 0 if; external mutex was provided in TCondition ctor. Int_t Wait(); Wait to be signaled. Int_t TimedWait(ULong_t secs, ULong_t nanoSecs); Wait to be signaled or till the timer times out.; This method is given an absolute time since the beginning of; the EPOCH (use TThread::GetTime() to get this absolute time).; To wait for a relative time from now, use; TCondition::TimedWaitRelative(ULong_t ms).; Returns 0 if successfully signalled, 1 if time expired and -1 in; case of error. Int_t TimedWaitRelative(ULong_t ms); Wait to be signaled or till the timer times out.; This method is given a relative time from now.; To wait for an absolute time since the beginning of the EPOCH, use; TCondition::TimedWait(ULong_t secs, ULong_t nanoSec).; Returns 0 if successfully signalled, 1 if time expired and -1 in; case of error. TCondition(const TCondition& ). TCondition& operator=(const TCondition& ). Int_t Signal(); { if (fConditionImp) return fConditionImp->Signal(); return -1; }. Int_t Broadcast(); { if (fConditionImp) return fConditionImp->Broadcast(); return -1; }. » Author: Fons Rademakers 01/07/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/thread:$Id: TCondition.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TCondition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondition.html
https://root.cern/root/html532/TCondition.html:6971,Availability,error,error,6971," fMutex our private mutex. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCondition(TMutex* m = 0); Create a condition variable. The actual condition implementation; will be provided via the TThreadFactory. If no external mutex is; provided one will be created. Use GetMutex() to get this mutex; and use it before calling Signal() or Broadcast(). ~TCondition(); Clean up condition variable. TMutex * GetMutex() const; Get internally created mutex. Use it to lock resources; before calling Signal() or Broadcast(). Returns 0 if; external mutex was provided in TCondition ctor. Int_t Wait(); Wait to be signaled. Int_t TimedWait(ULong_t secs, ULong_t nanoSecs); Wait to be signaled or till the timer times out.; This method is given an absolute time since the beginning of; the EPOCH (use TThread::GetTime() to get this absolute time).; To wait for a relative time from now, use; TCondition::TimedWaitRelative(ULong_t ms).; Returns 0 if successfully signalled, 1 if time expired and -1 in; case of error. Int_t TimedWaitRelative(ULong_t ms); Wait to be signaled or till the timer times out.; This method is given a relative time from now.; To wait for an absolute time since the beginning of the EPOCH, use; TCondition::TimedWait(ULong_t secs, ULong_t nanoSec).; Returns 0 if successfully signalled, 1 if time expired and -1 in; case of error. TCondition(const TCondition& ). TCondition& operator=(const TCondition& ). Int_t Signal(); { if (fConditionImp) return fConditionImp->Signal(); return -1; }. Int_t Broadcast(); { if (fConditionImp) return fConditionImp->Broadcast(); return -1; }. » Author: Fons Rademakers 01/07/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/thread:$Id: TCondition.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TCondition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondition.html
https://root.cern/root/html532/TCondition.html:339,Modifiability,variab,variable,339,". TCondition. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » THREAD; » TCondition. class TCondition: public TObject. TCondition. This class implements a condition variable. Use a condition variable; to signal threads. The actual work is done via the TConditionImp; class (either TPosixCondition or TWin32Condition). Function Members (Methods); public:. TCondition(TMutex* m = 0); virtual~TCondition(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); Int_tBroadcast(); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() con",MatchSource.WIKI,root/html532/TCondition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondition.html
https://root.cern/root/html532/TCondition.html:365,Modifiability,variab,variable,365,". TCondition. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » THREAD; » TCondition. class TCondition: public TObject. TCondition. This class implements a condition variable. Use a condition variable; to signal threads. The actual work is done via the TConditionImp; class (either TPosixCondition or TWin32Condition). Function Members (Methods); public:. TCondition(TMutex* m = 0); virtual~TCondition(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); Int_tBroadcast(); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() con",MatchSource.WIKI,root/html532/TCondition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondition.html
https://root.cern/root/html532/TCondition.html:2497,Modifiability,Inherit,InheritsFrom,2497,"t_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TMutex*GetMutex() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TOb",MatchSource.WIKI,root/html532/TCondition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondition.html
https://root.cern/root/html532/TCondition.html:2563,Modifiability,Inherit,InheritsFrom,2563,"jArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TMutex*GetMutex() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Pa",MatchSource.WIKI,root/html532/TCondition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondition.html
https://root.cern/root/html532/TCondition.html:5490,Modifiability,variab,variable,5490,"_t f) const; Int_tTimedWait(ULong_t secs, ULong_t nanoSecs); Int_tTimedWaitRelative(ULong_t ms); virtual voidTObject::UseCurrentStyle(); Int_tWait(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TCondition(const TCondition&); TCondition&operator=(const TCondition&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TConditionImp*fConditionImppointer to condition variable implementation; TMutex*fMutexmutex used around Wait() and TimedWait(); Bool_tfPrivateMutexis fMutex our private mutex. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCondition(TMutex* m = 0); Create a condition variable. The actual condition implementation; will be provided via the TThreadFactory. If no external mutex is; provided one will be created. Use GetMutex() to get this mutex; and use it before calling Signal() or Broadcast(). ~TCondition(); Clean up condition variable. TMutex * GetMutex() const; Get internally created mutex. Use it to lock resources; before calling Signal() or Broadcast(). Returns 0 if; external mutex was provided in TCondition ctor. Int_t Wait(); Wait to be signaled. Int_t TimedWait(ULong_t secs, ULong_t nanoSecs); Wait to be signaled or till the timer times out.; This method is given an absolute time since the beginning of; the EPOCH (use TThread::GetTime() to get this absolute time).; To wait for a relative time from now, use; TCondition::Tim",MatchSource.WIKI,root/html532/TCondition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondition.html
https://root.cern/root/html532/TCondition.html:5632,Modifiability,Inherit,Inheritance,5632,"Style(); Int_tWait(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TCondition(const TCondition&); TCondition&operator=(const TCondition&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TConditionImp*fConditionImppointer to condition variable implementation; TMutex*fMutexmutex used around Wait() and TimedWait(); Bool_tfPrivateMutexis fMutex our private mutex. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCondition(TMutex* m = 0); Create a condition variable. The actual condition implementation; will be provided via the TThreadFactory. If no external mutex is; provided one will be created. Use GetMutex() to get this mutex; and use it before calling Signal() or Broadcast(). ~TCondition(); Clean up condition variable. TMutex * GetMutex() const; Get internally created mutex. Use it to lock resources; before calling Signal() or Broadcast(). Returns 0 if; external mutex was provided in TCondition ctor. Int_t Wait(); Wait to be signaled. Int_t TimedWait(ULong_t secs, ULong_t nanoSecs); Wait to be signaled or till the timer times out.; This method is given an absolute time since the beginning of; the EPOCH (use TThread::GetTime() to get this absolute time).; To wait for a relative time from now, use; TCondition::TimedWaitRelative(ULong_t ms).; Returns 0 if successfully signalled, 1 if time expired and -1 in; case of error. Int_t TimedWaitRela",MatchSource.WIKI,root/html532/TCondition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondition.html
https://root.cern/root/html532/TCondition.html:5645,Modifiability,Inherit,Inherited,5645,"Style(); Int_tWait(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TCondition(const TCondition&); TCondition&operator=(const TCondition&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TConditionImp*fConditionImppointer to condition variable implementation; TMutex*fMutexmutex used around Wait() and TimedWait(); Bool_tfPrivateMutexis fMutex our private mutex. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCondition(TMutex* m = 0); Create a condition variable. The actual condition implementation; will be provided via the TThreadFactory. If no external mutex is; provided one will be created. Use GetMutex() to get this mutex; and use it before calling Signal() or Broadcast(). ~TCondition(); Clean up condition variable. TMutex * GetMutex() const; Get internally created mutex. Use it to lock resources; before calling Signal() or Broadcast(). Returns 0 if; external mutex was provided in TCondition ctor. Int_t Wait(); Wait to be signaled. Int_t TimedWait(ULong_t secs, ULong_t nanoSecs); Wait to be signaled or till the timer times out.; This method is given an absolute time since the beginning of; the EPOCH (use TThread::GetTime() to get this absolute time).; To wait for a relative time from now, use; TCondition::TimedWaitRelative(ULong_t ms).; Returns 0 if successfully signalled, 1 if time expired and -1 in; case of error. Int_t TimedWaitRela",MatchSource.WIKI,root/html532/TCondition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondition.html
https://root.cern/root/html532/TCondition.html:5755,Modifiability,variab,variable,5755,"od, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TCondition(const TCondition&); TCondition&operator=(const TCondition&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TConditionImp*fConditionImppointer to condition variable implementation; TMutex*fMutexmutex used around Wait() and TimedWait(); Bool_tfPrivateMutexis fMutex our private mutex. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCondition(TMutex* m = 0); Create a condition variable. The actual condition implementation; will be provided via the TThreadFactory. If no external mutex is; provided one will be created. Use GetMutex() to get this mutex; and use it before calling Signal() or Broadcast(). ~TCondition(); Clean up condition variable. TMutex * GetMutex() const; Get internally created mutex. Use it to lock resources; before calling Signal() or Broadcast(). Returns 0 if; external mutex was provided in TCondition ctor. Int_t Wait(); Wait to be signaled. Int_t TimedWait(ULong_t secs, ULong_t nanoSecs); Wait to be signaled or till the timer times out.; This method is given an absolute time since the beginning of; the EPOCH (use TThread::GetTime() to get this absolute time).; To wait for a relative time from now, use; TCondition::TimedWaitRelative(ULong_t ms).; Returns 0 if successfully signalled, 1 if time expired and -1 in; case of error. Int_t TimedWaitRelative(ULong_t ms); Wait to be signaled or till the timer times out.",MatchSource.WIKI,root/html532/TCondition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondition.html
https://root.cern/root/html532/TCondition.html:6017,Modifiability,variab,variable,6017,"ation, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TCondition(const TCondition&); TCondition&operator=(const TCondition&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TConditionImp*fConditionImppointer to condition variable implementation; TMutex*fMutexmutex used around Wait() and TimedWait(); Bool_tfPrivateMutexis fMutex our private mutex. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCondition(TMutex* m = 0); Create a condition variable. The actual condition implementation; will be provided via the TThreadFactory. If no external mutex is; provided one will be created. Use GetMutex() to get this mutex; and use it before calling Signal() or Broadcast(). ~TCondition(); Clean up condition variable. TMutex * GetMutex() const; Get internally created mutex. Use it to lock resources; before calling Signal() or Broadcast(). Returns 0 if; external mutex was provided in TCondition ctor. Int_t Wait(); Wait to be signaled. Int_t TimedWait(ULong_t secs, ULong_t nanoSecs); Wait to be signaled or till the timer times out.; This method is given an absolute time since the beginning of; the EPOCH (use TThread::GetTime() to get this absolute time).; To wait for a relative time from now, use; TCondition::TimedWaitRelative(ULong_t ms).; Returns 0 if successfully signalled, 1 if time expired and -1 in; case of error. Int_t TimedWaitRelative(ULong_t ms); Wait to be signaled or till the timer times out.; This method is given a relative time from now.; To wait for an absolute time since the beginning of the EPOCH, use; TCondition::TimedWait(ULong_t secs, ULong_t nanoSec).; Returns 0 if successfully signalled, 1 if time expired and -1 in; case of error. TCondition(const TConditio",MatchSource.WIKI,root/html532/TCondition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondition.html
https://root.cern/root/html532/TCondition.html:2387,Security,Hash,Hash,2387,"t char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TMutex*GetMutex() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator ",MatchSource.WIKI,root/html532/TCondition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondition.html
https://root.cern/root/html532/TCondition.html:4477,Testability,Test,TestBit,4477,"ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); Int_tSignal(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Int_tTimedWait(ULong_t secs, ULong_t nanoSecs); Int_tTimedWaitRelative(ULong_t ms); virtual voidTObject::UseCurrentStyle(); Int_tWait(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TCondition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondition.html
https://root.cern/root/html532/TCondition.html:4516,Testability,Test,TestBits,4516,"ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); Int_tSignal(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Int_tTimedWait(ULong_t secs, ULong_t nanoSecs); Int_tTimedWaitRelative(ULong_t ms); virtual voidTObject::UseCurrentStyle(); Int_tWait(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TCondition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondition.html
https://root.cern/root/html532/TCondition.html:839,Usability,Clear,Clear,839," TCondition(TMutex* m = 0); virtual~TCondition(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); Int_tBroadcast(); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() con",MatchSource.WIKI,root/html532/TCondition.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondition.html
https://root.cern/root/html532/TConditionImp.html:571,Availability,avail,available,571,". TConditionImp. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » THREAD; » TConditionImp. class TConditionImp: public TObject. TConditionImp. This class provides an abstract interface to the OS dependent; condition classes (TPosixCondition and TWin32Condition). Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TConditionImp(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual Int_tBroadcast(); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::",MatchSource.WIKI,root/html532/TConditionImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TConditionImp.html
https://root.cern/root/html532/TConditionImp.html:1439,Availability,Error,Error,1439," virtual~TConditionImp(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual Int_tBroadcast(); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::",MatchSource.WIKI,root/html532/TConditionImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TConditionImp.html
https://root.cern/root/html532/TConditionImp.html:1568,Availability,error,error,1568," virtual~TConditionImp(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual Int_tBroadcast(); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::",MatchSource.WIKI,root/html532/TConditionImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TConditionImp.html
https://root.cern/root/html532/TConditionImp.html:1652,Availability,error,error,1652,"od(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual Int_tBroadcast(); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject",MatchSource.WIKI,root/html532/TConditionImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TConditionImp.html
https://root.cern/root/html532/TConditionImp.html:349,Integrability,interface,interface,349,". TConditionImp. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » THREAD; » TConditionImp. class TConditionImp: public TObject. TConditionImp. This class provides an abstract interface to the OS dependent; condition classes (TPosixCondition and TWin32Condition). Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TConditionImp(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual Int_tBroadcast(); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::",MatchSource.WIKI,root/html532/TConditionImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TConditionImp.html
https://root.cern/root/html532/TConditionImp.html:369,Integrability,depend,dependent,369,". TConditionImp. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » THREAD; » TConditionImp. class TConditionImp: public TObject. TConditionImp. This class provides an abstract interface to the OS dependent; condition classes (TPosixCondition and TWin32Condition). Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TConditionImp(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual Int_tBroadcast(); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::",MatchSource.WIKI,root/html532/TConditionImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TConditionImp.html
https://root.cern/root/html532/TConditionImp.html:2532,Modifiability,Inherit,InheritsFrom,2532,"d, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TOb",MatchSource.WIKI,root/html532/TConditionImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TConditionImp.html
https://root.cern/root/html532/TConditionImp.html:2598,Modifiability,Inherit,InheritsFrom,2598,"cute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TConditionImp&operator=",MatchSource.WIKI,root/html532/TConditionImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TConditionImp.html
https://root.cern/root/html532/TConditionImp.html:5438,Modifiability,Inherit,Inheritance,5438,"ive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tSignal(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Int_tTimedWait(ULong_t secs, ULong_t nanoSecs = 0); virtual voidTObject::UseCurrentStyle(); virtual Int_tWait(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TConditionImp(); { }. Int_t Wait(). Int_t TimedWait(ULong_t secs, ULong_t nanoSecs = 0). Int_t Signal(). Int_t Broadcast(). » Author: Fons Rademakers 01/07/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/thread:$Id: TConditionImp.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:11; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TConditionImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TConditionImp.html
https://root.cern/root/html532/TConditionImp.html:5451,Modifiability,Inherit,Inherited,5451,"ive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tSignal(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Int_tTimedWait(ULong_t secs, ULong_t nanoSecs = 0); virtual voidTObject::UseCurrentStyle(); virtual Int_tWait(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TConditionImp(); { }. Int_t Wait(). Int_t TimedWait(ULong_t secs, ULong_t nanoSecs = 0). Int_t Signal(). Int_t Broadcast(). » Author: Fons Rademakers 01/07/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/thread:$Id: TConditionImp.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:11; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TConditionImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TConditionImp.html
https://root.cern/root/html532/TConditionImp.html:2422,Security,Hash,Hash,2422,"l voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator ",MatchSource.WIKI,root/html532/TConditionImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TConditionImp.html
https://root.cern/root/html532/TConditionImp.html:4567,Testability,Test,TestBit,4567,"bject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TConditionImp&operator=(const TConditionImp&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tSignal(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Int_tTimedWait(ULong_t secs, ULong_t nanoSecs = 0); virtual voidTObject::UseCurrentStyle(); virtual Int_tWait(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TConditionImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TConditionImp.html
https://root.cern/root/html532/TConditionImp.html:4606,Testability,Test,TestBits,4606,"bject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TConditionImp&operator=(const TConditionImp&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tSignal(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Int_tTimedWait(ULong_t secs, ULong_t nanoSecs = 0); virtual voidTObject::UseCurrentStyle(); virtual Int_tWait(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TConditionImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TConditionImp.html
https://root.cern/root/html532/TConditionImp.html:899,Usability,Clear,Clear,899," virtual~TConditionImp(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual Int_tBroadcast(); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::",MatchSource.WIKI,root/html532/TConditionImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TConditionImp.html
https://root.cern/root/html532/TCondor.html:1466,Availability,Error,Error,1466," TCondor(const char* pool = """"); TCondor(const TCondor&); virtual~TCondor(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); TList*Claim(Int_t n, const char* cmd); TCondorSlave*Claim(const char* vmname, const char* cmd); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() co",MatchSource.WIKI,root/html532/TCondor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondor.html
https://root.cern/root/html532/TCondor.html:1595,Availability,error,error,1595,"::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); TList*Claim(Int_t n, const char* cmd); TCondorSlave*Claim(const char* vmname, const char* cmd); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TStringGetImage(const char* host) const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TCondor::EStateGetState() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; TList*GetVirtualMachines() const; Bool_tGetVmInfo(const char* vm, TString& image, Int_t& perfidx) const; virtual Bool_tTObject::HandleTimer(TTimer* ti",MatchSource.WIKI,root/html532/TCondor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondor.html
https://root.cern/root/html532/TCondor.html:1679,Availability,error,error,1679," option = """"); virtual voidTObject::Browse(TBrowser* b); TList*Claim(Int_t n, const char* cmd); TCondorSlave*Claim(const char* vmname, const char* cmd); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TStringGetImage(const char* host) const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TCondor::EStateGetState() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; TList*GetVirtualMachines() const; Bool_tGetVmInfo(const char* vm, TString& image, Int_t& perfidx) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* me",MatchSource.WIKI,root/html532/TCondor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondor.html
https://root.cern/root/html532/TCondor.html:6409,Availability,failure,failure,6409,"bie(). Data Members; public:. enum EState { kFree; kSuspended; kActive; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TList*fClaimslist of claims we manage; TStringfPoolthe condor pool to be accessed; TCondor::EStatefStateour claim state; Bool_tfValidaccess to Condor. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCondor(const char* pool = """"); Create Condor interface object. Uses Condor apps since there is no; API yet. ~TCondor(); Cleanup Condor interface. void Print(Option_t* option = """") const; Print master status. TCondorSlave * ClaimVM(const char* vm, const char* cmd); Claim a VirtualMachine for PROOF usage. TList * GetVirtualMachines() const; Get the names of the virtual machines in the pool.; Return a TList of TObjString or 0 in case of failure. TList * Claim(Int_t n, const char* cmd); Claim n virtual machines; This function figures out the image and performance index before returning; the list of condor slaves. TCondorSlave * Claim(const char* vmname, const char* cmd); Claim virtual machine with name vmname; This function does not figure out the image and performance index before; returning the condor slave. Bool_t SetState(TCondor::EState state); Set the state of workers. Bool_t Suspend(); Suspend worker. Bool_t Resume(); Resume worker. Bool_t Release(); Release worker. Bool_t GetVmInfo(const char* vm, TString& image, Int_t& perfidx) const; Get info about worker status. TString GetImage(const char* host) const; Get image of the worker. TCondor(const char* pool = """"). Bool_t IsValid() const; { return fValid; }. EState GetState() const; {return fState;}. » Author: Maarten Ballintijn 06/12/03 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id: TCondor.h 20882 ",MatchSource.WIKI,root/html532/TCondor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondor.html
https://root.cern/root/html532/TCondor.html:6928,Deployability,Release,Release,6928,"num TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TList*fClaimslist of claims we manage; TStringfPoolthe condor pool to be accessed; TCondor::EStatefStateour claim state; Bool_tfValidaccess to Condor. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCondor(const char* pool = """"); Create Condor interface object. Uses Condor apps since there is no; API yet. ~TCondor(); Cleanup Condor interface. void Print(Option_t* option = """") const; Print master status. TCondorSlave * ClaimVM(const char* vm, const char* cmd); Claim a VirtualMachine for PROOF usage. TList * GetVirtualMachines() const; Get the names of the virtual machines in the pool.; Return a TList of TObjString or 0 in case of failure. TList * Claim(Int_t n, const char* cmd); Claim n virtual machines; This function figures out the image and performance index before returning; the list of condor slaves. TCondorSlave * Claim(const char* vmname, const char* cmd); Claim virtual machine with name vmname; This function does not figure out the image and performance index before; returning the condor slave. Bool_t SetState(TCondor::EState state); Set the state of workers. Bool_t Suspend(); Suspend worker. Bool_t Resume(); Resume worker. Bool_t Release(); Release worker. Bool_t GetVmInfo(const char* vm, TString& image, Int_t& perfidx) const; Get info about worker status. TString GetImage(const char* host) const; Get image of the worker. TCondor(const char* pool = """"). Bool_t IsValid() const; { return fValid; }. EState GetState() const; {return fState;}. » Author: Maarten Ballintijn 06/12/03 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id: TCondor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:11; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TCondor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondor.html
https://root.cern/root/html532/TCondor.html:6939,Deployability,Release,Release,6939,"num TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TList*fClaimslist of claims we manage; TStringfPoolthe condor pool to be accessed; TCondor::EStatefStateour claim state; Bool_tfValidaccess to Condor. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCondor(const char* pool = """"); Create Condor interface object. Uses Condor apps since there is no; API yet. ~TCondor(); Cleanup Condor interface. void Print(Option_t* option = """") const; Print master status. TCondorSlave * ClaimVM(const char* vm, const char* cmd); Claim a VirtualMachine for PROOF usage. TList * GetVirtualMachines() const; Get the names of the virtual machines in the pool.; Return a TList of TObjString or 0 in case of failure. TList * Claim(Int_t n, const char* cmd); Claim n virtual machines; This function figures out the image and performance index before returning; the list of condor slaves. TCondorSlave * Claim(const char* vmname, const char* cmd); Claim virtual machine with name vmname; This function does not figure out the image and performance index before; returning the condor slave. Bool_t SetState(TCondor::EState state); Set the state of workers. Bool_t Suspend(); Suspend worker. Bool_t Resume(); Resume worker. Bool_t Release(); Release worker. Bool_t GetVmInfo(const char* vm, TString& image, Int_t& perfidx) const; Get info about worker status. TString GetImage(const char* host) const; Get image of the worker. TCondor(const char* pool = """"). Bool_t IsValid() const; { return fValid; }. EState GetState() const; {return fState;}. » Author: Maarten Ballintijn 06/12/03 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id: TCondor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:11; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TCondor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondor.html
https://root.cern/root/html532/TCondor.html:293,Integrability,Interface,Interface,293,". TCondor. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TCondor. class TCondor: public TObject. TCondor. Interface to the Condor system. TCondor provides a (partial) API for; querying and controlling the Condor system, including experimental; extensions like COD (computing on demand). Function Members (Methods); public:. TCondor(const char* pool = """"); TCondor(const TCondor&); virtual~TCondor(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); TList*Claim(Int_t n, const char* cmd); TCondorSlave*Claim(const char* vmname, const char* cmd); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() co",MatchSource.WIKI,root/html532/TCondor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondor.html
https://root.cern/root/html532/TCondor.html:6016,Integrability,interface,interface,6016,"thod, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. TCondorSlave*ClaimVM(const char* vm, const char* cmd); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum EState { kFree; kSuspended; kActive; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TList*fClaimslist of claims we manage; TStringfPoolthe condor pool to be accessed; TCondor::EStatefStateour claim state; Bool_tfValidaccess to Condor. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCondor(const char* pool = """"); Create Condor interface object. Uses Condor apps since there is no; API yet. ~TCondor(); Cleanup Condor interface. void Print(Option_t* option = """") const; Print master status. TCondorSlave * ClaimVM(const char* vm, const char* cmd); Claim a VirtualMachine for PROOF usage. TList * GetVirtualMachines() const; Get the names of the virtual machines in the pool.; Return a TList of TObjString or 0 in case of failure. TList * Claim(Int_t n, const char* cmd); Claim n virtual machines; This function figures out the image and performance index before returning; the list of condor slaves. TCondorSlave * Claim(const char* vmname, const char* cmd); Claim virtual machine with name vmname; This function does not figure out the image and performance index before; returning the condor slave. Bool_t SetState(TCondor::EState state); Set the state of workers. Bool_t Suspend(); Suspend worker. Bool_t Resume(); Resume worker. Bool_t Release(); Release worker. Bool_t GetVmInfo(const char* vm, T",MatchSource.WIKI,root/html532/TCondor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondor.html
https://root.cern/root/html532/TCondor.html:6106,Integrability,interface,interface,6106,"ufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. TCondorSlave*ClaimVM(const char* vm, const char* cmd); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum EState { kFree; kSuspended; kActive; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TList*fClaimslist of claims we manage; TStringfPoolthe condor pool to be accessed; TCondor::EStatefStateour claim state; Bool_tfValidaccess to Condor. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCondor(const char* pool = """"); Create Condor interface object. Uses Condor apps since there is no; API yet. ~TCondor(); Cleanup Condor interface. void Print(Option_t* option = """") const; Print master status. TCondorSlave * ClaimVM(const char* vm, const char* cmd); Claim a VirtualMachine for PROOF usage. TList * GetVirtualMachines() const; Get the names of the virtual machines in the pool.; Return a TList of TObjString or 0 in case of failure. TList * Claim(Int_t n, const char* cmd); Claim n virtual machines; This function figures out the image and performance index before returning; the list of condor slaves. TCondorSlave * Claim(const char* vmname, const char* cmd); Claim virtual machine with name vmname; This function does not figure out the image and performance index before; returning the condor slave. Bool_t SetState(TCondor::EState state); Set the state of workers. Bool_t Suspend(); Suspend worker. Bool_t Resume(); Resume worker. Bool_t Release(); Release worker. Bool_t GetVmInfo(const char* vm, TString& image, Int_t& perfidx) const; Get info about worker status. TString GetImage(const char* host) const",MatchSource.WIKI,root/html532/TCondor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondor.html
https://root.cern/root/html532/TCondor.html:2738,Modifiability,Inherit,InheritsFrom,2738,"px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TStringGetImage(const char* host) const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TCondor::EStateGetState() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; TList*GetVirtualMachines() const; Bool_tGetVmInfo(const char* vm, TString& image, Int_t& perfidx) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tIsValid() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new",MatchSource.WIKI,root/html532/TCondor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondor.html
https://root.cern/root/html532/TCondor.html:2804,Modifiability,Inherit,InheritsFrom,2804,"t char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TStringGetImage(const char* host) const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TCondor::EStateGetState() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; TList*GetVirtualMachines() const; Bool_tGetVmInfo(const char* vm, TString& image, Int_t& perfidx) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tIsValid() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); ",MatchSource.WIKI,root/html532/TCondor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondor.html
https://root.cern/root/html532/TCondor.html:5893,Modifiability,Inherit,Inheritance,5893,"TObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. TCondorSlave*ClaimVM(const char* vm, const char* cmd); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum EState { kFree; kSuspended; kActive; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TList*fClaimslist of claims we manage; TStringfPoolthe condor pool to be accessed; TCondor::EStatefStateour claim state; Bool_tfValidaccess to Condor. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCondor(const char* pool = """"); Create Condor interface object. Uses Condor apps since there is no; API yet. ~TCondor(); Cleanup Condor interface. void Print(Option_t* option = """") const; Print master status. TCondorSlave * ClaimVM(const char* vm, const char* cmd); Claim a VirtualMachine for PROOF usage. TList * GetVirtualMachines() const; Get the names of the virtual machines in the pool.; Return a TList of TObjString or 0 in case of failure. TList * Claim(Int_t n, const char* cmd); Claim n virtual machines; This function figures out the image and performance index before returning; the list of condor slaves. TCondorSlave * Claim(const char* vmname, const char* cmd); Claim virtual machine with name vmname; This function does not figure out the image and performance index before; returning the condor slave. Bool_t SetState(TCondor::EState state); Set the state of workers. Bool_t Suspend(); Suspend worker. Bool_t Resume(); Resume worker",MatchSource.WIKI,root/html532/TCondor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondor.html
https://root.cern/root/html532/TCondor.html:5906,Modifiability,Inherit,Inherited,5906,"TObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. TCondorSlave*ClaimVM(const char* vm, const char* cmd); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum EState { kFree; kSuspended; kActive; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TList*fClaimslist of claims we manage; TStringfPoolthe condor pool to be accessed; TCondor::EStatefStateour claim state; Bool_tfValidaccess to Condor. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCondor(const char* pool = """"); Create Condor interface object. Uses Condor apps since there is no; API yet. ~TCondor(); Cleanup Condor interface. void Print(Option_t* option = """") const; Print master status. TCondorSlave * ClaimVM(const char* vm, const char* cmd); Claim a VirtualMachine for PROOF usage. TList * GetVirtualMachines() const; Get the names of the virtual machines in the pool.; Return a TList of TObjString or 0 in case of failure. TList * Claim(Int_t n, const char* cmd); Claim n virtual machines; This function figures out the image and performance index before returning; the list of condor slaves. TCondorSlave * Claim(const char* vmname, const char* cmd); Claim virtual machine with name vmname; This function does not figure out the image and performance index before; returning the condor slave. Bool_t SetState(TCondor::EState state); Set the state of workers. Bool_t Suspend(); Suspend worker. Bool_t Resume(); Resume worker",MatchSource.WIKI,root/html532/TCondor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondor.html
https://root.cern/root/html532/TCondor.html:6525,Performance,perform,performance,6525,"e; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TList*fClaimslist of claims we manage; TStringfPoolthe condor pool to be accessed; TCondor::EStatefStateour claim state; Bool_tfValidaccess to Condor. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCondor(const char* pool = """"); Create Condor interface object. Uses Condor apps since there is no; API yet. ~TCondor(); Cleanup Condor interface. void Print(Option_t* option = """") const; Print master status. TCondorSlave * ClaimVM(const char* vm, const char* cmd); Claim a VirtualMachine for PROOF usage. TList * GetVirtualMachines() const; Get the names of the virtual machines in the pool.; Return a TList of TObjString or 0 in case of failure. TList * Claim(Int_t n, const char* cmd); Claim n virtual machines; This function figures out the image and performance index before returning; the list of condor slaves. TCondorSlave * Claim(const char* vmname, const char* cmd); Claim virtual machine with name vmname; This function does not figure out the image and performance index before; returning the condor slave. Bool_t SetState(TCondor::EState state); Set the state of workers. Bool_t Suspend(); Suspend worker. Bool_t Resume(); Resume worker. Bool_t Release(); Release worker. Bool_t GetVmInfo(const char* vm, TString& image, Int_t& perfidx) const; Get info about worker status. TString GetImage(const char* host) const; Get image of the worker. TCondor(const char* pool = """"). Bool_t IsValid() const; { return fValid; }. EState GetState() const; {return fState;}. » Author: Maarten Ballintijn 06/12/03 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id: TCondor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:11; This page has been automatically generated. For c",MatchSource.WIKI,root/html532/TCondor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondor.html
https://root.cern/root/html532/TCondor.html:6735,Performance,perform,performance,6735,"num TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TList*fClaimslist of claims we manage; TStringfPoolthe condor pool to be accessed; TCondor::EStatefStateour claim state; Bool_tfValidaccess to Condor. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCondor(const char* pool = """"); Create Condor interface object. Uses Condor apps since there is no; API yet. ~TCondor(); Cleanup Condor interface. void Print(Option_t* option = """") const; Print master status. TCondorSlave * ClaimVM(const char* vm, const char* cmd); Claim a VirtualMachine for PROOF usage. TList * GetVirtualMachines() const; Get the names of the virtual machines in the pool.; Return a TList of TObjString or 0 in case of failure. TList * Claim(Int_t n, const char* cmd); Claim n virtual machines; This function figures out the image and performance index before returning; the list of condor slaves. TCondorSlave * Claim(const char* vmname, const char* cmd); Claim virtual machine with name vmname; This function does not figure out the image and performance index before; returning the condor slave. Bool_t SetState(TCondor::EState state); Set the state of workers. Bool_t Suspend(); Suspend worker. Bool_t Resume(); Resume worker. Bool_t Release(); Release worker. Bool_t GetVmInfo(const char* vm, TString& image, Int_t& perfidx) const; Get info about worker status. TString GetImage(const char* host) const; Get image of the worker. TCondor(const char* pool = """"). Bool_t IsValid() const; { return fValid; }. EState GetState() const; {return fState;}. » Author: Maarten Ballintijn 06/12/03 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id: TCondor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:11; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TCondor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondor.html
https://root.cern/root/html532/TCondor.html:2628,Security,Hash,Hash,2628,"ecute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TStringGetImage(const char* host) const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TCondor::EStateGetState() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; TList*GetVirtualMachines() const; Bool_tGetVmInfo(const char* vm, TString& image, Int_t& perfidx) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tIsValid() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); ",MatchSource.WIKI,root/html532/TCondor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondor.html
https://root.cern/root/html532/TCondor.html:5801,Security,access,accessed,5801,"st char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. TCondorSlave*ClaimVM(const char* vm, const char* cmd); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum EState { kFree; kSuspended; kActive; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TList*fClaimslist of claims we manage; TStringfPoolthe condor pool to be accessed; TCondor::EStatefStateour claim state; Bool_tfValidaccess to Condor. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCondor(const char* pool = """"); Create Condor interface object. Uses Condor apps since there is no; API yet. ~TCondor(); Cleanup Condor interface. void Print(Option_t* option = """") const; Print master status. TCondorSlave * ClaimVM(const char* vm, const char* cmd); Claim a VirtualMachine for PROOF usage. TList * GetVirtualMachines() const; Get the names of the virtual machines in the pool.; Return a TList of TObjString or 0 in case of failure. TList * Claim(Int_t n, const char* cmd); Claim n virtual machines; This function figures out the image and performance index before returning; the list of condor slaves. TCondorSlave * Claim(const char* vmname, const char* cmd); Claim virtual machine with name vmname; This function does not figure out the image and performance index before; returning the condor slave. Bool_t SetStat",MatchSource.WIKI,root/html532/TCondor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondor.html
https://root.cern/root/html532/TCondor.html:4841,Testability,Test,TestBit,4841,"Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TCondor&operator=(const TCondor&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); Bool_tRelease(); voidTObject::ResetBit(UInt_t f); Bool_tResume(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); Bool_tSetState(TCondor::EState state); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); Bool_tSuspend(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TCondor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondor.html
https://root.cern/root/html532/TCondor.html:4880,Testability,Test,TestBits,4880,"Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TCondor&operator=(const TCondor&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); Bool_tRelease(); voidTObject::ResetBit(UInt_t f); Bool_tResume(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); Bool_tSetState(TCondor::EState state); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); Bool_tSuspend(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TCondor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondor.html
https://root.cern/root/html532/TCondor.html:926,Usability,Clear,Clear,926," TCondor(const char* pool = """"); TCondor(const TCondor&); virtual~TCondor(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); TList*Claim(Int_t n, const char* cmd); TCondorSlave*Claim(const char* vmname, const char* cmd); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() co",MatchSource.WIKI,root/html532/TCondor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondor.html
https://root.cern/root/html532/TCondor.html:6896,Usability,Resume,Resume,6896,"num TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TList*fClaimslist of claims we manage; TStringfPoolthe condor pool to be accessed; TCondor::EStatefStateour claim state; Bool_tfValidaccess to Condor. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCondor(const char* pool = """"); Create Condor interface object. Uses Condor apps since there is no; API yet. ~TCondor(); Cleanup Condor interface. void Print(Option_t* option = """") const; Print master status. TCondorSlave * ClaimVM(const char* vm, const char* cmd); Claim a VirtualMachine for PROOF usage. TList * GetVirtualMachines() const; Get the names of the virtual machines in the pool.; Return a TList of TObjString or 0 in case of failure. TList * Claim(Int_t n, const char* cmd); Claim n virtual machines; This function figures out the image and performance index before returning; the list of condor slaves. TCondorSlave * Claim(const char* vmname, const char* cmd); Claim virtual machine with name vmname; This function does not figure out the image and performance index before; returning the condor slave. Bool_t SetState(TCondor::EState state); Set the state of workers. Bool_t Suspend(); Suspend worker. Bool_t Resume(); Resume worker. Bool_t Release(); Release worker. Bool_t GetVmInfo(const char* vm, TString& image, Int_t& perfidx) const; Get info about worker status. TString GetImage(const char* host) const; Get image of the worker. TCondor(const char* pool = """"). Bool_t IsValid() const; { return fValid; }. EState GetState() const; {return fState;}. » Author: Maarten Ballintijn 06/12/03 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id: TCondor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:11; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TCondor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondor.html
https://root.cern/root/html532/TCondor.html:6906,Usability,Resume,Resume,6906,"num TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TList*fClaimslist of claims we manage; TStringfPoolthe condor pool to be accessed; TCondor::EStatefStateour claim state; Bool_tfValidaccess to Condor. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCondor(const char* pool = """"); Create Condor interface object. Uses Condor apps since there is no; API yet. ~TCondor(); Cleanup Condor interface. void Print(Option_t* option = """") const; Print master status. TCondorSlave * ClaimVM(const char* vm, const char* cmd); Claim a VirtualMachine for PROOF usage. TList * GetVirtualMachines() const; Get the names of the virtual machines in the pool.; Return a TList of TObjString or 0 in case of failure. TList * Claim(Int_t n, const char* cmd); Claim n virtual machines; This function figures out the image and performance index before returning; the list of condor slaves. TCondorSlave * Claim(const char* vmname, const char* cmd); Claim virtual machine with name vmname; This function does not figure out the image and performance index before; returning the condor slave. Bool_t SetState(TCondor::EState state); Set the state of workers. Bool_t Suspend(); Suspend worker. Bool_t Resume(); Resume worker. Bool_t Release(); Release worker. Bool_t GetVmInfo(const char* vm, TString& image, Int_t& perfidx) const; Get info about worker status. TString GetImage(const char* host) const; Get image of the worker. TCondor(const char* pool = """"). Bool_t IsValid() const; { return fValid; }. EState GetState() const; {return fState;}. » Author: Maarten Ballintijn 06/12/03 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id: TCondor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:11; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TCondor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondor.html
https://root.cern/root/html532/TCondorSlave.html:1377,Availability,Error,Error,1377," TCondorSlave(); TCondorSlave(const TCondorSlave&); ~TCondorSlave(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const",MatchSource.WIKI,root/html532/TCondorSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondorSlave.html
https://root.cern/root/html532/TCondorSlave.html:1506,Availability,error,error,1506," TCondorSlave(); TCondorSlave(const TCondorSlave&); ~TCondorSlave(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const",MatchSource.WIKI,root/html532/TCondorSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondorSlave.html
https://root.cern/root/html532/TCondorSlave.html:1590,Availability,error,error,1590," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject",MatchSource.WIKI,root/html532/TCondorSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondorSlave.html
https://root.cern/root/html532/TCondorSlave.html:308,Integrability,Interface,Interface,308,". TCondorSlave. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TCondorSlave. class TCondorSlave: public TObject. TCondor. Interface to the Condor system. TCondor provides a (partial) API for; querying and controlling the Condor system, including experimental; extensions like COD (computing on demand). Function Members (Methods); public:. TCondorSlave(); TCondorSlave(const TCondorSlave&); ~TCondorSlave(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const",MatchSource.WIKI,root/html532/TCondorSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondorSlave.html
https://root.cern/root/html532/TCondorSlave.html:2470,Modifiability,Inherit,InheritsFrom,2470,"d, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TOb",MatchSource.WIKI,root/html532/TCondorSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondorSlave.html
https://root.cern/root/html532/TCondorSlave.html:2536,Modifiability,Inherit,InheritsFrom,2536,"cute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TCondorSlave&operator=(",MatchSource.WIKI,root/html532/TCondorSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondorSlave.html
https://root.cern/root/html532/TCondorSlave.html:5381,Modifiability,Inherit,Inheritance,5381,"t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. TStringfClaimID; TStringfHostname; TStringfImage; TStringfOrdinal; Int_tfPerfIdx; Int_tfPort; TStringfWorkDir. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Print(Option_t* option = """") const; Print worker status. » Author: Maarten Ballintijn 06/12/03 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id: TCondor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:11; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TCondorSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondorSlave.html
https://root.cern/root/html532/TCondorSlave.html:5394,Modifiability,Inherit,Inherited,5394,"t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. TStringfClaimID; TStringfHostname; TStringfImage; TStringfOrdinal; Int_tfPerfIdx; Int_tfPort; TStringfWorkDir. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Print(Option_t* option = """") const; Print worker status. » Author: Maarten Ballintijn 06/12/03 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id: TCondor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:11; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TCondorSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondorSlave.html
https://root.cern/root/html532/TCondorSlave.html:2360,Security,Hash,Hash,2360,"l voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator ",MatchSource.WIKI,root/html532/TCondorSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondorSlave.html
https://root.cern/root/html532/TCondorSlave.html:4471,Testability,Test,TestBit,4471,"::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TCondorSlave&operator=(const TCondorSlave&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TCondorSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondorSlave.html
https://root.cern/root/html532/TCondorSlave.html:4510,Testability,Test,TestBits,4510,"::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TCondorSlave&operator=(const TCondorSlave&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TCondorSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondorSlave.html
https://root.cern/root/html532/TCondorSlave.html:837,Usability,Clear,Clear,837," TCondorSlave(); TCondorSlave(const TCondorSlave&); ~TCondorSlave(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const",MatchSource.WIKI,root/html532/TCondorSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCondorSlave.html
https://root.cern/root/html532/TCONE.html:1789,Availability,Error,Error,1789," char* material, Float_t dz, Float_t rmin1, Float_t rmax1, Float_t rmin2, Float_t rmax2); virtual~TCONE(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTTUBE::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Float_tTTUBE::GetAspectRatio() const; virtual const TBuffer3D&TTUBE::GetBuffer3D(Int_t reqSections) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Float_tTTUBE::GetDz() const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle",MatchSource.WIKI,root/html532/TCONE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCONE.html
https://root.cern/root/html532/TCONE.html:1918,Availability,error,error,1918,"ethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTTUBE::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Float_tTTUBE::GetAspectRatio() const; virtual const TBuffer3D&TTUBE::GetBuffer3D(Int_t reqSections) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Float_tTTUBE::GetDz() const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; TMaterial*TShape::GetMaterial() const; virtual const char*TNamed::GetNam",MatchSource.WIKI,root/html532/TCONE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCONE.html
https://root.cern/root/html532/TCONE.html:2002,Availability,error,error,2002,"""); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTTUBE::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Float_tTTUBE::GetAspectRatio() const; virtual const TBuffer3D&TTUBE::GetBuffer3D(Int_t reqSections) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Float_tTTUBE::GetDz() const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; TMaterial*TShape::GetMaterial() const; virtual const char*TNamed::GetName() const; virtual Int_tTTUBE::GetNdiv() const; virtual Int_tTShape::GetNumber() con",MatchSource.WIKI,root/html532/TCONE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCONE.html
https://root.cern/root/html532/TCONE.html:3643,Modifiability,Inherit,InheritsFrom,3643,"() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; TMaterial*TShape::GetMaterial() const; virtual const char*TNamed::GetName() const; virtual Int_tTTUBE::GetNdiv() const; virtual Int_tTShape::GetNumber() const; virtual Int_tTTUBE::GetNumberOfDivisions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Float_tTTUBE::GetRmax() const; Float_tGetRmax2() const; virtual Float_tTTUBE::GetRmin() const; Float_tGetRmin2() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Int_tTShape::GetVisibility() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operato",MatchSource.WIKI,root/html532/TCONE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCONE.html
https://root.cern/root/html532/TCONE.html:3709,Modifiability,Inherit,InheritsFrom,3709," Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; TMaterial*TShape::GetMaterial() const; virtual const char*TNamed::GetName() const; virtual Int_tTTUBE::GetNdiv() const; virtual Int_tTShape::GetNumber() const; virtual Int_tTTUBE::GetNumberOfDivisions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Float_tTTUBE::GetRmax() const; Float_tGetRmax2() const; virtual Float_tTTUBE::GetRmin() const; Float_tGetRmin2() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Int_tTShape::GetVisibility() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz",MatchSource.WIKI,root/html532/TCONE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCONE.html
https://root.cern/root/html532/TCONE.html:8971,Modifiability,Inherit,Inheritance,8971,"otDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Float_tTTUBE::fAspectRatiodefines (the ellipse semi-axis in Y)/(the ellipse semi-axis in X); Double_t*TTUBE::fCoTab! Table of cos(fPhi1) .... cos(fPhil+fDphi1); Float_tTTUBE::fDzhalf length in z; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TMaterial*TShape::fMaterialPointer to material; TStringTNamed::fNameobject identifier; Int_tTTUBE::fNdivnumber of segments (precision); Int_tTShape::fNumberShape number; Float_tTTUBE::fRmaxellipse semi-axis in X outside; Float_tfRmax2outside radius at the high z limit; Float_tTTUBE::fRminellipse semi-axis in X inside; Float_tfRmin2inside radius at the high z limit; Double_t*TTUBE::fSiTab! Table of sin(fPhi1) .... sin(fPhil+fDphi1); TStringTNamed::fTitleobject title; Int_tTShape::fVisibilityVisibility flag. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCONE(); CONE shape default constructor. TCONE(const char* name, const char* title, const char* material, Float_t dz, Float_t rmin1, Float_t rmax1, Float_t rmin2, Float_t rmax2); CONE shape normal constructor. TCONE(const char* name, const char* title, const char* material, Float_t dz, Float_t rmax1, Float_t rmax2 = 0); CONE shape ""simplified"" constructor. ~TCONE(); CONE shape default destructor. void SetPoints(Double_t* points) const; Create CONE points. TCONE(). Float_t GetRmin2() const; {return fRmin2;}. Float_t GetRmax2() const; {return fRmax2;}. » Author: Nenad Buncic 18/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/g3d:$Id: TCONE.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TCONE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCONE.html
https://root.cern/root/html532/TCONE.html:8984,Modifiability,Inherit,Inherited,8984,"otDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Float_tTTUBE::fAspectRatiodefines (the ellipse semi-axis in Y)/(the ellipse semi-axis in X); Double_t*TTUBE::fCoTab! Table of cos(fPhi1) .... cos(fPhil+fDphi1); Float_tTTUBE::fDzhalf length in z; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TMaterial*TShape::fMaterialPointer to material; TStringTNamed::fNameobject identifier; Int_tTTUBE::fNdivnumber of segments (precision); Int_tTShape::fNumberShape number; Float_tTTUBE::fRmaxellipse semi-axis in X outside; Float_tfRmax2outside radius at the high z limit; Float_tTTUBE::fRminellipse semi-axis in X inside; Float_tfRmin2inside radius at the high z limit; Double_t*TTUBE::fSiTab! Table of sin(fPhi1) .... sin(fPhil+fDphi1); TStringTNamed::fTitleobject title; Int_tTShape::fVisibilityVisibility flag. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCONE(); CONE shape default constructor. TCONE(const char* name, const char* title, const char* material, Float_t dz, Float_t rmin1, Float_t rmax1, Float_t rmin2, Float_t rmax2); CONE shape normal constructor. TCONE(const char* name, const char* title, const char* material, Float_t dz, Float_t rmax1, Float_t rmax2 = 0); CONE shape ""simplified"" constructor. ~TCONE(); CONE shape default destructor. void SetPoints(Double_t* points) const; Create CONE points. TCONE(). Float_t GetRmin2() const; {return fRmin2;}. Float_t GetRmax2() const; {return fRmax2;}. » Author: Nenad Buncic 18/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/g3d:$Id: TCONE.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TCONE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCONE.html
https://root.cern/root/html532/TCONE.html:3533,Security,Hash,Hash,3533," Float_tTTUBE::GetDz() const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; TMaterial*TShape::GetMaterial() const; virtual const char*TNamed::GetName() const; virtual Int_tTTUBE::GetNdiv() const; virtual Int_tTShape::GetNumber() const; virtual Int_tTTUBE::GetNumberOfDivisions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Float_tTTUBE::GetRmax() const; Float_tGetRmax2() const; virtual Float_tTTUBE::GetRmin() const; Float_tGetRmin2() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Int_tTShape::GetVisibility() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static",MatchSource.WIKI,root/html532/TCONE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCONE.html
https://root.cern/root/html532/TCONE.html:6808,Testability,Test,TestBit,6808,"ENU ; virtual voidTAttFill::SaveFillAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1001); virtual voidTAttLine::SaveLineAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t widdef = 1); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTTUBE::SetAspectRatio(Float_t factor = 1); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTShape::SetName(const char* name); virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTTUBE::SetNumberOfDivisions(Int_t ndiv); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTShape::SetVisibility(Int_t vis)MENU ; virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidTTUBE::Sizeof3D() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTShape::TransformPoints(Double_t* points, UInt_t NbPnts) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TCONE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCONE.html
https://root.cern/root/html532/TCONE.html:6847,Testability,Test,TestBits,6847,"ENU ; virtual voidTAttFill::SaveFillAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1001); virtual voidTAttLine::SaveLineAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t widdef = 1); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTTUBE::SetAspectRatio(Float_t factor = 1); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTShape::SetName(const char* name); virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTTUBE::SetNumberOfDivisions(Int_t ndiv); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTShape::SetVisibility(Int_t vis)MENU ; virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidTTUBE::Sizeof3D() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTShape::TransformPoints(Double_t* points, UInt_t NbPnts) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TCONE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCONE.html
https://root.cern/root/html532/TCONE.html:1141,Usability,Clear,Clear,1141," TCONE(); TCONE(const TCONE&); TCONE(const char* name, const char* title, const char* material, Float_t dz, Float_t rmax1, Float_t rmax2 = 0); TCONE(const char* name, const char* title, const char* material, Float_t dz, Float_t rmin1, Float_t rmax1, Float_t rmin2, Float_t rmax2); virtual~TCONE(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTTUBE::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t*",MatchSource.WIKI,root/html532/TCONE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCONE.html
https://root.cern/root/html532/TCONE.html:9382,Usability,simpl,simplified,9382,"otDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Float_tTTUBE::fAspectRatiodefines (the ellipse semi-axis in Y)/(the ellipse semi-axis in X); Double_t*TTUBE::fCoTab! Table of cos(fPhi1) .... cos(fPhil+fDphi1); Float_tTTUBE::fDzhalf length in z; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TMaterial*TShape::fMaterialPointer to material; TStringTNamed::fNameobject identifier; Int_tTTUBE::fNdivnumber of segments (precision); Int_tTShape::fNumberShape number; Float_tTTUBE::fRmaxellipse semi-axis in X outside; Float_tfRmax2outside radius at the high z limit; Float_tTTUBE::fRminellipse semi-axis in X inside; Float_tfRmin2inside radius at the high z limit; Double_t*TTUBE::fSiTab! Table of sin(fPhi1) .... sin(fPhil+fDphi1); TStringTNamed::fTitleobject title; Int_tTShape::fVisibilityVisibility flag. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCONE(); CONE shape default constructor. TCONE(const char* name, const char* title, const char* material, Float_t dz, Float_t rmin1, Float_t rmax1, Float_t rmin2, Float_t rmax2); CONE shape normal constructor. TCONE(const char* name, const char* title, const char* material, Float_t dz, Float_t rmax1, Float_t rmax2 = 0); CONE shape ""simplified"" constructor. ~TCONE(); CONE shape default destructor. void SetPoints(Double_t* points) const; Create CONE points. TCONE(). Float_t GetRmin2() const; {return fRmin2;}. Float_t GetRmax2() const; {return fRmax2;}. » Author: Nenad Buncic 18/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/g3d:$Id: TCONE.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TCONE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCONE.html
https://root.cern/root/html532/TConfidenceLevel.html:1439,Availability,Error,Error,1439,"nfidenceLevel&); TConfidenceLevel(Int_t mc, bool onesided = kTRUE); virtual~TConfidenceLevel(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; Double_tCLb(bool use_sMC = kFALSE) const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; Double_tCLs(bool use_sMC = kFALSE) const; Double_tCLsb(bool use_sMC = kFALSE) const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tGet3sProbability() const; Double_tGet5sProbability() const; Double_tGetAverageCLs() const; Double_tGetAverageCLsb() const; Double_tGetBtot() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tGetDtot() const; Double_tGetExpectedCLb_b(Int_t sigma = 0) const; Double_tGetExpectedCLb_sb(Int_t sigma = 0) const; Double_tGetExpectedCLs_b(Int_t sigma = 0) const; Double_tGetExpectedCLsb_b(Int_t sigma = 0) const; Double_tGetExpectedStatistic_b(Int_t sigma = 0) co",MatchSource.WIKI,root/html532/TConfidenceLevel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TConfidenceLevel.html
https://root.cern/root/html532/TConfidenceLevel.html:1568,Availability,error,error,1568," char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; Double_tCLb(bool use_sMC = kFALSE) const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; Double_tCLs(bool use_sMC = kFALSE) const; Double_tCLsb(bool use_sMC = kFALSE) const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tGet3sProbability() const; Double_tGet5sProbability() const; Double_tGetAverageCLs() const; Double_tGetAverageCLsb() const; Double_tGetBtot() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tGetDtot() const; Double_tGetExpectedCLb_b(Int_t sigma = 0) const; Double_tGetExpectedCLb_sb(Int_t sigma = 0) const; Double_tGetExpectedCLs_b(Int_t sigma = 0) const; Double_tGetExpectedCLsb_b(Int_t sigma = 0) const; Double_tGetExpectedStatistic_b(Int_t sigma = 0) const; Double_tGetExpectedStatistic_sb(Int_t sigma = 0) const; virtual const char*TObject::GetIconName() const; virtual const char*",MatchSource.WIKI,root/html532/TConfidenceLevel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TConfidenceLevel.html
https://root.cern/root/html532/TConfidenceLevel.html:1652,Availability,error,error,1652," voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; Double_tCLb(bool use_sMC = kFALSE) const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; Double_tCLs(bool use_sMC = kFALSE) const; Double_tCLsb(bool use_sMC = kFALSE) const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tGet3sProbability() const; Double_tGet5sProbability() const; Double_tGetAverageCLs() const; Double_tGetAverageCLsb() const; Double_tGetBtot() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tGetDtot() const; Double_tGetExpectedCLb_b(Int_t sigma = 0) const; Double_tGetExpectedCLb_sb(Int_t sigma = 0) const; Double_tGetExpectedCLs_b(Int_t sigma = 0) const; Double_tGetExpectedCLsb_b(Int_t sigma = 0) const; Double_tGetExpectedStatistic_b(Int_t sigma = 0) const; Double_tGetExpectedStatistic_sb(Int_t sigma = 0) const; virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) co",MatchSource.WIKI,root/html532/TConfidenceLevel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TConfidenceLevel.html
https://root.cern/root/html532/TConfidenceLevel.html:3074,Modifiability,Inherit,InheritsFrom,3074,"onst; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tGetDtot() const; Double_tGetExpectedCLb_b(Int_t sigma = 0) const; Double_tGetExpectedCLb_sb(Int_t sigma = 0) const; Double_tGetExpectedCLs_b(Int_t sigma = 0) const; Double_tGetExpectedCLsb_b(Int_t sigma = 0) const; Double_tGetExpectedStatistic_b(Int_t sigma = 0) const; Double_tGetExpectedStatistic_sb(Int_t sigma = 0) const; virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_tGetStatistic() const; Double_tGetStot() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TOb",MatchSource.WIKI,root/html532/TConfidenceLevel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TConfidenceLevel.html
https://root.cern/root/html532/TConfidenceLevel.html:3140,Modifiability,Inherit,InheritsFrom,3140,"_tTObject::GetDtorOnly(); Int_tGetDtot() const; Double_tGetExpectedCLb_b(Int_t sigma = 0) const; Double_tGetExpectedCLb_sb(Int_t sigma = 0) const; Double_tGetExpectedCLs_b(Int_t sigma = 0) const; Double_tGetExpectedCLsb_b(Int_t sigma = 0) const; Double_tGetExpectedStatistic_b(Int_t sigma = 0) const; Double_tGetExpectedStatistic_sb(Int_t sigma = 0) const; virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_tGetStatistic() const; Double_tGetStot() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TConfidenceLevel&operat",MatchSource.WIKI,root/html532/TConfidenceLevel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TConfidenceLevel.html
https://root.cern/root/html532/TConfidenceLevel.html:6619,Modifiability,Inherit,Inheritance,6619,"ze = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. Double_tfBtot; Int_tfDtot; Int_t*fISB[fNNMC]; Int_t*fISS[fNNMC]; Double_t*fLRB[fNNMC]; Double_t*fLRS[fNNMC]; Double_tfMCL3S; Double_tfMCL5S; Double_tfNMC; Int_tfNNMC; Double_tfStot; Double_t*fTSB[fNNMC]; Double_tfTSD; Double_t*fTSS[fNNMC]; static const Double_tfgMCL3S1S; static const Double_tfgMCL3S2S; static const Double_tfgMCL5S1S; static const Double_tfgMCL5S2S; static const Double_tfgMCLM1S; static const Double_tfgMCLM2S; static const Double_tfgMCLMED; static const Double_tfgMCLP1S; static const Double_tfgMCLP2S. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TConfidenceLevel(); Default constructor. TConfidenceLevel(Int_t mc, bool onesided = kTRUE); a constructor that fix some conventions:; mc is the number of Monte Carlo experiments; while onesided specifies if the intervals are one-sided or not. ~TConfidenceLevel(); The destructor. Double_t GetExpectedStatistic_b(Int_t sigma = 0) const; Get the expected statistic value in the background only hypothesis. Double_t GetExpectedStatistic_sb(Int_t sigma = 0) const; Get the expected statistic value in the signal plus background hypothesis. Double_t CLb(bool use_sMC = kFALSE) const; Get the Confidence Level for the background only. Double_t CLsb(bool use_sMC = kFALSE) const; Get the Confidence Level for the signal plus background hypothesis. Double_t CLs(bool use_sMC = kFALSE) const; Get the Confidence Level defined by CLs = CLsb/CLb.; This quantity is stable w.r.t. background fluctuations. Double_t GetExpectedCLsb_b(Int_t sigma = 0) const; Get t",MatchSource.WIKI,root/html532/TConfidenceLevel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TConfidenceLevel.html
https://root.cern/root/html532/TConfidenceLevel.html:6632,Modifiability,Inherit,Inherited,6632,"ze = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. Double_tfBtot; Int_tfDtot; Int_t*fISB[fNNMC]; Int_t*fISS[fNNMC]; Double_t*fLRB[fNNMC]; Double_t*fLRS[fNNMC]; Double_tfMCL3S; Double_tfMCL5S; Double_tfNMC; Int_tfNNMC; Double_tfStot; Double_t*fTSB[fNNMC]; Double_tfTSD; Double_t*fTSS[fNNMC]; static const Double_tfgMCL3S1S; static const Double_tfgMCL3S2S; static const Double_tfgMCL5S1S; static const Double_tfgMCL5S2S; static const Double_tfgMCLM1S; static const Double_tfgMCLM2S; static const Double_tfgMCLMED; static const Double_tfgMCLP1S; static const Double_tfgMCLP2S. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TConfidenceLevel(); Default constructor. TConfidenceLevel(Int_t mc, bool onesided = kTRUE); a constructor that fix some conventions:; mc is the number of Monte Carlo experiments; while onesided specifies if the intervals are one-sided or not. ~TConfidenceLevel(); The destructor. Double_t GetExpectedStatistic_b(Int_t sigma = 0) const; Get the expected statistic value in the background only hypothesis. Double_t GetExpectedStatistic_sb(Int_t sigma = 0) const; Get the expected statistic value in the signal plus background hypothesis. Double_t CLb(bool use_sMC = kFALSE) const; Get the Confidence Level for the background only. Double_t CLsb(bool use_sMC = kFALSE) const; Get the Confidence Level for the signal plus background hypothesis. Double_t CLs(bool use_sMC = kFALSE) const; Get the Confidence Level defined by CLs = CLsb/CLb.; This quantity is stable w.r.t. background fluctuations. Double_t GetExpectedCLsb_b(Int_t sigma = 0) const; Get t",MatchSource.WIKI,root/html532/TConfidenceLevel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TConfidenceLevel.html
https://root.cern/root/html532/TConfidenceLevel.html:2964,Security,Hash,Hash,2964,"uble_tGet5sProbability() const; Double_tGetAverageCLs() const; Double_tGetAverageCLsb() const; Double_tGetBtot() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tGetDtot() const; Double_tGetExpectedCLb_b(Int_t sigma = 0) const; Double_tGetExpectedCLb_sb(Int_t sigma = 0) const; Double_tGetExpectedCLs_b(Int_t sigma = 0) const; Double_tGetExpectedCLsb_b(Int_t sigma = 0) const; Double_tGetExpectedStatistic_b(Int_t sigma = 0) const; Double_tGetExpectedStatistic_sb(Int_t sigma = 0) const; virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_tGetStatistic() const; Double_tGetStot() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator ",MatchSource.WIKI,root/html532/TConfidenceLevel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TConfidenceLevel.html
https://root.cern/root/html532/TConfidenceLevel.html:5296,Testability,Test,TestBit,5296,"har* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TConfidenceLevel&operator=(const TConfidenceLevel&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetBtot(Double_t in); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetDtot(Int_t in); voidSetLRB(Double_t* in); voidSetLRS(Double_t* in); static voidTObject::SetObjectStat(Bool_t stat); voidSetStot(Double_t in); voidSetTSB(Double_t* in); voidSetTSD(Double_t in); voidSetTSS(Double_t* in); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TConfidenceLevel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TConfidenceLevel.html
https://root.cern/root/html532/TConfidenceLevel.html:5335,Testability,Test,TestBits,5335,"har* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TConfidenceLevel&operator=(const TConfidenceLevel&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetBtot(Double_t in); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetDtot(Int_t in); voidSetLRB(Double_t* in); voidSetLRS(Double_t* in); static voidTObject::SetObjectStat(Bool_t stat); voidSetStot(Double_t in); voidSetTSB(Double_t* in); voidSetTSD(Double_t in); voidSetTSS(Double_t* in); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TConfidenceLevel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TConfidenceLevel.html
https://root.cern/root/html532/TConfidenceLevel.html:823,Usability,Clear,Clear,823," TConfidenceLevel(); TConfidenceLevel(const TConfidenceLevel&); TConfidenceLevel(Int_t mc, bool onesided = kTRUE); virtual~TConfidenceLevel(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; Double_tCLb(bool use_sMC = kFALSE) const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; Double_tCLs(bool use_sMC = kFALSE) const; Double_tCLsb(bool use_sMC = kFALSE) const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tGet3sProbability() const; Double_tGet5sProbability() const; Dou",MatchSource.WIKI,root/html532/TConfidenceLevel.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TConfidenceLevel.html
https://root.cern/root/html532/TCONS.html:2036,Availability,Error,Error,2036," Float_t rmin1, Float_t rmax1, Float_t rmin2, Float_t rmax2, Float_t phi1, Float_t phi2); virtual~TCONS(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTTUBS::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Float_tTTUBE::GetAspectRatio() const; virtual const TBuffer3D&TTUBS::GetBuffer3D(Int_t reqSections) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Float_tTTUBE::GetDz() const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle",MatchSource.WIKI,root/html532/TCONS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCONS.html
https://root.cern/root/html532/TCONS.html:2165,Availability,error,error,2165,"ethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTTUBS::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Float_tTTUBE::GetAspectRatio() const; virtual const TBuffer3D&TTUBS::GetBuffer3D(Int_t reqSections) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Float_tTTUBE::GetDz() const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; TMaterial*TShape::GetMaterial() const; virtual const char*TNamed::GetNam",MatchSource.WIKI,root/html532/TCONS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCONS.html
https://root.cern/root/html532/TCONS.html:2249,Availability,error,error,2249,"""); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTTUBS::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Float_tTTUBE::GetAspectRatio() const; virtual const TBuffer3D&TTUBS::GetBuffer3D(Int_t reqSections) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Float_tTTUBE::GetDz() const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; TMaterial*TShape::GetMaterial() const; virtual const char*TNamed::GetName() const; virtual Int_tTTUBE::GetNdiv() const; virtual Int_tTShape::GetNumber() con",MatchSource.WIKI,root/html532/TCONS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCONS.html
https://root.cern/root/html532/TCONS.html:3984,Modifiability,Inherit,InheritsFrom,3984,"or() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; TMaterial*TShape::GetMaterial() const; virtual const char*TNamed::GetName() const; virtual Int_tTTUBE::GetNdiv() const; virtual Int_tTShape::GetNumber() const; virtual Int_tTTUBE::GetNumberOfDivisions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Float_tTTUBS::GetPhi1() const; virtual Float_tTTUBS::GetPhi2() const; virtual Float_tTTUBE::GetRmax() const; virtual Float_tGetRmax2() const; virtual Float_tTTUBE::GetRmin() const; virtual Float_tGetRmin2() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Int_tTShape::GetVisibility() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operato",MatchSource.WIKI,root/html532/TCONS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCONS.html
https://root.cern/root/html532/TCONS.html:4050,Modifiability,Inherit,InheritsFrom,4050," Width_tTAttLine::GetLineWidth() const; TMaterial*TShape::GetMaterial() const; virtual const char*TNamed::GetName() const; virtual Int_tTTUBE::GetNdiv() const; virtual Int_tTShape::GetNumber() const; virtual Int_tTTUBE::GetNumberOfDivisions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Float_tTTUBS::GetPhi1() const; virtual Float_tTTUBS::GetPhi2() const; virtual Float_tTTUBE::GetRmax() const; virtual Float_tGetRmax2() const; virtual Float_tTTUBE::GetRmin() const; virtual Float_tGetRmin2() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Int_tTShape::GetVisibility() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz",MatchSource.WIKI,root/html532/TCONS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCONS.html
https://root.cern/root/html532/TCONS.html:9385,Modifiability,Inherit,Inheritance,9385,"odefines (the ellipse semi-axis in Y)/(the ellipse semi-axis in X); Double_t*TTUBE::fCoTab! Table of cos(fPhi1) .... cos(fPhil+fDphi1); Float_tTTUBE::fDzhalf length in z; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TMaterial*TShape::fMaterialPointer to material; TStringTNamed::fNameobject identifier; Int_tTTUBE::fNdivnumber of segments (precision); Int_tTShape::fNumberShape number; Float_tTTUBS::fPhi1first phi limit; Float_tTTUBS::fPhi2second phi limit; Float_tTTUBE::fRmaxellipse semi-axis in X outside; Float_tfRmax2outside radius at the high z limit; Float_tTTUBE::fRminellipse semi-axis in X inside; Float_tfRmin2inside radius at the high z limit; Double_t*TTUBE::fSiTab! Table of sin(fPhi1) .... sin(fPhil+fDphi1); TStringTNamed::fTitleobject title; Int_tTShape::fVisibilityVisibility flag. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCONS(); CONS shape default constructor. TCONS(const char* name, const char* title, const char* material, Float_t dz, Float_t rmin1, Float_t rmax1, Float_t rmin2, Float_t rmax2, Float_t phi1, Float_t phi2); CONS shape normal constructor. TCONS(const char* name, const char* title, const char* material, Float_t rmax1, Float_t dz, Float_t phi1, Float_t phi2, Float_t rmax2 = 0); CONS shape normal constructor. ~TCONS(); CONS shape default destructor. void SetPoints(Double_t* points) const; Create CONS points. TCONS(). Float_t GetRmin2() const; {return fRmin2;}. Float_t GetRmax2() const; {return fRmax2;}. » Author: Nenad Buncic 18/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/g3d:$Id: TCONS.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to R",MatchSource.WIKI,root/html532/TCONS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCONS.html
https://root.cern/root/html532/TCONS.html:9398,Modifiability,Inherit,Inherited,9398,"odefines (the ellipse semi-axis in Y)/(the ellipse semi-axis in X); Double_t*TTUBE::fCoTab! Table of cos(fPhi1) .... cos(fPhil+fDphi1); Float_tTTUBE::fDzhalf length in z; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TMaterial*TShape::fMaterialPointer to material; TStringTNamed::fNameobject identifier; Int_tTTUBE::fNdivnumber of segments (precision); Int_tTShape::fNumberShape number; Float_tTTUBS::fPhi1first phi limit; Float_tTTUBS::fPhi2second phi limit; Float_tTTUBE::fRmaxellipse semi-axis in X outside; Float_tfRmax2outside radius at the high z limit; Float_tTTUBE::fRminellipse semi-axis in X inside; Float_tfRmin2inside radius at the high z limit; Double_t*TTUBE::fSiTab! Table of sin(fPhi1) .... sin(fPhil+fDphi1); TStringTNamed::fTitleobject title; Int_tTShape::fVisibilityVisibility flag. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCONS(); CONS shape default constructor. TCONS(const char* name, const char* title, const char* material, Float_t dz, Float_t rmin1, Float_t rmax1, Float_t rmin2, Float_t rmax2, Float_t phi1, Float_t phi2); CONS shape normal constructor. TCONS(const char* name, const char* title, const char* material, Float_t rmax1, Float_t dz, Float_t phi1, Float_t phi2, Float_t rmax2 = 0); CONS shape normal constructor. ~TCONS(); CONS shape default destructor. void SetPoints(Double_t* points) const; Create CONS points. TCONS(). Float_t GetRmin2() const; {return fRmin2;}. Float_t GetRmax2() const; {return fRmax2;}. » Author: Nenad Buncic 18/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/g3d:$Id: TCONS.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to R",MatchSource.WIKI,root/html532/TCONS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCONS.html
https://root.cern/root/html532/TCONS.html:3874,Security,Hash,Hash,3874,"ttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; TMaterial*TShape::GetMaterial() const; virtual const char*TNamed::GetName() const; virtual Int_tTTUBE::GetNdiv() const; virtual Int_tTShape::GetNumber() const; virtual Int_tTTUBE::GetNumberOfDivisions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Float_tTTUBS::GetPhi1() const; virtual Float_tTTUBS::GetPhi2() const; virtual Float_tTTUBE::GetRmax() const; virtual Float_tGetRmax2() const; virtual Float_tTTUBE::GetRmin() const; virtual Float_tGetRmin2() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Int_tTShape::GetVisibility() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static",MatchSource.WIKI,root/html532/TCONS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCONS.html
https://root.cern/root/html532/TCONS.html:7149,Testability,Test,TestBit,7149,"ENU ; virtual voidTAttFill::SaveFillAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1001); virtual voidTAttLine::SaveLineAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t widdef = 1); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTTUBE::SetAspectRatio(Float_t factor = 1); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTShape::SetName(const char* name); virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTTUBE::SetNumberOfDivisions(Int_t ndiv); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTShape::SetVisibility(Int_t vis)MENU ; virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidTTUBS::Sizeof3D() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTShape::TransformPoints(Double_t* points, UInt_t NbPnts) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TCONS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCONS.html
https://root.cern/root/html532/TCONS.html:7188,Testability,Test,TestBits,7188,"ENU ; virtual voidTAttFill::SaveFillAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1001); virtual voidTAttLine::SaveLineAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t widdef = 1); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTTUBE::SetAspectRatio(Float_t factor = 1); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTShape::SetName(const char* name); virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTTUBE::SetNumberOfDivisions(Int_t ndiv); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTShape::SetVisibility(Int_t vis)MENU ; virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidTTUBS::Sizeof3D() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTShape::TransformPoints(Double_t* points, UInt_t NbPnts) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TCONS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCONS.html
https://root.cern/root/html532/TCONS.html:1388,Usability,Clear,Clear,1388," TCONS(); TCONS(const TCONS&); TCONS(const char* name, const char* title, const char* material, Float_t rmax1, Float_t dz, Float_t phi1, Float_t phi2, Float_t rmax2 = 0); TCONS(const char* name, const char* title, const char* material, Float_t dz, Float_t rmin1, Float_t rmax1, Float_t rmin2, Float_t rmax2, Float_t phi1, Float_t phi2); virtual~TCONS(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTTUBS::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump(",MatchSource.WIKI,root/html532/TCONS.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCONS.html
https://root.cern/root/html532/TContextMenu.html:478,Availability,down,downs,478,". TContextMenu. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TContextMenu. class TContextMenu: public TNamed. TContextMenu. This class provides an interface to context sensitive popup menus.; These menus pop up when the user hits the right mouse button, and; are destroyed when the menu pops downs. Context Menus are automatically generated by ROOT using the; following convention: if the string // *MENU* is found in the; comment field of a member function. This function will be added to; the list of items in the menu. The picture below shows a canvas with a pop-up menu. ; . The picture below shows a canvas with a pop-up menu and a dialog box. ; . Function Members (Methods); public:. TContextMenu(const char* name, const char* title = ""Context sensitive popup menu""); virtual~TContextMenu(); voidTObject::AbstractMethod(const char* method) const; virtual voidAction(TClassMenuItem* classmenuitem); voidAction(TMethod* method); voidAction(TToggle* toggle); virtual voidAction(TObject* object, TMethod* method); virtual voidAction(TObject* object, TToggle* toggle); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual const char*CreateArgumentTitle(TMethodArg* argument); virtual const char*CreateDialogTitle(TObject* object, TFunction* method); virtual const char*CreatePopupTitle(TObject* object); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); v",MatchSource.WIKI,root/html532/TContextMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TContextMenu.html
https://root.cern/root/html532/TContextMenu.html:2176,Availability,Error,Error,2176,"ect, TMethod* method); virtual voidAction(TObject* object, TToggle* toggle); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual const char*CreateArgumentTitle(TMethodArg* argument); virtual const char*CreateDialogTitle(TObject* object, TFunction* method); virtual const char*CreatePopupTitle(TObject* object); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; voidExecute(const char* params); voidExecute(TObjArray* params); virtual voidExecute(const char* method, const char* params, Int_t* error = 0); virtual voidExecute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecute(TObject* object, TFunction* method, const char* params); virtual voidExecute(TObject* object, TFunction* method, TObjArray* params); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TBrowser*GetBrowser(); virtual TObject*GetCalledObject(); virtual TContextMenuImp*GetContextMenuImp(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*",MatchSource.WIKI,root/html532/TContextMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TContextMenu.html
https://root.cern/root/html532/TContextMenu.html:2361,Availability,error,error,2361,"ss*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual const char*CreateArgumentTitle(TMethodArg* argument); virtual const char*CreateDialogTitle(TObject* object, TFunction* method); virtual const char*CreatePopupTitle(TObject* object); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; voidExecute(const char* params); voidExecute(TObjArray* params); virtual voidExecute(const char* method, const char* params, Int_t* error = 0); virtual voidExecute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecute(TObject* object, TFunction* method, const char* params); virtual voidExecute(TObject* object, TFunction* method, TObjArray* params); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TBrowser*GetBrowser(); virtual TObject*GetCalledObject(); virtual TContextMenuImp*GetContextMenuImp(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TVirt",MatchSource.WIKI,root/html532/TContextMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TContextMenu.html
https://root.cern/root/html532/TContextMenu.html:2436,Availability,error,error,2436,"ed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual const char*CreateArgumentTitle(TMethodArg* argument); virtual const char*CreateDialogTitle(TObject* object, TFunction* method); virtual const char*CreatePopupTitle(TObject* object); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; voidExecute(const char* params); voidExecute(TObjArray* params); virtual voidExecute(const char* method, const char* params, Int_t* error = 0); virtual voidExecute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecute(TObject* object, TFunction* method, const char* params); virtual voidExecute(TObject* object, TFunction* method, TObjArray* params); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TBrowser*GetBrowser(); virtual TObject*GetCalledObject(); virtual TContextMenuImp*GetContextMenuImp(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TVirtualPad*GetSelectedCanvas(); virtual TClassMenuItem*GetSelectedMenuItem(); v",MatchSource.WIKI,root/html532/TContextMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TContextMenu.html
https://root.cern/root/html532/TContextMenu.html:9888,Availability,error,error,9888,"rgument values. const char * CreatePopupTitle(TObject* object); Create title for popup menu. void Execute(TObject* object, TFunction* method, const char* params); Execute method with specified arguments for specified object. void Execute(TObject* object, TFunction* method, TObjArray* params); Execute method with specified arguments for specified object. void Popup(Int_t x, Int_t y, TObject* obj, TVirtualPad* c = 0, TVirtualPad* p = 0); Popup context menu at given location in canvas c and pad p for selected; object. void Popup(Int_t x, Int_t y, TObject* obj, TBrowser* b); Popup context menu at given location in browser b for selected object. TContextMenu(const TContextMenu& ). TContextMenu& operator=(const TContextMenu& ). void DisplayPopUp(Int_t x, Int_t y); { if (fContextMenuImp) fContextMenuImp->DisplayPopup(x, y); }. TContextMenu(). void Action(TObject* object, TMethod* method). void Action(TObject* object, TToggle* toggle). void Execute(const char* method, const char* params, Int_t* error = 0); { TObject::Execute(method, params, error); }. void Execute(TMethod* method, TObjArray* params, Int_t* error = 0); { TObject::Execute(method, params, error); }. void Execute(TObject* object, TFunction* method, const char* params). void Execute(TObject* object, TFunction* method, TObjArray* params). TBrowser * GetBrowser(); { return fBrowser; }. TContextMenuImp * GetContextMenuImp(); { return fContextMenuImp; }. TVirtualPad * GetSelectedCanvas(); { return fSelectedCanvas; }. TFunction * GetSelectedMethod(); { return fSelectedMethod; }. TObject * GetSelectedObject(); { return fSelectedObject; }. TObject * GetCalledObject(); { return fCalledObject; }. TClassMenuItem * GetSelectedMenuItem(); { return fSelectedMenuItem; }. TVirtualPad * GetSelectedPad(); { return fSelectedPad; }. void SetCanvas(TVirtualPad* c); { fSelectedCanvas = c; }. void SetBrowser(TBrowser* b); { fBrowser = b; }. void SetMethod(TFunction* m); { fSelectedMethod = m; }. void SetCalledObject(TObject* o); { fC",MatchSource.WIKI,root/html532/TContextMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TContextMenu.html
https://root.cern/root/html532/TContextMenu.html:9935,Availability,error,error,9935,"rgument values. const char * CreatePopupTitle(TObject* object); Create title for popup menu. void Execute(TObject* object, TFunction* method, const char* params); Execute method with specified arguments for specified object. void Execute(TObject* object, TFunction* method, TObjArray* params); Execute method with specified arguments for specified object. void Popup(Int_t x, Int_t y, TObject* obj, TVirtualPad* c = 0, TVirtualPad* p = 0); Popup context menu at given location in canvas c and pad p for selected; object. void Popup(Int_t x, Int_t y, TObject* obj, TBrowser* b); Popup context menu at given location in browser b for selected object. TContextMenu(const TContextMenu& ). TContextMenu& operator=(const TContextMenu& ). void DisplayPopUp(Int_t x, Int_t y); { if (fContextMenuImp) fContextMenuImp->DisplayPopup(x, y); }. TContextMenu(). void Action(TObject* object, TMethod* method). void Action(TObject* object, TToggle* toggle). void Execute(const char* method, const char* params, Int_t* error = 0); { TObject::Execute(method, params, error); }. void Execute(TMethod* method, TObjArray* params, Int_t* error = 0); { TObject::Execute(method, params, error); }. void Execute(TObject* object, TFunction* method, const char* params). void Execute(TObject* object, TFunction* method, TObjArray* params). TBrowser * GetBrowser(); { return fBrowser; }. TContextMenuImp * GetContextMenuImp(); { return fContextMenuImp; }. TVirtualPad * GetSelectedCanvas(); { return fSelectedCanvas; }. TFunction * GetSelectedMethod(); { return fSelectedMethod; }. TObject * GetSelectedObject(); { return fSelectedObject; }. TObject * GetCalledObject(); { return fCalledObject; }. TClassMenuItem * GetSelectedMenuItem(); { return fSelectedMenuItem; }. TVirtualPad * GetSelectedPad(); { return fSelectedPad; }. void SetCanvas(TVirtualPad* c); { fSelectedCanvas = c; }. void SetBrowser(TBrowser* b); { fBrowser = b; }. void SetMethod(TFunction* m); { fSelectedMethod = m; }. void SetCalledObject(TObject* o); { fC",MatchSource.WIKI,root/html532/TContextMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TContextMenu.html
https://root.cern/root/html532/TContextMenu.html:10002,Availability,error,error,10002,"bject, TFunction* method, const char* params); Execute method with specified arguments for specified object. void Execute(TObject* object, TFunction* method, TObjArray* params); Execute method with specified arguments for specified object. void Popup(Int_t x, Int_t y, TObject* obj, TVirtualPad* c = 0, TVirtualPad* p = 0); Popup context menu at given location in canvas c and pad p for selected; object. void Popup(Int_t x, Int_t y, TObject* obj, TBrowser* b); Popup context menu at given location in browser b for selected object. TContextMenu(const TContextMenu& ). TContextMenu& operator=(const TContextMenu& ). void DisplayPopUp(Int_t x, Int_t y); { if (fContextMenuImp) fContextMenuImp->DisplayPopup(x, y); }. TContextMenu(). void Action(TObject* object, TMethod* method). void Action(TObject* object, TToggle* toggle). void Execute(const char* method, const char* params, Int_t* error = 0); { TObject::Execute(method, params, error); }. void Execute(TMethod* method, TObjArray* params, Int_t* error = 0); { TObject::Execute(method, params, error); }. void Execute(TObject* object, TFunction* method, const char* params). void Execute(TObject* object, TFunction* method, TObjArray* params). TBrowser * GetBrowser(); { return fBrowser; }. TContextMenuImp * GetContextMenuImp(); { return fContextMenuImp; }. TVirtualPad * GetSelectedCanvas(); { return fSelectedCanvas; }. TFunction * GetSelectedMethod(); { return fSelectedMethod; }. TObject * GetSelectedObject(); { return fSelectedObject; }. TObject * GetCalledObject(); { return fCalledObject; }. TClassMenuItem * GetSelectedMenuItem(); { return fSelectedMenuItem; }. TVirtualPad * GetSelectedPad(); { return fSelectedPad; }. void SetCanvas(TVirtualPad* c); { fSelectedCanvas = c; }. void SetBrowser(TBrowser* b); { fBrowser = b; }. void SetMethod(TFunction* m); { fSelectedMethod = m; }. void SetCalledObject(TObject* o); { fCalledObject = o; }. void SetSelectedMenuItem(TClassMenuItem* mi); { fSelectedMenuItem = mi; }. void SetNameTitle(con",MatchSource.WIKI,root/html532/TContextMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TContextMenu.html
https://root.cern/root/html532/TContextMenu.html:10049,Availability,error,error,10049,"bject, TFunction* method, const char* params); Execute method with specified arguments for specified object. void Execute(TObject* object, TFunction* method, TObjArray* params); Execute method with specified arguments for specified object. void Popup(Int_t x, Int_t y, TObject* obj, TVirtualPad* c = 0, TVirtualPad* p = 0); Popup context menu at given location in canvas c and pad p for selected; object. void Popup(Int_t x, Int_t y, TObject* obj, TBrowser* b); Popup context menu at given location in browser b for selected object. TContextMenu(const TContextMenu& ). TContextMenu& operator=(const TContextMenu& ). void DisplayPopUp(Int_t x, Int_t y); { if (fContextMenuImp) fContextMenuImp->DisplayPopup(x, y); }. TContextMenu(). void Action(TObject* object, TMethod* method). void Action(TObject* object, TToggle* toggle). void Execute(const char* method, const char* params, Int_t* error = 0); { TObject::Execute(method, params, error); }. void Execute(TMethod* method, TObjArray* params, Int_t* error = 0); { TObject::Execute(method, params, error); }. void Execute(TObject* object, TFunction* method, const char* params). void Execute(TObject* object, TFunction* method, TObjArray* params). TBrowser * GetBrowser(); { return fBrowser; }. TContextMenuImp * GetContextMenuImp(); { return fContextMenuImp; }. TVirtualPad * GetSelectedCanvas(); { return fSelectedCanvas; }. TFunction * GetSelectedMethod(); { return fSelectedMethod; }. TObject * GetSelectedObject(); { return fSelectedObject; }. TObject * GetCalledObject(); { return fCalledObject; }. TClassMenuItem * GetSelectedMenuItem(); { return fSelectedMenuItem; }. TVirtualPad * GetSelectedPad(); { return fSelectedPad; }. void SetCanvas(TVirtualPad* c); { fSelectedCanvas = c; }. void SetBrowser(TBrowser* b); { fBrowser = b; }. void SetMethod(TFunction* m); { fSelectedMethod = m; }. void SetCalledObject(TObject* o); { fCalledObject = o; }. void SetSelectedMenuItem(TClassMenuItem* mi); { fSelectedMenuItem = mi; }. void SetNameTitle(con",MatchSource.WIKI,root/html532/TContextMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TContextMenu.html
https://root.cern/root/html532/TContextMenu.html:1139,Deployability,toggle,toggle,1139," TContextMenu(const char* name, const char* title = ""Context sensitive popup menu""); virtual~TContextMenu(); voidTObject::AbstractMethod(const char* method) const; virtual voidAction(TClassMenuItem* classmenuitem); voidAction(TMethod* method); voidAction(TToggle* toggle); virtual voidAction(TObject* object, TMethod* method); virtual voidAction(TObject* object, TToggle* toggle); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual const char*CreateArgumentTitle(TMethodArg* argument); virtual const char*CreateDialogTitle(TObject* object, TFunction* method); virtual const char*CreatePopupTitle(TObject* object); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); v",MatchSource.WIKI,root/html532/TContextMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TContextMenu.html
https://root.cern/root/html532/TContextMenu.html:1247,Deployability,toggle,toggle,1247," TContextMenu(const char* name, const char* title = ""Context sensitive popup menu""); virtual~TContextMenu(); voidTObject::AbstractMethod(const char* method) const; virtual voidAction(TClassMenuItem* classmenuitem); voidAction(TMethod* method); voidAction(TToggle* toggle); virtual voidAction(TObject* object, TMethod* method); virtual voidAction(TObject* object, TToggle* toggle); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual const char*CreateArgumentTitle(TMethodArg* argument); virtual const char*CreateDialogTitle(TObject* object, TFunction* method); virtual const char*CreatePopupTitle(TObject* object); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); v",MatchSource.WIKI,root/html532/TContextMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TContextMenu.html
https://root.cern/root/html532/TContextMenu.html:8591,Deployability,toggle,toggle,8591,"vas (if exist); TClassMenuItem*fSelectedMenuItemselected class menu item; TFunction*fSelectedMethodselected method; TObject*fSelectedObjectselected object; TVirtualPad*fSelectedPadselected pad (if exist); TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TContextMenu(const char* name, const char* title = ""Context sensitive popup menu""); Create a context menu. ~TContextMenu(); Destroy a context menu. void Action(TObject* object, TMethod* method); Action to be performed when this menu item is selected.; If the selected method requires arguments we popup an; automatically generated dialog, otherwise the method is; directly executed. void Action(TClassMenuItem* classmenuitem); Action to be performed when this menu item is selected.; If the selected method requires arguments we popup an; automatically generated dialog, otherwise the method is; directly executed. void Action(TObject* object, TToggle* toggle); Action to be performed when this toggle menu item is selected. const char * CreateArgumentTitle(TMethodArg* argument); Create string describing argument (for use in dialog box). const char * CreateDialogTitle(TObject* object, TFunction* method); Create title for dialog box retrieving argument values. const char * CreatePopupTitle(TObject* object); Create title for popup menu. void Execute(TObject* object, TFunction* method, const char* params); Execute method with specified arguments for specified object. void Execute(TObject* object, TFunction* method, TObjArray* params); Execute method with specified arguments for specified object. void Popup(Int_t x, Int_t y, TObject* obj, TVirtualPad* c = 0, TVirtualPad* p = 0); Popup context menu at given location in canvas c and pad p for selected; object. void Popup(Int_t x, Int_t y, TObject* obj, TBrowser* b); Popup context menu at given location in browser b for selected object. TContextMenu(const TContextMenu& ). TContextMenu& operator=(const TConte",MatchSource.WIKI,root/html532/TContextMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TContextMenu.html
https://root.cern/root/html532/TContextMenu.html:8633,Deployability,toggle,toggle,8633,"vas (if exist); TClassMenuItem*fSelectedMenuItemselected class menu item; TFunction*fSelectedMethodselected method; TObject*fSelectedObjectselected object; TVirtualPad*fSelectedPadselected pad (if exist); TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TContextMenu(const char* name, const char* title = ""Context sensitive popup menu""); Create a context menu. ~TContextMenu(); Destroy a context menu. void Action(TObject* object, TMethod* method); Action to be performed when this menu item is selected.; If the selected method requires arguments we popup an; automatically generated dialog, otherwise the method is; directly executed. void Action(TClassMenuItem* classmenuitem); Action to be performed when this menu item is selected.; If the selected method requires arguments we popup an; automatically generated dialog, otherwise the method is; directly executed. void Action(TObject* object, TToggle* toggle); Action to be performed when this toggle menu item is selected. const char * CreateArgumentTitle(TMethodArg* argument); Create string describing argument (for use in dialog box). const char * CreateDialogTitle(TObject* object, TFunction* method); Create title for dialog box retrieving argument values. const char * CreatePopupTitle(TObject* object); Create title for popup menu. void Execute(TObject* object, TFunction* method, const char* params); Execute method with specified arguments for specified object. void Execute(TObject* object, TFunction* method, TObjArray* params); Execute method with specified arguments for specified object. void Popup(Int_t x, Int_t y, TObject* obj, TVirtualPad* c = 0, TVirtualPad* p = 0); Popup context menu at given location in canvas c and pad p for selected; object. void Popup(Int_t x, Int_t y, TObject* obj, TBrowser* b); Popup context menu at given location in browser b for selected object. TContextMenu(const TContextMenu& ). TContextMenu& operator=(const TConte",MatchSource.WIKI,root/html532/TContextMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TContextMenu.html
https://root.cern/root/html532/TContextMenu.html:9819,Deployability,toggle,toggle,9819,"Title(TObject* object, TFunction* method); Create title for dialog box retrieving argument values. const char * CreatePopupTitle(TObject* object); Create title for popup menu. void Execute(TObject* object, TFunction* method, const char* params); Execute method with specified arguments for specified object. void Execute(TObject* object, TFunction* method, TObjArray* params); Execute method with specified arguments for specified object. void Popup(Int_t x, Int_t y, TObject* obj, TVirtualPad* c = 0, TVirtualPad* p = 0); Popup context menu at given location in canvas c and pad p for selected; object. void Popup(Int_t x, Int_t y, TObject* obj, TBrowser* b); Popup context menu at given location in browser b for selected object. TContextMenu(const TContextMenu& ). TContextMenu& operator=(const TContextMenu& ). void DisplayPopUp(Int_t x, Int_t y); { if (fContextMenuImp) fContextMenuImp->DisplayPopup(x, y); }. TContextMenu(). void Action(TObject* object, TMethod* method). void Action(TObject* object, TToggle* toggle). void Execute(const char* method, const char* params, Int_t* error = 0); { TObject::Execute(method, params, error); }. void Execute(TMethod* method, TObjArray* params, Int_t* error = 0); { TObject::Execute(method, params, error); }. void Execute(TObject* object, TFunction* method, const char* params). void Execute(TObject* object, TFunction* method, TObjArray* params). TBrowser * GetBrowser(); { return fBrowser; }. TContextMenuImp * GetContextMenuImp(); { return fContextMenuImp; }. TVirtualPad * GetSelectedCanvas(); { return fSelectedCanvas; }. TFunction * GetSelectedMethod(); { return fSelectedMethod; }. TObject * GetSelectedObject(); { return fSelectedObject; }. TObject * GetCalledObject(); { return fCalledObject; }. TClassMenuItem * GetSelectedMenuItem(); { return fSelectedMenuItem; }. TVirtualPad * GetSelectedPad(); { return fSelectedPad; }. void SetCanvas(TVirtualPad* c); { fSelectedCanvas = c; }. void SetBrowser(TBrowser* b); { fBrowser = b; }. void SetMeth",MatchSource.WIKI,root/html532/TContextMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TContextMenu.html
https://root.cern/root/html532/TContextMenu.html:333,Integrability,interface,interface,333,". TContextMenu. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TContextMenu. class TContextMenu: public TNamed. TContextMenu. This class provides an interface to context sensitive popup menus.; These menus pop up when the user hits the right mouse button, and; are destroyed when the menu pops downs. Context Menus are automatically generated by ROOT using the; following convention: if the string // *MENU* is found in the; comment field of a member function. This function will be added to; the list of items in the menu. The picture below shows a canvas with a pop-up menu. ; . The picture below shows a canvas with a pop-up menu and a dialog box. ; . Function Members (Methods); public:. TContextMenu(const char* name, const char* title = ""Context sensitive popup menu""); virtual~TContextMenu(); voidTObject::AbstractMethod(const char* method) const; virtual voidAction(TClassMenuItem* classmenuitem); voidAction(TMethod* method); voidAction(TToggle* toggle); virtual voidAction(TObject* object, TMethod* method); virtual voidAction(TObject* object, TToggle* toggle); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual const char*CreateArgumentTitle(TMethodArg* argument); virtual const char*CreateDialogTitle(TObject* object, TFunction* method); virtual const char*CreatePopupTitle(TObject* object); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); v",MatchSource.WIKI,root/html532/TContextMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TContextMenu.html
https://root.cern/root/html532/TContextMenu.html:3825,Modifiability,Inherit,InheritsFrom,3825," char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TBrowser*GetBrowser(); virtual TObject*GetCalledObject(); virtual TContextMenuImp*GetContextMenuImp(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TVirtualPad*GetSelectedCanvas(); virtual TClassMenuItem*GetSelectedMenuItem(); virtual TFunction*GetSelectedMethod(); virtual TObject*GetSelectedObject(); virtual TVirtualPad*GetSelectedPad(); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObje",MatchSource.WIKI,root/html532/TContextMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TContextMenu.html
https://root.cern/root/html532/TContextMenu.html:3891,Modifiability,Inherit,InheritsFrom,3891,"ect* obj) const; virtual TBrowser*GetBrowser(); virtual TObject*GetCalledObject(); virtual TContextMenuImp*GetContextMenuImp(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TVirtualPad*GetSelectedCanvas(); virtual TClassMenuItem*GetSelectedMenuItem(); virtual TFunction*GetSelectedMethod(); virtual TObject*GetSelectedObject(); virtual TVirtualPad*GetSelectedPad(); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Pain",MatchSource.WIKI,root/html532/TContextMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TContextMenu.html
https://root.cern/root/html532/TContextMenu.html:7861,Modifiability,Inherit,Inheritance,7861,"el, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TContextMenu(); TContextMenu(const TContextMenu&); TContextMenu&operator=(const TContextMenu&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TBrowser*fBrowserselected browser (if exist); TObject*fCalledObjectobject to call; TContextMenuImp*fContextMenuImp!Context menu system specific implementation; TStringTNamed::fNameobject identifier; TVirtualPad*fSelectedCanvasselected canvas (if exist); TClassMenuItem*fSelectedMenuItemselected class menu item; TFunction*fSelectedMethodselected method; TObject*fSelectedObjectselected object; TVirtualPad*fSelectedPadselected pad (if exist); TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TContextMenu(const char* name, const char* title = ""Context sensitive popup menu""); Create a context menu. ~TContextMenu(); Destroy a context menu. void Action(TObject* object, TMethod* method); Action to be performed when this menu item is selected.; If the selected method requires arguments we popup an; automatically generated dialog, otherwise the method is; directly executed. void Action(TClassMenuItem* classmenuitem); Action to be performed when this menu item is selected.; If the selected method requires arguments we popup an; automatically generated dialog, otherwise the method is; directly executed. void Action(TObject* object, TToggle* toggle); Action to be performed when this toggle menu item is selected. const char * CreateArgumentTitle(TMethodArg* argument); Create string describing argument (for use in dialog box). const char * CreateDialogTitle(TObject* object, TFunction* method); Create title for dialog box retrieving ar",MatchSource.WIKI,root/html532/TContextMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TContextMenu.html
https://root.cern/root/html532/TContextMenu.html:7874,Modifiability,Inherit,Inherited,7874,"el, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TContextMenu(); TContextMenu(const TContextMenu&); TContextMenu&operator=(const TContextMenu&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TBrowser*fBrowserselected browser (if exist); TObject*fCalledObjectobject to call; TContextMenuImp*fContextMenuImp!Context menu system specific implementation; TStringTNamed::fNameobject identifier; TVirtualPad*fSelectedCanvasselected canvas (if exist); TClassMenuItem*fSelectedMenuItemselected class menu item; TFunction*fSelectedMethodselected method; TObject*fSelectedObjectselected object; TVirtualPad*fSelectedPadselected pad (if exist); TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TContextMenu(const char* name, const char* title = ""Context sensitive popup menu""); Create a context menu. ~TContextMenu(); Destroy a context menu. void Action(TObject* object, TMethod* method); Action to be performed when this menu item is selected.; If the selected method requires arguments we popup an; automatically generated dialog, otherwise the method is; directly executed. void Action(TClassMenuItem* classmenuitem); Action to be performed when this menu item is selected.; If the selected method requires arguments we popup an; automatically generated dialog, otherwise the method is; directly executed. void Action(TObject* object, TToggle* toggle); Action to be performed when this toggle menu item is selected. const char * CreateArgumentTitle(TMethodArg* argument); Create string describing argument (for use in dialog box). const char * CreateDialogTitle(TObject* object, TFunction* method); Create title for dialog box retrieving ar",MatchSource.WIKI,root/html532/TContextMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TContextMenu.html
https://root.cern/root/html532/TContextMenu.html:8146,Performance,perform,performed,8146,"Delete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TBrowser*fBrowserselected browser (if exist); TObject*fCalledObjectobject to call; TContextMenuImp*fContextMenuImp!Context menu system specific implementation; TStringTNamed::fNameobject identifier; TVirtualPad*fSelectedCanvasselected canvas (if exist); TClassMenuItem*fSelectedMenuItemselected class menu item; TFunction*fSelectedMethodselected method; TObject*fSelectedObjectselected object; TVirtualPad*fSelectedPadselected pad (if exist); TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TContextMenu(const char* name, const char* title = ""Context sensitive popup menu""); Create a context menu. ~TContextMenu(); Destroy a context menu. void Action(TObject* object, TMethod* method); Action to be performed when this menu item is selected.; If the selected method requires arguments we popup an; automatically generated dialog, otherwise the method is; directly executed. void Action(TClassMenuItem* classmenuitem); Action to be performed when this menu item is selected.; If the selected method requires arguments we popup an; automatically generated dialog, otherwise the method is; directly executed. void Action(TObject* object, TToggle* toggle); Action to be performed when this toggle menu item is selected. const char * CreateArgumentTitle(TMethodArg* argument); Create string describing argument (for use in dialog box). const char * CreateDialogTitle(TObject* object, TFunction* method); Create title for dialog box retrieving argument values. const char * CreatePopupTitle(TObject* object); Create title for popup menu. void Execute(TObject* object, TFunction* method, const char* params); Execute method with specified arguments for specified object. void Execute(TObject* obje",MatchSource.WIKI,root/html532/TContextMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TContextMenu.html
https://root.cern/root/html532/TContextMenu.html:8378,Performance,perform,performed,8378,"Browser*fBrowserselected browser (if exist); TObject*fCalledObjectobject to call; TContextMenuImp*fContextMenuImp!Context menu system specific implementation; TStringTNamed::fNameobject identifier; TVirtualPad*fSelectedCanvasselected canvas (if exist); TClassMenuItem*fSelectedMenuItemselected class menu item; TFunction*fSelectedMethodselected method; TObject*fSelectedObjectselected object; TVirtualPad*fSelectedPadselected pad (if exist); TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TContextMenu(const char* name, const char* title = ""Context sensitive popup menu""); Create a context menu. ~TContextMenu(); Destroy a context menu. void Action(TObject* object, TMethod* method); Action to be performed when this menu item is selected.; If the selected method requires arguments we popup an; automatically generated dialog, otherwise the method is; directly executed. void Action(TClassMenuItem* classmenuitem); Action to be performed when this menu item is selected.; If the selected method requires arguments we popup an; automatically generated dialog, otherwise the method is; directly executed. void Action(TObject* object, TToggle* toggle); Action to be performed when this toggle menu item is selected. const char * CreateArgumentTitle(TMethodArg* argument); Create string describing argument (for use in dialog box). const char * CreateDialogTitle(TObject* object, TFunction* method); Create title for dialog box retrieving argument values. const char * CreatePopupTitle(TObject* object); Create title for popup menu. void Execute(TObject* object, TFunction* method, const char* params); Execute method with specified arguments for specified object. void Execute(TObject* object, TFunction* method, TObjArray* params); Execute method with specified arguments for specified object. void Popup(Int_t x, Int_t y, TObject* obj, TVirtualPad* c = 0, TVirtualPad* p = 0); Popup context menu at given location in canv",MatchSource.WIKI,root/html532/TContextMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TContextMenu.html
https://root.cern/root/html532/TContextMenu.html:8613,Performance,perform,performed,8613,"vas (if exist); TClassMenuItem*fSelectedMenuItemselected class menu item; TFunction*fSelectedMethodselected method; TObject*fSelectedObjectselected object; TVirtualPad*fSelectedPadselected pad (if exist); TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TContextMenu(const char* name, const char* title = ""Context sensitive popup menu""); Create a context menu. ~TContextMenu(); Destroy a context menu. void Action(TObject* object, TMethod* method); Action to be performed when this menu item is selected.; If the selected method requires arguments we popup an; automatically generated dialog, otherwise the method is; directly executed. void Action(TClassMenuItem* classmenuitem); Action to be performed when this menu item is selected.; If the selected method requires arguments we popup an; automatically generated dialog, otherwise the method is; directly executed. void Action(TObject* object, TToggle* toggle); Action to be performed when this toggle menu item is selected. const char * CreateArgumentTitle(TMethodArg* argument); Create string describing argument (for use in dialog box). const char * CreateDialogTitle(TObject* object, TFunction* method); Create title for dialog box retrieving argument values. const char * CreatePopupTitle(TObject* object); Create title for popup menu. void Execute(TObject* object, TFunction* method, const char* params); Execute method with specified arguments for specified object. void Execute(TObject* object, TFunction* method, TObjArray* params); Execute method with specified arguments for specified object. void Popup(Int_t x, Int_t y, TObject* obj, TVirtualPad* c = 0, TVirtualPad* p = 0); Popup context menu at given location in canvas c and pad p for selected; object. void Popup(Int_t x, Int_t y, TObject* obj, TBrowser* b); Popup context menu at given location in browser b for selected object. TContextMenu(const TContextMenu& ). TContextMenu& operator=(const TConte",MatchSource.WIKI,root/html532/TContextMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TContextMenu.html
https://root.cern/root/html532/TContextMenu.html:3715,Security,Hash,Hash,3715,"onst char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TBrowser*GetBrowser(); virtual TObject*GetCalledObject(); virtual TContextMenuImp*GetContextMenuImp(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TVirtualPad*GetSelectedCanvas(); virtual TClassMenuItem*GetSelectedMenuItem(); virtual TFunction*GetSelectedMethod(); virtual TObject*GetSelectedObject(); virtual TVirtualPad*GetSelectedPad(); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator ne",MatchSource.WIKI,root/html532/TContextMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TContextMenu.html
https://root.cern/root/html532/TContextMenu.html:6431,Testability,Test,TestBit,6431,"t::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPopup(Int_t x, Int_t y, TObject* obj, TBrowser* b); virtual voidPopup(Int_t x, Int_t y, TObject* obj, TVirtualPad* c = 0, TVirtualPad* p = 0); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetBrowser(TBrowser* b); virtual voidSetCalledObject(TObject* o); virtual voidSetCanvas(TVirtualPad* c); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetMethod(TFunction* m); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidSetNameTitle(const char* name, const char* title); virtual voidSetObject(TObject* o); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPad(TVirtualPad* p); virtual voidSetSelectedMenuItem(TClassMenuItem* mi); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TContextMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TContextMenu.html
https://root.cern/root/html532/TContextMenu.html:6470,Testability,Test,TestBits,6470,"t::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPopup(Int_t x, Int_t y, TObject* obj, TBrowser* b); virtual voidPopup(Int_t x, Int_t y, TObject* obj, TVirtualPad* c = 0, TVirtualPad* p = 0); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetBrowser(TBrowser* b); virtual voidSetCalledObject(TObject* o); virtual voidSetCanvas(TVirtualPad* c); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetMethod(TFunction* m); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidSetNameTitle(const char* name, const char* title); virtual voidSetObject(TObject* o); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPad(TVirtualPad* p); virtual voidSetSelectedMenuItem(TClassMenuItem* mi); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TContextMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TContextMenu.html
https://root.cern/root/html532/TContextMenu.html:1443,Usability,Clear,Clear,1443," TContextMenu(const char* name, const char* title = ""Context sensitive popup menu""); virtual~TContextMenu(); voidTObject::AbstractMethod(const char* method) const; virtual voidAction(TClassMenuItem* classmenuitem); voidAction(TMethod* method); voidAction(TToggle* toggle); virtual voidAction(TObject* object, TMethod* method); virtual voidAction(TObject* object, TToggle* toggle); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual const char*CreateArgumentTitle(TMethodArg* argument); virtual const char*CreateDialogTitle(TObject* object, TFunction* method); virtual const char*CreatePopupTitle(TObject* object); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); v",MatchSource.WIKI,root/html532/TContextMenu.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TContextMenu.html
https://root.cern/root/html532/TContextMenuImp.html:330,Integrability,interface,interface,330,". TContextMenuImp. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TContextMenuImp. class TContextMenuImp. TContextMenuImp. This class provides an interface to GUI independent; context sensitive popup menus. Function Members (Methods); public:. TContextMenuImp(TContextMenu* c = 0); virtual~TContextMenuImp(); static TClass*Class(); virtual voidDialog(TObject* object, TFunction* function); virtual voidDialog(TObject* object, TMethod* method); virtual voidDisplayPopup(Int_t x, Int_t y); virtual TContextMenu*GetContextMenu() const; virtual TClass*IsA() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. TContextMenuImp(const TContextMenuImp& cmi); TContextMenuImp&operator=(const TContextMenuImp& cmi). Data Members; protected:. TContextMenu*fContextMenuTContextMenu associated with this implementation. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Dialog(TObject* object, TFunction* function); { }. void Dialog(TObject* object, TMethod* method); { }. void DisplayPopup(Int_t x, Int_t y); { }. TContextMenuImp(const TContextMenuImp& cmi); { }. TContextMenuImp& operator=(const TContextMenuImp& cmi). TContextMenuImp(TContextMenu* c = 0); { }. virtual ~TContextMenuImp(); { }. TContextMenu * GetContextMenu() const; { return fContextMenu; }. » Author: Nenad Buncic 08/02/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TContextMenuImp.h 20877 2007-11-19 11:17:07Z rdm $ » Last generated: 2011-11-03 20:11; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TContextMenuImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TContextMenuImp.html
https://root.cern/root/html532/TContextMenuImp.html:1089,Modifiability,Inherit,Inheritance,1089,". TContextMenuImp. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TContextMenuImp. class TContextMenuImp. TContextMenuImp. This class provides an interface to GUI independent; context sensitive popup menus. Function Members (Methods); public:. TContextMenuImp(TContextMenu* c = 0); virtual~TContextMenuImp(); static TClass*Class(); virtual voidDialog(TObject* object, TFunction* function); virtual voidDialog(TObject* object, TMethod* method); virtual voidDisplayPopup(Int_t x, Int_t y); virtual TContextMenu*GetContextMenu() const; virtual TClass*IsA() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. TContextMenuImp(const TContextMenuImp& cmi); TContextMenuImp&operator=(const TContextMenuImp& cmi). Data Members; protected:. TContextMenu*fContextMenuTContextMenu associated with this implementation. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Dialog(TObject* object, TFunction* function); { }. void Dialog(TObject* object, TMethod* method); { }. void DisplayPopup(Int_t x, Int_t y); { }. TContextMenuImp(const TContextMenuImp& cmi); { }. TContextMenuImp& operator=(const TContextMenuImp& cmi). TContextMenuImp(TContextMenu* c = 0); { }. virtual ~TContextMenuImp(); { }. TContextMenu * GetContextMenu() const; { return fContextMenu; }. » Author: Nenad Buncic 08/02/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TContextMenuImp.h 20877 2007-11-19 11:17:07Z rdm $ » Last generated: 2011-11-03 20:11; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TContextMenuImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TContextMenuImp.html
https://root.cern/root/html532/TContextMenuImp.html:1102,Modifiability,Inherit,Inherited,1102,". TContextMenuImp. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TContextMenuImp. class TContextMenuImp. TContextMenuImp. This class provides an interface to GUI independent; context sensitive popup menus. Function Members (Methods); public:. TContextMenuImp(TContextMenu* c = 0); virtual~TContextMenuImp(); static TClass*Class(); virtual voidDialog(TObject* object, TFunction* function); virtual voidDialog(TObject* object, TMethod* method); virtual voidDisplayPopup(Int_t x, Int_t y); virtual TContextMenu*GetContextMenu() const; virtual TClass*IsA() const; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. TContextMenuImp(const TContextMenuImp& cmi); TContextMenuImp&operator=(const TContextMenuImp& cmi). Data Members; protected:. TContextMenu*fContextMenuTContextMenu associated with this implementation. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Dialog(TObject* object, TFunction* function); { }. void Dialog(TObject* object, TMethod* method); { }. void DisplayPopup(Int_t x, Int_t y); { }. TContextMenuImp(const TContextMenuImp& cmi); { }. TContextMenuImp& operator=(const TContextMenuImp& cmi). TContextMenuImp(TContextMenu* c = 0); { }. virtual ~TContextMenuImp(); { }. TContextMenu * GetContextMenu() const; { return fContextMenu; }. » Author: Nenad Buncic 08/02/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TContextMenuImp.h 20877 2007-11-19 11:17:07Z rdm $ » Last generated: 2011-11-03 20:11; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TContextMenuImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TContextMenuImp.html
https://root.cern/root/html532/TControlBar.html:3962,Availability,Error,Error,3962,"* button); voidAddButton(TControlBarButton& button); voidAddButton(const char* label, const char* action, const char* hint = """", const char* type = ""button""); voidAddControlBar(TControlBar* controlBar); voidAddControlBar(TControlBar& controlBar); voidAddSeparator(); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*TControlBarButton::GetAction() const; TControlBarButton*GetClicked() const; TControlBarImp*GetControlBarImp() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*GetListOfButtons() const; virtual const char*TNamed::GetName() const; Int_tGetNumberOfColumns() const; Int_tGetNumberOfRows() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py)",MatchSource.WIKI,root/html532/TControlBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TControlBar.html
https://root.cern/root/html532/TControlBar.html:4091,Availability,error,error,4091,"const char* type = ""button""); voidAddControlBar(TControlBar* controlBar); voidAddControlBar(TControlBar& controlBar); voidAddSeparator(); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*TControlBarButton::GetAction() const; TControlBarButton*GetClicked() const; TControlBarImp*GetControlBarImp() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*GetListOfButtons() const; virtual const char*TNamed::GetName() const; Int_tGetNumberOfColumns() const; Int_tGetNumberOfRows() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tGetOrientation() const; virtual ",MatchSource.WIKI,root/html532/TControlBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TControlBar.html
https://root.cern/root/html532/TControlBar.html:4175,Availability,error,error,4175,"trolBar(TControlBar& controlBar); voidAddSeparator(); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*TControlBarButton::GetAction() const; TControlBarButton*GetClicked() const; TControlBarImp*GetControlBarImp() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*GetListOfButtons() const; virtual const char*TNamed::GetName() const; Int_tGetNumberOfColumns() const; Int_tGetNumberOfRows() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tGetOrientation() const; virtual const char*TNamed::GetTitle() const; virtual Int_tTControlBarButton::GetType() const",MatchSource.WIKI,root/html532/TControlBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TControlBar.html
https://root.cern/root/html532/TControlBar.html:1100,Integrability,Interface,Interface,1100,":; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » GPAD; » TControlBar. class TControlBar: public TControlBarButton. ControlBar is fully user configurable tool which provides fast; access to frequently used operations. User can choose between; buttons and drawnbuttons (let's say icons) and assign to them his; own actions (let's say ROOT or C++ commands). The macro belows shows an example of controlbar.; To execute an item, click with the left mouse button.; To see the HELP of a button, click on the right mouse button. You have access to the last clicked button via the method; GetClicked(). For example, bar->GetClicked()->GetName(); will return the name of the last clicked button. {; gROOT.Reset(""a"");; TControlBar bar(""vertical"");; bar.AddButton(""Help to run demos"","".x demoshelp.C"",; ""Explains how to run the demos"");; bar.AddButton(""framework"", "".x framework.C"",; ""An Example of Object Oriented User Interface"");; bar.AddButton(""hsimple"", "".x hsimple.C"",; ""An Example Creating Histograms/Ntuples on File"");; bar.AddButton(""hsum"", "".x hsum.C"",; ""Filling histograms and some graphics options"");; bar.AddButton(""canvas"", "".x canvas.C"",; ""Canvas and Pad Management"");; bar.AddButton(""formula1"", "".x formula1.C"",; ""Simple Formula and Functions"");; bar.AddButton(""fillrandom"", "".x fillrandom.C"",; ""Histograms with Random Numbers from a Function"");; bar.AddButton(""fit1"", "".x fit1.C"",; ""A Simple Fitting Example"");; bar.AddButton(""h1draw"", "".x h1draw.C"",; ""Drawing Options for 1D Histograms"");; bar.AddButton(""graph"", "".x graph.C"",; ""Examples of a simple graph"");; bar.AddButton(""tornado"", "".x tornado.C"",; ""Examples of 3-D PolyMarkers"");; bar.AddButton(""shapes"", "".x shapes.C"",; ""The Geometry Shapes"");; bar.AddButton(""atlasna49"", "".x atlasna49.C"",; ""Creating and Viewing Geometries"");; bar.AddButton(""file_layout"", "".x file.C"",; ""The ROOT file format"");; bar.AddButton(""tree_layout"", "".x tree.C",MatchSource.WIKI,root/html532/TControlBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TControlBar.html
https://root.cern/root/html532/TControlBar.html:331,Modifiability,config,configurable,331,". TControlBar. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » GPAD; » TControlBar. class TControlBar: public TControlBarButton. ControlBar is fully user configurable tool which provides fast; access to frequently used operations. User can choose between; buttons and drawnbuttons (let's say icons) and assign to them his; own actions (let's say ROOT or C++ commands). The macro belows shows an example of controlbar.; To execute an item, click with the left mouse button.; To see the HELP of a button, click on the right mouse button. You have access to the last clicked button via the method; GetClicked(). For example, bar->GetClicked()->GetName(); will return the name of the last clicked button. {; gROOT.Reset(""a"");; TControlBar bar(""vertical"");; bar.AddButton(""Help to run demos"","".x demoshelp.C"",; ""Explains how to run the demos"");; bar.AddButton(""framework"", "".x framework.C"",; ""An Example of Object Oriented User Interface"");; bar.AddButton(""hsimple"", "".x hsimple.C"",; ""An Example Creating Histograms/Ntuples on File"");; bar.AddButton(""hsum"", "".x hsum.C"",; ""Filling histograms and some graphics options"");; bar.AddButton(""canvas"", "".x canvas.C"",; ""Canvas and Pad Management"");; bar.AddButton(""formula1"", "".x formula1.C"",; ""Simple Formula and Functions"");; bar.AddButton(""fillrandom"", "".x fillrandom.C"",; ""Histograms with Random Numbers from a Function"");; bar.AddButton(""fit1"", "".x fit1.C"",; ""A Simple Fitting Example"");; bar.AddButton(""h1draw"", "".x h1draw.C"",; ""Drawing Options for 1D Histograms"");; bar.AddButton(""graph"", "".x graph.C"",; ""Examples of a simple graph"");; bar.AddButton(""tornado"", "".x tornado.C"",; ""Examples of 3-D PolyMarkers"");; bar.AddButton(""shapes"", "".x shapes.C"",; ""The Geometry Shapes"");; bar.AddButton(""atlasna49"", "".x atlasna49.C"",; ""Creating and Viewing Geometries"");; bar.AddButton(""file_",MatchSource.WIKI,root/html532/TControlBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TControlBar.html
https://root.cern/root/html532/TControlBar.html:5420,Modifiability,Inherit,InheritsFrom,5420,"me) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*TControlBarButton::GetAction() const; TControlBarButton*GetClicked() const; TControlBarImp*GetControlBarImp() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*GetListOfButtons() const; virtual const char*TNamed::GetName() const; Int_tGetNumberOfColumns() const; Int_tGetNumberOfRows() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tGetOrientation() const; virtual const char*TNamed::GetTitle() const; virtual Int_tTControlBarButton::GetType() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; voidHide(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObje",MatchSource.WIKI,root/html532/TControlBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TControlBar.html
https://root.cern/root/html532/TControlBar.html:5486,Modifiability,Inherit,InheritsFrom,5486," const; virtual const char*TControlBarButton::GetAction() const; TControlBarButton*GetClicked() const; TControlBarImp*GetControlBarImp() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*GetListOfButtons() const; virtual const char*TNamed::GetName() const; Int_tGetNumberOfColumns() const; Int_tGetNumberOfRows() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tGetOrientation() const; virtual const char*TNamed::GetTitle() const; virtual Int_tTControlBarButton::GetType() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; voidHide(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TControlBar&operator=(con",MatchSource.WIKI,root/html532/TControlBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TControlBar.html
https://root.cern/root/html532/TControlBar.html:9431,Modifiability,Inherit,Inheritance,9431,", Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. virtual voidCreate(); voidInitialize(Int_t x, Int_t y). Data Members; public:. enum { kVertical; kHorizontal; };; enum TControlBarButton::[unnamed] { kButton; kDrawnButton; kSeparator; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTControlBarButton::fActionaction to be executed; TList*fButtonslist of buttons; TControlBarImp*fControlBarImpsystem specific implementation; TStringTNamed::fNameobject identifier; Int_tfNorocnumber of rows or columns; Int_tfOrientationorientation; TStringTNamed::fTitleobject title; Int_tTControlBarButton::fTypebutton type. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TControlBar(); Default constructor. TControlBar(const char* orientation, const char* title = """"); Normal constructor. TControlBar(const char* orientation, const char* title, Int_t x, Int_t y); Normal constructor. ~TControlBar(); Destructor. void AddButton(TControlBarButton& button); Add button. void AddButton(TControlBarButton* button); Add button. void AddButton(const char* label, const char* action, const char* hint = """", const char* type = ""button""); Add button. void AddControlBar(TControlBar& controlBar); Add controlbar. void AddControlBar(TControlBar* controlBar); Add controlbar. void AddSeparator(); Add separator. void Create(); Create controlbar. void Hide(); Hide controlbar. void Initialize(Int_t x, Int_t y); Initialize controlbar. void SetFont(const char* fontName); Sets new font for control bar buttons, e.g.:; root > .x tutorials/demos.C; root > bar->SetFont(""-adobe-helvetica-bold-r-*-*-24-*-*-*-*-*-iso8859-1""). void SetTextC",MatchSource.WIKI,root/html532/TControlBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TControlBar.html
https://root.cern/root/html532/TControlBar.html:9444,Modifiability,Inherit,Inherited,9444,", Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. virtual voidCreate(); voidInitialize(Int_t x, Int_t y). Data Members; public:. enum { kVertical; kHorizontal; };; enum TControlBarButton::[unnamed] { kButton; kDrawnButton; kSeparator; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTControlBarButton::fActionaction to be executed; TList*fButtonslist of buttons; TControlBarImp*fControlBarImpsystem specific implementation; TStringTNamed::fNameobject identifier; Int_tfNorocnumber of rows or columns; Int_tfOrientationorientation; TStringTNamed::fTitleobject title; Int_tTControlBarButton::fTypebutton type. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TControlBar(); Default constructor. TControlBar(const char* orientation, const char* title = """"); Normal constructor. TControlBar(const char* orientation, const char* title, Int_t x, Int_t y); Normal constructor. ~TControlBar(); Destructor. void AddButton(TControlBarButton& button); Add button. void AddButton(TControlBarButton* button); Add button. void AddButton(const char* label, const char* action, const char* hint = """", const char* type = ""button""); Add button. void AddControlBar(TControlBar& controlBar); Add controlbar. void AddControlBar(TControlBar* controlBar); Add controlbar. void AddSeparator(); Add separator. void Create(); Create controlbar. void Hide(); Hide controlbar. void Initialize(Int_t x, Int_t y); Initialize controlbar. void SetFont(const char* fontName); Sets new font for control bar buttons, e.g.:; root > .x tutorials/demos.C; root > bar->SetFont(""-adobe-helvetica-bold-r-*-*-24-*-*-*-*-*-iso8859-1""). void SetTextC",MatchSource.WIKI,root/html532/TControlBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TControlBar.html
https://root.cern/root/html532/TControlBar.html:370,Security,access,access,370,". TControlBar. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » GPAD; » TControlBar. class TControlBar: public TControlBarButton. ControlBar is fully user configurable tool which provides fast; access to frequently used operations. User can choose between; buttons and drawnbuttons (let's say icons) and assign to them his; own actions (let's say ROOT or C++ commands). The macro belows shows an example of controlbar.; To execute an item, click with the left mouse button.; To see the HELP of a button, click on the right mouse button. You have access to the last clicked button via the method; GetClicked(). For example, bar->GetClicked()->GetName(); will return the name of the last clicked button. {; gROOT.Reset(""a"");; TControlBar bar(""vertical"");; bar.AddButton(""Help to run demos"","".x demoshelp.C"",; ""Explains how to run the demos"");; bar.AddButton(""framework"", "".x framework.C"",; ""An Example of Object Oriented User Interface"");; bar.AddButton(""hsimple"", "".x hsimple.C"",; ""An Example Creating Histograms/Ntuples on File"");; bar.AddButton(""hsum"", "".x hsum.C"",; ""Filling histograms and some graphics options"");; bar.AddButton(""canvas"", "".x canvas.C"",; ""Canvas and Pad Management"");; bar.AddButton(""formula1"", "".x formula1.C"",; ""Simple Formula and Functions"");; bar.AddButton(""fillrandom"", "".x fillrandom.C"",; ""Histograms with Random Numbers from a Function"");; bar.AddButton(""fit1"", "".x fit1.C"",; ""A Simple Fitting Example"");; bar.AddButton(""h1draw"", "".x h1draw.C"",; ""Drawing Options for 1D Histograms"");; bar.AddButton(""graph"", "".x graph.C"",; ""Examples of a simple graph"");; bar.AddButton(""tornado"", "".x tornado.C"",; ""Examples of 3-D PolyMarkers"");; bar.AddButton(""shapes"", "".x shapes.C"",; ""The Geometry Shapes"");; bar.AddButton(""atlasna49"", "".x atlasna49.C"",; ""Creating and Viewing Geometries"");; bar.AddButton(""file_",MatchSource.WIKI,root/html532/TControlBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TControlBar.html
https://root.cern/root/html532/TControlBar.html:722,Security,access,access,722,". TControlBar. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » GPAD; » TControlBar. class TControlBar: public TControlBarButton. ControlBar is fully user configurable tool which provides fast; access to frequently used operations. User can choose between; buttons and drawnbuttons (let's say icons) and assign to them his; own actions (let's say ROOT or C++ commands). The macro belows shows an example of controlbar.; To execute an item, click with the left mouse button.; To see the HELP of a button, click on the right mouse button. You have access to the last clicked button via the method; GetClicked(). For example, bar->GetClicked()->GetName(); will return the name of the last clicked button. {; gROOT.Reset(""a"");; TControlBar bar(""vertical"");; bar.AddButton(""Help to run demos"","".x demoshelp.C"",; ""Explains how to run the demos"");; bar.AddButton(""framework"", "".x framework.C"",; ""An Example of Object Oriented User Interface"");; bar.AddButton(""hsimple"", "".x hsimple.C"",; ""An Example Creating Histograms/Ntuples on File"");; bar.AddButton(""hsum"", "".x hsum.C"",; ""Filling histograms and some graphics options"");; bar.AddButton(""canvas"", "".x canvas.C"",; ""Canvas and Pad Management"");; bar.AddButton(""formula1"", "".x formula1.C"",; ""Simple Formula and Functions"");; bar.AddButton(""fillrandom"", "".x fillrandom.C"",; ""Histograms with Random Numbers from a Function"");; bar.AddButton(""fit1"", "".x fit1.C"",; ""A Simple Fitting Example"");; bar.AddButton(""h1draw"", "".x h1draw.C"",; ""Drawing Options for 1D Histograms"");; bar.AddButton(""graph"", "".x graph.C"",; ""Examples of a simple graph"");; bar.AddButton(""tornado"", "".x tornado.C"",; ""Examples of 3-D PolyMarkers"");; bar.AddButton(""shapes"", "".x shapes.C"",; ""The Geometry Shapes"");; bar.AddButton(""atlasna49"", "".x atlasna49.C"",; ""Creating and Viewing Geometries"");; bar.AddButton(""file_",MatchSource.WIKI,root/html532/TControlBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TControlBar.html
https://root.cern/root/html532/TControlBar.html:5298,Security,Hash,Hash,5298,", const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*TControlBarButton::GetAction() const; TControlBarButton*GetClicked() const; TControlBarImp*GetControlBarImp() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*GetListOfButtons() const; virtual const char*TNamed::GetName() const; Int_tGetNumberOfColumns() const; Int_tGetNumberOfRows() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tGetOrientation() const; virtual const char*TNamed::GetTitle() const; virtual Int_tTControlBarButton::GetType() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; voidHide(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject:",MatchSource.WIKI,root/html532/TControlBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TControlBar.html
https://root.cern/root/html532/TControlBar.html:2211,Testability,benchmark,benchmarks,2211,".AddButton(""hsum"", "".x hsum.C"",; ""Filling histograms and some graphics options"");; bar.AddButton(""canvas"", "".x canvas.C"",; ""Canvas and Pad Management"");; bar.AddButton(""formula1"", "".x formula1.C"",; ""Simple Formula and Functions"");; bar.AddButton(""fillrandom"", "".x fillrandom.C"",; ""Histograms with Random Numbers from a Function"");; bar.AddButton(""fit1"", "".x fit1.C"",; ""A Simple Fitting Example"");; bar.AddButton(""h1draw"", "".x h1draw.C"",; ""Drawing Options for 1D Histograms"");; bar.AddButton(""graph"", "".x graph.C"",; ""Examples of a simple graph"");; bar.AddButton(""tornado"", "".x tornado.C"",; ""Examples of 3-D PolyMarkers"");; bar.AddButton(""shapes"", "".x shapes.C"",; ""The Geometry Shapes"");; bar.AddButton(""atlasna49"", "".x atlasna49.C"",; ""Creating and Viewing Geometries"");; bar.AddButton(""file_layout"", "".x file.C"",; ""The ROOT file format"");; bar.AddButton(""tree_layout"", "".x tree.C"",; ""The Tree Data Structure"");; bar.AddButton(""ntuple1"", "".x ntuple1.C"",; ""Ntuples and Selections"");; bar.AddButton(""run benchmarks"", "".x benchmarks.C"",; ""Runs all the ROOT benchmarks"");; bar.AddButton(""rootmarks"", "".x rootmarks.C"",; ""Prints an estimated ROOTMARKS for your machine"");; bar.AddButton(""edit_hsimple"", "".!ved hsimple.C &"",; ""Invokes the text editor on file hsimple.C"");; bar.AddButton(""Close Bar"", ""gROOT.Reset(\""a\"")"",; ""Close ControlBar"");; bar.Show();; gROOT.SaveContext();; }. /*. */. Function Members (Methods); public:. TControlBar(); TControlBar(const TControlBar&); TControlBar(const char* orientation, const char* title = """"); TControlBar(const char* orientation, const char* title, Int_t x, Int_t y); virtual~TControlBar(); voidTObject::AbstractMethod(const char* method) const; virtual voidTControlBarButton::Action(); voidAddButton(TControlBarButton* button); voidAddButton(TControlBarButton& button); voidAddButton(const char* label, const char* action, const char* hint = """", const char* type = ""button""); voidAddControlBar(TControlBar* controlBar); voidAddControlBar(TControlBar& controlBar);",MatchSource.WIKI,root/html532/TControlBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TControlBar.html
https://root.cern/root/html532/TControlBar.html:2228,Testability,benchmark,benchmarks,2228,"x hsum.C"",; ""Filling histograms and some graphics options"");; bar.AddButton(""canvas"", "".x canvas.C"",; ""Canvas and Pad Management"");; bar.AddButton(""formula1"", "".x formula1.C"",; ""Simple Formula and Functions"");; bar.AddButton(""fillrandom"", "".x fillrandom.C"",; ""Histograms with Random Numbers from a Function"");; bar.AddButton(""fit1"", "".x fit1.C"",; ""A Simple Fitting Example"");; bar.AddButton(""h1draw"", "".x h1draw.C"",; ""Drawing Options for 1D Histograms"");; bar.AddButton(""graph"", "".x graph.C"",; ""Examples of a simple graph"");; bar.AddButton(""tornado"", "".x tornado.C"",; ""Examples of 3-D PolyMarkers"");; bar.AddButton(""shapes"", "".x shapes.C"",; ""The Geometry Shapes"");; bar.AddButton(""atlasna49"", "".x atlasna49.C"",; ""Creating and Viewing Geometries"");; bar.AddButton(""file_layout"", "".x file.C"",; ""The ROOT file format"");; bar.AddButton(""tree_layout"", "".x tree.C"",; ""The Tree Data Structure"");; bar.AddButton(""ntuple1"", "".x ntuple1.C"",; ""Ntuples and Selections"");; bar.AddButton(""run benchmarks"", "".x benchmarks.C"",; ""Runs all the ROOT benchmarks"");; bar.AddButton(""rootmarks"", "".x rootmarks.C"",; ""Prints an estimated ROOTMARKS for your machine"");; bar.AddButton(""edit_hsimple"", "".!ved hsimple.C &"",; ""Invokes the text editor on file hsimple.C"");; bar.AddButton(""Close Bar"", ""gROOT.Reset(\""a\"")"",; ""Close ControlBar"");; bar.Show();; gROOT.SaveContext();; }. /*. */. Function Members (Methods); public:. TControlBar(); TControlBar(const TControlBar&); TControlBar(const char* orientation, const char* title = """"); TControlBar(const char* orientation, const char* title, Int_t x, Int_t y); virtual~TControlBar(); voidTObject::AbstractMethod(const char* method) const; virtual voidTControlBarButton::Action(); voidAddButton(TControlBarButton* button); voidAddButton(TControlBarButton& button); voidAddButton(const char* label, const char* action, const char* hint = """", const char* type = ""button""); voidAddControlBar(TControlBar* controlBar); voidAddControlBar(TControlBar& controlBar); voidAddSeparator(); v",MatchSource.WIKI,root/html532/TControlBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TControlBar.html
https://root.cern/root/html532/TControlBar.html:2263,Testability,benchmark,benchmarks,2263,"ams and some graphics options"");; bar.AddButton(""canvas"", "".x canvas.C"",; ""Canvas and Pad Management"");; bar.AddButton(""formula1"", "".x formula1.C"",; ""Simple Formula and Functions"");; bar.AddButton(""fillrandom"", "".x fillrandom.C"",; ""Histograms with Random Numbers from a Function"");; bar.AddButton(""fit1"", "".x fit1.C"",; ""A Simple Fitting Example"");; bar.AddButton(""h1draw"", "".x h1draw.C"",; ""Drawing Options for 1D Histograms"");; bar.AddButton(""graph"", "".x graph.C"",; ""Examples of a simple graph"");; bar.AddButton(""tornado"", "".x tornado.C"",; ""Examples of 3-D PolyMarkers"");; bar.AddButton(""shapes"", "".x shapes.C"",; ""The Geometry Shapes"");; bar.AddButton(""atlasna49"", "".x atlasna49.C"",; ""Creating and Viewing Geometries"");; bar.AddButton(""file_layout"", "".x file.C"",; ""The ROOT file format"");; bar.AddButton(""tree_layout"", "".x tree.C"",; ""The Tree Data Structure"");; bar.AddButton(""ntuple1"", "".x ntuple1.C"",; ""Ntuples and Selections"");; bar.AddButton(""run benchmarks"", "".x benchmarks.C"",; ""Runs all the ROOT benchmarks"");; bar.AddButton(""rootmarks"", "".x rootmarks.C"",; ""Prints an estimated ROOTMARKS for your machine"");; bar.AddButton(""edit_hsimple"", "".!ved hsimple.C &"",; ""Invokes the text editor on file hsimple.C"");; bar.AddButton(""Close Bar"", ""gROOT.Reset(\""a\"")"",; ""Close ControlBar"");; bar.Show();; gROOT.SaveContext();; }. /*. */. Function Members (Methods); public:. TControlBar(); TControlBar(const TControlBar&); TControlBar(const char* orientation, const char* title = """"); TControlBar(const char* orientation, const char* title, Int_t x, Int_t y); virtual~TControlBar(); voidTObject::AbstractMethod(const char* method) const; virtual voidTControlBarButton::Action(); voidAddButton(TControlBarButton* button); voidAddButton(TControlBarButton& button); voidAddButton(const char* label, const char* action, const char* hint = """", const char* type = ""button""); voidAddControlBar(TControlBar* controlBar); voidAddControlBar(TControlBar& controlBar); voidAddSeparator(); virtual voidTObject::AppendPa",MatchSource.WIKI,root/html532/TControlBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TControlBar.html
https://root.cern/root/html532/TControlBar.html:8121,Testability,Test,TestBit,8121,"erator=(const TControlBar&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTControlBarButton::SetAction(const char* action); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetButtonState(const char* label, Int_t state = 0); voidSetButtonWidth(UInt_t width); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetFont(const char* fontName); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); voidSetNumberOfColumns(Int_t n); voidSetNumberOfRows(Int_t n); static voidTObject::SetObjectStat(Bool_t stat); voidSetOrientation(const char* o); voidSetOrientation(Int_t o); voidSetTextColor(const char* colorName); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTControlBarButton::SetType(const char* type); virtual voidTControlBarButton::SetType(Int_t type); virtual voidTObject::SetUniqueID(UInt_t uid); voidShow(); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TControlBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TControlBar.html
https://root.cern/root/html532/TControlBar.html:8160,Testability,Test,TestBits,8160,"erator=(const TControlBar&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTControlBarButton::SetAction(const char* action); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetButtonState(const char* label, Int_t state = 0); voidSetButtonWidth(UInt_t width); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetFont(const char* fontName); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); voidSetNumberOfColumns(Int_t n); voidSetNumberOfRows(Int_t n); static voidTObject::SetObjectStat(Bool_t stat); voidSetOrientation(const char* o); voidSetOrientation(Int_t o); voidSetTextColor(const char* colorName); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTControlBarButton::SetType(const char* type); virtual voidTControlBarButton::SetType(Int_t type); virtual voidTObject::SetUniqueID(UInt_t uid); voidShow(); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TControlBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TControlBar.html
https://root.cern/root/html532/TControlBar.html:1410,Usability,Simpl,Simple,1410,"etween; buttons and drawnbuttons (let's say icons) and assign to them his; own actions (let's say ROOT or C++ commands). The macro belows shows an example of controlbar.; To execute an item, click with the left mouse button.; To see the HELP of a button, click on the right mouse button. You have access to the last clicked button via the method; GetClicked(). For example, bar->GetClicked()->GetName(); will return the name of the last clicked button. {; gROOT.Reset(""a"");; TControlBar bar(""vertical"");; bar.AddButton(""Help to run demos"","".x demoshelp.C"",; ""Explains how to run the demos"");; bar.AddButton(""framework"", "".x framework.C"",; ""An Example of Object Oriented User Interface"");; bar.AddButton(""hsimple"", "".x hsimple.C"",; ""An Example Creating Histograms/Ntuples on File"");; bar.AddButton(""hsum"", "".x hsum.C"",; ""Filling histograms and some graphics options"");; bar.AddButton(""canvas"", "".x canvas.C"",; ""Canvas and Pad Management"");; bar.AddButton(""formula1"", "".x formula1.C"",; ""Simple Formula and Functions"");; bar.AddButton(""fillrandom"", "".x fillrandom.C"",; ""Histograms with Random Numbers from a Function"");; bar.AddButton(""fit1"", "".x fit1.C"",; ""A Simple Fitting Example"");; bar.AddButton(""h1draw"", "".x h1draw.C"",; ""Drawing Options for 1D Histograms"");; bar.AddButton(""graph"", "".x graph.C"",; ""Examples of a simple graph"");; bar.AddButton(""tornado"", "".x tornado.C"",; ""Examples of 3-D PolyMarkers"");; bar.AddButton(""shapes"", "".x shapes.C"",; ""The Geometry Shapes"");; bar.AddButton(""atlasna49"", "".x atlasna49.C"",; ""Creating and Viewing Geometries"");; bar.AddButton(""file_layout"", "".x file.C"",; ""The ROOT file format"");; bar.AddButton(""tree_layout"", "".x tree.C"",; ""The Tree Data Structure"");; bar.AddButton(""ntuple1"", "".x ntuple1.C"",; ""Ntuples and Selections"");; bar.AddButton(""run benchmarks"", "".x benchmarks.C"",; ""Runs all the ROOT benchmarks"");; bar.AddButton(""rootmarks"", "".x rootmarks.C"",; ""Prints an estimated ROOTMARKS for your machine"");; bar.AddButton(""edit_hsimple"", "".!ved hsimple.C &"",",MatchSource.WIKI,root/html532/TControlBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TControlBar.html
https://root.cern/root/html532/TControlBar.html:1582,Usability,Simpl,Simple,1582,".; To execute an item, click with the left mouse button.; To see the HELP of a button, click on the right mouse button. You have access to the last clicked button via the method; GetClicked(). For example, bar->GetClicked()->GetName(); will return the name of the last clicked button. {; gROOT.Reset(""a"");; TControlBar bar(""vertical"");; bar.AddButton(""Help to run demos"","".x demoshelp.C"",; ""Explains how to run the demos"");; bar.AddButton(""framework"", "".x framework.C"",; ""An Example of Object Oriented User Interface"");; bar.AddButton(""hsimple"", "".x hsimple.C"",; ""An Example Creating Histograms/Ntuples on File"");; bar.AddButton(""hsum"", "".x hsum.C"",; ""Filling histograms and some graphics options"");; bar.AddButton(""canvas"", "".x canvas.C"",; ""Canvas and Pad Management"");; bar.AddButton(""formula1"", "".x formula1.C"",; ""Simple Formula and Functions"");; bar.AddButton(""fillrandom"", "".x fillrandom.C"",; ""Histograms with Random Numbers from a Function"");; bar.AddButton(""fit1"", "".x fit1.C"",; ""A Simple Fitting Example"");; bar.AddButton(""h1draw"", "".x h1draw.C"",; ""Drawing Options for 1D Histograms"");; bar.AddButton(""graph"", "".x graph.C"",; ""Examples of a simple graph"");; bar.AddButton(""tornado"", "".x tornado.C"",; ""Examples of 3-D PolyMarkers"");; bar.AddButton(""shapes"", "".x shapes.C"",; ""The Geometry Shapes"");; bar.AddButton(""atlasna49"", "".x atlasna49.C"",; ""Creating and Viewing Geometries"");; bar.AddButton(""file_layout"", "".x file.C"",; ""The ROOT file format"");; bar.AddButton(""tree_layout"", "".x tree.C"",; ""The Tree Data Structure"");; bar.AddButton(""ntuple1"", "".x ntuple1.C"",; ""Ntuples and Selections"");; bar.AddButton(""run benchmarks"", "".x benchmarks.C"",; ""Runs all the ROOT benchmarks"");; bar.AddButton(""rootmarks"", "".x rootmarks.C"",; ""Prints an estimated ROOTMARKS for your machine"");; bar.AddButton(""edit_hsimple"", "".!ved hsimple.C &"",; ""Invokes the text editor on file hsimple.C"");; bar.AddButton(""Close Bar"", ""gROOT.Reset(\""a\"")"",; ""Close ControlBar"");; bar.Show();; gROOT.SaveContext();; }. /*. */. F",MatchSource.WIKI,root/html532/TControlBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TControlBar.html
https://root.cern/root/html532/TControlBar.html:1741,Usability,simpl,simple,1741,"clicked button via the method; GetClicked(). For example, bar->GetClicked()->GetName(); will return the name of the last clicked button. {; gROOT.Reset(""a"");; TControlBar bar(""vertical"");; bar.AddButton(""Help to run demos"","".x demoshelp.C"",; ""Explains how to run the demos"");; bar.AddButton(""framework"", "".x framework.C"",; ""An Example of Object Oriented User Interface"");; bar.AddButton(""hsimple"", "".x hsimple.C"",; ""An Example Creating Histograms/Ntuples on File"");; bar.AddButton(""hsum"", "".x hsum.C"",; ""Filling histograms and some graphics options"");; bar.AddButton(""canvas"", "".x canvas.C"",; ""Canvas and Pad Management"");; bar.AddButton(""formula1"", "".x formula1.C"",; ""Simple Formula and Functions"");; bar.AddButton(""fillrandom"", "".x fillrandom.C"",; ""Histograms with Random Numbers from a Function"");; bar.AddButton(""fit1"", "".x fit1.C"",; ""A Simple Fitting Example"");; bar.AddButton(""h1draw"", "".x h1draw.C"",; ""Drawing Options for 1D Histograms"");; bar.AddButton(""graph"", "".x graph.C"",; ""Examples of a simple graph"");; bar.AddButton(""tornado"", "".x tornado.C"",; ""Examples of 3-D PolyMarkers"");; bar.AddButton(""shapes"", "".x shapes.C"",; ""The Geometry Shapes"");; bar.AddButton(""atlasna49"", "".x atlasna49.C"",; ""Creating and Viewing Geometries"");; bar.AddButton(""file_layout"", "".x file.C"",; ""The ROOT file format"");; bar.AddButton(""tree_layout"", "".x tree.C"",; ""The Tree Data Structure"");; bar.AddButton(""ntuple1"", "".x ntuple1.C"",; ""Ntuples and Selections"");; bar.AddButton(""run benchmarks"", "".x benchmarks.C"",; ""Runs all the ROOT benchmarks"");; bar.AddButton(""rootmarks"", "".x rootmarks.C"",; ""Prints an estimated ROOTMARKS for your machine"");; bar.AddButton(""edit_hsimple"", "".!ved hsimple.C &"",; ""Invokes the text editor on file hsimple.C"");; bar.AddButton(""Close Bar"", ""gROOT.Reset(\""a\"")"",; ""Close ControlBar"");; bar.Show();; gROOT.SaveContext();; }. /*. */. Function Members (Methods); public:. TControlBar(); TControlBar(const TControlBar&); TControlBar(const char* orientation, const char* title = """"); TC",MatchSource.WIKI,root/html532/TControlBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TControlBar.html
https://root.cern/root/html532/TControlBar.html:3419,Usability,Clear,Clear,3419,,MatchSource.WIKI,root/html532/TControlBar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TControlBar.html
https://root.cern/root/html532/TControlBarButton.html:1489,Availability,Error,Error,1489,"st TControlBarButton&); TControlBarButton(const char* label, const char* action = """", const char* hint = """", const char* type = ""button""); virtual~TControlBarButton(); voidTObject::AbstractMethod(const char* method) const; virtual voidAction(); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidCreate(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*GetAction() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual Int_tGetType() const; virtual UInt_tTObject::Get",MatchSource.WIKI,root/html532/TControlBarButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TControlBarButton.html
https://root.cern/root/html532/TControlBarButton.html:1618,Availability,error,error,1618,"button""); virtual~TControlBarButton(); voidTObject::AbstractMethod(const char* method) const; virtual voidAction(); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidCreate(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*GetAction() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual Int_tGetType() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::In",MatchSource.WIKI,root/html532/TControlBarButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TControlBarButton.html
https://root.cern/root/html532/TControlBarButton.html:1702,Availability,error,error,1702,"d) const; virtual voidAction(); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidCreate(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*GetAction() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual Int_tGetType() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFro",MatchSource.WIKI,root/html532/TControlBarButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TControlBarButton.html
https://root.cern/root/html532/TControlBarButton.html:400,Energy Efficiency,consumption,consumption,400,". TControlBarButton. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » GPAD; » TControlBarButton. class TControlBarButton: public TNamed. TControlBarButton. TControlBarButtons are created by the TControlBar. Not for general; consumption. Function Members (Methods); public:. TControlBarButton(); TControlBarButton(const TControlBarButton&); TControlBarButton(const char* label, const char* action = """", const char* hint = """", const char* type = ""button""); virtual~TControlBarButton(); voidTObject::AbstractMethod(const char* method) const; virtual voidAction(); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidCreate(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(c",MatchSource.WIKI,root/html532/TControlBarButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TControlBarButton.html
https://root.cern/root/html532/TControlBarButton.html:2694,Modifiability,Inherit,InheritsFrom,2694,"* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*GetAction() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual Int_tGetType() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObje",MatchSource.WIKI,root/html532/TControlBarButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TControlBarButton.html
https://root.cern/root/html532/TControlBarButton.html:2760,Modifiability,Inherit,InheritsFrom,2760," px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*GetAction() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual Int_tGetType() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TControlBarButton&operato",MatchSource.WIKI,root/html532/TControlBarButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TControlBarButton.html
https://root.cern/root/html532/TControlBarButton.html:6027,Modifiability,Inherit,Inheritance,6027,"(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum { kButton; kDrawnButton; kSeparator; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringfActionaction to be executed; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; Int_tfTypebutton type. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TControlBarButton(); Default controlbar button ctor. TControlBarButton(const char* label, const char* action = """", const char* hint = """", const char* type = ""button""); Create controlbar button. void Action(); Execute controlbar button command. void SetAction(const char* action); Set action to be executed by this button. void SetType(const char* type); Set button type. Type can be either ""button"", ""drawnbutton"" or; ""separator"". String is case insensitive. Default is ""button"". void SetType(Int_t type); Set button type. Type can be either kButton, kDrawnButton or kSeparator.; Default is kButton. TControlBarButton(). virtual ~TControlBarButton(); { }. void Create(); { }. const char * GetAction() const; { return fAction.Data(); }. Int_t GetType() const; { return fType; }. » Author: Nenad Buncic 20/02/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gpad:$Id: TControlBarButton.h 20882 2007-11-19 11:31:26Z ",MatchSource.WIKI,root/html532/TControlBarButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TControlBarButton.html
https://root.cern/root/html532/TControlBarButton.html:6040,Modifiability,Inherit,Inherited,6040,"(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum { kButton; kDrawnButton; kSeparator; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringfActionaction to be executed; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; Int_tfTypebutton type. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TControlBarButton(); Default controlbar button ctor. TControlBarButton(const char* label, const char* action = """", const char* hint = """", const char* type = ""button""); Create controlbar button. void Action(); Execute controlbar button command. void SetAction(const char* action); Set action to be executed by this button. void SetType(const char* type); Set button type. Type can be either ""button"", ""drawnbutton"" or; ""separator"". String is case insensitive. Default is ""button"". void SetType(Int_t type); Set button type. Type can be either kButton, kDrawnButton or kSeparator.; Default is kButton. TControlBarButton(). virtual ~TControlBarButton(); { }. void Create(); { }. const char * GetAction() const; { return fAction.Data(); }. Int_t GetType() const; { return fType; }. » Author: Nenad Buncic 20/02/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gpad:$Id: TControlBarButton.h 20882 2007-11-19 11:31:26Z ",MatchSource.WIKI,root/html532/TControlBarButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TControlBarButton.html
https://root.cern/root/html532/TControlBarButton.html:2584,Security,Hash,Hash,2584,"hod, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*GetAction() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual Int_tGetType() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator ne",MatchSource.WIKI,root/html532/TControlBarButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TControlBarButton.html
https://root.cern/root/html532/TControlBarButton.html:5045,Testability,Test,TestBit,5045,"Object::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TControlBarButton&operator=(const TControlBarButton&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSetAction(const char* action); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidSetType(const char* type); virtual voidSetType(Int_t type); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TControlBarButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TControlBarButton.html
https://root.cern/root/html532/TControlBarButton.html:5084,Testability,Test,TestBits,5084,"Object::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TControlBarButton&operator=(const TControlBarButton&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSetAction(const char* action); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidSetType(const char* type); virtual voidSetType(Int_t type); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TControlBarButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TControlBarButton.html
https://root.cern/root/html532/TControlBarButton.html:924,Usability,Clear,Clear,924," TControlBarButton(); TControlBarButton(const TControlBarButton&); TControlBarButton(const char* label, const char* action = """", const char* hint = """", const char* type = ""button""); virtual~TControlBarButton(); voidTObject::AbstractMethod(const char* method) const; virtual voidAction(); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidCreate(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(c",MatchSource.WIKI,root/html532/TControlBarButton.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TControlBarButton.html
https://root.cern/root/html532/TControlBarImp.html:1291,Modifiability,Inherit,Inheritance,1291," class charts. ROOT; » CORE; » BASE; » TControlBarImp. class TControlBarImp. TControlBarImp. ABC describing GUI independent control bar. Function Members (Methods); public:. TControlBarImp(const TControlBarImp&); TControlBarImp(TControlBar* c, const char* = """"); TControlBarImp(TControlBar* c, const char*, Int_t, Int_t); virtual~TControlBarImp(); static TClass*Class(); virtual voidCreate(); virtual TControlBarButton*GetClicked(); virtual TControlBar*GetControlBar(); virtual voidHide(); virtual TClass*IsA() const; TControlBarImp&operator=(const TControlBarImp&); virtual voidSetButtonState(const char*, Int_t); virtual voidSetButtonWidth(UInt_t); virtual voidSetFont(const char*); virtual voidSetTextColor(const char*); virtual voidShow(); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; protected:. TControlBarButton*fClickedLast clicked button ; TControlBar*fControlBarTControlBar associated with this implementation; Int_tfXposInitial x position; Int_tfYposInitial y position. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TControlBarImp(TControlBar* c, const char* = """"); { }. TControlBarImp(TControlBar* c, const char* , Int_t , Int_t ); { }. virtual ~TControlBarImp(); { }. TControlBar * GetControlBar(); { return fControlBar; }. TControlBarButton * GetClicked(); { return fClicked; }. void Create(); { }. void Hide(); { }. void Show(); { }. void SetFont(const char* ); { }. void SetTextColor(const char* ); { }. void SetButtonState(const char* , Int_t ); { }. void SetButtonWidth(UInt_t ); { }. » Author: Nenad Buncic 20/02/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TControlBarImp.h 35422 2010-09-20 08:01:27Z brun $ » Last generated: 2011-11-03 20:11; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TControlBarImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TControlBarImp.html
https://root.cern/root/html532/TControlBarImp.html:1304,Modifiability,Inherit,Inherited,1304," class charts. ROOT; » CORE; » BASE; » TControlBarImp. class TControlBarImp. TControlBarImp. ABC describing GUI independent control bar. Function Members (Methods); public:. TControlBarImp(const TControlBarImp&); TControlBarImp(TControlBar* c, const char* = """"); TControlBarImp(TControlBar* c, const char*, Int_t, Int_t); virtual~TControlBarImp(); static TClass*Class(); virtual voidCreate(); virtual TControlBarButton*GetClicked(); virtual TControlBar*GetControlBar(); virtual voidHide(); virtual TClass*IsA() const; TControlBarImp&operator=(const TControlBarImp&); virtual voidSetButtonState(const char*, Int_t); virtual voidSetButtonWidth(UInt_t); virtual voidSetFont(const char*); virtual voidSetTextColor(const char*); virtual voidShow(); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; protected:. TControlBarButton*fClickedLast clicked button ; TControlBar*fControlBarTControlBar associated with this implementation; Int_tfXposInitial x position; Int_tfYposInitial y position. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TControlBarImp(TControlBar* c, const char* = """"); { }. TControlBarImp(TControlBar* c, const char* , Int_t , Int_t ); { }. virtual ~TControlBarImp(); { }. TControlBar * GetControlBar(); { return fControlBar; }. TControlBarButton * GetClicked(); { return fClicked; }. void Create(); { }. void Hide(); { }. void Show(); { }. void SetFont(const char* ); { }. void SetTextColor(const char* ); { }. void SetButtonState(const char* , Int_t ); { }. void SetButtonWidth(UInt_t ); { }. » Author: Nenad Buncic 20/02/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TControlBarImp.h 35422 2010-09-20 08:01:27Z brun $ » Last generated: 2011-11-03 20:11; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TControlBarImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TControlBarImp.html
https://root.cern/root/html532/TCrown.html:2368,Availability,Error,Error,2368,"onst char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidCopy(TObject& crown) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTEllipse::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawCrown(Double_t x1, Double_t y1, Double_t radin, Double_t radout, Double_t phimin = 0, Double_t phimax = 360, Option_t* option = """"); virtual voidTEllipse::DrawEllipse(Double_t x1, Double_t y1, Double_t r1, Double_t r2, Double_t phimin, Double_t phimax, Double_t theta, Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TObject::GetName() const; Bool_tTEllipse::GetNoEdges() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static ",MatchSource.WIKI,root/html532/TCrown.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCrown.html
https://root.cern/root/html532/TCrown.html:2497,Availability,error,error,2497,"ame = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidCopy(TObject& crown) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTEllipse::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawCrown(Double_t x1, Double_t y1, Double_t radin, Double_t radout, Double_t phimin = 0, Double_t phimax = 360, Option_t* option = """"); virtual voidTEllipse::DrawEllipse(Double_t x1, Double_t y1, Double_t r1, Double_t r2, Double_t phimin, Double_t phimax, Double_t theta, Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TObject::GetName() const; Bool_tTEllipse::GetNoEdges() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_tTEllipse::GetPhimax() const; Double_tTEllips",MatchSource.WIKI,root/html532/TCrown.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCrown.html
https://root.cern/root/html532/TCrown.html:2581,Availability,error,error,2581,"idCopy(TObject& crown) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTEllipse::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawCrown(Double_t x1, Double_t y1, Double_t radin, Double_t radout, Double_t phimin = 0, Double_t phimax = 360, Option_t* option = """"); virtual voidTEllipse::DrawEllipse(Double_t x1, Double_t y1, Double_t r1, Double_t r2, Double_t phimin, Double_t phimax, Double_t theta, Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TObject::GetName() const; Bool_tTEllipse::GetNoEdges() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_tTEllipse::GetPhimax() const; Double_tTEllipse::GetPhimin() const; Double_tTEllipse::GetR1() const; Double_tTEllipse::GetR2() con",MatchSource.WIKI,root/html532/TCrown.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCrown.html
https://root.cern/root/html532/TCrown.html:6655,Deployability,TOGGLE,TOGGLE,6655,"t_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTAttFill::SaveFillAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1001); virtual voidTAttLine::SaveLineAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t widdef = 1); virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTEllipse::SetNoEdges(Bool_t noEdges = kTRUE)TOGGLE GETTER ; static voidTObject::SetObjectStat(Bool_t stat); virtual voidTEllipse::SetPhimax(Double_t phi = 360)MENU ; virtual voidTEllipse::SetPhimin(Double_t phi = 0)MENU ; virtual voidTEllipse::SetR1(Double_t r1)MENU ; virtual voidTEllipse::SetR2(Double_t r2)MENU ; virtual voidTEllipse::SetTheta(Double_t theta = 0)MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTEllipse::SetX1(Double_t x1)MENU ; virtual voidTEllipse::SetY1(Double_t y1)MENU ; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t o",MatchSource.WIKI,root/html532/TCrown.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCrown.html
https://root.cern/root/html532/TCrown.html:3965,Modifiability,Inherit,InheritsFrom,3965,"or() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TObject::GetName() const; Bool_tTEllipse::GetNoEdges() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_tTEllipse::GetPhimax() const; Double_tTEllipse::GetPhimin() const; Double_tTEllipse::GetR1() const; Double_tTEllipse::GetR2() const; Double_tTEllipse::GetTheta() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTEllipse::GetX1() const; Double_tTEllipse::GetY1() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTEllipse::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::oper",MatchSource.WIKI,root/html532/TCrown.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCrown.html
https://root.cern/root/html532/TCrown.html:4031,Modifiability,Inherit,InheritsFrom,4031," const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TObject::GetName() const; Bool_tTEllipse::GetNoEdges() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_tTEllipse::GetPhimax() const; Double_tTEllipse::GetPhimin() const; Double_tTEllipse::GetR1() const; Double_tTEllipse::GetR2() const; Double_tTEllipse::GetTheta() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTEllipse::GetX1() const; Double_tTEllipse::GetY1() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTEllipse::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t",MatchSource.WIKI,root/html532/TCrown.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCrown.html
https://root.cern/root/html532/TCrown.html:8692,Modifiability,Inherit,Inheritance,8692,"oidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TEllipse::[unnamed] { kNoEdges; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Double_tTEllipse::fPhimaxMaximum angle (degrees); Double_tTEllipse::fPhiminMinimum angle (degrees); Double_tTEllipse::fR1first radius; Double_tTEllipse::fR2second radius; Double_tTEllipse::fThetaRotation angle (degrees); Double_tTEllipse::fX1X coordinate of centre; Double_tTEllipse::fY1Y coordinate of centre. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCrown(). Crown default constructor.; ; . TCrown(Double_t x1, Double_t y1, Double_t radin, Double_t radout, Double_t phimin = 0, Double_t phimax = 360). Crown normal constructor.; ; x1,y1 : coordinates of centre of crown; radin : inner crown radius; radout : outer crown radius; phimin : min angle in degrees (default is 0); phimax : max angle in degrees (default is 360); ; When a crown sector only is drawn, the lines connecting the center; of the crown to the edges are drawn by default. One can specify; the drawing option ""only"" to not draw these lines.; ; . TCrown(const TCrown& crown). Crown copy constructor.; ; . ~TCrown(). Crown default destructor.; ; . void Copy(TObject& crown) const. Copy this crown to crown.; ; . Int_t DistancetoPrimitive(Int_t px, Int_t py). Compute distance from point px,py to a crown.; ; If crown is filled, return OK if we are inside; otherwise, crown is found if near the crown edges.; ; . void DrawCrown(Double",MatchSource.WIKI,root/html532/TCrown.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCrown.html
https://root.cern/root/html532/TCrown.html:8705,Modifiability,Inherit,Inherited,8705,"oidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TEllipse::[unnamed] { kNoEdges; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Double_tTEllipse::fPhimaxMaximum angle (degrees); Double_tTEllipse::fPhiminMinimum angle (degrees); Double_tTEllipse::fR1first radius; Double_tTEllipse::fR2second radius; Double_tTEllipse::fThetaRotation angle (degrees); Double_tTEllipse::fX1X coordinate of centre; Double_tTEllipse::fY1Y coordinate of centre. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCrown(). Crown default constructor.; ; . TCrown(Double_t x1, Double_t y1, Double_t radin, Double_t radout, Double_t phimin = 0, Double_t phimax = 360). Crown normal constructor.; ; x1,y1 : coordinates of centre of crown; radin : inner crown radius; radout : outer crown radius; phimin : min angle in degrees (default is 0); phimax : max angle in degrees (default is 360); ; When a crown sector only is drawn, the lines connecting the center; of the crown to the edges are drawn by default. One can specify; the drawing option ""only"" to not draw these lines.; ; . TCrown(const TCrown& crown). Crown copy constructor.; ; . ~TCrown(). Crown default destructor.; ; . void Copy(TObject& crown) const. Copy this crown to crown.; ; . Int_t DistancetoPrimitive(Int_t px, Int_t py). Compute distance from point px,py to a crown.; ; If crown is filled, return OK if we are inside; otherwise, crown is found if near the crown edges.; ; . void DrawCrown(Double",MatchSource.WIKI,root/html532/TCrown.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCrown.html
https://root.cern/root/html532/TCrown.html:3855,Security,Hash,Hash,3855," Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TObject::GetName() const; Bool_tTEllipse::GetNoEdges() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_tTEllipse::GetPhimax() const; Double_tTEllipse::GetPhimin() const; Double_tTEllipse::GetR1() const; Double_tTEllipse::GetR2() const; Double_tTEllipse::GetTheta() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTEllipse::GetX1() const; Double_tTEllipse::GetY1() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTEllipse::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); sta",MatchSource.WIKI,root/html532/TCrown.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCrown.html
https://root.cern/root/html532/TCrown.html:7333,Testability,Test,TestBit,7333,"const char* filename = """", Option_t* option = """") constMENU ; virtual voidTAttFill::SaveFillAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1001); virtual voidTAttLine::SaveLineAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t widdef = 1); virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTEllipse::SetNoEdges(Bool_t noEdges = kTRUE)TOGGLE GETTER ; static voidTObject::SetObjectStat(Bool_t stat); virtual voidTEllipse::SetPhimax(Double_t phi = 360)MENU ; virtual voidTEllipse::SetPhimin(Double_t phi = 0)MENU ; virtual voidTEllipse::SetR1(Double_t r1)MENU ; virtual voidTEllipse::SetR2(Double_t r2)MENU ; virtual voidTEllipse::SetTheta(Double_t theta = 0)MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTEllipse::SetX1(Double_t x1)MENU ; virtual voidTEllipse::SetY1(Double_t y1)MENU ; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TCrown.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCrown.html
https://root.cern/root/html532/TCrown.html:7372,Testability,Test,TestBits,7372,"const char* filename = """", Option_t* option = """") constMENU ; virtual voidTAttFill::SaveFillAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1001); virtual voidTAttLine::SaveLineAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t widdef = 1); virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTEllipse::SetNoEdges(Bool_t noEdges = kTRUE)TOGGLE GETTER ; static voidTObject::SetObjectStat(Bool_t stat); virtual voidTEllipse::SetPhimax(Double_t phi = 360)MENU ; virtual voidTEllipse::SetPhimin(Double_t phi = 0)MENU ; virtual voidTEllipse::SetR1(Double_t r1)MENU ; virtual voidTEllipse::SetR2(Double_t r2)MENU ; virtual voidTEllipse::SetTheta(Double_t theta = 0)MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTEllipse::SetX1(Double_t x1)MENU ; virtual voidTEllipse::SetY1(Double_t y1)MENU ; virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TCrown.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCrown.html
https://root.cern/root/html532/TCrown.html:1430,Usability,Clear,Clear,1430," TCrown(); TCrown(const TCrown& crown); TCrown(Double_t x1, Double_t y1, Double_t radin, Double_t radout, Double_t phimin = 0, Double_t phimax = 360); virtual~TCrown(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidCopy(TObject& crown) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTEllipse::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; vir",MatchSource.WIKI,root/html532/TCrown.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCrown.html
https://root.cern/root/html532/TCTUB.html:2319,Availability,Error,Error,2319,"loat_t coslx, Float_t cosly, Float_t coslz, Float_t coshx, Float_t coshy, Float_t coshz); virtual~TCTUB(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTTUBS::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Float_tTTUBE::GetAspectRatio() const; virtual const TBuffer3D&TTUBS::GetBuffer3D(Int_t reqSections) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Float_tTTUBE::GetDz() const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle",MatchSource.WIKI,root/html532/TCTUB.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCTUB.html
https://root.cern/root/html532/TCTUB.html:2448,Availability,error,error,2448,"ethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTTUBS::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Float_tTTUBE::GetAspectRatio() const; virtual const TBuffer3D&TTUBS::GetBuffer3D(Int_t reqSections) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Float_tTTUBE::GetDz() const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; TMaterial*TShape::GetMaterial() const; virtual const char*TNamed::GetNam",MatchSource.WIKI,root/html532/TCTUB.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCTUB.html
https://root.cern/root/html532/TCTUB.html:2532,Availability,error,error,2532,"""); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTTUBS::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Float_tTTUBE::GetAspectRatio() const; virtual const TBuffer3D&TTUBS::GetBuffer3D(Int_t reqSections) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Float_tTTUBE::GetDz() const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; TMaterial*TShape::GetMaterial() const; virtual const char*TNamed::GetName() const; virtual Int_tTTUBE::GetNdiv() const; virtual Int_tTShape::GetNumber() con",MatchSource.WIKI,root/html532/TCTUB.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCTUB.html
https://root.cern/root/html532/TCTUB.html:4201,Modifiability,Inherit,InheritsFrom,4201,"*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; TMaterial*TShape::GetMaterial() const; virtual const char*TNamed::GetName() const; virtual Int_tTTUBE::GetNdiv() const; virtual Int_tTShape::GetNumber() const; virtual Int_tTTUBE::GetNumberOfDivisions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Float_tTTUBS::GetPhi1() const; virtual Float_tTTUBS::GetPhi2() const; virtual Float_tTTUBE::GetRmax() const; virtual Float_tTTUBE::GetRmin() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Int_tTShape::GetVisibility() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operato",MatchSource.WIKI,root/html532/TCTUB.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCTUB.html
https://root.cern/root/html532/TCTUB.html:4267,Modifiability,Inherit,InheritsFrom,4267,"or() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; TMaterial*TShape::GetMaterial() const; virtual const char*TNamed::GetName() const; virtual Int_tTTUBE::GetNdiv() const; virtual Int_tTShape::GetNumber() const; virtual Int_tTTUBE::GetNumberOfDivisions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Float_tTTUBS::GetPhi1() const; virtual Float_tTTUBS::GetPhi2() const; virtual Float_tTTUBE::GetRmax() const; virtual Float_tTTUBE::GetRmin() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Int_tTShape::GetVisibility() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz",MatchSource.WIKI,root/html532/TCTUB.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCTUB.html
https://root.cern/root/html532/TCTUB.html:9633,Modifiability,Inherit,Inheritance,9633," in Y)/(the ellipse semi-axis in X); Double_t*TTUBE::fCoTab! Table of cos(fPhi1) .... cos(fPhil+fDphi1); Float_tfCosHigh[3]dir cosinus of surface cutting tube at high z; Float_tfCosLow[3]dir cosinus of surface cutting tube at low z; Float_tTTUBE::fDzhalf length in z; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TMaterial*TShape::fMaterialPointer to material; TStringTNamed::fNameobject identifier; Int_tTTUBE::fNdivnumber of segments (precision); Int_tTShape::fNumberShape number; Float_tTTUBS::fPhi1first phi limit; Float_tTTUBS::fPhi2second phi limit; Float_tTTUBE::fRmaxellipse semi-axis in X outside; Float_tTTUBE::fRminellipse semi-axis in X inside; Double_t*TTUBE::fSiTab! Table of sin(fPhi1) .... sin(fPhil+fDphi1); TStringTNamed::fTitleobject title; Int_tTShape::fVisibilityVisibility flag. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCTUB(); CTUB shape default constructor. TCTUB(const char* name, const char* title, const char* material, Float_t rmin, Float_t rmax, Float_t dz, Float_t phi1, Float_t phi2, Float_t coslx, Float_t cosly, Float_t coslz, Float_t coshx, Float_t coshy, Float_t coshz); CTUB shape normal constructor. TCTUB(const char* name, const char* title, const char* material, Float_t rmin, Float_t rmax, Float_t dz, Float_t phi1, Float_t phi2, Float_t* lowNormal, Float_t* highNormal); CTUB shape normal constructor. ~TCTUB(); CTUB shape default destructor. void SetPoints(Double_t* points) const; Create TUBS points. void Streamer(TBuffer& b); Stream an object of class TCTUB. TCTUB(). » Author: Rene Brun 26/06/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/g3d:$Id: TCTUB.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regardin",MatchSource.WIKI,root/html532/TCTUB.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCTUB.html
https://root.cern/root/html532/TCTUB.html:9646,Modifiability,Inherit,Inherited,9646," in Y)/(the ellipse semi-axis in X); Double_t*TTUBE::fCoTab! Table of cos(fPhi1) .... cos(fPhil+fDphi1); Float_tfCosHigh[3]dir cosinus of surface cutting tube at high z; Float_tfCosLow[3]dir cosinus of surface cutting tube at low z; Float_tTTUBE::fDzhalf length in z; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TMaterial*TShape::fMaterialPointer to material; TStringTNamed::fNameobject identifier; Int_tTTUBE::fNdivnumber of segments (precision); Int_tTShape::fNumberShape number; Float_tTTUBS::fPhi1first phi limit; Float_tTTUBS::fPhi2second phi limit; Float_tTTUBE::fRmaxellipse semi-axis in X outside; Float_tTTUBE::fRminellipse semi-axis in X inside; Double_t*TTUBE::fSiTab! Table of sin(fPhi1) .... sin(fPhil+fDphi1); TStringTNamed::fTitleobject title; Int_tTShape::fVisibilityVisibility flag. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCTUB(); CTUB shape default constructor. TCTUB(const char* name, const char* title, const char* material, Float_t rmin, Float_t rmax, Float_t dz, Float_t phi1, Float_t phi2, Float_t coslx, Float_t cosly, Float_t coslz, Float_t coshx, Float_t coshy, Float_t coshz); CTUB shape normal constructor. TCTUB(const char* name, const char* title, const char* material, Float_t rmin, Float_t rmax, Float_t dz, Float_t phi1, Float_t phi2, Float_t* lowNormal, Float_t* highNormal); CTUB shape normal constructor. ~TCTUB(); CTUB shape default destructor. void SetPoints(Double_t* points) const; Create TUBS points. void Streamer(TBuffer& b); Stream an object of class TCTUB. TCTUB(). » Author: Rene Brun 26/06/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/g3d:$Id: TCTUB.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regardin",MatchSource.WIKI,root/html532/TCTUB.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCTUB.html
https://root.cern/root/html532/TCTUB.html:4091,Security,Hash,Hash,4091,"; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; TMaterial*TShape::GetMaterial() const; virtual const char*TNamed::GetName() const; virtual Int_tTTUBE::GetNdiv() const; virtual Int_tTShape::GetNumber() const; virtual Int_tTTUBE::GetNumberOfDivisions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Float_tTTUBS::GetPhi1() const; virtual Float_tTTUBS::GetPhi2() const; virtual Float_tTTUBE::GetRmax() const; virtual Float_tTTUBE::GetRmin() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Int_tTShape::GetVisibility() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static",MatchSource.WIKI,root/html532/TCTUB.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCTUB.html
https://root.cern/root/html532/TCTUB.html:7366,Testability,Test,TestBit,7366,"ENU ; virtual voidTAttFill::SaveFillAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1001); virtual voidTAttLine::SaveLineAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t widdef = 1); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTTUBE::SetAspectRatio(Float_t factor = 1); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTShape::SetName(const char* name); virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTTUBE::SetNumberOfDivisions(Int_t ndiv); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTShape::SetVisibility(Int_t vis)MENU ; virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidTTUBS::Sizeof3D() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTShape::TransformPoints(Double_t* points, UInt_t NbPnts) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TCTUB.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCTUB.html
https://root.cern/root/html532/TCTUB.html:7405,Testability,Test,TestBits,7405,"ENU ; virtual voidTAttFill::SaveFillAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1001); virtual voidTAttLine::SaveLineAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t widdef = 1); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTTUBE::SetAspectRatio(Float_t factor = 1); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTShape::SetName(const char* name); virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTTUBE::SetNumberOfDivisions(Int_t ndiv); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTShape::SetVisibility(Int_t vis)MENU ; virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidTTUBS::Sizeof3D() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTShape::TransformPoints(Double_t* points, UInt_t NbPnts) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TCTUB.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCTUB.html
https://root.cern/root/html532/TCTUB.html:1671,Usability,Clear,Clear,1671," TCTUB(); TCTUB(const TCTUB&); TCTUB(const char* name, const char* title, const char* material, Float_t rmin, Float_t rmax, Float_t dz, Float_t phi1, Float_t phi2, Float_t* lowNormal, Float_t* highNormal); TCTUB(const char* name, const char* title, const char* material, Float_t rmin, Float_t rmax, Float_t dz, Float_t phi1, Float_t phi2, Float_t coslx, Float_t cosly, Float_t coslz, Float_t coshx, Float_t coshy, Float_t coshz); virtual~TCTUB(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1",MatchSource.WIKI,root/html532/TCTUB.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCTUB.html
https://root.cern/root/html532/TCurlyArc.html:1925,Availability,Error,Error,1925,"bject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidBuild(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTPolyLine::Copy(TObject& polyline) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTPolyLine::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTPolyLine::DrawPolyLine(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tTCurlyLine::GetAmplitude() const; Bool_tTCurlyLine::GetCurly() const; static Double_tGetDefaultAmplitude(); static Bool_tGetDefaultIsCurly(); static Double_tGetDefaultWaveLength(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTCurlyLine::GetEndX() const; Double_tTCurlyLine::GetEndY() const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Int_tTPolyLine::GetLa",MatchSource.WIKI,root/html532/TCurlyArc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyArc.html
https://root.cern/root/html532/TCurlyArc.html:2054,Availability,error,error,2054,"se(TBrowser* b); virtual voidBuild(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTPolyLine::Copy(TObject& polyline) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTPolyLine::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTPolyLine::DrawPolyLine(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tTCurlyLine::GetAmplitude() const; Bool_tTCurlyLine::GetCurly() const; static Double_tGetDefaultAmplitude(); static Bool_tGetDefaultIsCurly(); static Double_tGetDefaultWaveLength(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTCurlyLine::GetEndX() const; Double_tTCurlyLine::GetEndY() const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Int_tTPolyLine::GetLastPoint() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAt",MatchSource.WIKI,root/html532/TCurlyArc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyArc.html
https://root.cern/root/html532/TCurlyArc.html:2138,Availability,error,error,2138,"ect::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTPolyLine::Copy(TObject& polyline) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTPolyLine::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTPolyLine::DrawPolyLine(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tTCurlyLine::GetAmplitude() const; Bool_tTCurlyLine::GetCurly() const; static Double_tGetDefaultAmplitude(); static Bool_tGetDefaultIsCurly(); static Double_tGetDefaultWaveLength(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTCurlyLine::GetEndX() const; Double_tTCurlyLine::GetEndY() const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Int_tTPolyLine::GetLastPoint() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; Int_tTPolyLine::GetN() const; virtual const char*TObjec",MatchSource.WIKI,root/html532/TCurlyArc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyArc.html
https://root.cern/root/html532/TCurlyArc.html:11244,Deployability,release,released,11244,"edefault amplitude; static Bool_tfgDefaultIsCurlydefault curly type; static Double_tfgDefaultWaveLengthdefault wavelength . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCurlyArc(Double_t x1, Double_t y1, Double_t rad, Double_t phimin, Double_t phimax, Double_t wl = .02, Double_t amp = .01); create a new TCurlyarc with center (x1, y1) and radius rad.; The wavelength and amplitude are given in percent of the line length; phimin and phimax are given in degrees. void Build(); Create a curly (Gluon) or wavy (Gamma) arc. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute distance from point px,py to an arc. Compute the closest distance of approach from point px,py to this arc.; The distance is computed in pixels units. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute action corresponding to one event. This member function is called when a TCurlyArc is clicked with the locator. If Left button clicked on one of the line end points, this point; follows the cursor until button is released. if Middle button clicked, the line is moved parallel to itself; until the button is released. void SavePrimitive(ostream& out, Option_t* = """"); Save primitive as a C++ statement(s) on output stream out. void SetCenter(Double_t x1, Double_t y1); Set Curly Arc center. void SetRadius(Double_t radius); Set Curly Arc radius. void SetPhimin(Double_t phimin); Set Curly Arc minimum Phi. void SetPhimax(Double_t phimax); Set Curly Arc maximum Phi. void SetDefaultWaveLength(Double_t WaveLength); Set default wave length. void SetDefaultAmplitude(Double_t Amplitude); Set default wave amplitude. void SetDefaultIsCurly(Bool_t IsCurly); Set default ""IsCurly"". Double_t GetDefaultWaveLength(); Get default wave length. Double_t GetDefaultAmplitude(); Get default wave amplitude. Bool_t GetDefaultIsCurly(); Get default ""IsCurly"". TCurlyArc(); {;}. TCurlyArc(Double_t x1, Double_t y1, Double_t rad, Double_t phimin, Double_t phimax, Double_t wl = .02, Do",MatchSource.WIKI,root/html532/TCurlyArc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyArc.html
https://root.cern/root/html532/TCurlyArc.html:11338,Deployability,release,released,11338,"default wavelength . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCurlyArc(Double_t x1, Double_t y1, Double_t rad, Double_t phimin, Double_t phimax, Double_t wl = .02, Double_t amp = .01); create a new TCurlyarc with center (x1, y1) and radius rad.; The wavelength and amplitude are given in percent of the line length; phimin and phimax are given in degrees. void Build(); Create a curly (Gluon) or wavy (Gamma) arc. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute distance from point px,py to an arc. Compute the closest distance of approach from point px,py to this arc.; The distance is computed in pixels units. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute action corresponding to one event. This member function is called when a TCurlyArc is clicked with the locator. If Left button clicked on one of the line end points, this point; follows the cursor until button is released. if Middle button clicked, the line is moved parallel to itself; until the button is released. void SavePrimitive(ostream& out, Option_t* = """"); Save primitive as a C++ statement(s) on output stream out. void SetCenter(Double_t x1, Double_t y1); Set Curly Arc center. void SetRadius(Double_t radius); Set Curly Arc radius. void SetPhimin(Double_t phimin); Set Curly Arc minimum Phi. void SetPhimax(Double_t phimax); Set Curly Arc maximum Phi. void SetDefaultWaveLength(Double_t WaveLength); Set default wave length. void SetDefaultAmplitude(Double_t Amplitude); Set default wave amplitude. void SetDefaultIsCurly(Bool_t IsCurly); Set default ""IsCurly"". Double_t GetDefaultWaveLength(); Get default wave length. Double_t GetDefaultAmplitude(); Get default wave amplitude. Bool_t GetDefaultIsCurly(); Get default ""IsCurly"". TCurlyArc(); {;}. TCurlyArc(Double_t x1, Double_t y1, Double_t rad, Double_t phimin, Double_t phimax, Double_t wl = .02, Double_t amp = .01); {;}. Double_t GetRadius() const; {return fR1;}. Double_t GetPhimin() const; {return",MatchSource.WIKI,root/html532/TCurlyArc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyArc.html
https://root.cern/root/html532/TCurlyArc.html:527,Modifiability,inherit,inheritance,527,". TCurlyArc. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » GRAF; » TCurlyArc. class TCurlyArc: public TCurlyLine. This class implements curly or wavy arcs typically used to draw Feynman diagrams.; Amplitudes and wavelengths may be specified in the constructors,; via commands or interactively from popup menus.; The class make use of TCurlyLine by inheritance, ExecuteEvent methods; are highly inspired from the methods used in TPolyLine and TArc.; The picture below has been generated by the tutorial feynman. /*. */. Function Members (Methods); public:. TCurlyArc(); TCurlyArc(const TCurlyArc&); TCurlyArc(Double_t x1, Double_t y1, Double_t rad, Double_t phimin, Double_t phimax, Double_t wl = .02, Double_t amp = .01); virtual~TCurlyArc(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidBuild(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTPolyLine::Copy(TObject& polyline) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTPolyLine::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTPolyLine::DrawPolyLine(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Ex",MatchSource.WIKI,root/html532/TCurlyArc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyArc.html
https://root.cern/root/html532/TCurlyArc.html:3855,Modifiability,Inherit,InheritsFrom,3855,"st char*TObject::GetIconName() const; virtual Int_tTPolyLine::GetLastPoint() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; Int_tTPolyLine::GetN() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TPolyLine::GetOption() const; Double_tGetPhimax() const; Double_tGetPhimin() const; Double_tGetRadius() const; Double_tTCurlyLine::GetStartX() const; Double_tTCurlyLine::GetStartY() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTCurlyLine::GetWaveLength() const; Double_t*TPolyLine::GetX() const; Double_t*TPolyLine::GetY() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTPolyLine::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Int_tTPolyLine::Merge(TCollection* list); virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*T",MatchSource.WIKI,root/html532/TCurlyArc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyArc.html
https://root.cern/root/html532/TCurlyArc.html:3921,Modifiability,Inherit,InheritsFrom,3921,"astPoint() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; Int_tTPolyLine::GetN() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TPolyLine::GetOption() const; Double_tGetPhimax() const; Double_tGetPhimin() const; Double_tGetRadius() const; Double_tTCurlyLine::GetStartX() const; Double_tTCurlyLine::GetStartY() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTCurlyLine::GetWaveLength() const; Double_t*TPolyLine::GetX() const; Double_t*TPolyLine::GetY() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTPolyLine::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Int_tTPolyLine::Merge(TCollection* list); virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t",MatchSource.WIKI,root/html532/TCurlyArc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyArc.html
https://root.cern/root/html532/TCurlyArc.html:10335,Modifiability,Inherit,Inheritance,10335,"width; Int_tTPolyLine::fNNumber of points; Int_tTCurlyLine::fNstepsused internally (controls precision); TStringTPolyLine::fOptionoptions; Double_tTCurlyLine::fWaveLengthwavelength of sinusoid in percent of pad height; Double_t*TPolyLine::fX[fN] Array of X coordinates; Double_tTCurlyLine::fX1start x, center for arc; Double_tTCurlyLine::fX2end x; Double_t*TPolyLine::fY[fN] Array of Y coordinates; Double_tTCurlyLine::fY1start y, center for arc; Double_tTCurlyLine::fY2end y; static Double_tTCurlyLine::fgDefaultAmplitudedefault amplitude; static Bool_tTCurlyLine::fgDefaultIsCurlydefault curly type; static Double_tTCurlyLine::fgDefaultWaveLengthdefault wavelength. private:. Double_tfPhimaxend phi (degrees); Double_tfPhiminstart phi (degrees); Double_tfR1Radius of arc; Double_tfThetaused internally; static Double_tfgDefaultAmplitudedefault amplitude; static Bool_tfgDefaultIsCurlydefault curly type; static Double_tfgDefaultWaveLengthdefault wavelength . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCurlyArc(Double_t x1, Double_t y1, Double_t rad, Double_t phimin, Double_t phimax, Double_t wl = .02, Double_t amp = .01); create a new TCurlyarc with center (x1, y1) and radius rad.; The wavelength and amplitude are given in percent of the line length; phimin and phimax are given in degrees. void Build(); Create a curly (Gluon) or wavy (Gamma) arc. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute distance from point px,py to an arc. Compute the closest distance of approach from point px,py to this arc.; The distance is computed in pixels units. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute action corresponding to one event. This member function is called when a TCurlyArc is clicked with the locator. If Left button clicked on one of the line end points, this point; follows the cursor until button is released. if Middle button clicked, the line is moved parallel to itself; until the button is released. void SavePrim",MatchSource.WIKI,root/html532/TCurlyArc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyArc.html
https://root.cern/root/html532/TCurlyArc.html:10348,Modifiability,Inherit,Inherited,10348,"width; Int_tTPolyLine::fNNumber of points; Int_tTCurlyLine::fNstepsused internally (controls precision); TStringTPolyLine::fOptionoptions; Double_tTCurlyLine::fWaveLengthwavelength of sinusoid in percent of pad height; Double_t*TPolyLine::fX[fN] Array of X coordinates; Double_tTCurlyLine::fX1start x, center for arc; Double_tTCurlyLine::fX2end x; Double_t*TPolyLine::fY[fN] Array of Y coordinates; Double_tTCurlyLine::fY1start y, center for arc; Double_tTCurlyLine::fY2end y; static Double_tTCurlyLine::fgDefaultAmplitudedefault amplitude; static Bool_tTCurlyLine::fgDefaultIsCurlydefault curly type; static Double_tTCurlyLine::fgDefaultWaveLengthdefault wavelength. private:. Double_tfPhimaxend phi (degrees); Double_tfPhiminstart phi (degrees); Double_tfR1Radius of arc; Double_tfThetaused internally; static Double_tfgDefaultAmplitudedefault amplitude; static Bool_tfgDefaultIsCurlydefault curly type; static Double_tfgDefaultWaveLengthdefault wavelength . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCurlyArc(Double_t x1, Double_t y1, Double_t rad, Double_t phimin, Double_t phimax, Double_t wl = .02, Double_t amp = .01); create a new TCurlyarc with center (x1, y1) and radius rad.; The wavelength and amplitude are given in percent of the line length; phimin and phimax are given in degrees. void Build(); Create a curly (Gluon) or wavy (Gamma) arc. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute distance from point px,py to an arc. Compute the closest distance of approach from point px,py to this arc.; The distance is computed in pixels units. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute action corresponding to one event. This member function is called when a TCurlyArc is clicked with the locator. If Left button clicked on one of the line end points, this point; follows the cursor until button is released. if Middle button clicked, the line is moved parallel to itself; until the button is released. void SavePrim",MatchSource.WIKI,root/html532/TCurlyArc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyArc.html
https://root.cern/root/html532/TCurlyArc.html:3745,Security,Hash,Hash,3745,") const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Int_tTPolyLine::GetLastPoint() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; Int_tTPolyLine::GetN() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TPolyLine::GetOption() const; Double_tGetPhimax() const; Double_tGetPhimin() const; Double_tGetRadius() const; Double_tTCurlyLine::GetStartX() const; Double_tTCurlyLine::GetStartY() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTCurlyLine::GetWaveLength() const; Double_t*TPolyLine::GetX() const; Double_t*TPolyLine::GetY() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTPolyLine::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Int_tTPolyLine::Merge(TCollection* list); virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); st",MatchSource.WIKI,root/html532/TCurlyArc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyArc.html
https://root.cern/root/html532/TCurlyArc.html:8041,Testability,Test,TestBit,8041,"t::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTCurlyLine::SetEndPoint(Double_t x2, Double_t y2); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTPolyLine::SetNDC(Bool_t isNDC = kTRUE); virtual Int_tTPolyLine::SetNextPoint(Double_t x, Double_t y)MENU ; static voidTObject::SetObjectStat(Bool_t stat); virtual voidTPolyLine::SetOption(Option_t* option = """"); virtual voidSetPhimax(Double_t phimax)MENU ; virtual voidSetPhimin(Double_t phimin)MENU ; virtual voidTPolyLine::SetPoint(Int_t point, Double_t x, Double_t y)MENU ; virtual voidTPolyLine::SetPolyLine(Int_t n); virtual voidTPolyLine::SetPolyLine(Int_t n, Float_t* x, Float_t* y, Option_t* option = """"); virtual voidTPolyLine::SetPolyLine(Int_t n, Double_t* x, Double_t* y3, Option_t* option = """"); virtual voidSetRadius(Double_t radius)MENU ; virtual voidTCurlyLine::SetStartPoint(Double_t x1, Double_t y1); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTCurlyLine::SetWaveLength(Double_t WaveLength)MENU ; virtual voidTCurlyLine::SetWavy()MENU ; virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTPolyLine::Size() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TCurlyArc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyArc.html
https://root.cern/root/html532/TCurlyArc.html:8080,Testability,Test,TestBits,8080,"t::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTCurlyLine::SetEndPoint(Double_t x2, Double_t y2); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTPolyLine::SetNDC(Bool_t isNDC = kTRUE); virtual Int_tTPolyLine::SetNextPoint(Double_t x, Double_t y)MENU ; static voidTObject::SetObjectStat(Bool_t stat); virtual voidTPolyLine::SetOption(Option_t* option = """"); virtual voidSetPhimax(Double_t phimax)MENU ; virtual voidSetPhimin(Double_t phimin)MENU ; virtual voidTPolyLine::SetPoint(Int_t point, Double_t x, Double_t y)MENU ; virtual voidTPolyLine::SetPolyLine(Int_t n); virtual voidTPolyLine::SetPolyLine(Int_t n, Float_t* x, Float_t* y, Option_t* option = """"); virtual voidTPolyLine::SetPolyLine(Int_t n, Double_t* x, Double_t* y3, Option_t* option = """"); virtual voidSetRadius(Double_t radius)MENU ; virtual voidTCurlyLine::SetStartPoint(Double_t x1, Double_t y1); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTCurlyLine::SetWaveLength(Double_t WaveLength)MENU ; virtual voidTCurlyLine::SetWavy()MENU ; virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTPolyLine::Size() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TCurlyArc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyArc.html
https://root.cern/root/html532/TCurlyArc.html:1186,Usability,Clear,Clear,1186,"01); virtual~TCurlyArc(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidBuild(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTPolyLine::Copy(TObject& polyline) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTPolyLine::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTPolyLine::DrawPolyLine(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Ex",MatchSource.WIKI,root/html532/TCurlyArc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyArc.html
https://root.cern/root/html532/TCurlyArcEditor.html:4501,Availability,Error,Error,4501,"(const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBa",MatchSource.WIKI,root/html532/TCurlyArcEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyArcEditor.html
https://root.cern/root/html532/TCurlyArcEditor.html:4630,Availability,error,error,4630,"* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize() const; virtual UInt_tTGCompositeFrame::GetDefaultWidth() const;",MatchSource.WIKI,root/html532/TCurlyArcEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyArcEditor.html
https://root.cern/root/html532/TCurlyArcEditor.html:4714,Availability,error,error,4714,"t(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize() const; virtual UInt_tTGCompositeFrame::GetDefaultWidth() const; virtual TDNDData*TGFrame::GetDNDData(Atom_t); virtual Int_tTGFrame::GetDragType() c",MatchSource.WIKI,root/html532/TCurlyArcEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyArcEditor.html
https://root.cern/root/html532/TCurlyArcEditor.html:17617,Availability,mask,mask,17617,,MatchSource.WIKI,root/html532/TCurlyArcEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyArcEditor.html
https://root.cern/root/html532/TCurlyArcEditor.html:15176,Deployability,Update,Update,15176,"Type(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGedFrame::SetGedEditor(TGedEditor* ed); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidSetModel(TObject* obj); voidTGedFrame::SetModelClass(TClass* mcl); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTGedFrame::Update(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TCurlyArcEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyArcEditor.html
https://root.cern/root/html532/TCurlyArcEditor.html:10807,Integrability,Message,Message,10807,"Frame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); static voidTQObject::LoadRQ_OBJECT(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGCompositeFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGCompositeFrame::MustCleanup() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTGCompositeFrame::Print(Option_t* option = """") const; virtual voidTGFrame::",MatchSource.WIKI,root/html532/TCurlyArcEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyArcEditor.html
https://root.cern/root/html532/TCurlyArcEditor.html:9352,Modifiability,Inherit,InheritsFrom,9352,"irtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() co",MatchSource.WIKI,root/html532/TCurlyArcEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyArcEditor.html
https://root.cern/root/html532/TCurlyArcEditor.html:9418,Modifiability,Inherit,InheritsFrom,9418," Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); static voidTQObject::",MatchSource.WIKI,root/html532/TCurlyArcEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyArcEditor.html
https://root.cern/root/html532/TCurlyArcEditor.html:20056,Modifiability,Inherit,Inheritance,20056,"ression of signals; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCurlyArcEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor of CurlyArc GUI. ~TCurlyArcEditor(); Destructor of CurlyArc editor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Pick up the used curly arc attributes. void DoCenterXY(); Slot connected to set center . void DoRadius(); Slot connected to the radius setting. void DoPhimin(); Slot connected to the phimin setting. void DoPhimax(); Slot connected to the phimax setting. » Author: Ilka Antcheva, Otto Schaile 15/12/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/ged:$Id: TCurlyArcEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:11; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support.",MatchSource.WIKI,root/html532/TCurlyArcEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyArcEditor.html
https://root.cern/root/html532/TCurlyArcEditor.html:20069,Modifiability,Inherit,Inherited,20069,"ression of signals; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCurlyArcEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor of CurlyArc GUI. ~TCurlyArcEditor(); Destructor of CurlyArc editor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Pick up the used curly arc attributes. void DoCenterXY(); Slot connected to set center . void DoRadius(); Slot connected to the radius setting. void DoPhimin(); Slot connected to the phimin setting. void DoPhimax(); Slot connected to the phimax setting. » Author: Ilka Antcheva, Otto Schaile 15/12/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/ged:$Id: TCurlyArcEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:11; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support.",MatchSource.WIKI,root/html532/TCurlyArcEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyArcEditor.html
https://root.cern/root/html532/TCurlyArcEditor.html:9062,Security,Hash,Hash,9062,"t_t, Int_t); virtual Bool_tTGCompositeFrame::HandleDoubleClick(Event_t*); virtual Bool_tTGCompositeFrame::HandleDragDrop(TGFrame* frame, Int_t x, Int_t y, TGLayoutHints* lo); virtual Bool_tTGCompositeFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWi",MatchSource.WIKI,root/html532/TCurlyArcEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyArcEditor.html
https://root.cern/root/html532/TCurlyArcEditor.html:14942,Testability,Test,TestBit,14942,"Type(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGedFrame::SetGedEditor(TGedEditor* ed); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidSetModel(TObject* obj); voidTGedFrame::SetModelClass(TClass* mcl); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTGedFrame::Update(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TCurlyArcEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyArcEditor.html
https://root.cern/root/html532/TCurlyArcEditor.html:14981,Testability,Test,TestBits,14981,"Type(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGedFrame::SetGedEditor(TGedEditor* ed); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidSetModel(TObject* obj); voidTGedFrame::SetModelClass(TClass* mcl); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTGedFrame::Update(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TCurlyArcEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyArcEditor.html
https://root.cern/root/html532/TCurlyArcEditor.html:1652,Usability,Clear,Clear,1652,"ar* method) const; virtual Bool_tTGedFrame::AcceptModel(TObject*); virtual voidTGFrame::Activate(Bool_t); virtual voidTGedFrame::ActivateBaseClassEditors(TClass* cl); virtual voidTGedFrame::AddExtraTab(TGedFrame::TGedSubFrame* sf); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual TGVerticalFrame*TGedFrame::CreateEditorTabSubFrame(const char* name); virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::Des",MatchSource.WIKI,root/html532/TCurlyArcEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyArcEditor.html
https://root.cern/root/html532/TCurlyLine.html:1914,Availability,Error,Error,1914,"bject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidBuild(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTPolyLine::Copy(TObject& polyline) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTPolyLine::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTPolyLine::DrawPolyLine(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tGetAmplitude() const; Bool_tGetCurly() const; static Double_tGetDefaultAmplitude(); static Bool_tGetDefaultIsCurly(); static Double_tGetDefaultWaveLength(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tGetEndX() const; Double_tGetEndY() const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Int_tTPolyLine::GetLastPoint() const; virtual Color_tTAttLine::GetLin",MatchSource.WIKI,root/html532/TCurlyLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyLine.html
https://root.cern/root/html532/TCurlyLine.html:2043,Availability,error,error,2043,"se(TBrowser* b); virtual voidBuild(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTPolyLine::Copy(TObject& polyline) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTPolyLine::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTPolyLine::DrawPolyLine(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tGetAmplitude() const; Bool_tGetCurly() const; static Double_tGetDefaultAmplitude(); static Bool_tGetDefaultIsCurly(); static Double_tGetDefaultWaveLength(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tGetEndX() const; Double_tGetEndY() const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Int_tTPolyLine::GetLastPoint() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; Int_tTPolyLine::Get",MatchSource.WIKI,root/html532/TCurlyLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyLine.html
https://root.cern/root/html532/TCurlyLine.html:2127,Availability,error,error,2127,"ect::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTPolyLine::Copy(TObject& polyline) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTPolyLine::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTPolyLine::DrawPolyLine(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tGetAmplitude() const; Bool_tGetCurly() const; static Double_tGetDefaultAmplitude(); static Bool_tGetDefaultIsCurly(); static Double_tGetDefaultWaveLength(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tGetEndX() const; Double_tGetEndY() const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Int_tTPolyLine::GetLastPoint() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; Int_tTPolyLine::GetN() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObj",MatchSource.WIKI,root/html532/TCurlyLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyLine.html
https://root.cern/root/html532/TCurlyLine.html:10234,Deployability,release,released,10234,"PolyLine::fY[fN] Array of Y coordinates; Double_tfY1start y, center for arc; Double_tfY2end y; static Double_tfgDefaultAmplitudedefault amplitude; static Bool_tfgDefaultIsCurlydefault curly type; static Double_tfgDefaultWaveLengthdefault wavelength. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCurlyLine(); Default constructor. TCurlyLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Double_t wl = .02, Double_t amp = .01); Create a new TCurlyLine with starting point (x1, y1), end point (x2,y2).; The wavelength and amplitude are given in percent of the pad height. void Build(); Create a curly (Gluon) or wavy (Gamma) line. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute distance from point px,py to a line. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute action corresponding to one event. This member function is called when a TCurlyLine is clicked with the locator. If Left button clicked on one of the line end points, this point; follows the cursor until button is released. if Middle button clicked, the line is moved parallel to itself; until the button is released. void SavePrimitive(ostream& out, Option_t* = """"); Save primitive as a C++ statement(s) on output stream out. void SetCurly(); Set curly. void SetWavy(); Set wavy. void SetWaveLength(Double_t WaveLength); Set wave length. void SetAmplitude(Double_t x); Set amplitude. void SetStartPoint(Double_t x1, Double_t y1); Set start point. void SetEndPoint(Double_t x2, Double_t y2); Set edn point. void SetDefaultWaveLength(Double_t WaveLength); Set default wave length. void SetDefaultAmplitude(Double_t Amplitude); Set default amplitude. void SetDefaultIsCurly(Bool_t IsCurly); Set defaul ""IsCurly"". Double_t GetDefaultWaveLength(); Get default wave length. Double_t GetDefaultAmplitude(); Get default amplitude. Bool_t GetDefaultIsCurly(); Get default ""IsCurly"". TCurlyLine(). virtual ~TCurlyLine(); {;}. Bool_t GetCurly() const; {return fIsCurly;}. Double",MatchSource.WIKI,root/html532/TCurlyLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyLine.html
https://root.cern/root/html532/TCurlyLine.html:10328,Deployability,release,released,10328,"ouble_tfgDefaultAmplitudedefault amplitude; static Bool_tfgDefaultIsCurlydefault curly type; static Double_tfgDefaultWaveLengthdefault wavelength. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCurlyLine(); Default constructor. TCurlyLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Double_t wl = .02, Double_t amp = .01); Create a new TCurlyLine with starting point (x1, y1), end point (x2,y2).; The wavelength and amplitude are given in percent of the pad height. void Build(); Create a curly (Gluon) or wavy (Gamma) line. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute distance from point px,py to a line. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute action corresponding to one event. This member function is called when a TCurlyLine is clicked with the locator. If Left button clicked on one of the line end points, this point; follows the cursor until button is released. if Middle button clicked, the line is moved parallel to itself; until the button is released. void SavePrimitive(ostream& out, Option_t* = """"); Save primitive as a C++ statement(s) on output stream out. void SetCurly(); Set curly. void SetWavy(); Set wavy. void SetWaveLength(Double_t WaveLength); Set wave length. void SetAmplitude(Double_t x); Set amplitude. void SetStartPoint(Double_t x1, Double_t y1); Set start point. void SetEndPoint(Double_t x2, Double_t y2); Set edn point. void SetDefaultWaveLength(Double_t WaveLength); Set default wave length. void SetDefaultAmplitude(Double_t Amplitude); Set default amplitude. void SetDefaultIsCurly(Bool_t IsCurly); Set defaul ""IsCurly"". Double_t GetDefaultWaveLength(); Get default wave length. Double_t GetDefaultAmplitude(); Get default amplitude. Bool_t GetDefaultIsCurly(); Get default ""IsCurly"". TCurlyLine(). virtual ~TCurlyLine(); {;}. Bool_t GetCurly() const; {return fIsCurly;}. Double_t GetWaveLength() const; {return fWaveLength;}. Double_t GetAmplitude() const; {return fAmplitude;}. ",MatchSource.WIKI,root/html532/TCurlyLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyLine.html
https://root.cern/root/html532/TCurlyLine.html:533,Modifiability,inherit,inheritance,533,". TCurlyLine. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » GRAF; » TCurlyLine. class TCurlyLine: public TPolyLine. This class implements curly or wavy polylines typically used to draw Feynman diagrams.; Amplitudes and wavelengths may be specified in the constructors,; via commands or interactively from popup menus.; The class make use of TPolyLine by inheritance, ExecuteEvent methods; are highly inspired from the methods used in TPolyLine and TArc.; The picture below has been generated by the tutorial feynman. /*. */. Function Members (Methods); public:. TCurlyLine(); TCurlyLine(const TCurlyLine&); TCurlyLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Double_t wl = .02, Double_t amp = .01); virtual~TCurlyLine(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidBuild(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTPolyLine::Copy(TObject& polyline) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTPolyLine::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTPolyLine::DrawPolyLine(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const",MatchSource.WIKI,root/html532/TCurlyLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyLine.html
https://root.cern/root/html532/TCurlyLine.html:3679,Modifiability,Inherit,InheritsFrom,3679,"dY() const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Int_tTPolyLine::GetLastPoint() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; Int_tTPolyLine::GetN() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TPolyLine::GetOption() const; Double_tGetStartX() const; Double_tGetStartY() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tGetWaveLength() const; Double_t*TPolyLine::GetX() const; Double_t*TPolyLine::GetY() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTPolyLine::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Int_tTPolyLine::Merge(TCollection* list); virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*T",MatchSource.WIKI,root/html532/TCurlyLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyLine.html
https://root.cern/root/html532/TCurlyLine.html:3745,Modifiability,Inherit,InheritsFrom,3745," Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Int_tTPolyLine::GetLastPoint() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; Int_tTPolyLine::GetN() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TPolyLine::GetOption() const; Double_tGetStartX() const; Double_tGetStartY() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tGetWaveLength() const; Double_t*TPolyLine::GetX() const; Double_t*TPolyLine::GetY() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTPolyLine::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Int_tTPolyLine::Merge(TCollection* list); virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t",MatchSource.WIKI,root/html532/TCurlyLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyLine.html
https://root.cern/root/html532/TCurlyLine.html:9451,Modifiability,Inherit,Inheritance,9451,"te; kWriteDelete; };. protected:. Double_tfAmplitudeamplitude of sinusoid in percent of pad height; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; Bool_tfIsCurlytrue: Gluon, false: Gamma; Int_tTPolyLine::fLastPointThe index of the last filled point; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Int_tTPolyLine::fNNumber of points; Int_tfNstepsused internally (controls precision); TStringTPolyLine::fOptionoptions; Double_tfWaveLengthwavelength of sinusoid in percent of pad height; Double_t*TPolyLine::fX[fN] Array of X coordinates; Double_tfX1start x, center for arc; Double_tfX2end x; Double_t*TPolyLine::fY[fN] Array of Y coordinates; Double_tfY1start y, center for arc; Double_tfY2end y; static Double_tfgDefaultAmplitudedefault amplitude; static Bool_tfgDefaultIsCurlydefault curly type; static Double_tfgDefaultWaveLengthdefault wavelength. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCurlyLine(); Default constructor. TCurlyLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Double_t wl = .02, Double_t amp = .01); Create a new TCurlyLine with starting point (x1, y1), end point (x2,y2).; The wavelength and amplitude are given in percent of the pad height. void Build(); Create a curly (Gluon) or wavy (Gamma) line. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute distance from point px,py to a line. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute action corresponding to one event. This member function is called when a TCurlyLine is clicked with the locator. If Left button clicked on one of the line end points, this point; follows the cursor until button is released. if Middle button clicked, the line is moved parallel to itself; until the button is released. void SavePrimitive(ostream& out, Option_t* = """"); Save primitive as a C++ statement(s) on output stream out. void SetCurly(); Set curly. vo",MatchSource.WIKI,root/html532/TCurlyLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyLine.html
https://root.cern/root/html532/TCurlyLine.html:9464,Modifiability,Inherit,Inherited,9464,"te; kWriteDelete; };. protected:. Double_tfAmplitudeamplitude of sinusoid in percent of pad height; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; Bool_tfIsCurlytrue: Gluon, false: Gamma; Int_tTPolyLine::fLastPointThe index of the last filled point; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Int_tTPolyLine::fNNumber of points; Int_tfNstepsused internally (controls precision); TStringTPolyLine::fOptionoptions; Double_tfWaveLengthwavelength of sinusoid in percent of pad height; Double_t*TPolyLine::fX[fN] Array of X coordinates; Double_tfX1start x, center for arc; Double_tfX2end x; Double_t*TPolyLine::fY[fN] Array of Y coordinates; Double_tfY1start y, center for arc; Double_tfY2end y; static Double_tfgDefaultAmplitudedefault amplitude; static Bool_tfgDefaultIsCurlydefault curly type; static Double_tfgDefaultWaveLengthdefault wavelength. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCurlyLine(); Default constructor. TCurlyLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Double_t wl = .02, Double_t amp = .01); Create a new TCurlyLine with starting point (x1, y1), end point (x2,y2).; The wavelength and amplitude are given in percent of the pad height. void Build(); Create a curly (Gluon) or wavy (Gamma) line. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute distance from point px,py to a line. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute action corresponding to one event. This member function is called when a TCurlyLine is clicked with the locator. If Left button clicked on one of the line end points, this point; follows the cursor until button is released. if Middle button clicked, the line is moved parallel to itself; until the button is released. void SavePrimitive(ostream& out, Option_t* = """"); Save primitive as a C++ statement(s) on output stream out. void SetCurly(); Set curly. vo",MatchSource.WIKI,root/html532/TCurlyLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyLine.html
https://root.cern/root/html532/TCurlyLine.html:3569,Security,Hash,Hash,3569,"tion_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tGetEndX() const; Double_tGetEndY() const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Int_tTPolyLine::GetLastPoint() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; Int_tTPolyLine::GetN() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TPolyLine::GetOption() const; Double_tGetStartX() const; Double_tGetStartY() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tGetWaveLength() const; Double_t*TPolyLine::GetX() const; Double_t*TPolyLine::GetY() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTPolyLine::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Int_tTPolyLine::Merge(TCollection* list); virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); st",MatchSource.WIKI,root/html532/TCurlyLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyLine.html
https://root.cern/root/html532/TCurlyLine.html:7604,Testability,Test,TestBit,7604,"urly()MENU ; static voidSetDefaultAmplitude(Double_t Amplitude); static voidSetDefaultIsCurly(Bool_t IsCurly); static voidSetDefaultWaveLength(Double_t WaveLength); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetEndPoint(Double_t x2, Double_t y2); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTPolyLine::SetNDC(Bool_t isNDC = kTRUE); virtual Int_tTPolyLine::SetNextPoint(Double_t x, Double_t y)MENU ; static voidTObject::SetObjectStat(Bool_t stat); virtual voidTPolyLine::SetOption(Option_t* option = """"); virtual voidTPolyLine::SetPoint(Int_t point, Double_t x, Double_t y)MENU ; virtual voidTPolyLine::SetPolyLine(Int_t n); virtual voidTPolyLine::SetPolyLine(Int_t n, Float_t* x, Float_t* y, Option_t* option = """"); virtual voidTPolyLine::SetPolyLine(Int_t n, Double_t* x, Double_t* y3, Option_t* option = """"); virtual voidSetStartPoint(Double_t x1, Double_t y1); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetWaveLength(Double_t WaveLength)MENU ; virtual voidSetWavy()MENU ; virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTPolyLine::Size() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TCurlyLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyLine.html
https://root.cern/root/html532/TCurlyLine.html:7643,Testability,Test,TestBits,7643,"urly()MENU ; static voidSetDefaultAmplitude(Double_t Amplitude); static voidSetDefaultIsCurly(Bool_t IsCurly); static voidSetDefaultWaveLength(Double_t WaveLength); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetEndPoint(Double_t x2, Double_t y2); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTPolyLine::SetNDC(Bool_t isNDC = kTRUE); virtual Int_tTPolyLine::SetNextPoint(Double_t x, Double_t y)MENU ; static voidTObject::SetObjectStat(Bool_t stat); virtual voidTPolyLine::SetOption(Option_t* option = """"); virtual voidTPolyLine::SetPoint(Int_t point, Double_t x, Double_t y)MENU ; virtual voidTPolyLine::SetPolyLine(Int_t n); virtual voidTPolyLine::SetPolyLine(Int_t n, Float_t* x, Float_t* y, Option_t* option = """"); virtual voidTPolyLine::SetPolyLine(Int_t n, Double_t* x, Double_t* y3, Option_t* option = """"); virtual voidSetStartPoint(Double_t x1, Double_t y1); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetWaveLength(Double_t WaveLength)MENU ; virtual voidSetWavy()MENU ; virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTPolyLine::Size() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TCurlyLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyLine.html
https://root.cern/root/html532/TCurlyLine.html:1175,Usability,Clear,Clear,1175,"01); virtual~TCurlyLine(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidBuild(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTPolyLine::Copy(TObject& polyline) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTPolyLine::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTPolyLine::DrawPolyLine(Int_t n, Double_t* x, Double_t* y, Option_t* option = """"); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const",MatchSource.WIKI,root/html532/TCurlyLine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyLine.html
https://root.cern/root/html532/TCurlyLineEditor.html:4523,Availability,Error,Error,4523,"(const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBa",MatchSource.WIKI,root/html532/TCurlyLineEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyLineEditor.html
https://root.cern/root/html532/TCurlyLineEditor.html:4652,Availability,error,error,4652,"* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize() const; virtual UInt_tTGCompositeFrame::GetDefaultWidth() const;",MatchSource.WIKI,root/html532/TCurlyLineEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyLineEditor.html
https://root.cern/root/html532/TCurlyLineEditor.html:4736,Availability,error,error,4736,"t(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize() const; virtual UInt_tTGCompositeFrame::GetDefaultWidth() const; virtual TDNDData*TGFrame::GetDNDData(Atom_t); virtual Int_tTGFrame::GetDragType() c",MatchSource.WIKI,root/html532/TCurlyLineEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyLineEditor.html
https://root.cern/root/html532/TCurlyLineEditor.html:17670,Availability,mask,mask,17670,,MatchSource.WIKI,root/html532/TCurlyLineEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyLineEditor.html
https://root.cern/root/html532/TCurlyLineEditor.html:15198,Deployability,Update,Update,15198,"Type(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGedFrame::SetGedEditor(TGedEditor* ed); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidSetModel(TObject* obj); voidTGedFrame::SetModelClass(TClass* mcl); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTGedFrame::Update(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TCurlyLineEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyLineEditor.html
https://root.cern/root/html532/TCurlyLineEditor.html:10829,Integrability,Message,Message,10829,"Frame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); static voidTQObject::LoadRQ_OBJECT(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGCompositeFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGCompositeFrame::MustCleanup() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTGCompositeFrame::Print(Option_t* option = """") const; virtual voidTGFrame::",MatchSource.WIKI,root/html532/TCurlyLineEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyLineEditor.html
https://root.cern/root/html532/TCurlyLineEditor.html:9374,Modifiability,Inherit,InheritsFrom,9374,"irtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() co",MatchSource.WIKI,root/html532/TCurlyLineEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyLineEditor.html
https://root.cern/root/html532/TCurlyLineEditor.html:9440,Modifiability,Inherit,InheritsFrom,9440," Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); static voidTQObject::",MatchSource.WIKI,root/html532/TCurlyLineEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyLineEditor.html
https://root.cern/root/html532/TCurlyLineEditor.html:20192,Modifiability,Inherit,Inheritance,20192,"rywavelength entry; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCurlyLineEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor of CurlyLine GUI. ~TCurlyLineEditor(); Destructor of CurlyLine editor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Pick up the used curly line attributes. void ActivateBaseClassEditors(TClass* cl); Exclude TAttFillEditor. void DoStartXY(); Slot connected to the CurlyLine StartPoint. void DoEndXY(); Slot connected to the CurlyLine End. void DoAmplitude(); Slot connected to the amplitude setting. void DoWaveLength(); Slot connected to the wavelength setting. void DoWavy(); Slot connected to the wavy / curly setting. » Author: Ilka Antcheva, Otto Schaile 15/12/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/ged:$Id: TCurlyLineEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:11",MatchSource.WIKI,root/html532/TCurlyLineEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyLineEditor.html
https://root.cern/root/html532/TCurlyLineEditor.html:20205,Modifiability,Inherit,Inherited,20205,"rywavelength entry; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCurlyLineEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor of CurlyLine GUI. ~TCurlyLineEditor(); Destructor of CurlyLine editor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Pick up the used curly line attributes. void ActivateBaseClassEditors(TClass* cl); Exclude TAttFillEditor. void DoStartXY(); Slot connected to the CurlyLine StartPoint. void DoEndXY(); Slot connected to the CurlyLine End. void DoAmplitude(); Slot connected to the amplitude setting. void DoWaveLength(); Slot connected to the wavelength setting. void DoWavy(); Slot connected to the wavy / curly setting. » Author: Ilka Antcheva, Otto Schaile 15/12/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/ged:$Id: TCurlyLineEditor.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:11",MatchSource.WIKI,root/html532/TCurlyLineEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyLineEditor.html
https://root.cern/root/html532/TCurlyLineEditor.html:9084,Security,Hash,Hash,9084,"t_t, Int_t); virtual Bool_tTGCompositeFrame::HandleDoubleClick(Event_t*); virtual Bool_tTGCompositeFrame::HandleDragDrop(TGFrame* frame, Int_t x, Int_t y, TGLayoutHints* lo); virtual Bool_tTGCompositeFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWi",MatchSource.WIKI,root/html532/TCurlyLineEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyLineEditor.html
https://root.cern/root/html532/TCurlyLineEditor.html:14964,Testability,Test,TestBit,14964,"Type(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGedFrame::SetGedEditor(TGedEditor* ed); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidSetModel(TObject* obj); voidTGedFrame::SetModelClass(TClass* mcl); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTGedFrame::Update(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TCurlyLineEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyLineEditor.html
https://root.cern/root/html532/TCurlyLineEditor.html:15003,Testability,Test,TestBits,15003,"Type(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGedFrame::SetGedEditor(TGedEditor* ed); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidSetModel(TObject* obj); voidTGedFrame::SetModelClass(TClass* mcl); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTGedFrame::Update(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TCurlyLineEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyLineEditor.html
https://root.cern/root/html532/TCurlyLineEditor.html:1647,Usability,Clear,Clear,1647,"od(const char* method) const; virtual Bool_tTGedFrame::AcceptModel(TObject*); virtual voidTGFrame::Activate(Bool_t); virtual voidActivateBaseClassEditors(TClass* cl); virtual voidTGedFrame::AddExtraTab(TGedFrame::TGedSubFrame* sf); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual TGVerticalFrame*TGedFrame::CreateEditorTabSubFrame(const char* name); virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::Des",MatchSource.WIKI,root/html532/TCurlyLineEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCurlyLineEditor.html
https://root.cern/root/html532/TCut.html:1824,Availability,Error,Error,1824," TCut(); TCut(const char* title); TCut(const TCut& cut); TCut(const char* name, const char* title); virtual~TCut(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod",MatchSource.WIKI,root/html532/TCut.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCut.html
https://root.cern/root/html532/TCut.html:1953,Availability,error,error,1953," TCut(const TCut& cut); TCut(const char* name, const char* title); virtual~TCut(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObj",MatchSource.WIKI,root/html532/TCut.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCut.html
https://root.cern/root/html532/TCut.html:2037,Availability,error,error,2037,"oidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(",MatchSource.WIKI,root/html532/TCut.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCut.html
https://root.cern/root/html532/TCut.html:2961,Modifiability,Inherit,InheritsFrom,2961,"rtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; const char*operator const char*() const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObje",MatchSource.WIKI,root/html532/TCut.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCut.html
https://root.cern/root/html532/TCut.html:3027,Modifiability,Inherit,InheritsFrom,3027,"_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; const char*operator const char*() const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t",MatchSource.WIKI,root/html532/TCut.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCut.html
https://root.cern/root/html532/TCut.html:6573,Modifiability,Inherit,Inheritance,6573,"Int_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. Bool_toperator<(const TCut& rhs); Bool_toperator<=(const TCut& rhs); Bool_toperator>(const TCut& rhs); Bool_toperator>=(const TCut& rhs). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCut(); Constructor. TCut(const char* title); Constructor. TCut(const char* name, const char* title); Constructor. TCut(const TCut& cut); Copy Constructor. ~TCut(); Typical destructor. Bool_t operator==(const char* rhs) const; Comparison. Bool_t operator==(const TCut& rhs) const; Comparison. Bool_t operator!=(const char* rhs) const; Comparison. Bool_t operator!=(const TCut& rhs) const; Comparison. TCut& operator=(const char* rhs); Assignment. TCut& operator=(const TCut& rhs); Assignment. TCut& operator+=(const char* rhs); Addition. TCut& operator+=(const TCut& rhs); Addition. TCut& operator*=(const char* rhs); Multiplication. TCut& operator*=(const TCut& rhs); Multiplication. Bool_t operator<(const TCut& rhs); Prevent meaningless operator (which otherwise can be reached via; the conversion to 'const char*'. Bool_t operator<=(const TCut& rhs). Bool_t operator>(const TCut& rhs). Bool_t operator>=(const TCut& rhs). operator const char*() ",MatchSource.WIKI,root/html532/TCut.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCut.html
https://root.cern/root/html532/TCut.html:6586,Modifiability,Inherit,Inherited,6586,"Int_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. Bool_toperator<(const TCut& rhs); Bool_toperator<=(const TCut& rhs); Bool_toperator>(const TCut& rhs); Bool_toperator>=(const TCut& rhs). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCut(); Constructor. TCut(const char* title); Constructor. TCut(const char* name, const char* title); Constructor. TCut(const TCut& cut); Copy Constructor. ~TCut(); Typical destructor. Bool_t operator==(const char* rhs) const; Comparison. Bool_t operator==(const TCut& rhs) const; Comparison. Bool_t operator!=(const char* rhs) const; Comparison. Bool_t operator!=(const TCut& rhs) const; Comparison. TCut& operator=(const char* rhs); Assignment. TCut& operator=(const TCut& rhs); Assignment. TCut& operator+=(const char* rhs); Addition. TCut& operator+=(const TCut& rhs); Addition. TCut& operator*=(const char* rhs); Multiplication. TCut& operator*=(const TCut& rhs); Multiplication. Bool_t operator<(const TCut& rhs); Prevent meaningless operator (which otherwise can be reached via; the conversion to 'const char*'. Bool_t operator<=(const TCut& rhs). Bool_t operator>(const TCut& rhs). Bool_t operator>=(const TCut& rhs). operator const char*() ",MatchSource.WIKI,root/html532/TCut.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCut.html
https://root.cern/root/html532/TCut.html:2851,Security,Hash,Hash,2851,"st char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; const char*operator const char*() const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ",MatchSource.WIKI,root/html532/TCut.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCut.html
https://root.cern/root/html532/TCut.html:474,Testability,log,logical,474,". TCut. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TCut. class TCut: public TNamed. TCut. A specialized string object used for TTree selections.; A TCut object has a name and a title. It does not add any data; members compared to a TNamed. It only add a set of operators to; facilitate logical string concatenation. For example, assume; cut1 = ""x<1"" and cut2 = ""y>2""; then; cut1 && cut2 will be the string ""(x<1)&&(y>2)"". Operators =, +=, +, *, !, &&, || overloaded. Examples of use:; Root > TCut c1 = ""x<1""; Root > TCut c2 = ""y<0""; Root > TCut c3 = c1&&c2; Root > ntuple.Draw(""x"", c1); Root > ntuple.Draw(""x"", c1||""x>0""); Root > ntuple.Draw(""x"", c1&&c2); Root > ntuple.Draw(""x"", ""(x+y)""*(c1&&c2)). Function Members (Methods); public:. TCut(); TCut(const char* title); TCut(const TCut& cut); TCut(const char* name, const char* title); virtual~TCut(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod",MatchSource.WIKI,root/html532/TCut.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCut.html
https://root.cern/root/html532/TCut.html:5549,Testability,Test,TestBit,5549,"oid*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); Bool_toperator!=(const char* rhs) const; Bool_toperator!=(const TCut& rhs) const; TCut&operator*=(const char* rhs); TCut&operator*=(const TCut& rhs); TCut&operator+=(const char* rhs); TCut&operator+=(const TCut& rhs); TCut&operator=(const char* rhs); TCut&operator=(const TCut& rhs); Bool_toperator==(const char* rhs) const; Bool_toperator==(const TCut& rhs) const; virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TCut.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCut.html
https://root.cern/root/html532/TCut.html:5588,Testability,Test,TestBits,5588,"oid*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); Bool_toperator!=(const char* rhs) const; Bool_toperator!=(const TCut& rhs) const; TCut&operator*=(const char* rhs); TCut&operator*=(const TCut& rhs); TCut&operator+=(const char* rhs); TCut&operator+=(const TCut& rhs); TCut&operator=(const char* rhs); TCut&operator=(const TCut& rhs); Bool_toperator==(const char* rhs) const; Bool_toperator==(const TCut& rhs) const; virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TCut.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCut.html
https://root.cern/root/html532/TCut.html:1281,Usability,Clear,Clear,1281," TCut(); TCut(const char* title); TCut(const TCut& cut); TCut(const char* name, const char* title); virtual~TCut(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod",MatchSource.WIKI,root/html532/TCut.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCut.html
https://root.cern/root/html532/TCutG.html:4700,Availability,Error,Error,4700,":CompareY(const TGraph* gr, Int_t left, Int_t right); virtual voidTGraph::ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTGraph::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTGraph::Draw(Option_t* chopt = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTGraph::DrawGraph(Int_t n, const Int_t* x, const Int_t* y, Option_t* option = """"); virtual voidTGraph::DrawGraph(Int_t n, const Float_t* x, const Float_t* y, Option_t* option = """"); virtual voidTGraph::DrawGraph(Int_t n, const Double_t* x = 0, const Double_t* y = 0, Option_t* option = """"); virtual voidTGraph::DrawPanel()MENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tTGraph::Eval(Double_t x, TSpline* spline = 0, Option_t* option = """") const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGraph::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTGraph::Expand(Int_t newsize); virtual voidTGraph::Expand(Int_t newsize, Int_t step); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TGraph::FindObject(const char* name) const; virtual TObject*TGraph::FindObject(const TObject* obj) const; virtual TFitResultPtrTGraph::Fit(const char* formula, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0)MENU ; virtual TFitResultPtrTGraph::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0); virtual voidT",MatchSource.WIKI,root/html532/TCutG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCutG.html
https://root.cern/root/html532/TCutG.html:4921,Availability,error,error,4921,"ject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTGraph::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTGraph::Draw(Option_t* chopt = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTGraph::DrawGraph(Int_t n, const Int_t* x, const Int_t* y, Option_t* option = """"); virtual voidTGraph::DrawGraph(Int_t n, const Float_t* x, const Float_t* y, Option_t* option = """"); virtual voidTGraph::DrawGraph(Int_t n, const Double_t* x = 0, const Double_t* y = 0, Option_t* option = """"); virtual voidTGraph::DrawPanel()MENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tTGraph::Eval(Double_t x, TSpline* spline = 0, Option_t* option = """") const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGraph::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTGraph::Expand(Int_t newsize); virtual voidTGraph::Expand(Int_t newsize, Int_t step); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TGraph::FindObject(const char* name) const; virtual TObject*TGraph::FindObject(const TObject* obj) const; virtual TFitResultPtrTGraph::Fit(const char* formula, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0)MENU ; virtual TFitResultPtrTGraph::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0); virtual voidTGraph::FitPanel()MENU ; virtual Double_tTGraph::GetCorrelationFactor() const; virtual Double_tTGraph::GetCovariance() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Bool_tTGra",MatchSource.WIKI,root/html532/TCutG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCutG.html
https://root.cern/root/html532/TCutG.html:5005,Availability,error,error,5005,"t_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTGraph::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTGraph::Draw(Option_t* chopt = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTGraph::DrawGraph(Int_t n, const Int_t* x, const Int_t* y, Option_t* option = """"); virtual voidTGraph::DrawGraph(Int_t n, const Float_t* x, const Float_t* y, Option_t* option = """"); virtual voidTGraph::DrawGraph(Int_t n, const Double_t* x = 0, const Double_t* y = 0, Option_t* option = """"); virtual voidTGraph::DrawPanel()MENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tTGraph::Eval(Double_t x, TSpline* spline = 0, Option_t* option = """") const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGraph::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTGraph::Expand(Int_t newsize); virtual voidTGraph::Expand(Int_t newsize, Int_t step); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TGraph::FindObject(const char* name) const; virtual TObject*TGraph::FindObject(const TObject* obj) const; virtual TFitResultPtrTGraph::Fit(const char* formula, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0)MENU ; virtual TFitResultPtrTGraph::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0); virtual voidTGraph::FitPanel()MENU ; virtual Double_tTGraph::GetCorrelationFactor() const; virtual Double_tTGraph::GetCovariance() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Bool_tTGraph::GetEditable() const; virtual Double_tTGraph::GetErrorX(Int_t bin) const; virtual",MatchSource.WIKI,root/html532/TCutG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCutG.html
https://root.cern/root/html532/TCutG.html:11772,Deployability,TOGGLE,TOGGLE,11772,"ill::ResetAttFill(Option_t* option = """"); virtual voidTAttLine::ResetAttLine(Option_t* option = """"); virtual voidTAttMarker::ResetAttMarker(Option_t* toption = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTAttFill::SaveFillAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1001); virtual voidTAttLine::SaveLineAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t widdef = 1); virtual voidTAttMarker::SaveMarkerAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t sizdef = 1); virtual voidSavePrimitive(ostream& out, Option_t* option = """"); virtual voidTGraph::Set(Int_t n); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTGraph::SetEditable(Bool_t editable = kTRUE)TOGGLE GETTER ; virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTGraph::SetHistogram(TH1F* h); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTAttMarker::SetMarkerAttributes()MENU ; virtual voidTAttMarker::SetMarkerColor(Color_t tcolor = 1); virtual voidTAttMarker::SetMarkerSize(Size_t msize = 1); virtual voidTAttMarker::SetMarkerStyle(Style_t mstyle = 1); virtual voidTGraph::SetMaximum(Double_t maximum = -1111)MENU ; virtual voidTGraph::SetMinimum(Double_t minimum = -1111)MENU ; virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetObjectX(TObject* obj); virtual voidSetObjectY(TO",MatchSource.WIKI,root/html532/TCutG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCutG.html
https://root.cern/root/html532/TCutG.html:13961,Energy Efficiency,Allocate,Allocate,13961,"reamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTGraph::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTGraph::Zero(Int_t& k, Double_t AZ, Double_t BZ, Double_t E2, Double_t& X, Double_t& Y, Int_t maxiterations). protected:. virtual Double_t**TGraph::Allocate(Int_t newsize); Double_t**TGraph::AllocateArrays(Int_t Narrays, Int_t arraySize); virtual voidTGraph::CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); virtual Bool_tTGraph::CopyPoints(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Bool_tTGraph::CtorAllocate(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Double_t**TGraph::ExpandAndCopy(Int_t size, Int_t iend); virtual voidTGraph::FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); voidTObject::MakeZombie(); Double_t**TGraph::ShrinkAndCopy(Int_t size, Int_t iend); virtual voidTGraph::SwapPoints(Int_t pos1, Int_t pos2); static voidTGraph::SwapValues(Double_t* arr, Int_t pos1, Int_t pos2). Data Members; public:. enum TGraph::[unnamed] { kClipFrame; kNotEditable; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; TList*TGraph::fFunctionsPointer to list of functions (fits and user); TH1F*TGraph::fHistogramPointer to histogram used for drawing axis; Color_tTAttLine::fLineColorline color;",MatchSource.WIKI,root/html532/TCutG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCutG.html
https://root.cern/root/html532/TCutG.html:14004,Energy Efficiency,Allocate,AllocateArrays,14004,"reamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTGraph::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTGraph::Zero(Int_t& k, Double_t AZ, Double_t BZ, Double_t E2, Double_t& X, Double_t& Y, Int_t maxiterations). protected:. virtual Double_t**TGraph::Allocate(Int_t newsize); Double_t**TGraph::AllocateArrays(Int_t Narrays, Int_t arraySize); virtual voidTGraph::CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); virtual Bool_tTGraph::CopyPoints(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Bool_tTGraph::CtorAllocate(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Double_t**TGraph::ExpandAndCopy(Int_t size, Int_t iend); virtual voidTGraph::FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); voidTObject::MakeZombie(); Double_t**TGraph::ShrinkAndCopy(Int_t size, Int_t iend); virtual voidTGraph::SwapPoints(Int_t pos1, Int_t pos2); static voidTGraph::SwapValues(Double_t* arr, Int_t pos1, Int_t pos2). Data Members; public:. enum TGraph::[unnamed] { kClipFrame; kNotEditable; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; TList*TGraph::fFunctionsPointer to list of functions (fits and user); TH1F*TGraph::fHistogramPointer to histogram used for drawing axis; Color_tTAttLine::fLineColorline color;",MatchSource.WIKI,root/html532/TCutG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCutG.html
https://root.cern/root/html532/TCutG.html:16741,Energy Efficiency,reduce,reduces,16741,"nt_tTGraph::fNpointsNumber of points <= fMaxSize; TObject*fObjectX!pointer to an object corresponding to X; TObject*fObjectY!pointer to an object corresponding to Y; TStringTNamed::fTitleobject title; TStringfVarXX variable; TStringfVarYY variable; Double_t*TGraph::fX[fNpoints] array of X points; Double_t*TGraph::fY[fNpoints] array of Y points. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCutG(); TCutG default constructor. TCutG(const TCutG& cutg); TCutG copy constructor. TCutG(const char* name, Int_t n); TCutG normal constructor. TCutG(const char* name, Int_t n, const Float_t* x, const Float_t* y); TCutG normal constructor. TCutG(const char* name, Int_t n, const Double_t* x, const Double_t* y); TCutG normal constructor. ~TCutG(); TCutG destructor. Double_t Area() const; Compute the area inside this TCutG; The algorithm uses Stoke's theorem over the border of the closed polygon.; Just as a reminder: Stoke's theorem reduces a surface integral; to a line integral over the border of the surface integral. void Center(Double_t& cx, Double_t& cy) const; Compute the center x,y of this TCutG; The algorithm uses Stoke's theorem over the border of the closed polygon.; Just as a reminder: Stoke's theorem reduces a surface integral; to a line integral over the border of the surface integral. Double_t IntegralHist(TH2* h, Option_t* option = """") const; Compute the integral of 2-d histogram h for all bins inside the cut; if option ""width"" is specified, the integral is the sum of; the bin contents multiplied by the bin width in x and in y. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetObjectX(TObject* obj); Set the X object (and delete the previous one if any). void SetObjectY(TObject* obj); Set the Y object (and delete the previous one if any). void SetVarX(const char* varx); Set X variable. void SetVarY(const char* vary); Set Y variable. void Streamer(TBuffe",MatchSource.WIKI,root/html532/TCutG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCutG.html
https://root.cern/root/html532/TCutG.html:17025,Energy Efficiency,reduce,reduces,17025," of X points; Double_t*TGraph::fY[fNpoints] array of Y points. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCutG(); TCutG default constructor. TCutG(const TCutG& cutg); TCutG copy constructor. TCutG(const char* name, Int_t n); TCutG normal constructor. TCutG(const char* name, Int_t n, const Float_t* x, const Float_t* y); TCutG normal constructor. TCutG(const char* name, Int_t n, const Double_t* x, const Double_t* y); TCutG normal constructor. ~TCutG(); TCutG destructor. Double_t Area() const; Compute the area inside this TCutG; The algorithm uses Stoke's theorem over the border of the closed polygon.; Just as a reminder: Stoke's theorem reduces a surface integral; to a line integral over the border of the surface integral. void Center(Double_t& cx, Double_t& cy) const; Compute the center x,y of this TCutG; The algorithm uses Stoke's theorem over the border of the closed polygon.; Just as a reminder: Stoke's theorem reduces a surface integral; to a line integral over the border of the surface integral. Double_t IntegralHist(TH2* h, Option_t* option = """") const; Compute the integral of 2-d histogram h for all bins inside the cut; if option ""width"" is specified, the integral is the sum of; the bin contents multiplied by the bin width in x and in y. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetObjectX(TObject* obj); Set the X object (and delete the previous one if any). void SetObjectY(TObject* obj); Set the Y object (and delete the previous one if any). void SetVarX(const char* varx); Set X variable. void SetVarY(const char* vary); Set Y variable. void Streamer(TBuffer& b); Stream an object of class TCutG. TObject * GetObjectX() const; {return fObjectX;}. TObject * GetObjectY() const; {return fObjectY;}. const char * GetVarX() const; {return fVarX.Data();}. const char * GetVarY() const; {return fVarY.Data();}. » Author: Rene Brun 16/05/97 » Copyr",MatchSource.WIKI,root/html532/TCutG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCutG.html
https://root.cern/root/html532/TCutG.html:922,Modifiability,variab,variables,922,". TCutG. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » GRAF; » TCutG. class TCutG: public TGraph. Graphical cut class; A Graphical cut. A TCutG object is a closed polygon defining a closed region in a x,y plot.; It can be created via the graphics editor option ""CutG"" or directly by; invoking its constructor. The first and last points should be the same. To create a TCutG via the graphics editor, use the left button to select the; points building the contour of the cut. Click on the right button to close the; TCutG. When it is created via the graphics editor, the TCutG object is named; ""CUTG"". It is recommended to immediatly change the name by using the context; menu item ""SetName"". When the graphics editor is used, the names of the; variables X,Y are automatically taken from the current pad title. Example:. Assume a TTree object T and:. Root > T.Draw(""abs(fMomemtum)%fEtot""). the TCutG members fVarX, fVary will be set to:. fVarx = fEtot; fVary = abs(fMomemtum). A graphical cut can be used in a TTree selection expression:. Root > T.Draw(""fEtot"",""cutg1""). where ""cutg1"" is the name of an existing graphical cut. Note that, as shown in the example above, a graphical cut may be used in a; selection expression when drawing TTrees expressions of 1-d, 2-d or; 3-dimensions. The expressions used in TTree::Draw can reference the variables in; the fVarX, fVarY of the graphical cut plus other variables. When the TCutG object is created by TTree::Draw, it is added to the list of special objects in; the main TROOT object pointed by gROOT. To retrieve a pointer to this object; from the code or command line, do:. TCutG *mycutg;; mycutg = (TCutG*)gROOT->GetListOfSpecials()->FindObject(""CUTG""); mycutg->SetName(""mycutg"");. When the TCutG is not created via TTree::Draw, one must set the variable names; correspondi",MatchSource.WIKI,root/html532/TCutG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCutG.html
https://root.cern/root/html532/TCutG.html:1517,Modifiability,variab,variables,1517,"he same. To create a TCutG via the graphics editor, use the left button to select the; points building the contour of the cut. Click on the right button to close the; TCutG. When it is created via the graphics editor, the TCutG object is named; ""CUTG"". It is recommended to immediatly change the name by using the context; menu item ""SetName"". When the graphics editor is used, the names of the; variables X,Y are automatically taken from the current pad title. Example:. Assume a TTree object T and:. Root > T.Draw(""abs(fMomemtum)%fEtot""). the TCutG members fVarX, fVary will be set to:. fVarx = fEtot; fVary = abs(fMomemtum). A graphical cut can be used in a TTree selection expression:. Root > T.Draw(""fEtot"",""cutg1""). where ""cutg1"" is the name of an existing graphical cut. Note that, as shown in the example above, a graphical cut may be used in a; selection expression when drawing TTrees expressions of 1-d, 2-d or; 3-dimensions. The expressions used in TTree::Draw can reference the variables in; the fVarX, fVarY of the graphical cut plus other variables. When the TCutG object is created by TTree::Draw, it is added to the list of special objects in; the main TROOT object pointed by gROOT. To retrieve a pointer to this object; from the code or command line, do:. TCutG *mycutg;; mycutg = (TCutG*)gROOT->GetListOfSpecials()->FindObject(""CUTG""); mycutg->SetName(""mycutg"");. When the TCutG is not created via TTree::Draw, one must set the variable names; corresponding to x,y if one wants to use the cut as input to TTree::Draw,eg. TCutG *cutg = new TCutG(""mycut"",5);; cutg->SetVarX(""y"");; cutg->SetVarY(""x"");; cutg->SetPoint(0,-0.3586207,1.509534);; cutg->SetPoint(1,-1.894181,-0.529661);; cutg->SetPoint(2,0.07780173,-1.21822);; cutg->SetPoint(3,-1.0375,-0.07944915);; cutg->SetPoint(4,0.756681,0.1853814);; cutg->SetPoint(5,-0.3586207,1.509534);. ; Example of use of a TCutG in TTree::Draw:. tree.Draw(""x:y"",""mycutg && z>0 %% sqrt(x)>1""). A Graphical cut may be drawn via TGraph::Draw. It",MatchSource.WIKI,root/html532/TCutG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCutG.html
https://root.cern/root/html532/TCutG.html:1580,Modifiability,variab,variables,1580,"he same. To create a TCutG via the graphics editor, use the left button to select the; points building the contour of the cut. Click on the right button to close the; TCutG. When it is created via the graphics editor, the TCutG object is named; ""CUTG"". It is recommended to immediatly change the name by using the context; menu item ""SetName"". When the graphics editor is used, the names of the; variables X,Y are automatically taken from the current pad title. Example:. Assume a TTree object T and:. Root > T.Draw(""abs(fMomemtum)%fEtot""). the TCutG members fVarX, fVary will be set to:. fVarx = fEtot; fVary = abs(fMomemtum). A graphical cut can be used in a TTree selection expression:. Root > T.Draw(""fEtot"",""cutg1""). where ""cutg1"" is the name of an existing graphical cut. Note that, as shown in the example above, a graphical cut may be used in a; selection expression when drawing TTrees expressions of 1-d, 2-d or; 3-dimensions. The expressions used in TTree::Draw can reference the variables in; the fVarX, fVarY of the graphical cut plus other variables. When the TCutG object is created by TTree::Draw, it is added to the list of special objects in; the main TROOT object pointed by gROOT. To retrieve a pointer to this object; from the code or command line, do:. TCutG *mycutg;; mycutg = (TCutG*)gROOT->GetListOfSpecials()->FindObject(""CUTG""); mycutg->SetName(""mycutg"");. When the TCutG is not created via TTree::Draw, one must set the variable names; corresponding to x,y if one wants to use the cut as input to TTree::Draw,eg. TCutG *cutg = new TCutG(""mycut"",5);; cutg->SetVarX(""y"");; cutg->SetVarY(""x"");; cutg->SetPoint(0,-0.3586207,1.509534);; cutg->SetPoint(1,-1.894181,-0.529661);; cutg->SetPoint(2,0.07780173,-1.21822);; cutg->SetPoint(3,-1.0375,-0.07944915);; cutg->SetPoint(4,0.756681,0.1853814);; cutg->SetPoint(5,-0.3586207,1.509534);. ; Example of use of a TCutG in TTree::Draw:. tree.Draw(""x:y"",""mycutg && z>0 %% sqrt(x)>1""). A Graphical cut may be drawn via TGraph::Draw. It",MatchSource.WIKI,root/html532/TCutG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCutG.html
https://root.cern/root/html532/TCutG.html:1974,Modifiability,variab,variable,1974," Example:. Assume a TTree object T and:. Root > T.Draw(""abs(fMomemtum)%fEtot""). the TCutG members fVarX, fVary will be set to:. fVarx = fEtot; fVary = abs(fMomemtum). A graphical cut can be used in a TTree selection expression:. Root > T.Draw(""fEtot"",""cutg1""). where ""cutg1"" is the name of an existing graphical cut. Note that, as shown in the example above, a graphical cut may be used in a; selection expression when drawing TTrees expressions of 1-d, 2-d or; 3-dimensions. The expressions used in TTree::Draw can reference the variables in; the fVarX, fVarY of the graphical cut plus other variables. When the TCutG object is created by TTree::Draw, it is added to the list of special objects in; the main TROOT object pointed by gROOT. To retrieve a pointer to this object; from the code or command line, do:. TCutG *mycutg;; mycutg = (TCutG*)gROOT->GetListOfSpecials()->FindObject(""CUTG""); mycutg->SetName(""mycutg"");. When the TCutG is not created via TTree::Draw, one must set the variable names; corresponding to x,y if one wants to use the cut as input to TTree::Draw,eg. TCutG *cutg = new TCutG(""mycut"",5);; cutg->SetVarX(""y"");; cutg->SetVarY(""x"");; cutg->SetPoint(0,-0.3586207,1.509534);; cutg->SetPoint(1,-1.894181,-0.529661);; cutg->SetPoint(2,0.07780173,-1.21822);; cutg->SetPoint(3,-1.0375,-0.07944915);; cutg->SetPoint(4,0.756681,0.1853814);; cutg->SetPoint(5,-0.3586207,1.509534);. ; Example of use of a TCutG in TTree::Draw:. tree.Draw(""x:y"",""mycutg && z>0 %% sqrt(x)>1""). A Graphical cut may be drawn via TGraph::Draw. It can be edited like a normal; TGraph. A Graphical cut may be saved to a file via TCutG::Write.; . Function Members (Methods); public:. TCutG(); TCutG(const TCutG& cutg); TCutG(const char* name, Int_t n); TCutG(const char* name, Int_t n, const Float_t* x, const Float_t* y); TCutG(const char* name, Int_t n, const Double_t* x, const Double_t* y); virtual~TCutG(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* opt",MatchSource.WIKI,root/html532/TCutG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCutG.html
https://root.cern/root/html532/TCutG.html:8283,Modifiability,Inherit,InheritsFrom,8283,"ximum() const; Int_tTGraph::GetMaxSize() const; virtual Double_tTGraph::GetMean(Int_t axis = 1) const; Double_tTGraph::GetMinimum() const; Int_tTGraph::GetN() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); TObject*GetObjectX() const; TObject*GetObjectY() const; virtual Option_t*TObject::GetOption() const; virtual Int_tTGraph::GetPoint(Int_t i, Double_t& x, Double_t& y) const; virtual Double_tTGraph::GetRMS(Int_t axis = 1) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetVarX() const; const char*GetVarY() const; Double_t*TGraph::GetX() const; TAxis*TGraph::GetXaxis() const; Double_t*TGraph::GetY() const; TAxis*TGraph::GetYaxis() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGraph::InitExpo(Double_t xmin = 0, Double_t xmax = 0); virtual voidTGraph::InitGaus(Double_t xmin = 0, Double_t xmax = 0); virtual voidTGraph::InitPolynom(Double_t xmin = 0, Double_t xmax = 0); virtual Int_tTGraph::InsertPoint()MENU ; virtual voidTObject::Inspect() constMENU ; virtual Double_tTGraph::Integral(Int_t first = 0, Int_t last = -1) const; virtual Double_tIntegralHist(TH2* h, Option_t* option = """") const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGraph::IsEditable() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Int_tTGraph::IsInside(Double_t x, Double_t y) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTGraph::LeastSquareFit(Int_t m, Double_t",MatchSource.WIKI,root/html532/TCutG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCutG.html
https://root.cern/root/html532/TCutG.html:8349,Modifiability,Inherit,InheritsFrom,8349,"raph::GetMean(Int_t axis = 1) const; Double_tTGraph::GetMinimum() const; Int_tTGraph::GetN() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); TObject*GetObjectX() const; TObject*GetObjectY() const; virtual Option_t*TObject::GetOption() const; virtual Int_tTGraph::GetPoint(Int_t i, Double_t& x, Double_t& y) const; virtual Double_tTGraph::GetRMS(Int_t axis = 1) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetVarX() const; const char*GetVarY() const; Double_t*TGraph::GetX() const; TAxis*TGraph::GetXaxis() const; Double_t*TGraph::GetY() const; TAxis*TGraph::GetYaxis() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGraph::InitExpo(Double_t xmin = 0, Double_t xmax = 0); virtual voidTGraph::InitGaus(Double_t xmin = 0, Double_t xmax = 0); virtual voidTGraph::InitPolynom(Double_t xmin = 0, Double_t xmax = 0); virtual Int_tTGraph::InsertPoint()MENU ; virtual voidTObject::Inspect() constMENU ; virtual Double_tTGraph::Integral(Int_t first = 0, Int_t last = -1) const; virtual Double_tIntegralHist(TH2* h, Option_t* option = """") const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGraph::IsEditable() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Int_tTGraph::IsInside(Double_t x, Double_t y) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTGraph::LeastSquareFit(Int_t m, Double_t* a, Double_t xmin = 0, Double_t xmax = 0); virtual voidTGraph::Le",MatchSource.WIKI,root/html532/TCutG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCutG.html
https://root.cern/root/html532/TCutG.html:15980,Modifiability,variab,variable,15980," iend); virtual voidTGraph::SwapPoints(Int_t pos1, Int_t pos2); static voidTGraph::SwapValues(Double_t* arr, Int_t pos1, Int_t pos2). Data Members; public:. enum TGraph::[unnamed] { kClipFrame; kNotEditable; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; TList*TGraph::fFunctionsPointer to list of functions (fits and user); TH1F*TGraph::fHistogramPointer to histogram used for drawing axis; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTGraph::fMaxSize!Current dimension of arrays fX and fY; Double_tTGraph::fMaximumMaximum value for plotting along y; Double_tTGraph::fMinimumMinimum value for plotting along y; TStringTNamed::fNameobject identifier; Int_tTGraph::fNpointsNumber of points <= fMaxSize; TObject*fObjectX!pointer to an object corresponding to X; TObject*fObjectY!pointer to an object corresponding to Y; TStringTNamed::fTitleobject title; TStringfVarXX variable; TStringfVarYY variable; Double_t*TGraph::fX[fNpoints] array of X points; Double_t*TGraph::fY[fNpoints] array of Y points. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCutG(); TCutG default constructor. TCutG(const TCutG& cutg); TCutG copy constructor. TCutG(const char* name, Int_t n); TCutG normal constructor. TCutG(const char* name, Int_t n, const Float_t* x, const Float_t* y); TCutG normal constructor. TCutG(const char* name, Int_t n, const Double_t* x, const Double_t* y); TCutG normal constructor. ~TCutG(); TCutG destructor. Double_t Area() ",MatchSource.WIKI,root/html532/TCutG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCutG.html
https://root.cern/root/html532/TCutG.html:16004,Modifiability,variab,variable,16004," iend); virtual voidTGraph::SwapPoints(Int_t pos1, Int_t pos2); static voidTGraph::SwapValues(Double_t* arr, Int_t pos1, Int_t pos2). Data Members; public:. enum TGraph::[unnamed] { kClipFrame; kNotEditable; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; TList*TGraph::fFunctionsPointer to list of functions (fits and user); TH1F*TGraph::fHistogramPointer to histogram used for drawing axis; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTGraph::fMaxSize!Current dimension of arrays fX and fY; Double_tTGraph::fMaximumMaximum value for plotting along y; Double_tTGraph::fMinimumMinimum value for plotting along y; TStringTNamed::fNameobject identifier; Int_tTGraph::fNpointsNumber of points <= fMaxSize; TObject*fObjectX!pointer to an object corresponding to X; TObject*fObjectY!pointer to an object corresponding to Y; TStringTNamed::fTitleobject title; TStringfVarXX variable; TStringfVarYY variable; Double_t*TGraph::fX[fNpoints] array of X points; Double_t*TGraph::fY[fNpoints] array of Y points. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCutG(); TCutG default constructor. TCutG(const TCutG& cutg); TCutG copy constructor. TCutG(const char* name, Int_t n); TCutG normal constructor. TCutG(const char* name, Int_t n, const Float_t* x, const Float_t* y); TCutG normal constructor. TCutG(const char* name, Int_t n, const Double_t* x, const Double_t* y); TCutG normal constructor. ~TCutG(); TCutG destructor. Double_t Area() ",MatchSource.WIKI,root/html532/TCutG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCutG.html
https://root.cern/root/html532/TCutG.html:16126,Modifiability,Inherit,Inheritance,16126," TList*TGraph::fFunctionsPointer to list of functions (fits and user); TH1F*TGraph::fHistogramPointer to histogram used for drawing axis; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTGraph::fMaxSize!Current dimension of arrays fX and fY; Double_tTGraph::fMaximumMaximum value for plotting along y; Double_tTGraph::fMinimumMinimum value for plotting along y; TStringTNamed::fNameobject identifier; Int_tTGraph::fNpointsNumber of points <= fMaxSize; TObject*fObjectX!pointer to an object corresponding to X; TObject*fObjectY!pointer to an object corresponding to Y; TStringTNamed::fTitleobject title; TStringfVarXX variable; TStringfVarYY variable; Double_t*TGraph::fX[fNpoints] array of X points; Double_t*TGraph::fY[fNpoints] array of Y points. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCutG(); TCutG default constructor. TCutG(const TCutG& cutg); TCutG copy constructor. TCutG(const char* name, Int_t n); TCutG normal constructor. TCutG(const char* name, Int_t n, const Float_t* x, const Float_t* y); TCutG normal constructor. TCutG(const char* name, Int_t n, const Double_t* x, const Double_t* y); TCutG normal constructor. ~TCutG(); TCutG destructor. Double_t Area() const; Compute the area inside this TCutG; The algorithm uses Stoke's theorem over the border of the closed polygon.; Just as a reminder: Stoke's theorem reduces a surface integral; to a line integral over the border of the surface integral. void Center(Double_t& cx, Double_t& cy) const; Compute the center x,y of this TCutG; The algorithm uses Stoke's theorem over the border of the closed polygon.; Just as a reminder: Stoke's theorem reduces a surface integral; to a line integral over the border of the surface integral. Double_t IntegralHist(TH2* h, Option_t*",MatchSource.WIKI,root/html532/TCutG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCutG.html
https://root.cern/root/html532/TCutG.html:16139,Modifiability,Inherit,Inherited,16139," TList*TGraph::fFunctionsPointer to list of functions (fits and user); TH1F*TGraph::fHistogramPointer to histogram used for drawing axis; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTGraph::fMaxSize!Current dimension of arrays fX and fY; Double_tTGraph::fMaximumMaximum value for plotting along y; Double_tTGraph::fMinimumMinimum value for plotting along y; TStringTNamed::fNameobject identifier; Int_tTGraph::fNpointsNumber of points <= fMaxSize; TObject*fObjectX!pointer to an object corresponding to X; TObject*fObjectY!pointer to an object corresponding to Y; TStringTNamed::fTitleobject title; TStringfVarXX variable; TStringfVarYY variable; Double_t*TGraph::fX[fNpoints] array of X points; Double_t*TGraph::fY[fNpoints] array of Y points. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCutG(); TCutG default constructor. TCutG(const TCutG& cutg); TCutG copy constructor. TCutG(const char* name, Int_t n); TCutG normal constructor. TCutG(const char* name, Int_t n, const Float_t* x, const Float_t* y); TCutG normal constructor. TCutG(const char* name, Int_t n, const Double_t* x, const Double_t* y); TCutG normal constructor. ~TCutG(); TCutG destructor. Double_t Area() const; Compute the area inside this TCutG; The algorithm uses Stoke's theorem over the border of the closed polygon.; Just as a reminder: Stoke's theorem reduces a surface integral; to a line integral over the border of the surface integral. void Center(Double_t& cx, Double_t& cy) const; Compute the center x,y of this TCutG; The algorithm uses Stoke's theorem over the border of the closed polygon.; Just as a reminder: Stoke's theorem reduces a surface integral; to a line integral over the border of the surface integral. Double_t IntegralHist(TH2* h, Option_t*",MatchSource.WIKI,root/html532/TCutG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCutG.html
https://root.cern/root/html532/TCutG.html:17688,Modifiability,variab,variable,17688,"e, Int_t n, const Float_t* x, const Float_t* y); TCutG normal constructor. TCutG(const char* name, Int_t n, const Double_t* x, const Double_t* y); TCutG normal constructor. ~TCutG(); TCutG destructor. Double_t Area() const; Compute the area inside this TCutG; The algorithm uses Stoke's theorem over the border of the closed polygon.; Just as a reminder: Stoke's theorem reduces a surface integral; to a line integral over the border of the surface integral. void Center(Double_t& cx, Double_t& cy) const; Compute the center x,y of this TCutG; The algorithm uses Stoke's theorem over the border of the closed polygon.; Just as a reminder: Stoke's theorem reduces a surface integral; to a line integral over the border of the surface integral. Double_t IntegralHist(TH2* h, Option_t* option = """") const; Compute the integral of 2-d histogram h for all bins inside the cut; if option ""width"" is specified, the integral is the sum of; the bin contents multiplied by the bin width in x and in y. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetObjectX(TObject* obj); Set the X object (and delete the previous one if any). void SetObjectY(TObject* obj); Set the Y object (and delete the previous one if any). void SetVarX(const char* varx); Set X variable. void SetVarY(const char* vary); Set Y variable. void Streamer(TBuffer& b); Stream an object of class TCutG. TObject * GetObjectX() const; {return fObjectX;}. TObject * GetObjectY() const; {return fObjectY;}. const char * GetVarX() const; {return fVarX.Data();}. const char * GetVarY() const; {return fVarY.Data();}. » Author: Rene Brun 16/05/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/graf:$Id: TCutG.h 37309 2010-12-06 00:10:29Z pcanal $ » Last generated: 2011-11-03 20:11; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TCutG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCutG.html
https://root.cern/root/html532/TCutG.html:17736,Modifiability,variab,variable,17736,"e, Int_t n, const Float_t* x, const Float_t* y); TCutG normal constructor. TCutG(const char* name, Int_t n, const Double_t* x, const Double_t* y); TCutG normal constructor. ~TCutG(); TCutG destructor. Double_t Area() const; Compute the area inside this TCutG; The algorithm uses Stoke's theorem over the border of the closed polygon.; Just as a reminder: Stoke's theorem reduces a surface integral; to a line integral over the border of the surface integral. void Center(Double_t& cx, Double_t& cy) const; Compute the center x,y of this TCutG; The algorithm uses Stoke's theorem over the border of the closed polygon.; Just as a reminder: Stoke's theorem reduces a surface integral; to a line integral over the border of the surface integral. Double_t IntegralHist(TH2* h, Option_t* option = """") const; Compute the integral of 2-d histogram h for all bins inside the cut; if option ""width"" is specified, the integral is the sum of; the bin contents multiplied by the bin width in x and in y. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetObjectX(TObject* obj); Set the X object (and delete the previous one if any). void SetObjectY(TObject* obj); Set the Y object (and delete the previous one if any). void SetVarX(const char* varx); Set X variable. void SetVarY(const char* vary); Set Y variable. void Streamer(TBuffer& b); Stream an object of class TCutG. TObject * GetObjectX() const; {return fObjectX;}. TObject * GetObjectY() const; {return fObjectY;}. const char * GetVarX() const; {return fVarX.Data();}. const char * GetVarY() const; {return fVarY.Data();}. » Author: Rene Brun 16/05/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/graf:$Id: TCutG.h 37309 2010-12-06 00:10:29Z pcanal $ » Last generated: 2011-11-03 20:11; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TCutG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCutG.html
https://root.cern/root/html532/TCutG.html:8173,Security,Hash,Hash,8173," Size_tTAttMarker::GetMarkerSize() const; virtual Style_tTAttMarker::GetMarkerStyle() const; Double_tTGraph::GetMaximum() const; Int_tTGraph::GetMaxSize() const; virtual Double_tTGraph::GetMean(Int_t axis = 1) const; Double_tTGraph::GetMinimum() const; Int_tTGraph::GetN() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); TObject*GetObjectX() const; TObject*GetObjectY() const; virtual Option_t*TObject::GetOption() const; virtual Int_tTGraph::GetPoint(Int_t i, Double_t& x, Double_t& y) const; virtual Double_tTGraph::GetRMS(Int_t axis = 1) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetVarX() const; const char*GetVarY() const; Double_t*TGraph::GetX() const; TAxis*TGraph::GetXaxis() const; Double_t*TGraph::GetY() const; TAxis*TGraph::GetYaxis() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGraph::InitExpo(Double_t xmin = 0, Double_t xmax = 0); virtual voidTGraph::InitGaus(Double_t xmin = 0, Double_t xmax = 0); virtual voidTGraph::InitPolynom(Double_t xmin = 0, Double_t xmax = 0); virtual Int_tTGraph::InsertPoint()MENU ; virtual voidTObject::Inspect() constMENU ; virtual Double_tTGraph::Integral(Int_t first = 0, Int_t last = -1) const; virtual Double_tIntegralHist(TH2* h, Option_t* option = """") const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGraph::IsEditable() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Int_tTGraph::IsInside(Double_t x, Double_t y) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAtt",MatchSource.WIKI,root/html532/TCutG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCutG.html
https://root.cern/root/html532/TCutG.html:13447,Testability,Test,TestBit,13447,"e(Style_t fstyle); virtual voidTGraph::SetHistogram(TH1F* h); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTAttMarker::SetMarkerAttributes()MENU ; virtual voidTAttMarker::SetMarkerColor(Color_t tcolor = 1); virtual voidTAttMarker::SetMarkerSize(Size_t msize = 1); virtual voidTAttMarker::SetMarkerStyle(Style_t mstyle = 1); virtual voidTGraph::SetMaximum(Double_t maximum = -1111)MENU ; virtual voidTGraph::SetMinimum(Double_t minimum = -1111)MENU ; virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetObjectX(TObject* obj); virtual voidSetObjectY(TObject* obj); virtual voidTGraph::SetPoint(Int_t i, Double_t x, Double_t y); virtual voidTGraph::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetVarX(const char* varx)MENU ; virtual voidSetVarY(const char* vary)MENU ; virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidTGraph::Sort(Bool_t (*)(const TGraph*, Int_t, Int_t) greater = &TGraph::CompareX, Bool_t ascending = kTRUE, Int_t low = 0, Int_t high = -1111); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTGraph::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTGraph::Zero(Int_t& k, Double_t AZ, Double_t BZ, Double_t E2, Double_t& X, Double_t& Y, Int_t maxiterations).",MatchSource.WIKI,root/html532/TCutG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCutG.html
https://root.cern/root/html532/TCutG.html:13486,Testability,Test,TestBits,13486,"e(Style_t fstyle); virtual voidTGraph::SetHistogram(TH1F* h); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTAttMarker::SetMarkerAttributes()MENU ; virtual voidTAttMarker::SetMarkerColor(Color_t tcolor = 1); virtual voidTAttMarker::SetMarkerSize(Size_t msize = 1); virtual voidTAttMarker::SetMarkerStyle(Style_t mstyle = 1); virtual voidTGraph::SetMaximum(Double_t maximum = -1111)MENU ; virtual voidTGraph::SetMinimum(Double_t minimum = -1111)MENU ; virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetObjectX(TObject* obj); virtual voidSetObjectY(TObject* obj); virtual voidTGraph::SetPoint(Int_t i, Double_t x, Double_t y); virtual voidTGraph::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetVarX(const char* varx)MENU ; virtual voidSetVarY(const char* vary)MENU ; virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidTGraph::Sort(Bool_t (*)(const TGraph*, Int_t, Int_t) greater = &TGraph::CompareX, Bool_t ascending = kTRUE, Int_t low = 0, Int_t high = -1111); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTGraph::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTGraph::Zero(Int_t& k, Double_t AZ, Double_t BZ, Double_t E2, Double_t& X, Double_t& Y, Int_t maxiterations).",MatchSource.WIKI,root/html532/TCutG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCutG.html
https://root.cern/root/html532/TCutG.html:3305,Usability,Clear,Clear,3305,,MatchSource.WIKI,root/html532/TCutG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TCutG.html
https://root.cern/root/html532/TDatabasePDG.html:2324,Availability,Error,Error,2324," Double_t DecayWidth, Double_t Charge, const char* ParticleClass, Int_t PdgCode, Int_t Anti = -1, Int_t TrackingCode = 0); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Int_tConvertGeant3ToPdg(Int_t Geant3Number); virtual Int_tConvertIsajetToPdg(Int_t isaNumber); virtual Int_tConvertPdgToGeant3(Int_t pdgNumber); virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TParticlePDG*GetParticle(Int_t pdgCode) const; TParticlePDG*GetParticle(const char* name) const; TParticleClassPDG*GetParticleClass(const c",MatchSource.WIKI,root/html532/TDatabasePDG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDatabasePDG.html
https://root.cern/root/html532/TDatabasePDG.html:2453,Availability,error,error,2453,"l voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Int_tConvertGeant3ToPdg(Int_t Geant3Number); virtual Int_tConvertIsajetToPdg(Int_t isaNumber); virtual Int_tConvertPdgToGeant3(Int_t pdgNumber); virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TParticlePDG*GetParticle(Int_t pdgCode) const; TParticlePDG*GetParticle(const char* name) const; TParticleClassPDG*GetParticleClass(const char* name); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::Handl",MatchSource.WIKI,root/html532/TDatabasePDG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDatabasePDG.html
https://root.cern/root/html532/TDatabasePDG.html:2537,Availability,error,error,2537,"atic TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Int_tConvertGeant3ToPdg(Int_t Geant3Number); virtual Int_tConvertIsajetToPdg(Int_t isaNumber); virtual Int_tConvertPdgToGeant3(Int_t pdgNumber); virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TParticlePDG*GetParticle(Int_t pdgCode) const; TParticlePDG*GetParticle(const char* name) const; TParticleClassPDG*GetParticleClass(const char* name); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Inf",MatchSource.WIKI,root/html532/TDatabasePDG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDatabasePDG.html
https://root.cern/root/html532/TDatabasePDG.html:1358,Energy Efficiency,Charge,Charge,1358," TDatabasePDG(); virtual~TDatabasePDG(); voidTObject::AbstractMethod(const char* method) const; virtual TParticlePDG*AddAntiParticle(const char* Name, Int_t PdgCode); virtual TParticlePDG*AddParticle(const char* Name, const char* Title, Double_t Mass, Bool_t Stable, Double_t DecayWidth, Double_t Charge, const char* ParticleClass, Int_t PdgCode, Int_t Anti = -1, Int_t TrackingCode = 0); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Int_tConvertGeant3ToPdg(Int_t Geant3Number); virtual Int_tConvertIsajetToPdg(Int_t isaNumber); virtual Int_tConvertPdgToGeant3(Int_t pdgNumber); virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::De",MatchSource.WIKI,root/html532/TDatabasePDG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDatabasePDG.html
https://root.cern/root/html532/TDatabasePDG.html:7814,Energy Efficiency,Charge,Charge,7814,"eKey; kOverwrite; kWriteDelete; };. protected:. TObjArray*fListOfClasseslist of classes (leptons etc.); TStringTNamed::fNameobject identifier; THashList*fParticleListlist of PDG particles; TExMap*fPdgMap!hash-map from pdg-code to particle; TStringTNamed::fTitleobject title; static TDatabasePDG*fgInstanceprotect against multiple instances. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDatabasePDG(); Create PDG database. Initialization of the DB has to be done via explicit; call to ReadDataBasePDG (also done by GetParticle methods). ~TDatabasePDG(); Cleanup the PDG database. TDatabasePDG* Instance(); static function. void BuildPdgMap() const; Build fPdgMap mapping pdg-code to particle. Initial size is set so as to be able to hold at least 600; particles: 521 in default table, ALICE adds 54 more.; To be revisited after LHC discovers SUSY. TParticlePDG* AddParticle(const char* Name, const char* Title, Double_t Mass, Bool_t Stable, Double_t DecayWidth, Double_t Charge, const char* ParticleClass, Int_t PdgCode, Int_t Anti = -1, Int_t TrackingCode = 0). Particle definition normal constructor. If the particle is set to be; stable, the decay width parameter does have no meaning and can be set to; any value. The parameters granularity, LowerCutOff and HighCutOff are; used for the construction of the mean free path look up tables. The; granularity will be the number of logwise energy points for which the; mean free path will be calculated. TParticlePDG* AddAntiParticle(const char* Name, Int_t PdgCode); assuming particle has already been defined. TParticlePDG * GetParticle(const char* name) const. Get a pointer to the particle object according to the name given. TParticlePDG * GetParticle(Int_t pdgCode) const. Get a pointer to the particle object according to the MC code number. void Print(Option_t* opt = """") const; Print contents of PDG database. Int_t ConvertGeant3ToPdg(Int_t Geant3Number); Converts Geant3 particle codes to PDG con",MatchSource.WIKI,root/html532/TDatabasePDG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDatabasePDG.html
https://root.cern/root/html532/TDatabasePDG.html:8232,Energy Efficiency,energy,energy,8232,"DG(); Create PDG database. Initialization of the DB has to be done via explicit; call to ReadDataBasePDG (also done by GetParticle methods). ~TDatabasePDG(); Cleanup the PDG database. TDatabasePDG* Instance(); static function. void BuildPdgMap() const; Build fPdgMap mapping pdg-code to particle. Initial size is set so as to be able to hold at least 600; particles: 521 in default table, ALICE adds 54 more.; To be revisited after LHC discovers SUSY. TParticlePDG* AddParticle(const char* Name, const char* Title, Double_t Mass, Bool_t Stable, Double_t DecayWidth, Double_t Charge, const char* ParticleClass, Int_t PdgCode, Int_t Anti = -1, Int_t TrackingCode = 0). Particle definition normal constructor. If the particle is set to be; stable, the decay width parameter does have no meaning and can be set to; any value. The parameters granularity, LowerCutOff and HighCutOff are; used for the construction of the mean free path look up tables. The; granularity will be the number of logwise energy points for which the; mean free path will be calculated. TParticlePDG* AddAntiParticle(const char* Name, Int_t PdgCode); assuming particle has already been defined. TParticlePDG * GetParticle(const char* name) const. Get a pointer to the particle object according to the name given. TParticlePDG * GetParticle(Int_t pdgCode) const. Get a pointer to the particle object according to the MC code number. void Print(Option_t* opt = """") const; Print contents of PDG database. Int_t ConvertGeant3ToPdg(Int_t Geant3Number); Converts Geant3 particle codes to PDG convention. (Geant4 uses; PDG convention already); Source: BaBar User Guide, Neil I. Geddes,. /*; see Conversion table; */. with some fixes by PB, marked with (PB) below. Checked against; PDG listings from 2000. Paul Balm, Nov 19, 2001. Int_t ConvertPdgToGeant3(Int_t pdgNumber); Converts pdg code to geant3 id. Int_t ConvertIsajetToPdg(Int_t isaNumber). Converts the ISAJET Particle number into the PDG MC number. void ReadPDGTable(const char* ",MatchSource.WIKI,root/html532/TDatabasePDG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDatabasePDG.html
https://root.cern/root/html532/TDatabasePDG.html:3612,Modifiability,Inherit,InheritsFrom,3612,"irtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TParticlePDG*GetParticle(Int_t pdgCode) const; TParticlePDG*GetParticle(const char* name) const; TParticleClassPDG*GetParticleClass(const char* name); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; static TDatabasePDG*Instance(); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tIsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[]",MatchSource.WIKI,root/html532/TDatabasePDG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDatabasePDG.html
https://root.cern/root/html532/TDatabasePDG.html:3678,Modifiability,Inherit,InheritsFrom,3678,"const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TParticlePDG*GetParticle(Int_t pdgCode) const; TParticlePDG*GetParticle(const char* name) const; TParticleClassPDG*GetParticleClass(const char* name); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; static TDatabasePDG*Instance(); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tIsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); vi",MatchSource.WIKI,root/html532/TDatabasePDG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDatabasePDG.html
https://root.cern/root/html532/TDatabasePDG.html:7152,Modifiability,Inherit,Inheritance,7152,"tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual Int_tWritePDGTable(const char* filename). protected:. TDatabasePDG(const TDatabasePDG& db); voidBuildPdgMap() const; virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); TDatabasePDG&operator=(const TDatabasePDG& db). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TObjArray*fListOfClasseslist of classes (leptons etc.); TStringTNamed::fNameobject identifier; THashList*fParticleListlist of PDG particles; TExMap*fPdgMap!hash-map from pdg-code to particle; TStringTNamed::fTitleobject title; static TDatabasePDG*fgInstanceprotect against multiple instances. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDatabasePDG(); Create PDG database. Initialization of the DB has to be done via explicit; call to ReadDataBasePDG (also done by GetParticle methods). ~TDatabasePDG(); Cleanup the PDG database. TDatabasePDG* Instance(); static function. void BuildPdgMap() const; Build fPdgMap mapping pdg-code to particle. Initial size is set so as to be able to hold at least 600; particles: 521 in default table, ALICE adds 54 more.; To be revisited after LHC discovers SUSY. TParticlePDG* AddParticle(const char* Name, const char* Title, Double_t Mass, Bool_t Stable, Double_t DecayWidth, Double_t Charge, const char* ParticleClass, Int_t PdgCode, Int_t Anti = -1, Int_t TrackingCode = 0). Particle definition normal constructor. If the particle is set to be; stable, the decay width parameter does have no meaning and can be set to; any value. The parameters granularity, LowerCutOff and HighCutOff are; used for the construction of the mean free path look up t",MatchSource.WIKI,root/html532/TDatabasePDG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDatabasePDG.html
https://root.cern/root/html532/TDatabasePDG.html:7165,Modifiability,Inherit,Inherited,7165,"tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual Int_tWritePDGTable(const char* filename). protected:. TDatabasePDG(const TDatabasePDG& db); voidBuildPdgMap() const; virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); TDatabasePDG&operator=(const TDatabasePDG& db). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TObjArray*fListOfClasseslist of classes (leptons etc.); TStringTNamed::fNameobject identifier; THashList*fParticleListlist of PDG particles; TExMap*fPdgMap!hash-map from pdg-code to particle; TStringTNamed::fTitleobject title; static TDatabasePDG*fgInstanceprotect against multiple instances. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDatabasePDG(); Create PDG database. Initialization of the DB has to be done via explicit; call to ReadDataBasePDG (also done by GetParticle methods). ~TDatabasePDG(); Cleanup the PDG database. TDatabasePDG* Instance(); static function. void BuildPdgMap() const; Build fPdgMap mapping pdg-code to particle. Initial size is set so as to be able to hold at least 600; particles: 521 in default table, ALICE adds 54 more.; To be revisited after LHC discovers SUSY. TParticlePDG* AddParticle(const char* Name, const char* Title, Double_t Mass, Bool_t Stable, Double_t DecayWidth, Double_t Charge, const char* ParticleClass, Int_t PdgCode, Int_t Anti = -1, Int_t TrackingCode = 0). Particle definition normal constructor. If the particle is set to be; stable, the decay width parameter does have no meaning and can be set to; any value. The parameters granularity, LowerCutOff and HighCutOff are; used for the construction of the mean free path look up t",MatchSource.WIKI,root/html532/TDatabasePDG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDatabasePDG.html
https://root.cern/root/html532/TDatabasePDG.html:3502,Security,Hash,Hash,3502,"ethod, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TParticlePDG*GetParticle(Int_t pdgCode) const; TParticlePDG*GetParticle(const char* name) const; TParticleClassPDG*GetParticleClass(const char* name); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; static TDatabasePDG*Instance(); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tIsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); vo",MatchSource.WIKI,root/html532/TDatabasePDG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDatabasePDG.html
https://root.cern/root/html532/TDatabasePDG.html:7001,Security,hash,hash-map,7001,"ect::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual Int_tWritePDGTable(const char* filename). protected:. TDatabasePDG(const TDatabasePDG& db); voidBuildPdgMap() const; virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); TDatabasePDG&operator=(const TDatabasePDG& db). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TObjArray*fListOfClasseslist of classes (leptons etc.); TStringTNamed::fNameobject identifier; THashList*fParticleListlist of PDG particles; TExMap*fPdgMap!hash-map from pdg-code to particle; TStringTNamed::fTitleobject title; static TDatabasePDG*fgInstanceprotect against multiple instances. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDatabasePDG(); Create PDG database. Initialization of the DB has to be done via explicit; call to ReadDataBasePDG (also done by GetParticle methods). ~TDatabasePDG(); Cleanup the PDG database. TDatabasePDG* Instance(); static function. void BuildPdgMap() const; Build fPdgMap mapping pdg-code to particle. Initial size is set so as to be able to hold at least 600; particles: 521 in default table, ALICE adds 54 more.; To be revisited after LHC discovers SUSY. TParticlePDG* AddParticle(const char* Name, const char* Title, Double_t Mass, Bool_t Stable, Double_t DecayWidth, Double_t Charge, const char* ParticleClass, Int_t PdgCode, Int_t Anti = -1, Int_t TrackingCode = 0). Particle definition normal constructor. If the particle is set to be; stable, the decay width parameter does hav",MatchSource.WIKI,root/html532/TDatabasePDG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDatabasePDG.html
https://root.cern/root/html532/TDatabasePDG.html:5896,Testability,Test,TestBit,5896,"operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); const THashList*ParticleList() const; virtual voidTObject::Pop(); virtual voidPrint(Option_t* opt = """") const; virtual Int_tTObject::Read(const char* name); virtual voidReadPDGTable(const char* filename = """"); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual Int_tWritePDGTable(const char* filename).",MatchSource.WIKI,root/html532/TDatabasePDG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDatabasePDG.html
https://root.cern/root/html532/TDatabasePDG.html:5935,Testability,Test,TestBits,5935,"operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); const THashList*ParticleList() const; virtual voidTObject::Pop(); virtual voidPrint(Option_t* opt = """") const; virtual Int_tTObject::Read(const char* name); virtual voidReadPDGTable(const char* filename = """"); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual Int_tWritePDGTable(const char* filename).",MatchSource.WIKI,root/html532/TDatabasePDG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDatabasePDG.html
https://root.cern/root/html532/TDatabasePDG.html:8224,Testability,log,logwise,8224,"DG(); Create PDG database. Initialization of the DB has to be done via explicit; call to ReadDataBasePDG (also done by GetParticle methods). ~TDatabasePDG(); Cleanup the PDG database. TDatabasePDG* Instance(); static function. void BuildPdgMap() const; Build fPdgMap mapping pdg-code to particle. Initial size is set so as to be able to hold at least 600; particles: 521 in default table, ALICE adds 54 more.; To be revisited after LHC discovers SUSY. TParticlePDG* AddParticle(const char* Name, const char* Title, Double_t Mass, Bool_t Stable, Double_t DecayWidth, Double_t Charge, const char* ParticleClass, Int_t PdgCode, Int_t Anti = -1, Int_t TrackingCode = 0). Particle definition normal constructor. If the particle is set to be; stable, the decay width parameter does have no meaning and can be set to; any value. The parameters granularity, LowerCutOff and HighCutOff are; used for the construction of the mean free path look up tables. The; granularity will be the number of logwise energy points for which the; mean free path will be calculated. TParticlePDG* AddAntiParticle(const char* Name, Int_t PdgCode); assuming particle has already been defined. TParticlePDG * GetParticle(const char* name) const. Get a pointer to the particle object according to the name given. TParticlePDG * GetParticle(Int_t pdgCode) const. Get a pointer to the particle object according to the MC code number. void Print(Option_t* opt = """") const; Print contents of PDG database. Int_t ConvertGeant3ToPdg(Int_t Geant3Number); Converts Geant3 particle codes to PDG convention. (Geant4 uses; PDG convention already); Source: BaBar User Guide, Neil I. Geddes,. /*; see Conversion table; */. with some fixes by PB, marked with (PB) below. Checked against; PDG listings from 2000. Paul Balm, Nov 19, 2001. Int_t ConvertPdgToGeant3(Int_t pdgNumber); Converts pdg code to geant3 id. Int_t ConvertIsajetToPdg(Int_t isaNumber). Converts the ISAJET Particle number into the PDG MC number. void ReadPDGTable(const char* ",MatchSource.WIKI,root/html532/TDatabasePDG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDatabasePDG.html
https://root.cern/root/html532/TDatabasePDG.html:1628,Usability,Clear,Clear,1628," TDatabasePDG(); virtual~TDatabasePDG(); voidTObject::AbstractMethod(const char* method) const; virtual TParticlePDG*AddAntiParticle(const char* Name, Int_t PdgCode); virtual TParticlePDG*AddParticle(const char* Name, const char* Title, Double_t Mass, Bool_t Stable, Double_t DecayWidth, Double_t Charge, const char* ParticleClass, Int_t PdgCode, Int_t Anti = -1, Int_t TrackingCode = 0); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Int_tConvertGeant3ToPdg(Int_t Geant3Number); virtual Int_tConvertIsajetToPdg(Int_t isaNumber); virtual Int_tConvertPdgToGeant3(Int_t pdgNumber); virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::De",MatchSource.WIKI,root/html532/TDatabasePDG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDatabasePDG.html
https://root.cern/root/html532/TDatabasePDG.html:8865,Usability,Guid,Guide,8865,"Class, Int_t PdgCode, Int_t Anti = -1, Int_t TrackingCode = 0). Particle definition normal constructor. If the particle is set to be; stable, the decay width parameter does have no meaning and can be set to; any value. The parameters granularity, LowerCutOff and HighCutOff are; used for the construction of the mean free path look up tables. The; granularity will be the number of logwise energy points for which the; mean free path will be calculated. TParticlePDG* AddAntiParticle(const char* Name, Int_t PdgCode); assuming particle has already been defined. TParticlePDG * GetParticle(const char* name) const. Get a pointer to the particle object according to the name given. TParticlePDG * GetParticle(Int_t pdgCode) const. Get a pointer to the particle object according to the MC code number. void Print(Option_t* opt = """") const; Print contents of PDG database. Int_t ConvertGeant3ToPdg(Int_t Geant3Number); Converts Geant3 particle codes to PDG convention. (Geant4 uses; PDG convention already); Source: BaBar User Guide, Neil I. Geddes,. /*; see Conversion table; */. with some fixes by PB, marked with (PB) below. Checked against; PDG listings from 2000. Paul Balm, Nov 19, 2001. Int_t ConvertPdgToGeant3(Int_t pdgNumber); Converts pdg code to geant3 id. Int_t ConvertIsajetToPdg(Int_t isaNumber). Converts the ISAJET Particle number into the PDG MC number. void ReadPDGTable(const char* filename = """"); read list of particles from a file; if the particle list does not exist, it is created, otherwise; particles are added to the existing list; See $ROOTSYS/etc/pdg_table.txt to see the file format. void Browse(TBrowser* b); browse data base. Int_t WritePDGTable(const char* filename); write contents of the particle DB into a file. TDatabasePDG(const TDatabasePDG& db); { }. TDatabasePDG& operator=(const TDatabasePDG& db). TParticleClassPDG* GetParticleClass(const char* name). const THashList * ParticleList() const; { return fParticleList; }. Bool_t IsFolder() const; { return kTRUE; }.",MatchSource.WIKI,root/html532/TDatabasePDG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDatabasePDG.html
https://root.cern/root/html532/TDataMember.html:6151,Availability,Error,Error,6151,,MatchSource.WIKI,root/html532/TDataMember.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataMember.html
https://root.cern/root/html532/TDataMember.html:6280,Availability,error,error,6280,,MatchSource.WIKI,root/html532/TDataMember.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataMember.html
https://root.cern/root/html532/TDataMember.html:6364,Availability,error,error,6364,"oidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tGetArrayDim() const; const char*GetArrayIndex() const; TClass*GetClass() const; TDataType*GetDataType() const; static TDictionary*TDictionary::GetDictionary(const char* name); static TDictionary*TDictionary::GetDictionary(const type_info& typeinfo); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const char*GetFullTypeName() const; virtual const char*TObject::GetIconName() const; Int_tGetMaxIndex(Int_t dim) const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Long_tGetOffset() const; Long_tGetOffsetCint() const; virtual Option_t*",MatchSource.WIKI,root/html532/TDataMember.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataMember.html
https://root.cern/root/html532/TDataMember.html:2856,Integrability,rout,routines,2856,"now,; that names that are automatically recognized may be also:; for data fields: either fXXX or fIsXXX; and for getter function; GetXXX() or IsXXX() [where XXX is base name]. As an example of using it let's analyse a few lines which get and set; a fEditable field in TCanvas:. ; /*; TCanvas *c = new TCanvas(""c""); // create a canvas; TClass *cl = c->IsA(); // get its class description object.; TDataMember *dm = cl->GetDataMember(""fEditable""); //This is our data member; TMethodCall *getter = dm->GetterMethod(c); //find a method that gets value!; Long_t l; // declare a storage for this value;; getter->Execute(c,"""",l); // Get this Value !!!! It will appear in l !!!; TMethodCall *setter = dm->SetterMethod(c);; setter->Execute(c,""0"",); // Set Value 0 !!!; */. This trick is widely used in ROOT TContextMenu and dialogs for obtaining; current values and put them as initial values in dialog fields. If you don't want to follow the convention of naming used by ROOT; you still could benefit from Getter/Setter method support: the solution; is to instruct ROOT what the names of these routines are.; The way to do it is putting this information in a comment string to a data; field in your class declaration:. ; /*; class MyClass{; Int_t mydata; // *OPTIONS={GetMethod=""Get"";SetMethod=""Set""} ; ...; Int_t Get() const { return mydata;};; void Set(Int_t i) {mydata=i;};; }; */. However, this getting/setting functions are not the only feature of; this class. The next point is providing lists of possible settings; for the concerned data member. The idea is to have a list of possible; options for this data member, with strings identifying them. This; is used in dialogs with parameters to set - for details see; TMethodArg, TRootContextMenu, TContextMenu. This list not only specifies; the allowed value, but also provides strings naming the options.; Options are managed via TList of TOptionListItem objects. This list; is also created automatically: if a data type is an enum tynpe,; the list will",MatchSource.WIKI,root/html532/TDataMember.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataMember.html
https://root.cern/root/html532/TDataMember.html:7830,Modifiability,Inherit,InheritsFrom,7830,":GetDictionary(const char* name); static TDictionary*TDictionary::GetDictionary(const type_info& typeinfo); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const char*GetFullTypeName() const; virtual const char*TObject::GetIconName() const; Int_tGetMaxIndex(Int_t dim) const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Long_tGetOffset() const; Long_tGetOffsetCint() const; virtual Option_t*TObject::GetOption() const; TList*GetOptions() const; TMethodCall*GetterMethod(TClass* cl = 0); virtual const char*TNamed::GetTitle() const; const char*GetTrueTypeName() const; const char*GetTypeName() const; virtual UInt_tTObject::GetUniqueID() const; Int_tGetUnitSize() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsaPointer() const; Bool_tIsBasic() const; Bool_tIsEnum() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tIsPersistent() const; virtual Bool_tTNamed::IsSortable() const; Int_tIsSTLContainer(); Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::ope",MatchSource.WIKI,root/html532/TDataMember.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataMember.html
https://root.cern/root/html532/TDataMember.html:7896,Modifiability,Inherit,InheritsFrom,7896,"GetDictionary(const type_info& typeinfo); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const char*GetFullTypeName() const; virtual const char*TObject::GetIconName() const; Int_tGetMaxIndex(Int_t dim) const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Long_tGetOffset() const; Long_tGetOffsetCint() const; virtual Option_t*TObject::GetOption() const; TList*GetOptions() const; TMethodCall*GetterMethod(TClass* cl = 0); virtual const char*TNamed::GetTitle() const; const char*GetTrueTypeName() const; const char*GetTypeName() const; virtual UInt_tTObject::GetUniqueID() const; Int_tGetUnitSize() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsaPointer() const; Bool_tIsBasic() const; Bool_tIsEnum() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tIsPersistent() const; virtual Bool_tTNamed::IsSortable() const; Int_tIsSTLContainer(); Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* ",MatchSource.WIKI,root/html532/TDataMember.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataMember.html
https://root.cern/root/html532/TDataMember.html:11896,Modifiability,Inherit,Inheritance,11896,"et; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TClass*fClasspointer to the class; TDataType*fDataTypepointer to data basic type descriptor; TStringfFullTypeNamefull type description of data member, e,g.: ""class TDirectory*"".; DataMemberInfo_t*fInfopointer to CINT data member info; Long_tfOffsetoffset ; TList*fOptionslist of possible values 0=no restrictions; Long_tfPropertyProperty; Int_tfSTLContSTL type ; TStringfTrueTypeNamefull type description with no typedef; TStringfTypeNamedata member type, e,g.: ""class TDirectory*"" -> ""TDirectory"".; TMethodCall*fValueGettermethod that returns a value;; TMethodCall*fValueSettermethod which sets value;. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDataMember(DataMemberInfo_t* info = 0, TClass* cl = 0); Default TDataMember ctor. TDataMembers are constructed in TClass; via a call to TCint::CreateListOfDataMembers(). It parses the comment; string, initializes optionlist and getter/setter methods. TDataMember(const TDataMember& ); copy constructor. TDataMember& operator=(const TDataMember& ); assignement operator. ~TDataMember(); TDataMember dtor deletes adopted CINT DataMemberInfo object. Int_t GetArrayDim() const; Return number of array dimensions. const char * GetArrayIndex() const; If the data member is pointer and has a valid array size in its comments; GetArrayIndex returns a string pointing to it;; otherwise it returns an empty string. Int_t GetMaxIndex(Int_t dim) const; Return maximum index for array dimension ""dim"". const char * GetTypeName() const; Get type of data member, e,g.: ""class TDirectory*"" -> ""TDirectory"". const char * GetFullTypeName() const; Get full type descr",MatchSource.WIKI,root/html532/TDataMember.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataMember.html
https://root.cern/root/html532/TDataMember.html:11909,Modifiability,Inherit,Inherited,11909,"et; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TClass*fClasspointer to the class; TDataType*fDataTypepointer to data basic type descriptor; TStringfFullTypeNamefull type description of data member, e,g.: ""class TDirectory*"".; DataMemberInfo_t*fInfopointer to CINT data member info; Long_tfOffsetoffset ; TList*fOptionslist of possible values 0=no restrictions; Long_tfPropertyProperty; Int_tfSTLContSTL type ; TStringfTrueTypeNamefull type description with no typedef; TStringfTypeNamedata member type, e,g.: ""class TDirectory*"" -> ""TDirectory"".; TMethodCall*fValueGettermethod that returns a value;; TMethodCall*fValueSettermethod which sets value;. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDataMember(DataMemberInfo_t* info = 0, TClass* cl = 0); Default TDataMember ctor. TDataMembers are constructed in TClass; via a call to TCint::CreateListOfDataMembers(). It parses the comment; string, initializes optionlist and getter/setter methods. TDataMember(const TDataMember& ); copy constructor. TDataMember& operator=(const TDataMember& ); assignement operator. ~TDataMember(); TDataMember dtor deletes adopted CINT DataMemberInfo object. Int_t GetArrayDim() const; Return number of array dimensions. const char * GetArrayIndex() const; If the data member is pointer and has a valid array size in its comments; GetArrayIndex returns a string pointing to it;; otherwise it returns an empty string. Int_t GetMaxIndex(Int_t dim) const; Return maximum index for array dimension ""dim"". const char * GetTypeName() const; Get type of data member, e,g.: ""class TDirectory*"" -> ""TDirectory"". const char * GetFullTypeName() const; Get full type descr",MatchSource.WIKI,root/html532/TDataMember.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataMember.html
https://root.cern/root/html532/TDataMember.html:14072,Modifiability,inherit,inheritance,14072,"peName() const; Get full type description of data member, e,g.: ""class TDirectory*"". Long_t GetOffset() const; Get offset from ""this"". Long_t GetOffsetCint() const; Get offset from ""this"" using the information in CINT only. Int_t GetUnitSize() const; Get the sizeof the underlying type of the data member; (i.e. if the member is an array sizeof(member)/length). Bool_t IsBasic() const; Return true if data member is a basic type, e.g. char, int, long... Bool_t IsEnum() const; Return true if data member is an enum. Bool_t IsaPointer() const; Return true if data member is a pointer. int IsSTLContainer(); The return type is defined in TDictionary (kVector, kList, etc.). Long_t Property() const; Get property description word. For meaning of bits see EProperty. TList * GetOptions() const; Returns list of options - list of TOptionListItems. TMethodCall * GetterMethod(TClass* cl = 0); Return a TMethodCall method responsible for getting the value; of data member. The cl argument specifies the class of the object; which will be used to call this method (in case of multiple; inheritance TMethodCall needs to know this to calculate the proper; offset). TMethodCall * SetterMethod(TClass* cl); Return a TMethodCall method responsible for setting the value; of data member. The cl argument specifies the class of the object; which will be used to call this method (in case of multiple; inheritance TMethodCall needs to know this to calculate the proper; offset). TClass * GetClass() const; { return fClass; }. TDataType * GetDataType() const; { return fDataType; }. Bool_t IsPersistent() const; { return TestBit(kObjIsPersistent); }. » Author: Fons Rademakers 04/02/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: TDataMember.h 24077 2008-05-31 19:39:09Z brun $ » Last generated: 2011-11-03 20:11; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TDataMember.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataMember.html
https://root.cern/root/html532/TDataMember.html:14380,Modifiability,inherit,inheritance,14380,"peName() const; Get full type description of data member, e,g.: ""class TDirectory*"". Long_t GetOffset() const; Get offset from ""this"". Long_t GetOffsetCint() const; Get offset from ""this"" using the information in CINT only. Int_t GetUnitSize() const; Get the sizeof the underlying type of the data member; (i.e. if the member is an array sizeof(member)/length). Bool_t IsBasic() const; Return true if data member is a basic type, e.g. char, int, long... Bool_t IsEnum() const; Return true if data member is an enum. Bool_t IsaPointer() const; Return true if data member is a pointer. int IsSTLContainer(); The return type is defined in TDictionary (kVector, kList, etc.). Long_t Property() const; Get property description word. For meaning of bits see EProperty. TList * GetOptions() const; Returns list of options - list of TOptionListItems. TMethodCall * GetterMethod(TClass* cl = 0); Return a TMethodCall method responsible for getting the value; of data member. The cl argument specifies the class of the object; which will be used to call this method (in case of multiple; inheritance TMethodCall needs to know this to calculate the proper; offset). TMethodCall * SetterMethod(TClass* cl); Return a TMethodCall method responsible for setting the value; of data member. The cl argument specifies the class of the object; which will be used to call this method (in case of multiple; inheritance TMethodCall needs to know this to calculate the proper; offset). TClass * GetClass() const; { return fClass; }. TDataType * GetDataType() const; { return fDataType; }. Bool_t IsPersistent() const; { return TestBit(kObjIsPersistent); }. » Author: Fons Rademakers 04/02/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: TDataMember.h 24077 2008-05-31 19:39:09Z brun $ » Last generated: 2011-11-03 20:11; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TDataMember.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataMember.html
https://root.cern/root/html532/TDataMember.html:961,Security,access,access,961,". TDataMember. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » META; » TDataMember. class TDataMember: public TDictionary. TDataMember. All ROOT classes may have RTTI (run time type identification) support; added. The data is stored in so called DICTIONARY (look at TDictionary).; Information about a class is stored in TClass.; This information may be obtained via the CINT api - see class TCint.; TClass has a list of TDataMember objects providing information about all; data members of described class. /*. */. TDataMember provides information about name of data member, its type,; and comment field string. It also tries to find the TMethodCall objects; responsible for getting/setting a value of it, and gives you pointers; to these methods. This gives you a unique possibility to access; protected and private (!) data members if only methods for doing that; are defined.; These methods could either be specified in a comment field, or found; out automatically by ROOT: here's an example:; suppose you have a class definition:. ; /*; class MyClass{; private:; Float_t fX1;; ...; public:; void SetX1(Float_t x) {fX1 = x;};; Float_t GetX1() {return fX1;};; ...; }; */. Look at the data member name and method names: a data member name has; a prefix letter (f) and has a base name X1 . The methods for getting and; setting this value have names which consist of string Get/Set and the; same base name. This convention of naming data fields and methods which; access them allows TDataMember find this methods by itself completely; automatically. To make this description complete, one should know,; that names that are automatically recognized may be also:; for data fields: either fXXX or fIsXXX; and for getter function; GetXXX() or IsXXX() [where XXX is base name]. As an example of using it let's analyse a few lines whi",MatchSource.WIKI,root/html532/TDataMember.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataMember.html
https://root.cern/root/html532/TDataMember.html:1637,Security,access,access,1637,"ta members of described class. /*. */. TDataMember provides information about name of data member, its type,; and comment field string. It also tries to find the TMethodCall objects; responsible for getting/setting a value of it, and gives you pointers; to these methods. This gives you a unique possibility to access; protected and private (!) data members if only methods for doing that; are defined.; These methods could either be specified in a comment field, or found; out automatically by ROOT: here's an example:; suppose you have a class definition:. ; /*; class MyClass{; private:; Float_t fX1;; ...; public:; void SetX1(Float_t x) {fX1 = x;};; Float_t GetX1() {return fX1;};; ...; }; */. Look at the data member name and method names: a data member name has; a prefix letter (f) and has a base name X1 . The methods for getting and; setting this value have names which consist of string Get/Set and the; same base name. This convention of naming data fields and methods which; access them allows TDataMember find this methods by itself completely; automatically. To make this description complete, one should know,; that names that are automatically recognized may be also:; for data fields: either fXXX or fIsXXX; and for getter function; GetXXX() or IsXXX() [where XXX is base name]. As an example of using it let's analyse a few lines which get and set; a fEditable field in TCanvas:. ; /*; TCanvas *c = new TCanvas(""c""); // create a canvas; TClass *cl = c->IsA(); // get its class description object.; TDataMember *dm = cl->GetDataMember(""fEditable""); //This is our data member; TMethodCall *getter = dm->GetterMethod(c); //find a method that gets value!; Long_t l; // declare a storage for this value;; getter->Execute(c,"""",l); // Get this Value !!!! It will appear in l !!!; TMethodCall *setter = dm->SetterMethod(c);; setter->Execute(c,""0"",); // Set Value 0 !!!; */. This trick is widely used in ROOT TContextMenu and dialogs for obtaining; current values and put them as initial valu",MatchSource.WIKI,root/html532/TDataMember.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataMember.html
https://root.cern/root/html532/TDataMember.html:7720,Security,Hash,Hash,7720,"har*GetArrayIndex() const; TClass*GetClass() const; TDataType*GetDataType() const; static TDictionary*TDictionary::GetDictionary(const char* name); static TDictionary*TDictionary::GetDictionary(const type_info& typeinfo); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const char*GetFullTypeName() const; virtual const char*TObject::GetIconName() const; Int_tGetMaxIndex(Int_t dim) const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); Long_tGetOffset() const; Long_tGetOffsetCint() const; virtual Option_t*TObject::GetOption() const; TList*GetOptions() const; TMethodCall*GetterMethod(TClass* cl = 0); virtual const char*TNamed::GetTitle() const; const char*GetTrueTypeName() const; const char*GetTypeName() const; virtual UInt_tTObject::GetUniqueID() const; Int_tGetUnitSize() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tIsaPointer() const; Bool_tIsBasic() const; Bool_tIsEnum() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tIsPersistent() const; virtual Bool_tTNamed::IsSortable() const; Int_tIsSTLContainer(); Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTO",MatchSource.WIKI,root/html532/TDataMember.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataMember.html
https://root.cern/root/html532/TDataMember.html:10203,Testability,Test,TestBit,10203,"rs, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Long_tProperty() const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); TMethodCall*SetterMethod(TClass* cl); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TDataMember.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataMember.html
https://root.cern/root/html532/TDataMember.html:10242,Testability,Test,TestBits,10242,"rs, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Long_tProperty() const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); TMethodCall*SetterMethod(TClass* cl); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TDataMember.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataMember.html
https://root.cern/root/html532/TDataMember.html:14598,Testability,Test,TestBit,14598,"peName() const; Get full type description of data member, e,g.: ""class TDirectory*"". Long_t GetOffset() const; Get offset from ""this"". Long_t GetOffsetCint() const; Get offset from ""this"" using the information in CINT only. Int_t GetUnitSize() const; Get the sizeof the underlying type of the data member; (i.e. if the member is an array sizeof(member)/length). Bool_t IsBasic() const; Return true if data member is a basic type, e.g. char, int, long... Bool_t IsEnum() const; Return true if data member is an enum. Bool_t IsaPointer() const; Return true if data member is a pointer. int IsSTLContainer(); The return type is defined in TDictionary (kVector, kList, etc.). Long_t Property() const; Get property description word. For meaning of bits see EProperty. TList * GetOptions() const; Returns list of options - list of TOptionListItems. TMethodCall * GetterMethod(TClass* cl = 0); Return a TMethodCall method responsible for getting the value; of data member. The cl argument specifies the class of the object; which will be used to call this method (in case of multiple; inheritance TMethodCall needs to know this to calculate the proper; offset). TMethodCall * SetterMethod(TClass* cl); Return a TMethodCall method responsible for setting the value; of data member. The cl argument specifies the class of the object; which will be used to call this method (in case of multiple; inheritance TMethodCall needs to know this to calculate the proper; offset). TClass * GetClass() const; { return fClass; }. TDataType * GetDataType() const; { return fDataType; }. Bool_t IsPersistent() const; { return TestBit(kObjIsPersistent); }. » Author: Fons Rademakers 04/02/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: TDataMember.h 24077 2008-05-31 19:39:09Z brun $ » Last generated: 2011-11-03 20:11; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TDataMember.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataMember.html
https://root.cern/root/html532/TDataMember.html:5608,Usability,Clear,Clear,5608,,MatchSource.WIKI,root/html532/TDataMember.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataMember.html
https://root.cern/root/html532/TDataSet.html:5300,Availability,Error,Error,5300,"tractMethod(const char* method) const; virtual voidAdd(TDataSet* dataset); virtual voidAddAt(TDataSet* dataset, Int_t idx = 0); virtual voidAddAtAndExpand(TDataSet* dataset, Int_t idx = 0); virtual voidAddFirst(TDataSet* dataset); virtual voidAddLast(TDataSet* dataset); virtual voidTObject::AppendPad(Option_t* option = """"); TDataSet*At(Int_t idx) const; virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidDelete(Option_t* opt = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TDataSet*Find(const char* path) const; virtual TDataSet*FindByName(const char* name, const char* path = """", Option_t* opt = """") const; virtual TDataSet*FindByPath(const char* path) const; virtual TDataSet*FindByTitle(const char* title, const char* path = """", Option_t* opt = """") const; virtual TObject*FindObject(const char* name) const; virtual TObject*FindObject(const TObject* o) const; virtual TDataSet*First() const; virtual TSeqCollection*GetCollection() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject:",MatchSource.WIKI,root/html532/TDataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSet.html
https://root.cern/root/html532/TDataSet.html:5429,Availability,error,error,5429,"irtual voidAddAtAndExpand(TDataSet* dataset, Int_t idx = 0); virtual voidAddFirst(TDataSet* dataset); virtual voidAddLast(TDataSet* dataset); virtual voidTObject::AppendPad(Option_t* option = """"); TDataSet*At(Int_t idx) const; virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidDelete(Option_t* opt = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TDataSet*Find(const char* path) const; virtual TDataSet*FindByName(const char* name, const char* path = """", Option_t* opt = """") const; virtual TDataSet*FindByPath(const char* path) const; virtual TDataSet*FindByTitle(const char* title, const char* path = """", Option_t* opt = """") const; virtual TObject*FindObject(const char* name) const; virtual TObject*FindObject(const TObject* o) const; virtual TDataSet*First() const; virtual TSeqCollection*GetCollection() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*GetList() const; virtual Int_tGetListSize() const; static TDataSet*GetMainSet(); TObject*GetMother() ",MatchSource.WIKI,root/html532/TDataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSet.html
https://root.cern/root/html532/TDataSet.html:5513,Availability,error,error,5513,"ataSet* dataset); virtual voidAddLast(TDataSet* dataset); virtual voidTObject::AppendPad(Option_t* option = """"); TDataSet*At(Int_t idx) const; virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidDelete(Option_t* opt = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TDataSet*Find(const char* path) const; virtual TDataSet*FindByName(const char* name, const char* path = """", Option_t* opt = """") const; virtual TDataSet*FindByPath(const char* path) const; virtual TDataSet*FindByTitle(const char* title, const char* path = """", Option_t* opt = """") const; virtual TObject*FindObject(const char* name) const; virtual TObject*FindObject(const TObject* o) const; virtual TDataSet*First() const; virtual TSeqCollection*GetCollection() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*GetList() const; virtual Int_tGetListSize() const; static TDataSet*GetMainSet(); TObject*GetMother() const; virtual const char*TNamed::GetName() const; TObjArray*GetObjArray() const; vi",MatchSource.WIKI,root/html532/TDataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSet.html
https://root.cern/root/html532/TDataSet.html:18389,Deployability,Update,Update,18389,"se are not ended; up with some dataset with data inside (those return HasData() = 0). Purge does affect only the ""Structural Members"" and doesn't ""Associated"" ones. void SetParent(TDataSet* parent = 0). Break the ""parent"" relationship with the current object parent if present; parent != 0 Makes this object the ""Structural Member""; of the ""parent"" dataset; = 0 Makes this object the ""pure Associator"", i.e it makes this; object the ""Structural Member"" of NO other TDataSet. void SetWrite(); One should not use this method but TDataSet::Write instead; This method os left here for the sake of the backward compatibility; To Write object first we should temporary break the; the backward fParent pointer (otherwise ROOT follows this links; and will pull fParent out too. void Shunt(TDataSet* newParent = 0). Remove the object from the original and add it to dataset; TDataSet dataset != 0 - Make this object the ""Structural Member""; of ""dataset""; = 0 - Make this object ""Orphan"". void Update(TDataSet* set, UInt_t opt = 0). Update this TDataSet with ""set"". ATTENTION !!!. This method changes the parent relationships of the input ""set"". void Update(). Update(). Recursively updates all tables for all nested datasets; in inverse order. void Sort(); Sort recursively all members of the TDataSet with TList::Sort method. Int_t Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0). To Write object first we should temporary break the; the backward fParent pointer (otherwise ROOT follows this links; and will pull fParent out too. Int_t Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. To Write object first we should temporary break the; the backward fParent pointer (otherwise ROOT follows this links; and will pull fParent out too. void Add(TDataSet* dataset); { AddLast(dataset); }. TDataSet * At(Int_t idx) const; {return fList ? (TDataSet *)fList->At(idx) : 0; }. Int_t GetListSize() const; {return (fList) ? fList->GetSize():0;}. TDataSet * instance(); { return ",MatchSource.WIKI,root/html532/TDataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSet.html
https://root.cern/root/html532/TDataSet.html:18428,Deployability,Update,Update,18428," with data inside (those return HasData() = 0). Purge does affect only the ""Structural Members"" and doesn't ""Associated"" ones. void SetParent(TDataSet* parent = 0). Break the ""parent"" relationship with the current object parent if present; parent != 0 Makes this object the ""Structural Member""; of the ""parent"" dataset; = 0 Makes this object the ""pure Associator"", i.e it makes this; object the ""Structural Member"" of NO other TDataSet. void SetWrite(); One should not use this method but TDataSet::Write instead; This method os left here for the sake of the backward compatibility; To Write object first we should temporary break the; the backward fParent pointer (otherwise ROOT follows this links; and will pull fParent out too. void Shunt(TDataSet* newParent = 0). Remove the object from the original and add it to dataset; TDataSet dataset != 0 - Make this object the ""Structural Member""; of ""dataset""; = 0 - Make this object ""Orphan"". void Update(TDataSet* set, UInt_t opt = 0). Update this TDataSet with ""set"". ATTENTION !!!. This method changes the parent relationships of the input ""set"". void Update(). Update(). Recursively updates all tables for all nested datasets; in inverse order. void Sort(); Sort recursively all members of the TDataSet with TList::Sort method. Int_t Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0). To Write object first we should temporary break the; the backward fParent pointer (otherwise ROOT follows this links; and will pull fParent out too. Int_t Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. To Write object first we should temporary break the; the backward fParent pointer (otherwise ROOT follows this links; and will pull fParent out too. void Add(TDataSet* dataset); { AddLast(dataset); }. TDataSet * At(Int_t idx) const; {return fList ? (TDataSet *)fList->At(idx) : 0; }. Int_t GetListSize() const; {return (fList) ? fList->GetSize():0;}. TDataSet * instance(); { return new TDataSet();}. Bool_t IsMarked() con",MatchSource.WIKI,root/html532/TDataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSet.html
https://root.cern/root/html532/TDataSet.html:18546,Deployability,Update,Update,18546,"n't ""Associated"" ones. void SetParent(TDataSet* parent = 0). Break the ""parent"" relationship with the current object parent if present; parent != 0 Makes this object the ""Structural Member""; of the ""parent"" dataset; = 0 Makes this object the ""pure Associator"", i.e it makes this; object the ""Structural Member"" of NO other TDataSet. void SetWrite(); One should not use this method but TDataSet::Write instead; This method os left here for the sake of the backward compatibility; To Write object first we should temporary break the; the backward fParent pointer (otherwise ROOT follows this links; and will pull fParent out too. void Shunt(TDataSet* newParent = 0). Remove the object from the original and add it to dataset; TDataSet dataset != 0 - Make this object the ""Structural Member""; of ""dataset""; = 0 - Make this object ""Orphan"". void Update(TDataSet* set, UInt_t opt = 0). Update this TDataSet with ""set"". ATTENTION !!!. This method changes the parent relationships of the input ""set"". void Update(). Update(). Recursively updates all tables for all nested datasets; in inverse order. void Sort(); Sort recursively all members of the TDataSet with TList::Sort method. Int_t Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0). To Write object first we should temporary break the; the backward fParent pointer (otherwise ROOT follows this links; and will pull fParent out too. Int_t Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. To Write object first we should temporary break the; the backward fParent pointer (otherwise ROOT follows this links; and will pull fParent out too. void Add(TDataSet* dataset); { AddLast(dataset); }. TDataSet * At(Int_t idx) const; {return fList ? (TDataSet *)fList->At(idx) : 0; }. Int_t GetListSize() const; {return (fList) ? fList->GetSize():0;}. TDataSet * instance(); { return new TDataSet();}. Bool_t IsMarked() const; { return TestBit(kMark); }. void Mark(UInt_t flag, TDataSet::EBitOpt reset = kSet); { SetBit(flag,re",MatchSource.WIKI,root/html532/TDataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSet.html
https://root.cern/root/html532/TDataSet.html:18556,Deployability,Update,Update,18556,"ed"" ones. void SetParent(TDataSet* parent = 0). Break the ""parent"" relationship with the current object parent if present; parent != 0 Makes this object the ""Structural Member""; of the ""parent"" dataset; = 0 Makes this object the ""pure Associator"", i.e it makes this; object the ""Structural Member"" of NO other TDataSet. void SetWrite(); One should not use this method but TDataSet::Write instead; This method os left here for the sake of the backward compatibility; To Write object first we should temporary break the; the backward fParent pointer (otherwise ROOT follows this links; and will pull fParent out too. void Shunt(TDataSet* newParent = 0). Remove the object from the original and add it to dataset; TDataSet dataset != 0 - Make this object the ""Structural Member""; of ""dataset""; = 0 - Make this object ""Orphan"". void Update(TDataSet* set, UInt_t opt = 0). Update this TDataSet with ""set"". ATTENTION !!!. This method changes the parent relationships of the input ""set"". void Update(). Update(). Recursively updates all tables for all nested datasets; in inverse order. void Sort(); Sort recursively all members of the TDataSet with TList::Sort method. Int_t Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0). To Write object first we should temporary break the; the backward fParent pointer (otherwise ROOT follows this links; and will pull fParent out too. Int_t Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. To Write object first we should temporary break the; the backward fParent pointer (otherwise ROOT follows this links; and will pull fParent out too. void Add(TDataSet* dataset); { AddLast(dataset); }. TDataSet * At(Int_t idx) const; {return fList ? (TDataSet *)fList->At(idx) : 0; }. Int_t GetListSize() const; {return (fList) ? fList->GetSize():0;}. TDataSet * instance(); { return new TDataSet();}. Bool_t IsMarked() const; { return TestBit(kMark); }. void Mark(UInt_t flag, TDataSet::EBitOpt reset = kSet); { SetBit(flag,reset); }. voi",MatchSource.WIKI,root/html532/TDataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSet.html
https://root.cern/root/html532/TDataSet.html:18578,Deployability,update,updates,18578,"= 0). Break the ""parent"" relationship with the current object parent if present; parent != 0 Makes this object the ""Structural Member""; of the ""parent"" dataset; = 0 Makes this object the ""pure Associator"", i.e it makes this; object the ""Structural Member"" of NO other TDataSet. void SetWrite(); One should not use this method but TDataSet::Write instead; This method os left here for the sake of the backward compatibility; To Write object first we should temporary break the; the backward fParent pointer (otherwise ROOT follows this links; and will pull fParent out too. void Shunt(TDataSet* newParent = 0). Remove the object from the original and add it to dataset; TDataSet dataset != 0 - Make this object the ""Structural Member""; of ""dataset""; = 0 - Make this object ""Orphan"". void Update(TDataSet* set, UInt_t opt = 0). Update this TDataSet with ""set"". ATTENTION !!!. This method changes the parent relationships of the input ""set"". void Update(). Update(). Recursively updates all tables for all nested datasets; in inverse order. void Sort(); Sort recursively all members of the TDataSet with TList::Sort method. Int_t Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0). To Write object first we should temporary break the; the backward fParent pointer (otherwise ROOT follows this links; and will pull fParent out too. Int_t Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. To Write object first we should temporary break the; the backward fParent pointer (otherwise ROOT follows this links; and will pull fParent out too. void Add(TDataSet* dataset); { AddLast(dataset); }. TDataSet * At(Int_t idx) const; {return fList ? (TDataSet *)fList->At(idx) : 0; }. Int_t GetListSize() const; {return (fList) ? fList->GetSize():0;}. TDataSet * instance(); { return new TDataSet();}. Bool_t IsMarked() const; { return TestBit(kMark); }. void Mark(UInt_t flag, TDataSet::EBitOpt reset = kSet); { SetBit(flag,reset); }. void Mark(); { Mark(kMark,kSet); }. void UnMa",MatchSource.WIKI,root/html532/TDataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSet.html
https://root.cern/root/html532/TDataSet.html:7036,Modifiability,Inherit,InheritsFrom,7036,"har* name) const; virtual TObject*FindObject(const TObject* o) const; virtual TDataSet*First() const; virtual TSeqCollection*GetCollection() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*GetList() const; virtual Int_tGetListSize() const; static TDataSet*GetMainSet(); TObject*GetMother() const; virtual const char*TNamed::GetName() const; TObjArray*GetObjArray() const; virtual TObject*GetObject() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TDataSet*GetParent() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Long_tHasData() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; virtual TDataSet*Instance() const; static TDataSet*instance(); voidInvertAllMarks()MENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tIsFolder() const; virtual Bool_tIsMarked() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tIsThisDir(const char* dirname, int len = -1, int ignorecase = 0) const; Bool_tTObject::IsZombie() const; virtual TDataSet*Last() const; virtual voidls(Option_t* option = """") const; virtual voidls(Int_t depth) const; voidMark()MENU ; voidMark(UInt_t flag, TDataSet::EBitOpt reset = kSet); voidMarkAll()MENU ; voidTObject::MayNotUse(const char* method) const; virtual TDataSet*Next() const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, co",MatchSource.WIKI,root/html532/TDataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSet.html
https://root.cern/root/html532/TDataSet.html:7102,Modifiability,Inherit,InheritsFrom,7102,"st; virtual TDataSet*First() const; virtual TSeqCollection*GetCollection() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*GetList() const; virtual Int_tGetListSize() const; static TDataSet*GetMainSet(); TObject*GetMother() const; virtual const char*TNamed::GetName() const; TObjArray*GetObjArray() const; virtual TObject*GetObject() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TDataSet*GetParent() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Long_tHasData() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; virtual TDataSet*Instance() const; static TDataSet*instance(); voidInvertAllMarks()MENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tIsFolder() const; virtual Bool_tIsMarked() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tIsThisDir(const char* dirname, int len = -1, int ignorecase = 0) const; Bool_tTObject::IsZombie() const; virtual TDataSet*Last() const; virtual voidls(Option_t* option = """") const; virtual voidls(Int_t depth) const; voidMark()MENU ; voidMark(UInt_t flag, TDataSet::EBitOpt reset = kSet); voidMarkAll()MENU ; voidTObject::MayNotUse(const char* method) const; virtual TDataSet*Next() const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voi",MatchSource.WIKI,root/html532/TDataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSet.html
https://root.cern/root/html532/TDataSet.html:11842,Modifiability,Inherit,Inheritance,11842,"et*GetRealParent(); voidMakeCollection(); voidTObject::MakeZombie(); virtual voidSetMother(TObject* mother); static TDataSet::EDataSetPassSortIt(TDataSet* ds); static TDataSet::EDataSetPassSortIt(TDataSet* ds, void* user). private:. voidoperator=(const TDataSet&). Data Members; public:. enum EDataSetPass { kContinue; kPrune; kStop; kUp; kStruct; kAll; kRefs; kMarked; };; enum ESetBits { kMark; kArray; };; enum EBitOpt { kSet; kReset; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TSeqCollection*fListList of the the the objects included into this dataset; TStringTNamed::fNameobject identifier; TDataSet*fParentpointer to mother of the directory; TStringTNamed::fTitleobject title; static TDataSet*fgMainSetpointer the main dataset;. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDataSet(const char* name = """", TDataSet* parent = 0, Bool_t arrayFlag = kFALSE); cout << ""ctor for "" << GetName() << "" - "" << GetTitle() << endl;. TDataSet * GetRealParent(); return real parent. TDataSet(const TDataSet& src, TDataSet::EDataSetPass iopt = kAll). Creates TDataSet (clone) with a topology similar with TDataSet *pattern. Parameters:. pattern - the pattern dataset; iopt = kStruct - clone only my structural links; kAll - clone all links; kRefs - clone only refs; kMarked - clone marked (not implemented yet) only. All new-created sets become the structural ones anyway. cout << ""ctor for "" << GetName() << "" - "" << GetTitle() << endl;. TDataSet(TNode& src); This copy ctor has been depricated (left for thwe sake of the backweard compatibility). ~TDataSet(); cout << ""Default destructor for "" << GetName() << "" - "" << GetTitle() << endl;. void MakeCollection(); Create the internal container at once if any. void AddAt(TDataSet* datas",MatchSource.WIKI,root/html532/TDataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSet.html
https://root.cern/root/html532/TDataSet.html:11855,Modifiability,Inherit,Inherited,11855,"et*GetRealParent(); voidMakeCollection(); voidTObject::MakeZombie(); virtual voidSetMother(TObject* mother); static TDataSet::EDataSetPassSortIt(TDataSet* ds); static TDataSet::EDataSetPassSortIt(TDataSet* ds, void* user). private:. voidoperator=(const TDataSet&). Data Members; public:. enum EDataSetPass { kContinue; kPrune; kStop; kUp; kStruct; kAll; kRefs; kMarked; };; enum ESetBits { kMark; kArray; };; enum EBitOpt { kSet; kReset; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TSeqCollection*fListList of the the the objects included into this dataset; TStringTNamed::fNameobject identifier; TDataSet*fParentpointer to mother of the directory; TStringTNamed::fTitleobject title; static TDataSet*fgMainSetpointer the main dataset;. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDataSet(const char* name = """", TDataSet* parent = 0, Bool_t arrayFlag = kFALSE); cout << ""ctor for "" << GetName() << "" - "" << GetTitle() << endl;. TDataSet * GetRealParent(); return real parent. TDataSet(const TDataSet& src, TDataSet::EDataSetPass iopt = kAll). Creates TDataSet (clone) with a topology similar with TDataSet *pattern. Parameters:. pattern - the pattern dataset; iopt = kStruct - clone only my structural links; kAll - clone all links; kRefs - clone only refs; kMarked - clone marked (not implemented yet) only. All new-created sets become the structural ones anyway. cout << ""ctor for "" << GetName() << "" - "" << GetTitle() << endl;. TDataSet(TNode& src); This copy ctor has been depricated (left for thwe sake of the backweard compatibility). ~TDataSet(); cout << ""Default destructor for "" << GetName() << "" - "" << GetTitle() << endl;. void MakeCollection(); Create the internal container at once if any. void AddAt(TDataSet* datas",MatchSource.WIKI,root/html532/TDataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSet.html
https://root.cern/root/html532/TDataSet.html:6926,Security,Hash,Hash,6926,"indByTitle(const char* title, const char* path = """", Option_t* opt = """") const; virtual TObject*FindObject(const char* name) const; virtual TObject*FindObject(const TObject* o) const; virtual TDataSet*First() const; virtual TSeqCollection*GetCollection() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*GetList() const; virtual Int_tGetListSize() const; static TDataSet*GetMainSet(); TObject*GetMother() const; virtual const char*TNamed::GetName() const; TObjArray*GetObjArray() const; virtual TObject*GetObject() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TDataSet*GetParent() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Long_tHasData() const; virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; virtual TDataSet*Instance() const; static TDataSet*instance(); voidInvertAllMarks()MENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tIsFolder() const; virtual Bool_tIsMarked() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tIsThisDir(const char* dirname, int len = -1, int ignorecase = 0) const; Bool_tTObject::IsZombie() const; virtual TDataSet*Last() const; virtual voidls(Option_t* option = """") const; virtual voidls(Int_t depth) const; voidMark()MENU ; voidMark(UInt_t flag, TDataSet::EBitOpt reset = kSet); voidMarkAll()MENU ; voidTObject::MayNotUse(const char* method) c",MatchSource.WIKI,root/html532/TDataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSet.html
https://root.cern/root/html532/TDataSet.html:10217,Testability,Test,TestBit,10217,", Int_t depth = 0); virtual TStringPath() const; virtual voidTObject::Pop(); virtual TDataSet*Prev() const; virtual voidTNamed::Print(Option_t* option = """") const; virtual voidPrintContents(Option_t* opt = """") const; virtual Int_tPurge(Option_t* opt = """"); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidRemove(TDataSet* set); virtual TDataSet*RemoveAt(Int_t idx); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetMother(TDataSet* parent = 0); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidSetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetParent(TDataSet* parent = 0); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetWrite(); virtual voidShowMembers(TMemberInspector& insp); virtual voidShunt(TDataSet* newParent = 0); virtual Int_tTNamed::Sizeof() const; virtual voidSort(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidUnMark()MENU ; voidUnMarkAll()MENU ; virtual voidUpdate(); virtual voidUpdate(TDataSet* set, UInt_t opt = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tWrite(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tWrite(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TDataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSet.html
https://root.cern/root/html532/TDataSet.html:10256,Testability,Test,TestBits,10256,", Int_t depth = 0); virtual TStringPath() const; virtual voidTObject::Pop(); virtual TDataSet*Prev() const; virtual voidTNamed::Print(Option_t* option = """") const; virtual voidPrintContents(Option_t* opt = """") const; virtual Int_tPurge(Option_t* opt = """"); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidRemove(TDataSet* set); virtual TDataSet*RemoveAt(Int_t idx); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetMother(TDataSet* parent = 0); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidSetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetParent(TDataSet* parent = 0); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetWrite(); virtual voidShowMembers(TMemberInspector& insp); virtual voidShunt(TDataSet* newParent = 0); virtual Int_tTNamed::Sizeof() const; virtual voidSort(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidUnMark()MENU ; voidUnMarkAll()MENU ; virtual voidUpdate(); virtual voidUpdate(TDataSet* set, UInt_t opt = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tWrite(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tWrite(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TDataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSet.html
https://root.cern/root/html532/TDataSet.html:19457,Testability,Test,TestBit,19457," with ""set"". ATTENTION !!!. This method changes the parent relationships of the input ""set"". void Update(). Update(). Recursively updates all tables for all nested datasets; in inverse order. void Sort(); Sort recursively all members of the TDataSet with TList::Sort method. Int_t Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0). To Write object first we should temporary break the; the backward fParent pointer (otherwise ROOT follows this links; and will pull fParent out too. Int_t Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. To Write object first we should temporary break the; the backward fParent pointer (otherwise ROOT follows this links; and will pull fParent out too. void Add(TDataSet* dataset); { AddLast(dataset); }. TDataSet * At(Int_t idx) const; {return fList ? (TDataSet *)fList->At(idx) : 0; }. Int_t GetListSize() const; {return (fList) ? fList->GetSize():0;}. TDataSet * instance(); { return new TDataSet();}. Bool_t IsMarked() const; { return TestBit(kMark); }. void Mark(UInt_t flag, TDataSet::EBitOpt reset = kSet); { SetBit(flag,reset); }. void Mark(); { Mark(kMark,kSet); }. void UnMark(); { Mark(kMark,kReset); }. void operator=(const TDataSet& ); -- Int_t IncCnt(){ fCnt++; return fCnt;}; -- Int_t DecCnt(){ fCnt--; return fCnt;}; -- Int_t Cnt() { return fCnt;}. {}. void SetMother(TObject* mother); -- Int_t fCnt; // reference counter. {SetParent((TDataSet*)mother);}. TDataSet(const char* name, const char* title); {}. EDataSetPass SortIt(TDataSet* ds). EDataSetPass SortIt(TDataSet* ds, void* user). TObject * FindObject(const char* name) const; {return FindByName(name);}. TObject * FindObject(const TObject* o) const; { return TObject::FindObject(o);}. TObjArray * GetObjArray() const; { return (TObjArray *)fList; }. TSeqCollection * GetCollection() const; { return (TSeqCollection *)fList; }. TList * GetList() const; { return (TList *)fList; }. TObject * GetMother() const; { return (TObject*)GetParent();}. TDataSet * Ge",MatchSource.WIKI,root/html532/TDataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSet.html
https://root.cern/root/html532/TDataSet.html:4782,Usability,Clear,Clear,4782,,MatchSource.WIKI,root/html532/TDataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSet.html
https://root.cern/root/html532/TDataSet.html:14087,Usability,simpl,simplify,14087,"! Under construction !!!!!; Add TDataSet object at the ""idx"" position in ds; or at the end of the dataset; The final result is defined by either TList::AddAt or TObjArray::AddAt; methods. void AddLast(TDataSet* dataset); Add TDataSet object at the end of the dataset list of this dataset. void AddFirst(TDataSet* dataset); Add TDataSet object at the beginning of the dataset list of this dataset. void Browse(TBrowser* b); Browse this dataset (called by TBrowser). TObject * Clone(const char* newname = """") const; the custom implementation fo the TObject::Clone. void Delete(Option_t* opt = """"). Delete - deletes the list of the TDataSet objects and all ""Structural Members""; as well; This method doesn't affect the ""Associated Members"". TDataSet * FindByPath(const char* path) const; Aliase for TDataSet::Find(const Char_t *path) method. TDataSet * Find(const char* path) const. Full description see: TDataSetIter::Find. Note. This method is quite expansive.; ----- It is done to simplify the user's code when one wants to find ONLY object.; If you need to find more then 1 object in this dataset,; regard using TDataSetIter class yourself. TDataSet * FindByName(const char* name, const char* path = """", Option_t* opt = """") const. Full description see: TDataSetIter::Find. Note. This is method is quite expansive.; ----- It is done to simplify the user's code when one wants to find ONLY object.; If you need to find more then 1 object in this dataset,; regard using TDataSetIter class yourself. TDataSet * FindByTitle(const char* title, const char* path = """", Option_t* opt = """") const. Full description see: TDataSetIter::Find. Note. This method is quite expansive.; ----- It is done to simplify the user's code when one wants to find ONLY object.; If you need to find more then 1 object in this dataset,; regard using TDataSetIter class yourself. TDataSet * First() const; Return the first object in the list. Returns 0 when list is empty. void AddMain(TDataSet* set); add data set to main data s",MatchSource.WIKI,root/html532/TDataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSet.html
https://root.cern/root/html532/TDataSet.html:14442,Usability,simpl,simplify,14442,"ning of the dataset list of this dataset. void Browse(TBrowser* b); Browse this dataset (called by TBrowser). TObject * Clone(const char* newname = """") const; the custom implementation fo the TObject::Clone. void Delete(Option_t* opt = """"). Delete - deletes the list of the TDataSet objects and all ""Structural Members""; as well; This method doesn't affect the ""Associated Members"". TDataSet * FindByPath(const char* path) const; Aliase for TDataSet::Find(const Char_t *path) method. TDataSet * Find(const char* path) const. Full description see: TDataSetIter::Find. Note. This method is quite expansive.; ----- It is done to simplify the user's code when one wants to find ONLY object.; If you need to find more then 1 object in this dataset,; regard using TDataSetIter class yourself. TDataSet * FindByName(const char* name, const char* path = """", Option_t* opt = """") const. Full description see: TDataSetIter::Find. Note. This is method is quite expansive.; ----- It is done to simplify the user's code when one wants to find ONLY object.; If you need to find more then 1 object in this dataset,; regard using TDataSetIter class yourself. TDataSet * FindByTitle(const char* title, const char* path = """", Option_t* opt = """") const. Full description see: TDataSetIter::Find. Note. This method is quite expansive.; ----- It is done to simplify the user's code when one wants to find ONLY object.; If you need to find more then 1 object in this dataset,; regard using TDataSetIter class yourself. TDataSet * First() const; Return the first object in the list. Returns 0 when list is empty. void AddMain(TDataSet* set); add data set to main data set. TDataSet * GetMainSet(); return pointer to the main dataset. TObject * GetObject() const; The depricated method (left here for the sake of the backward compatibility). TDataSet * Last() const; Return the last object in the list. Returns 0 when list is empty. TDataSet * Next() const; Return the object next to this one in the parent structure; This co",MatchSource.WIKI,root/html532/TDataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSet.html
https://root.cern/root/html532/TDataSet.html:14796,Usability,simpl,simplify,14796,"ct the ""Associated Members"". TDataSet * FindByPath(const char* path) const; Aliase for TDataSet::Find(const Char_t *path) method. TDataSet * Find(const char* path) const. Full description see: TDataSetIter::Find. Note. This method is quite expansive.; ----- It is done to simplify the user's code when one wants to find ONLY object.; If you need to find more then 1 object in this dataset,; regard using TDataSetIter class yourself. TDataSet * FindByName(const char* name, const char* path = """", Option_t* opt = """") const. Full description see: TDataSetIter::Find. Note. This is method is quite expansive.; ----- It is done to simplify the user's code when one wants to find ONLY object.; If you need to find more then 1 object in this dataset,; regard using TDataSetIter class yourself. TDataSet * FindByTitle(const char* title, const char* path = """", Option_t* opt = """") const. Full description see: TDataSetIter::Find. Note. This method is quite expansive.; ----- It is done to simplify the user's code when one wants to find ONLY object.; If you need to find more then 1 object in this dataset,; regard using TDataSetIter class yourself. TDataSet * First() const; Return the first object in the list. Returns 0 when list is empty. void AddMain(TDataSet* set); add data set to main data set. TDataSet * GetMainSet(); return pointer to the main dataset. TObject * GetObject() const; The depricated method (left here for the sake of the backward compatibility). TDataSet * Last() const; Return the last object in the list. Returns 0 when list is empty. TDataSet * Next() const; Return the object next to this one in the parent structure; This convinient but time-consuming. Don't use it in the inner loops. TDataSet * Prev() const; Return the object that is previous to this one in the parent structure; This convinient but time-consuming. Don't use it in the inner loops. void SetObject(TObject* obj); The depricated method (left here for the sake of the backward compatibility). void ls(Option_t* ",MatchSource.WIKI,root/html532/TDataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSet.html
https://root.cern/root/html532/TDataSetIter.html:1914,Availability,Error,Error,1914,"Char_t* path); virtual TDataSet*Add(TDataSet* set, TDataSet* dataset); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual TDataSet*Cd(const Char_t* dirname); virtual TDataSet*Cd(TDataSet* ds); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual TDataSet*Cwd() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDf() const; virtual TDataSet*Dir(Char_t* dirname); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual Int_tDu() const; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TDataSet*Find(const Char_t* path, TDataSet* rootset = 0, Bool_t mkdir = kFALSE, Bool_t titleFlag = kFALSE); virtual TDataSet*FindByName(const Char_t* name, const Char_t* path = """", Option_t* opt = """"); virtual TDataSet*FindByPath(const Char_t* path, TDataSet* rootset = 0, Bool_t mkdir = kFALSE); virtual TDataSet*FindByPointer(TDataSet* set, const Char_t* path = 0, Option_t* opt = """"); virtual TDataSet*FindByTitle(const Char_t* title, const Char_t* path = """", Option_t* opt = """"); virtual TDataSet*FindDataSet(const Char_t* name, const Char_t* path = """", Option_t* opt = """"); virtual TDataSet*FindDataSet(TDataSet* set, const",MatchSource.WIKI,root/html532/TDataSetIter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetIter.html
https://root.cern/root/html532/TDataSetIter.html:2043,Availability,error,error,2043,"tual voidTObject::Browse(TBrowser* b); virtual TDataSet*Cd(const Char_t* dirname); virtual TDataSet*Cd(TDataSet* ds); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual TDataSet*Cwd() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDf() const; virtual TDataSet*Dir(Char_t* dirname); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual Int_tDu() const; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TDataSet*Find(const Char_t* path, TDataSet* rootset = 0, Bool_t mkdir = kFALSE, Bool_t titleFlag = kFALSE); virtual TDataSet*FindByName(const Char_t* name, const Char_t* path = """", Option_t* opt = """"); virtual TDataSet*FindByPath(const Char_t* path, TDataSet* rootset = 0, Bool_t mkdir = kFALSE); virtual TDataSet*FindByPointer(TDataSet* set, const Char_t* path = 0, Option_t* opt = """"); virtual TDataSet*FindByTitle(const Char_t* title, const Char_t* path = """", Option_t* opt = """"); virtual TDataSet*FindDataSet(const Char_t* name, const Char_t* path = """", Option_t* opt = """"); virtual TDataSet*FindDataSet(TDataSet* set, const Char_t* path, Option_t* opt = """"); virtual TObject*FindObject(const Char_t* name) const; virtual TObject*FindObject(const TObjec",MatchSource.WIKI,root/html532/TDataSetIter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetIter.html
https://root.cern/root/html532/TDataSetIter.html:2127,Availability,error,error,2127,"irtual TDataSet*Cd(TDataSet* ds); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual TDataSet*Cwd() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDf() const; virtual TDataSet*Dir(Char_t* dirname); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual Int_tDu() const; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TDataSet*Find(const Char_t* path, TDataSet* rootset = 0, Bool_t mkdir = kFALSE, Bool_t titleFlag = kFALSE); virtual TDataSet*FindByName(const Char_t* name, const Char_t* path = """", Option_t* opt = """"); virtual TDataSet*FindByPath(const Char_t* path, TDataSet* rootset = 0, Bool_t mkdir = kFALSE); virtual TDataSet*FindByPointer(TDataSet* set, const Char_t* path = 0, Option_t* opt = """"); virtual TDataSet*FindByTitle(const Char_t* title, const Char_t* path = """", Option_t* opt = """"); virtual TDataSet*FindDataSet(const Char_t* name, const Char_t* path = """", Option_t* opt = """"); virtual TDataSet*FindDataSet(TDataSet* set, const Char_t* path, Option_t* opt = """"); virtual TObject*FindObject(const Char_t* name) const; virtual TObject*FindObject(const TObject* obj) const; virtual Int_tFlag(UInt_t flag = TDataSet::kMark, TDataSet::EBitOpt re",MatchSource.WIKI,root/html532/TDataSetIter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetIter.html
https://root.cern/root/html532/TDataSetIter.html:4000,Modifiability,Inherit,InheritsFrom,4000," virtual TObject*FindObject(const TObject* obj) const; virtual Int_tFlag(UInt_t flag = TDataSet::kMark, TDataSet::EBitOpt reset = TDataSet::kSet); virtual Int_tFlag(const Char_t* path, UInt_t flag = TDataSet::kMark, TDataSet::EBitOpt reset = TDataSet::kSet); virtual Int_tFlag(TDataSet* dataset, UInt_t flag = TDataSet::kMark, TDataSet::EBitOpt reset = TDataSet::kSet); virtual Int_tGetDepth() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidls(Option_t* dirname = """") const; virtual TDataSet*Ls(const Char_t* dirname = """", Option_t* opt = """") const; virtual TDataSet*Ls(const Char_t* dirname, Int_t depth) const; virtual TDataSet*ls(TString dirname, Option_t* opt = """") const; virtual TDataSet*ls(const Char_t* dirname, Int_t depth) const; voidTObject::MayNotUse(const char* method) const; virtual TDataSet*Md(const Char_t* dirname); virtual TDataSet*Mkdir(const Char_t* dirname); virtual TDataSet*Next(TDataSet::EDataSetPass mode = TDataSet::kContinue); virtual TDataSet*Next(const Char_t* path, TDataSet* rootset = 0,",MatchSource.WIKI,root/html532/TDataSetIter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetIter.html
https://root.cern/root/html532/TDataSetIter.html:4066,Modifiability,Inherit,InheritsFrom,4066,"_tFlag(UInt_t flag = TDataSet::kMark, TDataSet::EBitOpt reset = TDataSet::kSet); virtual Int_tFlag(const Char_t* path, UInt_t flag = TDataSet::kMark, TDataSet::EBitOpt reset = TDataSet::kSet); virtual Int_tFlag(TDataSet* dataset, UInt_t flag = TDataSet::kMark, TDataSet::EBitOpt reset = TDataSet::kSet); virtual Int_tGetDepth() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidls(Option_t* dirname = """") const; virtual TDataSet*Ls(const Char_t* dirname = """", Option_t* opt = """") const; virtual TDataSet*Ls(const Char_t* dirname, Int_t depth) const; virtual TDataSet*ls(TString dirname, Option_t* opt = """") const; virtual TDataSet*ls(const Char_t* dirname, Int_t depth) const; voidTObject::MayNotUse(const char* method) const; virtual TDataSet*Md(const Char_t* dirname); virtual TDataSet*Mkdir(const Char_t* dirname); virtual TDataSet*Next(TDataSet::EDataSetPass mode = TDataSet::kContinue); virtual TDataSet*Next(const Char_t* path, TDataSet* rootset = 0, Bool_t mkdir = kFALSE); virtual Bool_tNotify(); virtual voidNotif",MatchSource.WIKI,root/html532/TDataSetIter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetIter.html
https://root.cern/root/html532/TDataSetIter.html:8619,Modifiability,Inherit,Inheritance,8619," const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; TDataSet*GetNullSet(); voidTObject::MakeZombie(); TDataSet*NextDataSet(TIter& next); TDataSet*NextDataSet(Int_t nDataSet). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TDataSet*fDataSetPointer to the last selected TDataSet; Int_tfDepththe current depth of the passing; Int_tfMaxDepththe max depth of the passing (=1 by default); TIter*fNext""standard"" ROOT iterator for containers; TIter*fNextSet[100]the list of the TList iterators to bypass the whole dataset; TDataSet*fRootDataSetPointer to the root TDataSet; TDataSet*fWorkingDataSetPointer to the working TDataSet; static TDataSet*fgNullDataSet. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDataSetIter(TDataSet* l, Bool_t dir); to be documented. TDataSetIter(TDataSet* l = 0, Int_t depth = 1, Bool_t dir = kIterForward); to be documented. ~TDataSetIter(); to be documented. TDataSet * GetNullSet(); return a fake pointer == -1 casted to (TDataSet *). TDataSet * Add(TDataSet* set, TDataSet* dataset). Add - adds the set to the dataset defined with the second parameters. TDataSet dataset != 0 - Add the set to the TDataSet *dataset. = 0 - (by default) to the current TDataSet defined; with fWorkingDataSet data member. returns the pointer to set is success or ZERO poiner. Note: If this TDataSetIter is empty (i.e. Cwd() returns 0), the ""set""; becomes the ""root"" dataset of this iterator //. TDataSet * Add(TDataSet* set, const Char_t* path). Add. Char_t path != 0 - Add a TDataSet dataset to the TDataSet dataset; defined with ""path""; = 0 - (by default) to the current TDataSet defined; with fWorkingDataSet data member. returns the data",MatchSource.WIKI,root/html532/TDataSetIter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetIter.html
https://root.cern/root/html532/TDataSetIter.html:8632,Modifiability,Inherit,Inherited,8632," const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; TDataSet*GetNullSet(); voidTObject::MakeZombie(); TDataSet*NextDataSet(TIter& next); TDataSet*NextDataSet(Int_t nDataSet). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TDataSet*fDataSetPointer to the last selected TDataSet; Int_tfDepththe current depth of the passing; Int_tfMaxDepththe max depth of the passing (=1 by default); TIter*fNext""standard"" ROOT iterator for containers; TIter*fNextSet[100]the list of the TList iterators to bypass the whole dataset; TDataSet*fRootDataSetPointer to the root TDataSet; TDataSet*fWorkingDataSetPointer to the working TDataSet; static TDataSet*fgNullDataSet. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDataSetIter(TDataSet* l, Bool_t dir); to be documented. TDataSetIter(TDataSet* l = 0, Int_t depth = 1, Bool_t dir = kIterForward); to be documented. ~TDataSetIter(); to be documented. TDataSet * GetNullSet(); return a fake pointer == -1 casted to (TDataSet *). TDataSet * Add(TDataSet* set, TDataSet* dataset). Add - adds the set to the dataset defined with the second parameters. TDataSet dataset != 0 - Add the set to the TDataSet *dataset. = 0 - (by default) to the current TDataSet defined; with fWorkingDataSet data member. returns the pointer to set is success or ZERO poiner. Note: If this TDataSetIter is empty (i.e. Cwd() returns 0), the ""set""; becomes the ""root"" dataset of this iterator //. TDataSet * Add(TDataSet* set, const Char_t* path). Add. Char_t path != 0 - Add a TDataSet dataset to the TDataSet dataset; defined with ""path""; = 0 - (by default) to the current TDataSet defined; with fWorkingDataSet data member. returns the data",MatchSource.WIKI,root/html532/TDataSetIter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetIter.html
https://root.cern/root/html532/TDataSetIter.html:3890,Security,Hash,Hash,3890,"aSet(TDataSet* set, const Char_t* path, Option_t* opt = """"); virtual TObject*FindObject(const Char_t* name) const; virtual TObject*FindObject(const TObject* obj) const; virtual Int_tFlag(UInt_t flag = TDataSet::kMark, TDataSet::EBitOpt reset = TDataSet::kSet); virtual Int_tFlag(const Char_t* path, UInt_t flag = TDataSet::kMark, TDataSet::EBitOpt reset = TDataSet::kSet); virtual Int_tFlag(TDataSet* dataset, UInt_t flag = TDataSet::kMark, TDataSet::EBitOpt reset = TDataSet::kSet); virtual Int_tGetDepth() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidls(Option_t* dirname = """") const; virtual TDataSet*Ls(const Char_t* dirname = """", Option_t* opt = """") const; virtual TDataSet*Ls(const Char_t* dirname, Int_t depth) const; virtual TDataSet*ls(TString dirname, Option_t* opt = """") const; virtual TDataSet*ls(const Char_t* dirname, Int_t depth) const; voidTObject::MayNotUse(const char* method) const; virtual TDataSet*Md(const Char_t* dirname); virtual TDataSet*Mkdir(const Char_t* dirname); virtual TDataSet*Next(TD",MatchSource.WIKI,root/html532/TDataSetIter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetIter.html
https://root.cern/root/html532/TDataSetIter.html:7289,Testability,Test,TestBit,7289,"DataSet::kContinue); virtual TDataSet*operator()(const Char_t* path); virtual TDataSet*operator*() const; TDataSetIter&operator=(const TDataSetIter&); virtual TDataSet*operator[](const Char_t* path); virtual voidTObject::Paint(Option_t* option = """"); virtual TStringPath(); virtual TStringPath(const Char_t* path); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual TDataSet*Pwd(Option_t* opt = """") const; virtual TDataSet*Rd(const Char_t* dirname, Option_t* option = """"); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidReset(TDataSet* l = 0, Int_t depth = 0); voidTObject::ResetBit(UInt_t f); virtual TDataSet*Rmdir(TDataSet* dataset, Option_t* option = """"); virtual TDataSet*Rmdir(const Char_t* dirname, Option_t* option = """"); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual TDataSet*Shunt(TDataSet* set); virtual TDataSet*Shunt(TDataSet* set, const Char_t* path); virtual TDataSet*Shunt(TDataSet* set, TDataSet* dataset); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TDataSetIter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetIter.html
https://root.cern/root/html532/TDataSetIter.html:7328,Testability,Test,TestBits,7328,"DataSet::kContinue); virtual TDataSet*operator()(const Char_t* path); virtual TDataSet*operator*() const; TDataSetIter&operator=(const TDataSetIter&); virtual TDataSet*operator[](const Char_t* path); virtual voidTObject::Paint(Option_t* option = """"); virtual TStringPath(); virtual TStringPath(const Char_t* path); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual TDataSet*Pwd(Option_t* opt = """") const; virtual TDataSet*Rd(const Char_t* dirname, Option_t* option = """"); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidReset(TDataSet* l = 0, Int_t depth = 0); voidTObject::ResetBit(UInt_t f); virtual TDataSet*Rmdir(TDataSet* dataset, Option_t* option = """"); virtual TDataSet*Rmdir(const Char_t* dirname, Option_t* option = """"); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual TDataSet*Shunt(TDataSet* set); virtual TDataSet*Shunt(TDataSet* set, const Char_t* path); virtual TDataSet*Shunt(TDataSet* set, TDataSet* dataset); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TDataSetIter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetIter.html
https://root.cern/root/html532/TDataSetIter.html:1255,Usability,Clear,Clear,1255," TDataSetIter(const TDataSetIter&); TDataSetIter(TDataSet* l, Bool_t dir); TDataSetIter(TDataSet* l = 0, Int_t depth = 1, Bool_t dir = kIterForward); virtual~TDataSetIter(); voidTObject::AbstractMethod(const char* method) const; virtual TDataSet*Add(TDataSet* set); virtual TDataSet*Add(TDataSet* set, const Char_t* path); virtual TDataSet*Add(TDataSet* set, TDataSet* dataset); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual TDataSet*Cd(const Char_t* dirname); virtual TDataSet*Cd(TDataSet* ds); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual TDataSet*Cwd() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDf() const; virtual TDataSet*Dir(Char_t* dirname); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual Int_tDu() const; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const",MatchSource.WIKI,root/html532/TDataSetIter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetIter.html
https://root.cern/root/html532/TDataSetManager.html:1646,Availability,Error,Error,1646,"t char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static Bool_tCheckDataSetSrvMaps(TUrl* furl, TString& fn, TList* srvmaplist = 0); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual Int_tClearCache(const char* uri); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; static TStringCreateUri(const char* dsGroup = 0, const char* dsUser = 0, const char* dsName = 0, const char* dsTree = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Bool_tExistsDataSet(const char* uri); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; static Int_tFillMetaData(TFileInfo* fi, TDirectory* d, const char* rdir = ""/""); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Long64_tGetAvgFileSize() const; virtual TFileCollection*GetDataSet(const char* uri, const char* server = 0); virtual TMap*GetDataSets(const char* uri, UInt_t = TDataSetManager::kExport); static TList*GetDataSetSrvMaps(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long64_tGetGroupQuota(const char* group); virtual TMap*GetGroup",MatchSource.WIKI,root/html532/TDataSetManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManager.html
https://root.cern/root/html532/TDataSetManager.html:1775,Availability,error,error,1775,"ol_tCheckDataSetSrvMaps(TUrl* furl, TString& fn, TList* srvmaplist = 0); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual Int_tClearCache(const char* uri); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; static TStringCreateUri(const char* dsGroup = 0, const char* dsUser = 0, const char* dsName = 0, const char* dsTree = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Bool_tExistsDataSet(const char* uri); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; static Int_tFillMetaData(TFileInfo* fi, TDirectory* d, const char* rdir = ""/""); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Long64_tGetAvgFileSize() const; virtual TFileCollection*GetDataSet(const char* uri, const char* server = 0); virtual TMap*GetDataSets(const char* uri, UInt_t = TDataSetManager::kExport); static TList*GetDataSetSrvMaps(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long64_tGetGroupQuota(const char* group); virtual TMap*GetGroupQuotaMap(); virtual Long64_tGetGroupUsed(const char* group); virtual const char*TObject::GetIconName() const; virtual const char*",MatchSource.WIKI,root/html532/TDataSetManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManager.html
https://root.cern/root/html532/TDataSetManager.html:1859,Availability,error,error,1859,"ss*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual Int_tClearCache(const char* uri); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; static TStringCreateUri(const char* dsGroup = 0, const char* dsUser = 0, const char* dsName = 0, const char* dsTree = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Bool_tExistsDataSet(const char* uri); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; static Int_tFillMetaData(TFileInfo* fi, TDirectory* d, const char* rdir = ""/""); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Long64_tGetAvgFileSize() const; virtual TFileCollection*GetDataSet(const char* uri, const char* server = 0); virtual TMap*GetDataSets(const char* uri, UInt_t = TDataSetManager::kExport); static TList*GetDataSetSrvMaps(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long64_tGetGroupQuota(const char* group); virtual TMap*GetGroupQuotaMap(); virtual Long64_tGetGroupUsed(const char* group); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) co",MatchSource.WIKI,root/html532/TDataSetManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManager.html
https://root.cern/root/html532/TDataSetManager.html:9691,Availability,Avail,Available,9691,"TParameter); Long_tfMTimeGroupConfigLast modification of the group config file; Int_tfNDisappearedFilesNumber of files disappared in the last ScanDataSet operation; Int_tfNOpenedFilesNumber of files opened in the last ScanDataSet operation; Int_tfNTouchedFilesNumber of files touched in the last ScanDataSet operation; TStringfUserOwner of the session; TMapfUserUsed<group> --> <map of users> --> <value>; static TStringfgCommonDataSetTagName for common datasets, default: COMMON; static TList*fgDataSetSrvMapsList of TPair(TRegexp, TObjString) for mapping server coordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDataSetManager(const char* group = 0, const char* user = 0, const char* options = 0). Main constructor. ~TDataSetManager(); Destructor. void ParseInitOpts(const char* opts); Parse the opts string and set the init bits accordingly; Available options:; Cq: set kCheckQuota; Ar: set kAllowRegister; Av: set kAllowVerify; Ti: set kTrustInfo; Sb: set kIsSandbox; Ca: set kUseCache or kDoNotUseCache; The opts string may also contain additional unrelated info: in such a case; the field delimited by the prefix ""opt:"" is analyzed, e.g. if opts is; ""/tmp/dataset opt:Cq:-Ar: root://lxb6046.cern.ch"" only the substring; ""Cq:-Ar:"" will be parsed . Bool_t ReadGroupConfig(const char* cf = 0); Read group config file 'cf'.; If cf == 0 re-read, if changed, the file pointed by fGroupConfigFile . expects the following directives:; Group definition:; group <groupname> <user>+; disk quota; property <groupname> diskquota <quota in GB>; average filesize (to be used when the file size is not available); averagefilesize <average size>{G,g,M,m,K,k}. Long64_t ToBytes(const char* size = 0); Static utility function to gt the number of bytes from a string; representation in the form ""<digit><sfx>"" with <sfx> = {"""", ""k"", ""M"", ""G"",; ""T"", ""P""} (case insensitive).; Returns -1 if the format is wrong. TFileCollection * GetDataSet(const char* uri, con",MatchSource.WIKI,root/html532/TDataSetManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManager.html
https://root.cern/root/html532/TDataSetManager.html:10438,Availability,avail,available,10438,"Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDataSetManager(const char* group = 0, const char* user = 0, const char* options = 0). Main constructor. ~TDataSetManager(); Destructor. void ParseInitOpts(const char* opts); Parse the opts string and set the init bits accordingly; Available options:; Cq: set kCheckQuota; Ar: set kAllowRegister; Av: set kAllowVerify; Ti: set kTrustInfo; Sb: set kIsSandbox; Ca: set kUseCache or kDoNotUseCache; The opts string may also contain additional unrelated info: in such a case; the field delimited by the prefix ""opt:"" is analyzed, e.g. if opts is; ""/tmp/dataset opt:Cq:-Ar: root://lxb6046.cern.ch"" only the substring; ""Cq:-Ar:"" will be parsed . Bool_t ReadGroupConfig(const char* cf = 0); Read group config file 'cf'.; If cf == 0 re-read, if changed, the file pointed by fGroupConfigFile . expects the following directives:; Group definition:; group <groupname> <user>+; disk quota; property <groupname> diskquota <quota in GB>; average filesize (to be used when the file size is not available); averagefilesize <average size>{G,g,M,m,K,k}. Long64_t ToBytes(const char* size = 0); Static utility function to gt the number of bytes from a string; representation in the form ""<digit><sfx>"" with <sfx> = {"""", ""k"", ""M"", ""G"",; ""T"", ""P""} (case insensitive).; Returns -1 if the format is wrong. TFileCollection * GetDataSet(const char* uri, const char* server = 0); Utility function used in various methods for user dataset upload. Bool_t RemoveDataSet(const char* uri); Removes the indicated dataset. Bool_t ExistsDataSet(const char* uri); Checks if the indicated dataset exits. TMap * GetDataSets(const char* uri, UInt_t = TDataSetManager::kExport). Returns all datasets for the <group> and <user> specified by <uri>.; If <user> is 0, it returns all datasets for the given <group>.; If <group> is 0, it returns all datasets.; The returned TMap contains:; <group> --> <map of users> --> <map of datasets> --> <dataset> (T",MatchSource.WIKI,root/html532/TDataSetManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManager.html
https://root.cern/root/html532/TDataSetManager.html:11459,Availability,Avail,Available,11459,"age size>{G,g,M,m,K,k}. Long64_t ToBytes(const char* size = 0); Static utility function to gt the number of bytes from a string; representation in the form ""<digit><sfx>"" with <sfx> = {"""", ""k"", ""M"", ""G"",; ""T"", ""P""} (case insensitive).; Returns -1 if the format is wrong. TFileCollection * GetDataSet(const char* uri, const char* server = 0); Utility function used in various methods for user dataset upload. Bool_t RemoveDataSet(const char* uri); Removes the indicated dataset. Bool_t ExistsDataSet(const char* uri); Checks if the indicated dataset exits. TMap * GetDataSets(const char* uri, UInt_t = TDataSetManager::kExport). Returns all datasets for the <group> and <user> specified by <uri>.; If <user> is 0, it returns all datasets for the given <group>.; If <group> is 0, it returns all datasets.; The returned TMap contains:; <group> --> <map of users> --> <map of datasets> --> <dataset> (TFileCollection). The unsigned int 'option' is forwarded to GetDataSet and BrowseDataSet.; Available options (to be .or.ed):; kShowDefault a default selection is shown that include the ones from; the current user, the ones from the group and the common ones; kPrint print the dataset content; kQuotaUpdate update quotas; kExport use export naming. NB1: options ""kPrint"", ""kQuoatUpdate"" and ""kExport"" are mutually exclusive; NB2: for options ""kPrint"" and ""kQuoatUpdate"" return is null. Int_t ScanDataSet(const char* uri, const char* opt); Scans the dataset indicated by 'uri' following the 'opts' directives. The 'opts' string contains up to 4 directive fields separated by ':'. 'selection' field :; A, allfiles: process all files; D, staged: process only staged (on Disk) files (if 'allfiles:' is not specified; the default is to process only files marked as non-staged); 'pre-action field':; O, open: open the files marked as staged when processing only files; marked as non-staged; T, touch: open and touch the files marked as staged when processing; only files marked as non-staged; I, nostagedcheck:",MatchSource.WIKI,root/html532/TDataSetManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManager.html
https://root.cern/root/html532/TDataSetManager.html:12870,Availability,failure,failure,12870,"anDataSet(const char* uri, const char* opt); Scans the dataset indicated by 'uri' following the 'opts' directives. The 'opts' string contains up to 4 directive fields separated by ':'. 'selection' field :; A, allfiles: process all files; D, staged: process only staged (on Disk) files (if 'allfiles:' is not specified; the default is to process only files marked as non-staged); 'pre-action field':; O, open: open the files marked as staged when processing only files; marked as non-staged; T, touch: open and touch the files marked as staged when processing; only files marked as non-staged; I, nostagedcheck: do not check the actual stage status on selected files. 'process' field:; N, noaction: do nothing on the selected files; P, fullproc: open the selected files and extract the meta information; L, locateonly: only locate the selected files; S, stageonly: issue a stage request for the selected files not yet staged. 'auxilliary' field; V, verbose: notify the actions. Returns 0 on success, -1 if any failure occurs. Int_t ScanDataSet(const char* uri, UInt_t option = kReopen|kDebug); Scans the dataset indicated by <uri> and returns the number of missing files.; Returns -1 if any failure occurs.; For more details, see documentation of; ScanDataSet(TFileCollection *dataset, const char *option). void GetQuota(const char* group, const char* user, const char* dsName, TFileCollection* dataset). Gets quota information from this dataset. void ShowQuota(const char* opt); Display quota information. void PrintUsedSpace(). Prints the quota. void MonitorUsedSpace(TVirtualMonitoringWriter* monitoring). Log info to the monitoring server. Long64_t GetGroupUsed(const char* group). Returns the used space of that group. Long64_t GetGroupQuota(const char* group). returns the quota a group is allowed to have. void UpdateUsedSpace(); updates the used space maps. Int_t RegisterDataSet(const char* uri, TFileCollection* dataSet, const char* opt); Register a dataset, perfoming quota checkings, if ne",MatchSource.WIKI,root/html532/TDataSetManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManager.html
https://root.cern/root/html532/TDataSetManager.html:13051,Availability,failure,failure,13051,"election' field :; A, allfiles: process all files; D, staged: process only staged (on Disk) files (if 'allfiles:' is not specified; the default is to process only files marked as non-staged); 'pre-action field':; O, open: open the files marked as staged when processing only files; marked as non-staged; T, touch: open and touch the files marked as staged when processing; only files marked as non-staged; I, nostagedcheck: do not check the actual stage status on selected files. 'process' field:; N, noaction: do nothing on the selected files; P, fullproc: open the selected files and extract the meta information; L, locateonly: only locate the selected files; S, stageonly: issue a stage request for the selected files not yet staged. 'auxilliary' field; V, verbose: notify the actions. Returns 0 on success, -1 if any failure occurs. Int_t ScanDataSet(const char* uri, UInt_t option = kReopen|kDebug); Scans the dataset indicated by <uri> and returns the number of missing files.; Returns -1 if any failure occurs.; For more details, see documentation of; ScanDataSet(TFileCollection *dataset, const char *option). void GetQuota(const char* group, const char* user, const char* dsName, TFileCollection* dataset). Gets quota information from this dataset. void ShowQuota(const char* opt); Display quota information. void PrintUsedSpace(). Prints the quota. void MonitorUsedSpace(TVirtualMonitoringWriter* monitoring). Log info to the monitoring server. Long64_t GetGroupUsed(const char* group). Returns the used space of that group. Long64_t GetGroupQuota(const char* group). returns the quota a group is allowed to have. void UpdateUsedSpace(); updates the used space maps. Int_t RegisterDataSet(const char* uri, TFileCollection* dataSet, const char* opt); Register a dataset, perfoming quota checkings, if needed.; Returns 0 on success, -1 on failure. Int_t NotifyUpdate(const char* group = 0, const char* user = 0, const char* dspath = 0, Long_t mtime = 0, const char* checksum = 0); Save into t",MatchSource.WIKI,root/html532/TDataSetManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManager.html
https://root.cern/root/html532/TDataSetManager.html:13896,Availability,failure,failure,13896," Int_t ScanDataSet(const char* uri, UInt_t option = kReopen|kDebug); Scans the dataset indicated by <uri> and returns the number of missing files.; Returns -1 if any failure occurs.; For more details, see documentation of; ScanDataSet(TFileCollection *dataset, const char *option). void GetQuota(const char* group, const char* user, const char* dsName, TFileCollection* dataset). Gets quota information from this dataset. void ShowQuota(const char* opt); Display quota information. void PrintUsedSpace(). Prints the quota. void MonitorUsedSpace(TVirtualMonitoringWriter* monitoring). Log info to the monitoring server. Long64_t GetGroupUsed(const char* group). Returns the used space of that group. Long64_t GetGroupQuota(const char* group). returns the quota a group is allowed to have. void UpdateUsedSpace(); updates the used space maps. Int_t RegisterDataSet(const char* uri, TFileCollection* dataSet, const char* opt); Register a dataset, perfoming quota checkings, if needed.; Returns 0 on success, -1 on failure. Int_t NotifyUpdate(const char* group = 0, const char* user = 0, const char* dspath = 0, Long_t mtime = 0, const char* checksum = 0); Save into the <datasetdir>/dataset.list file the name of the last updated; or created or modified dataset; Returns 0 on success, -1 on error. Int_t ClearCache(const char* uri); Clear cached information matching uri. Int_t ShowCache(const char* uri); Show cached information matching uri. TString CreateUri(const char* dsGroup = 0, const char* dsUser = 0, const char* dsName = 0, const char* dsTree = 0); Creates URI for the dataset manger in the form '[[/dsGroup/]dsUser/]dsName[#dsObjPath]',; The optional dsObjPath can be in the form [subdir/]objname]'. Bool_t ParseUri(const char* uri, TString* dsGroup = 0, TString* dsUser = 0, TString* dsName = 0, TString* dsTree = 0, Bool_t onlyCurrent = kFALSE, Bool_t wildcards = kFALSE); Parses a (relative) URI that describes a DataSet on the cluster.; The input 'uri' should be in the form '[[/group/]u",MatchSource.WIKI,root/html532/TDataSetManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManager.html
https://root.cern/root/html532/TDataSetManager.html:14173,Availability,error,error,14173,"ollection *dataset, const char *option). void GetQuota(const char* group, const char* user, const char* dsName, TFileCollection* dataset). Gets quota information from this dataset. void ShowQuota(const char* opt); Display quota information. void PrintUsedSpace(). Prints the quota. void MonitorUsedSpace(TVirtualMonitoringWriter* monitoring). Log info to the monitoring server. Long64_t GetGroupUsed(const char* group). Returns the used space of that group. Long64_t GetGroupQuota(const char* group). returns the quota a group is allowed to have. void UpdateUsedSpace(); updates the used space maps. Int_t RegisterDataSet(const char* uri, TFileCollection* dataSet, const char* opt); Register a dataset, perfoming quota checkings, if needed.; Returns 0 on success, -1 on failure. Int_t NotifyUpdate(const char* group = 0, const char* user = 0, const char* dspath = 0, Long_t mtime = 0, const char* checksum = 0); Save into the <datasetdir>/dataset.list file the name of the last updated; or created or modified dataset; Returns 0 on success, -1 on error. Int_t ClearCache(const char* uri); Clear cached information matching uri. Int_t ShowCache(const char* uri); Show cached information matching uri. TString CreateUri(const char* dsGroup = 0, const char* dsUser = 0, const char* dsName = 0, const char* dsTree = 0); Creates URI for the dataset manger in the form '[[/dsGroup/]dsUser/]dsName[#dsObjPath]',; The optional dsObjPath can be in the form [subdir/]objname]'. Bool_t ParseUri(const char* uri, TString* dsGroup = 0, TString* dsUser = 0, TString* dsName = 0, TString* dsTree = 0, Bool_t onlyCurrent = kFALSE, Bool_t wildcards = kFALSE); Parses a (relative) URI that describes a DataSet on the cluster.; The input 'uri' should be in the form '[[/group/]user/]dsname[#[subdir/]objname]',; where 'objname' is the name of the object (e.g. the tree name) and the 'subdir'; is the directory in the file wher it should be looked for.; After resolving against a base URI consisting of proof://masterhos",MatchSource.WIKI,root/html532/TDataSetManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManager.html
https://root.cern/root/html532/TDataSetManager.html:11674,Deployability,update,update,11674,"epresentation in the form ""<digit><sfx>"" with <sfx> = {"""", ""k"", ""M"", ""G"",; ""T"", ""P""} (case insensitive).; Returns -1 if the format is wrong. TFileCollection * GetDataSet(const char* uri, const char* server = 0); Utility function used in various methods for user dataset upload. Bool_t RemoveDataSet(const char* uri); Removes the indicated dataset. Bool_t ExistsDataSet(const char* uri); Checks if the indicated dataset exits. TMap * GetDataSets(const char* uri, UInt_t = TDataSetManager::kExport). Returns all datasets for the <group> and <user> specified by <uri>.; If <user> is 0, it returns all datasets for the given <group>.; If <group> is 0, it returns all datasets.; The returned TMap contains:; <group> --> <map of users> --> <map of datasets> --> <dataset> (TFileCollection). The unsigned int 'option' is forwarded to GetDataSet and BrowseDataSet.; Available options (to be .or.ed):; kShowDefault a default selection is shown that include the ones from; the current user, the ones from the group and the common ones; kPrint print the dataset content; kQuotaUpdate update quotas; kExport use export naming. NB1: options ""kPrint"", ""kQuoatUpdate"" and ""kExport"" are mutually exclusive; NB2: for options ""kPrint"" and ""kQuoatUpdate"" return is null. Int_t ScanDataSet(const char* uri, const char* opt); Scans the dataset indicated by 'uri' following the 'opts' directives. The 'opts' string contains up to 4 directive fields separated by ':'. 'selection' field :; A, allfiles: process all files; D, staged: process only staged (on Disk) files (if 'allfiles:' is not specified; the default is to process only files marked as non-staged); 'pre-action field':; O, open: open the files marked as staged when processing only files; marked as non-staged; T, touch: open and touch the files marked as staged when processing; only files marked as non-staged; I, nostagedcheck: do not check the actual stage status on selected files. 'process' field:; N, noaction: do nothing on the selected files; P, fullpr",MatchSource.WIKI,root/html532/TDataSetManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManager.html
https://root.cern/root/html532/TDataSetManager.html:13678,Deployability,Update,UpdateUsedSpace,13678,"ected files; S, stageonly: issue a stage request for the selected files not yet staged. 'auxilliary' field; V, verbose: notify the actions. Returns 0 on success, -1 if any failure occurs. Int_t ScanDataSet(const char* uri, UInt_t option = kReopen|kDebug); Scans the dataset indicated by <uri> and returns the number of missing files.; Returns -1 if any failure occurs.; For more details, see documentation of; ScanDataSet(TFileCollection *dataset, const char *option). void GetQuota(const char* group, const char* user, const char* dsName, TFileCollection* dataset). Gets quota information from this dataset. void ShowQuota(const char* opt); Display quota information. void PrintUsedSpace(). Prints the quota. void MonitorUsedSpace(TVirtualMonitoringWriter* monitoring). Log info to the monitoring server. Long64_t GetGroupUsed(const char* group). Returns the used space of that group. Long64_t GetGroupQuota(const char* group). returns the quota a group is allowed to have. void UpdateUsedSpace(); updates the used space maps. Int_t RegisterDataSet(const char* uri, TFileCollection* dataSet, const char* opt); Register a dataset, perfoming quota checkings, if needed.; Returns 0 on success, -1 on failure. Int_t NotifyUpdate(const char* group = 0, const char* user = 0, const char* dspath = 0, Long_t mtime = 0, const char* checksum = 0); Save into the <datasetdir>/dataset.list file the name of the last updated; or created or modified dataset; Returns 0 on success, -1 on error. Int_t ClearCache(const char* uri); Clear cached information matching uri. Int_t ShowCache(const char* uri); Show cached information matching uri. TString CreateUri(const char* dsGroup = 0, const char* dsUser = 0, const char* dsName = 0, const char* dsTree = 0); Creates URI for the dataset manger in the form '[[/dsGroup/]dsUser/]dsName[#dsObjPath]',; The optional dsObjPath can be in the form [subdir/]objname]'. Bool_t ParseUri(const char* uri, TString* dsGroup = 0, TString* dsUser = 0, TString* dsName = 0, TString*",MatchSource.WIKI,root/html532/TDataSetManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManager.html
https://root.cern/root/html532/TDataSetManager.html:13697,Deployability,update,updates,13697,"ected files; S, stageonly: issue a stage request for the selected files not yet staged. 'auxilliary' field; V, verbose: notify the actions. Returns 0 on success, -1 if any failure occurs. Int_t ScanDataSet(const char* uri, UInt_t option = kReopen|kDebug); Scans the dataset indicated by <uri> and returns the number of missing files.; Returns -1 if any failure occurs.; For more details, see documentation of; ScanDataSet(TFileCollection *dataset, const char *option). void GetQuota(const char* group, const char* user, const char* dsName, TFileCollection* dataset). Gets quota information from this dataset. void ShowQuota(const char* opt); Display quota information. void PrintUsedSpace(). Prints the quota. void MonitorUsedSpace(TVirtualMonitoringWriter* monitoring). Log info to the monitoring server. Long64_t GetGroupUsed(const char* group). Returns the used space of that group. Long64_t GetGroupQuota(const char* group). returns the quota a group is allowed to have. void UpdateUsedSpace(); updates the used space maps. Int_t RegisterDataSet(const char* uri, TFileCollection* dataSet, const char* opt); Register a dataset, perfoming quota checkings, if needed.; Returns 0 on success, -1 on failure. Int_t NotifyUpdate(const char* group = 0, const char* user = 0, const char* dspath = 0, Long_t mtime = 0, const char* checksum = 0); Save into the <datasetdir>/dataset.list file the name of the last updated; or created or modified dataset; Returns 0 on success, -1 on error. Int_t ClearCache(const char* uri); Clear cached information matching uri. Int_t ShowCache(const char* uri); Show cached information matching uri. TString CreateUri(const char* dsGroup = 0, const char* dsUser = 0, const char* dsName = 0, const char* dsTree = 0); Creates URI for the dataset manger in the form '[[/dsGroup/]dsUser/]dsName[#dsObjPath]',; The optional dsObjPath can be in the form [subdir/]objname]'. Bool_t ParseUri(const char* uri, TString* dsGroup = 0, TString* dsUser = 0, TString* dsName = 0, TString*",MatchSource.WIKI,root/html532/TDataSetManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManager.html
https://root.cern/root/html532/TDataSetManager.html:14104,Deployability,update,updated,14104,"ollection *dataset, const char *option). void GetQuota(const char* group, const char* user, const char* dsName, TFileCollection* dataset). Gets quota information from this dataset. void ShowQuota(const char* opt); Display quota information. void PrintUsedSpace(). Prints the quota. void MonitorUsedSpace(TVirtualMonitoringWriter* monitoring). Log info to the monitoring server. Long64_t GetGroupUsed(const char* group). Returns the used space of that group. Long64_t GetGroupQuota(const char* group). returns the quota a group is allowed to have. void UpdateUsedSpace(); updates the used space maps. Int_t RegisterDataSet(const char* uri, TFileCollection* dataSet, const char* opt); Register a dataset, perfoming quota checkings, if needed.; Returns 0 on success, -1 on failure. Int_t NotifyUpdate(const char* group = 0, const char* user = 0, const char* dspath = 0, Long_t mtime = 0, const char* checksum = 0); Save into the <datasetdir>/dataset.list file the name of the last updated; or created or modified dataset; Returns 0 on success, -1 on error. Int_t ClearCache(const char* uri); Clear cached information matching uri. Int_t ShowCache(const char* uri); Show cached information matching uri. TString CreateUri(const char* dsGroup = 0, const char* dsUser = 0, const char* dsName = 0, const char* dsTree = 0); Creates URI for the dataset manger in the form '[[/dsGroup/]dsUser/]dsName[#dsObjPath]',; The optional dsObjPath can be in the form [subdir/]objname]'. Bool_t ParseUri(const char* uri, TString* dsGroup = 0, TString* dsUser = 0, TString* dsName = 0, TString* dsTree = 0, Bool_t onlyCurrent = kFALSE, Bool_t wildcards = kFALSE); Parses a (relative) URI that describes a DataSet on the cluster.; The input 'uri' should be in the form '[[/group/]user/]dsname[#[subdir/]objname]',; where 'objname' is the name of the object (e.g. the tree name) and the 'subdir'; is the directory in the file wher it should be looked for.; After resolving against a base URI consisting of proof://masterhos",MatchSource.WIKI,root/html532/TDataSetManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManager.html
https://root.cern/root/html532/TDataSetManager.html:17223,Deployability,update,update,17223,"RL. void ShowDataSets(const char* uri = ""*"", const char* opt = """"); Prints formatted information about the dataset 'uri'.; The type and format of output is driven by 'opt':. 1. opt = ""server:srv1[,srv2[,srv3[,...]]]""; Print info about the subsets of 'uri' on servers srv1, srv2, ...; 2. opt = ""servers[:exclude:srv1[,srv2[,srv3[,...]]]]""; Print info about the subsets of 'uri' on all servers, except; the ones in the exclude list srv1, srv2, ...; 3. opt = <any>; Print info about all datasets matching 'uri'. If 'opt' contains 'full:' the list of files in the datasets are also printed.; In case 3. this is enabled only if 'uri' matches a single dataset. In case 3, if 'opt' contains; 'full:' the list of files in the datasets are also printed.; 'forcescan:' the dataset are open to get the information; otherwise the; pre-processed information is used.; 'noheader:' the labelling header is not printed; usefull when to chain; several printouts; 'noupdate:' do not update the cache (which may be slow on very remote; servers); 'refresh:' refresh the information (requires appropriate credentials;; typically it can be done only for owned datasets). Int_t ScanDataSet(TFileCollection* dataset, Int_t fopt, Int_t sopt = 0, Int_t ropt = 0, Bool_t dbg = kFALSE, Int_t* touched = 0, Int_t* opened = 0, Int_t* disappeared = 0, TList* flist = 0, Long64_t avgsz = -1, const char* mss = 0, Int_t maxfiles = -1, const char* stageopts = 0); Go through the files in the specified dataset, selecting files according to; 'fopt' and doing on these files the actions described by 'sopt'.; If required, the information in 'dataset' is updated. The int fopt controls which files have to be processed (or added to the list; if ropt is 1 - see below); 'fopt' is defined in term of csopt and fsopt:; fopt = sign(fsopt) * csopt * 100 + fsopt; where 'fsopt' controls the actual selection; -1 all files in the dataset; 0 process only files marked as 'non-staged'; >=1 as 0 but files that are marked 'staged' are open; >=2 as ",MatchSource.WIKI,root/html532/TDataSetManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManager.html
https://root.cern/root/html532/TDataSetManager.html:17876,Deployability,update,updated,17876," this is enabled only if 'uri' matches a single dataset. In case 3, if 'opt' contains; 'full:' the list of files in the datasets are also printed.; 'forcescan:' the dataset are open to get the information; otherwise the; pre-processed information is used.; 'noheader:' the labelling header is not printed; usefull when to chain; several printouts; 'noupdate:' do not update the cache (which may be slow on very remote; servers); 'refresh:' refresh the information (requires appropriate credentials;; typically it can be done only for owned datasets). Int_t ScanDataSet(TFileCollection* dataset, Int_t fopt, Int_t sopt = 0, Int_t ropt = 0, Bool_t dbg = kFALSE, Int_t* touched = 0, Int_t* opened = 0, Int_t* disappeared = 0, TList* flist = 0, Long64_t avgsz = -1, const char* mss = 0, Int_t maxfiles = -1, const char* stageopts = 0); Go through the files in the specified dataset, selecting files according to; 'fopt' and doing on these files the actions described by 'sopt'.; If required, the information in 'dataset' is updated. The int fopt controls which files have to be processed (or added to the list; if ropt is 1 - see below); 'fopt' is defined in term of csopt and fsopt:; fopt = sign(fsopt) * csopt * 100 + fsopt; where 'fsopt' controls the actual selection; -1 all files in the dataset; 0 process only files marked as 'non-staged'; >=1 as 0 but files that are marked 'staged' are open; >=2 as 1 but files that are marked 'staged' are touched; 10 process only files marked as 'staged'; files marked as 'non-staged'; are ignored; and 'csopt' controls if an actual check on the staged status (via TFileStager) is done; 0 check that the file is staged using TFileStager; 1 do not hard check the staged status; (example: use fopt = -101 to check the staged status of all the files, or fopt = 110; to re-check the stage status of all the files marked as staged). If 'dbg' is true, some information about the ongoing operations is reguraly; printed; this can be useful when processing very large da",MatchSource.WIKI,root/html532/TDataSetManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManager.html
https://root.cern/root/html532/TDataSetManager.html:19710,Deployability,update,update,19710,"d as staged). If 'dbg' is true, some information about the ongoing operations is reguraly; printed; this can be useful when processing very large datasets, an operation; which can take a very long time. The int 'sopt' controls what is done on the selected files (this is effective only; if ropt is 0 or 2 - see below):; -1 no action (fopt = 2 and sopt = -1 touches all staged files); 0 do the full process: open the files and fill the meta-information; in the TFileInfo object, including the end-point URL; 1 only locate the files, by updating the end-point URL (uses TFileStager::Locate; which is must faster of an TFile::Open); 2 issue a stage request on the files. The int 'ropt' controls which actions are performed:; 0 do the full process: get list of files to process and process them; 1 get the list of files to be scanned and return it in flist; 2 process the files in flist (according to sopt); When defined flist is under the responsability the caller. If avgsz > 0 it is used for the final update of the dataset global counters. If 'mss' is defined use it to initialize the stager (instead of the Url in the; TFileInfo objects). If maxfiles > 0, select for processing a maximum of 'filesmax' files (but if fopt is 1 or 2; all files marked as 'staged' are still open or touched). Return code; 1 dataset was not changed; 2 dataset was changed. The number of touched, opened and disappeared files are returned in the respective; variables, if these are defined. Int_t ScanFile(TFileInfo* fileinfo, Bool_t notify); Open the file described by 'fileinfo' to extract the relevant meta-information.; Return 0 if OK, -2 if the file cannot be open, -1 if it is corrupted. Int_t FillMetaData(TFileInfo* fi, TDirectory* d, const char* rdir = ""/""); Navigate the directory 'd' (and its subdirectories) looking for TTree objects.; Fill in the relevant metadata information in 'fi'. The name of the TFileInfoMeta; metadata entry will be ""/dir1/dir2/.../tree_name"".; Return 0 on success, -1 if any problem h",MatchSource.WIKI,root/html532/TDataSetManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManager.html
https://root.cern/root/html532/TDataSetManager.html:21380,Deployability,Update,Update,21380,", -2 if the file cannot be open, -1 if it is corrupted. Int_t FillMetaData(TFileInfo* fi, TDirectory* d, const char* rdir = ""/""); Navigate the directory 'd' (and its subdirectories) looking for TTree objects.; Fill in the relevant metadata information in 'fi'. The name of the TFileInfoMeta; metadata entry will be ""/dir1/dir2/.../tree_name"".; Return 0 on success, -1 if any problem happens (object found in keys cannot be read,; for example). TList * ParseDataSetSrvMaps(const TString& srvmaps); Create a server mapping list from the content of 'srvmaps'; Return the list (owned by the caller) or 0 if no valid info could be found). TList * GetDataSetSrvMaps(); Static getter for server mapping list. Bool_t CheckDataSetSrvMaps(TUrl* furl, TString& fn, TList* srvmaplist = 0); Check if the dataset server mappings apply to the url defined by 'furl'.; Use srvmaplist if defined, else use the default list.; If yes, resolve the mapping into file1 and return kTRUE.; Otherwise return kFALSE. void SetScanCounters(Int_t t = -1, Int_t o = -1, Int_t d = -1); Update scan counters. TDataSetManager(const TDataSetManager& ). TDataSetManager& operator=(const TDataSetManager& ). TMap * GetGroupUsedMap(); for dataset files (init from DataSet.SrvMap). { return &fGroupUsed; }. TMap * GetUserUsedMap(); { return &fUserUsed; }. Int_t GetNTouchedFiles() const; { return fNTouchedFiles; }. Int_t GetNOpenedFiles() const; { return fNOpenedFiles; }. Int_t GetNDisapparedFiles() const; { return fNDisappearedFiles; }. Long64_t GetAvgFileSize() const; { return fAvgFileSize; }. TMap * GetGroupQuotaMap(); { return &fGroupQuota; }. » Author: Jan Fiete Grosse-Oetringhaus, 08.08.07 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id: TDataSetManager.h 33447 2010-05-10 13:26:51Z ganis $ » Last generated: 2011-11-03 20:11; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TDataSetManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManager.html
https://root.cern/root/html532/TDataSetManager.html:3876,Energy Efficiency,monitor,monitoring,3876,"Object::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TMap*GetSubDataSets(const char* uri, const char* excludeservers); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidMonitorUsedSpace(TVirtualMonitoringWriter* monitoring); virtual Bool_tTObject::Notify(); virtual Int_tNotifyUpdate(const char* group = 0, const char* user = 0, const char* dspath = 0, Long_t mtime = 0, const char* checksum = 0); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); static TList*ParseDataSetSrvMaps(const TString& srvmaps); virtual voidParseInitOpts(const char* opts); Bool_tParseUri(const char* uri, TString* dsGroup = 0, TString* dsUser = 0, TString* dsName = 0, TString* dsTree = 0, Bool_t onlyCurrent = kFALSE, Bool_t wildcards = kFALS",MatchSource.WIKI,root/html532/TDataSetManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManager.html
https://root.cern/root/html532/TDataSetManager.html:13413,Energy Efficiency,Monitor,MonitorUsedSpace,13413,"d as non-staged; I, nostagedcheck: do not check the actual stage status on selected files. 'process' field:; N, noaction: do nothing on the selected files; P, fullproc: open the selected files and extract the meta information; L, locateonly: only locate the selected files; S, stageonly: issue a stage request for the selected files not yet staged. 'auxilliary' field; V, verbose: notify the actions. Returns 0 on success, -1 if any failure occurs. Int_t ScanDataSet(const char* uri, UInt_t option = kReopen|kDebug); Scans the dataset indicated by <uri> and returns the number of missing files.; Returns -1 if any failure occurs.; For more details, see documentation of; ScanDataSet(TFileCollection *dataset, const char *option). void GetQuota(const char* group, const char* user, const char* dsName, TFileCollection* dataset). Gets quota information from this dataset. void ShowQuota(const char* opt); Display quota information. void PrintUsedSpace(). Prints the quota. void MonitorUsedSpace(TVirtualMonitoringWriter* monitoring). Log info to the monitoring server. Long64_t GetGroupUsed(const char* group). Returns the used space of that group. Long64_t GetGroupQuota(const char* group). returns the quota a group is allowed to have. void UpdateUsedSpace(); updates the used space maps. Int_t RegisterDataSet(const char* uri, TFileCollection* dataSet, const char* opt); Register a dataset, perfoming quota checkings, if needed.; Returns 0 on success, -1 on failure. Int_t NotifyUpdate(const char* group = 0, const char* user = 0, const char* dspath = 0, Long_t mtime = 0, const char* checksum = 0); Save into the <datasetdir>/dataset.list file the name of the last updated; or created or modified dataset; Returns 0 on success, -1 on error. Int_t ClearCache(const char* uri); Clear cached information matching uri. Int_t ShowCache(const char* uri); Show cached information matching uri. TString CreateUri(const char* dsGroup = 0, const char* dsUser = 0, const char* dsName = 0, const char* dsTree = ",MatchSource.WIKI,root/html532/TDataSetManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManager.html
https://root.cern/root/html532/TDataSetManager.html:13456,Energy Efficiency,monitor,monitoring,13456,"d as non-staged; I, nostagedcheck: do not check the actual stage status on selected files. 'process' field:; N, noaction: do nothing on the selected files; P, fullproc: open the selected files and extract the meta information; L, locateonly: only locate the selected files; S, stageonly: issue a stage request for the selected files not yet staged. 'auxilliary' field; V, verbose: notify the actions. Returns 0 on success, -1 if any failure occurs. Int_t ScanDataSet(const char* uri, UInt_t option = kReopen|kDebug); Scans the dataset indicated by <uri> and returns the number of missing files.; Returns -1 if any failure occurs.; For more details, see documentation of; ScanDataSet(TFileCollection *dataset, const char *option). void GetQuota(const char* group, const char* user, const char* dsName, TFileCollection* dataset). Gets quota information from this dataset. void ShowQuota(const char* opt); Display quota information. void PrintUsedSpace(). Prints the quota. void MonitorUsedSpace(TVirtualMonitoringWriter* monitoring). Log info to the monitoring server. Long64_t GetGroupUsed(const char* group). Returns the used space of that group. Long64_t GetGroupQuota(const char* group). returns the quota a group is allowed to have. void UpdateUsedSpace(); updates the used space maps. Int_t RegisterDataSet(const char* uri, TFileCollection* dataSet, const char* opt); Register a dataset, perfoming quota checkings, if needed.; Returns 0 on success, -1 on failure. Int_t NotifyUpdate(const char* group = 0, const char* user = 0, const char* dspath = 0, Long_t mtime = 0, const char* checksum = 0); Save into the <datasetdir>/dataset.list file the name of the last updated; or created or modified dataset; Returns 0 on success, -1 on error. Int_t ClearCache(const char* uri); Clear cached information matching uri. Int_t ShowCache(const char* uri); Show cached information matching uri. TString CreateUri(const char* dsGroup = 0, const char* dsUser = 0, const char* dsName = 0, const char* dsTree = ",MatchSource.WIKI,root/html532/TDataSetManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManager.html
https://root.cern/root/html532/TDataSetManager.html:13485,Energy Efficiency,monitor,monitoring,13485,"the actual stage status on selected files. 'process' field:; N, noaction: do nothing on the selected files; P, fullproc: open the selected files and extract the meta information; L, locateonly: only locate the selected files; S, stageonly: issue a stage request for the selected files not yet staged. 'auxilliary' field; V, verbose: notify the actions. Returns 0 on success, -1 if any failure occurs. Int_t ScanDataSet(const char* uri, UInt_t option = kReopen|kDebug); Scans the dataset indicated by <uri> and returns the number of missing files.; Returns -1 if any failure occurs.; For more details, see documentation of; ScanDataSet(TFileCollection *dataset, const char *option). void GetQuota(const char* group, const char* user, const char* dsName, TFileCollection* dataset). Gets quota information from this dataset. void ShowQuota(const char* opt); Display quota information. void PrintUsedSpace(). Prints the quota. void MonitorUsedSpace(TVirtualMonitoringWriter* monitoring). Log info to the monitoring server. Long64_t GetGroupUsed(const char* group). Returns the used space of that group. Long64_t GetGroupQuota(const char* group). returns the quota a group is allowed to have. void UpdateUsedSpace(); updates the used space maps. Int_t RegisterDataSet(const char* uri, TFileCollection* dataSet, const char* opt); Register a dataset, perfoming quota checkings, if needed.; Returns 0 on success, -1 on failure. Int_t NotifyUpdate(const char* group = 0, const char* user = 0, const char* dspath = 0, Long_t mtime = 0, const char* checksum = 0); Save into the <datasetdir>/dataset.list file the name of the last updated; or created or modified dataset; Returns 0 on success, -1 on error. Int_t ClearCache(const char* uri); Clear cached information matching uri. Int_t ShowCache(const char* uri); Show cached information matching uri. TString CreateUri(const char* dsGroup = 0, const char* dsUser = 0, const char* dsName = 0, const char* dsTree = 0); Creates URI for the dataset manger in the fo",MatchSource.WIKI,root/html532/TDataSetManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManager.html
https://root.cern/root/html532/TDataSetManager.html:3300,Modifiability,Inherit,InheritsFrom,3300,"tual TFileCollection*GetDataSet(const char* uri, const char* server = 0); virtual TMap*GetDataSets(const char* uri, UInt_t = TDataSetManager::kExport); static TList*GetDataSetSrvMaps(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long64_tGetGroupQuota(const char* group); virtual TMap*GetGroupQuotaMap(); virtual Long64_tGetGroupUsed(const char* group); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TMap*GetSubDataSets(const char* uri, const char* excludeservers); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidMonitorUsedSpace(TVirtualMonitoringWriter* monitoring); virtual Bool_tTObject::Notify(); virtual Int_tNotifyUpdate(const char* group = 0, const char* user = 0, const char* dspath = 0, Long_t mtime = 0, const char* checksum = 0); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](v",MatchSource.WIKI,root/html532/TDataSetManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManager.html
https://root.cern/root/html532/TDataSetManager.html:3366,Modifiability,Inherit,InheritsFrom,3366,"r = 0); virtual TMap*GetDataSets(const char* uri, UInt_t = TDataSetManager::kExport); static TList*GetDataSetSrvMaps(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long64_tGetGroupQuota(const char* group); virtual TMap*GetGroupQuotaMap(); virtual Long64_tGetGroupUsed(const char* group); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TMap*GetSubDataSets(const char* uri, const char* excludeservers); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidMonitorUsedSpace(TVirtualMonitoringWriter* monitoring); virtual Bool_tTObject::Notify(); virtual Int_tNotifyUpdate(const char* group = 0, const char* user = 0, const char* dspath = 0, Long_t mtime = 0, const char* checksum = 0); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* ",MatchSource.WIKI,root/html532/TDataSetManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManager.html
https://root.cern/root/html532/TDataSetManager.html:8685,Modifiability,config,config,8685,"; kSetDefaultTree; kForceScan; kNoHeaderPrint; kReopen; kTouch; kMaxFiles; kReadShort; kFileMustExist; kNoAction; kLocateOnly; kStageOnly; kNoCacheUpdate; kRefreshLs; kList; kAllFiles; kStagedFiles; kNoStagedCheck; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Long64_tfAvgFileSizeAverage file size to be used to estimate the dataset size (in MB); TUrifBaseBase URI used to parse dataset names; TStringfCommonGroupGroup that stores the COMMON datasets; TStringfCommonUserUser that stores the COMMON datasets; TStringfGroupGroup to which the owner of this session belongs; TStringfGroupConfigFilePath to the group config file; TMapfGroupQuotaGroup quotas (read from config file); TMapfGroupUsed<group> --> <used bytes> (TParameter); Long_tfMTimeGroupConfigLast modification of the group config file; Int_tfNDisappearedFilesNumber of files disappared in the last ScanDataSet operation; Int_tfNOpenedFilesNumber of files opened in the last ScanDataSet operation; Int_tfNTouchedFilesNumber of files touched in the last ScanDataSet operation; TStringfUserOwner of the session; TMapfUserUsed<group> --> <map of users> --> <value>; static TStringfgCommonDataSetTagName for common datasets, default: COMMON; static TList*fgDataSetSrvMapsList of TPair(TRegexp, TObjString) for mapping server coordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDataSetManager(const char* group = 0, const char* user = 0, const char* options = 0). Main constructor. ~TDataSetManager(); Destructor. void ParseInitOpts(const char* opts); Parse the opts string and set the init bits accordingly; Available options:; Cq: set kCheckQuota; Ar: set kAllowRegister; Av: set kAllowVerify; Ti: set kTrustInfo; Sb: set kIsSandbox; Ca: set kUseCache or kDoNotUseCa",MatchSource.WIKI,root/html532/TDataSetManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManager.html
https://root.cern/root/html532/TDataSetManager.html:8737,Modifiability,config,config,8737,"; kSetDefaultTree; kForceScan; kNoHeaderPrint; kReopen; kTouch; kMaxFiles; kReadShort; kFileMustExist; kNoAction; kLocateOnly; kStageOnly; kNoCacheUpdate; kRefreshLs; kList; kAllFiles; kStagedFiles; kNoStagedCheck; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Long64_tfAvgFileSizeAverage file size to be used to estimate the dataset size (in MB); TUrifBaseBase URI used to parse dataset names; TStringfCommonGroupGroup that stores the COMMON datasets; TStringfCommonUserUser that stores the COMMON datasets; TStringfGroupGroup to which the owner of this session belongs; TStringfGroupConfigFilePath to the group config file; TMapfGroupQuotaGroup quotas (read from config file); TMapfGroupUsed<group> --> <used bytes> (TParameter); Long_tfMTimeGroupConfigLast modification of the group config file; Int_tfNDisappearedFilesNumber of files disappared in the last ScanDataSet operation; Int_tfNOpenedFilesNumber of files opened in the last ScanDataSet operation; Int_tfNTouchedFilesNumber of files touched in the last ScanDataSet operation; TStringfUserOwner of the session; TMapfUserUsed<group> --> <map of users> --> <value>; static TStringfgCommonDataSetTagName for common datasets, default: COMMON; static TList*fgDataSetSrvMapsList of TPair(TRegexp, TObjString) for mapping server coordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDataSetManager(const char* group = 0, const char* user = 0, const char* options = 0). Main constructor. ~TDataSetManager(); Destructor. void ParseInitOpts(const char* opts); Parse the opts string and set the init bits accordingly; Available options:; Cq: set kCheckQuota; Ar: set kAllowRegister; Av: set kAllowVerify; Ti: set kTrustInfo; Sb: set kIsSandbox; Ca: set kUseCache or kDoNotUseCa",MatchSource.WIKI,root/html532/TDataSetManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManager.html
https://root.cern/root/html532/TDataSetManager.html:8858,Modifiability,config,config,8858,"; kSetDefaultTree; kForceScan; kNoHeaderPrint; kReopen; kTouch; kMaxFiles; kReadShort; kFileMustExist; kNoAction; kLocateOnly; kStageOnly; kNoCacheUpdate; kRefreshLs; kList; kAllFiles; kStagedFiles; kNoStagedCheck; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Long64_tfAvgFileSizeAverage file size to be used to estimate the dataset size (in MB); TUrifBaseBase URI used to parse dataset names; TStringfCommonGroupGroup that stores the COMMON datasets; TStringfCommonUserUser that stores the COMMON datasets; TStringfGroupGroup to which the owner of this session belongs; TStringfGroupConfigFilePath to the group config file; TMapfGroupQuotaGroup quotas (read from config file); TMapfGroupUsed<group> --> <used bytes> (TParameter); Long_tfMTimeGroupConfigLast modification of the group config file; Int_tfNDisappearedFilesNumber of files disappared in the last ScanDataSet operation; Int_tfNOpenedFilesNumber of files opened in the last ScanDataSet operation; Int_tfNTouchedFilesNumber of files touched in the last ScanDataSet operation; TStringfUserOwner of the session; TMapfUserUsed<group> --> <map of users> --> <value>; static TStringfgCommonDataSetTagName for common datasets, default: COMMON; static TList*fgDataSetSrvMapsList of TPair(TRegexp, TObjString) for mapping server coordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDataSetManager(const char* group = 0, const char* user = 0, const char* options = 0). Main constructor. ~TDataSetManager(); Destructor. void ParseInitOpts(const char* opts); Parse the opts string and set the init bits accordingly; Available options:; Cq: set kCheckQuota; Ar: set kAllowRegister; Av: set kAllowVerify; Ti: set kTrustInfo; Sb: set kIsSandbox; Ca: set kUseCache or kDoNotUseCa",MatchSource.WIKI,root/html532/TDataSetManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManager.html
https://root.cern/root/html532/TDataSetManager.html:9382,Modifiability,Inherit,Inheritance,9382,"ize (in MB); TUrifBaseBase URI used to parse dataset names; TStringfCommonGroupGroup that stores the COMMON datasets; TStringfCommonUserUser that stores the COMMON datasets; TStringfGroupGroup to which the owner of this session belongs; TStringfGroupConfigFilePath to the group config file; TMapfGroupQuotaGroup quotas (read from config file); TMapfGroupUsed<group> --> <used bytes> (TParameter); Long_tfMTimeGroupConfigLast modification of the group config file; Int_tfNDisappearedFilesNumber of files disappared in the last ScanDataSet operation; Int_tfNOpenedFilesNumber of files opened in the last ScanDataSet operation; Int_tfNTouchedFilesNumber of files touched in the last ScanDataSet operation; TStringfUserOwner of the session; TMapfUserUsed<group> --> <map of users> --> <value>; static TStringfgCommonDataSetTagName for common datasets, default: COMMON; static TList*fgDataSetSrvMapsList of TPair(TRegexp, TObjString) for mapping server coordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDataSetManager(const char* group = 0, const char* user = 0, const char* options = 0). Main constructor. ~TDataSetManager(); Destructor. void ParseInitOpts(const char* opts); Parse the opts string and set the init bits accordingly; Available options:; Cq: set kCheckQuota; Ar: set kAllowRegister; Av: set kAllowVerify; Ti: set kTrustInfo; Sb: set kIsSandbox; Ca: set kUseCache or kDoNotUseCache; The opts string may also contain additional unrelated info: in such a case; the field delimited by the prefix ""opt:"" is analyzed, e.g. if opts is; ""/tmp/dataset opt:Cq:-Ar: root://lxb6046.cern.ch"" only the substring; ""Cq:-Ar:"" will be parsed . Bool_t ReadGroupConfig(const char* cf = 0); Read group config file 'cf'.; If cf == 0 re-read, if changed, the file pointed by fGroupConfigFile . expects the following directives:; Group definition:; group <groupname> <user>+; disk quota; property <groupname> diskquota <quota in GB>; average filesize (to be u",MatchSource.WIKI,root/html532/TDataSetManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManager.html
https://root.cern/root/html532/TDataSetManager.html:9395,Modifiability,Inherit,Inherited,9395,"ize (in MB); TUrifBaseBase URI used to parse dataset names; TStringfCommonGroupGroup that stores the COMMON datasets; TStringfCommonUserUser that stores the COMMON datasets; TStringfGroupGroup to which the owner of this session belongs; TStringfGroupConfigFilePath to the group config file; TMapfGroupQuotaGroup quotas (read from config file); TMapfGroupUsed<group> --> <used bytes> (TParameter); Long_tfMTimeGroupConfigLast modification of the group config file; Int_tfNDisappearedFilesNumber of files disappared in the last ScanDataSet operation; Int_tfNOpenedFilesNumber of files opened in the last ScanDataSet operation; Int_tfNTouchedFilesNumber of files touched in the last ScanDataSet operation; TStringfUserOwner of the session; TMapfUserUsed<group> --> <map of users> --> <value>; static TStringfgCommonDataSetTagName for common datasets, default: COMMON; static TList*fgDataSetSrvMapsList of TPair(TRegexp, TObjString) for mapping server coordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDataSetManager(const char* group = 0, const char* user = 0, const char* options = 0). Main constructor. ~TDataSetManager(); Destructor. void ParseInitOpts(const char* opts); Parse the opts string and set the init bits accordingly; Available options:; Cq: set kCheckQuota; Ar: set kAllowRegister; Av: set kAllowVerify; Ti: set kTrustInfo; Sb: set kIsSandbox; Ca: set kUseCache or kDoNotUseCache; The opts string may also contain additional unrelated info: in such a case; the field delimited by the prefix ""opt:"" is analyzed, e.g. if opts is; ""/tmp/dataset opt:Cq:-Ar: root://lxb6046.cern.ch"" only the substring; ""Cq:-Ar:"" will be parsed . Bool_t ReadGroupConfig(const char* cf = 0); Read group config file 'cf'.; If cf == 0 re-read, if changed, the file pointed by fGroupConfigFile . expects the following directives:; Group definition:; group <groupname> <user>+; disk quota; property <groupname> diskquota <quota in GB>; average filesize (to be u",MatchSource.WIKI,root/html532/TDataSetManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManager.html
https://root.cern/root/html532/TDataSetManager.html:10154,Modifiability,config,config,10154," session; TMapfUserUsed<group> --> <map of users> --> <value>; static TStringfgCommonDataSetTagName for common datasets, default: COMMON; static TList*fgDataSetSrvMapsList of TPair(TRegexp, TObjString) for mapping server coordinates. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDataSetManager(const char* group = 0, const char* user = 0, const char* options = 0). Main constructor. ~TDataSetManager(); Destructor. void ParseInitOpts(const char* opts); Parse the opts string and set the init bits accordingly; Available options:; Cq: set kCheckQuota; Ar: set kAllowRegister; Av: set kAllowVerify; Ti: set kTrustInfo; Sb: set kIsSandbox; Ca: set kUseCache or kDoNotUseCache; The opts string may also contain additional unrelated info: in such a case; the field delimited by the prefix ""opt:"" is analyzed, e.g. if opts is; ""/tmp/dataset opt:Cq:-Ar: root://lxb6046.cern.ch"" only the substring; ""Cq:-Ar:"" will be parsed . Bool_t ReadGroupConfig(const char* cf = 0); Read group config file 'cf'.; If cf == 0 re-read, if changed, the file pointed by fGroupConfigFile . expects the following directives:; Group definition:; group <groupname> <user>+; disk quota; property <groupname> diskquota <quota in GB>; average filesize (to be used when the file size is not available); averagefilesize <average size>{G,g,M,m,K,k}. Long64_t ToBytes(const char* size = 0); Static utility function to gt the number of bytes from a string; representation in the form ""<digit><sfx>"" with <sfx> = {"""", ""k"", ""M"", ""G"",; ""T"", ""P""} (case insensitive).; Returns -1 if the format is wrong. TFileCollection * GetDataSet(const char* uri, const char* server = 0); Utility function used in various methods for user dataset upload. Bool_t RemoveDataSet(const char* uri); Removes the indicated dataset. Bool_t ExistsDataSet(const char* uri); Checks if the indicated dataset exits. TMap * GetDataSets(const char* uri, UInt_t = TDataSetManager::kExport). Returns all datasets for the <group>",MatchSource.WIKI,root/html532/TDataSetManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManager.html
https://root.cern/root/html532/TDataSetManager.html:20146,Modifiability,variab,variables,20146,"n the files and fill the meta-information; in the TFileInfo object, including the end-point URL; 1 only locate the files, by updating the end-point URL (uses TFileStager::Locate; which is must faster of an TFile::Open); 2 issue a stage request on the files. The int 'ropt' controls which actions are performed:; 0 do the full process: get list of files to process and process them; 1 get the list of files to be scanned and return it in flist; 2 process the files in flist (according to sopt); When defined flist is under the responsability the caller. If avgsz > 0 it is used for the final update of the dataset global counters. If 'mss' is defined use it to initialize the stager (instead of the Url in the; TFileInfo objects). If maxfiles > 0, select for processing a maximum of 'filesmax' files (but if fopt is 1 or 2; all files marked as 'staged' are still open or touched). Return code; 1 dataset was not changed; 2 dataset was changed. The number of touched, opened and disappeared files are returned in the respective; variables, if these are defined. Int_t ScanFile(TFileInfo* fileinfo, Bool_t notify); Open the file described by 'fileinfo' to extract the relevant meta-information.; Return 0 if OK, -2 if the file cannot be open, -1 if it is corrupted. Int_t FillMetaData(TFileInfo* fi, TDirectory* d, const char* rdir = ""/""); Navigate the directory 'd' (and its subdirectories) looking for TTree objects.; Fill in the relevant metadata information in 'fi'. The name of the TFileInfoMeta; metadata entry will be ""/dir1/dir2/.../tree_name"".; Return 0 on success, -1 if any problem happens (object found in keys cannot be read,; for example). TList * ParseDataSetSrvMaps(const TString& srvmaps); Create a server mapping list from the content of 'srvmaps'; Return the list (owned by the caller) or 0 if no valid info could be found). TList * GetDataSetSrvMaps(); Static getter for server mapping list. Bool_t CheckDataSetSrvMaps(TUrl* furl, TString& fn, TList* srvmaplist = 0); Check if the dat",MatchSource.WIKI,root/html532/TDataSetManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManager.html
https://root.cern/root/html532/TDataSetManager.html:14221,Performance,cache,cached,14221,", const char* dsName, TFileCollection* dataset). Gets quota information from this dataset. void ShowQuota(const char* opt); Display quota information. void PrintUsedSpace(). Prints the quota. void MonitorUsedSpace(TVirtualMonitoringWriter* monitoring). Log info to the monitoring server. Long64_t GetGroupUsed(const char* group). Returns the used space of that group. Long64_t GetGroupQuota(const char* group). returns the quota a group is allowed to have. void UpdateUsedSpace(); updates the used space maps. Int_t RegisterDataSet(const char* uri, TFileCollection* dataSet, const char* opt); Register a dataset, perfoming quota checkings, if needed.; Returns 0 on success, -1 on failure. Int_t NotifyUpdate(const char* group = 0, const char* user = 0, const char* dspath = 0, Long_t mtime = 0, const char* checksum = 0); Save into the <datasetdir>/dataset.list file the name of the last updated; or created or modified dataset; Returns 0 on success, -1 on error. Int_t ClearCache(const char* uri); Clear cached information matching uri. Int_t ShowCache(const char* uri); Show cached information matching uri. TString CreateUri(const char* dsGroup = 0, const char* dsUser = 0, const char* dsName = 0, const char* dsTree = 0); Creates URI for the dataset manger in the form '[[/dsGroup/]dsUser/]dsName[#dsObjPath]',; The optional dsObjPath can be in the form [subdir/]objname]'. Bool_t ParseUri(const char* uri, TString* dsGroup = 0, TString* dsUser = 0, TString* dsName = 0, TString* dsTree = 0, Bool_t onlyCurrent = kFALSE, Bool_t wildcards = kFALSE); Parses a (relative) URI that describes a DataSet on the cluster.; The input 'uri' should be in the form '[[/group/]user/]dsname[#[subdir/]objname]',; where 'objname' is the name of the object (e.g. the tree name) and the 'subdir'; is the directory in the file wher it should be looked for.; After resolving against a base URI consisting of proof://masterhost/group/user; - meaning masterhost, group and user of the current session -; the path is c",MatchSource.WIKI,root/html532/TDataSetManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManager.html
https://root.cern/root/html532/TDataSetManager.html:14293,Performance,cache,cached,14293,"rom this dataset. void ShowQuota(const char* opt); Display quota information. void PrintUsedSpace(). Prints the quota. void MonitorUsedSpace(TVirtualMonitoringWriter* monitoring). Log info to the monitoring server. Long64_t GetGroupUsed(const char* group). Returns the used space of that group. Long64_t GetGroupQuota(const char* group). returns the quota a group is allowed to have. void UpdateUsedSpace(); updates the used space maps. Int_t RegisterDataSet(const char* uri, TFileCollection* dataSet, const char* opt); Register a dataset, perfoming quota checkings, if needed.; Returns 0 on success, -1 on failure. Int_t NotifyUpdate(const char* group = 0, const char* user = 0, const char* dspath = 0, Long_t mtime = 0, const char* checksum = 0); Save into the <datasetdir>/dataset.list file the name of the last updated; or created or modified dataset; Returns 0 on success, -1 on error. Int_t ClearCache(const char* uri); Clear cached information matching uri. Int_t ShowCache(const char* uri); Show cached information matching uri. TString CreateUri(const char* dsGroup = 0, const char* dsUser = 0, const char* dsName = 0, const char* dsTree = 0); Creates URI for the dataset manger in the form '[[/dsGroup/]dsUser/]dsName[#dsObjPath]',; The optional dsObjPath can be in the form [subdir/]objname]'. Bool_t ParseUri(const char* uri, TString* dsGroup = 0, TString* dsUser = 0, TString* dsName = 0, TString* dsTree = 0, Bool_t onlyCurrent = kFALSE, Bool_t wildcards = kFALSE); Parses a (relative) URI that describes a DataSet on the cluster.; The input 'uri' should be in the form '[[/group/]user/]dsname[#[subdir/]objname]',; where 'objname' is the name of the object (e.g. the tree name) and the 'subdir'; is the directory in the file wher it should be looked for.; After resolving against a base URI consisting of proof://masterhost/group/user; - meaning masterhost, group and user of the current session -; the path is checked to contain exactly three elements separated by '/':; group/user/ds",MatchSource.WIKI,root/html532/TDataSetManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManager.html
https://root.cern/root/html532/TDataSetManager.html:17234,Performance,cache,cache,17234,"RL. void ShowDataSets(const char* uri = ""*"", const char* opt = """"); Prints formatted information about the dataset 'uri'.; The type and format of output is driven by 'opt':. 1. opt = ""server:srv1[,srv2[,srv3[,...]]]""; Print info about the subsets of 'uri' on servers srv1, srv2, ...; 2. opt = ""servers[:exclude:srv1[,srv2[,srv3[,...]]]]""; Print info about the subsets of 'uri' on all servers, except; the ones in the exclude list srv1, srv2, ...; 3. opt = <any>; Print info about all datasets matching 'uri'. If 'opt' contains 'full:' the list of files in the datasets are also printed.; In case 3. this is enabled only if 'uri' matches a single dataset. In case 3, if 'opt' contains; 'full:' the list of files in the datasets are also printed.; 'forcescan:' the dataset are open to get the information; otherwise the; pre-processed information is used.; 'noheader:' the labelling header is not printed; usefull when to chain; several printouts; 'noupdate:' do not update the cache (which may be slow on very remote; servers); 'refresh:' refresh the information (requires appropriate credentials;; typically it can be done only for owned datasets). Int_t ScanDataSet(TFileCollection* dataset, Int_t fopt, Int_t sopt = 0, Int_t ropt = 0, Bool_t dbg = kFALSE, Int_t* touched = 0, Int_t* opened = 0, Int_t* disappeared = 0, TList* flist = 0, Long64_t avgsz = -1, const char* mss = 0, Int_t maxfiles = -1, const char* stageopts = 0); Go through the files in the specified dataset, selecting files according to; 'fopt' and doing on these files the actions described by 'sopt'.; If required, the information in 'dataset' is updated. The int fopt controls which files have to be processed (or added to the list; if ropt is 1 - see below); 'fopt' is defined in term of csopt and fsopt:; fopt = sign(fsopt) * csopt * 100 + fsopt; where 'fsopt' controls the actual selection; -1 all files in the dataset; 0 process only files marked as 'non-staged'; >=1 as 0 but files that are marked 'staged' are open; >=2 as ",MatchSource.WIKI,root/html532/TDataSetManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManager.html
https://root.cern/root/html532/TDataSetManager.html:19419,Performance,perform,performed,19419,"leStager; 1 do not hard check the staged status; (example: use fopt = -101 to check the staged status of all the files, or fopt = 110; to re-check the stage status of all the files marked as staged). If 'dbg' is true, some information about the ongoing operations is reguraly; printed; this can be useful when processing very large datasets, an operation; which can take a very long time. The int 'sopt' controls what is done on the selected files (this is effective only; if ropt is 0 or 2 - see below):; -1 no action (fopt = 2 and sopt = -1 touches all staged files); 0 do the full process: open the files and fill the meta-information; in the TFileInfo object, including the end-point URL; 1 only locate the files, by updating the end-point URL (uses TFileStager::Locate; which is must faster of an TFile::Open); 2 issue a stage request on the files. The int 'ropt' controls which actions are performed:; 0 do the full process: get list of files to process and process them; 1 get the list of files to be scanned and return it in flist; 2 process the files in flist (according to sopt); When defined flist is under the responsability the caller. If avgsz > 0 it is used for the final update of the dataset global counters. If 'mss' is defined use it to initialize the stager (instead of the Url in the; TFileInfo objects). If maxfiles > 0, select for processing a maximum of 'filesmax' files (but if fopt is 1 or 2; all files marked as 'staged' are still open or touched). Return code; 1 dataset was not changed; 2 dataset was changed. The number of touched, opened and disappeared files are returned in the respective; variables, if these are defined. Int_t ScanFile(TFileInfo* fileinfo, Bool_t notify); Open the file described by 'fileinfo' to extract the relevant meta-information.; Return 0 if OK, -2 if the file cannot be open, -1 if it is corrupted. Int_t FillMetaData(TFileInfo* fi, TDirectory* d, const char* rdir = ""/""); Navigate the directory 'd' (and its subdirectories) looking for TTre",MatchSource.WIKI,root/html532/TDataSetManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManager.html
https://root.cern/root/html532/TDataSetManager.html:3190,Security,Hash,Hash,3190," const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Long64_tGetAvgFileSize() const; virtual TFileCollection*GetDataSet(const char* uri, const char* server = 0); virtual TMap*GetDataSets(const char* uri, UInt_t = TDataSetManager::kExport); static TList*GetDataSetSrvMaps(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long64_tGetGroupQuota(const char* group); virtual TMap*GetGroupQuotaMap(); virtual Long64_tGetGroupUsed(const char* group); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TMap*GetSubDataSets(const char* uri, const char* excludeservers); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidMonitorUsedSpace(TVirtualMonitoringWriter* monitoring); virtual Bool_tTObject::Notify(); virtual Int_tNotifyUpdate(const char* group = 0, const char* user = 0, const char* dspath = 0, Long_t mtime = 0, const char* checksum = 0); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator de",MatchSource.WIKI,root/html532/TDataSetManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManager.html
https://root.cern/root/html532/TDataSetManager.html:4047,Security,checksum,checksum,4047,"::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidMonitorUsedSpace(TVirtualMonitoringWriter* monitoring); virtual Bool_tTObject::Notify(); virtual Int_tNotifyUpdate(const char* group = 0, const char* user = 0, const char* dspath = 0, Long_t mtime = 0, const char* checksum = 0); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); static TList*ParseDataSetSrvMaps(const TString& srvmaps); virtual voidParseInitOpts(const char* opts); Bool_tParseUri(const char* uri, TString* dsGroup = 0, TString* dsUser = 0, TString* dsName = 0, TString* dsTree = 0, Bool_t onlyCurrent = kFALSE, Bool_t wildcards = kFALSE); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemov",MatchSource.WIKI,root/html532/TDataSetManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManager.html
https://root.cern/root/html532/TDataSetManager.html:14023,Security,checksum,checksum,14023,"i> and returns the number of missing files.; Returns -1 if any failure occurs.; For more details, see documentation of; ScanDataSet(TFileCollection *dataset, const char *option). void GetQuota(const char* group, const char* user, const char* dsName, TFileCollection* dataset). Gets quota information from this dataset. void ShowQuota(const char* opt); Display quota information. void PrintUsedSpace(). Prints the quota. void MonitorUsedSpace(TVirtualMonitoringWriter* monitoring). Log info to the monitoring server. Long64_t GetGroupUsed(const char* group). Returns the used space of that group. Long64_t GetGroupQuota(const char* group). returns the quota a group is allowed to have. void UpdateUsedSpace(); updates the used space maps. Int_t RegisterDataSet(const char* uri, TFileCollection* dataSet, const char* opt); Register a dataset, perfoming quota checkings, if needed.; Returns 0 on success, -1 on failure. Int_t NotifyUpdate(const char* group = 0, const char* user = 0, const char* dspath = 0, Long_t mtime = 0, const char* checksum = 0); Save into the <datasetdir>/dataset.list file the name of the last updated; or created or modified dataset; Returns 0 on success, -1 on error. Int_t ClearCache(const char* uri); Clear cached information matching uri. Int_t ShowCache(const char* uri); Show cached information matching uri. TString CreateUri(const char* dsGroup = 0, const char* dsUser = 0, const char* dsName = 0, const char* dsTree = 0); Creates URI for the dataset manger in the form '[[/dsGroup/]dsUser/]dsName[#dsObjPath]',; The optional dsObjPath can be in the form [subdir/]objname]'. Bool_t ParseUri(const char* uri, TString* dsGroup = 0, TString* dsUser = 0, TString* dsName = 0, TString* dsTree = 0, Bool_t onlyCurrent = kFALSE, Bool_t wildcards = kFALSE); Parses a (relative) URI that describes a DataSet on the cluster.; The input 'uri' should be in the form '[[/group/]user/]dsname[#[subdir/]objname]',; where 'objname' is the name of the object (e.g. the tree name) and the",MatchSource.WIKI,root/html532/TDataSetManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManager.html
https://root.cern/root/html532/TDataSetManager.html:6573,Testability,Test,TestBit,6573,":Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Int_tRegisterDataSet(const char* uri, TFileCollection* dataSet, const char* opt); virtual Bool_tRemoveDataSet(const char* uri); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); Int_tScanDataSet(const char* uri, const char* opt); virtual Int_tScanDataSet(const char* uri, UInt_t option = kReopen|kDebug); static Int_tScanDataSet(TFileCollection* dataset, Int_t fopt, Int_t sopt = 0, Int_t ropt = 0, Bool_t dbg = kFALSE, Int_t* touched = 0, Int_t* opened = 0, Int_t* disappeared = 0, TList* flist = 0, Long64_t avgsz = -1, const char* mss = 0, Int_t maxfiles = -1, const char* stageopts = 0); static Int_tScanFile(TFileInfo* fileinfo, Bool_t notify); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidSetScanCounters(Int_t t = -1, Int_t o = -1, Int_t d = -1); virtual voidTObject::SetUniqueID(UInt_t uid); virtual Int_tShowCache(const char* uri); virtual voidShowDataSets(const char* uri = ""*"", const char* opt = """"); virtual voidShowMembers(TMemberInspector& insp); virtual voidShowQuota(const char* opt); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TDataSetManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManager.html
https://root.cern/root/html532/TDataSetManager.html:6612,Testability,Test,TestBits,6612,":Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Int_tRegisterDataSet(const char* uri, TFileCollection* dataSet, const char* opt); virtual Bool_tRemoveDataSet(const char* uri); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); Int_tScanDataSet(const char* uri, const char* opt); virtual Int_tScanDataSet(const char* uri, UInt_t option = kReopen|kDebug); static Int_tScanDataSet(TFileCollection* dataset, Int_t fopt, Int_t sopt = 0, Int_t ropt = 0, Bool_t dbg = kFALSE, Int_t* touched = 0, Int_t* opened = 0, Int_t* disappeared = 0, TList* flist = 0, Long64_t avgsz = -1, const char* mss = 0, Int_t maxfiles = -1, const char* stageopts = 0); static Int_tScanFile(TFileInfo* fileinfo, Bool_t notify); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidSetScanCounters(Int_t t = -1, Int_t o = -1, Int_t d = -1); virtual voidTObject::SetUniqueID(UInt_t uid); virtual Int_tShowCache(const char* uri); virtual voidShowDataSets(const char* uri = ""*"", const char* opt = """"); virtual voidShowMembers(TMemberInspector& insp); virtual voidShowQuota(const char* opt); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html532/TDataSetManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManager.html
https://root.cern/root/html532/TDataSetManager.html:13469,Testability,Log,Log,13469,"the actual stage status on selected files. 'process' field:; N, noaction: do nothing on the selected files; P, fullproc: open the selected files and extract the meta information; L, locateonly: only locate the selected files; S, stageonly: issue a stage request for the selected files not yet staged. 'auxilliary' field; V, verbose: notify the actions. Returns 0 on success, -1 if any failure occurs. Int_t ScanDataSet(const char* uri, UInt_t option = kReopen|kDebug); Scans the dataset indicated by <uri> and returns the number of missing files.; Returns -1 if any failure occurs.; For more details, see documentation of; ScanDataSet(TFileCollection *dataset, const char *option). void GetQuota(const char* group, const char* user, const char* dsName, TFileCollection* dataset). Gets quota information from this dataset. void ShowQuota(const char* opt); Display quota information. void PrintUsedSpace(). Prints the quota. void MonitorUsedSpace(TVirtualMonitoringWriter* monitoring). Log info to the monitoring server. Long64_t GetGroupUsed(const char* group). Returns the used space of that group. Long64_t GetGroupQuota(const char* group). returns the quota a group is allowed to have. void UpdateUsedSpace(); updates the used space maps. Int_t RegisterDataSet(const char* uri, TFileCollection* dataSet, const char* opt); Register a dataset, perfoming quota checkings, if needed.; Returns 0 on success, -1 on failure. Int_t NotifyUpdate(const char* group = 0, const char* user = 0, const char* dspath = 0, Long_t mtime = 0, const char* checksum = 0); Save into the <datasetdir>/dataset.list file the name of the last updated; or created or modified dataset; Returns 0 on success, -1 on error. Int_t ClearCache(const char* uri); Clear cached information matching uri. Int_t ShowCache(const char* uri); Show cached information matching uri. TString CreateUri(const char* dsGroup = 0, const char* dsUser = 0, const char* dsName = 0, const char* dsTree = 0); Creates URI for the dataset manger in the fo",MatchSource.WIKI,root/html532/TDataSetManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManager.html
https://root.cern/root/html532/TDataSetManager.html:942,Usability,Clear,Clear,942," TDataSetManager(const char* group = 0, const char* user = 0, const char* options = 0); virtual~TDataSetManager(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static Bool_tCheckDataSetSrvMaps(TUrl* furl, TString& fn, TList* srvmaplist = 0); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual Int_tClearCache(const char* uri); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; static TStringCreateUri(const char* dsGroup = 0, const char* dsUser = 0, const char* dsName = 0, const char* dsTree = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Bool_tExistsDataSet(const char* uri); virtual voidTObj",MatchSource.WIKI,root/html532/TDataSetManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManager.html
https://root.cern/root/html532/TDataSetManager.html:14186,Usability,Clear,ClearCache,14186,", const char* dsName, TFileCollection* dataset). Gets quota information from this dataset. void ShowQuota(const char* opt); Display quota information. void PrintUsedSpace(). Prints the quota. void MonitorUsedSpace(TVirtualMonitoringWriter* monitoring). Log info to the monitoring server. Long64_t GetGroupUsed(const char* group). Returns the used space of that group. Long64_t GetGroupQuota(const char* group). returns the quota a group is allowed to have. void UpdateUsedSpace(); updates the used space maps. Int_t RegisterDataSet(const char* uri, TFileCollection* dataSet, const char* opt); Register a dataset, perfoming quota checkings, if needed.; Returns 0 on success, -1 on failure. Int_t NotifyUpdate(const char* group = 0, const char* user = 0, const char* dspath = 0, Long_t mtime = 0, const char* checksum = 0); Save into the <datasetdir>/dataset.list file the name of the last updated; or created or modified dataset; Returns 0 on success, -1 on error. Int_t ClearCache(const char* uri); Clear cached information matching uri. Int_t ShowCache(const char* uri); Show cached information matching uri. TString CreateUri(const char* dsGroup = 0, const char* dsUser = 0, const char* dsName = 0, const char* dsTree = 0); Creates URI for the dataset manger in the form '[[/dsGroup/]dsUser/]dsName[#dsObjPath]',; The optional dsObjPath can be in the form [subdir/]objname]'. Bool_t ParseUri(const char* uri, TString* dsGroup = 0, TString* dsUser = 0, TString* dsName = 0, TString* dsTree = 0, Bool_t onlyCurrent = kFALSE, Bool_t wildcards = kFALSE); Parses a (relative) URI that describes a DataSet on the cluster.; The input 'uri' should be in the form '[[/group/]user/]dsname[#[subdir/]objname]',; where 'objname' is the name of the object (e.g. the tree name) and the 'subdir'; is the directory in the file wher it should be looked for.; After resolving against a base URI consisting of proof://masterhost/group/user; - meaning masterhost, group and user of the current session -; the path is c",MatchSource.WIKI,root/html532/TDataSetManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManager.html
https://root.cern/root/html532/TDataSetManager.html:14215,Usability,Clear,Clear,14215,", const char* dsName, TFileCollection* dataset). Gets quota information from this dataset. void ShowQuota(const char* opt); Display quota information. void PrintUsedSpace(). Prints the quota. void MonitorUsedSpace(TVirtualMonitoringWriter* monitoring). Log info to the monitoring server. Long64_t GetGroupUsed(const char* group). Returns the used space of that group. Long64_t GetGroupQuota(const char* group). returns the quota a group is allowed to have. void UpdateUsedSpace(); updates the used space maps. Int_t RegisterDataSet(const char* uri, TFileCollection* dataSet, const char* opt); Register a dataset, perfoming quota checkings, if needed.; Returns 0 on success, -1 on failure. Int_t NotifyUpdate(const char* group = 0, const char* user = 0, const char* dspath = 0, Long_t mtime = 0, const char* checksum = 0); Save into the <datasetdir>/dataset.list file the name of the last updated; or created or modified dataset; Returns 0 on success, -1 on error. Int_t ClearCache(const char* uri); Clear cached information matching uri. Int_t ShowCache(const char* uri); Show cached information matching uri. TString CreateUri(const char* dsGroup = 0, const char* dsUser = 0, const char* dsName = 0, const char* dsTree = 0); Creates URI for the dataset manger in the form '[[/dsGroup/]dsUser/]dsName[#dsObjPath]',; The optional dsObjPath can be in the form [subdir/]objname]'. Bool_t ParseUri(const char* uri, TString* dsGroup = 0, TString* dsUser = 0, TString* dsName = 0, TString* dsTree = 0, Bool_t onlyCurrent = kFALSE, Bool_t wildcards = kFALSE); Parses a (relative) URI that describes a DataSet on the cluster.; The input 'uri' should be in the form '[[/group/]user/]dsname[#[subdir/]objname]',; where 'objname' is the name of the object (e.g. the tree name) and the 'subdir'; is the directory in the file wher it should be looked for.; After resolving against a base URI consisting of proof://masterhost/group/user; - meaning masterhost, group and user of the current session -; the path is c",MatchSource.WIKI,root/html532/TDataSetManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManager.html
https://root.cern/root/html532/TDataSetManagerFile.html:1722,Availability,Error,Error,1722,"ject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static Bool_tTDataSetManager::CheckDataSetSrvMaps(TUrl* furl, TString& fn, TList* srvmaplist = 0); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual Int_tClearCache(const char* uri = 0); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; static TStringTDataSetManager::CreateUri(const char* dsGroup = 0, const char* dsUser = 0, const char* dsName = 0, const char* dsTree = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Bool_tExistsDataSet(const char* uri); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; static Int_tTDataSetManager::FillMetaData(TFileInfo* fi, TDirectory* d, const char* rdir = ""/""); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Long64_tTDataSetManager::GetAvgFileSize() const; virtual TFileCollection*GetDataSet(const char* uri, const char* srv = 0); TFileCollection*GetDataSet(const char* group, const char* user, const char* dsName, UInt_t option = 0, TMD5** checksum = 0); virtual TMap*GetDataSets(const char* uri, UInt_t option = TDataSetManager::kExport); TMap*GetDataSets(const char*",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:1851,Availability,error,error,1851,"ps(TUrl* furl, TString& fn, TList* srvmaplist = 0); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual Int_tClearCache(const char* uri = 0); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; static TStringTDataSetManager::CreateUri(const char* dsGroup = 0, const char* dsUser = 0, const char* dsName = 0, const char* dsTree = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Bool_tExistsDataSet(const char* uri); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; static Int_tTDataSetManager::FillMetaData(TFileInfo* fi, TDirectory* d, const char* rdir = ""/""); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Long64_tTDataSetManager::GetAvgFileSize() const; virtual TFileCollection*GetDataSet(const char* uri, const char* srv = 0); TFileCollection*GetDataSet(const char* group, const char* user, const char* dsName, UInt_t option = 0, TMD5** checksum = 0); virtual TMap*GetDataSets(const char* uri, UInt_t option = TDataSetManager::kExport); TMap*GetDataSets(const char* group, const char* user, const char* dsName = 0, UInt_t option = 0); static TList*TDataSetManager::GetDataSetSrvMaps(); virtual ",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:1935,Availability,error,error,1935,"onst char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual Int_tClearCache(const char* uri = 0); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; static TStringTDataSetManager::CreateUri(const char* dsGroup = 0, const char* dsUser = 0, const char* dsName = 0, const char* dsTree = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Bool_tExistsDataSet(const char* uri); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; static Int_tTDataSetManager::FillMetaData(TFileInfo* fi, TDirectory* d, const char* rdir = ""/""); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Long64_tTDataSetManager::GetAvgFileSize() const; virtual TFileCollection*GetDataSet(const char* uri, const char* srv = 0); TFileCollection*GetDataSet(const char* group, const char* user, const char* dsName, UInt_t option = 0, TMD5** checksum = 0); virtual TMap*GetDataSets(const char* uri, UInt_t option = TDataSetManager::kExport); TMap*GetDataSets(const char* group, const char* user, const char* dsName = 0, UInt_t option = 0); static TList*TDataSetManager::GetDataSetSrvMaps(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtua",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:12363,Availability,avail,available,12363,"; Bool_tfIsRemoteTrue if the repository is remote; TStringfListFileFile to check repository updates; TStringfLocalCacheDirLocal cache when the repository is remote; Int_tfLockFileTimeLimitLimit in seconds after a lock automatically expires; TStringfMSSUrlURL for the Mass Storage System; TStringfStageOptsOption string to be used in issuing staging requests; Bool_tfUseCacheTrue if the cache is used for browsing remote repositories. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDataSetManagerFile(const char* group, const char* user, const char* ins). Main constructor. TDataSetManagerFile(const char* ins). Main constructor. void Init(); Do the real inititialization. void InitLocalCache(); Init the local cache if required. void ParseInitOpts(const char* opts); Parse the input string and set the init bits accordingly; Format is; dir:<datasetdir> [mss:<mss-url>] [opt:<base-options>]; The <datasetdir> is mandatory.; See TDataSetManager::ParseInitOpts for the available; base options.; The base options are laready initialized by the base constructor. const char * GetDataSetPath(const char* group, const char* user, const char* dsName, TString& md5path, Bool_t local = kFALSE); Returns path of the indicated dataset. The extension is '.root' for all files; except for 'dsName==ls' which have extension '.txt'.; If 'local' is kTRUE the local cache path is returned instead in the form; <cachedir>/<group>.<user>.<dsName>.<ext>.; NB: contains a static TString for result, so copy result before using twice. Int_t NotifyUpdate(const char* group, const char* user, const char* dspath, Long_t mtime, const char* checksum = 0); Save into the <datasetdir>/kDataSet_DataSetList file the name of the updated; or created or modified dataset. For still existing datasets, fill the; modification date in seconds anf the checksum.; Returns 0 on success, -1 on error. Int_t CreateLsFile(const char* group, const char* user, Long_t& mtime, TString& checksum); Crea",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:13251,Availability,error,error,13251,"atasetdir> [mss:<mss-url>] [opt:<base-options>]; The <datasetdir> is mandatory.; See TDataSetManager::ParseInitOpts for the available; base options.; The base options are laready initialized by the base constructor. const char * GetDataSetPath(const char* group, const char* user, const char* dsName, TString& md5path, Bool_t local = kFALSE); Returns path of the indicated dataset. The extension is '.root' for all files; except for 'dsName==ls' which have extension '.txt'.; If 'local' is kTRUE the local cache path is returned instead in the form; <cachedir>/<group>.<user>.<dsName>.<ext>.; NB: contains a static TString for result, so copy result before using twice. Int_t NotifyUpdate(const char* group, const char* user, const char* dspath, Long_t mtime, const char* checksum = 0); Save into the <datasetdir>/kDataSet_DataSetList file the name of the updated; or created or modified dataset. For still existing datasets, fill the; modification date in seconds anf the checksum.; Returns 0 on success, -1 on error. Int_t CreateLsFile(const char* group, const char* user, Long_t& mtime, TString& checksum); Create or recreate the dataset lists for 'uri'.; The list are saved in text form in 'uri'/ls.txt for fast browsing and in; 'uri'/ls.root in form of TMacro for optimized and portable transfer.; Return 0 on success, 1 if the file was empty, -1 on error. Bool_t BrowseDataSets(const char* group, const char* user, const char* dsName, UInt_t option, TObject* target); Adds the dataset in the folder of group, user to the list in target.; If dsName is defined, only the information about the specified dataset; is processed. The unsigned int 'option' is forwarded to GetDataSet and BrowseDataSet.; Available options (to be .or.ed):; kPrint print the dataset content; kQuotaUpdate update quotas; kExport use export naming; kList get a list of dataset names. NB1: options ""kPrint"", ""kQuoatUpdate"" and ""kExport"" are mutually exclusive; NB2: for options ""kPrint"" and ""kQuotaUpdate"" return is null. T",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:13594,Availability,error,error,13594," = kFALSE); Returns path of the indicated dataset. The extension is '.root' for all files; except for 'dsName==ls' which have extension '.txt'.; If 'local' is kTRUE the local cache path is returned instead in the form; <cachedir>/<group>.<user>.<dsName>.<ext>.; NB: contains a static TString for result, so copy result before using twice. Int_t NotifyUpdate(const char* group, const char* user, const char* dspath, Long_t mtime, const char* checksum = 0); Save into the <datasetdir>/kDataSet_DataSetList file the name of the updated; or created or modified dataset. For still existing datasets, fill the; modification date in seconds anf the checksum.; Returns 0 on success, -1 on error. Int_t CreateLsFile(const char* group, const char* user, Long_t& mtime, TString& checksum); Create or recreate the dataset lists for 'uri'.; The list are saved in text form in 'uri'/ls.txt for fast browsing and in; 'uri'/ls.root in form of TMacro for optimized and portable transfer.; Return 0 on success, 1 if the file was empty, -1 on error. Bool_t BrowseDataSets(const char* group, const char* user, const char* dsName, UInt_t option, TObject* target); Adds the dataset in the folder of group, user to the list in target.; If dsName is defined, only the information about the specified dataset; is processed. The unsigned int 'option' is forwarded to GetDataSet and BrowseDataSet.; Available options (to be .or.ed):; kPrint print the dataset content; kQuotaUpdate update quotas; kExport use export naming; kList get a list of dataset names. NB1: options ""kPrint"", ""kQuoatUpdate"" and ""kExport"" are mutually exclusive; NB2: for options ""kPrint"" and ""kQuotaUpdate"" return is null. TMap * GetDataSets(const char* group, const char* user, const char* dsName = 0, UInt_t option = 0); General purpose call to go through the existing datasets.; If <user> is 0 or ""*"", act on all datasets for the given <group>.; If <group> is 0 or ""*"", act on all datasets.; If <dsName> is defined, only the information about the speci",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:13942,Availability,Avail,Available,13942,"har* user, const char* dspath, Long_t mtime, const char* checksum = 0); Save into the <datasetdir>/kDataSet_DataSetList file the name of the updated; or created or modified dataset. For still existing datasets, fill the; modification date in seconds anf the checksum.; Returns 0 on success, -1 on error. Int_t CreateLsFile(const char* group, const char* user, Long_t& mtime, TString& checksum); Create or recreate the dataset lists for 'uri'.; The list are saved in text form in 'uri'/ls.txt for fast browsing and in; 'uri'/ls.root in form of TMacro for optimized and portable transfer.; Return 0 on success, 1 if the file was empty, -1 on error. Bool_t BrowseDataSets(const char* group, const char* user, const char* dsName, UInt_t option, TObject* target); Adds the dataset in the folder of group, user to the list in target.; If dsName is defined, only the information about the specified dataset; is processed. The unsigned int 'option' is forwarded to GetDataSet and BrowseDataSet.; Available options (to be .or.ed):; kPrint print the dataset content; kQuotaUpdate update quotas; kExport use export naming; kList get a list of dataset names. NB1: options ""kPrint"", ""kQuoatUpdate"" and ""kExport"" are mutually exclusive; NB2: for options ""kPrint"" and ""kQuotaUpdate"" return is null. TMap * GetDataSets(const char* group, const char* user, const char* dsName = 0, UInt_t option = 0); General purpose call to go through the existing datasets.; If <user> is 0 or ""*"", act on all datasets for the given <group>.; If <group> is 0 or ""*"", act on all datasets.; If <dsName> is defined, only the information about the specified dataset; is processed.; Action depends on option; available options:. kExport Return a TMap object containing all the information about; datasets in the form:; { <group>, <map of users> }; |; { <map of datasets>, <dataset>}; (<dataset> are TFileCollection objects); kShowDefault as kExport with in addition a default selection including; the datasets from the current user, the o",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:14625,Availability,avail,available,14625,"ts(const char* group, const char* user, const char* dsName, UInt_t option, TObject* target); Adds the dataset in the folder of group, user to the list in target.; If dsName is defined, only the information about the specified dataset; is processed. The unsigned int 'option' is forwarded to GetDataSet and BrowseDataSet.; Available options (to be .or.ed):; kPrint print the dataset content; kQuotaUpdate update quotas; kExport use export naming; kList get a list of dataset names. NB1: options ""kPrint"", ""kQuoatUpdate"" and ""kExport"" are mutually exclusive; NB2: for options ""kPrint"" and ""kQuotaUpdate"" return is null. TMap * GetDataSets(const char* group, const char* user, const char* dsName = 0, UInt_t option = 0); General purpose call to go through the existing datasets.; If <user> is 0 or ""*"", act on all datasets for the given <group>.; If <group> is 0 or ""*"", act on all datasets.; If <dsName> is defined, only the information about the specified dataset; is processed.; Action depends on option; available options:. kExport Return a TMap object containing all the information about; datasets in the form:; { <group>, <map of users> }; |; { <map of datasets>, <dataset>}; (<dataset> are TFileCollection objects); kShowDefault as kExport with in addition a default selection including; the datasets from the current user, the ones from the group; and the common ones. kPrint print the dataset content; no output is returned; kList get a list of available dataset names; kForceScan Re-open files while processing kPrint (do not use the; pre-processed information); kNoHeaderPrint Labelling header is not printed; kQuotaUpdate update {group, user} quotas; no output is returned. NB1: options ""kPrint"", ""kQuoatUpdate"" and ""kExport"" are mutually exclusive; NB2: for options ""kPrint"" and ""kQuoatUpdate"" return is null. Int_t FillLsDataSet(const char* group, const char* user, const char* dsName, TList* out, UInt_t option); Check for the 'ls.txt' for 'group' and 'user' and fill the path for the; ls",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:15072,Availability,avail,available,15072,"ort"" are mutually exclusive; NB2: for options ""kPrint"" and ""kQuotaUpdate"" return is null. TMap * GetDataSets(const char* group, const char* user, const char* dsName = 0, UInt_t option = 0); General purpose call to go through the existing datasets.; If <user> is 0 or ""*"", act on all datasets for the given <group>.; If <group> is 0 or ""*"", act on all datasets.; If <dsName> is defined, only the information about the specified dataset; is processed.; Action depends on option; available options:. kExport Return a TMap object containing all the information about; datasets in the form:; { <group>, <map of users> }; |; { <map of datasets>, <dataset>}; (<dataset> are TFileCollection objects); kShowDefault as kExport with in addition a default selection including; the datasets from the current user, the ones from the group; and the common ones. kPrint print the dataset content; no output is returned; kList get a list of available dataset names; kForceScan Re-open files while processing kPrint (do not use the; pre-processed information); kNoHeaderPrint Labelling header is not printed; kQuotaUpdate update {group, user} quotas; no output is returned. NB1: options ""kPrint"", ""kQuoatUpdate"" and ""kExport"" are mutually exclusive; NB2: for options ""kPrint"" and ""kQuoatUpdate"" return is null. Int_t FillLsDataSet(const char* group, const char* user, const char* dsName, TList* out, UInt_t option); Check for the 'ls.txt' for 'group' and 'user' and fill the path for the; ls file in 'out'.; If 'dsname' is defined, open the file and extract the relevant line.; Return 0 on success, -1 on failure. TFileCollection * GetDataSet(const char* group, const char* user, const char* dsName, UInt_t option = 0, TMD5** checksum = 0). Returns the dataset <dsName> of user <user> in group <group> .; If checksum is non-zero, it will contain the pointer to a TMD5 sum object; with the checksum of the file, has to be deleted by the user.; If option has the bi kReadShort set, the shortobject is read, that does not;",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:15735,Availability,failure,failure,15735,"the form:; { <group>, <map of users> }; |; { <map of datasets>, <dataset>}; (<dataset> are TFileCollection objects); kShowDefault as kExport with in addition a default selection including; the datasets from the current user, the ones from the group; and the common ones. kPrint print the dataset content; no output is returned; kList get a list of available dataset names; kForceScan Re-open files while processing kPrint (do not use the; pre-processed information); kNoHeaderPrint Labelling header is not printed; kQuotaUpdate update {group, user} quotas; no output is returned. NB1: options ""kPrint"", ""kQuoatUpdate"" and ""kExport"" are mutually exclusive; NB2: for options ""kPrint"" and ""kQuoatUpdate"" return is null. Int_t FillLsDataSet(const char* group, const char* user, const char* dsName, TList* out, UInt_t option); Check for the 'ls.txt' for 'group' and 'user' and fill the path for the; ls file in 'out'.; If 'dsname' is defined, open the file and extract the relevant line.; Return 0 on success, -1 on failure. TFileCollection * GetDataSet(const char* group, const char* user, const char* dsName, UInt_t option = 0, TMD5** checksum = 0). Returns the dataset <dsName> of user <user> in group <group> .; If checksum is non-zero, it will contain the pointer to a TMD5 sum object; with the checksum of the file, has to be deleted by the user.; If option has the bi kReadShort set, the shortobject is read, that does not; contain the list of files. This is much faster. Int_t CheckLocalCache(const char* group, const char* user, const char* dsName = ""ls"", UInt_t option = 0); Check if the local cache information for group, user, dsName is up-to-date; If not, make the relevant updates; Return 0 if OK, 1 if the dataset does not exists anymore, -1 on failure. Int_t ClearCache(const char* uri = 0); Clear cached information matching uri. Int_t ShowCache(const char* uri = 0); Show cached information matching uri. Int_t WriteDataSet(const char* group, const char* user, const char* dsName, TFileCo",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:16479,Availability,failure,failure,16479,"and ""kExport"" are mutually exclusive; NB2: for options ""kPrint"" and ""kQuoatUpdate"" return is null. Int_t FillLsDataSet(const char* group, const char* user, const char* dsName, TList* out, UInt_t option); Check for the 'ls.txt' for 'group' and 'user' and fill the path for the; ls file in 'out'.; If 'dsname' is defined, open the file and extract the relevant line.; Return 0 on success, -1 on failure. TFileCollection * GetDataSet(const char* group, const char* user, const char* dsName, UInt_t option = 0, TMD5** checksum = 0). Returns the dataset <dsName> of user <user> in group <group> .; If checksum is non-zero, it will contain the pointer to a TMD5 sum object; with the checksum of the file, has to be deleted by the user.; If option has the bi kReadShort set, the shortobject is read, that does not; contain the list of files. This is much faster. Int_t CheckLocalCache(const char* group, const char* user, const char* dsName = ""ls"", UInt_t option = 0); Check if the local cache information for group, user, dsName is up-to-date; If not, make the relevant updates; Return 0 if OK, 1 if the dataset does not exists anymore, -1 on failure. Int_t ClearCache(const char* uri = 0); Clear cached information matching uri. Int_t ShowCache(const char* uri = 0); Show cached information matching uri. Int_t WriteDataSet(const char* group, const char* user, const char* dsName, TFileCollection* dataset, UInt_t option = 0, TMD5* checksum = 0). Writes indicated dataset.; If option has the bit kFileMustExist set, the file must still exist,; otherwise the new dataset is not written (returns 3 in this case).; If checksum is non-zero the files current checksum is checked against it,; if it does not match the file is not written (the function returns 2 in this; case, if the file has disappeared it is also not written (i.e. checksum; implies the bit kFileMustExist set in option).; Returns != 0 for success, 0 for error. Int_t ChecksumDataSet(const char* path, const char* md5path, TString& checksum);",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:17255,Availability,error,error,17255,"nst char* user, const char* dsName = ""ls"", UInt_t option = 0); Check if the local cache information for group, user, dsName is up-to-date; If not, make the relevant updates; Return 0 if OK, 1 if the dataset does not exists anymore, -1 on failure. Int_t ClearCache(const char* uri = 0); Clear cached information matching uri. Int_t ShowCache(const char* uri = 0); Show cached information matching uri. Int_t WriteDataSet(const char* group, const char* user, const char* dsName, TFileCollection* dataset, UInt_t option = 0, TMD5* checksum = 0). Writes indicated dataset.; If option has the bit kFileMustExist set, the file must still exist,; otherwise the new dataset is not written (returns 3 in this case).; If checksum is non-zero the files current checksum is checked against it,; if it does not match the file is not written (the function returns 2 in this; case, if the file has disappeared it is also not written (i.e. checksum; implies the bit kFileMustExist set in option).; Returns != 0 for success, 0 for error. Int_t ChecksumDataSet(const char* path, const char* md5path, TString& checksum); Calculate the checksum of the indicated dataset at 'path' and save it to the; appropriate file 'md5path'. The MD5 string is returned in 'md5sum'.; Return 0 on success, -1 on error. Bool_t RemoveDataSet(const char* group, const char* user, const char* dsName); Removes the indicated dataset. Bool_t ExistsDataSet(const char* group, const char* user, const char* dsName); Checks if the indicated dataset exits. Int_t RegisterDataSet(const char* uri, TFileCollection* dataSet, const char* opt); Register a dataset, perfoming quota checkings and verification, if required.; If a dataset with the same name already exists the action fails unless 'opts'; contains 'O', in which case the old dataset is overwritten, or contains 'U',; in which case 'newDataSet' is added to the existing dataset (duplications are; ignored, if any).; If 'opts' contains 'V' the dataset files are also verified (if the datase",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:17517,Availability,error,error,17517,"const char* uri = 0); Clear cached information matching uri. Int_t ShowCache(const char* uri = 0); Show cached information matching uri. Int_t WriteDataSet(const char* group, const char* user, const char* dsName, TFileCollection* dataset, UInt_t option = 0, TMD5* checksum = 0). Writes indicated dataset.; If option has the bit kFileMustExist set, the file must still exist,; otherwise the new dataset is not written (returns 3 in this case).; If checksum is non-zero the files current checksum is checked against it,; if it does not match the file is not written (the function returns 2 in this; case, if the file has disappeared it is also not written (i.e. checksum; implies the bit kFileMustExist set in option).; Returns != 0 for success, 0 for error. Int_t ChecksumDataSet(const char* path, const char* md5path, TString& checksum); Calculate the checksum of the indicated dataset at 'path' and save it to the; appropriate file 'md5path'. The MD5 string is returned in 'md5sum'.; Return 0 on success, -1 on error. Bool_t RemoveDataSet(const char* group, const char* user, const char* dsName); Removes the indicated dataset. Bool_t ExistsDataSet(const char* group, const char* user, const char* dsName); Checks if the indicated dataset exits. Int_t RegisterDataSet(const char* uri, TFileCollection* dataSet, const char* opt); Register a dataset, perfoming quota checkings and verification, if required.; If a dataset with the same name already exists the action fails unless 'opts'; contains 'O', in which case the old dataset is overwritten, or contains 'U',; in which case 'newDataSet' is added to the existing dataset (duplications are; ignored, if any).; If 'opts' contains 'V' the dataset files are also verified (if the dataset manager; is configured to allow so). By default the dataset is not verified.; If 'opts' contains 'T' the in the dataset object (status bits, meta,...); is trusted, i.e. not reset (if the dataset manager is configured to allow so).; Returns 0 on success, -1 on fai",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:18503,Availability,failure,failure,18503,"turn 0 on success, -1 on error. Bool_t RemoveDataSet(const char* group, const char* user, const char* dsName); Removes the indicated dataset. Bool_t ExistsDataSet(const char* group, const char* user, const char* dsName); Checks if the indicated dataset exits. Int_t RegisterDataSet(const char* uri, TFileCollection* dataSet, const char* opt); Register a dataset, perfoming quota checkings and verification, if required.; If a dataset with the same name already exists the action fails unless 'opts'; contains 'O', in which case the old dataset is overwritten, or contains 'U',; in which case 'newDataSet' is added to the existing dataset (duplications are; ignored, if any).; If 'opts' contains 'V' the dataset files are also verified (if the dataset manager; is configured to allow so). By default the dataset is not verified.; If 'opts' contains 'T' the in the dataset object (status bits, meta,...); is trusted, i.e. not reset (if the dataset manager is configured to allow so).; Returns 0 on success, -1 on failure. Int_t ScanDataSet(const char* uri, UInt_t option = kReopen|kDebug); Scans the dataset indicated by <uri> and returns the number of missing files.; Returns -1 if any failure occurs, >= 0 on success.; For more details, see documentation of; ScanDataSet(TFileCollection *dataset, const char *option). Int_t ScanDataSet(const char* group, const char* user, const char* dsName, UInt_t option = kReopen|kDebug); See documentation of ScanDataSet(TFileCollection *dataset, UInt_t option). TMap * GetDataSets(const char* uri, UInt_t option = TDataSetManager::kExport). Returns all datasets for the <group> and <user> specified by <uri>.; If <user> is 0, it returns all datasets for the given <group>.; If <group> is 0, it returns all datasets.; The returned TMap contains:; <group> --> <map of users> --> <map of datasets> --> <dataset> (TFileCollection). The unsigned int 'option' is forwarded to GetDataSet and BrowseDataSet.; Available options (to be .or.ed):; kShowDefault a default se",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:18677,Availability,failure,failure,18677,"r* user, const char* dsName); Checks if the indicated dataset exits. Int_t RegisterDataSet(const char* uri, TFileCollection* dataSet, const char* opt); Register a dataset, perfoming quota checkings and verification, if required.; If a dataset with the same name already exists the action fails unless 'opts'; contains 'O', in which case the old dataset is overwritten, or contains 'U',; in which case 'newDataSet' is added to the existing dataset (duplications are; ignored, if any).; If 'opts' contains 'V' the dataset files are also verified (if the dataset manager; is configured to allow so). By default the dataset is not verified.; If 'opts' contains 'T' the in the dataset object (status bits, meta,...); is trusted, i.e. not reset (if the dataset manager is configured to allow so).; Returns 0 on success, -1 on failure. Int_t ScanDataSet(const char* uri, UInt_t option = kReopen|kDebug); Scans the dataset indicated by <uri> and returns the number of missing files.; Returns -1 if any failure occurs, >= 0 on success.; For more details, see documentation of; ScanDataSet(TFileCollection *dataset, const char *option). Int_t ScanDataSet(const char* group, const char* user, const char* dsName, UInt_t option = kReopen|kDebug); See documentation of ScanDataSet(TFileCollection *dataset, UInt_t option). TMap * GetDataSets(const char* uri, UInt_t option = TDataSetManager::kExport). Returns all datasets for the <group> and <user> specified by <uri>.; If <user> is 0, it returns all datasets for the given <group>.; If <group> is 0, it returns all datasets.; The returned TMap contains:; <group> --> <map of users> --> <map of datasets> --> <dataset> (TFileCollection). The unsigned int 'option' is forwarded to GetDataSet and BrowseDataSet.; Available options (to be .or.ed):; kShowDefault a default selection is shown that include the ones from; the current user, the ones from the group and the common ones; kPrint print the dataset content; kQuotaUpdate update quotas; kExport use export na",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:19432,Availability,Avail,Available,19432,"r is configured to allow so).; Returns 0 on success, -1 on failure. Int_t ScanDataSet(const char* uri, UInt_t option = kReopen|kDebug); Scans the dataset indicated by <uri> and returns the number of missing files.; Returns -1 if any failure occurs, >= 0 on success.; For more details, see documentation of; ScanDataSet(TFileCollection *dataset, const char *option). Int_t ScanDataSet(const char* group, const char* user, const char* dsName, UInt_t option = kReopen|kDebug); See documentation of ScanDataSet(TFileCollection *dataset, UInt_t option). TMap * GetDataSets(const char* uri, UInt_t option = TDataSetManager::kExport). Returns all datasets for the <group> and <user> specified by <uri>.; If <user> is 0, it returns all datasets for the given <group>.; If <group> is 0, it returns all datasets.; The returned TMap contains:; <group> --> <map of users> --> <map of datasets> --> <dataset> (TFileCollection). The unsigned int 'option' is forwarded to GetDataSet and BrowseDataSet.; Available options (to be .or.ed):; kShowDefault a default selection is shown that include the ones from; the current user, the ones from the group and the common ones; kPrint print the dataset content; kQuotaUpdate update quotas; kExport use export naming. NB1: options ""kPrint"", ""kQuoatUpdate"" and ""kExport"" are mutually exclusive; NB2: for options ""kPrint"" and ""kQuoatUpdate"" return is null. TFileCollection * GetDataSet(const char* uri, const char* srv = 0); Utility function used in various methods for user dataset upload. Bool_t RemoveDataSet(const char* uri); Removes the indicated dataset. Bool_t ExistsDataSet(const char* uri); Checks if the indicated dataset exits. void UpdateUsedSpace(); updates the used space maps. const char * GetDataSetPath(const char* group, const char* user, const char* dsName). TDataSetManagerFile(); { }. virtual ~TDataSetManagerFile(); { }. const char * GetMSSUrl() const; { return fMSSUrl; }. const char * GetStageOpts() const; { return fStageOpts; }. » Author: Jan Fiete ",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:11251,Deployability,update,updated,11251,"ng_tTDataSetManager::fMTimeGroupConfigLast modification of the group config file; Int_tTDataSetManager::fNDisappearedFilesNumber of files disappared in the last ScanDataSet operation; Int_tTDataSetManager::fNOpenedFilesNumber of files opened in the last ScanDataSet operation; Int_tTDataSetManager::fNTouchedFilesNumber of files touched in the last ScanDataSet operation; TStringTDataSetManager::fUserOwner of the session; TMapTDataSetManager::fUserUsed<group> --> <map of users> --> <value>; static TStringTDataSetManager::fgCommonDataSetTagName for common datasets, default: COMMON; static TList*TDataSetManager::fgDataSetSrvMapsList of TPair(TRegexp, TObjString) for mapping server coordinates. private:. Int_tfCacheUpdatePeriodPeriod for checking for new updated information; TStringfDataSetDirLocation of datasets; TStringfDataSetLockFileDataset lock file; Bool_tfIsRemoteTrue if the repository is remote; TStringfListFileFile to check repository updates; TStringfLocalCacheDirLocal cache when the repository is remote; Int_tfLockFileTimeLimitLimit in seconds after a lock automatically expires; TStringfMSSUrlURL for the Mass Storage System; TStringfStageOptsOption string to be used in issuing staging requests; Bool_tfUseCacheTrue if the cache is used for browsing remote repositories. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDataSetManagerFile(const char* group, const char* user, const char* ins). Main constructor. TDataSetManagerFile(const char* ins). Main constructor. void Init(); Do the real inititialization. void InitLocalCache(); Init the local cache if required. void ParseInitOpts(const char* opts); Parse the input string and set the init bits accordingly; Format is; dir:<datasetdir> [mss:<mss-url>] [opt:<base-options>]; The <datasetdir> is mandatory.; See TDataSetManager::ParseInitOpts for the available; base options.; The base options are laready initialized by the base constructor. const char * GetDataSetPath(const cha",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:11444,Deployability,update,updates,11444,"ng_tTDataSetManager::fMTimeGroupConfigLast modification of the group config file; Int_tTDataSetManager::fNDisappearedFilesNumber of files disappared in the last ScanDataSet operation; Int_tTDataSetManager::fNOpenedFilesNumber of files opened in the last ScanDataSet operation; Int_tTDataSetManager::fNTouchedFilesNumber of files touched in the last ScanDataSet operation; TStringTDataSetManager::fUserOwner of the session; TMapTDataSetManager::fUserUsed<group> --> <map of users> --> <value>; static TStringTDataSetManager::fgCommonDataSetTagName for common datasets, default: COMMON; static TList*TDataSetManager::fgDataSetSrvMapsList of TPair(TRegexp, TObjString) for mapping server coordinates. private:. Int_tfCacheUpdatePeriodPeriod for checking for new updated information; TStringfDataSetDirLocation of datasets; TStringfDataSetLockFileDataset lock file; Bool_tfIsRemoteTrue if the repository is remote; TStringfListFileFile to check repository updates; TStringfLocalCacheDirLocal cache when the repository is remote; Int_tfLockFileTimeLimitLimit in seconds after a lock automatically expires; TStringfMSSUrlURL for the Mass Storage System; TStringfStageOptsOption string to be used in issuing staging requests; Bool_tfUseCacheTrue if the cache is used for browsing remote repositories. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDataSetManagerFile(const char* group, const char* user, const char* ins). Main constructor. TDataSetManagerFile(const char* ins). Main constructor. void Init(); Do the real inititialization. void InitLocalCache(); Init the local cache if required. void ParseInitOpts(const char* opts); Parse the input string and set the init bits accordingly; Format is; dir:<datasetdir> [mss:<mss-url>] [opt:<base-options>]; The <datasetdir> is mandatory.; See TDataSetManager::ParseInitOpts for the available; base options.; The base options are laready initialized by the base constructor. const char * GetDataSetPath(const cha",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:13095,Deployability,update,updated,13095,"tor. void Init(); Do the real inititialization. void InitLocalCache(); Init the local cache if required. void ParseInitOpts(const char* opts); Parse the input string and set the init bits accordingly; Format is; dir:<datasetdir> [mss:<mss-url>] [opt:<base-options>]; The <datasetdir> is mandatory.; See TDataSetManager::ParseInitOpts for the available; base options.; The base options are laready initialized by the base constructor. const char * GetDataSetPath(const char* group, const char* user, const char* dsName, TString& md5path, Bool_t local = kFALSE); Returns path of the indicated dataset. The extension is '.root' for all files; except for 'dsName==ls' which have extension '.txt'.; If 'local' is kTRUE the local cache path is returned instead in the form; <cachedir>/<group>.<user>.<dsName>.<ext>.; NB: contains a static TString for result, so copy result before using twice. Int_t NotifyUpdate(const char* group, const char* user, const char* dspath, Long_t mtime, const char* checksum = 0); Save into the <datasetdir>/kDataSet_DataSetList file the name of the updated; or created or modified dataset. For still existing datasets, fill the; modification date in seconds anf the checksum.; Returns 0 on success, -1 on error. Int_t CreateLsFile(const char* group, const char* user, Long_t& mtime, TString& checksum); Create or recreate the dataset lists for 'uri'.; The list are saved in text form in 'uri'/ls.txt for fast browsing and in; 'uri'/ls.root in form of TMacro for optimized and portable transfer.; Return 0 on success, 1 if the file was empty, -1 on error. Bool_t BrowseDataSets(const char* group, const char* user, const char* dsName, UInt_t option, TObject* target); Adds the dataset in the folder of group, user to the list in target.; If dsName is defined, only the information about the specified dataset; is processed. The unsigned int 'option' is forwarded to GetDataSet and BrowseDataSet.; Available options (to be .or.ed):; kPrint print the dataset content; kQuotaUpdat",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:14024,Deployability,update,update,14024," the <datasetdir>/kDataSet_DataSetList file the name of the updated; or created or modified dataset. For still existing datasets, fill the; modification date in seconds anf the checksum.; Returns 0 on success, -1 on error. Int_t CreateLsFile(const char* group, const char* user, Long_t& mtime, TString& checksum); Create or recreate the dataset lists for 'uri'.; The list are saved in text form in 'uri'/ls.txt for fast browsing and in; 'uri'/ls.root in form of TMacro for optimized and portable transfer.; Return 0 on success, 1 if the file was empty, -1 on error. Bool_t BrowseDataSets(const char* group, const char* user, const char* dsName, UInt_t option, TObject* target); Adds the dataset in the folder of group, user to the list in target.; If dsName is defined, only the information about the specified dataset; is processed. The unsigned int 'option' is forwarded to GetDataSet and BrowseDataSet.; Available options (to be .or.ed):; kPrint print the dataset content; kQuotaUpdate update quotas; kExport use export naming; kList get a list of dataset names. NB1: options ""kPrint"", ""kQuoatUpdate"" and ""kExport"" are mutually exclusive; NB2: for options ""kPrint"" and ""kQuotaUpdate"" return is null. TMap * GetDataSets(const char* group, const char* user, const char* dsName = 0, UInt_t option = 0); General purpose call to go through the existing datasets.; If <user> is 0 or ""*"", act on all datasets for the given <group>.; If <group> is 0 or ""*"", act on all datasets.; If <dsName> is defined, only the information about the specified dataset; is processed.; Action depends on option; available options:. kExport Return a TMap object containing all the information about; datasets in the form:; { <group>, <map of users> }; |; { <map of datasets>, <dataset>}; (<dataset> are TFileCollection objects); kShowDefault as kExport with in addition a default selection including; the datasets from the current user, the ones from the group; and the common ones. kPrint print the dataset content; no outp",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:15252,Deployability,update,update,15252,"ort"" are mutually exclusive; NB2: for options ""kPrint"" and ""kQuotaUpdate"" return is null. TMap * GetDataSets(const char* group, const char* user, const char* dsName = 0, UInt_t option = 0); General purpose call to go through the existing datasets.; If <user> is 0 or ""*"", act on all datasets for the given <group>.; If <group> is 0 or ""*"", act on all datasets.; If <dsName> is defined, only the information about the specified dataset; is processed.; Action depends on option; available options:. kExport Return a TMap object containing all the information about; datasets in the form:; { <group>, <map of users> }; |; { <map of datasets>, <dataset>}; (<dataset> are TFileCollection objects); kShowDefault as kExport with in addition a default selection including; the datasets from the current user, the ones from the group; and the common ones. kPrint print the dataset content; no output is returned; kList get a list of available dataset names; kForceScan Re-open files while processing kPrint (do not use the; pre-processed information); kNoHeaderPrint Labelling header is not printed; kQuotaUpdate update {group, user} quotas; no output is returned. NB1: options ""kPrint"", ""kQuoatUpdate"" and ""kExport"" are mutually exclusive; NB2: for options ""kPrint"" and ""kQuoatUpdate"" return is null. Int_t FillLsDataSet(const char* group, const char* user, const char* dsName, TList* out, UInt_t option); Check for the 'ls.txt' for 'group' and 'user' and fill the path for the; ls file in 'out'.; If 'dsname' is defined, open the file and extract the relevant line.; Return 0 on success, -1 on failure. TFileCollection * GetDataSet(const char* group, const char* user, const char* dsName, UInt_t option = 0, TMD5** checksum = 0). Returns the dataset <dsName> of user <user> in group <group> .; If checksum is non-zero, it will contain the pointer to a TMD5 sum object; with the checksum of the file, has to be deleted by the user.; If option has the bi kReadShort set, the shortobject is read, that does not;",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:16406,Deployability,update,updates,16406,"and ""kExport"" are mutually exclusive; NB2: for options ""kPrint"" and ""kQuoatUpdate"" return is null. Int_t FillLsDataSet(const char* group, const char* user, const char* dsName, TList* out, UInt_t option); Check for the 'ls.txt' for 'group' and 'user' and fill the path for the; ls file in 'out'.; If 'dsname' is defined, open the file and extract the relevant line.; Return 0 on success, -1 on failure. TFileCollection * GetDataSet(const char* group, const char* user, const char* dsName, UInt_t option = 0, TMD5** checksum = 0). Returns the dataset <dsName> of user <user> in group <group> .; If checksum is non-zero, it will contain the pointer to a TMD5 sum object; with the checksum of the file, has to be deleted by the user.; If option has the bi kReadShort set, the shortobject is read, that does not; contain the list of files. This is much faster. Int_t CheckLocalCache(const char* group, const char* user, const char* dsName = ""ls"", UInt_t option = 0); Check if the local cache information for group, user, dsName is up-to-date; If not, make the relevant updates; Return 0 if OK, 1 if the dataset does not exists anymore, -1 on failure. Int_t ClearCache(const char* uri = 0); Clear cached information matching uri. Int_t ShowCache(const char* uri = 0); Show cached information matching uri. Int_t WriteDataSet(const char* group, const char* user, const char* dsName, TFileCollection* dataset, UInt_t option = 0, TMD5* checksum = 0). Writes indicated dataset.; If option has the bit kFileMustExist set, the file must still exist,; otherwise the new dataset is not written (returns 3 in this case).; If checksum is non-zero the files current checksum is checked against it,; if it does not match the file is not written (the function returns 2 in this; case, if the file has disappeared it is also not written (i.e. checksum; implies the bit kFileMustExist set in option).; Returns != 0 for success, 0 for error. Int_t ChecksumDataSet(const char* path, const char* md5path, TString& checksum);",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:19647,Deployability,update,update,19647,"bug); Scans the dataset indicated by <uri> and returns the number of missing files.; Returns -1 if any failure occurs, >= 0 on success.; For more details, see documentation of; ScanDataSet(TFileCollection *dataset, const char *option). Int_t ScanDataSet(const char* group, const char* user, const char* dsName, UInt_t option = kReopen|kDebug); See documentation of ScanDataSet(TFileCollection *dataset, UInt_t option). TMap * GetDataSets(const char* uri, UInt_t option = TDataSetManager::kExport). Returns all datasets for the <group> and <user> specified by <uri>.; If <user> is 0, it returns all datasets for the given <group>.; If <group> is 0, it returns all datasets.; The returned TMap contains:; <group> --> <map of users> --> <map of datasets> --> <dataset> (TFileCollection). The unsigned int 'option' is forwarded to GetDataSet and BrowseDataSet.; Available options (to be .or.ed):; kShowDefault a default selection is shown that include the ones from; the current user, the ones from the group and the common ones; kPrint print the dataset content; kQuotaUpdate update quotas; kExport use export naming. NB1: options ""kPrint"", ""kQuoatUpdate"" and ""kExport"" are mutually exclusive; NB2: for options ""kPrint"" and ""kQuoatUpdate"" return is null. TFileCollection * GetDataSet(const char* uri, const char* srv = 0); Utility function used in various methods for user dataset upload. Bool_t RemoveDataSet(const char* uri); Removes the indicated dataset. Bool_t ExistsDataSet(const char* uri); Checks if the indicated dataset exits. void UpdateUsedSpace(); updates the used space maps. const char * GetDataSetPath(const char* group, const char* user, const char* dsName). TDataSetManagerFile(); { }. virtual ~TDataSetManagerFile(); { }. const char * GetMSSUrl() const; { return fMSSUrl; }. const char * GetStageOpts() const; { return fStageOpts; }. » Author: Jan Fiete Grosse-Oetringhaus, 08.08.07 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id: TDataSetM",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:20113,Deployability,Update,UpdateUsedSpace,20113,"t ScanDataSet(const char* group, const char* user, const char* dsName, UInt_t option = kReopen|kDebug); See documentation of ScanDataSet(TFileCollection *dataset, UInt_t option). TMap * GetDataSets(const char* uri, UInt_t option = TDataSetManager::kExport). Returns all datasets for the <group> and <user> specified by <uri>.; If <user> is 0, it returns all datasets for the given <group>.; If <group> is 0, it returns all datasets.; The returned TMap contains:; <group> --> <map of users> --> <map of datasets> --> <dataset> (TFileCollection). The unsigned int 'option' is forwarded to GetDataSet and BrowseDataSet.; Available options (to be .or.ed):; kShowDefault a default selection is shown that include the ones from; the current user, the ones from the group and the common ones; kPrint print the dataset content; kQuotaUpdate update quotas; kExport use export naming. NB1: options ""kPrint"", ""kQuoatUpdate"" and ""kExport"" are mutually exclusive; NB2: for options ""kPrint"" and ""kQuoatUpdate"" return is null. TFileCollection * GetDataSet(const char* uri, const char* srv = 0); Utility function used in various methods for user dataset upload. Bool_t RemoveDataSet(const char* uri); Removes the indicated dataset. Bool_t ExistsDataSet(const char* uri); Checks if the indicated dataset exits. void UpdateUsedSpace(); updates the used space maps. const char * GetDataSetPath(const char* group, const char* user, const char* dsName). TDataSetManagerFile(); { }. virtual ~TDataSetManagerFile(); { }. const char * GetMSSUrl() const; { return fMSSUrl; }. const char * GetStageOpts() const; { return fStageOpts; }. » Author: Jan Fiete Grosse-Oetringhaus, 08.08.07 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id: TDataSetManagerFile.h 33357 2010-05-04 06:56:18Z ganis $ » Last generated: 2011-12-02 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:20132,Deployability,update,updates,20132,"t ScanDataSet(const char* group, const char* user, const char* dsName, UInt_t option = kReopen|kDebug); See documentation of ScanDataSet(TFileCollection *dataset, UInt_t option). TMap * GetDataSets(const char* uri, UInt_t option = TDataSetManager::kExport). Returns all datasets for the <group> and <user> specified by <uri>.; If <user> is 0, it returns all datasets for the given <group>.; If <group> is 0, it returns all datasets.; The returned TMap contains:; <group> --> <map of users> --> <map of datasets> --> <dataset> (TFileCollection). The unsigned int 'option' is forwarded to GetDataSet and BrowseDataSet.; Available options (to be .or.ed):; kShowDefault a default selection is shown that include the ones from; the current user, the ones from the group and the common ones; kPrint print the dataset content; kQuotaUpdate update quotas; kExport use export naming. NB1: options ""kPrint"", ""kQuoatUpdate"" and ""kExport"" are mutually exclusive; NB2: for options ""kPrint"" and ""kQuoatUpdate"" return is null. TFileCollection * GetDataSet(const char* uri, const char* srv = 0); Utility function used in various methods for user dataset upload. Bool_t RemoveDataSet(const char* uri); Removes the indicated dataset. Bool_t ExistsDataSet(const char* uri); Checks if the indicated dataset exits. void UpdateUsedSpace(); updates the used space maps. const char * GetDataSetPath(const char* group, const char* user, const char* dsName). TDataSetManagerFile(); { }. virtual ~TDataSetManagerFile(); { }. const char * GetMSSUrl() const; { return fMSSUrl; }. const char * GetStageOpts() const; { return fStageOpts; }. » Author: Jan Fiete Grosse-Oetringhaus, 08.08.07 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id: TDataSetManagerFile.h 33357 2010-05-04 06:56:18Z ganis $ » Last generated: 2011-12-02 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:4335,Energy Efficiency,Monitor,MonitorUsedSpace,4335,"rtual Option_t*TObject::GetOption() const; const char*GetStageOpts() const; virtual TMap*TDataSetManager::GetSubDataSets(const char* uri, const char* excludeservers); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTDataSetManager::MonitorUsedSpace(TVirtualMonitoringWriter* monitoring); virtual Bool_tTObject::Notify(); virtual Int_tNotifyUpdate(const char* group, const char* user, const char* dspath, Long_t mtime, const char* checksum = 0); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); static TList*TDataSetManager::ParseDataSetSrvMaps(const TString& srvmaps); virtual voidParseInitOpts(const char* opts); Bool_tTDataSetManager::ParseUri(const char* uri, TString* dsGroup = 0, TString* d",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:4378,Energy Efficiency,monitor,monitoring,4378,"t; const char*GetStageOpts() const; virtual TMap*TDataSetManager::GetSubDataSets(const char* uri, const char* excludeservers); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTDataSetManager::MonitorUsedSpace(TVirtualMonitoringWriter* monitoring); virtual Bool_tTObject::Notify(); virtual Int_tNotifyUpdate(const char* group, const char* user, const char* dspath, Long_t mtime, const char* checksum = 0); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); static TList*TDataSetManager::ParseDataSetSrvMaps(const TString& srvmaps); virtual voidParseInitOpts(const char* opts); Bool_tTDataSetManager::ParseUri(const char* uri, TString* dsGroup = 0, TString* dsUser = 0, TString* dsName = 0, TString*",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:14606,Integrability,depend,depends,14606,"ts(const char* group, const char* user, const char* dsName, UInt_t option, TObject* target); Adds the dataset in the folder of group, user to the list in target.; If dsName is defined, only the information about the specified dataset; is processed. The unsigned int 'option' is forwarded to GetDataSet and BrowseDataSet.; Available options (to be .or.ed):; kPrint print the dataset content; kQuotaUpdate update quotas; kExport use export naming; kList get a list of dataset names. NB1: options ""kPrint"", ""kQuoatUpdate"" and ""kExport"" are mutually exclusive; NB2: for options ""kPrint"" and ""kQuotaUpdate"" return is null. TMap * GetDataSets(const char* group, const char* user, const char* dsName = 0, UInt_t option = 0); General purpose call to go through the existing datasets.; If <user> is 0 or ""*"", act on all datasets for the given <group>.; If <group> is 0 or ""*"", act on all datasets.; If <dsName> is defined, only the information about the specified dataset; is processed.; Action depends on option; available options:. kExport Return a TMap object containing all the information about; datasets in the form:; { <group>, <map of users> }; |; { <map of datasets>, <dataset>}; (<dataset> are TFileCollection objects); kShowDefault as kExport with in addition a default selection including; the datasets from the current user, the ones from the group; and the common ones. kPrint print the dataset content; no output is returned; kList get a list of available dataset names; kForceScan Re-open files while processing kPrint (do not use the; pre-processed information); kNoHeaderPrint Labelling header is not printed; kQuotaUpdate update {group, user} quotas; no output is returned. NB1: options ""kPrint"", ""kQuoatUpdate"" and ""kExport"" are mutually exclusive; NB2: for options ""kPrint"" and ""kQuoatUpdate"" return is null. Int_t FillLsDataSet(const char* group, const char* user, const char* dsName, TList* out, UInt_t option); Check for the 'ls.txt' for 'group' and 'user' and fill the path for the; ls",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:3785,Modifiability,Inherit,InheritsFrom,3785,"0); static TList*TDataSetManager::GetDataSetSrvMaps(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long64_tTDataSetManager::GetGroupQuota(const char* group); virtual TMap*TDataSetManager::GetGroupQuotaMap(); virtual Long64_tTDataSetManager::GetGroupUsed(const char* group); virtual const char*TObject::GetIconName() const; const char*GetMSSUrl() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*GetStageOpts() const; virtual TMap*TDataSetManager::GetSubDataSets(const char* uri, const char* excludeservers); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTDataSetManager::MonitorUsedSpace(TVirtualMonitoringWriter* monitoring); virtual Bool_tTObject::Notify(); virtual Int_tNotifyUpdate(const char* group, const char* user, const char* dspath, Long_t mtime, const char* checksum = 0); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:3851,Modifiability,Inherit,InheritsFrom,3851,"ion_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long64_tTDataSetManager::GetGroupQuota(const char* group); virtual TMap*TDataSetManager::GetGroupQuotaMap(); virtual Long64_tTDataSetManager::GetGroupUsed(const char* group); virtual const char*TObject::GetIconName() const; const char*GetMSSUrl() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*GetStageOpts() const; virtual TMap*TDataSetManager::GetSubDataSets(const char* uri, const char* excludeservers); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTDataSetManager::MonitorUsedSpace(TVirtualMonitoringWriter* monitoring); virtual Bool_tTObject::Notify(); virtual Int_tNotifyUpdate(const char* group, const char* user, const char* dspath, Long_t mtime, const char* checksum = 0); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void*",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:10337,Modifiability,config,config,10337,"y; kNoCacheUpdate; kRefreshLs; kList; kAllFiles; kStagedFiles; kNoStagedCheck; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Long64_tTDataSetManager::fAvgFileSizeAverage file size to be used to estimate the dataset size (in MB); TUriTDataSetManager::fBaseBase URI used to parse dataset names; TStringTDataSetManager::fCommonGroupGroup that stores the COMMON datasets; TStringTDataSetManager::fCommonUserUser that stores the COMMON datasets; TStringTDataSetManager::fGroupGroup to which the owner of this session belongs; TStringTDataSetManager::fGroupConfigFilePath to the group config file; TMapTDataSetManager::fGroupQuotaGroup quotas (read from config file); TMapTDataSetManager::fGroupUsed<group> --> <used bytes> (TParameter); Long_tTDataSetManager::fMTimeGroupConfigLast modification of the group config file; Int_tTDataSetManager::fNDisappearedFilesNumber of files disappared in the last ScanDataSet operation; Int_tTDataSetManager::fNOpenedFilesNumber of files opened in the last ScanDataSet operation; Int_tTDataSetManager::fNTouchedFilesNumber of files touched in the last ScanDataSet operation; TStringTDataSetManager::fUserOwner of the session; TMapTDataSetManager::fUserUsed<group> --> <map of users> --> <value>; static TStringTDataSetManager::fgCommonDataSetTagName for common datasets, default: COMMON; static TList*TDataSetManager::fgDataSetSrvMapsList of TPair(TRegexp, TObjString) for mapping server coordinates. private:. Int_tfCacheUpdatePeriodPeriod for checking for new updated information; TStringfDataSetDirLocation of datasets; TStringfDataSetLockFileDataset lock file; Bool_tfIsRemoteTrue if the repository is remote; TStringfListFileFile to check repository updates; TStringfLocalCacheDirLocal cache when the repository is remote; Int_tfLockFileTimeL",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:10406,Modifiability,config,config,10406,"y; kNoCacheUpdate; kRefreshLs; kList; kAllFiles; kStagedFiles; kNoStagedCheck; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Long64_tTDataSetManager::fAvgFileSizeAverage file size to be used to estimate the dataset size (in MB); TUriTDataSetManager::fBaseBase URI used to parse dataset names; TStringTDataSetManager::fCommonGroupGroup that stores the COMMON datasets; TStringTDataSetManager::fCommonUserUser that stores the COMMON datasets; TStringTDataSetManager::fGroupGroup to which the owner of this session belongs; TStringTDataSetManager::fGroupConfigFilePath to the group config file; TMapTDataSetManager::fGroupQuotaGroup quotas (read from config file); TMapTDataSetManager::fGroupUsed<group> --> <used bytes> (TParameter); Long_tTDataSetManager::fMTimeGroupConfigLast modification of the group config file; Int_tTDataSetManager::fNDisappearedFilesNumber of files disappared in the last ScanDataSet operation; Int_tTDataSetManager::fNOpenedFilesNumber of files opened in the last ScanDataSet operation; Int_tTDataSetManager::fNTouchedFilesNumber of files touched in the last ScanDataSet operation; TStringTDataSetManager::fUserOwner of the session; TMapTDataSetManager::fUserUsed<group> --> <map of users> --> <value>; static TStringTDataSetManager::fgCommonDataSetTagName for common datasets, default: COMMON; static TList*TDataSetManager::fgDataSetSrvMapsList of TPair(TRegexp, TObjString) for mapping server coordinates. private:. Int_tfCacheUpdatePeriodPeriod for checking for new updated information; TStringfDataSetDirLocation of datasets; TStringfDataSetLockFileDataset lock file; Bool_tfIsRemoteTrue if the repository is remote; TStringfListFileFile to check repository updates; TStringfLocalCacheDirLocal cache when the repository is remote; Int_tfLockFileTimeL",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:10561,Modifiability,config,config,10561,"y; kNoCacheUpdate; kRefreshLs; kList; kAllFiles; kStagedFiles; kNoStagedCheck; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Long64_tTDataSetManager::fAvgFileSizeAverage file size to be used to estimate the dataset size (in MB); TUriTDataSetManager::fBaseBase URI used to parse dataset names; TStringTDataSetManager::fCommonGroupGroup that stores the COMMON datasets; TStringTDataSetManager::fCommonUserUser that stores the COMMON datasets; TStringTDataSetManager::fGroupGroup to which the owner of this session belongs; TStringTDataSetManager::fGroupConfigFilePath to the group config file; TMapTDataSetManager::fGroupQuotaGroup quotas (read from config file); TMapTDataSetManager::fGroupUsed<group> --> <used bytes> (TParameter); Long_tTDataSetManager::fMTimeGroupConfigLast modification of the group config file; Int_tTDataSetManager::fNDisappearedFilesNumber of files disappared in the last ScanDataSet operation; Int_tTDataSetManager::fNOpenedFilesNumber of files opened in the last ScanDataSet operation; Int_tTDataSetManager::fNTouchedFilesNumber of files touched in the last ScanDataSet operation; TStringTDataSetManager::fUserOwner of the session; TMapTDataSetManager::fUserUsed<group> --> <map of users> --> <value>; static TStringTDataSetManager::fgCommonDataSetTagName for common datasets, default: COMMON; static TList*TDataSetManager::fgDataSetSrvMapsList of TPair(TRegexp, TObjString) for mapping server coordinates. private:. Int_tfCacheUpdatePeriodPeriod for checking for new updated information; TStringfDataSetDirLocation of datasets; TStringfDataSetLockFileDataset lock file; Bool_tfIsRemoteTrue if the repository is remote; TStringfListFileFile to check repository updates; TStringfLocalCacheDirLocal cache when the repository is remote; Int_tfLockFileTimeL",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:11800,Modifiability,Inherit,Inheritance,11800,"hed in the last ScanDataSet operation; TStringTDataSetManager::fUserOwner of the session; TMapTDataSetManager::fUserUsed<group> --> <map of users> --> <value>; static TStringTDataSetManager::fgCommonDataSetTagName for common datasets, default: COMMON; static TList*TDataSetManager::fgDataSetSrvMapsList of TPair(TRegexp, TObjString) for mapping server coordinates. private:. Int_tfCacheUpdatePeriodPeriod for checking for new updated information; TStringfDataSetDirLocation of datasets; TStringfDataSetLockFileDataset lock file; Bool_tfIsRemoteTrue if the repository is remote; TStringfListFileFile to check repository updates; TStringfLocalCacheDirLocal cache when the repository is remote; Int_tfLockFileTimeLimitLimit in seconds after a lock automatically expires; TStringfMSSUrlURL for the Mass Storage System; TStringfStageOptsOption string to be used in issuing staging requests; Bool_tfUseCacheTrue if the cache is used for browsing remote repositories. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDataSetManagerFile(const char* group, const char* user, const char* ins). Main constructor. TDataSetManagerFile(const char* ins). Main constructor. void Init(); Do the real inititialization. void InitLocalCache(); Init the local cache if required. void ParseInitOpts(const char* opts); Parse the input string and set the init bits accordingly; Format is; dir:<datasetdir> [mss:<mss-url>] [opt:<base-options>]; The <datasetdir> is mandatory.; See TDataSetManager::ParseInitOpts for the available; base options.; The base options are laready initialized by the base constructor. const char * GetDataSetPath(const char* group, const char* user, const char* dsName, TString& md5path, Bool_t local = kFALSE); Returns path of the indicated dataset. The extension is '.root' for all files; except for 'dsName==ls' which have extension '.txt'.; If 'local' is kTRUE the local cache path is returned instead in the form; <cachedir>/<group>.<user>.<dsName>.<e",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:11813,Modifiability,Inherit,Inherited,11813,"hed in the last ScanDataSet operation; TStringTDataSetManager::fUserOwner of the session; TMapTDataSetManager::fUserUsed<group> --> <map of users> --> <value>; static TStringTDataSetManager::fgCommonDataSetTagName for common datasets, default: COMMON; static TList*TDataSetManager::fgDataSetSrvMapsList of TPair(TRegexp, TObjString) for mapping server coordinates. private:. Int_tfCacheUpdatePeriodPeriod for checking for new updated information; TStringfDataSetDirLocation of datasets; TStringfDataSetLockFileDataset lock file; Bool_tfIsRemoteTrue if the repository is remote; TStringfListFileFile to check repository updates; TStringfLocalCacheDirLocal cache when the repository is remote; Int_tfLockFileTimeLimitLimit in seconds after a lock automatically expires; TStringfMSSUrlURL for the Mass Storage System; TStringfStageOptsOption string to be used in issuing staging requests; Bool_tfUseCacheTrue if the cache is used for browsing remote repositories. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDataSetManagerFile(const char* group, const char* user, const char* ins). Main constructor. TDataSetManagerFile(const char* ins). Main constructor. void Init(); Do the real inititialization. void InitLocalCache(); Init the local cache if required. void ParseInitOpts(const char* opts); Parse the input string and set the init bits accordingly; Format is; dir:<datasetdir> [mss:<mss-url>] [opt:<base-options>]; The <datasetdir> is mandatory.; See TDataSetManager::ParseInitOpts for the available; base options.; The base options are laready initialized by the base constructor. const char * GetDataSetPath(const char* group, const char* user, const char* dsName, TString& md5path, Bool_t local = kFALSE); Returns path of the indicated dataset. The extension is '.root' for all files; except for 'dsName==ls' which have extension '.txt'.; If 'local' is kTRUE the local cache path is returned instead in the form; <cachedir>/<group>.<user>.<dsName>.<e",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:13522,Modifiability,portab,portable,13522,"ar* user, const char* dsName, TString& md5path, Bool_t local = kFALSE); Returns path of the indicated dataset. The extension is '.root' for all files; except for 'dsName==ls' which have extension '.txt'.; If 'local' is kTRUE the local cache path is returned instead in the form; <cachedir>/<group>.<user>.<dsName>.<ext>.; NB: contains a static TString for result, so copy result before using twice. Int_t NotifyUpdate(const char* group, const char* user, const char* dspath, Long_t mtime, const char* checksum = 0); Save into the <datasetdir>/kDataSet_DataSetList file the name of the updated; or created or modified dataset. For still existing datasets, fill the; modification date in seconds anf the checksum.; Returns 0 on success, -1 on error. Int_t CreateLsFile(const char* group, const char* user, Long_t& mtime, TString& checksum); Create or recreate the dataset lists for 'uri'.; The list are saved in text form in 'uri'/ls.txt for fast browsing and in; 'uri'/ls.root in form of TMacro for optimized and portable transfer.; Return 0 on success, 1 if the file was empty, -1 on error. Bool_t BrowseDataSets(const char* group, const char* user, const char* dsName, UInt_t option, TObject* target); Adds the dataset in the folder of group, user to the list in target.; If dsName is defined, only the information about the specified dataset; is processed. The unsigned int 'option' is forwarded to GetDataSet and BrowseDataSet.; Available options (to be .or.ed):; kPrint print the dataset content; kQuotaUpdate update quotas; kExport use export naming; kList get a list of dataset names. NB1: options ""kPrint"", ""kQuoatUpdate"" and ""kExport"" are mutually exclusive; NB2: for options ""kPrint"" and ""kQuotaUpdate"" return is null. TMap * GetDataSets(const char* group, const char* user, const char* dsName = 0, UInt_t option = 0); General purpose call to go through the existing datasets.; If <user> is 0 or ""*"", act on all datasets for the given <group>.; If <group> is 0 or ""*"", act on all datasets.; I",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:18255,Modifiability,config,configured,18255," Returns != 0 for success, 0 for error. Int_t ChecksumDataSet(const char* path, const char* md5path, TString& checksum); Calculate the checksum of the indicated dataset at 'path' and save it to the; appropriate file 'md5path'. The MD5 string is returned in 'md5sum'.; Return 0 on success, -1 on error. Bool_t RemoveDataSet(const char* group, const char* user, const char* dsName); Removes the indicated dataset. Bool_t ExistsDataSet(const char* group, const char* user, const char* dsName); Checks if the indicated dataset exits. Int_t RegisterDataSet(const char* uri, TFileCollection* dataSet, const char* opt); Register a dataset, perfoming quota checkings and verification, if required.; If a dataset with the same name already exists the action fails unless 'opts'; contains 'O', in which case the old dataset is overwritten, or contains 'U',; in which case 'newDataSet' is added to the existing dataset (duplications are; ignored, if any).; If 'opts' contains 'V' the dataset files are also verified (if the dataset manager; is configured to allow so). By default the dataset is not verified.; If 'opts' contains 'T' the in the dataset object (status bits, meta,...); is trusted, i.e. not reset (if the dataset manager is configured to allow so).; Returns 0 on success, -1 on failure. Int_t ScanDataSet(const char* uri, UInt_t option = kReopen|kDebug); Scans the dataset indicated by <uri> and returns the number of missing files.; Returns -1 if any failure occurs, >= 0 on success.; For more details, see documentation of; ScanDataSet(TFileCollection *dataset, const char *option). Int_t ScanDataSet(const char* group, const char* user, const char* dsName, UInt_t option = kReopen|kDebug); See documentation of ScanDataSet(TFileCollection *dataset, UInt_t option). TMap * GetDataSets(const char* uri, UInt_t option = TDataSetManager::kExport). Returns all datasets for the <group> and <user> specified by <uri>.; If <user> is 0, it returns all datasets for the given <group>.; If <group> is 0, i",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:18449,Modifiability,config,configured,18449,"path'. The MD5 string is returned in 'md5sum'.; Return 0 on success, -1 on error. Bool_t RemoveDataSet(const char* group, const char* user, const char* dsName); Removes the indicated dataset. Bool_t ExistsDataSet(const char* group, const char* user, const char* dsName); Checks if the indicated dataset exits. Int_t RegisterDataSet(const char* uri, TFileCollection* dataSet, const char* opt); Register a dataset, perfoming quota checkings and verification, if required.; If a dataset with the same name already exists the action fails unless 'opts'; contains 'O', in which case the old dataset is overwritten, or contains 'U',; in which case 'newDataSet' is added to the existing dataset (duplications are; ignored, if any).; If 'opts' contains 'V' the dataset files are also verified (if the dataset manager; is configured to allow so). By default the dataset is not verified.; If 'opts' contains 'T' the in the dataset object (status bits, meta,...); is trusted, i.e. not reset (if the dataset manager is configured to allow so).; Returns 0 on success, -1 on failure. Int_t ScanDataSet(const char* uri, UInt_t option = kReopen|kDebug); Scans the dataset indicated by <uri> and returns the number of missing files.; Returns -1 if any failure occurs, >= 0 on success.; For more details, see documentation of; ScanDataSet(TFileCollection *dataset, const char *option). Int_t ScanDataSet(const char* group, const char* user, const char* dsName, UInt_t option = kReopen|kDebug); See documentation of ScanDataSet(TFileCollection *dataset, UInt_t option). TMap * GetDataSets(const char* uri, UInt_t option = TDataSetManager::kExport). Returns all datasets for the <group> and <user> specified by <uri>.; If <user> is 0, it returns all datasets for the given <group>.; If <group> is 0, it returns all datasets.; The returned TMap contains:; <group> --> <map of users> --> <map of datasets> --> <dataset> (TFileCollection). The unsigned int 'option' is forwarded to GetDataSet and BrowseDataSet.; Available ",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:11480,Performance,cache,cache,11480,"ng_tTDataSetManager::fMTimeGroupConfigLast modification of the group config file; Int_tTDataSetManager::fNDisappearedFilesNumber of files disappared in the last ScanDataSet operation; Int_tTDataSetManager::fNOpenedFilesNumber of files opened in the last ScanDataSet operation; Int_tTDataSetManager::fNTouchedFilesNumber of files touched in the last ScanDataSet operation; TStringTDataSetManager::fUserOwner of the session; TMapTDataSetManager::fUserUsed<group> --> <map of users> --> <value>; static TStringTDataSetManager::fgCommonDataSetTagName for common datasets, default: COMMON; static TList*TDataSetManager::fgDataSetSrvMapsList of TPair(TRegexp, TObjString) for mapping server coordinates. private:. Int_tfCacheUpdatePeriodPeriod for checking for new updated information; TStringfDataSetDirLocation of datasets; TStringfDataSetLockFileDataset lock file; Bool_tfIsRemoteTrue if the repository is remote; TStringfListFileFile to check repository updates; TStringfLocalCacheDirLocal cache when the repository is remote; Int_tfLockFileTimeLimitLimit in seconds after a lock automatically expires; TStringfMSSUrlURL for the Mass Storage System; TStringfStageOptsOption string to be used in issuing staging requests; Bool_tfUseCacheTrue if the cache is used for browsing remote repositories. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDataSetManagerFile(const char* group, const char* user, const char* ins). Main constructor. TDataSetManagerFile(const char* ins). Main constructor. void Init(); Do the real inititialization. void InitLocalCache(); Init the local cache if required. void ParseInitOpts(const char* opts); Parse the input string and set the init bits accordingly; Format is; dir:<datasetdir> [mss:<mss-url>] [opt:<base-options>]; The <datasetdir> is mandatory.; See TDataSetManager::ParseInitOpts for the available; base options.; The base options are laready initialized by the base constructor. const char * GetDataSetPath(const cha",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:11738,Performance,cache,cache,11738,"ng_tTDataSetManager::fMTimeGroupConfigLast modification of the group config file; Int_tTDataSetManager::fNDisappearedFilesNumber of files disappared in the last ScanDataSet operation; Int_tTDataSetManager::fNOpenedFilesNumber of files opened in the last ScanDataSet operation; Int_tTDataSetManager::fNTouchedFilesNumber of files touched in the last ScanDataSet operation; TStringTDataSetManager::fUserOwner of the session; TMapTDataSetManager::fUserUsed<group> --> <map of users> --> <value>; static TStringTDataSetManager::fgCommonDataSetTagName for common datasets, default: COMMON; static TList*TDataSetManager::fgDataSetSrvMapsList of TPair(TRegexp, TObjString) for mapping server coordinates. private:. Int_tfCacheUpdatePeriodPeriod for checking for new updated information; TStringfDataSetDirLocation of datasets; TStringfDataSetLockFileDataset lock file; Bool_tfIsRemoteTrue if the repository is remote; TStringfListFileFile to check repository updates; TStringfLocalCacheDirLocal cache when the repository is remote; Int_tfLockFileTimeLimitLimit in seconds after a lock automatically expires; TStringfMSSUrlURL for the Mass Storage System; TStringfStageOptsOption string to be used in issuing staging requests; Bool_tfUseCacheTrue if the cache is used for browsing remote repositories. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDataSetManagerFile(const char* group, const char* user, const char* ins). Main constructor. TDataSetManagerFile(const char* ins). Main constructor. void Init(); Do the real inititialization. void InitLocalCache(); Init the local cache if required. void ParseInitOpts(const char* opts); Parse the input string and set the init bits accordingly; Format is; dir:<datasetdir> [mss:<mss-url>] [opt:<base-options>]; The <datasetdir> is mandatory.; See TDataSetManager::ParseInitOpts for the available; base options.; The base options are laready initialized by the base constructor. const char * GetDataSetPath(const cha",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:12107,Performance,cache,cache,12107,"etManager::fgDataSetSrvMapsList of TPair(TRegexp, TObjString) for mapping server coordinates. private:. Int_tfCacheUpdatePeriodPeriod for checking for new updated information; TStringfDataSetDirLocation of datasets; TStringfDataSetLockFileDataset lock file; Bool_tfIsRemoteTrue if the repository is remote; TStringfListFileFile to check repository updates; TStringfLocalCacheDirLocal cache when the repository is remote; Int_tfLockFileTimeLimitLimit in seconds after a lock automatically expires; TStringfMSSUrlURL for the Mass Storage System; TStringfStageOptsOption string to be used in issuing staging requests; Bool_tfUseCacheTrue if the cache is used for browsing remote repositories. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDataSetManagerFile(const char* group, const char* user, const char* ins). Main constructor. TDataSetManagerFile(const char* ins). Main constructor. void Init(); Do the real inititialization. void InitLocalCache(); Init the local cache if required. void ParseInitOpts(const char* opts); Parse the input string and set the init bits accordingly; Format is; dir:<datasetdir> [mss:<mss-url>] [opt:<base-options>]; The <datasetdir> is mandatory.; See TDataSetManager::ParseInitOpts for the available; base options.; The base options are laready initialized by the base constructor. const char * GetDataSetPath(const char* group, const char* user, const char* dsName, TString& md5path, Bool_t local = kFALSE); Returns path of the indicated dataset. The extension is '.root' for all files; except for 'dsName==ls' which have extension '.txt'.; If 'local' is kTRUE the local cache path is returned instead in the form; <cachedir>/<group>.<user>.<dsName>.<ext>.; NB: contains a static TString for result, so copy result before using twice. Int_t NotifyUpdate(const char* group, const char* user, const char* dspath, Long_t mtime, const char* checksum = 0); Save into the <datasetdir>/kDataSet_DataSetList file the name of the up",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:12745,Performance,cache,cache,12745,"sing remote repositories. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDataSetManagerFile(const char* group, const char* user, const char* ins). Main constructor. TDataSetManagerFile(const char* ins). Main constructor. void Init(); Do the real inititialization. void InitLocalCache(); Init the local cache if required. void ParseInitOpts(const char* opts); Parse the input string and set the init bits accordingly; Format is; dir:<datasetdir> [mss:<mss-url>] [opt:<base-options>]; The <datasetdir> is mandatory.; See TDataSetManager::ParseInitOpts for the available; base options.; The base options are laready initialized by the base constructor. const char * GetDataSetPath(const char* group, const char* user, const char* dsName, TString& md5path, Bool_t local = kFALSE); Returns path of the indicated dataset. The extension is '.root' for all files; except for 'dsName==ls' which have extension '.txt'.; If 'local' is kTRUE the local cache path is returned instead in the form; <cachedir>/<group>.<user>.<dsName>.<ext>.; NB: contains a static TString for result, so copy result before using twice. Int_t NotifyUpdate(const char* group, const char* user, const char* dspath, Long_t mtime, const char* checksum = 0); Save into the <datasetdir>/kDataSet_DataSetList file the name of the updated; or created or modified dataset. For still existing datasets, fill the; modification date in seconds anf the checksum.; Returns 0 on success, -1 on error. Int_t CreateLsFile(const char* group, const char* user, Long_t& mtime, TString& checksum); Create or recreate the dataset lists for 'uri'.; The list are saved in text form in 'uri'/ls.txt for fast browsing and in; 'uri'/ls.root in form of TMacro for optimized and portable transfer.; Return 0 on success, 1 if the file was empty, -1 on error. Bool_t BrowseDataSets(const char* group, const char* user, const char* dsName, UInt_t option, TObject* target); Adds the dataset in the folder of group, user to",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:12790,Performance,cache,cachedir,12790,"sing remote repositories. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDataSetManagerFile(const char* group, const char* user, const char* ins). Main constructor. TDataSetManagerFile(const char* ins). Main constructor. void Init(); Do the real inititialization. void InitLocalCache(); Init the local cache if required. void ParseInitOpts(const char* opts); Parse the input string and set the init bits accordingly; Format is; dir:<datasetdir> [mss:<mss-url>] [opt:<base-options>]; The <datasetdir> is mandatory.; See TDataSetManager::ParseInitOpts for the available; base options.; The base options are laready initialized by the base constructor. const char * GetDataSetPath(const char* group, const char* user, const char* dsName, TString& md5path, Bool_t local = kFALSE); Returns path of the indicated dataset. The extension is '.root' for all files; except for 'dsName==ls' which have extension '.txt'.; If 'local' is kTRUE the local cache path is returned instead in the form; <cachedir>/<group>.<user>.<dsName>.<ext>.; NB: contains a static TString for result, so copy result before using twice. Int_t NotifyUpdate(const char* group, const char* user, const char* dspath, Long_t mtime, const char* checksum = 0); Save into the <datasetdir>/kDataSet_DataSetList file the name of the updated; or created or modified dataset. For still existing datasets, fill the; modification date in seconds anf the checksum.; Returns 0 on success, -1 on error. Int_t CreateLsFile(const char* group, const char* user, Long_t& mtime, TString& checksum); Create or recreate the dataset lists for 'uri'.; The list are saved in text form in 'uri'/ls.txt for fast browsing and in; 'uri'/ls.root in form of TMacro for optimized and portable transfer.; Return 0 on success, 1 if the file was empty, -1 on error. Bool_t BrowseDataSets(const char* group, const char* user, const char* dsName, UInt_t option, TObject* target); Adds the dataset in the folder of group, user to",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:13508,Performance,optimiz,optimized,13508,"ar* user, const char* dsName, TString& md5path, Bool_t local = kFALSE); Returns path of the indicated dataset. The extension is '.root' for all files; except for 'dsName==ls' which have extension '.txt'.; If 'local' is kTRUE the local cache path is returned instead in the form; <cachedir>/<group>.<user>.<dsName>.<ext>.; NB: contains a static TString for result, so copy result before using twice. Int_t NotifyUpdate(const char* group, const char* user, const char* dspath, Long_t mtime, const char* checksum = 0); Save into the <datasetdir>/kDataSet_DataSetList file the name of the updated; or created or modified dataset. For still existing datasets, fill the; modification date in seconds anf the checksum.; Returns 0 on success, -1 on error. Int_t CreateLsFile(const char* group, const char* user, Long_t& mtime, TString& checksum); Create or recreate the dataset lists for 'uri'.; The list are saved in text form in 'uri'/ls.txt for fast browsing and in; 'uri'/ls.root in form of TMacro for optimized and portable transfer.; Return 0 on success, 1 if the file was empty, -1 on error. Bool_t BrowseDataSets(const char* group, const char* user, const char* dsName, UInt_t option, TObject* target); Adds the dataset in the folder of group, user to the list in target.; If dsName is defined, only the information about the specified dataset; is processed. The unsigned int 'option' is forwarded to GetDataSet and BrowseDataSet.; Available options (to be .or.ed):; kPrint print the dataset content; kQuotaUpdate update quotas; kExport use export naming; kList get a list of dataset names. NB1: options ""kPrint"", ""kQuoatUpdate"" and ""kExport"" are mutually exclusive; NB2: for options ""kPrint"" and ""kQuotaUpdate"" return is null. TMap * GetDataSets(const char* group, const char* user, const char* dsName = 0, UInt_t option = 0); General purpose call to go through the existing datasets.; If <user> is 0 or ""*"", act on all datasets for the given <group>.; If <group> is 0 or ""*"", act on all datasets.; I",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:16323,Performance,cache,cache,16323,"and ""kExport"" are mutually exclusive; NB2: for options ""kPrint"" and ""kQuoatUpdate"" return is null. Int_t FillLsDataSet(const char* group, const char* user, const char* dsName, TList* out, UInt_t option); Check for the 'ls.txt' for 'group' and 'user' and fill the path for the; ls file in 'out'.; If 'dsname' is defined, open the file and extract the relevant line.; Return 0 on success, -1 on failure. TFileCollection * GetDataSet(const char* group, const char* user, const char* dsName, UInt_t option = 0, TMD5** checksum = 0). Returns the dataset <dsName> of user <user> in group <group> .; If checksum is non-zero, it will contain the pointer to a TMD5 sum object; with the checksum of the file, has to be deleted by the user.; If option has the bi kReadShort set, the shortobject is read, that does not; contain the list of files. This is much faster. Int_t CheckLocalCache(const char* group, const char* user, const char* dsName = ""ls"", UInt_t option = 0); Check if the local cache information for group, user, dsName is up-to-date; If not, make the relevant updates; Return 0 if OK, 1 if the dataset does not exists anymore, -1 on failure. Int_t ClearCache(const char* uri = 0); Clear cached information matching uri. Int_t ShowCache(const char* uri = 0); Show cached information matching uri. Int_t WriteDataSet(const char* group, const char* user, const char* dsName, TFileCollection* dataset, UInt_t option = 0, TMD5* checksum = 0). Writes indicated dataset.; If option has the bit kFileMustExist set, the file must still exist,; otherwise the new dataset is not written (returns 3 in this case).; If checksum is non-zero the files current checksum is checked against it,; if it does not match the file is not written (the function returns 2 in this; case, if the file has disappeared it is also not written (i.e. checksum; implies the bit kFileMustExist set in option).; Returns != 0 for success, 0 for error. Int_t ChecksumDataSet(const char* path, const char* md5path, TString& checksum);",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:16533,Performance,cache,cached,16533,"ut, UInt_t option); Check for the 'ls.txt' for 'group' and 'user' and fill the path for the; ls file in 'out'.; If 'dsname' is defined, open the file and extract the relevant line.; Return 0 on success, -1 on failure. TFileCollection * GetDataSet(const char* group, const char* user, const char* dsName, UInt_t option = 0, TMD5** checksum = 0). Returns the dataset <dsName> of user <user> in group <group> .; If checksum is non-zero, it will contain the pointer to a TMD5 sum object; with the checksum of the file, has to be deleted by the user.; If option has the bi kReadShort set, the shortobject is read, that does not; contain the list of files. This is much faster. Int_t CheckLocalCache(const char* group, const char* user, const char* dsName = ""ls"", UInt_t option = 0); Check if the local cache information for group, user, dsName is up-to-date; If not, make the relevant updates; Return 0 if OK, 1 if the dataset does not exists anymore, -1 on failure. Int_t ClearCache(const char* uri = 0); Clear cached information matching uri. Int_t ShowCache(const char* uri = 0); Show cached information matching uri. Int_t WriteDataSet(const char* group, const char* user, const char* dsName, TFileCollection* dataset, UInt_t option = 0, TMD5* checksum = 0). Writes indicated dataset.; If option has the bit kFileMustExist set, the file must still exist,; otherwise the new dataset is not written (returns 3 in this case).; If checksum is non-zero the files current checksum is checked against it,; if it does not match the file is not written (the function returns 2 in this; case, if the file has disappeared it is also not written (i.e. checksum; implies the bit kFileMustExist set in option).; Returns != 0 for success, 0 for error. Int_t ChecksumDataSet(const char* path, const char* md5path, TString& checksum); Calculate the checksum of the indicated dataset at 'path' and save it to the; appropriate file 'md5path'. The MD5 string is returned in 'md5sum'.; Return 0 on success, -1 on error. Bo",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:16609,Performance,cache,cached,16609,"e path for the; ls file in 'out'.; If 'dsname' is defined, open the file and extract the relevant line.; Return 0 on success, -1 on failure. TFileCollection * GetDataSet(const char* group, const char* user, const char* dsName, UInt_t option = 0, TMD5** checksum = 0). Returns the dataset <dsName> of user <user> in group <group> .; If checksum is non-zero, it will contain the pointer to a TMD5 sum object; with the checksum of the file, has to be deleted by the user.; If option has the bi kReadShort set, the shortobject is read, that does not; contain the list of files. This is much faster. Int_t CheckLocalCache(const char* group, const char* user, const char* dsName = ""ls"", UInt_t option = 0); Check if the local cache information for group, user, dsName is up-to-date; If not, make the relevant updates; Return 0 if OK, 1 if the dataset does not exists anymore, -1 on failure. Int_t ClearCache(const char* uri = 0); Clear cached information matching uri. Int_t ShowCache(const char* uri = 0); Show cached information matching uri. Int_t WriteDataSet(const char* group, const char* user, const char* dsName, TFileCollection* dataset, UInt_t option = 0, TMD5* checksum = 0). Writes indicated dataset.; If option has the bit kFileMustExist set, the file must still exist,; otherwise the new dataset is not written (returns 3 in this case).; If checksum is non-zero the files current checksum is checked against it,; if it does not match the file is not written (the function returns 2 in this; case, if the file has disappeared it is also not written (i.e. checksum; implies the bit kFileMustExist set in option).; Returns != 0 for success, 0 for error. Int_t ChecksumDataSet(const char* path, const char* md5path, TString& checksum); Calculate the checksum of the indicated dataset at 'path' and save it to the; appropriate file 'md5path'. The MD5 string is returned in 'md5sum'.; Return 0 on success, -1 on error. Bool_t RemoveDataSet(const char* group, const char* user, const char* dsName); ",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:2597,Security,checksum,checksum,2597,"bject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Bool_tExistsDataSet(const char* uri); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; static Int_tTDataSetManager::FillMetaData(TFileInfo* fi, TDirectory* d, const char* rdir = ""/""); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Long64_tTDataSetManager::GetAvgFileSize() const; virtual TFileCollection*GetDataSet(const char* uri, const char* srv = 0); TFileCollection*GetDataSet(const char* group, const char* user, const char* dsName, UInt_t option = 0, TMD5** checksum = 0); virtual TMap*GetDataSets(const char* uri, UInt_t option = TDataSetManager::kExport); TMap*GetDataSets(const char* group, const char* user, const char* dsName = 0, UInt_t option = 0); static TList*TDataSetManager::GetDataSetSrvMaps(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long64_tTDataSetManager::GetGroupQuota(const char* group); virtual TMap*TDataSetManager::GetGroupQuotaMap(); virtual Long64_tTDataSetManager::GetGroupUsed(const char* group); virtual const char*TObject::GetIconName() const; const char*GetMSSUrl() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*GetStageOpts() const; virtual TMap*TDataSetManager::GetSubDataSets(const char* uri, const char* excludeservers); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; vi",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:3675,Security,Hash,Hash,3675,"tManager::kExport); TMap*GetDataSets(const char* group, const char* user, const char* dsName = 0, UInt_t option = 0); static TList*TDataSetManager::GetDataSetSrvMaps(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long64_tTDataSetManager::GetGroupQuota(const char* group); virtual TMap*TDataSetManager::GetGroupQuotaMap(); virtual Long64_tTDataSetManager::GetGroupUsed(const char* group); virtual const char*TObject::GetIconName() const; const char*GetMSSUrl() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*GetStageOpts() const; virtual TMap*TDataSetManager::GetSubDataSets(const char* uri, const char* excludeservers); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTDataSetManager::MonitorUsedSpace(TVirtualMonitoringWriter* monitoring); virtual Bool_tTObject::Notify(); virtual Int_tNotifyUpdate(const char* group, const char* user, const char* dspath, Long_t mtime, const char* checksum = 0); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator d",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:4533,Security,checksum,checksum,4533,":GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTDataSetManager::MonitorUsedSpace(TVirtualMonitoringWriter* monitoring); virtual Bool_tTObject::Notify(); virtual Int_tNotifyUpdate(const char* group, const char* user, const char* dspath, Long_t mtime, const char* checksum = 0); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); static TList*TDataSetManager::ParseDataSetSrvMaps(const TString& srvmaps); virtual voidParseInitOpts(const char* opts); Bool_tTDataSetManager::ParseUri(const char* uri, TString* dsGroup = 0, TString* dsUser = 0, TString* dsName = 0, TString* dsTree = 0, Bool_t onlyCurrent = kFALSE, Bool_t wildcards = kFALSE); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const;",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:7363,Security,checksum,checksum,7363,"TString* dsTree = 0, Bool_t onlyCurrent = kFALSE, Bool_t wildcards = kFALSE); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Int_tRegisterDataSet(const char* uri, TFileCollection* dataSet, const char* opt); virtual Bool_tRemoveDataSet(const char* uri); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tScanDataSet(const char* uri, UInt_t option = kReopen|kDebug); static Int_tTDataSetManager::ScanFile(TFileInfo* fileinfo, Bool_t notify); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidTDataSetManager::SetScanCounters(Int_t t = -1, Int_t o = -1, Int_t d = -1); virtual voidTObject::SetUniqueID(UInt_t uid); virtual Int_tShowCache(const char* uri = 0); virtual voidTDataSetManager::ShowDataSets(const char* uri = ""*"", const char* opt = """"); virtual voidShowMembers(TMemberInspector& insp); virtual voidTDataSetManager::ShowQuota(const char* opt); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; Int_tWriteDataSet(const char* group, const char* user, const char* dsName, TFileCollection* dataset, UInt_t option = 0, TMD5* checksum = 0).",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:7570,Security,checksum,checksum,7570,"t option = 0, Int_t bufsize = 0) const; Int_tWriteDataSet(const char* group, const char* user, const char* dsName, TFileCollection* dataset, UInt_t option = 0, TMD5* checksum = 0). protected:. Bool_tBrowseDataSets(const char* group, const char* user, const char* dsName, UInt_t option, TObject* target); Int_tChecksumDataSet(const char* path, const char* md5path, TString& checksum); Int_tCreateLsFile(const char* group, const char* user, Long_t& mtime, TString& checksum); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Bool_tExistsDataSet(const char* group, const char* user, const char* dsName); Int_tFillLsDataSet(const char* group, const char* user, const char* dsName, TList* out, UInt_t option); const char*GetDataSetPath(const char* group, const char* user, const char* dsName); const char*GetDataSetPath(const char* group, const char* user, const char* dsName, TString& md5path, Bool_t local = kFALSE); virtual TMap*TDataSetManager::GetGroupUsedMap(); Int_tTDataSetManager::GetNDisapparedFiles() const; Int_tTDataSetManager::GetNOpenedFiles() const; Int_tTDataSetManager::GetNTouchedFiles() const; voidTDataSetManager::GetQuota(const char* group, const char* user, const char* dsName, TFileCollection* dataset); virtual TMap*TDataSetManager::GetUserUsedMap(); voidInit(); voidTObject::MakeZombie(); voidTDataSetManager::PrintDataSet(TFileCollection* fc, Int_t popt = 0); voidTDataSetManager::PrintUsedSpace(); Bool_tTDataSetManager::ReadGroupConfig(const char* cf = 0); Bool_tRemoveDataSet(const char* group, const char* user, const char* dsName); Int_tScanDataSet(const char* group, const char* user, const char* dsName, UInt_t option = kReopen|kDebug); static Long64_tTDataSetManager::ToBytes(const char* size = 0); virtual voidUpdateUsedSpace(). private:. Int_tCheckLocalCache(const char* group, const char* user, const char* dsName = ""ls"", UInt_t option = 0); voidInitLocalCache(). Data Members; public:. enum TDataSetManager::EDataSetS",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:7660,Security,checksum,checksum,7660,"t option = 0, Int_t bufsize = 0) const; Int_tWriteDataSet(const char* group, const char* user, const char* dsName, TFileCollection* dataset, UInt_t option = 0, TMD5* checksum = 0). protected:. Bool_tBrowseDataSets(const char* group, const char* user, const char* dsName, UInt_t option, TObject* target); Int_tChecksumDataSet(const char* path, const char* md5path, TString& checksum); Int_tCreateLsFile(const char* group, const char* user, Long_t& mtime, TString& checksum); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Bool_tExistsDataSet(const char* group, const char* user, const char* dsName); Int_tFillLsDataSet(const char* group, const char* user, const char* dsName, TList* out, UInt_t option); const char*GetDataSetPath(const char* group, const char* user, const char* dsName); const char*GetDataSetPath(const char* group, const char* user, const char* dsName, TString& md5path, Bool_t local = kFALSE); virtual TMap*TDataSetManager::GetGroupUsedMap(); Int_tTDataSetManager::GetNDisapparedFiles() const; Int_tTDataSetManager::GetNOpenedFiles() const; Int_tTDataSetManager::GetNTouchedFiles() const; voidTDataSetManager::GetQuota(const char* group, const char* user, const char* dsName, TFileCollection* dataset); virtual TMap*TDataSetManager::GetUserUsedMap(); voidInit(); voidTObject::MakeZombie(); voidTDataSetManager::PrintDataSet(TFileCollection* fc, Int_t popt = 0); voidTDataSetManager::PrintUsedSpace(); Bool_tTDataSetManager::ReadGroupConfig(const char* cf = 0); Bool_tRemoveDataSet(const char* group, const char* user, const char* dsName); Int_tScanDataSet(const char* group, const char* user, const char* dsName, UInt_t option = kReopen|kDebug); static Long64_tTDataSetManager::ToBytes(const char* size = 0); virtual voidUpdateUsedSpace(). private:. Int_tCheckLocalCache(const char* group, const char* user, const char* dsName = ""ls"", UInt_t option = 0); voidInitLocalCache(). Data Members; public:. enum TDataSetManager::EDataSetS",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:13011,Security,checksum,checksum,13011,"tor. void Init(); Do the real inititialization. void InitLocalCache(); Init the local cache if required. void ParseInitOpts(const char* opts); Parse the input string and set the init bits accordingly; Format is; dir:<datasetdir> [mss:<mss-url>] [opt:<base-options>]; The <datasetdir> is mandatory.; See TDataSetManager::ParseInitOpts for the available; base options.; The base options are laready initialized by the base constructor. const char * GetDataSetPath(const char* group, const char* user, const char* dsName, TString& md5path, Bool_t local = kFALSE); Returns path of the indicated dataset. The extension is '.root' for all files; except for 'dsName==ls' which have extension '.txt'.; If 'local' is kTRUE the local cache path is returned instead in the form; <cachedir>/<group>.<user>.<dsName>.<ext>.; NB: contains a static TString for result, so copy result before using twice. Int_t NotifyUpdate(const char* group, const char* user, const char* dspath, Long_t mtime, const char* checksum = 0); Save into the <datasetdir>/kDataSet_DataSetList file the name of the updated; or created or modified dataset. For still existing datasets, fill the; modification date in seconds anf the checksum.; Returns 0 on success, -1 on error. Int_t CreateLsFile(const char* group, const char* user, Long_t& mtime, TString& checksum); Create or recreate the dataset lists for 'uri'.; The list are saved in text form in 'uri'/ls.txt for fast browsing and in; 'uri'/ls.root in form of TMacro for optimized and portable transfer.; Return 0 on success, 1 if the file was empty, -1 on error. Bool_t BrowseDataSets(const char* group, const char* user, const char* dsName, UInt_t option, TObject* target); Adds the dataset in the folder of group, user to the list in target.; If dsName is defined, only the information about the specified dataset; is processed. The unsigned int 'option' is forwarded to GetDataSet and BrowseDataSet.; Available options (to be .or.ed):; kPrint print the dataset content; kQuotaUpdat",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:13212,Security,checksum,checksum,13212,"t string and set the init bits accordingly; Format is; dir:<datasetdir> [mss:<mss-url>] [opt:<base-options>]; The <datasetdir> is mandatory.; See TDataSetManager::ParseInitOpts for the available; base options.; The base options are laready initialized by the base constructor. const char * GetDataSetPath(const char* group, const char* user, const char* dsName, TString& md5path, Bool_t local = kFALSE); Returns path of the indicated dataset. The extension is '.root' for all files; except for 'dsName==ls' which have extension '.txt'.; If 'local' is kTRUE the local cache path is returned instead in the form; <cachedir>/<group>.<user>.<dsName>.<ext>.; NB: contains a static TString for result, so copy result before using twice. Int_t NotifyUpdate(const char* group, const char* user, const char* dspath, Long_t mtime, const char* checksum = 0); Save into the <datasetdir>/kDataSet_DataSetList file the name of the updated; or created or modified dataset. For still existing datasets, fill the; modification date in seconds anf the checksum.; Returns 0 on success, -1 on error. Int_t CreateLsFile(const char* group, const char* user, Long_t& mtime, TString& checksum); Create or recreate the dataset lists for 'uri'.; The list are saved in text form in 'uri'/ls.txt for fast browsing and in; 'uri'/ls.root in form of TMacro for optimized and portable transfer.; Return 0 on success, 1 if the file was empty, -1 on error. Bool_t BrowseDataSets(const char* group, const char* user, const char* dsName, UInt_t option, TObject* target); Adds the dataset in the folder of group, user to the list in target.; If dsName is defined, only the information about the specified dataset; is processed. The unsigned int 'option' is forwarded to GetDataSet and BrowseDataSet.; Available options (to be .or.ed):; kPrint print the dataset content; kQuotaUpdate update quotas; kExport use export naming; kList get a list of dataset names. NB1: options ""kPrint"", ""kQuoatUpdate"" and ""kExport"" are mutually exclusive; N",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:13338,Security,checksum,checksum,13338,"ataSetManager::ParseInitOpts for the available; base options.; The base options are laready initialized by the base constructor. const char * GetDataSetPath(const char* group, const char* user, const char* dsName, TString& md5path, Bool_t local = kFALSE); Returns path of the indicated dataset. The extension is '.root' for all files; except for 'dsName==ls' which have extension '.txt'.; If 'local' is kTRUE the local cache path is returned instead in the form; <cachedir>/<group>.<user>.<dsName>.<ext>.; NB: contains a static TString for result, so copy result before using twice. Int_t NotifyUpdate(const char* group, const char* user, const char* dspath, Long_t mtime, const char* checksum = 0); Save into the <datasetdir>/kDataSet_DataSetList file the name of the updated; or created or modified dataset. For still existing datasets, fill the; modification date in seconds anf the checksum.; Returns 0 on success, -1 on error. Int_t CreateLsFile(const char* group, const char* user, Long_t& mtime, TString& checksum); Create or recreate the dataset lists for 'uri'.; The list are saved in text form in 'uri'/ls.txt for fast browsing and in; 'uri'/ls.root in form of TMacro for optimized and portable transfer.; Return 0 on success, 1 if the file was empty, -1 on error. Bool_t BrowseDataSets(const char* group, const char* user, const char* dsName, UInt_t option, TObject* target); Adds the dataset in the folder of group, user to the list in target.; If dsName is defined, only the information about the specified dataset; is processed. The unsigned int 'option' is forwarded to GetDataSet and BrowseDataSet.; Available options (to be .or.ed):; kPrint print the dataset content; kQuotaUpdate update quotas; kExport use export naming; kList get a list of dataset names. NB1: options ""kPrint"", ""kQuoatUpdate"" and ""kExport"" are mutually exclusive; NB2: for options ""kPrint"" and ""kQuotaUpdate"" return is null. TMap * GetDataSets(const char* group, const char* user, const char* dsName = 0, UInt_t op",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:15856,Security,checksum,checksum,15856,"set> are TFileCollection objects); kShowDefault as kExport with in addition a default selection including; the datasets from the current user, the ones from the group; and the common ones. kPrint print the dataset content; no output is returned; kList get a list of available dataset names; kForceScan Re-open files while processing kPrint (do not use the; pre-processed information); kNoHeaderPrint Labelling header is not printed; kQuotaUpdate update {group, user} quotas; no output is returned. NB1: options ""kPrint"", ""kQuoatUpdate"" and ""kExport"" are mutually exclusive; NB2: for options ""kPrint"" and ""kQuoatUpdate"" return is null. Int_t FillLsDataSet(const char* group, const char* user, const char* dsName, TList* out, UInt_t option); Check for the 'ls.txt' for 'group' and 'user' and fill the path for the; ls file in 'out'.; If 'dsname' is defined, open the file and extract the relevant line.; Return 0 on success, -1 on failure. TFileCollection * GetDataSet(const char* group, const char* user, const char* dsName, UInt_t option = 0, TMD5** checksum = 0). Returns the dataset <dsName> of user <user> in group <group> .; If checksum is non-zero, it will contain the pointer to a TMD5 sum object; with the checksum of the file, has to be deleted by the user.; If option has the bi kReadShort set, the shortobject is read, that does not; contain the list of files. This is much faster. Int_t CheckLocalCache(const char* group, const char* user, const char* dsName = ""ls"", UInt_t option = 0); Check if the local cache information for group, user, dsName is up-to-date; If not, make the relevant updates; Return 0 if OK, 1 if the dataset does not exists anymore, -1 on failure. Int_t ClearCache(const char* uri = 0); Clear cached information matching uri. Int_t ShowCache(const char* uri = 0); Show cached information matching uri. Int_t WriteDataSet(const char* group, const char* user, const char* dsName, TFileCollection* dataset, UInt_t option = 0, TMD5* checksum = 0). Writes indicated datase",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:15938,Security,checksum,checksum,15938,"print the dataset content; no output is returned; kList get a list of available dataset names; kForceScan Re-open files while processing kPrint (do not use the; pre-processed information); kNoHeaderPrint Labelling header is not printed; kQuotaUpdate update {group, user} quotas; no output is returned. NB1: options ""kPrint"", ""kQuoatUpdate"" and ""kExport"" are mutually exclusive; NB2: for options ""kPrint"" and ""kQuoatUpdate"" return is null. Int_t FillLsDataSet(const char* group, const char* user, const char* dsName, TList* out, UInt_t option); Check for the 'ls.txt' for 'group' and 'user' and fill the path for the; ls file in 'out'.; If 'dsname' is defined, open the file and extract the relevant line.; Return 0 on success, -1 on failure. TFileCollection * GetDataSet(const char* group, const char* user, const char* dsName, UInt_t option = 0, TMD5** checksum = 0). Returns the dataset <dsName> of user <user> in group <group> .; If checksum is non-zero, it will contain the pointer to a TMD5 sum object; with the checksum of the file, has to be deleted by the user.; If option has the bi kReadShort set, the shortobject is read, that does not; contain the list of files. This is much faster. Int_t CheckLocalCache(const char* group, const char* user, const char* dsName = ""ls"", UInt_t option = 0); Check if the local cache information for group, user, dsName is up-to-date; If not, make the relevant updates; Return 0 if OK, 1 if the dataset does not exists anymore, -1 on failure. Int_t ClearCache(const char* uri = 0); Clear cached information matching uri. Int_t ShowCache(const char* uri = 0); Show cached information matching uri. Int_t WriteDataSet(const char* group, const char* user, const char* dsName, TFileCollection* dataset, UInt_t option = 0, TMD5* checksum = 0). Writes indicated dataset.; If option has the bit kFileMustExist set, the file must still exist,; otherwise the new dataset is not written (returns 3 in this case).; If checksum is non-zero the files current checksum is",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:16019,Security,checksum,checksum,16019,"print the dataset content; no output is returned; kList get a list of available dataset names; kForceScan Re-open files while processing kPrint (do not use the; pre-processed information); kNoHeaderPrint Labelling header is not printed; kQuotaUpdate update {group, user} quotas; no output is returned. NB1: options ""kPrint"", ""kQuoatUpdate"" and ""kExport"" are mutually exclusive; NB2: for options ""kPrint"" and ""kQuoatUpdate"" return is null. Int_t FillLsDataSet(const char* group, const char* user, const char* dsName, TList* out, UInt_t option); Check for the 'ls.txt' for 'group' and 'user' and fill the path for the; ls file in 'out'.; If 'dsname' is defined, open the file and extract the relevant line.; Return 0 on success, -1 on failure. TFileCollection * GetDataSet(const char* group, const char* user, const char* dsName, UInt_t option = 0, TMD5** checksum = 0). Returns the dataset <dsName> of user <user> in group <group> .; If checksum is non-zero, it will contain the pointer to a TMD5 sum object; with the checksum of the file, has to be deleted by the user.; If option has the bi kReadShort set, the shortobject is read, that does not; contain the list of files. This is much faster. Int_t CheckLocalCache(const char* group, const char* user, const char* dsName = ""ls"", UInt_t option = 0); Check if the local cache information for group, user, dsName is up-to-date; If not, make the relevant updates; Return 0 if OK, 1 if the dataset does not exists anymore, -1 on failure. Int_t ClearCache(const char* uri = 0); Clear cached information matching uri. Int_t ShowCache(const char* uri = 0); Show cached information matching uri. Int_t WriteDataSet(const char* group, const char* user, const char* dsName, TFileCollection* dataset, UInt_t option = 0, TMD5* checksum = 0). Writes indicated dataset.; If option has the bit kFileMustExist set, the file must still exist,; otherwise the new dataset is not written (returns 3 in this case).; If checksum is non-zero the files current checksum is",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:16769,Security,checksum,checksum,16769,"rn 0 on success, -1 on failure. TFileCollection * GetDataSet(const char* group, const char* user, const char* dsName, UInt_t option = 0, TMD5** checksum = 0). Returns the dataset <dsName> of user <user> in group <group> .; If checksum is non-zero, it will contain the pointer to a TMD5 sum object; with the checksum of the file, has to be deleted by the user.; If option has the bi kReadShort set, the shortobject is read, that does not; contain the list of files. This is much faster. Int_t CheckLocalCache(const char* group, const char* user, const char* dsName = ""ls"", UInt_t option = 0); Check if the local cache information for group, user, dsName is up-to-date; If not, make the relevant updates; Return 0 if OK, 1 if the dataset does not exists anymore, -1 on failure. Int_t ClearCache(const char* uri = 0); Clear cached information matching uri. Int_t ShowCache(const char* uri = 0); Show cached information matching uri. Int_t WriteDataSet(const char* group, const char* user, const char* dsName, TFileCollection* dataset, UInt_t option = 0, TMD5* checksum = 0). Writes indicated dataset.; If option has the bit kFileMustExist set, the file must still exist,; otherwise the new dataset is not written (returns 3 in this case).; If checksum is non-zero the files current checksum is checked against it,; if it does not match the file is not written (the function returns 2 in this; case, if the file has disappeared it is also not written (i.e. checksum; implies the bit kFileMustExist set in option).; Returns != 0 for success, 0 for error. Int_t ChecksumDataSet(const char* path, const char* md5path, TString& checksum); Calculate the checksum of the indicated dataset at 'path' and save it to the; appropriate file 'md5path'. The MD5 string is returned in 'md5sum'.; Return 0 on success, -1 on error. Bool_t RemoveDataSet(const char* group, const char* user, const char* dsName); Removes the indicated dataset. Bool_t ExistsDataSet(const char* group, const char* user, const char* dsName);",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:16952,Security,checksum,checksum,16952,"eted by the user.; If option has the bi kReadShort set, the shortobject is read, that does not; contain the list of files. This is much faster. Int_t CheckLocalCache(const char* group, const char* user, const char* dsName = ""ls"", UInt_t option = 0); Check if the local cache information for group, user, dsName is up-to-date; If not, make the relevant updates; Return 0 if OK, 1 if the dataset does not exists anymore, -1 on failure. Int_t ClearCache(const char* uri = 0); Clear cached information matching uri. Int_t ShowCache(const char* uri = 0); Show cached information matching uri. Int_t WriteDataSet(const char* group, const char* user, const char* dsName, TFileCollection* dataset, UInt_t option = 0, TMD5* checksum = 0). Writes indicated dataset.; If option has the bit kFileMustExist set, the file must still exist,; otherwise the new dataset is not written (returns 3 in this case).; If checksum is non-zero the files current checksum is checked against it,; if it does not match the file is not written (the function returns 2 in this; case, if the file has disappeared it is also not written (i.e. checksum; implies the bit kFileMustExist set in option).; Returns != 0 for success, 0 for error. Int_t ChecksumDataSet(const char* path, const char* md5path, TString& checksum); Calculate the checksum of the indicated dataset at 'path' and save it to the; appropriate file 'md5path'. The MD5 string is returned in 'md5sum'.; Return 0 on success, -1 on error. Bool_t RemoveDataSet(const char* group, const char* user, const char* dsName); Removes the indicated dataset. Bool_t ExistsDataSet(const char* group, const char* user, const char* dsName); Checks if the indicated dataset exits. Int_t RegisterDataSet(const char* uri, TFileCollection* dataSet, const char* opt); Register a dataset, perfoming quota checkings and verification, if required.; If a dataset with the same name already exists the action fails unless 'opts'; contains 'O', in which case the old dataset is overwritten, or ",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:16991,Security,checksum,checksum,16991,"eted by the user.; If option has the bi kReadShort set, the shortobject is read, that does not; contain the list of files. This is much faster. Int_t CheckLocalCache(const char* group, const char* user, const char* dsName = ""ls"", UInt_t option = 0); Check if the local cache information for group, user, dsName is up-to-date; If not, make the relevant updates; Return 0 if OK, 1 if the dataset does not exists anymore, -1 on failure. Int_t ClearCache(const char* uri = 0); Clear cached information matching uri. Int_t ShowCache(const char* uri = 0); Show cached information matching uri. Int_t WriteDataSet(const char* group, const char* user, const char* dsName, TFileCollection* dataset, UInt_t option = 0, TMD5* checksum = 0). Writes indicated dataset.; If option has the bit kFileMustExist set, the file must still exist,; otherwise the new dataset is not written (returns 3 in this case).; If checksum is non-zero the files current checksum is checked against it,; if it does not match the file is not written (the function returns 2 in this; case, if the file has disappeared it is also not written (i.e. checksum; implies the bit kFileMustExist set in option).; Returns != 0 for success, 0 for error. Int_t ChecksumDataSet(const char* path, const char* md5path, TString& checksum); Calculate the checksum of the indicated dataset at 'path' and save it to the; appropriate file 'md5path'. The MD5 string is returned in 'md5sum'.; Return 0 on success, -1 on error. Bool_t RemoveDataSet(const char* group, const char* user, const char* dsName); Removes the indicated dataset. Bool_t ExistsDataSet(const char* group, const char* user, const char* dsName); Checks if the indicated dataset exits. Int_t RegisterDataSet(const char* uri, TFileCollection* dataSet, const char* opt); Register a dataset, perfoming quota checkings and verification, if required.; If a dataset with the same name already exists the action fails unless 'opts'; contains 'O', in which case the old dataset is overwritten, or ",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:17165,Security,checksum,checksum,17165,"ster. Int_t CheckLocalCache(const char* group, const char* user, const char* dsName = ""ls"", UInt_t option = 0); Check if the local cache information for group, user, dsName is up-to-date; If not, make the relevant updates; Return 0 if OK, 1 if the dataset does not exists anymore, -1 on failure. Int_t ClearCache(const char* uri = 0); Clear cached information matching uri. Int_t ShowCache(const char* uri = 0); Show cached information matching uri. Int_t WriteDataSet(const char* group, const char* user, const char* dsName, TFileCollection* dataset, UInt_t option = 0, TMD5* checksum = 0). Writes indicated dataset.; If option has the bit kFileMustExist set, the file must still exist,; otherwise the new dataset is not written (returns 3 in this case).; If checksum is non-zero the files current checksum is checked against it,; if it does not match the file is not written (the function returns 2 in this; case, if the file has disappeared it is also not written (i.e. checksum; implies the bit kFileMustExist set in option).; Returns != 0 for success, 0 for error. Int_t ChecksumDataSet(const char* path, const char* md5path, TString& checksum); Calculate the checksum of the indicated dataset at 'path' and save it to the; appropriate file 'md5path'. The MD5 string is returned in 'md5sum'.; Return 0 on success, -1 on error. Bool_t RemoveDataSet(const char* group, const char* user, const char* dsName); Removes the indicated dataset. Bool_t ExistsDataSet(const char* group, const char* user, const char* dsName); Checks if the indicated dataset exits. Int_t RegisterDataSet(const char* uri, TFileCollection* dataSet, const char* opt); Register a dataset, perfoming quota checkings and verification, if required.; If a dataset with the same name already exists the action fails unless 'opts'; contains 'O', in which case the old dataset is overwritten, or contains 'U',; in which case 'newDataSet' is added to the existing dataset (duplications are; ignored, if any).; If 'opts' contains 'V' th",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:17268,Security,Checksum,ChecksumDataSet,17268,"er, dsName is up-to-date; If not, make the relevant updates; Return 0 if OK, 1 if the dataset does not exists anymore, -1 on failure. Int_t ClearCache(const char* uri = 0); Clear cached information matching uri. Int_t ShowCache(const char* uri = 0); Show cached information matching uri. Int_t WriteDataSet(const char* group, const char* user, const char* dsName, TFileCollection* dataset, UInt_t option = 0, TMD5* checksum = 0). Writes indicated dataset.; If option has the bit kFileMustExist set, the file must still exist,; otherwise the new dataset is not written (returns 3 in this case).; If checksum is non-zero the files current checksum is checked against it,; if it does not match the file is not written (the function returns 2 in this; case, if the file has disappeared it is also not written (i.e. checksum; implies the bit kFileMustExist set in option).; Returns != 0 for success, 0 for error. Int_t ChecksumDataSet(const char* path, const char* md5path, TString& checksum); Calculate the checksum of the indicated dataset at 'path' and save it to the; appropriate file 'md5path'. The MD5 string is returned in 'md5sum'.; Return 0 on success, -1 on error. Bool_t RemoveDataSet(const char* group, const char* user, const char* dsName); Removes the indicated dataset. Bool_t ExistsDataSet(const char* group, const char* user, const char* dsName); Checks if the indicated dataset exits. Int_t RegisterDataSet(const char* uri, TFileCollection* dataSet, const char* opt); Register a dataset, perfoming quota checkings and verification, if required.; If a dataset with the same name already exists the action fails unless 'opts'; contains 'O', in which case the old dataset is overwritten, or contains 'U',; in which case 'newDataSet' is added to the existing dataset (duplications are; ignored, if any).; If 'opts' contains 'V' the dataset files are also verified (if the dataset manager; is configured to allow so). By default the dataset is not verified.; If 'opts' contains 'T' the in the ",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:17332,Security,checksum,checksum,17332,"er, dsName is up-to-date; If not, make the relevant updates; Return 0 if OK, 1 if the dataset does not exists anymore, -1 on failure. Int_t ClearCache(const char* uri = 0); Clear cached information matching uri. Int_t ShowCache(const char* uri = 0); Show cached information matching uri. Int_t WriteDataSet(const char* group, const char* user, const char* dsName, TFileCollection* dataset, UInt_t option = 0, TMD5* checksum = 0). Writes indicated dataset.; If option has the bit kFileMustExist set, the file must still exist,; otherwise the new dataset is not written (returns 3 in this case).; If checksum is non-zero the files current checksum is checked against it,; if it does not match the file is not written (the function returns 2 in this; case, if the file has disappeared it is also not written (i.e. checksum; implies the bit kFileMustExist set in option).; Returns != 0 for success, 0 for error. Int_t ChecksumDataSet(const char* path, const char* md5path, TString& checksum); Calculate the checksum of the indicated dataset at 'path' and save it to the; appropriate file 'md5path'. The MD5 string is returned in 'md5sum'.; Return 0 on success, -1 on error. Bool_t RemoveDataSet(const char* group, const char* user, const char* dsName); Removes the indicated dataset. Bool_t ExistsDataSet(const char* group, const char* user, const char* dsName); Checks if the indicated dataset exits. Int_t RegisterDataSet(const char* uri, TFileCollection* dataSet, const char* opt); Register a dataset, perfoming quota checkings and verification, if required.; If a dataset with the same name already exists the action fails unless 'opts'; contains 'O', in which case the old dataset is overwritten, or contains 'U',; in which case 'newDataSet' is added to the existing dataset (duplications are; ignored, if any).; If 'opts' contains 'V' the dataset files are also verified (if the dataset manager; is configured to allow so). By default the dataset is not verified.; If 'opts' contains 'T' the in the ",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:17357,Security,checksum,checksum,17357,"er, dsName is up-to-date; If not, make the relevant updates; Return 0 if OK, 1 if the dataset does not exists anymore, -1 on failure. Int_t ClearCache(const char* uri = 0); Clear cached information matching uri. Int_t ShowCache(const char* uri = 0); Show cached information matching uri. Int_t WriteDataSet(const char* group, const char* user, const char* dsName, TFileCollection* dataset, UInt_t option = 0, TMD5* checksum = 0). Writes indicated dataset.; If option has the bit kFileMustExist set, the file must still exist,; otherwise the new dataset is not written (returns 3 in this case).; If checksum is non-zero the files current checksum is checked against it,; if it does not match the file is not written (the function returns 2 in this; case, if the file has disappeared it is also not written (i.e. checksum; implies the bit kFileMustExist set in option).; Returns != 0 for success, 0 for error. Int_t ChecksumDataSet(const char* path, const char* md5path, TString& checksum); Calculate the checksum of the indicated dataset at 'path' and save it to the; appropriate file 'md5path'. The MD5 string is returned in 'md5sum'.; Return 0 on success, -1 on error. Bool_t RemoveDataSet(const char* group, const char* user, const char* dsName); Removes the indicated dataset. Bool_t ExistsDataSet(const char* group, const char* user, const char* dsName); Checks if the indicated dataset exits. Int_t RegisterDataSet(const char* uri, TFileCollection* dataSet, const char* opt); Register a dataset, perfoming quota checkings and verification, if required.; If a dataset with the same name already exists the action fails unless 'opts'; contains 'O', in which case the old dataset is overwritten, or contains 'U',; in which case 'newDataSet' is added to the existing dataset (duplications are; ignored, if any).; If 'opts' contains 'V' the dataset files are also verified (if the dataset manager; is configured to allow so). By default the dataset is not verified.; If 'opts' contains 'T' the in the ",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
https://root.cern/root/html532/TDataSetManagerFile.html:6874,Testability,Test,TestBit,6874,"TString* dsTree = 0, Bool_t onlyCurrent = kFALSE, Bool_t wildcards = kFALSE); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Int_tRegisterDataSet(const char* uri, TFileCollection* dataSet, const char* opt); virtual Bool_tRemoveDataSet(const char* uri); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tScanDataSet(const char* uri, UInt_t option = kReopen|kDebug); static Int_tTDataSetManager::ScanFile(TFileInfo* fileinfo, Bool_t notify); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidTDataSetManager::SetScanCounters(Int_t t = -1, Int_t o = -1, Int_t d = -1); virtual voidTObject::SetUniqueID(UInt_t uid); virtual Int_tShowCache(const char* uri = 0); virtual voidTDataSetManager::ShowDataSets(const char* uri = ""*"", const char* opt = """"); virtual voidShowMembers(TMemberInspector& insp); virtual voidTDataSetManager::ShowQuota(const char* opt); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; Int_tWriteDataSet(const char* group, const char* user, const char* dsName, TFileCollection* dataset, UInt_t option = 0, TMD5* checksum = 0).",MatchSource.WIKI,root/html532/TDataSetManagerFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html532/TDataSetManagerFile.html
