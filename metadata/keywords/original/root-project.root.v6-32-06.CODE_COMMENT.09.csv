id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:44,Security,access,access,44,/// The location of the colon following the access specifier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:275,Security,access,access,275,"/// Represents a base class of a C++ class.; ///; /// Each CXXBaseSpecifier represents a single, direct base class (or; /// struct) of a C++ class (or struct). It specifies the type of that; /// base class, whether it is a virtual or non-virtual base, and what; /// level of access (public, protected, private) is used for the; /// derivation. For example:; ///; /// \code; /// class A { };; /// class B { };; /// class C : public virtual A, protected B { };; /// \endcode; ///; /// In this code, C will have two CXXBaseSpecifiers, one for ""public; /// virtual A"" and the other for ""protected B"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:109,Security,access,access,109,"/// The source code range that covers the full base; /// specifier, including the ""virtual"" (if present) and access; /// specifier (if present).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:118,Security,access,access,118,/// Whether this is the base of a class (true) or of a struct (false).; ///; /// This determines the mapping from the access specifier as written in the; /// source code to the access specifier used for semantic analysis.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:177,Security,access,access,177,/// Whether this is the base of a class (true) or of a struct (false).; ///; /// This determines the mapping from the access specifier as written in the; /// source code to the access specifier used for semantic analysis.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:4,Security,Access,Access,4,"/// Access specifier as written in the source code (may be AS_none).; ///; /// The actual type of data stored here is an AccessSpecifier, but we use; /// ""unsigned"" here to work around Microsoft ABI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:121,Security,Access,AccessSpecifier,121,"/// Access specifier as written in the source code (may be AS_none).; ///; /// The actual type of data stored here is an AccessSpecifier, but we use; /// ""unsigned"" here to work around Microsoft ABI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:59,Modifiability,inherit,inherit,59,/// Whether the class contains a using declaration; /// to inherit the named class's constructors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:163,Security,access,access,163,/// The type of the base class.; ///; /// This will be a class or struct (or a typedef of such). The source code; /// range does not include the \c virtual or the access specifier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:57,Modifiability,inherit,inherited,57,/// Determine whether this base class's constructors get inherited.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:54,Modifiability,inherit,inherited,54,/// Set that this base class's constructors should be inherited.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:16,Security,access,access,16,"/// Returns the access specifier for this base specifier.; ///; /// This is the actual base specifier as used for semantic analysis, so; /// the result can never be AS_none. To retrieve the access specifier as; /// written in the source code, use getAccessSpecifierAsWritten().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:190,Security,access,access,190,"/// Returns the access specifier for this base specifier.; ///; /// This is the actual base specifier as used for semantic analysis, so; /// the result can never be AS_none. To retrieve the access specifier as; /// written in the source code, use getAccessSpecifierAsWritten().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:18,Security,access,access,18,/// Retrieves the access specifier as written in the source code; /// (which may mean that no access specifier was explicitly written).; ///; /// Use getAccessSpecifier() to retrieve the access specifier for use in; /// semantic analysis.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:94,Security,access,access,94,/// Retrieves the access specifier as written in the source code; /// (which may mean that no access specifier was explicitly written).; ///; /// Use getAccessSpecifier() to retrieve the access specifier for use in; /// semantic analysis.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:187,Security,access,access,187,/// Retrieves the access specifier as written in the source code; /// (which may mean that no access specifier was explicitly written).; ///; /// Use getAccessSpecifier() to retrieve the access specifier for use in; /// semantic analysis.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:77,Availability,avail,available,77,/// True when visible conversion functions are already computed; /// and are available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:6,Security,hash,hash,6,/// A hash of parts of the class to help in ODR checking.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:65,Modifiability,inherit,inherited,65,/// The conversion functions of this C++ class (but not its; /// inherited conversion functions).; ///; /// Each of the entries in this overload set is a CXXConversionDecl.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:66,Modifiability,inherit,inherited,66,/// The conversion functions of this C++ class and all those; /// inherited conversion functions that are visible in this class.; ///; /// Each of the entries in this overload set is a CXXConversionDecl or a; /// FunctionTemplateDecl.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:39,Integrability,depend,dependent,39,"/// Whether this lambda is known to be dependent, even if its; /// context isn't dependent.; ///; /// A lambda with a non-dependent context can be dependent if it occurs; /// within the default argument of a function template, because the; /// lambda will have been created with the enclosing context as its; /// declaration context, rather than function. This is an unfortunate; /// artifact of having to parse the default arguments before.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:81,Integrability,depend,dependent,81,"/// Whether this lambda is known to be dependent, even if its; /// context isn't dependent.; ///; /// A lambda with a non-dependent context can be dependent if it occurs; /// within the default argument of a function template, because the; /// lambda will have been created with the enclosing context as its; /// declaration context, rather than function. This is an unfortunate; /// artifact of having to parse the default arguments before.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:122,Integrability,depend,dependent,122,"/// Whether this lambda is known to be dependent, even if its; /// context isn't dependent.; ///; /// A lambda with a non-dependent context can be dependent if it occurs; /// within the default argument of a function template, because the; /// lambda will have been created with the enclosing context as its; /// declaration context, rather than function. This is an unfortunate; /// artifact of having to parse the default arguments before.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:147,Integrability,depend,dependent,147,"/// Whether this lambda is known to be dependent, even if its; /// context isn't dependent.; ///; /// A lambda with a non-dependent context can be dependent if it occurs; /// within the default argument of a function template, because the; /// lambda will have been created with the enclosing context as its; /// declaration context, rather than function. This is an unfortunate; /// artifact of having to parse the default arguments before.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:6,Deployability,update,update,6,// No update required: a merged definition cannot change any lambda; // properties.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:64,Integrability,rout,routine,64,/// Notify the class that member has been added.; ///; /// This routine helps maintain information about the class based on which; /// members have been added. It will be invoked by DeclContext::addDecl(); /// whenever a member is added to this record.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:15,Integrability,inject,injected,15,// FIXME: Does injected class name need to be in the redeclarations chain?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:15,Security,inject,injected,15,// FIXME: Does injected class name need to be in the redeclarations chain?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:19,Deployability,update,update,19,// We only need an update if we don't already know which; // declaration is the definition.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:103,Integrability,depend,dependent,103,/// @returns true if class is dynamic or might be dynamic because the; /// definition is incomplete of dependent.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:111,Integrability,depend,dependent,111,/// @returns true if class is non dynamic or might be non dynamic because the; /// definition is incomplete of dependent.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:41,Integrability,depend,dependent,41,/// Determine whether this class has any dependent base classes which; /// are not the current instantiation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:13,Security,access,access,13,"/// Iterator access to method members. The method iterator visits; /// all method members of the class, including non-instance methods,; /// special methods, etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:13,Security,access,access,13,/// Iterator access to constructor members.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:67,Security,access,accessible,67,"/// \c true if we know for sure that this class has a single,; /// accessible, unambiguous copy constructor that is not deleted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:67,Security,access,accessible,67,"/// \c true if we know for sure that this class has a single,; /// accessible, unambiguous move constructor that is not deleted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:67,Security,access,accessible,67,"/// \c true if we know for sure that this class has a single,; /// accessible, unambiguous copy assignment operator that is not deleted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:67,Security,access,accessible,67,"/// \c true if we know for sure that this class has a single,; /// accessible, unambiguous move assignment operator that is not deleted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:55,Security,access,accessible,55,/// \c true if we know for sure that this class has an accessible; /// destructor that is not deleted.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:57,Modifiability,inherit,inherits,57,"// FIXME: Proposed fix to core wording issue: if a class inherits; // a default constructor and doesn't explicitly declare one, one; // is declared implicitly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:6,Deployability,update,update,6,// An update record can't turn a non-lambda into a lambda.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:17,Integrability,depend,dependent,17,/// Retrieve the dependent lambda call operator of the closure type; /// if this is a templated closure type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:64,Modifiability,variab,variables,64,"/// For a closure type, retrieve the mapping from captured; /// variables and \c this to the non-static data members that store the; /// values or references of the captures.; ///; /// \param Captures Will be populated with the mapping from captured; /// variables to the corresponding fields.; ///; /// \param ThisCapture Will be set to the field declaration for the; /// \c this capture.; ///; /// \note No entries will be added for init-captures, as they do not capture; /// variables.; ///; /// \note If multiple versions of the lambda are merged together, they may; /// have different variable declarations corresponding to the same capture.; /// In that case, all of those variable declarations will be added to the; /// Captures list, so it may have more than one variable listed per field.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:255,Modifiability,variab,variables,255,"/// For a closure type, retrieve the mapping from captured; /// variables and \c this to the non-static data members that store the; /// values or references of the captures.; ///; /// \param Captures Will be populated with the mapping from captured; /// variables to the corresponding fields.; ///; /// \param ThisCapture Will be set to the field declaration for the; /// \c this capture.; ///; /// \note No entries will be added for init-captures, as they do not capture; /// variables.; ///; /// \note If multiple versions of the lambda are merged together, they may; /// have different variable declarations corresponding to the same capture.; /// In that case, all of those variable declarations will be added to the; /// Captures list, so it may have more than one variable listed per field.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:478,Modifiability,variab,variables,478,"/// For a closure type, retrieve the mapping from captured; /// variables and \c this to the non-static data members that store the; /// values or references of the captures.; ///; /// \param Captures Will be populated with the mapping from captured; /// variables to the corresponding fields.; ///; /// \param ThisCapture Will be set to the field declaration for the; /// \c this capture.; ///; /// \note No entries will be added for init-captures, as they do not capture; /// variables.; ///; /// \note If multiple versions of the lambda are merged together, they may; /// have different variable declarations corresponding to the same capture.; /// In that case, all of those variable declarations will be added to the; /// Captures list, so it may have more than one variable listed per field.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:590,Modifiability,variab,variable,590,"/// For a closure type, retrieve the mapping from captured; /// variables and \c this to the non-static data members that store the; /// values or references of the captures.; ///; /// \param Captures Will be populated with the mapping from captured; /// variables to the corresponding fields.; ///; /// \param ThisCapture Will be set to the field declaration for the; /// \c this capture.; ///; /// \note No entries will be added for init-captures, as they do not capture; /// variables.; ///; /// \note If multiple versions of the lambda are merged together, they may; /// have different variable declarations corresponding to the same capture.; /// In that case, all of those variable declarations will be added to the; /// Captures list, so it may have more than one variable listed per field.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:679,Modifiability,variab,variable,679,"/// For a closure type, retrieve the mapping from captured; /// variables and \c this to the non-static data members that store the; /// values or references of the captures.; ///; /// \param Captures Will be populated with the mapping from captured; /// variables to the corresponding fields.; ///; /// \param ThisCapture Will be set to the field declaration for the; /// \c this capture.; ///; /// \note No entries will be added for init-captures, as they do not capture; /// variables.; ///; /// \note If multiple versions of the lambda are merged together, they may; /// have different variable declarations corresponding to the same capture.; /// In that case, all of those variable declarations will be added to the; /// Captures list, so it may have more than one variable listed per field.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:771,Modifiability,variab,variable,771,"/// For a closure type, retrieve the mapping from captured; /// variables and \c this to the non-static data members that store the; /// values or references of the captures.; ///; /// \param Captures Will be populated with the mapping from captured; /// variables to the corresponding fields.; ///; /// \param ThisCapture Will be set to the field declaration for the; /// \c this capture.; ///; /// \note No entries will be added for init-captures, as they do not capture; /// variables.; ///; /// \note If multiple versions of the lambda are merged together, they may; /// have different variable declarations corresponding to the same capture.; /// In that case, all of those variable declarations will be added to the; /// Captures list, so it may have more than one variable listed per field.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:26,Modifiability,polymorphi,polymorphic,26,"/// Whether this class is polymorphic (C++ [class.virtual]),; /// which means that the class contains or inherits a virtual function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:105,Modifiability,inherit,inherits,105,"/// Whether this class is polymorphic (C++ [class.virtual]),; /// which means that the class contains or inherits a virtual function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:170,Modifiability,inherit,inherits,170,/// Determine whether this class has a pure virtual function.; ///; /// The class is abstract per (C++ [class.abstract]p2) if it declares; /// a pure virtual function or inherits a pure virtual function that is; /// not overridden.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:40,Modifiability,variab,variable,40,/// Determine whether declaring a const variable with this type is ok; /// per core issue 253.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:103,Integrability,depend,depend,103,"/// Notify the class that this destructor is now selected.; ///; /// Important properties of the class depend on destructor properties. Since; /// C++20, it is possible to have multiple destructor declarations in a class; /// out of which one will be selected at the end.; /// This is called separately from addedMember because it has to be deferred; /// to the completion of the class.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:68,Deployability,update,updates,68,/// Notify the class that an eligible SMF has been added.; /// This updates triviality and destructor based properties of the class accordingly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:137,Integrability,rout,routine,137,"/// If this record is an instantiation of a member class,; /// retrieves the member class from which it was instantiated.; ///; /// This routine will return non-null for (non-templated) member; /// classes of class templates. For example, given:; ///; /// \code; /// template<typename T>; /// struct X {; /// struct A { };; /// };; /// \endcode; ///; /// The declaration for X<int>::A is a (non-templated) CXXRecordDecl; /// whose parent is the class template specialization X<int>. For; /// this declaration, getInstantiatedFromMemberClass() will return; /// the CXXRecordDecl X<T>::A. When a complete definition of; /// X<int>::A is required, it will be instantiated from the; /// declaration returned by getInstantiatedFromMemberClass().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:27,Integrability,depend,dependent,27,"/// Determine whether this dependent class is a current instantiation,; /// when viewed from within the given context.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:83,Integrability,rout,routine,83,"/// Determine whether this class is derived from the class \p Base.; ///; /// This routine only determines whether this class is derived from \p Base,; /// but does not account for factors that may make a Derived -> Base class; /// ill-formed, such as private/protected inheritance or multiple, ambiguous; /// base class subobjects.; ///; /// \param Base the base class we are searching for.; ///; /// \returns true if this class is derived from Base, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:270,Modifiability,inherit,inheritance,270,"/// Determine whether this class is derived from the class \p Base.; ///; /// This routine only determines whether this class is derived from \p Base,; /// but does not account for factors that may make a Derived -> Base class; /// ill-formed, such as private/protected inheritance or multiple, ambiguous; /// base class subobjects.; ///; /// \param Base the base class we are searching for.; ///; /// \returns true if this class is derived from Base, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:82,Integrability,rout,routine,82,"/// Determine whether this class is derived from the type \p Base.; ///; /// This routine only determines whether this class is derived from \p Base,; /// but does not account for factors that may make a Derived -> Base class; /// ill-formed, such as private/protected inheritance or multiple, ambiguous; /// base class subobjects.; ///; /// \param Base the base class we are searching for.; ///; /// \param Paths will contain the paths taken from the current class to the; /// given \p Base class.; ///; /// \returns true if this class is derived from \p Base, false otherwise.; ///; /// \todo add a separate parameter to configure IsDerivedFrom, rather than; /// tangling input and output in \p Paths",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:269,Modifiability,inherit,inheritance,269,"/// Determine whether this class is derived from the type \p Base.; ///; /// This routine only determines whether this class is derived from \p Base,; /// but does not account for factors that may make a Derived -> Base class; /// ill-formed, such as private/protected inheritance or multiple, ambiguous; /// base class subobjects.; ///; /// \param Base the base class we are searching for.; ///; /// \param Paths will contain the paths taken from the current class to the; /// given \p Base class.; ///; /// \returns true if this class is derived from \p Base, false otherwise.; ///; /// \todo add a separate parameter to configure IsDerivedFrom, rather than; /// tangling input and output in \p Paths",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:623,Modifiability,config,configure,623,"/// Determine whether this class is derived from the type \p Base.; ///; /// This routine only determines whether this class is derived from \p Base,; /// but does not account for factors that may make a Derived -> Base class; /// ill-formed, such as private/protected inheritance or multiple, ambiguous; /// base class subobjects.; ///; /// \param Base the base class we are searching for.; ///; /// \param Paths will contain the paths taken from the current class to the; /// given \p Base class.; ///; /// \returns true if this class is derived from \p Base, false otherwise.; ///; /// \todo add a separate parameter to configure IsDerivedFrom, rather than; /// tangling input and output in \p Paths",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:98,Integrability,rout,routine,98,"/// Determine whether this class is virtually derived from; /// the class \p Base.; ///; /// This routine only determines whether this class is virtually; /// derived from \p Base, but does not account for factors that may; /// make a Derived -> Base class ill-formed, such as; /// private/protected inheritance or multiple, ambiguous base class; /// subobjects.; ///; /// \param Base the base class we are searching for.; ///; /// \returns true if this class is virtually derived from Base,; /// false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:300,Modifiability,inherit,inheritance,300,"/// Determine whether this class is virtually derived from; /// the class \p Base.; ///; /// This routine only determines whether this class is virtually; /// derived from \p Base, but does not account for factors that may; /// make a Derived -> Base class ill-formed, such as; /// private/protected inheritance or multiple, ambiguous base class; /// subobjects.; ///; /// \param Base the base class we are searching for.; ///; /// \returns true if this class is virtually derived from Base,; /// false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:170,Integrability,rout,routine,170,/// Determines if the given callback holds for all the direct; /// or indirect base classes of this type.; ///; /// The class itself does not count as a base class. This routine; /// returns false if the class has non-computable base classes.; ///; /// \param BaseMatches Callback invoked for each (direct or indirect) base; /// class of this type until a call returns false.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:329,Availability,down,down,329,"/// Function type used by lookupInBases() to determine whether a; /// specific base class subobject matches the lookup criteria.; ///; /// \param Specifier the base-class specifier that describes the inheritance; /// from the base class we are trying to match.; ///; /// \param Path the current path, from the most-derived class down to the; /// base named by the \p Specifier.; ///; /// \returns true if this base matched the search criteria, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:200,Modifiability,inherit,inheritance,200,"/// Function type used by lookupInBases() to determine whether a; /// specific base class subobject matches the lookup criteria.; ///; /// \param Specifier the base-class specifier that describes the inheritance; /// from the base class we are trying to match.; ///; /// \param Path the current path, from the most-derived class down to the; /// base named by the \p Specifier.; ///; /// \returns true if this base matched the search criteria, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:135,Integrability,rout,routine,135,"/// Look for entities within the base classes of this C++ class,; /// transitively searching all base class subobjects.; ///; /// This routine uses the callback function \p BaseMatches to find base; /// classes meeting some search criteria, walking all base class subobjects; /// and populating the given \p Paths structure with the paths through the; /// inheritance hierarchy that resulted in a match. On a successful search,; /// the \p Paths structure can be queried to retrieve the matching paths and; /// to determine if there were any ambiguities.; ///; /// \param BaseMatches callback function used to determine whether a given; /// base matches the user-defined search criteria.; ///; /// \param Paths used to record the paths from this class to its base class; /// subobjects that match the search criteria.; ///; /// \param LookupInDependent can be set to true to extend the search to; /// dependent base classes.; ///; /// \returns true if there exists any path from this class to a base class; /// subobject that matches the search criteria.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:901,Integrability,depend,dependent,901,"/// Look for entities within the base classes of this C++ class,; /// transitively searching all base class subobjects.; ///; /// This routine uses the callback function \p BaseMatches to find base; /// classes meeting some search criteria, walking all base class subobjects; /// and populating the given \p Paths structure with the paths through the; /// inheritance hierarchy that resulted in a match. On a successful search,; /// the \p Paths structure can be queried to retrieve the matching paths and; /// to determine if there were any ambiguities.; ///; /// \param BaseMatches callback function used to determine whether a given; /// base matches the user-defined search criteria.; ///; /// \param Paths used to record the paths from this class to its base class; /// subobjects that match the search criteria.; ///; /// \param LookupInDependent can be set to true to extend the search to; /// dependent base classes.; ///; /// \returns true if there exists any path from this class to a base class; /// subobject that matches the search criteria.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:356,Modifiability,inherit,inheritance,356,"/// Look for entities within the base classes of this C++ class,; /// transitively searching all base class subobjects.; ///; /// This routine uses the callback function \p BaseMatches to find base; /// classes meeting some search criteria, walking all base class subobjects; /// and populating the given \p Paths structure with the paths through the; /// inheritance hierarchy that resulted in a match. On a successful search,; /// the \p Paths structure can be queried to retrieve the matching paths and; /// to determine if there were any ambiguities.; ///; /// \param BaseMatches callback function used to determine whether a given; /// base matches the user-defined search criteria.; ///; /// \param Paths used to record the paths from this class to its base class; /// subobjects that match the search criteria.; ///; /// \param LookupInDependent can be set to true to extend the search to; /// dependent base classes.; ///; /// \returns true if there exists any path from this class to a base class; /// subobject that matches the search criteria.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:875,Modifiability,extend,extend,875,"/// Look for entities within the base classes of this C++ class,; /// transitively searching all base class subobjects.; ///; /// This routine uses the callback function \p BaseMatches to find base; /// classes meeting some search criteria, walking all base class subobjects; /// and populating the given \p Paths structure with the paths through the; /// inheritance hierarchy that resulted in a match. On a successful search,; /// the \p Paths structure can be queried to retrieve the matching paths and; /// to determine if there were any ambiguities.; ///; /// \param BaseMatches callback function used to determine whether a given; /// base matches the user-defined search criteria.; ///; /// \param Paths used to record the paths from this class to its base class; /// subobjects that match the search criteria.; ///; /// \param LookupInDependent can be set to true to extend the search to; /// dependent base classes.; ///; /// \returns true if there exists any path from this class to a base class; /// subobject that matches the search criteria.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:90,Integrability,depend,dependent,90,"/// Determine whether this class has a member with the given name, possibly; /// in a non-dependent base class.; ///; /// No check for ambiguity is performed, so this should never be used when; /// implementing language semantics, but it may be appropriate for warnings,; /// static analysis, or similar.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:148,Performance,perform,performed,148,"/// Determine whether this class has a member with the given name, possibly; /// in a non-dependent base class.; ///; /// No check for ambiguity is performed, so this should never be used when; /// implementing language semantics, but it may be appropriate for warnings,; /// static analysis, or similar.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:38,Integrability,depend,dependent,38,"/// Performs an imprecise lookup of a dependent name in this class.; ///; /// This function does not follow strict semantic rules and should be used; /// only when lookup rules can be relaxed, e.g. indexing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:4,Performance,Perform,Performs,4,"/// Performs an imprecise lookup of a dependent name in this class.; ///; /// This function does not follow strict semantic rules and should be used; /// only when lookup rules can be relaxed, e.g. indexing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:28,Modifiability,inherit,inheritance,28,/// Renders and displays an inheritance diagram; /// for this C++ class and all of its base classes (transitively) using; /// GraphViz.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:19,Security,access,access,19,/// Calculates the access of a decl that is reached; /// along a path.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:229,Performance,optimiz,optimization,229,"/// Indicates that the definition of this class is now complete,; /// and provides a final overrider map to help determine; ///; /// \param FinalOverriders The final overrider map for this class, which can; /// be provided as an optimization for abstract-class checking. If NULL,; /// final overriders will be computed if they are needed to complete the; /// definition.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:363,Integrability,rout,routine,363,"/// Retrieve the declaration that provides additional context for a; /// lambda, when the normal declaration context is not specific enough.; ///; /// Certain contexts (default arguments of in-class function parameters and; /// the initializers of data members) have separate name mangling rules for; /// lambdas within the Itanium C++ ABI. For these cases, this routine provides; /// the declaration in which the lambda occurs, e.g., the function parameter; /// or the non-static data member. Otherwise, it returns NULL to imply that; /// the declaration context suffices.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:16,Modifiability,inherit,inheritance,16,/// Returns the inheritance model used for this record.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:23,Modifiability,inherit,inheritance,23,/// Calculate what the inheritance model would be for this class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:205,Modifiability,Polymorphi,Polymorphic,205,"/// In the Microsoft C++ ABI, use zero for the field offset of a null data; /// member pointer if we can guarantee that zero is not a valid field offset,; /// or if the member pointer has multiple fields. Polymorphic classes have a; /// vfptr at offset zero, so we can use zero for null. If there are multiple; /// fields, we can use zero even if it is a valid field offset because; /// null-ness testing will check the other fields.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:397,Testability,test,testing,397,"/// In the Microsoft C++ ABI, use zero for the field offset of a null data; /// member pointer if we can guarantee that zero is not a valid field offset,; /// or if the member pointer has multiple fields. Polymorphic classes have a; /// vfptr at offset zero, so we can use zero for null. If there are multiple; /// fields, we can use zero even if it is a valid field offset because; /// null-ness testing will check the other fields.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:61,Integrability,depend,dependent,61,"/// Determine whether this lambda expression was known to be dependent; /// at the time it was created, even if its context does not appear to be; /// dependent.; ///; /// This flag is a workaround for an issue with parsing, where default; /// arguments are parsed before their enclosing function declarations have; /// been created. This means that any lambda expressions within those; /// default arguments will have as their DeclContext the context enclosing; /// the function declaration, which may be non-dependent even when the; /// function declaration itself is dependent. This flag indicates when we; /// know that the lambda is dependent despite that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:151,Integrability,depend,dependent,151,"/// Determine whether this lambda expression was known to be dependent; /// at the time it was created, even if its context does not appear to be; /// dependent.; ///; /// This flag is a workaround for an issue with parsing, where default; /// arguments are parsed before their enclosing function declarations have; /// been created. This means that any lambda expressions within those; /// default arguments will have as their DeclContext the context enclosing; /// the function declaration, which may be non-dependent even when the; /// function declaration itself is dependent. This flag indicates when we; /// know that the lambda is dependent despite that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:510,Integrability,depend,dependent,510,"/// Determine whether this lambda expression was known to be dependent; /// at the time it was created, even if its context does not appear to be; /// dependent.; ///; /// This flag is a workaround for an issue with parsing, where default; /// arguments are parsed before their enclosing function declarations have; /// been created. This means that any lambda expressions within those; /// default arguments will have as their DeclContext the context enclosing; /// the function declaration, which may be non-dependent even when the; /// function declaration itself is dependent. This flag indicates when we; /// know that the lambda is dependent despite that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:570,Integrability,depend,dependent,570,"/// Determine whether this lambda expression was known to be dependent; /// at the time it was created, even if its context does not appear to be; /// dependent.; ///; /// This flag is a workaround for an issue with parsing, where default; /// arguments are parsed before their enclosing function declarations have; /// been created. This means that any lambda expressions within those; /// default arguments will have as their DeclContext the context enclosing; /// the function declaration, which may be non-dependent even when the; /// function declaration itself is dependent. This flag indicates when we; /// know that the lambda is dependent despite that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:638,Integrability,depend,dependent,638,"/// Determine whether this lambda expression was known to be dependent; /// at the time it was created, even if its context does not appear to be; /// dependent.; ///; /// This flag is a workaround for an issue with parsing, where default; /// arguments are parsed before their enclosing function declarations have; /// been created. This means that any lambda expressions within those; /// default arguments will have as their DeclContext the context enclosing; /// the function declaration, which may be non-dependent even when the; /// function declaration itself is dependent. This flag indicates when we; /// know that the lambda is dependent despite that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:37,Integrability,Interface,Interface,37,// Determine whether this type is an Interface Like type for; // __interface inheritance purposes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:77,Modifiability,inherit,inheritance,77,// Determine whether this type is an Interface Like type for; // __interface inheritance purposes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:174,Integrability,depend,dependent,174,/// Determine whether this specifier is known to correspond to an explicit; /// declaration. Returns false if the specifier is absent or has an; /// expression that is value-dependent or evaluates to false.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:96,Availability,failure,failures,96,/// Determine if the explicit specifier is invalid.; /// This state occurs after a substitution failures.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:31,Usability,guid,guide,31,"/// Represents a C++ deduction guide declaration.; ///; /// \code; /// template<typename T> struct A { A(); A(T); };; /// A() -> A<int>;; /// \endcode; ///; /// In this example, there will be an explicit deduction guide from the; /// second line, and implicit deduction guide templates synthesized from; /// the constructors of \c A.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:214,Usability,guid,guide,214,"/// Represents a C++ deduction guide declaration.; ///; /// \code; /// template<typename T> struct A { A(); A(T); };; /// A() -> A<int>;; /// \endcode; ///; /// In this example, there will be an explicit deduction guide from the; /// second line, and implicit deduction guide templates synthesized from; /// the constructors of \c A.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:270,Usability,guid,guide,270,"/// Represents a C++ deduction guide declaration.; ///; /// \code; /// template<typename T> struct A { A(); A(T); };; /// A() -> A<int>;; /// \endcode; ///; /// In this example, there will be an explicit deduction guide from the; /// second line, and implicit deduction guide templates synthesized from; /// the constructors of \c A.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:42,Performance,perform,performs,42,/// Get the template for which this guide performs deduction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:36,Usability,guid,guide,36,/// Get the template for which this guide performs deduction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:50,Usability,guid,guide,50,"/// Get the constructor from which this deduction guide was generated, if; /// this is an implicit deduction guide.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:109,Usability,guid,guide,109,"/// Get the constructor from which this deduction guide was generated, if; /// this is an implicit deduction guide.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:108,Modifiability,inherit,inherits,108,"/// Find the method in \p RD that corresponds to this one.; ///; /// Find if \p RD or one of the classes it inherits from override this method.; /// If so, return it. \p RD is assumed to be a subclass of the class defining; /// this method (or be the class itself), unless \p MayBeBase is set to true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:145,Modifiability,variab,variable,145,"/// Represents a C++ base or member initializer.; ///; /// This is part of a constructor initializer that; /// initializes one non-static member variable or one base class. For; /// example, in the following, both 'A(a)' and 'f(3.14159)' are member; /// initializers:; ///; /// \code; /// class A { };; /// class B : public A {; /// float f;; /// public:; /// B(A& a) : A(a), f(3.14159) { }; /// };; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:298,Safety,detect,detection,298,"/// The source location for the field name or, for a base initializer; /// pack expansion, the location of the ellipsis.; ///; /// In the case of a delegating; /// constructor, it will still include the type's source location as the; /// Initializee points to the CXXConstructorDecl (to allow loop detection).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:42,Modifiability,inherit,inherited,42,/// Description of a constructor that was inherited from a base class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:111,Security,access,accessors,111,// This class stores some data in DeclContext::CXXConstructorDeclBits; // to save some space. Use the provided accessors to access it.; /// \name Support for base and member initializers.; /// \{; /// The arguments used to initialize the base or member.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:124,Security,access,access,124,// This class stores some data in DeclContext::CXXConstructorDeclBits; // to save some space. Use the provided accessors to access it.; /// \name Support for base and member initializers.; /// \{; /// The arguments used to initialize the base or member.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:8,Testability,assert,assert,8,// This assert added because NumCtorInitializers is stored; // in CXXConstructorDeclBits as a bitfield and its width has; // been shrunk from 32 bits to fit into CXXConstructorDeclBitfields.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:104,Modifiability,inherit,inherited,104,/// Determine whether this is an implicit constructor synthesized to; /// model a call to a constructor inherited from a base class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:97,Modifiability,inherit,inherited,97,/// State that this is an implicit constructor synthesized to; /// model a call to a constructor inherited from a base class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:34,Modifiability,inherit,inheriting,34,/// Get the constructor that this inheriting constructor is based on.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:16,Energy Efficiency,allocate,allocate,16,// FIXME: Don't allocate storage for these except in the first declaration; // of a virtual destructor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:108,Security,access,accessors,108,// This class stores some data in DeclContext::LinkageSpecDeclBits to save; // some space. Use the provided accessors to access it.; /// The source location for the extern keyword.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:121,Security,access,access,121,// This class stores some data in DeclContext::LinkageSpecDeclBits to save; // some space. Use the provided accessors to access it.; /// The source location for the extern keyword.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:66,Security,access,accessed,66,/// The location of the namespace's identifier.; ///; /// This is accessed by TargetNameLoc.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:110,Modifiability,extend,extended,110,/// Implicit declaration of a temporary that was materialized by; /// a MaterializeTemporaryExpr and lifetime-extended by a declaration,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:35,Modifiability,extend,extended,35,"/// The declaration which lifetime-extended this reference, if any.; /// Either a VarDecl, or (for a ctor-initializer) a FieldDecl.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:33,Security,access,access,33,/// Return true if it is a C++03 access declaration (no 'using').,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:207,Modifiability,inherit,inherited,207,"/// If this constructor using declaration inherted the constructor; /// from an indirect base class, this is the ConstructorUsingShadowDecl; /// in the named direct base class from which the declaration was inherited.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:161,Testability,log,logic,161,"// If we found a constructor that chains to a constructor for a virtual; // base, we should directly call that virtual base constructor instead.; // FIXME: This logic belongs in Sema.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:18,Modifiability,inherit,inheriting,18,"//@}; /// Get the inheriting constructor declaration for the direct base; /// class from which this using shadow declaration was inherited, if there is; /// one. This can be different for each redeclaration of the same shadow decl.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:129,Modifiability,inherit,inherited,129,"//@}; /// Get the inheriting constructor declaration for the direct base; /// class from which this using shadow declaration was inherited, if there is; /// one. This can be different for each redeclaration of the same shadow decl.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:12,Modifiability,inherit,inheriting,12,"/// Get the inheriting constructor declaration for the base class; /// for which we don't have an explicit initializer, if there is one.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:17,Integrability,depend,dependent,17,"/// Represents a dependent using declaration which was not marked with; /// \c typename.; ///; /// Unlike non-dependent using declarations, these *only* bring through; /// non-types; otherwise they would break two-phase lookup.; ///; /// \code; /// template \<class T> class A : public Base<T> {; /// using Base<T>::foo;; /// };; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:110,Integrability,depend,dependent,110,"/// Represents a dependent using declaration which was not marked with; /// \c typename.; ///; /// Unlike non-dependent using declarations, these *only* bring through; /// non-types; otherwise they would break two-phase lookup.; ///; /// \code; /// template \<class T> class A : public Base<T> {; /// using Base<T>::foo;; /// };; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:33,Security,access,access,33,/// Return true if it is a C++03 access declaration (no 'using').,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:17,Integrability,depend,dependent,17,/// Represents a dependent using declaration which was marked with; /// \c typename.; ///; /// \code; /// template \<class T> class A : public Base<T> {; /// using typename Base<T>::foo;; /// };; /// \endcode; ///; /// The type associated with an unresolved using typename decl is; /// currently always a typename type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:343,Availability,error,error,343,"/// This node is generated when a using-declaration that was annotated with; /// __attribute__((using_if_exists)) failed to resolve to a known declaration.; /// In that case, Sema builds a UsingShadowDecl whose target is an instance of; /// this declaration, adding it to the current scope. Referring to this; /// declaration in any way is an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:208,Integrability,depend,dependent,208,"/// Get the expression to which this declaration is bound. This may be null; /// in two different cases: while parsing the initializer for the; /// decomposition declaration, and when the initializer is type-dependent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:12,Modifiability,variab,variable,12,/// Get the variable (if any) that holds the value of evaluating the binding.; /// Only present for user-defined bindings for tuple-like types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:23,Modifiability,variab,variable,23,/// Set the decomposed variable for this BindingDecl.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:77,Integrability,depend,dependencies,77,/// Parts of a decomposed MSGuidDecl. Factored out to avoid unnecessary; /// dependencies on DeclCXX.h.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:54,Safety,avoid,avoid,54,/// Parts of a decomposed MSGuidDecl. Factored out to avoid unnecessary; /// dependencies on DeclCXX.h.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:78,Performance,cache,cached,78,/// The resolved value of the UUID as an APValue. Computed on demand and; /// cached.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:63,Security,Access,AccessSpecifier,63,/// Insertion operator for diagnostics. This allows sending an AccessSpecifier; /// into a diagnostic with <<.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclFriend.h:183,Security,authoriz,authorize,183,"/// True if this 'friend' declaration is unsupported. Eventually we; /// will support every possible friend declaration, but for now we; /// silently ignore some and set this flag to authorize all access.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclFriend.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclFriend.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclFriend.h:197,Security,access,access,197,"/// True if this 'friend' declaration is unsupported. Eventually we; /// will support every possible friend declaration, but for now we; /// silently ignore some and set this flag to authorize all access.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclFriend.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclFriend.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclFriend.h:71,Integrability,depend,dependent,71,"/// If this friend declaration names an (untemplated but possibly; /// dependent) type, return the type; otherwise return null. This; /// is used for elaborated-type-specifiers and, in C++0x, for; /// arbitrary friend type declarations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclFriend.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclFriend.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclLookups.h:33,Integrability,interface,interface,33,"//===- DeclLookups.h - Low-level interface to all names in a DC -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines DeclContext::all_lookups_iterator.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclLookups.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclLookups.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:414,Integrability,interface,interface,414,"//===- DeclObjC.h - Classes for representing declarations -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the DeclObjC interface and subclasses.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:25,Usability,simpl,simple,25,"/// ObjCList - This is a simple template class used to hold various lists of; /// decls etc, which is heavily used by the ObjC front-end. This only use case; /// this supports is setting the list all at once and then reading elements out; /// of it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:26,Integrability,protocol,protocols,26,"/// A list of Objective-C protocols, along with the source; /// locations at which they were referenced.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:132,Integrability,interface,interfaces,132,"/// ObjCMethodDecl - Represents an instance or class method declaration.; /// ObjC methods can be declared within 4 contexts: class interfaces,; /// categories, protocols, and class implementations. While C++ member; /// functions leverage C syntax, Objective-C method syntax is modeled after; /// Smalltalk (using colons to specify argument types/expressions).; /// Here are some brief examples:; ///; /// Setter/getter instance methods:; /// - (void)setMenu:(NSMenu *)menu;; /// - (NSMenu *)menu;; ///; /// Instance method that takes 2 NSView arguments:; /// - (void)replaceSubview:(NSView *)oldView with:(NSView *)newView;; ///; /// Getter class method:; /// + (NSMenu *)defaultMenu;; ///; /// A selector represents a unique name for a method. The selector names for; /// the above methods are setMenu:, menu, replaceSubview:with:, and defaultMenu.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:161,Integrability,protocol,protocols,161,"/// ObjCMethodDecl - Represents an instance or class method declaration.; /// ObjC methods can be declared within 4 contexts: class interfaces,; /// categories, protocols, and class implementations. While C++ member; /// functions leverage C syntax, Objective-C method syntax is modeled after; /// Smalltalk (using colons to specify argument types/expressions).; /// Here are some brief examples:; ///; /// Setter/getter instance methods:; /// - (void)setMenu:(NSMenu *)menu;; /// - (NSMenu *)menu;; ///; /// Instance method that takes 2 NSView arguments:; /// - (void)replaceSubview:(NSView *)oldView with:(NSView *)newView;; ///; /// Getter class method:; /// + (NSMenu *)defaultMenu;; ///; /// A selector represents a unique name for a method. The selector names for; /// the above methods are setMenu:, menu, replaceSubview:with:, and defaultMenu.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:107,Security,access,accessors,107,// This class stores some data in DeclContext::ObjCMethodDeclBits; // to save some space. Use the provided accessors to access it.; /// Return type of this method.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:120,Security,access,access,120,// This class stores some data in DeclContext::ObjCMethodDeclBits; // to save some space. Use the provided accessors to access it.; /// Return type of this method.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:33,Integrability,interface,interface,33,/// A definition will return its interface declaration.; /// An interface declaration will return its definition.; /// Otherwise it will return itself.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:64,Integrability,interface,interface,64,/// A definition will return its interface declaration.; /// An interface declaration will return its definition.; /// Otherwise it will return itself.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:80,Integrability,message,message,80,/// Determine whether this method has a result type that is related; /// to the message receiver's type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:55,Integrability,interface,interface,55,/// True if this is a method redeclaration in the same interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:35,Integrability,interface,interface,35,/// True if redeclared in the same interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:53,Integrability,message,message,53,/// Determine the type of an expression that sends a message to this; /// function. This replaces the type parameters with the types they would; /// get if the receiver was parameterless (e.g. it may replace the type; /// parameter with 'id').,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:53,Integrability,message,message,53,/// Determine the type of an expression that sends a message to this; /// function with the given receiver type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:12,Security,access,access,12,// Iterator access to formal parameters.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:89,Integrability,interface,interface,89,// ArrayRef access to formal parameters. This should eventually; // replace the iterator interface above.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:12,Security,access,access,12,// ArrayRef access to formal parameters. This should eventually; // replace the iterator interface above.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:12,Security,access,access,12,// Iterator access to parameter types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:156,Integrability,protocol,protocols,156,"/// Whether this method overrides any other in the class hierarchy.; ///; /// A method is said to override any method in the class's; /// base classes, its protocols, or its categories' protocols, that has; /// the same selector and is of the same kind (class or instance).; /// A method in an implementation is not considered as overriding the same; /// method in the interface or its categories.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:186,Integrability,protocol,protocols,186,"/// Whether this method overrides any other in the class hierarchy.; ///; /// A method is said to override any method in the class's; /// base classes, its protocols, or its categories' protocols, that has; /// the same selector and is of the same kind (class or instance).; /// A method in an implementation is not considered as overriding the same; /// method in the interface or its categories.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:369,Integrability,interface,interface,369,"/// Whether this method overrides any other in the class hierarchy.; ///; /// A method is said to override any method in the class's; /// base classes, its protocols, or its categories' protocols, that has; /// the same selector and is of the same kind (class or instance).; /// A method in an implementation is not considered as overriding the same; /// method in the interface or its categories.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:179,Integrability,protocol,protocols,179,"/// Return overridden methods for the given \p Method.; ///; /// An ObjC method is considered to override any method in the class's; /// base classes (and base's categories), its protocols, or its categories'; /// protocols, that has; /// the same selector and is of the same kind (class or instance).; /// A method in an implementation is not considered as overriding the same; /// method in the interface or its categories.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:214,Integrability,protocol,protocols,214,"/// Return overridden methods for the given \p Method.; ///; /// An ObjC method is considered to override any method in the class's; /// base classes (and base's categories), its protocols, or its categories'; /// protocols, that has; /// the same selector and is of the same kind (class or instance).; /// A method in an implementation is not considered as overriding the same; /// method in the interface or its categories.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:397,Integrability,interface,interface,397,"/// Return overridden methods for the given \p Method.; ///; /// An ObjC method is considered to override any method in the class's; /// base classes (and base's categories), its protocols, or its categories'; /// protocols, that has; /// the same selector and is of the same kind (class or instance).; /// A method in an implementation is not considered as overriding the same; /// method in the interface or its categories.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:149,Security,access,accessor,149,"/// Returns the property associated with this method's selector.; ///; /// Note that even if this particular method is not marked as a property; /// accessor, it is still possible for it to match a property declared in a; /// superclass. Pass \c false if you only want to check the current class.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:14,Integrability,protocol,protocols,14,// Related to protocols declared in \@protocol,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:38,Integrability,protocol,protocol,38,// Related to protocols declared in \@protocol,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:97,Integrability,interface,interface,97,"/// Returns true if the method selector resolves to a designated initializer; /// in the class's interface.; ///; /// \param InitMethod if non-null and the function returns true, it receives; /// the method declaration that was marked with the designated initializer; /// attribute.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:87,Integrability,interface,interface,87,"/// Represents the declaration of an Objective-C type parameter.; ///; /// \code; /// @interface NSDictionary<Key : id<NSCopying>, Value>; /// @end; /// \endcode; ///; /// In the example above, both \c Key and \c Value are represented by; /// \c ObjCTypeParamDecl. \c Key has an explicit bound of \c id<NSCopying>,; /// while \c Value gets an implicit bound of \c id.; ///; /// Objective-C type parameters are typedef-names in the grammar,",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:135,Integrability,interface,interface,135,/// Stores a list of Objective-C type parameters for a parameterized class; /// or a category/extension thereof.; ///; /// \code; /// @interface NSArray<T> // stores the <T>; /// @end; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:55,Modifiability,parameteriz,parameterized,55,/// Stores a list of Objective-C type parameters for a parameterized class; /// or a category/extension thereof.; ///; /// \code; /// @interface NSArray<T> // stores the <T>; /// @end; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:57,Energy Efficiency,allocate,allocated,57,"/// The number of parameters in the list, which are tail-allocated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:58,Integrability,interface,interface,58,"/// Represents one property declaration in an Objective-C interface.; ///; /// For example:; /// \code{.mm}; /// \@property (assign, readwrite) int MyProperty;; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:22,Security,access,accessing,22,// Helper methods for accessing attributes.; /// isReadOnly - Return true iff the property has a setter.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:50,Integrability,protocol,protocol,50,// Related to \@optional/\@required declared in \@protocol,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:110,Security,access,accessors,110,"// This class stores some data in DeclContext::ObjCContainerDeclBits; // to save some space. Use the provided accessors to access it.; // These two locations in the range mark the end of the method container.; // The first points to the '@' token, and the second to the 'end' token.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:123,Security,access,access,123,"// This class stores some data in DeclContext::ObjCContainerDeclBits; // to save some space. Use the provided accessors to access it.; // These two locations in the range mark the end of the method container.; // The first points to the '@' token, and the second to the 'end' token.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:12,Security,access,access,12,// Iterator access to instance/class properties.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:12,Security,access,access,12,// Iterator access to instance/class methods.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:56,Integrability,interface,interface,56,// Get the local instance/class method declared in this interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:9,Integrability,rout,routine,9,"/// This routine collects list of properties to be implemented in the class.; /// This includes, class's and its conforming protocols' properties.; /// Note, the superclass's properties are not included in the list.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:124,Integrability,protocol,protocols,124,"/// This routine collects list of properties to be implemented in the class.; /// This includes, class's and its conforming protocols' properties.; /// Note, the superclass's properties are not included in the list.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:161,Integrability,interface,interface,161,"/// Represents an ObjC class declaration.; ///; /// For example:; ///; /// \code; /// // MostPrimitive declares no super class (not particularly useful).; /// \@interface MostPrimitive; /// // no instance variables or methods.; /// \@end; ///; /// // NSResponder inherits from NSObject & implements NSCoding (a protocol).; /// \@interface NSResponder : NSObject \<NSCoding>; /// { // instance variables are represented by ObjCIvarDecl.; /// id nextResponder; // nextResponder instance variable.; /// }; /// - (NSResponder *)nextResponder; // return a pointer to NSResponder.; /// - (void)mouseMoved:(NSEvent *)theEvent; // return void, takes a pointer; /// \@end // to an NSEvent.; /// \endcode; ///; /// Unlike C/C++, forward class declarations are accomplished with \@class.; /// Unlike C/C++, \@class allows for a list of classes to be forward declared.; /// Unlike C++, ObjC is a single-rooted class model. In Cocoa, classes; /// typically inherit from NSObject (an exception is NSProxy).; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:311,Integrability,protocol,protocol,311,"/// Represents an ObjC class declaration.; ///; /// For example:; ///; /// \code; /// // MostPrimitive declares no super class (not particularly useful).; /// \@interface MostPrimitive; /// // no instance variables or methods.; /// \@end; ///; /// // NSResponder inherits from NSObject & implements NSCoding (a protocol).; /// \@interface NSResponder : NSObject \<NSCoding>; /// { // instance variables are represented by ObjCIvarDecl.; /// id nextResponder; // nextResponder instance variable.; /// }; /// - (NSResponder *)nextResponder; // return a pointer to NSResponder.; /// - (void)mouseMoved:(NSEvent *)theEvent; // return void, takes a pointer; /// \@end // to an NSEvent.; /// \endcode; ///; /// Unlike C/C++, forward class declarations are accomplished with \@class.; /// Unlike C/C++, \@class allows for a list of classes to be forward declared.; /// Unlike C++, ObjC is a single-rooted class model. In Cocoa, classes; /// typically inherit from NSObject (an exception is NSProxy).; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:329,Integrability,interface,interface,329,"/// Represents an ObjC class declaration.; ///; /// For example:; ///; /// \code; /// // MostPrimitive declares no super class (not particularly useful).; /// \@interface MostPrimitive; /// // no instance variables or methods.; /// \@end; ///; /// // NSResponder inherits from NSObject & implements NSCoding (a protocol).; /// \@interface NSResponder : NSObject \<NSCoding>; /// { // instance variables are represented by ObjCIvarDecl.; /// id nextResponder; // nextResponder instance variable.; /// }; /// - (NSResponder *)nextResponder; // return a pointer to NSResponder.; /// - (void)mouseMoved:(NSEvent *)theEvent; // return void, takes a pointer; /// \@end // to an NSEvent.; /// \endcode; ///; /// Unlike C/C++, forward class declarations are accomplished with \@class.; /// Unlike C/C++, \@class allows for a list of classes to be forward declared.; /// Unlike C++, ObjC is a single-rooted class model. In Cocoa, classes; /// typically inherit from NSObject (an exception is NSProxy).; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:205,Modifiability,variab,variables,205,"/// Represents an ObjC class declaration.; ///; /// For example:; ///; /// \code; /// // MostPrimitive declares no super class (not particularly useful).; /// \@interface MostPrimitive; /// // no instance variables or methods.; /// \@end; ///; /// // NSResponder inherits from NSObject & implements NSCoding (a protocol).; /// \@interface NSResponder : NSObject \<NSCoding>; /// { // instance variables are represented by ObjCIvarDecl.; /// id nextResponder; // nextResponder instance variable.; /// }; /// - (NSResponder *)nextResponder; // return a pointer to NSResponder.; /// - (void)mouseMoved:(NSEvent *)theEvent; // return void, takes a pointer; /// \@end // to an NSEvent.; /// \endcode; ///; /// Unlike C/C++, forward class declarations are accomplished with \@class.; /// Unlike C/C++, \@class allows for a list of classes to be forward declared.; /// Unlike C++, ObjC is a single-rooted class model. In Cocoa, classes; /// typically inherit from NSObject (an exception is NSProxy).; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:263,Modifiability,inherit,inherits,263,"/// Represents an ObjC class declaration.; ///; /// For example:; ///; /// \code; /// // MostPrimitive declares no super class (not particularly useful).; /// \@interface MostPrimitive; /// // no instance variables or methods.; /// \@end; ///; /// // NSResponder inherits from NSObject & implements NSCoding (a protocol).; /// \@interface NSResponder : NSObject \<NSCoding>; /// { // instance variables are represented by ObjCIvarDecl.; /// id nextResponder; // nextResponder instance variable.; /// }; /// - (NSResponder *)nextResponder; // return a pointer to NSResponder.; /// - (void)mouseMoved:(NSEvent *)theEvent; // return void, takes a pointer; /// \@end // to an NSEvent.; /// \endcode; ///; /// Unlike C/C++, forward class declarations are accomplished with \@class.; /// Unlike C/C++, \@class allows for a list of classes to be forward declared.; /// Unlike C++, ObjC is a single-rooted class model. In Cocoa, classes; /// typically inherit from NSObject (an exception is NSProxy).; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:393,Modifiability,variab,variables,393,"/// Represents an ObjC class declaration.; ///; /// For example:; ///; /// \code; /// // MostPrimitive declares no super class (not particularly useful).; /// \@interface MostPrimitive; /// // no instance variables or methods.; /// \@end; ///; /// // NSResponder inherits from NSObject & implements NSCoding (a protocol).; /// \@interface NSResponder : NSObject \<NSCoding>; /// { // instance variables are represented by ObjCIvarDecl.; /// id nextResponder; // nextResponder instance variable.; /// }; /// - (NSResponder *)nextResponder; // return a pointer to NSResponder.; /// - (void)mouseMoved:(NSEvent *)theEvent; // return void, takes a pointer; /// \@end // to an NSEvent.; /// \endcode; ///; /// Unlike C/C++, forward class declarations are accomplished with \@class.; /// Unlike C/C++, \@class allows for a list of classes to be forward declared.; /// Unlike C++, ObjC is a single-rooted class model. In Cocoa, classes; /// typically inherit from NSObject (an exception is NSProxy).; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:485,Modifiability,variab,variable,485,"/// Represents an ObjC class declaration.; ///; /// For example:; ///; /// \code; /// // MostPrimitive declares no super class (not particularly useful).; /// \@interface MostPrimitive; /// // no instance variables or methods.; /// \@end; ///; /// // NSResponder inherits from NSObject & implements NSCoding (a protocol).; /// \@interface NSResponder : NSObject \<NSCoding>; /// { // instance variables are represented by ObjCIvarDecl.; /// id nextResponder; // nextResponder instance variable.; /// }; /// - (NSResponder *)nextResponder; // return a pointer to NSResponder.; /// - (void)mouseMoved:(NSEvent *)theEvent; // return void, takes a pointer; /// \@end // to an NSEvent.; /// \endcode; ///; /// Unlike C/C++, forward class declarations are accomplished with \@class.; /// Unlike C/C++, \@class allows for a list of classes to be forward declared.; /// Unlike C++, ObjC is a single-rooted class model. In Cocoa, classes; /// typically inherit from NSObject (an exception is NSProxy).; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:944,Modifiability,inherit,inherit,944,"/// Represents an ObjC class declaration.; ///; /// For example:; ///; /// \code; /// // MostPrimitive declares no super class (not particularly useful).; /// \@interface MostPrimitive; /// // no instance variables or methods.; /// \@end; ///; /// // NSResponder inherits from NSObject & implements NSCoding (a protocol).; /// \@interface NSResponder : NSObject \<NSCoding>; /// { // instance variables are represented by ObjCIvarDecl.; /// id nextResponder; // nextResponder instance variable.; /// }; /// - (NSResponder *)nextResponder; // return a pointer to NSResponder.; /// - (void)mouseMoved:(NSEvent *)theEvent; // return void, takes a pointer; /// \@end // to an NSEvent.; /// \endcode; ///; /// Unlike C/C++, forward class declarations are accomplished with \@class.; /// Unlike C/C++, \@class allows for a list of classes to be forward declared.; /// Unlike C++, ObjC is a single-rooted class model. In Cocoa, classes; /// typically inherit from NSObject (an exception is NSProxy).; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:93,Performance,cache,cache,93,/// TypeForDecl - This indicates the Type object that represents this; /// TypeDecl. It is a cache maintained by ASTContext::getObjCInterfaceType,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:44,Security,access,access,44,"/// The definition of this class, for quick access from any; /// declaration.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:4,Integrability,Protocol,Protocols,4,/// Protocols referenced in the \@interface declaration,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:34,Integrability,interface,interface,34,/// Protocols referenced in the \@interface declaration,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:4,Integrability,Protocol,Protocols,4,/// Protocols reference in both the \@interface and class extensions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:38,Integrability,interface,interface,38,/// Protocols reference in both the \@interface and class extensions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:204,Integrability,interface,interface,204,"/// List of categories and class extensions defined for this class.; ///; /// Categories are stored as a linked list in the AST, since the categories; /// and class extensions come long after the initial interface declaration,; /// and we avoid dynamically-resized arrays in the AST wherever possible.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:239,Safety,avoid,avoid,239,"/// List of categories and class extensions defined for this class.; ///; /// Categories are stored as a linked list in the AST, since the categories; /// and class extensions come long after the initial interface declaration,; /// and we avoid dynamically-resized arrays in the AST wherever possible.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:28,Performance,cache,cache,28,/// Indicates that the ivar cache does not yet include ivars; /// declared in the implementation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:24,Integrability,interface,interface,24,/// Indicates that this interface decl contains at least one initializer; /// marked with the 'objc_designated_initializer' attribute.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:75,Modifiability,inherit,inherited,75,/// We didn't calculate whether the designated initializers should be; /// inherited or not.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:32,Modifiability,inherit,inherited,32,/// Designated initializers are inherited for the super class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:23,Modifiability,inherit,inherit,23,/// The class does not inherit designated initializers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:18,Modifiability,Inherit,InheritedDesignatedInitializersState,18,/// One of the \c InheritedDesignatedInitializersState enumeratos.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:57,Integrability,interface,interface,57,/// Tracks whether a ODR hash has been computed for this interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:25,Security,hash,hash,25,/// Tracks whether a ODR hash has been computed for this interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:6,Security,hash,hash,6,/// A hash of parts of the class to help in ODR checking.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:4,Energy Efficiency,Allocate,Allocate,4,/// Allocate the definition data for this class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:211,Integrability,interface,interface,211,"/// Retrieve the type parameters of this class.; ///; /// This function looks for a type parameter list for the given; /// class; if the class has been declared (with \c \@class) but not; /// defined (with \c \@interface), it will search for a declaration that; /// has type parameters, skipping any declarations that do not.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:175,Safety,avoid,avoid,175,"/// Set the type parameters of this class.; ///; /// This function is used by the AST importer, which must import the type; /// parameters after creating their DeclContext to avoid loops.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:23,Integrability,interface,interface,23,/// Indicate that this interface decl contains at least one initializer; /// marked with the 'objc_designated_initializer' attribute.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:25,Integrability,interface,interface,25,/// Returns true if this interface decl contains at least one initializer; /// marked with the 'objc_designated_initializer' attribute.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:25,Integrability,interface,interface,25,/// Returns true if this interface decl declares a designated initializer; /// or it inherites one from its super class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:85,Modifiability,inherit,inherites,85,/// Returns true if this interface decl declares a designated initializer; /// or it inherites one from its super class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:100,Performance,cache,cached,100,"// Even though this modifies IvarList, it's conceptually const:; // the ivar chain is essentially a cached property of ObjCInterfaceDecl.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:38,Integrability,protocol,protocols,38,/// setProtocolList - Set the list of protocols that this interface; /// implements.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:58,Integrability,interface,interface,58,/// setProtocolList - Set the list of protocols that this interface; /// implements.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:62,Integrability,protocol,protocol,62,/// mergeClassExtensionProtocolList - Merge class extension's protocol list; /// into the protocol list for this class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:90,Integrability,protocol,protocol,90,/// mergeClassExtensionProtocolList - Merge class extension's protocol list; /// into the protocol list for this class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:48,Integrability,interface,interface,48,/// Returns the designated initializers for the interface.; ///; /// If this declaration does not have methods marked as designated; /// initializers then the interface inherits the designated initializers of; /// its super class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:159,Integrability,interface,interface,159,/// Returns the designated initializers for the interface.; ///; /// If this declaration does not have methods marked as designated; /// initializers then the interface inherits the designated initializers of; /// its super class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:169,Modifiability,inherit,inherits,169,/// Returns the designated initializers for the interface.; ///; /// If this declaration does not have methods marked as designated; /// initializers then the interface inherits the designated initializers of; /// its super class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:80,Integrability,interface,interface,80,"/// Returns true if the given selector is a designated initializer for the; /// interface.; ///; /// If this declaration does not have methods marked as designated; /// initializers then the interface inherits the designated initializers of; /// its super class.; ///; /// \param InitMethod if non-null and the function returns true, it receives; /// the method that was marked as a designated initializer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:191,Integrability,interface,interface,191,"/// Returns true if the given selector is a designated initializer for the; /// interface.; ///; /// If this declaration does not have methods marked as designated; /// initializers then the interface inherits the designated initializers of; /// its super class.; ///; /// \param InitMethod if non-null and the function returns true, it receives; /// the method that was marked as a designated initializer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:201,Modifiability,inherit,inherits,201,"/// Returns true if the given selector is a designated initializer for the; /// interface.; ///; /// If this declaration does not have methods marked as designated; /// initializers then the interface inherits the designated initializers of; /// its super class.; ///; /// \param InitMethod if non-null and the function returns true, it receives; /// the method that was marked as a designated initializer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:144,Integrability,interface,interface,144,"/// Retrieve the definition of this class, or NULL if this class; /// has been forward-declared (with \@class) but not yet defined (with; /// \@interface).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:144,Integrability,interface,interface,144,"/// Retrieve the definition of this class, or NULL if this class; /// has been forward-declared (with \@class) but not yet defined (with; /// \@interface).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:124,Integrability,interface,interface,124,"/// Starts the definition of this Objective-C class, taking it from; /// a forward declaration (\@class) to a definition (\@interface).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:4,Testability,Test,Test,4,/// Test whether the given category is visible.; ///; /// Used in the \c visible_categories_iterator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:4,Testability,Test,Test,4,/// Test whether the given category... is a category.; ///; /// Used in the \c known_categories_iterator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:4,Testability,Test,Test,4,/// Test whether the given category is a visible extension.; ///; /// Used in the \c visible_extensions_iterator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:4,Testability,Test,Test,4,/// Test whether the given category is an extension.; ///; /// Used in the \c known_extensions_iterator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:112,Integrability,interface,interface,112,/// isSuperClassOf - Return true if this class is the specified class or is a; /// super class of the specified interface class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:96,Integrability,protocol,protocols,96,"// Lookup a method. First, we search locally. If a method isn't; // found, we search referenced protocols and class categories.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:179,Integrability,interface,interface,179,/// isImplicitInterfaceDecl - check that this is an implicitly declared; /// ObjCInterfaceDecl node. This is for legacy objective-c \@implementation; /// declaration without an \@interface declaration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:51,Integrability,protocol,protocol,51,"/// ClassImplementsProtocol - Checks that 'lProto' protocol; /// has been implemented in IDecl class, its super class or categories (if; /// lookupCategory is true).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:13,Security,access,accessor,13,// Low-level accessor,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:20,Security,hash,hash,20,/// True if a valid hash is stored in ODRHash.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:462,Availability,avail,available,462,"/// ObjCIvarDecl - Represents an ObjC instance variable. In general, ObjC; /// instance variables are identical to C. The only exception is Objective-C; /// supports C++ style access control. For example:; ///; /// \@interface IvarExample : NSObject; /// {; /// id defaultToProtected;; /// \@public:; /// id canBePublic; // same as C++.; /// \@protected:; /// id canBeProtected; // same as C++.; /// \@package:; /// id canBePackage; // framework visibility (not available in C++).; /// }; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:217,Integrability,interface,interface,217,"/// ObjCIvarDecl - Represents an ObjC instance variable. In general, ObjC; /// instance variables are identical to C. The only exception is Objective-C; /// supports C++ style access control. For example:; ///; /// \@interface IvarExample : NSObject; /// {; /// id defaultToProtected;; /// \@public:; /// id canBePublic; // same as C++.; /// \@protected:; /// id canBeProtected; // same as C++.; /// \@package:; /// id canBePackage; // framework visibility (not available in C++).; /// }; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:47,Modifiability,variab,variable,47,"/// ObjCIvarDecl - Represents an ObjC instance variable. In general, ObjC; /// instance variables are identical to C. The only exception is Objective-C; /// supports C++ style access control. For example:; ///; /// \@interface IvarExample : NSObject; /// {; /// id defaultToProtected;; /// \@public:; /// id canBePublic; // same as C++.; /// \@protected:; /// id canBeProtected; // same as C++.; /// \@package:; /// id canBePackage; // framework visibility (not available in C++).; /// }; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:88,Modifiability,variab,variables,88,"/// ObjCIvarDecl - Represents an ObjC instance variable. In general, ObjC; /// instance variables are identical to C. The only exception is Objective-C; /// supports C++ style access control. For example:; ///; /// \@interface IvarExample : NSObject; /// {; /// id defaultToProtected;; /// \@public:; /// id canBePublic; // same as C++.; /// \@protected:; /// id canBeProtected; // same as C++.; /// \@package:; /// id canBePackage; // framework visibility (not available in C++).; /// }; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:176,Security,access,access,176,"/// ObjCIvarDecl - Represents an ObjC instance variable. In general, ObjC; /// instance variables are identical to C. The only exception is Objective-C; /// supports C++ style access control. For example:; ///; /// \@interface IvarExample : NSObject; /// {; /// id defaultToProtected;; /// \@public:; /// id canBePublic; // same as C++.; /// \@protected:; /// id canBeProtected; // same as C++.; /// \@package:; /// id canBePackage; // framework visibility (not available in C++).; /// }; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:21,Integrability,interface,interface,21,"/// Return the class interface that this ivar is logically contained; /// in; this is either the interface where the ivar was declared, or the; /// interface the ivar is conceptually a part of in the case of synthesized; /// ivars.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:97,Integrability,interface,interface,97,"/// Return the class interface that this ivar is logically contained; /// in; this is either the interface where the ivar was declared, or the; /// interface the ivar is conceptually a part of in the case of synthesized; /// ivars.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:148,Integrability,interface,interface,148,"/// Return the class interface that this ivar is logically contained; /// in; this is either the interface where the ivar was declared, or the; /// interface the ivar is conceptually a part of in the case of synthesized; /// ivars.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:49,Testability,log,logically,49,"/// Return the class interface that this ivar is logically contained; /// in; this is either the interface where the ivar was declared, or the; /// interface the ivar is conceptually a part of in the case of synthesized; /// ivars.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:39,Modifiability,variab,variable,39,/// Retrieve the type of this instance variable when viewed as a member of a; /// specific object type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:38,Safety,avoid,avoid,38,"// NOTE: VC++ treats enums as signed, avoid using the AccessControl enum",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:54,Security,Access,AccessControl,54,"// NOTE: VC++ treats enums as signed, avoid using the AccessControl enum",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:30,Integrability,protocol,protocol,30,"/// Represents an Objective-C protocol declaration.; ///; /// Objective-C protocols declare a pure abstract type (i.e., no instance; /// variables are permitted). Protocols originally drew inspiration from; /// C++ pure virtual functions (a C++ feature with nice semantics and lousy; /// syntax:-). Here is an example:; ///; /// \code; /// \@protocol NSDraggingInfo <refproto1, refproto2>; /// - (NSWindow *)draggingDestinationWindow;; /// - (NSImage *)draggedImage;; /// \@end; /// \endcode; ///; /// This says that NSDraggingInfo requires two methods and requires everything; /// that the two ""referenced protocols"" 'refproto1' and 'refproto2' require as; /// well.; ///; /// \code; /// \@interface ImplementsNSDraggingInfo : NSObject \<NSDraggingInfo>; /// \@end; /// \endcode; ///; /// ObjC protocols inspired Java interfaces. Unlike Java, ObjC classes and; /// protocols are in distinct namespaces. For example, Cocoa defines both; /// an NSObject protocol and class (which isn't allowed in Java). As a result,; /// protocols are referenced using angle brackets as follows:; ///; /// id \<NSDraggingInfo> anyObjectThatImplementsNSDraggingInfo;",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:74,Integrability,protocol,protocols,74,"/// Represents an Objective-C protocol declaration.; ///; /// Objective-C protocols declare a pure abstract type (i.e., no instance; /// variables are permitted). Protocols originally drew inspiration from; /// C++ pure virtual functions (a C++ feature with nice semantics and lousy; /// syntax:-). Here is an example:; ///; /// \code; /// \@protocol NSDraggingInfo <refproto1, refproto2>; /// - (NSWindow *)draggingDestinationWindow;; /// - (NSImage *)draggedImage;; /// \@end; /// \endcode; ///; /// This says that NSDraggingInfo requires two methods and requires everything; /// that the two ""referenced protocols"" 'refproto1' and 'refproto2' require as; /// well.; ///; /// \code; /// \@interface ImplementsNSDraggingInfo : NSObject \<NSDraggingInfo>; /// \@end; /// \endcode; ///; /// ObjC protocols inspired Java interfaces. Unlike Java, ObjC classes and; /// protocols are in distinct namespaces. For example, Cocoa defines both; /// an NSObject protocol and class (which isn't allowed in Java). As a result,; /// protocols are referenced using angle brackets as follows:; ///; /// id \<NSDraggingInfo> anyObjectThatImplementsNSDraggingInfo;",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:163,Integrability,Protocol,Protocols,163,"/// Represents an Objective-C protocol declaration.; ///; /// Objective-C protocols declare a pure abstract type (i.e., no instance; /// variables are permitted). Protocols originally drew inspiration from; /// C++ pure virtual functions (a C++ feature with nice semantics and lousy; /// syntax:-). Here is an example:; ///; /// \code; /// \@protocol NSDraggingInfo <refproto1, refproto2>; /// - (NSWindow *)draggingDestinationWindow;; /// - (NSImage *)draggedImage;; /// \@end; /// \endcode; ///; /// This says that NSDraggingInfo requires two methods and requires everything; /// that the two ""referenced protocols"" 'refproto1' and 'refproto2' require as; /// well.; ///; /// \code; /// \@interface ImplementsNSDraggingInfo : NSObject \<NSDraggingInfo>; /// \@end; /// \endcode; ///; /// ObjC protocols inspired Java interfaces. Unlike Java, ObjC classes and; /// protocols are in distinct namespaces. For example, Cocoa defines both; /// an NSObject protocol and class (which isn't allowed in Java). As a result,; /// protocols are referenced using angle brackets as follows:; ///; /// id \<NSDraggingInfo> anyObjectThatImplementsNSDraggingInfo;",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:342,Integrability,protocol,protocol,342,"/// Represents an Objective-C protocol declaration.; ///; /// Objective-C protocols declare a pure abstract type (i.e., no instance; /// variables are permitted). Protocols originally drew inspiration from; /// C++ pure virtual functions (a C++ feature with nice semantics and lousy; /// syntax:-). Here is an example:; ///; /// \code; /// \@protocol NSDraggingInfo <refproto1, refproto2>; /// - (NSWindow *)draggingDestinationWindow;; /// - (NSImage *)draggedImage;; /// \@end; /// \endcode; ///; /// This says that NSDraggingInfo requires two methods and requires everything; /// that the two ""referenced protocols"" 'refproto1' and 'refproto2' require as; /// well.; ///; /// \code; /// \@interface ImplementsNSDraggingInfo : NSObject \<NSDraggingInfo>; /// \@end; /// \endcode; ///; /// ObjC protocols inspired Java interfaces. Unlike Java, ObjC classes and; /// protocols are in distinct namespaces. For example, Cocoa defines both; /// an NSObject protocol and class (which isn't allowed in Java). As a result,; /// protocols are referenced using angle brackets as follows:; ///; /// id \<NSDraggingInfo> anyObjectThatImplementsNSDraggingInfo;",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:607,Integrability,protocol,protocols,607,"/// Represents an Objective-C protocol declaration.; ///; /// Objective-C protocols declare a pure abstract type (i.e., no instance; /// variables are permitted). Protocols originally drew inspiration from; /// C++ pure virtual functions (a C++ feature with nice semantics and lousy; /// syntax:-). Here is an example:; ///; /// \code; /// \@protocol NSDraggingInfo <refproto1, refproto2>; /// - (NSWindow *)draggingDestinationWindow;; /// - (NSImage *)draggedImage;; /// \@end; /// \endcode; ///; /// This says that NSDraggingInfo requires two methods and requires everything; /// that the two ""referenced protocols"" 'refproto1' and 'refproto2' require as; /// well.; ///; /// \code; /// \@interface ImplementsNSDraggingInfo : NSObject \<NSDraggingInfo>; /// \@end; /// \endcode; ///; /// ObjC protocols inspired Java interfaces. Unlike Java, ObjC classes and; /// protocols are in distinct namespaces. For example, Cocoa defines both; /// an NSObject protocol and class (which isn't allowed in Java). As a result,; /// protocols are referenced using angle brackets as follows:; ///; /// id \<NSDraggingInfo> anyObjectThatImplementsNSDraggingInfo;",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:691,Integrability,interface,interface,691,"/// Represents an Objective-C protocol declaration.; ///; /// Objective-C protocols declare a pure abstract type (i.e., no instance; /// variables are permitted). Protocols originally drew inspiration from; /// C++ pure virtual functions (a C++ feature with nice semantics and lousy; /// syntax:-). Here is an example:; ///; /// \code; /// \@protocol NSDraggingInfo <refproto1, refproto2>; /// - (NSWindow *)draggingDestinationWindow;; /// - (NSImage *)draggedImage;; /// \@end; /// \endcode; ///; /// This says that NSDraggingInfo requires two methods and requires everything; /// that the two ""referenced protocols"" 'refproto1' and 'refproto2' require as; /// well.; ///; /// \code; /// \@interface ImplementsNSDraggingInfo : NSObject \<NSDraggingInfo>; /// \@end; /// \endcode; ///; /// ObjC protocols inspired Java interfaces. Unlike Java, ObjC classes and; /// protocols are in distinct namespaces. For example, Cocoa defines both; /// an NSObject protocol and class (which isn't allowed in Java). As a result,; /// protocols are referenced using angle brackets as follows:; ///; /// id \<NSDraggingInfo> anyObjectThatImplementsNSDraggingInfo;",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:795,Integrability,protocol,protocols,795,"/// Represents an Objective-C protocol declaration.; ///; /// Objective-C protocols declare a pure abstract type (i.e., no instance; /// variables are permitted). Protocols originally drew inspiration from; /// C++ pure virtual functions (a C++ feature with nice semantics and lousy; /// syntax:-). Here is an example:; ///; /// \code; /// \@protocol NSDraggingInfo <refproto1, refproto2>; /// - (NSWindow *)draggingDestinationWindow;; /// - (NSImage *)draggedImage;; /// \@end; /// \endcode; ///; /// This says that NSDraggingInfo requires two methods and requires everything; /// that the two ""referenced protocols"" 'refproto1' and 'refproto2' require as; /// well.; ///; /// \code; /// \@interface ImplementsNSDraggingInfo : NSObject \<NSDraggingInfo>; /// \@end; /// \endcode; ///; /// ObjC protocols inspired Java interfaces. Unlike Java, ObjC classes and; /// protocols are in distinct namespaces. For example, Cocoa defines both; /// an NSObject protocol and class (which isn't allowed in Java). As a result,; /// protocols are referenced using angle brackets as follows:; ///; /// id \<NSDraggingInfo> anyObjectThatImplementsNSDraggingInfo;",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:819,Integrability,interface,interfaces,819,"/// Represents an Objective-C protocol declaration.; ///; /// Objective-C protocols declare a pure abstract type (i.e., no instance; /// variables are permitted). Protocols originally drew inspiration from; /// C++ pure virtual functions (a C++ feature with nice semantics and lousy; /// syntax:-). Here is an example:; ///; /// \code; /// \@protocol NSDraggingInfo <refproto1, refproto2>; /// - (NSWindow *)draggingDestinationWindow;; /// - (NSImage *)draggedImage;; /// \@end; /// \endcode; ///; /// This says that NSDraggingInfo requires two methods and requires everything; /// that the two ""referenced protocols"" 'refproto1' and 'refproto2' require as; /// well.; ///; /// \code; /// \@interface ImplementsNSDraggingInfo : NSObject \<NSDraggingInfo>; /// \@end; /// \endcode; ///; /// ObjC protocols inspired Java interfaces. Unlike Java, ObjC classes and; /// protocols are in distinct namespaces. For example, Cocoa defines both; /// an NSObject protocol and class (which isn't allowed in Java). As a result,; /// protocols are referenced using angle brackets as follows:; ///; /// id \<NSDraggingInfo> anyObjectThatImplementsNSDraggingInfo;",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:866,Integrability,protocol,protocols,866,"/// Represents an Objective-C protocol declaration.; ///; /// Objective-C protocols declare a pure abstract type (i.e., no instance; /// variables are permitted). Protocols originally drew inspiration from; /// C++ pure virtual functions (a C++ feature with nice semantics and lousy; /// syntax:-). Here is an example:; ///; /// \code; /// \@protocol NSDraggingInfo <refproto1, refproto2>; /// - (NSWindow *)draggingDestinationWindow;; /// - (NSImage *)draggedImage;; /// \@end; /// \endcode; ///; /// This says that NSDraggingInfo requires two methods and requires everything; /// that the two ""referenced protocols"" 'refproto1' and 'refproto2' require as; /// well.; ///; /// \code; /// \@interface ImplementsNSDraggingInfo : NSObject \<NSDraggingInfo>; /// \@end; /// \endcode; ///; /// ObjC protocols inspired Java interfaces. Unlike Java, ObjC classes and; /// protocols are in distinct namespaces. For example, Cocoa defines both; /// an NSObject protocol and class (which isn't allowed in Java). As a result,; /// protocols are referenced using angle brackets as follows:; ///; /// id \<NSDraggingInfo> anyObjectThatImplementsNSDraggingInfo;",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:953,Integrability,protocol,protocol,953,"/// Represents an Objective-C protocol declaration.; ///; /// Objective-C protocols declare a pure abstract type (i.e., no instance; /// variables are permitted). Protocols originally drew inspiration from; /// C++ pure virtual functions (a C++ feature with nice semantics and lousy; /// syntax:-). Here is an example:; ///; /// \code; /// \@protocol NSDraggingInfo <refproto1, refproto2>; /// - (NSWindow *)draggingDestinationWindow;; /// - (NSImage *)draggedImage;; /// \@end; /// \endcode; ///; /// This says that NSDraggingInfo requires two methods and requires everything; /// that the two ""referenced protocols"" 'refproto1' and 'refproto2' require as; /// well.; ///; /// \code; /// \@interface ImplementsNSDraggingInfo : NSObject \<NSDraggingInfo>; /// \@end; /// \endcode; ///; /// ObjC protocols inspired Java interfaces. Unlike Java, ObjC classes and; /// protocols are in distinct namespaces. For example, Cocoa defines both; /// an NSObject protocol and class (which isn't allowed in Java). As a result,; /// protocols are referenced using angle brackets as follows:; ///; /// id \<NSDraggingInfo> anyObjectThatImplementsNSDraggingInfo;",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:1021,Integrability,protocol,protocols,1021,"/// Represents an Objective-C protocol declaration.; ///; /// Objective-C protocols declare a pure abstract type (i.e., no instance; /// variables are permitted). Protocols originally drew inspiration from; /// C++ pure virtual functions (a C++ feature with nice semantics and lousy; /// syntax:-). Here is an example:; ///; /// \code; /// \@protocol NSDraggingInfo <refproto1, refproto2>; /// - (NSWindow *)draggingDestinationWindow;; /// - (NSImage *)draggedImage;; /// \@end; /// \endcode; ///; /// This says that NSDraggingInfo requires two methods and requires everything; /// that the two ""referenced protocols"" 'refproto1' and 'refproto2' require as; /// well.; ///; /// \code; /// \@interface ImplementsNSDraggingInfo : NSObject \<NSDraggingInfo>; /// \@end; /// \endcode; ///; /// ObjC protocols inspired Java interfaces. Unlike Java, ObjC classes and; /// protocols are in distinct namespaces. For example, Cocoa defines both; /// an NSObject protocol and class (which isn't allowed in Java). As a result,; /// protocols are referenced using angle brackets as follows:; ///; /// id \<NSDraggingInfo> anyObjectThatImplementsNSDraggingInfo;",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:137,Modifiability,variab,variables,137,"/// Represents an Objective-C protocol declaration.; ///; /// Objective-C protocols declare a pure abstract type (i.e., no instance; /// variables are permitted). Protocols originally drew inspiration from; /// C++ pure virtual functions (a C++ feature with nice semantics and lousy; /// syntax:-). Here is an example:; ///; /// \code; /// \@protocol NSDraggingInfo <refproto1, refproto2>; /// - (NSWindow *)draggingDestinationWindow;; /// - (NSImage *)draggedImage;; /// \@end; /// \endcode; ///; /// This says that NSDraggingInfo requires two methods and requires everything; /// that the two ""referenced protocols"" 'refproto1' and 'refproto2' require as; /// well.; ///; /// \code; /// \@interface ImplementsNSDraggingInfo : NSObject \<NSDraggingInfo>; /// \@end; /// \endcode; ///; /// ObjC protocols inspired Java interfaces. Unlike Java, ObjC classes and; /// protocols are in distinct namespaces. For example, Cocoa defines both; /// an NSObject protocol and class (which isn't allowed in Java). As a result,; /// protocols are referenced using angle brackets as follows:; ///; /// id \<NSDraggingInfo> anyObjectThatImplementsNSDraggingInfo;",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:37,Integrability,protocol,protocol,37,// The declaration that defines this protocol.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:15,Integrability,protocol,protocols,15,/// Referenced protocols,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:57,Integrability,protocol,protocol,57,/// Tracks whether a ODR hash has been computed for this protocol.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:25,Security,hash,hash,25,/// Tracks whether a ODR hash has been computed for this protocol.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:6,Security,hash,hash,6,/// A hash of parts of the class to help in ODR checking.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:20,Security,hash,hash,20,/// True if a valid hash is stored in ODRHash.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:38,Integrability,protocol,protocols,38,/// setProtocolList - Set the list of protocols that this interface; /// implements.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:58,Integrability,interface,interface,58,/// setProtocolList - Set the list of protocols that this interface; /// implements.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:25,Integrability,protocol,protocol,25,/// This is true iff the protocol is tagged with the; /// `objc_non_runtime_protocol` attribute.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:23,Integrability,protocol,protocols,23,/// Get the set of all protocols implied by this protocols inheritance; /// hierarchy.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:49,Integrability,protocol,protocols,49,/// Get the set of all protocols implied by this protocols inheritance; /// hierarchy.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:59,Modifiability,inherit,inheritance,59,/// Get the set of all protocols implied by this protocols inheritance; /// hierarchy.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:96,Integrability,protocol,protocols,96,"// Lookup a method. First, we search locally. If a method isn't; // found, we search referenced protocols and class categories.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:27,Integrability,protocol,protocol,27,/// Determine whether this protocol has a definition.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:23,Integrability,protocol,protocol,23,"// If the name of this protocol is out-of-date, bring it up-to-date, which; // might bring in a definition.; // Note: a null value indicates that we don't have a definition and that; // modules are enabled.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:36,Integrability,protocol,protocol,36,"/// Retrieve the definition of this protocol, if any.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:36,Integrability,protocol,protocol,36,"/// Retrieve the definition of this protocol, if any.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:46,Integrability,protocol,protocol,46,/// Starts the definition of this Objective-C protocol.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:34,Integrability,protocol,protocol,34,/// Produce a name to be used for protocol's metadata. It comes either via; /// objc_runtime_name attribute or protocol name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:111,Integrability,protocol,protocol,111,/// Produce a name to be used for protocol's metadata. It comes either via; /// objc_runtime_name attribute or protocol name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:60,Integrability,protocol,protocol,60,/// Retrieves the canonical declaration of this Objective-C protocol.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:776,Energy Efficiency,power,powerful,776,"/// ObjCCategoryDecl - Represents a category declaration. A category allows; /// you to add methods to an existing class (without subclassing or modifying; /// the original class interface or implementation:-). Categories don't allow; /// you to add instance data. The following example adds ""myMethod"" to all; /// NSView's within a process:; ///; /// \@interface NSView (MyViewMethods); /// - myMethod;; /// \@end; ///; /// Categories also allow you to split the implementation of a class across; /// several files (a feature more naturally supported in C++).; ///; /// Categories were originally inspired by dynamic languages such as Common; /// Lisp and Smalltalk. More traditional class-based languages (C++, Java); /// don't support this level of dynamism, which is both powerful and dangerous.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:179,Integrability,interface,interface,179,"/// ObjCCategoryDecl - Represents a category declaration. A category allows; /// you to add methods to an existing class (without subclassing or modifying; /// the original class interface or implementation:-). Categories don't allow; /// you to add instance data. The following example adds ""myMethod"" to all; /// NSView's within a process:; ///; /// \@interface NSView (MyViewMethods); /// - myMethod;; /// \@end; ///; /// Categories also allow you to split the implementation of a class across; /// several files (a feature more naturally supported in C++).; ///; /// Categories were originally inspired by dynamic languages such as Common; /// Lisp and Smalltalk. More traditional class-based languages (C++, Java); /// don't support this level of dynamism, which is both powerful and dangerous.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:354,Integrability,interface,interface,354,"/// ObjCCategoryDecl - Represents a category declaration. A category allows; /// you to add methods to an existing class (without subclassing or modifying; /// the original class interface or implementation:-). Categories don't allow; /// you to add instance data. The following example adds ""myMethod"" to all; /// NSView's within a process:; ///; /// \@interface NSView (MyViewMethods); /// - myMethod;; /// \@end; ///; /// Categories also allow you to split the implementation of a class across; /// several files (a feature more naturally supported in C++).; ///; /// Categories were originally inspired by dynamic languages such as Common; /// Lisp and Smalltalk. More traditional class-based languages (C++, Java); /// don't support this level of dynamism, which is both powerful and dangerous.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:4,Integrability,Interface,Interface,4,/// Interface belonging to this category,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:15,Integrability,protocol,protocols,15,/// referenced protocols in this category.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:178,Safety,avoid,avoid,178,"/// Set the type parameters of this category.; ///; /// This function is used by the AST importer, which must import the type; /// parameters after creating their DeclContext to avoid loops.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:38,Integrability,protocol,protocols,38,/// setProtocolList - Set the list of protocols that this interface; /// implements.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:58,Integrability,interface,interface,58,/// setProtocolList - Set the list of protocols that this interface; /// implements.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:10,Integrability,interface,interface,10,/// Class interface for this class/category implementation,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:12,Security,access,access,12,// Iterator access to properties.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:272,Integrability,interface,interface,272,"/// ObjCCategoryImplDecl - An object of this class encapsulates a category; /// \@implementation declaration. If a category class has declaration of a; /// property, its implementation must be specified in the category's; /// \@implementation declaration. Example:; /// \@interface I \@end; /// \@interface I(CATEGORY); /// \@property int p1, d1;; /// \@end; /// \@implementation I(CATEGORY); /// \@dynamic p1,d1;; /// \@end; ///; /// ObjCCategoryImplDecl",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:297,Integrability,interface,interface,297,"/// ObjCCategoryImplDecl - An object of this class encapsulates a category; /// \@implementation declaration. If a category class has declaration of a; /// property, its implementation must be specified in the category's; /// \@implementation declaration. Example:; /// \@interface I \@end; /// \@interface I(CATEGORY); /// \@property int p1, d1;; /// \@end; /// \@implementation I(CATEGORY); /// \@dynamic p1,d1;; /// \@end; ///; /// ObjCCategoryImplDecl",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:327,Integrability,interface,interface,327,"/// ObjCImplementationDecl - Represents a class definition - this is where; /// method definitions are specified. For example:; ///; /// @code; /// \@implementation MyClass; /// - (void)myMethod { /* do something */ }; /// \@end; /// @endcode; ///; /// In a non-fragile runtime, instance variables can appear in the class; /// interface, class extensions (nameless categories), and in the implementation; /// itself, as well as being synthesized as backing storage for properties.; ///; /// In a fragile runtime, instance variables are specified in the class; /// interface, \em not in the implementation. Nevertheless (for legacy reasons),; /// we allow instance variables to be specified in the implementation. When; /// specified, they need to be \em identical to the interface.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:564,Integrability,interface,interface,564,"/// ObjCImplementationDecl - Represents a class definition - this is where; /// method definitions are specified. For example:; ///; /// @code; /// \@implementation MyClass; /// - (void)myMethod { /* do something */ }; /// \@end; /// @endcode; ///; /// In a non-fragile runtime, instance variables can appear in the class; /// interface, class extensions (nameless categories), and in the implementation; /// itself, as well as being synthesized as backing storage for properties.; ///; /// In a fragile runtime, instance variables are specified in the class; /// interface, \em not in the implementation. Nevertheless (for legacy reasons),; /// we allow instance variables to be specified in the implementation. When; /// specified, they need to be \em identical to the interface.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:771,Integrability,interface,interface,771,"/// ObjCImplementationDecl - Represents a class definition - this is where; /// method definitions are specified. For example:; ///; /// @code; /// \@implementation MyClass; /// - (void)myMethod { /* do something */ }; /// \@end; /// @endcode; ///; /// In a non-fragile runtime, instance variables can appear in the class; /// interface, class extensions (nameless categories), and in the implementation; /// itself, as well as being synthesized as backing storage for properties.; ///; /// In a fragile runtime, instance variables are specified in the class; /// interface, \em not in the implementation. Nevertheless (for legacy reasons),; /// we allow instance variables to be specified in the implementation. When; /// specified, they need to be \em identical to the interface.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:288,Modifiability,variab,variables,288,"/// ObjCImplementationDecl - Represents a class definition - this is where; /// method definitions are specified. For example:; ///; /// @code; /// \@implementation MyClass; /// - (void)myMethod { /* do something */ }; /// \@end; /// @endcode; ///; /// In a non-fragile runtime, instance variables can appear in the class; /// interface, class extensions (nameless categories), and in the implementation; /// itself, as well as being synthesized as backing storage for properties.; ///; /// In a fragile runtime, instance variables are specified in the class; /// interface, \em not in the implementation. Nevertheless (for legacy reasons),; /// we allow instance variables to be specified in the implementation. When; /// specified, they need to be \em identical to the interface.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:522,Modifiability,variab,variables,522,"/// ObjCImplementationDecl - Represents a class definition - this is where; /// method definitions are specified. For example:; ///; /// @code; /// \@implementation MyClass; /// - (void)myMethod { /* do something */ }; /// \@end; /// @endcode; ///; /// In a non-fragile runtime, instance variables can appear in the class; /// interface, class extensions (nameless categories), and in the implementation; /// itself, as well as being synthesized as backing storage for properties.; ///; /// In a fragile runtime, instance variables are specified in the class; /// interface, \em not in the implementation. Nevertheless (for legacy reasons),; /// we allow instance variables to be specified in the implementation. When; /// specified, they need to be \em identical to the interface.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:664,Modifiability,variab,variables,664,"/// ObjCImplementationDecl - Represents a class definition - this is where; /// method definitions are specified. For example:; ///; /// @code; /// \@implementation MyClass; /// - (void)myMethod { /* do something */ }; /// \@end; /// @endcode; ///; /// In a non-fragile runtime, instance variables can appear in the class; /// interface, class extensions (nameless categories), and in the implementation; /// itself, as well as being synthesized as backing storage for properties.; ///; /// In a fragile runtime, instance variables are specified in the class; /// interface, \em not in the implementation. Nevertheless (for legacy reasons),; /// we allow instance variables to be specified in the implementation. When; /// specified, they need to be \em identical to the interface.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:65,Integrability,interface,interface,65,/// getIdentifier - Get the identifier that names the class; /// interface associated with this implementation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:55,Integrability,interface,interface,55,"/// getName - Get the name of identifier for the class interface associated; /// with this implementation as a StringRef.; //; // FIXME: This is a bad API, we are hiding NamedDecl::getName with a different; // meaning.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h:51,Integrability,interface,interface,51,/// Get the name of the class associated with this interface.; //; // FIXME: Move to StringRef API.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjCCommon.h:86,Deployability,update,update,86,"// Adding a property should change NumObjCPropertyAttrsBits; // Also, don't forget to update the Clang C API at CXObjCPropertyAttrKind and; // clang_Cursor_getObjCPropertyAttributes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclObjCCommon.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclObjCCommon.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h:116,Security,access,accessors,116,// This class stores some data in DeclContext::OMPDeclareReductionDeclBits; // to save some space. Use the provided accessors to access it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h:129,Security,access,access,129,// This class stores some data in DeclContext::OMPDeclareReductionDeclBits; // to save some space. Use the provided accessors to access it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h:11,Modifiability,variab,variable,11,/// Get In variable of the combiner.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h:12,Modifiability,variab,variable,12,/// Get Out variable of the combiner.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h:13,Modifiability,variab,variable,13,/// Get Orig variable of the initializer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h:13,Modifiability,variab,variable,13,/// Get Priv variable of the initializer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h:11,Modifiability,variab,variable,11,"/// Mapper variable, which is 'v' in the example above",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h:23,Modifiability,variab,variable,23,/// Name of the mapper variable,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h:12,Modifiability,variab,variable,12,/// Get the variable declared in the mapper,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h:12,Modifiability,variab,variable,12,/// Set the variable declared in the mapper,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h:24,Modifiability,variab,variable,24,/// Get the name of the variable declared in the mapper,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h:384,Integrability,wrap,wrapping,384,"/// Pseudo declaration for capturing expressions. Also is used for capturing of; /// non-static data members in non-static member functions.; ///; /// Clang supports capturing of variables only, but OpenMP 4.5 allows to; /// privatize non-static members of current class in non-static member; /// functions. This pseudo-declaration allows properly handle this kind of; /// capture by wrapping captured expression into a variable-like declaration.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h:179,Modifiability,variab,variables,179,"/// Pseudo declaration for capturing expressions. Also is used for capturing of; /// non-static data members in non-static member functions.; ///; /// Clang supports capturing of variables only, but OpenMP 4.5 allows to; /// privatize non-static members of current class in non-static member; /// functions. This pseudo-declaration allows properly handle this kind of; /// capture by wrapping captured expression into a variable-like declaration.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h:420,Modifiability,variab,variable-like,420,"/// Pseudo declaration for capturing expressions. Also is used for capturing of; /// non-static data members in non-static member functions.; ///; /// Clang supports capturing of variables only, but OpenMP 4.5 allows to; /// privatize non-static members of current class in non-static member; /// functions. This pseudo-declaration allows properly handle this kind of; /// capture by wrapping captured expression into a variable-like declaration.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h:33,Energy Efficiency,allocate,allocate,33,"/// This represents '#pragma omp allocate ...' directive.; /// For example, in the following, the default allocator is used for both 'a'; /// and 'A::b':; ///; /// \code; /// int a;; /// #pragma omp allocate(a); /// struct A {; /// static int b;; /// #pragma omp allocate(b); /// };; /// \endcode; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h:199,Energy Efficiency,allocate,allocate,199,"/// This represents '#pragma omp allocate ...' directive.; /// For example, in the following, the default allocator is used for both 'a'; /// and 'A::b':; ///; /// \code; /// int a;; /// #pragma omp allocate(a); /// struct A {; /// static int b;; /// #pragma omp allocate(b); /// };; /// \endcode; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h:263,Energy Efficiency,allocate,allocate,263,"/// This represents '#pragma omp allocate ...' directive.; /// For example, in the following, the default allocator is used for both 'a'; /// and 'A::b':; ///; /// \code; /// int a;; /// #pragma omp allocate(a); /// struct A {; /// static int b;; /// #pragma omp allocate(b); /// };; /// \endcode; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:18,Security,hash,hash,18,/// \brief Create hash for the given arguments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:181,Safety,avoid,avoid,181,"/// Produces a shallow copy of the given template argument list.; ///; /// This operation assumes that the input argument list outlives it.; /// This takes the list as a pointer to avoid looking like a copy; /// constructor, since this really isn't safe to use that way.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:249,Safety,safe,safe,249,"/// Produces a shallow copy of the given template argument list.; ///; /// This operation assumes that the input argument list outlives it.; /// This takes the list as a pointer to avoid looking like a copy; /// constructor, since this really isn't safe to use that way.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:69,Modifiability,inherit,inherit,69,/// Storage for both the value *and* another parameter from which we inherit; /// the default argument. This is used when multiple default arguments for a; /// parameter are merged together from different modules.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:66,Modifiability,inherit,inherited,66,/// Determine whether the default argument for this parameter was inherited; /// from a previous declaration of the same entity.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:36,Modifiability,inherit,inherit,36,"/// Get the parameter from which we inherit the default argument, if any.; /// This is the parameter on which the default argument was actually written.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:38,Modifiability,inherit,inherited,38,/// Set that the default argument was inherited from another parameter.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:48,Modifiability,inherit,inherited,48,"/// Remove the default argument, even if it was inherited.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:99,Energy Efficiency,allocate,allocate,99,"/// The template arguments as written in the sources, if provided.; /// FIXME: Normally null; tail-allocate this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:33,Integrability,depend,dependent,33,/// Provides information about a dependent function-template; /// specialization declaration.; ///; /// This is used for function templates explicit specializations declared; /// within class templates:; ///; /// \code; /// template<typename> struct A {; /// template<typename> void f();; /// template<> void f<int>(); // DependentFunctionTemplateSpecializationInfo; /// };; /// \endcode; ///; /// As well as dependent friend declarations naming function template; /// specializations declared within class templates:; ///; /// \code; /// template \<class T> void foo(T);; /// template \<class T> class A {; /// friend void foo<>(T); // DependentFunctionTemplateSpecializationInfo; /// };; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:322,Integrability,Depend,DependentFunctionTemplateSpecializationInfo,322,/// Provides information about a dependent function-template; /// specialization declaration.; ///; /// This is used for function templates explicit specializations declared; /// within class templates:; ///; /// \code; /// template<typename> struct A {; /// template<typename> void f();; /// template<> void f<int>(); // DependentFunctionTemplateSpecializationInfo; /// };; /// \endcode; ///; /// As well as dependent friend declarations naming function template; /// specializations declared within class templates:; ///; /// \code; /// template \<class T> void foo(T);; /// template \<class T> class A {; /// friend void foo<>(T); // DependentFunctionTemplateSpecializationInfo; /// };; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:409,Integrability,depend,dependent,409,/// Provides information about a dependent function-template; /// specialization declaration.; ///; /// This is used for function templates explicit specializations declared; /// within class templates:; ///; /// \code; /// template<typename> struct A {; /// template<typename> void f();; /// template<> void f<int>(); // DependentFunctionTemplateSpecializationInfo; /// };; /// \endcode; ///; /// As well as dependent friend declarations naming function template; /// specializations declared within class templates:; ///; /// \code; /// template \<class T> void foo(T);; /// template \<class T> class A {; /// friend void foo<>(T); // DependentFunctionTemplateSpecializationInfo; /// };; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:637,Integrability,Depend,DependentFunctionTemplateSpecializationInfo,637,/// Provides information about a dependent function-template; /// specialization declaration.; ///; /// This is used for function templates explicit specializations declared; /// within class templates:; ///; /// \code; /// template<typename> struct A {; /// template<typename> void f();; /// template<> void f<int>(); // DependentFunctionTemplateSpecializationInfo; /// };; /// \endcode; ///; /// As well as dependent friend declarations naming function template; /// specializations declared within class templates:; ///; /// \code; /// template \<class T> void foo(T);; /// template \<class T> class A {; /// friend void foo<>(T); // DependentFunctionTemplateSpecializationInfo; /// };; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:230,Energy Efficiency,allocate,allocated,230,"/// The set of ""injected"" template arguments used within this; /// template.; ///; /// This pointer refers to the template arguments (there are as; /// many template arguments as template parameters) for the; /// template, and is allocated lazily, since most templates do not; /// require the use of this information.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:16,Integrability,inject,injected,16,"/// The set of ""injected"" template arguments used within this; /// template.; ///; /// This pointer refers to the template arguments (there are as; /// many template arguments as template parameters) for the; /// template, and is allocated lazily, since most templates do not; /// require the use of this information.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:16,Security,inject,injected,16,"/// The set of ""injected"" template arguments used within this; /// template.; ///; /// This pointer refers to the template arguments (there are as; /// many template arguments as template parameters) for the; /// template, and is allocated lazily, since most templates do not; /// require the use of this information.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:130,Energy Efficiency,allocate,allocate,130,"/// Retrieves the ""common"" pointer shared by all (re-)declarations of; /// the same template. Calling this routine may implicitly allocate memory; /// for the common pointer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:107,Integrability,rout,routine,107,"/// Retrieves the ""common"" pointer shared by all (re-)declarations of; /// the same template. Calling this routine may implicitly allocate memory; /// for the common pointer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:450,Testability,test,test,450,"/// Retrieve the member template from which this template was; /// instantiated, or nullptr if this template was not instantiated from a; /// member template.; ///; /// A template is instantiated from a member template when the member; /// template itself is part of a class template (or member thereof). For; /// example, given; ///; /// \code; /// template<typename T>; /// struct X {; /// template<typename U> void f(T, U);; /// };; ///; /// void test(X<int> x) {; /// x.f(1, 'a');; /// };; /// \endcode; ///; /// \c X<int>::f is a FunctionTemplateDecl that describes the function; /// template; ///; /// \code; /// template<typename U> void X<int>::f(int, U);; /// \endcode; ///; /// which was itself created during the instantiation of \c X<int>. Calling; /// getInstantiatedFromMemberTemplate() on this FunctionTemplateDecl will; /// retrieve the FunctionTemplateDecl for the original template \c f within; /// the class template \c X<T>, i.e.,; ///; /// \code; /// template<typename T>; /// template<typename U>; /// void X<T>::f(T, U);; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:18,Integrability,inject,injected,18,"/// Retrieve the ""injected"" template arguments that correspond to the; /// template parameters of this template.; ///; /// Although the C++ standard has no notion of the ""injected"" template; /// arguments for a template, the notion is convenient when; /// we need to perform substitutions inside the definition of a template.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:171,Integrability,inject,injected,171,"/// Retrieve the ""injected"" template arguments that correspond to the; /// template parameters of this template.; ///; /// Although the C++ standard has no notion of the ""injected"" template; /// arguments for a template, the notion is convenient when; /// we need to perform substitutions inside the definition of a template.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:267,Performance,perform,perform,267,"/// Retrieve the ""injected"" template arguments that correspond to the; /// template parameters of this template.; ///; /// Although the C++ standard has no notion of the ""injected"" template; /// arguments for a template, the notion is convenient when; /// we need to perform substitutions inside the definition of a template.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:18,Security,inject,injected,18,"/// Retrieve the ""injected"" template arguments that correspond to the; /// template parameters of this template.; ///; /// Although the C++ standard has no notion of the ""injected"" template; /// arguments for a template, the notion is convenient when; /// we need to perform substitutions inside the definition of a template.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:171,Security,inject,injected,171,"/// Retrieve the ""injected"" template arguments that correspond to the; /// template parameters of this template.; ///; /// Although the C++ standard has no notion of the ""injected"" template; /// arguments for a template, the notion is convenient when; /// we need to perform substitutions inside the definition of a template.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:4,Performance,Load,Load,4,/// Load any lazily-loaded specializations from the external source.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:20,Performance,load,loaded,20,/// Load any lazily-loaded specializations from the external source.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:52,Performance,load,loaded,52,"/// All specializations that that have already been loaded, ie avoiding; /// deserialization of lazily registered specializations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:63,Safety,avoid,avoiding,63,"/// All specializations that that have already been loaded, ie avoiding; /// deserialization of lazily registered specializations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:200,Usability,simpl,simply,200,"// Since the invented template parameters generated from 'auto' parameters; // are either appended to the end of the explicit template parameter list or; // form a new template parameter list, we can simply observe the last; // parameter to determine if such a thing happened.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:562,Modifiability,inherit,inheritedly,562,"//===----------------------------------------------------------------------===//; // Kinds of Template Parameters; //===----------------------------------------------------------------------===//; /// Defines the position of a template parameter within a template; /// parameter list.; ///; /// Because template parameter can be listed; /// sequentially for out-of-line template members, each template parameter is; /// given a Depth - the nesting of template parameter scopes - and a Position -; /// the occurrence within the parameter list.; /// This class is inheritedly privately by different kinds of template; /// parameters and is not part of the Decl hierarchy. Just a facility.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:138,Availability,error,error,138,/// Whether the type constraint has been initialized. This can be false if the; /// constraint was not initialized yet or if there was an error forming the; /// type constraint.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:48,Modifiability,inherit,inherited,48,/// Determines whether the default argument was inherited; /// from a previous declaration of this template.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:39,Modifiability,inherit,inherited,39,/// Set that this default argument was inherited from another; /// parameter.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:74,Modifiability,inherit,inherited,74,"/// The default template argument, if any, and whether or not; /// it was inherited.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:82,Availability,down,down,82,"// FIXME: Collapse this into TemplateParamPosition; or, just move depth/index; // down here to save memory.; /// Whether this non-type template parameter is a parameter pack.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:48,Modifiability,inherit,inherited,48,/// Determines whether the default argument was inherited; /// from a previous declaration of this template.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:101,Modifiability,inherit,inherited,101,"/// Set the default argument for this template parameter, and; /// whether that default argument was inherited from another; /// declaration.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:232,Integrability,wrap,wrapping,232,"/// Whether this parameter pack is a pack expansion.; ///; /// A non-type template parameter pack is a pack expansion if its type; /// contains an unexpanded parameter pack. In this case, we will have; /// built a PackExpansionType wrapping the type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:48,Modifiability,inherit,inherited,48,/// Determines whether the default argument was inherited; /// from a previous declaration of this template.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:101,Modifiability,inherit,inherited,101,"/// Set the default argument for this template parameter, and; /// whether that default argument was inherited from another; /// declaration.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:340,Integrability,inject,injected-class-name,340,"// FIXME: This is broken. CXXRecordDecl::getMostRecentDecl() returns a; // different ""most recent"" declaration from this function for the same; // declaration, because we don't override getMostRecentDeclImpl(). But; // it's not clear that we should override that, because the most recent; // declaration as a CXXRecordDecl sometimes is the injected-class-name.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:340,Security,inject,injected-class-name,340,"// FIXME: This is broken. CXXRecordDecl::getMostRecentDecl() returns a; // different ""most recent"" declaration from this function for the same; // declaration, because we don't override getMostRecentDeclImpl(). But; // it's not clear that we should override that, because the most recent; // declaration as a CXXRecordDecl sometimes is the injected-class-name.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:228,Usability,clear,clear,228,"// FIXME: This is broken. CXXRecordDecl::getMostRecentDecl() returns a; // different ""most recent"" declaration from this function for the same; // declaration, because we don't override getMostRecentDeclImpl(). But; // it's not clear that we should override that, because the most recent; // declaration as a CXXRecordDecl sometimes is the injected-class-name.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:71,Availability,redundant,redundant,71,/// The source info for the template arguments as written.; /// FIXME: redundant with TypeAsWritten?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:71,Safety,redund,redundant,71,/// The source info for the template arguments as written.; /// FIXME: redundant with TypeAsWritten?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:18,Integrability,inject,injected,18,"/// Retrieves the injected specialization type for this partial; /// specialization. This is not the same as the type-decl-type for; /// this partial specialization, which is an InjectedClassNameType.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:178,Integrability,Inject,InjectedClassNameType,178,"/// Retrieves the injected specialization type for this partial; /// specialization. This is not the same as the type-decl-type for; /// this partial specialization, which is an InjectedClassNameType.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:18,Security,inject,injected,18,"/// Retrieves the injected specialization type for this partial; /// specialization. This is not the same as the type-decl-type for; /// this partial specialization, which is an InjectedClassNameType.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:178,Security,Inject,InjectedClassNameType,178,"/// Retrieves the injected specialization type for this partial; /// specialization. This is not the same as the type-decl-type for; /// this partial specialization, which is an InjectedClassNameType.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:8,Integrability,inject,injected-class-name,8,/// The injected-class-name type for this class template.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:8,Security,inject,injected-class-name,8,/// The injected-class-name type for this class template.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:4,Performance,Load,Load,4,/// Load any lazily-loaded specializations from the external source.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:20,Performance,load,loaded,20,/// Load any lazily-loaded specializations from the external source.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:98,Integrability,depend,dependent,98,"/// Find a class template partial specialization with the given; /// type T.; ///; /// \param T a dependent type that names a specialization of this class; /// template.; ///; /// \returns the class template partial specialization that exactly matches; /// the type \p T, or nullptr if no such partial specialization exists.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:58,Integrability,inject,injected-class-name,58,"/// Retrieve the template specialization type of the; /// injected-class-name for this class template.; ///; /// The injected-class-name for a class template \c X is \c; /// X<template-args>, where \c template-args is formed from the; /// template arguments that correspond to the template parameters of; /// \c X. For example:; ///; /// \code; /// template<typename T, int N>; /// struct array {; /// typedef array this_type; // ""array"" is equivalent to ""array<T, N>""; /// };; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:117,Integrability,inject,injected-class-name,117,"/// Retrieve the template specialization type of the; /// injected-class-name for this class template.; ///; /// The injected-class-name for a class template \c X is \c; /// X<template-args>, where \c template-args is formed from the; /// template arguments that correspond to the template parameters of; /// \c X. For example:; ///; /// \code; /// template<typename T, int N>; /// struct array {; /// typedef array this_type; // ""array"" is equivalent to ""array<T, N>""; /// };; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:58,Security,inject,injected-class-name,58,"/// Retrieve the template specialization type of the; /// injected-class-name for this class template.; ///; /// The injected-class-name for a class template \c X is \c; /// X<template-args>, where \c template-args is formed from the; /// template arguments that correspond to the template parameters of; /// \c X. For example:; ///; /// \code; /// template<typename T, int N>; /// struct array {; /// typedef array this_type; // ""array"" is equivalent to ""array<T, N>""; /// };; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:117,Security,inject,injected-class-name,117,"/// Retrieve the template specialization type of the; /// injected-class-name for this class template.; ///; /// The injected-class-name for a class template \c X is \c; /// X<template-args>, where \c template-args is formed from the; /// template arguments that correspond to the template parameters of; /// \c X. For example:; ///; /// \code; /// template<typename T, int N>; /// struct array {; /// typedef array this_type; // ""array"" is equivalent to ""array<T, N>""; /// };; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:52,Performance,load,loaded,52,"/// All specializations that that have already been loaded, ie avoiding; /// deserialization of lazily registered specializations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:63,Safety,avoid,avoiding,63,"/// All specializations that that have already been loaded, ie avoiding; /// deserialization of lazily registered specializations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:65,Integrability,depend,dependent,65,"/// If this friend declaration names a templated type (or; /// a dependent member type of a templated type), return that; /// type; otherwise return null.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:17,Modifiability,variab,variable,17,"/// Represents a variable template specialization, which refers to; /// a variable template with a given set of template arguments.; ///; /// Variable template specializations represent both explicit; /// specializations of variable templates, as in the example below, and; /// implicit instantiations of variable templates.; ///; /// \code; /// template<typename T> constexpr T pi = T(3.1415926535897932385);; ///; /// template<>; /// constexpr float pi<float>; // variable template specialization pi<float>; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:74,Modifiability,variab,variable,74,"/// Represents a variable template specialization, which refers to; /// a variable template with a given set of template arguments.; ///; /// Variable template specializations represent both explicit; /// specializations of variable templates, as in the example below, and; /// implicit instantiations of variable templates.; ///; /// \code; /// template<typename T> constexpr T pi = T(3.1415926535897932385);; ///; /// template<>; /// constexpr float pi<float>; // variable template specialization pi<float>; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:142,Modifiability,Variab,Variable,142,"/// Represents a variable template specialization, which refers to; /// a variable template with a given set of template arguments.; ///; /// Variable template specializations represent both explicit; /// specializations of variable templates, as in the example below, and; /// implicit instantiations of variable templates.; ///; /// \code; /// template<typename T> constexpr T pi = T(3.1415926535897932385);; ///; /// template<>; /// constexpr float pi<float>; // variable template specialization pi<float>; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:224,Modifiability,variab,variable,224,"/// Represents a variable template specialization, which refers to; /// a variable template with a given set of template arguments.; ///; /// Variable template specializations represent both explicit; /// specializations of variable templates, as in the example below, and; /// implicit instantiations of variable templates.; ///; /// \code; /// template<typename T> constexpr T pi = T(3.1415926535897932385);; ///; /// template<>; /// constexpr float pi<float>; // variable template specialization pi<float>; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:305,Modifiability,variab,variable,305,"/// Represents a variable template specialization, which refers to; /// a variable template with a given set of template arguments.; ///; /// Variable template specializations represent both explicit; /// specializations of variable templates, as in the example below, and; /// implicit instantiations of variable templates.; ///; /// \code; /// template<typename T> constexpr T pi = T(3.1415926535897932385);; ///; /// template<>; /// constexpr float pi<float>; // variable template specialization pi<float>; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:466,Modifiability,variab,variable,466,"/// Represents a variable template specialization, which refers to; /// a variable template with a given set of template arguments.; ///; /// Variable template specializations represent both explicit; /// specializations of variable templates, as in the example below, and; /// implicit instantiations of variable templates.; ///; /// \code; /// template<typename T> constexpr T pi = T(3.1415926535897932385);; ///; /// template<>; /// constexpr float pi<float>; // variable template specialization pi<float>; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:46,Modifiability,variab,variable,46,/// Structure that stores information about a variable template; /// specialization that was instantiated from a variable template partial; /// specialization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:113,Modifiability,variab,variable,113,/// Structure that stores information about a variable template; /// specialization that was instantiated from a variable template partial; /// specialization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:8,Modifiability,variab,variable,8,/// The variable template partial specialization from which this; /// variable template specialization was instantiated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:70,Modifiability,variab,variable,70,/// The variable template partial specialization from which this; /// variable template specialization was instantiated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:47,Modifiability,variab,variable,47,/// The template argument list deduced for the variable template; /// partial specialization itself.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:66,Modifiability,variab,variable,66,/// Whether this declaration is a complete definition of the; /// variable template specialization. We can't otherwise tell apart; /// an instantiated declaration from an instantiated definition with; /// no initializer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:43,Modifiability,variab,variable,43,/// Retrieve the template arguments of the variable template; /// specialization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:12,Modifiability,variab,variable,12,"/// If this variable template specialization is an instantiation of; /// a template (rather than an explicit specialization), return the; /// variable template or variable template partial specialization from which; /// it was instantiated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:142,Modifiability,variab,variable,142,"/// If this variable template specialization is an instantiation of; /// a template (rather than an explicit specialization), return the; /// variable template or variable template partial specialization from which; /// it was instantiated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:163,Modifiability,variab,variable,163,"/// If this variable template specialization is an instantiation of; /// a template (rather than an explicit specialization), return the; /// variable template or variable template partial specialization from which; /// it was instantiated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:17,Modifiability,variab,variable,17,/// Retrieve the variable template or variable template partial; /// specialization which was specialized by this.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:38,Modifiability,variab,variable,38,/// Retrieve the variable template or variable template partial; /// specialization which was specialized by this.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:106,Modifiability,variab,variable,106,"/// Retrieve the set of template arguments that should be used; /// to instantiate the initializer of the variable template or variable; /// template partial specialization from which this variable template; /// specialization was instantiated.; ///; /// \returns For a variable template specialization instantiated from the; /// primary template, this function will return the same template arguments; /// as getTemplateArgs(). For a variable template specialization instantiated; /// from a variable template partial specialization, this function will the; /// return deduced template arguments for the variable template partial; /// specialization itself.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:127,Modifiability,variab,variable,127,"/// Retrieve the set of template arguments that should be used; /// to instantiate the initializer of the variable template or variable; /// template partial specialization from which this variable template; /// specialization was instantiated.; ///; /// \returns For a variable template specialization instantiated from the; /// primary template, this function will return the same template arguments; /// as getTemplateArgs(). For a variable template specialization instantiated; /// from a variable template partial specialization, this function will the; /// return deduced template arguments for the variable template partial; /// specialization itself.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:189,Modifiability,variab,variable,189,"/// Retrieve the set of template arguments that should be used; /// to instantiate the initializer of the variable template or variable; /// template partial specialization from which this variable template; /// specialization was instantiated.; ///; /// \returns For a variable template specialization instantiated from the; /// primary template, this function will return the same template arguments; /// as getTemplateArgs(). For a variable template specialization instantiated; /// from a variable template partial specialization, this function will the; /// return deduced template arguments for the variable template partial; /// specialization itself.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:270,Modifiability,variab,variable,270,"/// Retrieve the set of template arguments that should be used; /// to instantiate the initializer of the variable template or variable; /// template partial specialization from which this variable template; /// specialization was instantiated.; ///; /// \returns For a variable template specialization instantiated from the; /// primary template, this function will return the same template arguments; /// as getTemplateArgs(). For a variable template specialization instantiated; /// from a variable template partial specialization, this function will the; /// return deduced template arguments for the variable template partial; /// specialization itself.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:435,Modifiability,variab,variable,435,"/// Retrieve the set of template arguments that should be used; /// to instantiate the initializer of the variable template or variable; /// template partial specialization from which this variable template; /// specialization was instantiated.; ///; /// \returns For a variable template specialization instantiated from the; /// primary template, this function will return the same template arguments; /// as getTemplateArgs(). For a variable template specialization instantiated; /// from a variable template partial specialization, this function will the; /// return deduced template arguments for the variable template partial; /// specialization itself.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:493,Modifiability,variab,variable,493,"/// Retrieve the set of template arguments that should be used; /// to instantiate the initializer of the variable template or variable; /// template partial specialization from which this variable template; /// specialization was instantiated.; ///; /// \returns For a variable template specialization instantiated from the; /// primary template, this function will return the same template arguments; /// as getTemplateArgs(). For a variable template specialization instantiated; /// from a variable template partial specialization, this function will the; /// return deduced template arguments for the variable template partial; /// specialization itself.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:605,Modifiability,variab,variable,605,"/// Retrieve the set of template arguments that should be used; /// to instantiate the initializer of the variable template or variable; /// template partial specialization from which this variable template; /// specialization was instantiated.; ///; /// \returns For a variable template specialization instantiated from the; /// primary template, this function will return the same template arguments; /// as getTemplateArgs(). For a variable template specialization instantiated; /// from a variable template partial specialization, this function will the; /// return deduced template arguments for the variable template partial; /// specialization itself.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:19,Modifiability,variab,variable,19,/// Note that this variable template specialization is actually an; /// instantiation of the given variable template partial specialization whose; /// template arguments have been deduced.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:99,Modifiability,variab,variable,99,/// Note that this variable template specialization is actually an; /// instantiation of the given variable template partial specialization whose; /// template arguments have been deduced.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:19,Modifiability,variab,variable,19,/// Note that this variable template specialization is an instantiation; /// of the given variable template.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:90,Modifiability,variab,variable,90,/// Note that this variable template specialization is an instantiation; /// of the given variable template.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:71,Availability,redundant,redundant,71,/// The source info for the template arguments as written.; /// FIXME: redundant with TypeAsWritten?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:71,Safety,redund,redundant,71,/// The source info for the template arguments as written.; /// FIXME: redundant with TypeAsWritten?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:8,Modifiability,variab,variable,8,/// The variable template partial specialization from which this; /// variable template partial specialization was instantiated.; ///; /// The boolean value will be true to indicate that this variable template; /// partial specialization was specialized at this level.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:70,Modifiability,variab,variable,70,/// The variable template partial specialization from which this; /// variable template partial specialization was instantiated.; ///; /// The boolean value will be true to indicate that this variable template; /// partial specialization was specialized at this level.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:192,Modifiability,variab,variable,192,/// The variable template partial specialization from which this; /// variable template partial specialization was instantiated.; ///; /// The boolean value will be true to indicate that this variable template; /// partial specialization was specialized at this level.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:31,Modifiability,variab,variable,31,"/// \brief Retrieve the member variable template partial specialization from; /// which this particular variable template partial specialization was; /// instantiated.; ///; /// \code; /// template<typename T>; /// struct Outer {; /// template<typename U> U Inner;; /// template<typename U> U* Inner<U*> = (U*)(0); // #1; /// };; ///; /// template int* Outer<float>::Inner<int*>;; /// \endcode; ///; /// In this example, the instantiation of \c Outer<float>::Inner<int*> will; /// end up instantiating the partial specialization; /// \c Outer<float>::Inner<U*>, which itself was instantiated from the; /// variable template partial specialization \c Outer<T>::Inner<U*>. Given; /// \c Outer<float>::Inner<U*>, this function would return; /// \c Outer<T>::Inner<U*>.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:104,Modifiability,variab,variable,104,"/// \brief Retrieve the member variable template partial specialization from; /// which this particular variable template partial specialization was; /// instantiated.; ///; /// \code; /// template<typename T>; /// struct Outer {; /// template<typename U> U Inner;; /// template<typename U> U* Inner<U*> = (U*)(0); // #1; /// };; ///; /// template int* Outer<float>::Inner<int*>;; /// \endcode; ///; /// In this example, the instantiation of \c Outer<float>::Inner<int*> will; /// end up instantiating the partial specialization; /// \c Outer<float>::Inner<U*>, which itself was instantiated from the; /// variable template partial specialization \c Outer<T>::Inner<U*>. Given; /// \c Outer<float>::Inner<U*>, this function would return; /// \c Outer<T>::Inner<U*>.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:606,Modifiability,variab,variable,606,"/// \brief Retrieve the member variable template partial specialization from; /// which this particular variable template partial specialization was; /// instantiated.; ///; /// \code; /// template<typename T>; /// struct Outer {; /// template<typename U> U Inner;; /// template<typename U> U* Inner<U*> = (U*)(0); // #1; /// };; ///; /// template int* Outer<float>::Inner<int*>;; /// \endcode; ///; /// In this example, the instantiation of \c Outer<float>::Inner<int*> will; /// end up instantiating the partial specialization; /// \c Outer<float>::Inner<U*>, which itself was instantiated from the; /// variable template partial specialization \c Outer<T>::Inner<U*>. Given; /// \c Outer<float>::Inner<U*>, this function would return; /// \c Outer<T>::Inner<U*>.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:28,Modifiability,variab,variable,28,"/// Determines whether this variable template partial specialization; /// was a specialization of a member partial specialization.; ///; /// In the following example, the member template partial specialization; /// \c X<int>::Inner<T*> is a member specialization.; ///; /// \code; /// template<typename T>; /// struct X {; /// template<typename U> U Inner;; /// template<typename U> U* Inner<U*> = (U*)(0);; /// };; ///; /// template<> template<typename T>; /// U* X<int>::Inner<T*> = (T*)(0) + 1;; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:21,Modifiability,variab,variable,21,/// Declaration of a variable template.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:67,Modifiability,variab,variable,67,/// Data that is common to all of the declarations of a given; /// variable template.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:8,Modifiability,variab,variable,8,"/// The variable template specializations for this variable; /// template, including explicit specializations and instantiations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:51,Modifiability,variab,variable,51,"/// The variable template specializations for this variable; /// template, including explicit specializations and instantiations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:8,Modifiability,variab,variable,8,/// The variable template partial specializations for this variable; /// template.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:59,Modifiability,variab,variable,59,/// The variable template partial specializations for this variable; /// template.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:48,Modifiability,variab,variable,48,/// Retrieve the set of specializations of this variable template.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:4,Performance,Load,Load,4,/// Load any lazily-loaded specializations from the external source.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:20,Performance,load,loaded,20,/// Load any lazily-loaded specializations from the external source.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:23,Modifiability,variab,variable,23,/// Get the underlying variable declarations of the template.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:71,Modifiability,variab,variable,71,/// Returns whether this template declaration defines the primary; /// variable pattern.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:13,Modifiability,variab,variable,13,/// Create a variable template node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:20,Modifiability,variab,variable,20,/// Create an empty variable template node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:46,Modifiability,variab,variable,46,"/// Retrieve the previous declaration of this variable template, or; /// nullptr if no such declaration exists.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:11,Modifiability,variab,variable,11,"/// Find a variable template partial specialization which was; /// instantiated; /// from the given member partial specialization.; ///; /// \param D a member variable template partial specialization.; ///; /// \returns the variable template partial specialization which was; /// instantiated; /// from the given member partial specialization, or nullptr if no such; /// partial specialization exists.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:159,Modifiability,variab,variable,159,"/// Find a variable template partial specialization which was; /// instantiated; /// from the given member partial specialization.; ///; /// \param D a member variable template partial specialization.; ///; /// \returns the variable template partial specialization which was; /// instantiated; /// from the given member partial specialization, or nullptr if no such; /// partial specialization exists.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:224,Modifiability,variab,variable,224,"/// Find a variable template partial specialization which was; /// instantiated; /// from the given member partial specialization.; ///; /// \param D a member variable template partial specialization.; ///; /// \returns the variable template partial specialization which was; /// instantiated; /// from the given member partial specialization, or nullptr if no such; /// partial specialization exists.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:52,Performance,load,loaded,52,"/// All specializations that that have already been loaded, ie avoiding; /// deserialization of lazily registered specializations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:63,Safety,avoid,avoiding,63,"/// All specializations that that have already been loaded, ie avoiding; /// deserialization of lazily registered specializations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h:55,Modifiability,variab,variable,55,/// Print this object as an initializer suitable for a variable of the; /// object's type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclTemplate.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclVisitor.h:417,Integrability,interface,interface,417,"//===- DeclVisitor.h - Visitor for Decl subclasses --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the DeclVisitor interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclVisitor.h:6,Usability,simpl,simple,6,/// A simple visitor class that helps create declaration visitors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclVisitor.h:32,Usability,simpl,simple,32,// namespace declvisitor; /// A simple visitor class that helps create declaration visitors.; ///; /// This class does not preserve constness of Decl pointers (see also; /// ConstDeclVisitor).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclVisitor.h:6,Usability,simpl,simple,6,/// A simple visitor class that helps create declaration visitors.; ///; /// This class preserves constness of Decl pointers (see also DeclVisitor).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DeclVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:9,Integrability,Depend,DependenceFlags,9,"//===--- DependenceFlags.h ------------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:155,Availability,error,error,155,"// This expr depends in any way on; // - a template parameter, it implies that the resolution of this expr may; // cause instantiation to fail; // - or an error (often in a non-template context); //; // Note that C++ standard doesn't define the instantiation-dependent term,; // we follow the formal definition coming from the Itanium C++ ABI, and; // extend it to errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:365,Availability,error,errors,365,"// This expr depends in any way on; // - a template parameter, it implies that the resolution of this expr may; // cause instantiation to fail; // - or an error (often in a non-template context); //; // Note that C++ standard doesn't define the instantiation-dependent term,; // we follow the formal definition coming from the Itanium C++ ABI, and; // extend it to errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:13,Integrability,depend,depends,13,"// This expr depends in any way on; // - a template parameter, it implies that the resolution of this expr may; // cause instantiation to fail; // - or an error (often in a non-template context); //; // Note that C++ standard doesn't define the instantiation-dependent term,; // we follow the formal definition coming from the Itanium C++ ABI, and; // extend it to errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:259,Integrability,depend,dependent,259,"// This expr depends in any way on; // - a template parameter, it implies that the resolution of this expr may; // cause instantiation to fail; // - or an error (often in a non-template context); //; // Note that C++ standard doesn't define the instantiation-dependent term,; // we follow the formal definition coming from the Itanium C++ ABI, and; // extend it to errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:352,Modifiability,extend,extend,352,"// This expr depends in any way on; // - a template parameter, it implies that the resolution of this expr may; // cause instantiation to fail; // - or an error (often in a non-template context); //; // Note that C++ standard doesn't define the instantiation-dependent term,; // we follow the formal definition coming from the Itanium C++ ABI, and; // extend it to errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:64,Availability,error,error,64,"// The type of this expr depends on a template parameter, or an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:25,Integrability,depend,depends,25,"// The type of this expr depends on a template parameter, or an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:65,Availability,error,error,65,"// The value of this expr depends on a template parameter, or an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:26,Integrability,depend,depends,26,"// The value of this expr depends on a template parameter, or an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:56,Availability,error,error,56,"// clang extension: this expr contains or references an error, and is; // considered dependent on how that error is resolved.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:107,Availability,error,error,107,"// clang extension: this expr contains or references an error, and is; // considered dependent on how that error is resolved.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:85,Integrability,depend,dependent,85,"// clang extension: this expr contains or references an error, and is; // considered dependent on how that error is resolved.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:162,Availability,error,error,162,"/// Whether this type somehow involves; /// - a template parameter, even if the resolution of the type does not; /// depend on a template parameter.; /// - or an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:117,Integrability,depend,depend,117,"/// Whether this type somehow involves; /// - a template parameter, even if the resolution of the type does not; /// depend on a template parameter.; /// - or an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:104,Availability,error,error,104,"/// Whether this type; /// - is a dependent type (C++ [temp.dep.type]); /// - or it somehow involves an error, e.g. decltype(recovery-expr)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:125,Availability,recover,recovery-expr,125,"/// Whether this type; /// - is a dependent type (C++ [temp.dep.type]); /// - or it somehow involves an error, e.g. decltype(recovery-expr)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:34,Integrability,depend,dependent,34,"/// Whether this type; /// - is a dependent type (C++ [temp.dep.type]); /// - or it somehow involves an error, e.g. decltype(recovery-expr)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:125,Safety,recover,recovery-expr,125,"/// Whether this type; /// - is a dependent type (C++ [temp.dep.type]); /// - or it somehow involves an error, e.g. decltype(recovery-expr)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:27,Modifiability,variab,variably-modified,27,/// Whether this type is a variably-modified type (C99 6.7.5).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:36,Availability,error,error,36,"/// Whether this type references an error, e.g. decltype(err-expression); /// yields an error type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:88,Availability,error,error,88,"/// Whether this type references an error, e.g. decltype(err-expression); /// yields an error type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:27,Integrability,depend,dependence,27,// A combined space of all dependence concepts for all node types.; // Used when aggregating dependence of nodes of different types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:93,Integrability,depend,dependence,93,// A combined space of all dependence concepts for all node types.; // Used when aggregating dependence of nodes of different types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:41,Availability,error,error,41,// Depends on a template parameter or an error in some way.; // Validity depends on how the template is instantiated or the error is; // resolved.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:124,Availability,error,error,124,// Depends on a template parameter or an error in some way.; // Validity depends on how the template is instantiated or the error is; // resolved.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:3,Integrability,Depend,Depends,3,// Depends on a template parameter or an error in some way.; // Validity depends on how the template is instantiated or the error is; // resolved.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:73,Integrability,depend,depends,73,// Depends on a template parameter or an error in some way.; // Validity depends on how the template is instantiated or the error is; // resolved.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:54,Availability,error,error,54,"// Expression type depends on template context, or an error.; // Value and Instantiation should also be set.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:19,Integrability,depend,depends,19,"// Expression type depends on template context, or an error.; // Value and Instantiation should also be set.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:55,Availability,error,error,55,"// Expression value depends on template context, or an error.; // Instantiation should also be set.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:20,Integrability,depend,depends,20,"// Expression value depends on template context, or an error.; // Instantiation should also be set.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:38,Availability,error,error,38,"// Depends on template context, or an error.; // The type/value distinction is only meaningful for expressions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:3,Integrability,Depend,Depends,3,"// Depends on template context, or an error.; // The type/value distinction is only meaningful for expressions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:15,Availability,error,error,15,"// Includes an error, and depends on how it is resolved.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:26,Integrability,depend,depends,26,"// Includes an error, and depends on how it is resolved.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:8,Integrability,depend,depends,8,// Type depends on a runtime value (variable-length array).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:36,Modifiability,variab,variable-length,36,// Type depends on a runtime value (variable-length array).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:3,Integrability,Depend,Dependence,3,"// Dependence that is propagated syntactically, regardless of semantics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:3,Integrability,Depend,Dependence,3,"// Dependence that is propagated semantically, even in cases where the; // type doesn't syntactically appear. This currently excludes only; // UnexpandedPack. Even though Instantiation dependence is also notionally; // syntactic, we also want to propagate it semantically because anything; // that semantically depends on an instantiation-dependent entity should; // always be instantiated when that instantiation-dependent entity is.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:185,Integrability,depend,dependence,185,"// Dependence that is propagated semantically, even in cases where the; // type doesn't syntactically appear. This currently excludes only; // UnexpandedPack. Even though Instantiation dependence is also notionally; // syntactic, we also want to propagate it semantically because anything; // that semantically depends on an instantiation-dependent entity should; // always be instantiated when that instantiation-dependent entity is.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:311,Integrability,depend,depends,311,"// Dependence that is propagated semantically, even in cases where the; // type doesn't syntactically appear. This currently excludes only; // UnexpandedPack. Even though Instantiation dependence is also notionally; // syntactic, we also want to propagate it semantically because anything; // that semantically depends on an instantiation-dependent entity should; // always be instantiated when that instantiation-dependent entity is.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:339,Integrability,depend,dependent,339,"// Dependence that is propagated semantically, even in cases where the; // type doesn't syntactically appear. This currently excludes only; // UnexpandedPack. Even though Instantiation dependence is also notionally; // syntactic, we also want to propagate it semantically because anything; // that semantically depends on an instantiation-dependent entity should; // always be instantiated when that instantiation-dependent entity is.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:414,Integrability,depend,dependent,414,"// Dependence that is propagated semantically, even in cases where the; // type doesn't syntactically appear. This currently excludes only; // UnexpandedPack. Even though Instantiation dependence is also notionally; // syntactic, we also want to propagate it semantically because anything; // that semantically depends on an instantiation-dependent entity should; // always be instantiated when that instantiation-dependent entity is.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:55,Integrability,depend,dependence,55,/// Extract only the syntactic portions of this type's dependence.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:49,Integrability,depend,dependence,49,/// Extract the semantic portions of this type's dependence that apply even; /// to uses where the type does not appear syntactically.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:13,Integrability,depend,dependencies,13,/// Computes dependencies of a reference with the name having template arguments; /// with \p TA dependencies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:97,Integrability,depend,dependencies,97,/// Computes dependencies of a reference with the name having template arguments; /// with \p TA dependencies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:40,Integrability,Depend,Dependent,40,"// Note: it's often necessary to strip `Dependent` from qualifiers.; // If V<T>:: refers to the current instantiation, NNS is considered dependent; // but the containing V<T>::foo likely isn't.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:137,Integrability,depend,dependent,137,"// Note: it's often necessary to strip `Dependent` from qualifiers.; // If V<T>:: refers to the current instantiation, NNS is considered dependent; // but the containing V<T>::foo likely isn't.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:8,Integrability,depend,dependent,8,"// Type-dependent expressions are always be value-dependent, so we simply drop; // type dependency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:50,Integrability,depend,dependent,50,"// Type-dependent expressions are always be value-dependent, so we simply drop; // type dependency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:88,Integrability,depend,dependency,88,"// Type-dependent expressions are always be value-dependent, so we simply drop; // type dependency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:67,Usability,simpl,simply,67,"// Type-dependent expressions are always be value-dependent, so we simply drop; // type dependency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:8,Integrability,depend,dependent,8,// Type-dependent expressions are always be value-dependent.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:50,Integrability,depend,dependent,50,// Type-dependent expressions are always be value-dependent.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:17,Integrability,depend,dependence,17,// Returned type-dependence will never have VariablyModified set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:44,Modifiability,Variab,VariablyModified,44,// Returned type-dependence will never have VariablyModified set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependentDiagnostic.h:6,Integrability,Depend,DependentDiagnostic,6,"//==- DependentDiagnostic.h - Dependently-generated diagnostics --*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines interfaces for diagnostics which may or may; // fire based on how a template is instantiated.; //; // At the moment, the only consumer of this interface is access; // control.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependentDiagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependentDiagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependentDiagnostic.h:30,Integrability,Depend,Dependently-generated,30,"//==- DependentDiagnostic.h - Dependently-generated diagnostics --*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines interfaces for diagnostics which may or may; // fire based on how a template is instantiated.; //; // At the moment, the only consumer of this interface is access; // control.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependentDiagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependentDiagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependentDiagnostic.h:401,Integrability,interface,interfaces,401,"//==- DependentDiagnostic.h - Dependently-generated diagnostics --*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines interfaces for diagnostics which may or may; // fire based on how a template is instantiated.; //; // At the moment, the only consumer of this interface is access; // control.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependentDiagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependentDiagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependentDiagnostic.h:544,Integrability,interface,interface,544,"//==- DependentDiagnostic.h - Dependently-generated diagnostics --*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines interfaces for diagnostics which may or may; // fire based on how a template is instantiated.; //; // At the moment, the only consumer of this interface is access; // control.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependentDiagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependentDiagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependentDiagnostic.h:557,Security,access,access,557,"//==- DependentDiagnostic.h - Dependently-generated diagnostics --*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines interfaces for diagnostics which may or may; // fire based on how a template is instantiated.; //; // At the moment, the only consumer of this interface is access; // control.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependentDiagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependentDiagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependentDiagnostic.h:6,Integrability,depend,dependently-generated,6,/// A dependently-generated diagnostic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependentDiagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependentDiagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependentDiagnostic.h:25,Integrability,depend,dependent,25,/// An iterator over the dependent diagnostics in a dependent context.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependentDiagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependentDiagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependentDiagnostic.h:52,Integrability,depend,dependent,52,/// An iterator over the dependent diagnostics in a dependent context.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/DependentDiagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependentDiagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/EvaluatedExprVisitor.h:59,Integrability,depend,dependent,59,// Don't visit either child expression if the condition is dependent.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/EvaluatedExprVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/EvaluatedExprVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/EvaluatedExprVisitor.h:136,Integrability,depend,dependent,136,// The controlling expression of a generic selection is not evaluated.; // Don't visit either child expression if the condition is type-dependent.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/EvaluatedExprVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/EvaluatedExprVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:410,Integrability,interface,interface,410,"//===--- Expr.h - Classes for representing expressions ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the Expr interface and subclasses.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:6,Usability,simpl,simple,6,/// A simple array of base specifiers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:100,Security,access,accesses,100,"/// An adjustment to be made to the temporary created when emitting a; /// reference binding, which accesses a particular subobject of that temporary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:59,Integrability,depend,dependence,59,/// Each concrete expr subclass is expected to compute its dependence and call; /// this in the constructor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:8,Integrability,depend,dependence,8,// Sets dependence directly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:8,Integrability,depend,dependence,8,// Sets dependence directly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:131,Availability,error,error,131,"/// Determines whether the value of this expression depends on; /// - a template parameter (C++ [temp.dep.constexpr]); /// - or an error, whose resolution is unknown; ///; /// For example, the array bound of ""Chars"" in the following example is; /// value-dependent.; /// @code; /// template<int Size, char (&Chars)[Size]> struct meta_string;; /// @endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:52,Integrability,depend,depends,52,"/// Determines whether the value of this expression depends on; /// - a template parameter (C++ [temp.dep.constexpr]); /// - or an error, whose resolution is unknown; ///; /// For example, the array bound of ""Chars"" in the following example is; /// value-dependent.; /// @code; /// template<int Size, char (&Chars)[Size]> struct meta_string;; /// @endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:255,Integrability,depend,dependent,255,"/// Determines whether the value of this expression depends on; /// - a template parameter (C++ [temp.dep.constexpr]); /// - or an error, whose resolution is unknown; ///; /// For example, the array bound of ""Chars"" in the following example is; /// value-dependent.; /// @code; /// template<int Size, char (&Chars)[Size]> struct meta_string;; /// @endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:214,Availability,error,error,214,"/// Determines whether the type of this expression depends on; /// - a template parameter (C++ [temp.dep.expr], which means that its type; /// could change from one template instantiation to the next); /// - or an error; ///; /// For example, the expressions ""x"" and ""x + y"" are type-dependent in; /// the following code, but ""y"" is not type-dependent:; /// @code; /// template<typename T>; /// void add(T x, int y) {; /// x + y;; /// }; /// @endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:51,Integrability,depend,depends,51,"/// Determines whether the type of this expression depends on; /// - a template parameter (C++ [temp.dep.expr], which means that its type; /// could change from one template instantiation to the next); /// - or an error; ///; /// For example, the expressions ""x"" and ""x + y"" are type-dependent in; /// the following code, but ""y"" is not type-dependent:; /// @code; /// template<typename T>; /// void add(T x, int y) {; /// x + y;; /// }; /// @endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:284,Integrability,depend,dependent,284,"/// Determines whether the type of this expression depends on; /// - a template parameter (C++ [temp.dep.expr], which means that its type; /// could change from one template instantiation to the next); /// - or an error; ///; /// For example, the expressions ""x"" and ""x + y"" are type-dependent in; /// the following code, but ""y"" is not type-dependent:; /// @code; /// template<typename T>; /// void add(T x, int y) {; /// x + y;; /// }; /// @endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:342,Integrability,depend,dependent,342,"/// Determines whether the type of this expression depends on; /// - a template parameter (C++ [temp.dep.expr], which means that its type; /// could change from one template instantiation to the next); /// - or an error; ///; /// For example, the expressions ""x"" and ""x + y"" are type-dependent in; /// the following code, but ""y"" is not type-dependent:; /// @code; /// template<typename T>; /// void add(T x, int y) {; /// x + y;; /// }; /// @endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:239,Availability,error,error,239,"/// Whether this expression is instantiation-dependent, meaning that; /// it depends in some way on; /// - a template parameter (even if neither its type nor (constant) value; /// can change due to the template instantiation); /// - or an error; ///; /// In the following example, the expression \c sizeof(sizeof(T() + T())) is; /// instantiation-dependent (since it involves a template parameter \c T), but; /// is neither type- nor value-dependent, since the type of the inner; /// \c sizeof is known (\c std::size_t) and therefore the size of the outer; /// \c sizeof is known.; ///; /// \code; /// template<typename T>; /// void f(T x, T y) {; /// sizeof(sizeof(T() + T());; /// }; /// \endcode; ///; /// \code; /// void func(int) {; /// func(); // the expression is instantiation-dependent, because it depends; /// // on an error.; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:829,Availability,error,error,829,"/// Whether this expression is instantiation-dependent, meaning that; /// it depends in some way on; /// - a template parameter (even if neither its type nor (constant) value; /// can change due to the template instantiation); /// - or an error; ///; /// In the following example, the expression \c sizeof(sizeof(T() + T())) is; /// instantiation-dependent (since it involves a template parameter \c T), but; /// is neither type- nor value-dependent, since the type of the inner; /// \c sizeof is known (\c std::size_t) and therefore the size of the outer; /// \c sizeof is known.; ///; /// \code; /// template<typename T>; /// void f(T x, T y) {; /// sizeof(sizeof(T() + T());; /// }; /// \endcode; ///; /// \code; /// void func(int) {; /// func(); // the expression is instantiation-dependent, because it depends; /// // on an error.; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:45,Integrability,depend,dependent,45,"/// Whether this expression is instantiation-dependent, meaning that; /// it depends in some way on; /// - a template parameter (even if neither its type nor (constant) value; /// can change due to the template instantiation); /// - or an error; ///; /// In the following example, the expression \c sizeof(sizeof(T() + T())) is; /// instantiation-dependent (since it involves a template parameter \c T), but; /// is neither type- nor value-dependent, since the type of the inner; /// \c sizeof is known (\c std::size_t) and therefore the size of the outer; /// \c sizeof is known.; ///; /// \code; /// template<typename T>; /// void f(T x, T y) {; /// sizeof(sizeof(T() + T());; /// }; /// \endcode; ///; /// \code; /// void func(int) {; /// func(); // the expression is instantiation-dependent, because it depends; /// // on an error.; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:77,Integrability,depend,depends,77,"/// Whether this expression is instantiation-dependent, meaning that; /// it depends in some way on; /// - a template parameter (even if neither its type nor (constant) value; /// can change due to the template instantiation); /// - or an error; ///; /// In the following example, the expression \c sizeof(sizeof(T() + T())) is; /// instantiation-dependent (since it involves a template parameter \c T), but; /// is neither type- nor value-dependent, since the type of the inner; /// \c sizeof is known (\c std::size_t) and therefore the size of the outer; /// \c sizeof is known.; ///; /// \code; /// template<typename T>; /// void f(T x, T y) {; /// sizeof(sizeof(T() + T());; /// }; /// \endcode; ///; /// \code; /// void func(int) {; /// func(); // the expression is instantiation-dependent, because it depends; /// // on an error.; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:347,Integrability,depend,dependent,347,"/// Whether this expression is instantiation-dependent, meaning that; /// it depends in some way on; /// - a template parameter (even if neither its type nor (constant) value; /// can change due to the template instantiation); /// - or an error; ///; /// In the following example, the expression \c sizeof(sizeof(T() + T())) is; /// instantiation-dependent (since it involves a template parameter \c T), but; /// is neither type- nor value-dependent, since the type of the inner; /// \c sizeof is known (\c std::size_t) and therefore the size of the outer; /// \c sizeof is known.; ///; /// \code; /// template<typename T>; /// void f(T x, T y) {; /// sizeof(sizeof(T() + T());; /// }; /// \endcode; ///; /// \code; /// void func(int) {; /// func(); // the expression is instantiation-dependent, because it depends; /// // on an error.; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:440,Integrability,depend,dependent,440,"/// Whether this expression is instantiation-dependent, meaning that; /// it depends in some way on; /// - a template parameter (even if neither its type nor (constant) value; /// can change due to the template instantiation); /// - or an error; ///; /// In the following example, the expression \c sizeof(sizeof(T() + T())) is; /// instantiation-dependent (since it involves a template parameter \c T), but; /// is neither type- nor value-dependent, since the type of the inner; /// \c sizeof is known (\c std::size_t) and therefore the size of the outer; /// \c sizeof is known.; ///; /// \code; /// template<typename T>; /// void f(T x, T y) {; /// sizeof(sizeof(T() + T());; /// }; /// \endcode; ///; /// \code; /// void func(int) {; /// func(); // the expression is instantiation-dependent, because it depends; /// // on an error.; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:785,Integrability,depend,dependent,785,"/// Whether this expression is instantiation-dependent, meaning that; /// it depends in some way on; /// - a template parameter (even if neither its type nor (constant) value; /// can change due to the template instantiation); /// - or an error; ///; /// In the following example, the expression \c sizeof(sizeof(T() + T())) is; /// instantiation-dependent (since it involves a template parameter \c T), but; /// is neither type- nor value-dependent, since the type of the inner; /// \c sizeof is known (\c std::size_t) and therefore the size of the outer; /// \c sizeof is known.; ///; /// \code; /// template<typename T>; /// void f(T x, T y) {; /// sizeof(sizeof(T() + T());; /// }; /// \endcode; ///; /// \code; /// void func(int) {; /// func(); // the expression is instantiation-dependent, because it depends; /// // on an error.; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:807,Integrability,depend,depends,807,"/// Whether this expression is instantiation-dependent, meaning that; /// it depends in some way on; /// - a template parameter (even if neither its type nor (constant) value; /// can change due to the template instantiation); /// - or an error; ///; /// In the following example, the expression \c sizeof(sizeof(T() + T())) is; /// instantiation-dependent (since it involves a template parameter \c T), but; /// is neither type- nor value-dependent, since the type of the inner; /// \c sizeof is known (\c std::size_t) and therefore the size of the outer; /// \c sizeof is known.; ///; /// \code; /// template<typename T>; /// void f(T x, T y) {; /// sizeof(sizeof(T() + T());; /// }; /// \endcode; ///; /// \code; /// void func(int) {; /// func(); // the expression is instantiation-dependent, because it depends; /// // on an error.; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:62,Availability,error,errors,62,"/// Whether this expression contains subexpressions which had errors, e.g. a; /// TypoExpr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:538,Safety,safe,safely,538,"/// isLValue - True if this expression is an ""l-value"" according to; /// the rules of the current language. C and C++ give somewhat; /// different rules for this concept, but in general, the result of; /// an l-value expression identifies a specific object whereas the; /// result of an r-value expression is a value detached from any; /// specific storage.; ///; /// C++11 divides the concept of ""r-value"" into pure r-values; /// (""pr-values"") and so-called expiring values (""x-values""), which; /// identify specific objects that can be safely cannibalized for; /// their resources.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:8,Integrability,message,message,8,// ObjC message is an rvalue,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:32,Testability,test,testing,32,/// The results of modification testing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:3,Testability,test,testModifiable,3,// testModifiable was false.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:13,Usability,simpl,simple,13,"/// Create a simple, modifiably lvalue",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:186,Modifiability,extend,extends,186,"/// ClassifyModifiable - Classify this expression according to the; /// C++11 expression taxonomy, and see if it is valid on the left side; /// of an assignment.; ///; /// This function extends classify in that it also tests whether the; /// expression is modifiable (C99 6.3.2.1p1).; /// \param Loc A source location that might be filled with a relevant location; /// if the expression is not modifiable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:219,Testability,test,tests,219,"/// ClassifyModifiable - Classify this expression according to the; /// C++11 expression taxonomy, and see if it is valid on the left side; /// of an assignment.; ///; /// This function extends classify in that it also tests whether the; /// expression is modifiable (C99 6.3.2.1p1).; /// \param Loc A source location that might be filled with a relevant location; /// if the expression is not modifiable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:288,Performance,load,loaded,288,"/// If this expression refers to a bit-field, retrieve the; /// declaration of that bit-field.; ///; /// Note that this returns a non-null pointer in subtly different; /// places than refersToBitField returns true. In particular, this can; /// return a non-null pointer even for r-values loaded from; /// bit-fields, but it will return null for a conditional bit-field.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:69,Modifiability,variab,variable,69,/// Returns whether this expression refers to a global register; /// variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:77,Integrability,depend,depending,77,"/// Check whether this array fits the idiom of a flexible array member,; /// depending on the value of -fstrict-flex-array.; /// When IgnoreTemplateOrMacroSubstitution is set, it doesn't consider sizes; /// resulting from the substitution of a macro or a template as special sizes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:49,Modifiability,flexible,flexible,49,"/// Check whether this array fits the idiom of a flexible array member,; /// depending on the value of -fstrict-flex-array.; /// When IgnoreTemplateOrMacroSubstitution is set, it doesn't consider sizes; /// resulting from the substitution of a macro or a template as special sizes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:267,Performance,perform,perform,267,"/// isIntegerConstantExpr - Return the value if this expression is a valid; /// integer constant expression. If not a valid i-c-e, return std::nullopt; /// and fill in Loc (if specified) with the location of the invalid; /// expression.; ///; /// Note: This does not perform the implicit conversions required by C++11; /// [expr.const]p5.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:152,Performance,perform,perform,152,/// isCXX11ConstantExpr - Return true if this expression is a constant; /// expression in C++11. Can only be used in C++.; ///; /// Note: This does not perform the implicit conversions required by C++11; /// [expr.const]p5.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:86,Usability,usab,usable,86,"/// isPotentialConstantExpr - Return true if this function's definition; /// might be usable in a constant expression in C++11, if it were marked; /// constexpr. Return false if the function can never produce a constant; /// expression, along with diagnostics describing why not.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:86,Usability,usab,usable,86,"/// isPotentialConstantExprUnevaluated - Return true if this expression might; /// be usable in a constant expression in C++11 in an unevaluated context, if; /// it were in function FD marked constexpr. Return false if the function can; /// never produce a constant expression, along with diagnostics describing; /// why not.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:548,Modifiability,refactor,refactored,548,"/// Diag - If this is non-null, it will be filled in with a stack of notes; /// indicating why evaluation failed (or why it failed to produce a constant; /// expression).; /// If the expression is unfoldable, the notes will indicate why it's not; /// foldable. If the expression is foldable, but not a constant expression,; /// the notes will describes why it isn't a constant expression. If the; /// expression *is* a constant expression, no notes will be produced.; ///; /// FIXME: this causes significant performance concerns and should be; /// refactored at some point. Not all evaluations of the constant; /// expression interpreter will display the given diagnostics, this means; /// those kinds of uses are paying the expense of generating a diagnostic; /// (which may include expensive operations like converting APValue objects; /// to a string representation).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:508,Performance,perform,performance,508,"/// Diag - If this is non-null, it will be filled in with a stack of notes; /// indicating why evaluation failed (or why it failed to produce a constant; /// expression).; /// If the expression is unfoldable, the notes will indicate why it's not; /// foldable. If the expression is foldable, but not a constant expression,; /// the notes will describes why it isn't a constant expression. If the; /// expression *is* a constant expression, no notes will be produced.; ///; /// FIXME: this causes significant performance concerns and should be; /// refactored at some point. Not all evaluations of the constant; /// expression interpreter will display the given diagnostics, this means; /// those kinds of uses are paying the expense of generating a diagnostic; /// (which may include expensive operations like converting APValue objects; /// to a string representation).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:26,Integrability,rout,routine,26,"/// HasSideEffects - This routine returns true for all those expressions; /// which have any effect other than producing a value. Example is a function; /// call, volatile variable read, or throwing an exception. If; /// IncludePossibleEffects is false, this call treats certain expressions with; /// potential side effects (such as function call-like expressions,; /// instantiation-dependent expressions, or invocations from a macro) as not; /// having side effects.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:384,Integrability,depend,dependent,384,"/// HasSideEffects - This routine returns true for all those expressions; /// which have any effect other than producing a value. Example is a function; /// call, volatile variable read, or throwing an exception. If; /// IncludePossibleEffects is false, this call treats certain expressions with; /// potential side effects (such as function call-like expressions,; /// instantiation-dependent expressions, or invocations from a macro) as not; /// having side effects.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:172,Modifiability,variab,variable,172,"/// HasSideEffects - This routine returns true for all those expressions; /// which have any effect other than producing a value. Example is a function; /// call, volatile variable read, or throwing an exception. If; /// IncludePossibleEffects is false, this call treats certain expressions with; /// potential side effects (such as function call-like expressions,; /// instantiation-dependent expressions, or invocations from a macro) as not; /// having side effects.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:101,Availability,avail,available,101,"/// If the current Expr is a pointer, this will try to statically; /// determine the number of bytes available where the pointer is pointing.; /// Returns true if all of the above holds and we were able to figure out the; /// size, false otherwise.; ///; /// \param Type - How to evaluate the size of the Expr, as defined by the; /// ""type"" parameter of __builtin_object_size",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:98,Usability,simpl,simple,98,"/// Expression is a Null pointer constant built from a zero integer; /// expression that is not a simple, possibly parenthesized, zero literal.; /// C++ Core Issue 903 will classify these expressions as ""not pointers""; /// once it is adopted.; /// http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_active.html#903",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:92,Integrability,depend,dependent,92,/// Enumeration used to describe how \c isNullPointerConstant(); /// should cope with value-dependent expressions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:56,Integrability,depend,dependent,56,/// Specifies that the expression should never be value-dependent.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:27,Integrability,depend,dependent,27,/// Specifies that a value-dependent expression of integral or; /// dependent type should be considered a null pointer constant.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:68,Integrability,depend,dependent,68,/// Specifies that a value-dependent expression of integral or; /// dependent type should be considered a null pointer constant.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:27,Integrability,depend,dependent,27,/// Specifies that a value-dependent expression should be considered; /// to never be a null pointer constant.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:65,Availability,down,down,65,/// isNullPointerConstant - C99 6.3.2.3p3 - Test if this reduces down to; /// a Null pointer constant. The return value can further distinguish the; /// kind of NULL pointer constant that was detected.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:57,Energy Efficiency,reduce,reduces,57,/// isNullPointerConstant - C99 6.3.2.3p3 - Test if this reduces down to; /// a Null pointer constant. The return value can further distinguish the; /// kind of NULL pointer constant that was detected.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:192,Safety,detect,detected,192,/// isNullPointerConstant - C99 6.3.2.3p3 - Test if this reduces down to; /// a Null pointer constant. The return value can further distinguish the; /// kind of NULL pointer constant that was detected.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:44,Testability,Test,Test,44,/// isNullPointerConstant - C99 6.3.2.3p3 - Test if this reduces down to; /// a Null pointer constant. The return value can further distinguish the; /// kind of NULL pointer constant that was detected.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:146,Integrability,inject,injected,146,"/// Skip past any invisible AST nodes which might surround this; /// statement, such as ExprWithCleanups or ImplicitCastExpr nodes,; /// but also injected CXXMemberExpr and CXXConstructExpr which represent; /// implicit conversions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:146,Security,inject,injected,146,"/// Skip past any invisible AST nodes which might surround this; /// statement, such as ExprWithCleanups or ImplicitCastExpr nodes,; /// but also injected CXXMemberExpr and CXXConstructExpr which represent; /// implicit conversions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:312,Integrability,rout,routine,312,"/// Determine whether this expression is a default function argument.; ///; /// Default arguments are implicitly generated in the abstract syntax tree; /// by semantic analysis for function calls, object constructions, etc. in; /// C++. Default arguments are represented by \c CXXDefaultArgExpr nodes;; /// this routine also looks through any implicit casts to determine whether; /// the expression is a default argument.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:124,Modifiability,extend,extended,124,/// Walk outwards from an expression we want to bind a reference to and; /// find the expression whose lifetime needs to be extended. Record; /// the LHSs of comma expressions and adjustments needed along the path.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:85,Integrability,Wrap,Wrapper,85,"//===----------------------------------------------------------------------===//; // Wrapper Expressions.; //===----------------------------------------------------------------------===//; /// FullExpr - Represents a ""full-expression"" node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:50,Energy Efficiency,allocate,allocated,50,/// Describes the kind of result that can be tail-allocated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:100,Integrability,wrap,wrapped,100,"/// Given an expression which invokes a copy constructor --- i.e. a; /// CXXConstructExpr, possibly wrapped in an ExprWithCleanups ---; /// find the OpaqueValueExpr that's the source of the construction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:30,Modifiability,variab,variable,30,"/// A reference to a declared variable, function, enum, etc.; /// [C99 6.5.1p2]; ///; /// This encodes all the information about how a declaration is referenced; /// within an expression.; ///; /// There are several optional constructs attached to DeclRefExprs only when; /// they apply in order to conserve memory. These are laid out past the end of; /// the object, and flags in the DeclRefExprBitfield track whether they exist:; ///; /// DeclRefExprBits.HasQualifier:; /// Specifies when this declaration reference expression has a C++; /// nested-name-specifier.; /// DeclRefExprBits.HasFoundDecl:; /// Specifies when this declaration reference expression has a record of; /// a NamedDecl (different from the referenced ValueDecl) which was found; /// during name lookup and/or overload resolution.; /// DeclRefExprBits.HasTemplateKWAndArgsInfo:; /// Specifies when this declaration reference expression has an explicit; /// C++ template keyword and/or template argument list.; /// DeclRefExprBits.RefersToEnclosingVariableOrCapture; /// Specifies when this declaration reference expression (validly); /// refers to an enclosed local or a captured variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:1152,Modifiability,variab,variable,1152,"/// A reference to a declared variable, function, enum, etc.; /// [C99 6.5.1p2]; ///; /// This encodes all the information about how a declaration is referenced; /// within an expression.; ///; /// There are several optional constructs attached to DeclRefExprs only when; /// they apply in order to conserve memory. These are laid out past the end of; /// the object, and flags in the DeclRefExprBitfield track whether they exist:; ///; /// DeclRefExprBits.HasQualifier:; /// Specifies when this declaration reference expression has a C++; /// nested-name-specifier.; /// DeclRefExprBits.HasFoundDecl:; /// Specifies when this declaration reference expression has a record of; /// a NamedDecl (different from the referenced ValueDecl) which was found; /// during name lookup and/or overload resolution.; /// DeclRefExprBits.HasTemplateKWAndArgsInfo:; /// Specifies when this declaration reference expression has an explicit; /// C++ template keyword and/or template argument list.; /// DeclRefExprBits.RefersToEnclosingVariableOrCapture; /// Specifies when this declaration reference expression (validly); /// refers to an enclosed local or a captured variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:4,Testability,Test,Test,4,/// Test whether there is a distinct FoundDecl attached to the end of; /// this DRE.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:228,Usability,simpl,simple,228,"/// Get the NamedDecl through which this reference occurred.; ///; /// This Decl may be different from the ValueDecl actually referred to in the; /// presence of using declarations, etc. It always returns non-NULL, and may; /// simple return the ValueDecl when appropriate.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:73,Modifiability,variab,variable,73,/// Does this DeclRefExpr refer to an enclosing local or a captured; /// variable?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:123,Integrability,wrap,wrapper,123,"/// ImaginaryLiteral - We support imaginary integer and floating point literals,; /// like ""1.0i"". We represent these as a wrapper around FloatingLiteral and; /// IntegerLiteral classes. Instances of this class always have a Complex type; /// whose element type matches the subexpression.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:643,Modifiability,extend,extended,643,"/// StringLiteral - This represents a string literal expression, e.g. ""foo""; /// or L""bar"" (wide strings). The actual string data can be obtained with; /// getBytes() and is NOT null-terminated. The length of the string data is; /// determined by calling getByteLength().; ///; /// The C type for a string is always a ConstantArrayType. In C++, the char; /// type is const qualified, in C it is not.; ///; /// Note that strings in C can be formed by concatenation of multiple string; /// literal pptokens in translation phase #6. This keeps track of the locations; /// of each of these pieces.; ///; /// Strings in C can also be truncated and extended by assigning into arrays,; /// e.g. with constructs like:; /// char X[2] = ""foobar"";; /// In this case, getByteLength() will return 6, but the string literal will; /// have type ""char[2]"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:4,Usability,Simpl,Simple,4,/// Simple constructor for string literals made from one token.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:10,Security,access,access,10,"/// Allow access to clients that need the byte representation, such as; /// ASTWriterStmt::VisitStringLiteral().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:310,Integrability,rout,routine,310,/// getLocationOfByte - Return a source location that points to the specified; /// byte of this string literal.; ///; /// Strings are amazingly complex. They can be formed from multiple tokens; /// and can have escape sequences in them in addition to the usual trigraph; /// and escaped newline business. This routine handles this complexity.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:15,Integrability,contract,contractability,15,/// Get the FP contractability status of this operator. Only meaningful for; /// operations on floating point types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:17,Integrability,depend,dependent,17,"/// A field in a dependent type, known only by its name.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:83,Integrability,depend,depending,83,"/// The data describing the designator, which comes in three; /// different forms, depending on the lower two bits.; /// - An unsigned index into the array of Expr*'s stored after this node; /// in memory, for [constant-expression] designators.; /// - A FieldDecl*, for references to a known field.; /// - An IdentifierInfo*, for references to a field with a given name; /// when the class type is dependent.; /// - A CXXBaseSpecifier*, for references that look at a field in a; /// base class.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:398,Integrability,depend,dependent,398,"/// The data describing the designator, which comes in three; /// different forms, depending on the lower two bits.; /// - An unsigned index into the array of Expr*'s stored after this node; /// in memory, for [constant-expression] designators.; /// - A FieldDecl*, for references to a known field.; /// - An IdentifierInfo*, for references to a field with a given name; /// when the class type is dependent.; /// - A CXXBaseSpecifier*, for references that look at a field in a; /// base class.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:13,Security,access,access,13,"/// An array access can be written A[4] or 4[A] (both are equivalent).; /// - getBase() and getIdx() always present the normalized view: A[4].; /// In this case getBase() returns ""A"" and getIdx() returns ""4"".; /// - getLHS() and getRHS() present the syntactic view. e.g. for; /// 4[A] getLHS() returns ""4"".; /// Note: Because vector element access is also written A[4] we must; /// predicate the format conversion in getBase and getIdx only on the; /// the type of the RHS, as it is possible for the LHS to be a vector of; /// integer type",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:341,Security,access,access,341,"/// An array access can be written A[4] or 4[A] (both are equivalent).; /// - getBase() and getIdx() always present the normalized view: A[4].; /// In this case getBase() returns ""A"" and getIdx() returns ""4"".; /// - getLHS() and getRHS() present the syntactic view. e.g. for; /// 4[A] getLHS() returns ""4"".; /// Note: Because vector element access is also written A[4] we must; /// predicate the format conversion in getBase and getIdx only on the; /// the type of the RHS, as it is possible for the LHS to be a vector of; /// integer type",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:180,Performance,perform,perform,180,"// CallExpr store some data in trailing objects. However since CallExpr; // is used a base of other expression classes we cannot use; // llvm::TrailingObjects. Instead we manually perform the pointer arithmetic; // and casts.; //; // The trailing objects are in order:; //; // * A single ""Stmt *"" for the callee expression.; //; // * An array of getNumPreArgs() ""Stmt *"" for the pre-argument expressions.; //; // * An array of getNumArgs() ""Stmt *"" for the argument expressions.; //; // * An optional of type FPOptionsOverride.; //; // Note that we store the offset in bytes from the this pointer to the start; // of the trailing objects. It would be perfectly possible to compute it; // based on the dynamic kind of the CallExpr. However 1.) we have plenty of; // space in the bit-fields of Stmt. 2.) It was benchmarked to be faster to; // compute this once and then load the offset from the bit-fields of Stmt,; // instead of re-computing the offset each time the trailing objects are; // accessed.; /// Return a pointer to the start of the trailing array of ""Stmt *"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:868,Performance,load,load,868,"// CallExpr store some data in trailing objects. However since CallExpr; // is used a base of other expression classes we cannot use; // llvm::TrailingObjects. Instead we manually perform the pointer arithmetic; // and casts.; //; // The trailing objects are in order:; //; // * A single ""Stmt *"" for the callee expression.; //; // * An array of getNumPreArgs() ""Stmt *"" for the pre-argument expressions.; //; // * An array of getNumArgs() ""Stmt *"" for the argument expressions.; //; // * An optional of type FPOptionsOverride.; //; // Note that we store the offset in bytes from the this pointer to the start; // of the trailing objects. It would be perfectly possible to compute it; // based on the dynamic kind of the CallExpr. However 1.) we have plenty of; // space in the bit-fields of Stmt. 2.) It was benchmarked to be faster to; // compute this once and then load the offset from the bit-fields of Stmt,; // instead of re-computing the offset each time the trailing objects are; // accessed.; /// Return a pointer to the start of the trailing array of ""Stmt *"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:991,Security,access,accessed,991,"// CallExpr store some data in trailing objects. However since CallExpr; // is used a base of other expression classes we cannot use; // llvm::TrailingObjects. Instead we manually perform the pointer arithmetic; // and casts.; //; // The trailing objects are in order:; //; // * A single ""Stmt *"" for the callee expression.; //; // * An array of getNumPreArgs() ""Stmt *"" for the pre-argument expressions.; //; // * An array of getNumArgs() ""Stmt *"" for the argument expressions.; //; // * An optional of type FPOptionsOverride.; //; // Note that we store the offset in bytes from the this pointer to the start; // of the trailing objects. It would be perfectly possible to compute it; // based on the dynamic kind of the CallExpr. However 1.) we have plenty of; // space in the bit-fields of Stmt. 2.) It was benchmarked to be faster to; // compute this once and then load the offset from the bit-fields of Stmt,; // instead of re-computing the offset each time the trailing objects are; // accessed.; /// Return a pointer to the start of the trailing array of ""Stmt *"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:809,Testability,benchmark,benchmarked,809,"// CallExpr store some data in trailing objects. However since CallExpr; // is used a base of other expression classes we cannot use; // llvm::TrailingObjects. Instead we manually perform the pointer arithmetic; // and casts.; //; // The trailing objects are in order:; //; // * A single ""Stmt *"" for the callee expression.; //; // * An array of getNumPreArgs() ""Stmt *"" for the pre-argument expressions.; //; // * An array of getNumArgs() ""Stmt *"" for the argument expressions.; //; // * An optional of type FPOptionsOverride.; //; // Note that we store the offset in bytes from the this pointer to the start; // of the trailing objects. It would be perfectly possible to compute it; // based on the dynamic kind of the CallExpr. However 1.) we have plenty of; // space in the bit-fields of Stmt. 2.) It was benchmarked to be faster to; // compute this once and then load the offset from the bit-fields of Stmt,; // instead of re-computing the offset each time the trailing objects are; // accessed.; /// Return a pointer to the start of the trailing array of ""Stmt *"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:77,Energy Efficiency,allocate,allocated,77,"/// Build a call expression, assuming that appropriate storage has been; /// allocated for the trailing objects.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:98,Energy Efficiency,allocate,allocate,98,/// Return the size in bytes needed for the trailing objects.; /// Used by the derived classes to allocate the right amount of storage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:630,Energy Efficiency,allocate,allocate,630,"/// Create a call expression.; /// \param Fn The callee expression,; /// \param Args The argument array,; /// \param Ty The type of the call expression (which is *not* the return; /// type in general),; /// \param VK The value kind of the call expression (lvalue, rvalue, ...),; /// \param RParenLoc The location of the right parenthesis in the call; /// expression.; /// \param FPFeatures Floating-point features associated with the call,; /// \param MinNumArgs Specifies the minimum number of arguments. The actual; /// number of arguments will be the greater of Args.size(); /// and MinNumArgs. This is used in a few places to allocate; /// enough storage for the default arguments.; /// \param UsesADL Specifies whether the callee was found through; /// argument-dependent lookup.; ///; /// Note that you can use CreateTemporary if you need a temporary call; /// expression on the stack.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:767,Integrability,depend,dependent,767,"/// Create a call expression.; /// \param Fn The callee expression,; /// \param Args The argument array,; /// \param Ty The type of the call expression (which is *not* the return; /// type in general),; /// \param VK The value kind of the call expression (lvalue, rvalue, ...),; /// \param RParenLoc The location of the right parenthesis in the call; /// expression.; /// \param FPFeatures Floating-point features associated with the call,; /// \param MinNumArgs Specifies the minimum number of arguments. The actual; /// number of arguments will be the greater of Args.size(); /// and MinNumArgs. This is used in a few places to allocate; /// enough storage for the default arguments.; /// \param UsesADL Specifies whether the callee was found through; /// argument-dependent lookup.; ///; /// Note that you can use CreateTemporary if you need a temporary call; /// expression on the stack.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:52,Integrability,depend,dependence,52,"/// setArg - Set the specified argument.; /// ! the dependence bits might be stale after calling this setter, it is; /// *caller*'s responsibility to recompute them by calling; /// computeDependence().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:20,Integrability,depend,dependence,20,/// Compute and set dependence bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:97,Availability,error,error,97,"/// Reduce the number of arguments in this call expression. This is used for; /// example during error recovery to drop extra arguments. There is no way; /// to perform the opposite because: 1.) We don't track how much storage; /// we have for the argument array 2.) This would potentially require growing; /// the argument array, something we cannot support since the arguments are; /// stored in a trailing array.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:103,Availability,recover,recovery,103,"/// Reduce the number of arguments in this call expression. This is used for; /// example during error recovery to drop extra arguments. There is no way; /// to perform the opposite because: 1.) We don't track how much storage; /// we have for the argument array 2.) This would potentially require growing; /// the argument array, something we cannot support since the arguments are; /// stored in a trailing array.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:4,Energy Efficiency,Reduce,Reduce,4,"/// Reduce the number of arguments in this call expression. This is used for; /// example during error recovery to drop extra arguments. There is no way; /// to perform the opposite because: 1.) We don't track how much storage; /// we have for the argument array 2.) This would potentially require growing; /// the argument array, something we cannot support since the arguments are; /// stored in a trailing array.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:161,Performance,perform,perform,161,"/// Reduce the number of arguments in this call expression. This is used for; /// example during error recovery to drop extra arguments. There is no way; /// to perform the opposite because: 1.) We don't track how much storage; /// we have for the argument array 2.) This would potentially require growing; /// the argument array, something we cannot support since the arguments are; /// stored in a trailing array.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:103,Safety,recover,recovery,103,"/// Reduce the number of arguments in this call expression. This is used for; /// example during error recovery to drop extra arguments. There is no way; /// to perform the opposite because: 1.) We don't track how much storage; /// we have for the argument array 2.) This would potentially require growing; /// the argument array, something we cannot support since the arguments are; /// stored in a trailing array.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:168,Energy Efficiency,efficient,efficient,168,/// This method provides fast access to all the subexpressions of; /// a CallExpr without going through the slower virtual child_iterator; /// interface. This provides efficient reverse iteration of the; /// subexpressions. This is currently used for CFG construction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:143,Integrability,interface,interface,143,/// This method provides fast access to all the subexpressions of; /// a CallExpr without going through the slower virtual child_iterator; /// interface. This provides efficient reverse iteration of the; /// subexpressions. This is currently used for CFG construction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:30,Security,access,access,30,/// This method provides fast access to all the subexpressions of; /// a CallExpr without going through the slower virtual child_iterator; /// interface. This provides efficient reverse iteration of the; /// subexpressions. This is currently used for CFG construction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:92,Integrability,depend,dependent,92,/// Return true if this is a call to __assume() or __builtin_assume() with; /// a non-value-dependent constant parameter evaluating as false.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:109,Integrability,depend,dependence,109,/// Used by Sema to implement MSVC-compatible delayed name lookup.; /// (Usually Exprs themselves should set dependence).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:136,Security,access,access,136,"/// Create an implicit MemberExpr, with no location, qualifier, template; /// arguments, and so on. Suitable only for non-static member access.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:40,Performance,perform,performed,40,"/// Returns true if virtual dispatch is performed.; /// If the member access is fully qualified, (i.e. X::f()), virtual; /// dispatching is not performed. In -fapple-kext mode qualified; /// calls to virtual method will still go through the vtable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:144,Performance,perform,performed,144,"/// Returns true if virtual dispatch is performed.; /// If the member access is fully qualified, (i.e. X::f()), virtual; /// dispatching is not performed. In -fapple-kext mode qualified; /// calls to virtual method will still go through the vtable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:70,Security,access,access,70,"/// Returns true if virtual dispatch is performed.; /// If the member access is fully qualified, (i.e. X::f()), virtual; /// dispatching is not performed. In -fapple-kext mode qualified; /// calls to virtual method will still go through the vtable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:276,Performance,load,loads,276,"/// Return; // True : if this conversion changes the volatile-ness of a gl-value.; // Qualification conversions on gl-values currently use CK_NoOp, but; // it's important to recognize volatile-changing conversions in; // clients code generation that normally eagerly peephole loads. Note; // that the query is answering for this specific node; Sema may; // produce multiple cast nodes for any particular conversion sequence.; // False : Otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:645,Integrability,depend,depends,645,"/// A builtin binary operation expression such as ""x + y"" or ""x <= y"".; ///; /// This expression node kind describes a builtin binary operation,; /// such as ""x + y"" for integer values ""x"" and ""y"". The operands will; /// already have been converted to appropriate types (e.g., by; /// performing promotions or conversions).; ///; /// In C++, where operators may be overloaded, a different kind of; /// expression node (CXXOperatorCallExpr) is used to express the; /// invocation of an overloaded operator with operator syntax. Within; /// a C++ template, whether BinaryOperator or CXXOperatorCallExpr is; /// used to store an expression ""x + y"" depends on the subexpressions; /// for x and y. If neither x or y is type-dependent, and the ""+""; /// operator resolves to a built-in operation, BinaryOperator will be; /// used to express the computation (x and y may still be; /// value-dependent). If either x or y is type-dependent, or if the; /// ""+"" resolves to an overloaded operator, CXXOperatorCallExpr will; /// be used to express the computation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:719,Integrability,depend,dependent,719,"/// A builtin binary operation expression such as ""x + y"" or ""x <= y"".; ///; /// This expression node kind describes a builtin binary operation,; /// such as ""x + y"" for integer values ""x"" and ""y"". The operands will; /// already have been converted to appropriate types (e.g., by; /// performing promotions or conversions).; ///; /// In C++, where operators may be overloaded, a different kind of; /// expression node (CXXOperatorCallExpr) is used to express the; /// invocation of an overloaded operator with operator syntax. Within; /// a C++ template, whether BinaryOperator or CXXOperatorCallExpr is; /// used to store an expression ""x + y"" depends on the subexpressions; /// for x and y. If neither x or y is type-dependent, and the ""+""; /// operator resolves to a built-in operation, BinaryOperator will be; /// used to express the computation (x and y may still be; /// value-dependent). If either x or y is type-dependent, or if the; /// ""+"" resolves to an overloaded operator, CXXOperatorCallExpr will; /// be used to express the computation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:883,Integrability,depend,dependent,883,"/// A builtin binary operation expression such as ""x + y"" or ""x <= y"".; ///; /// This expression node kind describes a builtin binary operation,; /// such as ""x + y"" for integer values ""x"" and ""y"". The operands will; /// already have been converted to appropriate types (e.g., by; /// performing promotions or conversions).; ///; /// In C++, where operators may be overloaded, a different kind of; /// expression node (CXXOperatorCallExpr) is used to express the; /// invocation of an overloaded operator with operator syntax. Within; /// a C++ template, whether BinaryOperator or CXXOperatorCallExpr is; /// used to store an expression ""x + y"" depends on the subexpressions; /// for x and y. If neither x or y is type-dependent, and the ""+""; /// operator resolves to a built-in operation, BinaryOperator will be; /// used to express the computation (x and y may still be; /// value-dependent). If either x or y is type-dependent, or if the; /// ""+"" resolves to an overloaded operator, CXXOperatorCallExpr will; /// be used to express the computation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:920,Integrability,depend,dependent,920,"/// A builtin binary operation expression such as ""x + y"" or ""x <= y"".; ///; /// This expression node kind describes a builtin binary operation,; /// such as ""x + y"" for integer values ""x"" and ""y"". The operands will; /// already have been converted to appropriate types (e.g., by; /// performing promotions or conversions).; ///; /// In C++, where operators may be overloaded, a different kind of; /// expression node (CXXOperatorCallExpr) is used to express the; /// invocation of an overloaded operator with operator syntax. Within; /// a C++ template, whether BinaryOperator or CXXOperatorCallExpr is; /// used to store an expression ""x + y"" depends on the subexpressions; /// for x and y. If neither x or y is type-dependent, and the ""+""; /// operator resolves to a built-in operation, BinaryOperator will be; /// used to express the computation (x and y may still be; /// value-dependent). If either x or y is type-dependent, or if the; /// ""+"" resolves to an overloaded operator, CXXOperatorCallExpr will; /// be used to express the computation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:285,Performance,perform,performing,285,"/// A builtin binary operation expression such as ""x + y"" or ""x <= y"".; ///; /// This expression node kind describes a builtin binary operation,; /// such as ""x + y"" for integer values ""x"" and ""y"". The operands will; /// already have been converted to appropriate types (e.g., by; /// performing promotions or conversions).; ///; /// In C++, where operators may be overloaded, a different kind of; /// expression node (CXXOperatorCallExpr) is used to express the; /// invocation of an overloaded operator with operator syntax. Within; /// a C++ template, whether BinaryOperator or CXXOperatorCallExpr is; /// used to store an expression ""x + y"" depends on the subexpressions; /// for x and y. If neither x or y is type-dependent, and the ""+""; /// operator resolves to a built-in operation, BinaryOperator will be; /// used to express the computation (x and y may still be; /// value-dependent). If either x or y is type-dependent, or if the; /// ""+"" resolves to an overloaded operator, CXXOperatorCallExpr will; /// be used to express the computation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:77,Energy Efficiency,allocate,allocated,77,"/// Build a binary operator, assuming that appropriate storage has been; /// allocated for the trailing objects when needed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:73,Energy Efficiency,allocate,allocated,73,/// Set and fetch the bit that shows whether FPFeatures needs to be; /// allocated in Trailing Storage,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:15,Integrability,contract,contractability,15,/// Get the FP contractability status of this operator. Only meaningful for; /// operations on floating point types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:75,Energy Efficiency,allocate,allocate,75,/// Return the size in bytes needed for the trailing objects.; /// Used to allocate the right amount of storage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:113,Performance,perform,performed,113,"/// CompoundAssignOperator - For compound assignments (e.g. +=), we keep; /// track of the type the operation is performed in. Due to the semantics of; /// these operators, the operands are promoted, the arithmetic performed, an; /// implicit conversion back to the result type done, then the assignment takes; /// place. This captures the intermediate type which the computation is done; /// in.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:215,Performance,perform,performed,215,"/// CompoundAssignOperator - For compound assignments (e.g. +=), we keep; /// track of the type the operation is performed in. Due to the semantics of; /// these operators, the operands are promoted, the arithmetic performed, an; /// implicit conversion back to the result type done, then the assignment takes; /// place. This captures the intermediate type which the computation is done; /// in.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:127,Integrability,depend,dependent,127,// FIXME: A templated statement expression should have an associated; // DeclContext so that nested declarations always have a dependent context.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:242,Modifiability,variab,variable,242,"/// ShuffleVectorExpr - clang-specific builtin-in function; /// __builtin_shufflevector.; /// This AST node represents a operator that does a constant; /// shuffle, similar to LLVM's shufflevector instruction. It takes; /// two vectors and a variable number of constant indices,; /// and returns the appropriately shuffled vector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:180,Testability,test,test,180,"/// ChooseExpr - GNU builtin-in function __builtin_choose_expr.; /// This AST node is similar to the conditional operator (?:) in C, with; /// the following exceptions:; /// - the test expression must be a integer constant expression.; /// - the expression returned acts like the chosen subexpression in every; /// visible way: the type is the same as that of the chosen subexpression,; /// and all predicates (whether it's an l-value, whether it's an integer; /// constant expression, etc.) return the same result as for the chosen; /// sub-expression.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:50,Availability,error,error,50,/// Mark the semantic form of the InitListExpr as error when the semantic; /// analysis fails.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:4,Deployability,Update,Updates,4,"/// Updates the initializer at index @p Init with the new; /// expression @p expr, and returns the old expression at that; /// location.; ///; /// When @p Init is out of range for this initializer list, the; /// initializer list will be extended with NULL expressions to; /// accommodate the new entry.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:237,Modifiability,extend,extended,237,"/// Updates the initializer at index @p Init with the new; /// expression @p expr, and returns the old expression at that; /// location.; ///; /// When @p Init is out of range for this initializer list, the; /// initializer list will be extended with NULL expressions to; /// accommodate the new entry.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:12,Security,access,access,12,// Iterator access to the designators.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:146,Deployability,update,updater,146,"/// Represents a place-holder for an object not to be initialized by; /// anything.; ///; /// This only makes sense when it appears as part of an updater of a; /// DesignatedInitUpdateExpr (see below). The base expression of a DIUE; /// initializes a big object, and the NoInitExpr's mark the spots within the; /// big object not to be overwritten by the updater.; ///; /// \see DesignatedInitUpdateExpr",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:355,Deployability,update,updater,355,"/// Represents a place-holder for an object not to be initialized by; /// anything.; ///; /// This only makes sense when it appears as part of an updater of a; /// DesignatedInitUpdateExpr (see below). The base expression of a DIUE; /// initializes a big object, and the NoInitExpr's mark the spots within the; /// big object not to be overwritten by the updater.; ///; /// \see DesignatedInitUpdateExpr",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:322,Deployability,update,updater,322,"// In cases like:; // struct Q { int a, b, c; };; // Q *getQ();; // void foo() {; // struct A { Q q; } a = { *getQ(), .q.b = 3 };; // }; //; // We will have an InitListExpr for a, with type A, and then a; // DesignatedInitUpdateExpr for ""a.q"" with type Q. The ""base"" for this DIUE; // is the call expression *getQ(); the ""updater"" for the DIUE is "".q.b = 3""; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:45,Deployability,update,updater,45,// Iterators; // children = the base and the updater,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:1082,Integrability,depend,dependent,1082,"/// Represents a C11 generic selection.; ///; /// A generic selection (C11 6.5.1.1) contains an unevaluated controlling; /// expression, followed by one or more generic associations. Each generic; /// association specifies a type name and an expression, or ""default"" and an; /// expression (in which case it is known as a default generic association).; /// The type and value of the generic selection are identical to those of its; /// result expression, which is defined as the expression in the generic; /// association with a type name that is compatible with the type of the; /// controlling expression, or the expression in the default generic association; /// if no types are compatible. For example:; ///; /// @code; /// _Generic(X, double: 1, float: 2, default: 3); /// @endcode; ///; /// The above expression evaluates to 1 if 1.0 is substituted for X, 2 if 1.0f; /// or 3 if ""hello"".; ///; /// As an extension, generic selections are allowed in C++, where the following; /// additional semantics apply:; ///; /// Any generic selection whose controlling expression is type-dependent or; /// which names a dependent type in its association list is result-dependent,; /// which means that the choice of result expression is dependent.; /// Result-dependent generic associations are both type- and value-dependent.; ///; /// We also allow an extended form in both C and C++ where the controlling; /// predicate for the selection expression is a type rather than an expression.; /// This type argument form does not perform any conversions for the; /// controlling type, which makes it suitable for use with qualified type; /// associations, which is not possible with the expression form.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:1114,Integrability,depend,dependent,1114,"/// Represents a C11 generic selection.; ///; /// A generic selection (C11 6.5.1.1) contains an unevaluated controlling; /// expression, followed by one or more generic associations. Each generic; /// association specifies a type name and an expression, or ""default"" and an; /// expression (in which case it is known as a default generic association).; /// The type and value of the generic selection are identical to those of its; /// result expression, which is defined as the expression in the generic; /// association with a type name that is compatible with the type of the; /// controlling expression, or the expression in the default generic association; /// if no types are compatible. For example:; ///; /// @code; /// _Generic(X, double: 1, float: 2, default: 3); /// @endcode; ///; /// The above expression evaluates to 1 if 1.0 is substituted for X, 2 if 1.0f; /// or 3 if ""hello"".; ///; /// As an extension, generic selections are allowed in C++, where the following; /// additional semantics apply:; ///; /// Any generic selection whose controlling expression is type-dependent or; /// which names a dependent type in its association list is result-dependent,; /// which means that the choice of result expression is dependent.; /// Result-dependent generic associations are both type- and value-dependent.; ///; /// We also allow an extended form in both C and C++ where the controlling; /// predicate for the selection expression is a type rather than an expression.; /// This type argument form does not perform any conversions for the; /// controlling type, which makes it suitable for use with qualified type; /// associations, which is not possible with the expression form.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:1163,Integrability,depend,dependent,1163,"/// Represents a C11 generic selection.; ///; /// A generic selection (C11 6.5.1.1) contains an unevaluated controlling; /// expression, followed by one or more generic associations. Each generic; /// association specifies a type name and an expression, or ""default"" and an; /// expression (in which case it is known as a default generic association).; /// The type and value of the generic selection are identical to those of its; /// result expression, which is defined as the expression in the generic; /// association with a type name that is compatible with the type of the; /// controlling expression, or the expression in the default generic association; /// if no types are compatible. For example:; ///; /// @code; /// _Generic(X, double: 1, float: 2, default: 3); /// @endcode; ///; /// The above expression evaluates to 1 if 1.0 is substituted for X, 2 if 1.0f; /// or 3 if ""hello"".; ///; /// As an extension, generic selections are allowed in C++, where the following; /// additional semantics apply:; ///; /// Any generic selection whose controlling expression is type-dependent or; /// which names a dependent type in its association list is result-dependent,; /// which means that the choice of result expression is dependent.; /// Result-dependent generic associations are both type- and value-dependent.; ///; /// We also allow an extended form in both C and C++ where the controlling; /// predicate for the selection expression is a type rather than an expression.; /// This type argument form does not perform any conversions for the; /// controlling type, which makes it suitable for use with qualified type; /// associations, which is not possible with the expression form.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:1231,Integrability,depend,dependent,1231,"/// Represents a C11 generic selection.; ///; /// A generic selection (C11 6.5.1.1) contains an unevaluated controlling; /// expression, followed by one or more generic associations. Each generic; /// association specifies a type name and an expression, or ""default"" and an; /// expression (in which case it is known as a default generic association).; /// The type and value of the generic selection are identical to those of its; /// result expression, which is defined as the expression in the generic; /// association with a type name that is compatible with the type of the; /// controlling expression, or the expression in the default generic association; /// if no types are compatible. For example:; ///; /// @code; /// _Generic(X, double: 1, float: 2, default: 3); /// @endcode; ///; /// The above expression evaluates to 1 if 1.0 is substituted for X, 2 if 1.0f; /// or 3 if ""hello"".; ///; /// As an extension, generic selections are allowed in C++, where the following; /// additional semantics apply:; ///; /// Any generic selection whose controlling expression is type-dependent or; /// which names a dependent type in its association list is result-dependent,; /// which means that the choice of result expression is dependent.; /// Result-dependent generic associations are both type- and value-dependent.; ///; /// We also allow an extended form in both C and C++ where the controlling; /// predicate for the selection expression is a type rather than an expression.; /// This type argument form does not perform any conversions for the; /// controlling type, which makes it suitable for use with qualified type; /// associations, which is not possible with the expression form.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:1254,Integrability,depend,dependent,1254,"/// Represents a C11 generic selection.; ///; /// A generic selection (C11 6.5.1.1) contains an unevaluated controlling; /// expression, followed by one or more generic associations. Each generic; /// association specifies a type name and an expression, or ""default"" and an; /// expression (in which case it is known as a default generic association).; /// The type and value of the generic selection are identical to those of its; /// result expression, which is defined as the expression in the generic; /// association with a type name that is compatible with the type of the; /// controlling expression, or the expression in the default generic association; /// if no types are compatible. For example:; ///; /// @code; /// _Generic(X, double: 1, float: 2, default: 3); /// @endcode; ///; /// The above expression evaluates to 1 if 1.0 is substituted for X, 2 if 1.0f; /// or 3 if ""hello"".; ///; /// As an extension, generic selections are allowed in C++, where the following; /// additional semantics apply:; ///; /// Any generic selection whose controlling expression is type-dependent or; /// which names a dependent type in its association list is result-dependent,; /// which means that the choice of result expression is dependent.; /// Result-dependent generic associations are both type- and value-dependent.; ///; /// We also allow an extended form in both C and C++ where the controlling; /// predicate for the selection expression is a type rather than an expression.; /// This type argument form does not perform any conversions for the; /// controlling type, which makes it suitable for use with qualified type; /// associations, which is not possible with the expression form.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:1310,Integrability,depend,dependent,1310,"/// Represents a C11 generic selection.; ///; /// A generic selection (C11 6.5.1.1) contains an unevaluated controlling; /// expression, followed by one or more generic associations. Each generic; /// association specifies a type name and an expression, or ""default"" and an; /// expression (in which case it is known as a default generic association).; /// The type and value of the generic selection are identical to those of its; /// result expression, which is defined as the expression in the generic; /// association with a type name that is compatible with the type of the; /// controlling expression, or the expression in the default generic association; /// if no types are compatible. For example:; ///; /// @code; /// _Generic(X, double: 1, float: 2, default: 3); /// @endcode; ///; /// The above expression evaluates to 1 if 1.0 is substituted for X, 2 if 1.0f; /// or 3 if ""hello"".; ///; /// As an extension, generic selections are allowed in C++, where the following; /// additional semantics apply:; ///; /// Any generic selection whose controlling expression is type-dependent or; /// which names a dependent type in its association list is result-dependent,; /// which means that the choice of result expression is dependent.; /// Result-dependent generic associations are both type- and value-dependent.; ///; /// We also allow an extended form in both C and C++ where the controlling; /// predicate for the selection expression is a type rather than an expression.; /// This type argument form does not perform any conversions for the; /// controlling type, which makes it suitable for use with qualified type; /// associations, which is not possible with the expression form.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:1348,Modifiability,extend,extended,1348,"/// Represents a C11 generic selection.; ///; /// A generic selection (C11 6.5.1.1) contains an unevaluated controlling; /// expression, followed by one or more generic associations. Each generic; /// association specifies a type name and an expression, or ""default"" and an; /// expression (in which case it is known as a default generic association).; /// The type and value of the generic selection are identical to those of its; /// result expression, which is defined as the expression in the generic; /// association with a type name that is compatible with the type of the; /// controlling expression, or the expression in the default generic association; /// if no types are compatible. For example:; ///; /// @code; /// _Generic(X, double: 1, float: 2, default: 3); /// @endcode; ///; /// The above expression evaluates to 1 if 1.0 is substituted for X, 2 if 1.0f; /// or 3 if ""hello"".; ///; /// As an extension, generic selections are allowed in C++, where the following; /// additional semantics apply:; ///; /// Any generic selection whose controlling expression is type-dependent or; /// which names a dependent type in its association list is result-dependent,; /// which means that the choice of result expression is dependent.; /// Result-dependent generic associations are both type- and value-dependent.; ///; /// We also allow an extended form in both C and C++ where the controlling; /// predicate for the selection expression is a type rather than an expression.; /// This type argument form does not perform any conversions for the; /// controlling type, which makes it suitable for use with qualified type; /// associations, which is not possible with the expression form.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:1521,Performance,perform,perform,1521,"/// Represents a C11 generic selection.; ///; /// A generic selection (C11 6.5.1.1) contains an unevaluated controlling; /// expression, followed by one or more generic associations. Each generic; /// association specifies a type name and an expression, or ""default"" and an; /// expression (in which case it is known as a default generic association).; /// The type and value of the generic selection are identical to those of its; /// result expression, which is defined as the expression in the generic; /// association with a type name that is compatible with the type of the; /// controlling expression, or the expression in the default generic association; /// if no types are compatible. For example:; ///; /// @code; /// _Generic(X, double: 1, float: 2, default: 3); /// @endcode; ///; /// The above expression evaluates to 1 if 1.0 is substituted for X, 2 if 1.0f; /// or 3 if ""hello"".; ///; /// As an extension, generic selections are allowed in C++, where the following; /// additional semantics apply:; ///; /// Any generic selection whose controlling expression is type-dependent or; /// which names a dependent type in its association list is result-dependent,; /// which means that the choice of result expression is dependent.; /// Result-dependent generic associations are both type- and value-dependent.; ///; /// We also allow an extended form in both C and C++ where the controlling; /// predicate for the selection expression is a type rather than an expression.; /// This type argument form does not perform any conversions for the; /// controlling type, which makes it suitable for use with qualified type; /// associations, which is not possible with the expression form.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:156,Integrability,depend,dependent,156,/// The number of association expressions and the index of the result; /// expression in the case where the generic selection expression is not; /// result-dependent. The result index is equal to ResultDependentIndex; /// if and only if the generic selection expression is result-dependent.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:280,Integrability,depend,dependent,280,/// The number of association expressions and the index of the result; /// expression in the case where the generic selection expression is not; /// result-dependent. The result index is equal to ResultDependentIndex; /// if and only if the generic selection expression is result-dependent.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:199,Integrability,depend,depending,199,"// GenericSelectionExpr is followed by several trailing objects.; // They are (in order):; //; // * A single Stmt * for the controlling expression or a TypeSourceInfo * for; // the controlling type, depending on the result of isTypePredicate() or; // isExprPredicate().; // * An array of getNumAssocs() Stmt * for the association expressions.; // * An array of getNumAssocs() TypeSourceInfo *, one for each of the; // association expressions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:55,Security,access,access,55,"// FIXME: This iterator could conceptually be a random access iterator, and; // it would be nice if we could strengthen the iterator category someday.; // However this iterator does not satisfy two requirements of forward; // iterators:; // a) reference = T& or reference = const T&; // b) If It1 and It2 are both dereferenceable, then It1 == It2 if and only; // if *It1 and *It2 are bound to the same objects.; // An alternative design approach was discussed during review;; // store an Association object inside the iterator, and return a reference; // to it when dereferenced. This idea was discarded beacuse of nasty; // lifetime issues:; // AssociationIterator It = ...;; // const Association &Assoc = *It++; // Oops, Assoc is dangling.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:53,Integrability,depend,dependent,53,// class AssociationIterator; /// Build a non-result-dependent generic selection expression accepting an; /// expression predicate.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:19,Integrability,depend,dependent,19,/// Build a result-dependent generic selection expression accepting an; /// expression predicate.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:23,Integrability,depend,dependent,23,/// Build a non-result-dependent generic selection expression accepting a; /// type predicate.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:19,Integrability,depend,dependent,19,/// Build a result-dependent generic selection expression accepting a type; /// predicate.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:24,Integrability,depend,dependent,24,/// Create a non-result-dependent generic selection expression accepting an; /// expression predicate.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:20,Integrability,depend,dependent,20,/// Create a result-dependent generic selection expression accepting an; /// expression predicate.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:24,Integrability,depend,dependent,24,/// Create a non-result-dependent generic selection expression accepting a; /// type predicate.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:20,Integrability,depend,dependent,20,/// Create a result-dependent generic selection expression accepting a type; /// predicate,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:179,Integrability,depend,dependent,179,/// The zero-based index of the result expression's generic association in; /// the generic selection's association list. Defined only if the; /// generic selection is not result-dependent.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:45,Integrability,depend,dependent,45,/// Whether this generic selection is result-dependent.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:140,Integrability,depend,dependent,140,/// Return the result expression of this controlling expression. Defined if; /// and only if the generic selection expression is not result-dependent.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:405,Modifiability,extend,extended,405,"//===----------------------------------------------------------------------===//; // Clang Extensions; //===----------------------------------------------------------------------===//; /// ExtVectorElementExpr - This represents access to specific elements of a; /// vector, and may occur on the left hand side or right hand side. For example; /// the following is legal: ""V.xy = V.zw"" if V is a 4 element extended vector.; ///; /// Note that the base may have either vector or pointer to vector type, just; /// like a struct field reference.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:228,Security,access,access,228,"//===----------------------------------------------------------------------===//; // Clang Extensions; //===----------------------------------------------------------------------===//; /// ExtVectorElementExpr - This represents access to specific elements of a; /// vector, and may occur on the left hand side or right hand side. For example; /// the following is legal: ""V.xy = V.zw"" if V is a 4 element extended vector.; ///; /// Note that the base may have either vector or pointer to vector type, just; /// like a struct field reference.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:59,Security,access,access,59,/// containsDuplicateElements - Return true if any element access is; /// repeated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:50,Security,access,accessed,50,/// getEncodedElementAccess - Encode the elements accessed into an llvm; /// aggregate Constant of ConstantInt(s).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:16,Energy Efficiency,Adapt,Adaptor,16,"/// BlockExpr - Adaptor class for mixing a BlockDecl with expressions.; /// ^{ statement-body } or ^(int arg1, float arg2){ statement-body }",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:16,Modifiability,Adapt,Adaptor,16,"/// BlockExpr - Adaptor class for mixing a BlockDecl with expressions.; /// ^{ statement-body } or ^(int arg1, float arg2){ statement-body }",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:42,Modifiability,variab,variable,42,/// Copy initialization expr of a __block variable and a boolean flag that; /// indicates whether the expression can throw.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:1572,Integrability,message,message,1572,"/// PseudoObjectExpr - An expression which accesses a pseudo-object; /// l-value. A pseudo-object is an abstract object, accesses to which; /// are translated to calls. The pseudo-object expression has a; /// syntactic form, which shows how the expression was actually; /// written in the source code, and a semantic form, which is a series; /// of expressions to be executed in order which detail how the; /// operation is actually evaluated. Optionally, one of the semantic; /// forms may also provide a result value for the expression.; ///; /// If any of the semantic-form expressions is an OpaqueValueExpr,; /// that OVE is required to have a source expression, and it is bound; /// to the result of that source expression. Such OVEs may appear; /// only in subsequent semantic-form expressions and as; /// sub-expressions of the syntactic form.; ///; /// PseudoObjectExpr should be used only when an operation can be; /// usefully described in terms of fairly simple rewrite rules on; /// objects and functions that are meant to be used by end-developers.; /// For example, under the Itanium ABI, dynamic casts are implemented; /// as a call to a runtime function called __dynamic_cast; using this; /// class to describe that would be inappropriate because that call is; /// not really part of the user-visible semantics, and instead the; /// cast is properly reflected in the AST and IR-generation has been; /// taught to generate the call as necessary. In contrast, an; /// Objective-C property access is semantically defined to be; /// equivalent to a particular message send, and this is very much; /// part of the user model. The name of this class encourages this; /// modelling design.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:973,Modifiability,rewrite,rewrite,973,"/// PseudoObjectExpr - An expression which accesses a pseudo-object; /// l-value. A pseudo-object is an abstract object, accesses to which; /// are translated to calls. The pseudo-object expression has a; /// syntactic form, which shows how the expression was actually; /// written in the source code, and a semantic form, which is a series; /// of expressions to be executed in order which detail how the; /// operation is actually evaluated. Optionally, one of the semantic; /// forms may also provide a result value for the expression.; ///; /// If any of the semantic-form expressions is an OpaqueValueExpr,; /// that OVE is required to have a source expression, and it is bound; /// to the result of that source expression. Such OVEs may appear; /// only in subsequent semantic-form expressions and as; /// sub-expressions of the syntactic form.; ///; /// PseudoObjectExpr should be used only when an operation can be; /// usefully described in terms of fairly simple rewrite rules on; /// objects and functions that are meant to be used by end-developers.; /// For example, under the Itanium ABI, dynamic casts are implemented; /// as a call to a runtime function called __dynamic_cast; using this; /// class to describe that would be inappropriate because that call is; /// not really part of the user-visible semantics, and instead the; /// cast is properly reflected in the AST and IR-generation has been; /// taught to generate the call as necessary. In contrast, an; /// Objective-C property access is semantically defined to be; /// equivalent to a particular message send, and this is very much; /// part of the user model. The name of this class encourages this; /// modelling design.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:43,Security,access,accesses,43,"/// PseudoObjectExpr - An expression which accesses a pseudo-object; /// l-value. A pseudo-object is an abstract object, accesses to which; /// are translated to calls. The pseudo-object expression has a; /// syntactic form, which shows how the expression was actually; /// written in the source code, and a semantic form, which is a series; /// of expressions to be executed in order which detail how the; /// operation is actually evaluated. Optionally, one of the semantic; /// forms may also provide a result value for the expression.; ///; /// If any of the semantic-form expressions is an OpaqueValueExpr,; /// that OVE is required to have a source expression, and it is bound; /// to the result of that source expression. Such OVEs may appear; /// only in subsequent semantic-form expressions and as; /// sub-expressions of the syntactic form.; ///; /// PseudoObjectExpr should be used only when an operation can be; /// usefully described in terms of fairly simple rewrite rules on; /// objects and functions that are meant to be used by end-developers.; /// For example, under the Itanium ABI, dynamic casts are implemented; /// as a call to a runtime function called __dynamic_cast; using this; /// class to describe that would be inappropriate because that call is; /// not really part of the user-visible semantics, and instead the; /// cast is properly reflected in the AST and IR-generation has been; /// taught to generate the call as necessary. In contrast, an; /// Objective-C property access is semantically defined to be; /// equivalent to a particular message send, and this is very much; /// part of the user model. The name of this class encourages this; /// modelling design.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:121,Security,access,accesses,121,"/// PseudoObjectExpr - An expression which accesses a pseudo-object; /// l-value. A pseudo-object is an abstract object, accesses to which; /// are translated to calls. The pseudo-object expression has a; /// syntactic form, which shows how the expression was actually; /// written in the source code, and a semantic form, which is a series; /// of expressions to be executed in order which detail how the; /// operation is actually evaluated. Optionally, one of the semantic; /// forms may also provide a result value for the expression.; ///; /// If any of the semantic-form expressions is an OpaqueValueExpr,; /// that OVE is required to have a source expression, and it is bound; /// to the result of that source expression. Such OVEs may appear; /// only in subsequent semantic-form expressions and as; /// sub-expressions of the syntactic form.; ///; /// PseudoObjectExpr should be used only when an operation can be; /// usefully described in terms of fairly simple rewrite rules on; /// objects and functions that are meant to be used by end-developers.; /// For example, under the Itanium ABI, dynamic casts are implemented; /// as a call to a runtime function called __dynamic_cast; using this; /// class to describe that would be inappropriate because that call is; /// not really part of the user-visible semantics, and instead the; /// cast is properly reflected in the AST and IR-generation has been; /// taught to generate the call as necessary. In contrast, an; /// Objective-C property access is semantically defined to be; /// equivalent to a particular message send, and this is very much; /// part of the user model. The name of this class encourages this; /// modelling design.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:1503,Security,access,access,1503,"/// PseudoObjectExpr - An expression which accesses a pseudo-object; /// l-value. A pseudo-object is an abstract object, accesses to which; /// are translated to calls. The pseudo-object expression has a; /// syntactic form, which shows how the expression was actually; /// written in the source code, and a semantic form, which is a series; /// of expressions to be executed in order which detail how the; /// operation is actually evaluated. Optionally, one of the semantic; /// forms may also provide a result value for the expression.; ///; /// If any of the semantic-form expressions is an OpaqueValueExpr,; /// that OVE is required to have a source expression, and it is bound; /// to the result of that source expression. Such OVEs may appear; /// only in subsequent semantic-form expressions and as; /// sub-expressions of the syntactic form.; ///; /// PseudoObjectExpr should be used only when an operation can be; /// usefully described in terms of fairly simple rewrite rules on; /// objects and functions that are meant to be used by end-developers.; /// For example, under the Itanium ABI, dynamic casts are implemented; /// as a call to a runtime function called __dynamic_cast; using this; /// class to describe that would be inappropriate because that call is; /// not really part of the user-visible semantics, and instead the; /// cast is properly reflected in the AST and IR-generation has been; /// taught to generate the call as necessary. In contrast, an; /// Objective-C property access is semantically defined to be; /// equivalent to a particular message send, and this is very much; /// part of the user model. The name of this class encourages this; /// modelling design.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:966,Usability,simpl,simple,966,"/// PseudoObjectExpr - An expression which accesses a pseudo-object; /// l-value. A pseudo-object is an abstract object, accesses to which; /// are translated to calls. The pseudo-object expression has a; /// syntactic form, which shows how the expression was actually; /// written in the source code, and a semantic form, which is a series; /// of expressions to be executed in order which detail how the; /// operation is actually evaluated. Optionally, one of the semantic; /// forms may also provide a result value for the expression.; ///; /// If any of the semantic-form expressions is an OpaqueValueExpr,; /// that OVE is required to have a source expression, and it is bound; /// to the result of that source expression. Such OVEs may appear; /// only in subsequent semantic-form expressions and as; /// sub-expressions of the syntactic form.; ///; /// PseudoObjectExpr should be used only when an operation can be; /// usefully described in terms of fairly simple rewrite rules on; /// objects and functions that are meant to be used by end-developers.; /// For example, under the Itanium ABI, dynamic casts are implemented; /// as a call to a runtime function called __dynamic_cast; using this; /// class to describe that would be inappropriate because that call is; /// not really part of the user-visible semantics, and instead the; /// cast is properly reflected in the AST and IR-generation has been; /// taught to generate the call as necessary. In contrast, an; /// Objective-C property access is semantically defined to be; /// equivalent to a particular message send, and this is very much; /// part of the user model. The name of this class encourages this; /// modelling design.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:3,Safety,Avoid,Avoid,3,// Avoid trailing comma,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:117,Availability,error,error,117,/// TypoExpr - Internal placeholder for expressions where typo correction; /// still needs to be performed and/or an error diagnostic emitted.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:97,Performance,perform,performed,97,/// TypoExpr - Internal placeholder for expressions where typo correction; /// still needs to be performed and/or an error diagnostic emitted.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:22,Availability,Recover,RecoveryExprs,22,"/// Frontend produces RecoveryExprs on semantic errors that prevent creating; /// other well-formed expressions. E.g. when type-checking of a binary operator; /// fails, we cannot produce a BinaryOperator expression. Instead, we can choose; /// to produce a recovery expression storing left and right operands.; ///; /// RecoveryExpr does not have any semantic meaning in C++, it is only useful to; /// preserve expressions in AST that would otherwise be dropped. It captures; /// subexpressions of some expression that we could not construct and source; /// range covered by the expression.; ///; /// By default, RecoveryExpr uses dependence-bits to take advantage of existing; /// machinery to deal with dependent code in C++, e.g. RecoveryExpr is preserved; /// in `decltype(<broken-expr>)` as part of the `DependentDecltypeType`. In; /// addition to that, clang does not report most errors on dependent; /// expressions, so we get rid of bogus errors for free. However, note that; /// unlike other dependent expressions, RecoveryExpr can be produced in; /// non-template contexts.; ///; /// We will preserve the type in RecoveryExpr when the type is known, e.g.; /// preserving the return type for a broken non-overloaded function call, a; /// overloaded call where all candidates have the same return type. In this; /// case, the expression is not type-dependent (unless the known type is itself; /// dependent); ///; /// One can also reliably suppress all bogus errors on expressions containing; /// recovery expressions by examining results of Expr::containsErrors().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:48,Availability,error,errors,48,"/// Frontend produces RecoveryExprs on semantic errors that prevent creating; /// other well-formed expressions. E.g. when type-checking of a binary operator; /// fails, we cannot produce a BinaryOperator expression. Instead, we can choose; /// to produce a recovery expression storing left and right operands.; ///; /// RecoveryExpr does not have any semantic meaning in C++, it is only useful to; /// preserve expressions in AST that would otherwise be dropped. It captures; /// subexpressions of some expression that we could not construct and source; /// range covered by the expression.; ///; /// By default, RecoveryExpr uses dependence-bits to take advantage of existing; /// machinery to deal with dependent code in C++, e.g. RecoveryExpr is preserved; /// in `decltype(<broken-expr>)` as part of the `DependentDecltypeType`. In; /// addition to that, clang does not report most errors on dependent; /// expressions, so we get rid of bogus errors for free. However, note that; /// unlike other dependent expressions, RecoveryExpr can be produced in; /// non-template contexts.; ///; /// We will preserve the type in RecoveryExpr when the type is known, e.g.; /// preserving the return type for a broken non-overloaded function call, a; /// overloaded call where all candidates have the same return type. In this; /// case, the expression is not type-dependent (unless the known type is itself; /// dependent); ///; /// One can also reliably suppress all bogus errors on expressions containing; /// recovery expressions by examining results of Expr::containsErrors().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:258,Availability,recover,recovery,258,"/// Frontend produces RecoveryExprs on semantic errors that prevent creating; /// other well-formed expressions. E.g. when type-checking of a binary operator; /// fails, we cannot produce a BinaryOperator expression. Instead, we can choose; /// to produce a recovery expression storing left and right operands.; ///; /// RecoveryExpr does not have any semantic meaning in C++, it is only useful to; /// preserve expressions in AST that would otherwise be dropped. It captures; /// subexpressions of some expression that we could not construct and source; /// range covered by the expression.; ///; /// By default, RecoveryExpr uses dependence-bits to take advantage of existing; /// machinery to deal with dependent code in C++, e.g. RecoveryExpr is preserved; /// in `decltype(<broken-expr>)` as part of the `DependentDecltypeType`. In; /// addition to that, clang does not report most errors on dependent; /// expressions, so we get rid of bogus errors for free. However, note that; /// unlike other dependent expressions, RecoveryExpr can be produced in; /// non-template contexts.; ///; /// We will preserve the type in RecoveryExpr when the type is known, e.g.; /// preserving the return type for a broken non-overloaded function call, a; /// overloaded call where all candidates have the same return type. In this; /// case, the expression is not type-dependent (unless the known type is itself; /// dependent); ///; /// One can also reliably suppress all bogus errors on expressions containing; /// recovery expressions by examining results of Expr::containsErrors().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:321,Availability,Recover,RecoveryExpr,321,"/// Frontend produces RecoveryExprs on semantic errors that prevent creating; /// other well-formed expressions. E.g. when type-checking of a binary operator; /// fails, we cannot produce a BinaryOperator expression. Instead, we can choose; /// to produce a recovery expression storing left and right operands.; ///; /// RecoveryExpr does not have any semantic meaning in C++, it is only useful to; /// preserve expressions in AST that would otherwise be dropped. It captures; /// subexpressions of some expression that we could not construct and source; /// range covered by the expression.; ///; /// By default, RecoveryExpr uses dependence-bits to take advantage of existing; /// machinery to deal with dependent code in C++, e.g. RecoveryExpr is preserved; /// in `decltype(<broken-expr>)` as part of the `DependentDecltypeType`. In; /// addition to that, clang does not report most errors on dependent; /// expressions, so we get rid of bogus errors for free. However, note that; /// unlike other dependent expressions, RecoveryExpr can be produced in; /// non-template contexts.; ///; /// We will preserve the type in RecoveryExpr when the type is known, e.g.; /// preserving the return type for a broken non-overloaded function call, a; /// overloaded call where all candidates have the same return type. In this; /// case, the expression is not type-dependent (unless the known type is itself; /// dependent); ///; /// One can also reliably suppress all bogus errors on expressions containing; /// recovery expressions by examining results of Expr::containsErrors().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:614,Availability,Recover,RecoveryExpr,614,"/// Frontend produces RecoveryExprs on semantic errors that prevent creating; /// other well-formed expressions. E.g. when type-checking of a binary operator; /// fails, we cannot produce a BinaryOperator expression. Instead, we can choose; /// to produce a recovery expression storing left and right operands.; ///; /// RecoveryExpr does not have any semantic meaning in C++, it is only useful to; /// preserve expressions in AST that would otherwise be dropped. It captures; /// subexpressions of some expression that we could not construct and source; /// range covered by the expression.; ///; /// By default, RecoveryExpr uses dependence-bits to take advantage of existing; /// machinery to deal with dependent code in C++, e.g. RecoveryExpr is preserved; /// in `decltype(<broken-expr>)` as part of the `DependentDecltypeType`. In; /// addition to that, clang does not report most errors on dependent; /// expressions, so we get rid of bogus errors for free. However, note that; /// unlike other dependent expressions, RecoveryExpr can be produced in; /// non-template contexts.; ///; /// We will preserve the type in RecoveryExpr when the type is known, e.g.; /// preserving the return type for a broken non-overloaded function call, a; /// overloaded call where all candidates have the same return type. In this; /// case, the expression is not type-dependent (unless the known type is itself; /// dependent); ///; /// One can also reliably suppress all bogus errors on expressions containing; /// recovery expressions by examining results of Expr::containsErrors().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:734,Availability,Recover,RecoveryExpr,734,"/// Frontend produces RecoveryExprs on semantic errors that prevent creating; /// other well-formed expressions. E.g. when type-checking of a binary operator; /// fails, we cannot produce a BinaryOperator expression. Instead, we can choose; /// to produce a recovery expression storing left and right operands.; ///; /// RecoveryExpr does not have any semantic meaning in C++, it is only useful to; /// preserve expressions in AST that would otherwise be dropped. It captures; /// subexpressions of some expression that we could not construct and source; /// range covered by the expression.; ///; /// By default, RecoveryExpr uses dependence-bits to take advantage of existing; /// machinery to deal with dependent code in C++, e.g. RecoveryExpr is preserved; /// in `decltype(<broken-expr>)` as part of the `DependentDecltypeType`. In; /// addition to that, clang does not report most errors on dependent; /// expressions, so we get rid of bogus errors for free. However, note that; /// unlike other dependent expressions, RecoveryExpr can be produced in; /// non-template contexts.; ///; /// We will preserve the type in RecoveryExpr when the type is known, e.g.; /// preserving the return type for a broken non-overloaded function call, a; /// overloaded call where all candidates have the same return type. In this; /// case, the expression is not type-dependent (unless the known type is itself; /// dependent); ///; /// One can also reliably suppress all bogus errors on expressions containing; /// recovery expressions by examining results of Expr::containsErrors().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:887,Availability,error,errors,887,"/// Frontend produces RecoveryExprs on semantic errors that prevent creating; /// other well-formed expressions. E.g. when type-checking of a binary operator; /// fails, we cannot produce a BinaryOperator expression. Instead, we can choose; /// to produce a recovery expression storing left and right operands.; ///; /// RecoveryExpr does not have any semantic meaning in C++, it is only useful to; /// preserve expressions in AST that would otherwise be dropped. It captures; /// subexpressions of some expression that we could not construct and source; /// range covered by the expression.; ///; /// By default, RecoveryExpr uses dependence-bits to take advantage of existing; /// machinery to deal with dependent code in C++, e.g. RecoveryExpr is preserved; /// in `decltype(<broken-expr>)` as part of the `DependentDecltypeType`. In; /// addition to that, clang does not report most errors on dependent; /// expressions, so we get rid of bogus errors for free. However, note that; /// unlike other dependent expressions, RecoveryExpr can be produced in; /// non-template contexts.; ///; /// We will preserve the type in RecoveryExpr when the type is known, e.g.; /// preserving the return type for a broken non-overloaded function call, a; /// overloaded call where all candidates have the same return type. In this; /// case, the expression is not type-dependent (unless the known type is itself; /// dependent); ///; /// One can also reliably suppress all bogus errors on expressions containing; /// recovery expressions by examining results of Expr::containsErrors().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:948,Availability,error,errors,948,"/// Frontend produces RecoveryExprs on semantic errors that prevent creating; /// other well-formed expressions. E.g. when type-checking of a binary operator; /// fails, we cannot produce a BinaryOperator expression. Instead, we can choose; /// to produce a recovery expression storing left and right operands.; ///; /// RecoveryExpr does not have any semantic meaning in C++, it is only useful to; /// preserve expressions in AST that would otherwise be dropped. It captures; /// subexpressions of some expression that we could not construct and source; /// range covered by the expression.; ///; /// By default, RecoveryExpr uses dependence-bits to take advantage of existing; /// machinery to deal with dependent code in C++, e.g. RecoveryExpr is preserved; /// in `decltype(<broken-expr>)` as part of the `DependentDecltypeType`. In; /// addition to that, clang does not report most errors on dependent; /// expressions, so we get rid of bogus errors for free. However, note that; /// unlike other dependent expressions, RecoveryExpr can be produced in; /// non-template contexts.; ///; /// We will preserve the type in RecoveryExpr when the type is known, e.g.; /// preserving the return type for a broken non-overloaded function call, a; /// overloaded call where all candidates have the same return type. In this; /// case, the expression is not type-dependent (unless the known type is itself; /// dependent); ///; /// One can also reliably suppress all bogus errors on expressions containing; /// recovery expressions by examining results of Expr::containsErrors().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:1025,Availability,Recover,RecoveryExpr,1025,"/// Frontend produces RecoveryExprs on semantic errors that prevent creating; /// other well-formed expressions. E.g. when type-checking of a binary operator; /// fails, we cannot produce a BinaryOperator expression. Instead, we can choose; /// to produce a recovery expression storing left and right operands.; ///; /// RecoveryExpr does not have any semantic meaning in C++, it is only useful to; /// preserve expressions in AST that would otherwise be dropped. It captures; /// subexpressions of some expression that we could not construct and source; /// range covered by the expression.; ///; /// By default, RecoveryExpr uses dependence-bits to take advantage of existing; /// machinery to deal with dependent code in C++, e.g. RecoveryExpr is preserved; /// in `decltype(<broken-expr>)` as part of the `DependentDecltypeType`. In; /// addition to that, clang does not report most errors on dependent; /// expressions, so we get rid of bogus errors for free. However, note that; /// unlike other dependent expressions, RecoveryExpr can be produced in; /// non-template contexts.; ///; /// We will preserve the type in RecoveryExpr when the type is known, e.g.; /// preserving the return type for a broken non-overloaded function call, a; /// overloaded call where all candidates have the same return type. In this; /// case, the expression is not type-dependent (unless the known type is itself; /// dependent); ///; /// One can also reliably suppress all bogus errors on expressions containing; /// recovery expressions by examining results of Expr::containsErrors().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:1124,Availability,Recover,RecoveryExpr,1124,"/// Frontend produces RecoveryExprs on semantic errors that prevent creating; /// other well-formed expressions. E.g. when type-checking of a binary operator; /// fails, we cannot produce a BinaryOperator expression. Instead, we can choose; /// to produce a recovery expression storing left and right operands.; ///; /// RecoveryExpr does not have any semantic meaning in C++, it is only useful to; /// preserve expressions in AST that would otherwise be dropped. It captures; /// subexpressions of some expression that we could not construct and source; /// range covered by the expression.; ///; /// By default, RecoveryExpr uses dependence-bits to take advantage of existing; /// machinery to deal with dependent code in C++, e.g. RecoveryExpr is preserved; /// in `decltype(<broken-expr>)` as part of the `DependentDecltypeType`. In; /// addition to that, clang does not report most errors on dependent; /// expressions, so we get rid of bogus errors for free. However, note that; /// unlike other dependent expressions, RecoveryExpr can be produced in; /// non-template contexts.; ///; /// We will preserve the type in RecoveryExpr when the type is known, e.g.; /// preserving the return type for a broken non-overloaded function call, a; /// overloaded call where all candidates have the same return type. In this; /// case, the expression is not type-dependent (unless the known type is itself; /// dependent); ///; /// One can also reliably suppress all bogus errors on expressions containing; /// recovery expressions by examining results of Expr::containsErrors().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:1440,Availability,reliab,reliably,1440,"/// Frontend produces RecoveryExprs on semantic errors that prevent creating; /// other well-formed expressions. E.g. when type-checking of a binary operator; /// fails, we cannot produce a BinaryOperator expression. Instead, we can choose; /// to produce a recovery expression storing left and right operands.; ///; /// RecoveryExpr does not have any semantic meaning in C++, it is only useful to; /// preserve expressions in AST that would otherwise be dropped. It captures; /// subexpressions of some expression that we could not construct and source; /// range covered by the expression.; ///; /// By default, RecoveryExpr uses dependence-bits to take advantage of existing; /// machinery to deal with dependent code in C++, e.g. RecoveryExpr is preserved; /// in `decltype(<broken-expr>)` as part of the `DependentDecltypeType`. In; /// addition to that, clang does not report most errors on dependent; /// expressions, so we get rid of bogus errors for free. However, note that; /// unlike other dependent expressions, RecoveryExpr can be produced in; /// non-template contexts.; ///; /// We will preserve the type in RecoveryExpr when the type is known, e.g.; /// preserving the return type for a broken non-overloaded function call, a; /// overloaded call where all candidates have the same return type. In this; /// case, the expression is not type-dependent (unless the known type is itself; /// dependent); ///; /// One can also reliably suppress all bogus errors on expressions containing; /// recovery expressions by examining results of Expr::containsErrors().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:1468,Availability,error,errors,1468,"/// Frontend produces RecoveryExprs on semantic errors that prevent creating; /// other well-formed expressions. E.g. when type-checking of a binary operator; /// fails, we cannot produce a BinaryOperator expression. Instead, we can choose; /// to produce a recovery expression storing left and right operands.; ///; /// RecoveryExpr does not have any semantic meaning in C++, it is only useful to; /// preserve expressions in AST that would otherwise be dropped. It captures; /// subexpressions of some expression that we could not construct and source; /// range covered by the expression.; ///; /// By default, RecoveryExpr uses dependence-bits to take advantage of existing; /// machinery to deal with dependent code in C++, e.g. RecoveryExpr is preserved; /// in `decltype(<broken-expr>)` as part of the `DependentDecltypeType`. In; /// addition to that, clang does not report most errors on dependent; /// expressions, so we get rid of bogus errors for free. However, note that; /// unlike other dependent expressions, RecoveryExpr can be produced in; /// non-template contexts.; ///; /// We will preserve the type in RecoveryExpr when the type is known, e.g.; /// preserving the return type for a broken non-overloaded function call, a; /// overloaded call where all candidates have the same return type. In this; /// case, the expression is not type-dependent (unless the known type is itself; /// dependent); ///; /// One can also reliably suppress all bogus errors on expressions containing; /// recovery expressions by examining results of Expr::containsErrors().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:1506,Availability,recover,recovery,1506,"/// Frontend produces RecoveryExprs on semantic errors that prevent creating; /// other well-formed expressions. E.g. when type-checking of a binary operator; /// fails, we cannot produce a BinaryOperator expression. Instead, we can choose; /// to produce a recovery expression storing left and right operands.; ///; /// RecoveryExpr does not have any semantic meaning in C++, it is only useful to; /// preserve expressions in AST that would otherwise be dropped. It captures; /// subexpressions of some expression that we could not construct and source; /// range covered by the expression.; ///; /// By default, RecoveryExpr uses dependence-bits to take advantage of existing; /// machinery to deal with dependent code in C++, e.g. RecoveryExpr is preserved; /// in `decltype(<broken-expr>)` as part of the `DependentDecltypeType`. In; /// addition to that, clang does not report most errors on dependent; /// expressions, so we get rid of bogus errors for free. However, note that; /// unlike other dependent expressions, RecoveryExpr can be produced in; /// non-template contexts.; ///; /// We will preserve the type in RecoveryExpr when the type is known, e.g.; /// preserving the return type for a broken non-overloaded function call, a; /// overloaded call where all candidates have the same return type. In this; /// case, the expression is not type-dependent (unless the known type is itself; /// dependent); ///; /// One can also reliably suppress all bogus errors on expressions containing; /// recovery expressions by examining results of Expr::containsErrors().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:632,Integrability,depend,dependence-bits,632,"/// Frontend produces RecoveryExprs on semantic errors that prevent creating; /// other well-formed expressions. E.g. when type-checking of a binary operator; /// fails, we cannot produce a BinaryOperator expression. Instead, we can choose; /// to produce a recovery expression storing left and right operands.; ///; /// RecoveryExpr does not have any semantic meaning in C++, it is only useful to; /// preserve expressions in AST that would otherwise be dropped. It captures; /// subexpressions of some expression that we could not construct and source; /// range covered by the expression.; ///; /// By default, RecoveryExpr uses dependence-bits to take advantage of existing; /// machinery to deal with dependent code in C++, e.g. RecoveryExpr is preserved; /// in `decltype(<broken-expr>)` as part of the `DependentDecltypeType`. In; /// addition to that, clang does not report most errors on dependent; /// expressions, so we get rid of bogus errors for free. However, note that; /// unlike other dependent expressions, RecoveryExpr can be produced in; /// non-template contexts.; ///; /// We will preserve the type in RecoveryExpr when the type is known, e.g.; /// preserving the return type for a broken non-overloaded function call, a; /// overloaded call where all candidates have the same return type. In this; /// case, the expression is not type-dependent (unless the known type is itself; /// dependent); ///; /// One can also reliably suppress all bogus errors on expressions containing; /// recovery expressions by examining results of Expr::containsErrors().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:706,Integrability,depend,dependent,706,"/// Frontend produces RecoveryExprs on semantic errors that prevent creating; /// other well-formed expressions. E.g. when type-checking of a binary operator; /// fails, we cannot produce a BinaryOperator expression. Instead, we can choose; /// to produce a recovery expression storing left and right operands.; ///; /// RecoveryExpr does not have any semantic meaning in C++, it is only useful to; /// preserve expressions in AST that would otherwise be dropped. It captures; /// subexpressions of some expression that we could not construct and source; /// range covered by the expression.; ///; /// By default, RecoveryExpr uses dependence-bits to take advantage of existing; /// machinery to deal with dependent code in C++, e.g. RecoveryExpr is preserved; /// in `decltype(<broken-expr>)` as part of the `DependentDecltypeType`. In; /// addition to that, clang does not report most errors on dependent; /// expressions, so we get rid of bogus errors for free. However, note that; /// unlike other dependent expressions, RecoveryExpr can be produced in; /// non-template contexts.; ///; /// We will preserve the type in RecoveryExpr when the type is known, e.g.; /// preserving the return type for a broken non-overloaded function call, a; /// overloaded call where all candidates have the same return type. In this; /// case, the expression is not type-dependent (unless the known type is itself; /// dependent); ///; /// One can also reliably suppress all bogus errors on expressions containing; /// recovery expressions by examining results of Expr::containsErrors().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:810,Integrability,Depend,DependentDecltypeType,810,"/// Frontend produces RecoveryExprs on semantic errors that prevent creating; /// other well-formed expressions. E.g. when type-checking of a binary operator; /// fails, we cannot produce a BinaryOperator expression. Instead, we can choose; /// to produce a recovery expression storing left and right operands.; ///; /// RecoveryExpr does not have any semantic meaning in C++, it is only useful to; /// preserve expressions in AST that would otherwise be dropped. It captures; /// subexpressions of some expression that we could not construct and source; /// range covered by the expression.; ///; /// By default, RecoveryExpr uses dependence-bits to take advantage of existing; /// machinery to deal with dependent code in C++, e.g. RecoveryExpr is preserved; /// in `decltype(<broken-expr>)` as part of the `DependentDecltypeType`. In; /// addition to that, clang does not report most errors on dependent; /// expressions, so we get rid of bogus errors for free. However, note that; /// unlike other dependent expressions, RecoveryExpr can be produced in; /// non-template contexts.; ///; /// We will preserve the type in RecoveryExpr when the type is known, e.g.; /// preserving the return type for a broken non-overloaded function call, a; /// overloaded call where all candidates have the same return type. In this; /// case, the expression is not type-dependent (unless the known type is itself; /// dependent); ///; /// One can also reliably suppress all bogus errors on expressions containing; /// recovery expressions by examining results of Expr::containsErrors().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:897,Integrability,depend,dependent,897,"/// Frontend produces RecoveryExprs on semantic errors that prevent creating; /// other well-formed expressions. E.g. when type-checking of a binary operator; /// fails, we cannot produce a BinaryOperator expression. Instead, we can choose; /// to produce a recovery expression storing left and right operands.; ///; /// RecoveryExpr does not have any semantic meaning in C++, it is only useful to; /// preserve expressions in AST that would otherwise be dropped. It captures; /// subexpressions of some expression that we could not construct and source; /// range covered by the expression.; ///; /// By default, RecoveryExpr uses dependence-bits to take advantage of existing; /// machinery to deal with dependent code in C++, e.g. RecoveryExpr is preserved; /// in `decltype(<broken-expr>)` as part of the `DependentDecltypeType`. In; /// addition to that, clang does not report most errors on dependent; /// expressions, so we get rid of bogus errors for free. However, note that; /// unlike other dependent expressions, RecoveryExpr can be produced in; /// non-template contexts.; ///; /// We will preserve the type in RecoveryExpr when the type is known, e.g.; /// preserving the return type for a broken non-overloaded function call, a; /// overloaded call where all candidates have the same return type. In this; /// case, the expression is not type-dependent (unless the known type is itself; /// dependent); ///; /// One can also reliably suppress all bogus errors on expressions containing; /// recovery expressions by examining results of Expr::containsErrors().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:1002,Integrability,depend,dependent,1002,"/// Frontend produces RecoveryExprs on semantic errors that prevent creating; /// other well-formed expressions. E.g. when type-checking of a binary operator; /// fails, we cannot produce a BinaryOperator expression. Instead, we can choose; /// to produce a recovery expression storing left and right operands.; ///; /// RecoveryExpr does not have any semantic meaning in C++, it is only useful to; /// preserve expressions in AST that would otherwise be dropped. It captures; /// subexpressions of some expression that we could not construct and source; /// range covered by the expression.; ///; /// By default, RecoveryExpr uses dependence-bits to take advantage of existing; /// machinery to deal with dependent code in C++, e.g. RecoveryExpr is preserved; /// in `decltype(<broken-expr>)` as part of the `DependentDecltypeType`. In; /// addition to that, clang does not report most errors on dependent; /// expressions, so we get rid of bogus errors for free. However, note that; /// unlike other dependent expressions, RecoveryExpr can be produced in; /// non-template contexts.; ///; /// We will preserve the type in RecoveryExpr when the type is known, e.g.; /// preserving the return type for a broken non-overloaded function call, a; /// overloaded call where all candidates have the same return type. In this; /// case, the expression is not type-dependent (unless the known type is itself; /// dependent); ///; /// One can also reliably suppress all bogus errors on expressions containing; /// recovery expressions by examining results of Expr::containsErrors().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:1358,Integrability,depend,dependent,1358,"/// Frontend produces RecoveryExprs on semantic errors that prevent creating; /// other well-formed expressions. E.g. when type-checking of a binary operator; /// fails, we cannot produce a BinaryOperator expression. Instead, we can choose; /// to produce a recovery expression storing left and right operands.; ///; /// RecoveryExpr does not have any semantic meaning in C++, it is only useful to; /// preserve expressions in AST that would otherwise be dropped. It captures; /// subexpressions of some expression that we could not construct and source; /// range covered by the expression.; ///; /// By default, RecoveryExpr uses dependence-bits to take advantage of existing; /// machinery to deal with dependent code in C++, e.g. RecoveryExpr is preserved; /// in `decltype(<broken-expr>)` as part of the `DependentDecltypeType`. In; /// addition to that, clang does not report most errors on dependent; /// expressions, so we get rid of bogus errors for free. However, note that; /// unlike other dependent expressions, RecoveryExpr can be produced in; /// non-template contexts.; ///; /// We will preserve the type in RecoveryExpr when the type is known, e.g.; /// preserving the return type for a broken non-overloaded function call, a; /// overloaded call where all candidates have the same return type. In this; /// case, the expression is not type-dependent (unless the known type is itself; /// dependent); ///; /// One can also reliably suppress all bogus errors on expressions containing; /// recovery expressions by examining results of Expr::containsErrors().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:1406,Integrability,depend,dependent,1406,"/// Frontend produces RecoveryExprs on semantic errors that prevent creating; /// other well-formed expressions. E.g. when type-checking of a binary operator; /// fails, we cannot produce a BinaryOperator expression. Instead, we can choose; /// to produce a recovery expression storing left and right operands.; ///; /// RecoveryExpr does not have any semantic meaning in C++, it is only useful to; /// preserve expressions in AST that would otherwise be dropped. It captures; /// subexpressions of some expression that we could not construct and source; /// range covered by the expression.; ///; /// By default, RecoveryExpr uses dependence-bits to take advantage of existing; /// machinery to deal with dependent code in C++, e.g. RecoveryExpr is preserved; /// in `decltype(<broken-expr>)` as part of the `DependentDecltypeType`. In; /// addition to that, clang does not report most errors on dependent; /// expressions, so we get rid of bogus errors for free. However, note that; /// unlike other dependent expressions, RecoveryExpr can be produced in; /// non-template contexts.; ///; /// We will preserve the type in RecoveryExpr when the type is known, e.g.; /// preserving the return type for a broken non-overloaded function call, a; /// overloaded call where all candidates have the same return type. In this; /// case, the expression is not type-dependent (unless the known type is itself; /// dependent); ///; /// One can also reliably suppress all bogus errors on expressions containing; /// recovery expressions by examining results of Expr::containsErrors().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:22,Safety,Recover,RecoveryExprs,22,"/// Frontend produces RecoveryExprs on semantic errors that prevent creating; /// other well-formed expressions. E.g. when type-checking of a binary operator; /// fails, we cannot produce a BinaryOperator expression. Instead, we can choose; /// to produce a recovery expression storing left and right operands.; ///; /// RecoveryExpr does not have any semantic meaning in C++, it is only useful to; /// preserve expressions in AST that would otherwise be dropped. It captures; /// subexpressions of some expression that we could not construct and source; /// range covered by the expression.; ///; /// By default, RecoveryExpr uses dependence-bits to take advantage of existing; /// machinery to deal with dependent code in C++, e.g. RecoveryExpr is preserved; /// in `decltype(<broken-expr>)` as part of the `DependentDecltypeType`. In; /// addition to that, clang does not report most errors on dependent; /// expressions, so we get rid of bogus errors for free. However, note that; /// unlike other dependent expressions, RecoveryExpr can be produced in; /// non-template contexts.; ///; /// We will preserve the type in RecoveryExpr when the type is known, e.g.; /// preserving the return type for a broken non-overloaded function call, a; /// overloaded call where all candidates have the same return type. In this; /// case, the expression is not type-dependent (unless the known type is itself; /// dependent); ///; /// One can also reliably suppress all bogus errors on expressions containing; /// recovery expressions by examining results of Expr::containsErrors().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:258,Safety,recover,recovery,258,"/// Frontend produces RecoveryExprs on semantic errors that prevent creating; /// other well-formed expressions. E.g. when type-checking of a binary operator; /// fails, we cannot produce a BinaryOperator expression. Instead, we can choose; /// to produce a recovery expression storing left and right operands.; ///; /// RecoveryExpr does not have any semantic meaning in C++, it is only useful to; /// preserve expressions in AST that would otherwise be dropped. It captures; /// subexpressions of some expression that we could not construct and source; /// range covered by the expression.; ///; /// By default, RecoveryExpr uses dependence-bits to take advantage of existing; /// machinery to deal with dependent code in C++, e.g. RecoveryExpr is preserved; /// in `decltype(<broken-expr>)` as part of the `DependentDecltypeType`. In; /// addition to that, clang does not report most errors on dependent; /// expressions, so we get rid of bogus errors for free. However, note that; /// unlike other dependent expressions, RecoveryExpr can be produced in; /// non-template contexts.; ///; /// We will preserve the type in RecoveryExpr when the type is known, e.g.; /// preserving the return type for a broken non-overloaded function call, a; /// overloaded call where all candidates have the same return type. In this; /// case, the expression is not type-dependent (unless the known type is itself; /// dependent); ///; /// One can also reliably suppress all bogus errors on expressions containing; /// recovery expressions by examining results of Expr::containsErrors().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:321,Safety,Recover,RecoveryExpr,321,"/// Frontend produces RecoveryExprs on semantic errors that prevent creating; /// other well-formed expressions. E.g. when type-checking of a binary operator; /// fails, we cannot produce a BinaryOperator expression. Instead, we can choose; /// to produce a recovery expression storing left and right operands.; ///; /// RecoveryExpr does not have any semantic meaning in C++, it is only useful to; /// preserve expressions in AST that would otherwise be dropped. It captures; /// subexpressions of some expression that we could not construct and source; /// range covered by the expression.; ///; /// By default, RecoveryExpr uses dependence-bits to take advantage of existing; /// machinery to deal with dependent code in C++, e.g. RecoveryExpr is preserved; /// in `decltype(<broken-expr>)` as part of the `DependentDecltypeType`. In; /// addition to that, clang does not report most errors on dependent; /// expressions, so we get rid of bogus errors for free. However, note that; /// unlike other dependent expressions, RecoveryExpr can be produced in; /// non-template contexts.; ///; /// We will preserve the type in RecoveryExpr when the type is known, e.g.; /// preserving the return type for a broken non-overloaded function call, a; /// overloaded call where all candidates have the same return type. In this; /// case, the expression is not type-dependent (unless the known type is itself; /// dependent); ///; /// One can also reliably suppress all bogus errors on expressions containing; /// recovery expressions by examining results of Expr::containsErrors().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:614,Safety,Recover,RecoveryExpr,614,"/// Frontend produces RecoveryExprs on semantic errors that prevent creating; /// other well-formed expressions. E.g. when type-checking of a binary operator; /// fails, we cannot produce a BinaryOperator expression. Instead, we can choose; /// to produce a recovery expression storing left and right operands.; ///; /// RecoveryExpr does not have any semantic meaning in C++, it is only useful to; /// preserve expressions in AST that would otherwise be dropped. It captures; /// subexpressions of some expression that we could not construct and source; /// range covered by the expression.; ///; /// By default, RecoveryExpr uses dependence-bits to take advantage of existing; /// machinery to deal with dependent code in C++, e.g. RecoveryExpr is preserved; /// in `decltype(<broken-expr>)` as part of the `DependentDecltypeType`. In; /// addition to that, clang does not report most errors on dependent; /// expressions, so we get rid of bogus errors for free. However, note that; /// unlike other dependent expressions, RecoveryExpr can be produced in; /// non-template contexts.; ///; /// We will preserve the type in RecoveryExpr when the type is known, e.g.; /// preserving the return type for a broken non-overloaded function call, a; /// overloaded call where all candidates have the same return type. In this; /// case, the expression is not type-dependent (unless the known type is itself; /// dependent); ///; /// One can also reliably suppress all bogus errors on expressions containing; /// recovery expressions by examining results of Expr::containsErrors().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:734,Safety,Recover,RecoveryExpr,734,"/// Frontend produces RecoveryExprs on semantic errors that prevent creating; /// other well-formed expressions. E.g. when type-checking of a binary operator; /// fails, we cannot produce a BinaryOperator expression. Instead, we can choose; /// to produce a recovery expression storing left and right operands.; ///; /// RecoveryExpr does not have any semantic meaning in C++, it is only useful to; /// preserve expressions in AST that would otherwise be dropped. It captures; /// subexpressions of some expression that we could not construct and source; /// range covered by the expression.; ///; /// By default, RecoveryExpr uses dependence-bits to take advantage of existing; /// machinery to deal with dependent code in C++, e.g. RecoveryExpr is preserved; /// in `decltype(<broken-expr>)` as part of the `DependentDecltypeType`. In; /// addition to that, clang does not report most errors on dependent; /// expressions, so we get rid of bogus errors for free. However, note that; /// unlike other dependent expressions, RecoveryExpr can be produced in; /// non-template contexts.; ///; /// We will preserve the type in RecoveryExpr when the type is known, e.g.; /// preserving the return type for a broken non-overloaded function call, a; /// overloaded call where all candidates have the same return type. In this; /// case, the expression is not type-dependent (unless the known type is itself; /// dependent); ///; /// One can also reliably suppress all bogus errors on expressions containing; /// recovery expressions by examining results of Expr::containsErrors().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:1025,Safety,Recover,RecoveryExpr,1025,"/// Frontend produces RecoveryExprs on semantic errors that prevent creating; /// other well-formed expressions. E.g. when type-checking of a binary operator; /// fails, we cannot produce a BinaryOperator expression. Instead, we can choose; /// to produce a recovery expression storing left and right operands.; ///; /// RecoveryExpr does not have any semantic meaning in C++, it is only useful to; /// preserve expressions in AST that would otherwise be dropped. It captures; /// subexpressions of some expression that we could not construct and source; /// range covered by the expression.; ///; /// By default, RecoveryExpr uses dependence-bits to take advantage of existing; /// machinery to deal with dependent code in C++, e.g. RecoveryExpr is preserved; /// in `decltype(<broken-expr>)` as part of the `DependentDecltypeType`. In; /// addition to that, clang does not report most errors on dependent; /// expressions, so we get rid of bogus errors for free. However, note that; /// unlike other dependent expressions, RecoveryExpr can be produced in; /// non-template contexts.; ///; /// We will preserve the type in RecoveryExpr when the type is known, e.g.; /// preserving the return type for a broken non-overloaded function call, a; /// overloaded call where all candidates have the same return type. In this; /// case, the expression is not type-dependent (unless the known type is itself; /// dependent); ///; /// One can also reliably suppress all bogus errors on expressions containing; /// recovery expressions by examining results of Expr::containsErrors().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:1124,Safety,Recover,RecoveryExpr,1124,"/// Frontend produces RecoveryExprs on semantic errors that prevent creating; /// other well-formed expressions. E.g. when type-checking of a binary operator; /// fails, we cannot produce a BinaryOperator expression. Instead, we can choose; /// to produce a recovery expression storing left and right operands.; ///; /// RecoveryExpr does not have any semantic meaning in C++, it is only useful to; /// preserve expressions in AST that would otherwise be dropped. It captures; /// subexpressions of some expression that we could not construct and source; /// range covered by the expression.; ///; /// By default, RecoveryExpr uses dependence-bits to take advantage of existing; /// machinery to deal with dependent code in C++, e.g. RecoveryExpr is preserved; /// in `decltype(<broken-expr>)` as part of the `DependentDecltypeType`. In; /// addition to that, clang does not report most errors on dependent; /// expressions, so we get rid of bogus errors for free. However, note that; /// unlike other dependent expressions, RecoveryExpr can be produced in; /// non-template contexts.; ///; /// We will preserve the type in RecoveryExpr when the type is known, e.g.; /// preserving the return type for a broken non-overloaded function call, a; /// overloaded call where all candidates have the same return type. In this; /// case, the expression is not type-dependent (unless the known type is itself; /// dependent); ///; /// One can also reliably suppress all bogus errors on expressions containing; /// recovery expressions by examining results of Expr::containsErrors().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h:1506,Safety,recover,recovery,1506,"/// Frontend produces RecoveryExprs on semantic errors that prevent creating; /// other well-formed expressions. E.g. when type-checking of a binary operator; /// fails, we cannot produce a BinaryOperator expression. Instead, we can choose; /// to produce a recovery expression storing left and right operands.; ///; /// RecoveryExpr does not have any semantic meaning in C++, it is only useful to; /// preserve expressions in AST that would otherwise be dropped. It captures; /// subexpressions of some expression that we could not construct and source; /// range covered by the expression.; ///; /// By default, RecoveryExpr uses dependence-bits to take advantage of existing; /// machinery to deal with dependent code in C++, e.g. RecoveryExpr is preserved; /// in `decltype(<broken-expr>)` as part of the `DependentDecltypeType`. In; /// addition to that, clang does not report most errors on dependent; /// expressions, so we get rid of bogus errors for free. However, note that; /// unlike other dependent expressions, RecoveryExpr can be produced in; /// non-template contexts.; ///; /// We will preserve the type in RecoveryExpr when the type is known, e.g.; /// preserving the return type for a broken non-overloaded function call, a; /// overloaded call where all candidates have the same return type. In this; /// case, the expression is not type-dependent (unless the known type is itself; /// dependent); ///; /// One can also reliably suppress all bogus errors on expressions containing; /// recovery expressions by examining results of Expr::containsErrors().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Expr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Expr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h:126,Integrability,depend,dependent,126,"/// \brief Information about the satisfaction of the named concept with the; /// given arguments. If this expression is value dependent, this is to be; /// ignored.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h:147,Integrability,depend,dependent,147,/// \brief Whether or not the concept with the given arguments was satisfied; /// when the expression was created.; /// The expression must not be dependent.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h:146,Integrability,depend,dependent,146,/// \brief Get elaborated satisfaction info about the template arguments'; /// satisfaction of the named concept.; /// The expression must not be dependent.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h:10,Usability,simpl,simple,10,// Note - simple and compound requirements are both represented by the same; // class (ExprRequirement).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h:45,Integrability,depend,dependence,45,// FIXME: use RequirementDependence to model dependence?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h:83,Integrability,depend,dependent,83,"/// \brief Construct a type requirement from a type. If the given type is not; /// dependent, this indicates that the type exists and the requirement will be; /// satisfied. Otherwise, the SubstitutionDiagnostic constructor is to be; /// used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h:111,Usability,simpl,simple,111,/// \brief A requires-expression requirement which queries the validity and; /// properties of an expression ('simple' and 'compound' requirements).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h:82,Availability,failure,failure,82,/// \brief A return type requirement was specified but it was a; /// substitution failure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h:152,Usability,simpl,simple,152,"/// \brief Construct a compound requirement.; /// \param E the expression which is checked by this requirement.; /// \param IsSimple whether this was a simple requirement in source.; /// \param NoexceptLoc the location of the noexcept keyword, if it was; /// specified, otherwise an empty location.; /// \param Req the requirement for the type of the checked expression.; /// \param Status the satisfaction status of this requirement.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h:85,Availability,failure,failure,85,"/// \brief Construct a compound requirement whose expression was a; /// substitution failure. The requirement is not satisfied.; /// \param E the diagnostic emitted while instantiating the original; /// expression.; /// \param IsSimple whether this was a simple requirement in source.; /// \param NoexceptLoc the location of the noexcept keyword, if it was; /// specified, otherwise an empty location.; /// \param Req the requirement for the type of the checked expression (omit; /// if no requirement was specified).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h:255,Usability,simpl,simple,255,"/// \brief Construct a compound requirement whose expression was a; /// substitution failure. The requirement is not satisfied.; /// \param E the diagnostic emitted while instantiating the original; /// expression.; /// \param IsSimple whether this was a simple requirement in source.; /// \param NoexceptLoc the location of the noexcept keyword, if it was; /// specified, otherwise an empty location.; /// \param Req the requirement for the type of the checked expression (omit; /// if no requirement was specified).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h:92,Integrability,depend,dependent,92,/// \brief Whether or not the requires clause is satisfied.; /// The expression must not be dependent.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprConcepts.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:419,Integrability,interface,interface,419,"//===- ExprCXX.h - Classes for representing expressions ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// Defines the clang::Expr interface and subclasses for C++ expressions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:627,Integrability,depend,dependent,627,"//===--------------------------------------------------------------------===//; // C++ Expressions.; //===--------------------------------------------------------------------===//; /// A call to an overloaded operator written using operator; /// syntax.; ///; /// Represents a call to an overloaded operator written using operator; /// syntax, e.g., ""x + y"" or ""*p"". While semantically equivalent to a; /// normal call, this AST node provides better information about the; /// syntactic representation of the call.; ///; /// In a C++ template, this expression node kind will be used whenever; /// any of the arguments are type-dependent. In this case, the; /// function itself will be a (possibly empty) set of functions and; /// function templates that were found by name lookup at template; /// definition time.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:128,Modifiability,rewrite,rewrites,128,"/// A rewritten comparison expression that was originally written using; /// operator syntax.; ///; /// In C++20, the following rewrites are performed:; /// - <tt>a == b</tt> -> <tt>b == a</tt>; /// - <tt>a != b</tt> -> <tt>!(a == b)</tt>; /// - <tt>a != b</tt> -> <tt>!(b == a)</tt>; /// - For \c \@ in \c <, \c <=, \c >, \c >=, \c <=>:; /// - <tt>a @ b</tt> -> <tt>(a <=> b) @ 0</tt>; /// - <tt>a @ b</tt> -> <tt>0 @ (b <=> a)</tt>; ///; /// This expression provides access to both the original syntax and the; /// rewritten expression.; ///; /// Note that the rewritten calls to \c ==, \c <=>, and \c \@ are typically; /// \c CXXOperatorCallExprs, but could theoretically be \c BinaryOperators.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:141,Performance,perform,performed,141,"/// A rewritten comparison expression that was originally written using; /// operator syntax.; ///; /// In C++20, the following rewrites are performed:; /// - <tt>a == b</tt> -> <tt>b == a</tt>; /// - <tt>a != b</tt> -> <tt>!(a == b)</tt>; /// - <tt>a != b</tt> -> <tt>!(b == a)</tt>; /// - For \c \@ in \c <, \c <=, \c >, \c >=, \c <=>:; /// - <tt>a @ b</tt> -> <tt>(a <=> b) @ 0</tt>; /// - <tt>a @ b</tt> -> <tt>0 @ (b <=> a)</tt>; ///; /// This expression provides access to both the original syntax and the; /// rewritten expression.; ///; /// Note that the rewritten calls to \c ==, \c <=>, and \c \@ are typically; /// \c CXXOperatorCallExprs, but could theoretically be \c BinaryOperators.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:469,Security,access,access,469,"/// A rewritten comparison expression that was originally written using; /// operator syntax.; ///; /// In C++20, the following rewrites are performed:; /// - <tt>a == b</tt> -> <tt>b == a</tt>; /// - <tt>a != b</tt> -> <tt>!(a == b)</tt>; /// - <tt>a != b</tt> -> <tt>!(b == a)</tt>; /// - For \c \@ in \c <, \c <=, \c >, \c >=, \c <=>:; /// - <tt>a @ b</tt> -> <tt>(a <=> b) @ 0</tt>; /// - <tt>a @ b</tt> -> <tt>0 @ (b <=> a)</tt>; ///; /// This expression provides access to both the original syntax and the; /// rewritten expression.; ///; /// Note that the rewritten calls to \c ==, \c <=>, and \c \@ are typically; /// \c CXXOperatorCallExprs, but could theoretically be \c BinaryOperators.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:114,Availability,reliab,reliable,114,/// Compute the begin and end locations from the decomposed form.; /// The locations of the semantic form are not reliable if this is; /// a reversed expression.; //@{,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:102,Modifiability,inherit,inherited,102,"/// Abstract class common to all of the C++ ""named""/""keyword"" casts.; ///; /// This abstract class is inherited by all of the classes; /// representing ""named"" casts: CXXStaticCastExpr for \c static_cast,; /// CXXDynamicCastExpr for \c dynamic_cast, CXXReinterpretCastExpr for; /// reinterpret_cast, CXXConstCastExpr for \c const_cast and; /// CXXAddrspaceCastExpr for addrspace_cast (in OpenCL).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:185,Performance,perform,perform,185,"/// A C++ @c dynamic_cast expression (C++ [expr.dynamic.cast]).; ///; /// This expression node represents a dynamic cast, e.g.,; /// \c dynamic_cast<Derived*>(BasePtr). Such a cast may perform a run-time; /// check to determine how to perform the type conversion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:235,Performance,perform,perform,235,"/// A C++ @c dynamic_cast expression (C++ [expr.dynamic.cast]).; ///; /// This expression node represents a dynamic cast, e.g.,; /// \c dynamic_cast<Derived*>(BasePtr). Such a cast may perform a run-time; /// check to determine how to perform the type conversion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:306,Performance,perform,performs,306,"/// A C++ @c reinterpret_cast expression (C++ [expr.reinterpret.cast]).; ///; /// This expression node represents a reinterpret cast, e.g.,; /// @c reinterpret_cast<int>(VoidPtr).; ///; /// A reinterpret_cast provides a differently-typed view of a value but; /// (in Clang, as in most C++ implementations) performs no actual work at; /// run time.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:485,Integrability,depend,dependent,485,"/// A call to a literal operator (C++11 [over.literal]); /// written as a user-defined literal (C++11 [lit.ext]).; ///; /// Represents a user-defined literal, e.g. ""foo""_bar or 1.23_xyz. While this; /// is semantically equivalent to a normal call, this AST node provides better; /// information about the syntactic representation of the literal.; ///; /// Since literal operators are never found by ADL and can only be declared at; /// namespace scope, a user-defined literal is never dependent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:246,Testability,test,test,246,/// Represents the \c this expression in C++.; ///; /// This is a pointer to the object on which the current member function is; /// executing (C++ [expr.prim]p3). Example:; ///; /// \code; /// class Foo {; /// public:; /// void bar();; /// void test() { this->bar(); }; /// };; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:27,Modifiability,variab,variable,27,/// Determines whether the variable thrown by this expression (if any!); /// is within the innermost try block.; ///; /// This information is required to determine whether the NRVO can apply to; /// this variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:204,Modifiability,variab,variable,204,/// Determines whether the variable thrown by this expression (if any!); /// is within the innermost try block.; ///; /// This information is required to determine whether the NRVO can apply to; /// this variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:63,Integrability,wrap,wraps,63,"/// A default argument (C++ [dcl.fct.default]).; ///; /// This wraps up a function call argument that was created from the; /// corresponding parameter's default argument, when the call did not; /// explicitly supply arguments for all of the parameters.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:104,Integrability,wrap,wraps,104,"/// A use of a default initializer in a constructor or in aggregate; /// initialization.; ///; /// This wraps a use of a C++ default initializer (technically,; /// a brace-or-equal-initializer for a non-static data member) when it; /// is implicitly used in a mem-initializer-list in a constructor; /// (C++11 [class.base.init]p8) or in aggregate initialization; /// (C++1y [dcl.init.aggr]p7).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:387,Testability,test,test,387,"/// Represents binding an expression to a temporary.; ///; /// This ensures the destructor is called for the temporary. It should only be; /// needed for non-POD, non-trivially destructable class types. For example:; ///; /// \code; /// struct S {; /// S() { } // User defined constructor makes S non-POD.; /// ~S() { } // User defined destructor makes it non-trivial.; /// };; /// void test() {; /// const S &s_ref = S(); // Requires a CXXBindTemporaryExpr.; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:93,Energy Efficiency,allocate,allocate,93,/// Return the size in bytes of the trailing objects. Used by; /// CXXTemporaryObjectExpr to allocate the right amount of storage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:28,Modifiability,inherit,inherited,28,/// Represents a call to an inherited base class constructor from an; /// inheriting constructor. This call implicitly forwards the arguments from; /// the enclosing context (an inheriting constructor) to the specified inherited; /// base class constructor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:74,Modifiability,inherit,inheriting,74,/// Represents a call to an inherited base class constructor from an; /// inheriting constructor. This call implicitly forwards the arguments from; /// the enclosing context (an inheriting constructor) to the specified inherited; /// base class constructor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:178,Modifiability,inherit,inheriting,178,/// Represents a call to an inherited base class constructor from an; /// inheriting constructor. This call implicitly forwards the arguments from; /// the enclosing context (an inheriting constructor) to the specified inherited; /// base class constructor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:219,Modifiability,inherit,inherited,219,/// Represents a call to an inherited base class constructor from an; /// inheriting constructor. This call implicitly forwards the arguments from; /// the enclosing context (an inheriting constructor) to the specified inherited; /// base class constructor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:31,Modifiability,inherit,inherited,31,/// Whether the constructor is inherited from a virtual base class of the; /// class that we construct.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:20,Modifiability,inherit,inheriting,20,/// Construct a C++ inheriting construction expression.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:27,Modifiability,inherit,inheriting,27,/// Construct an empty C++ inheriting construction expression.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:26,Modifiability,inherit,inherited,26,"/// Determine whether the inherited constructor is inherited from a; /// virtual base of the object we construct. If so, we are not responsible; /// for calling the inherited constructor (the complete object constructor; /// does that), and so we don't need to pass any arguments.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:51,Modifiability,inherit,inherited,51,"/// Determine whether the inherited constructor is inherited from a; /// virtual base of the object we construct. If so, we are not responsible; /// for calling the inherited constructor (the complete object constructor; /// does that), and so we don't need to pass any arguments.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:165,Modifiability,inherit,inherited,165,"/// Determine whether the inherited constructor is inherited from a; /// virtual base of the object we construct. If so, we are not responsible; /// for calling the inherited constructor (the complete object constructor; /// does that), and so we don't need to pass any arguments.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:407,Modifiability,variab,variables,407,"/// A C++ lambda expression, which produces a function object; /// (of unspecified type) that can be invoked later.; ///; /// Example:; /// \code; /// void low_pass_filter(std::vector<double> &values, double cutoff) {; /// values.erase(std::remove_if(values.begin(), values.end(),; /// [=](double value) { return value > cutoff; });; /// }; /// \endcode; ///; /// C++11 lambda expressions can capture local variables, either by copying; /// the values of those local variables at the time the function; /// object is constructed (not when it is called!) or by holding a; /// reference to the local variable. These captures can occur either; /// implicitly or can be written explicitly between the square; /// brackets ([...]) that start the lambda expression.; ///; /// C++1y introduces a new form of ""capture"" called an init-capture that; /// includes an initializing expression (rather than capturing a variable),; /// and which can never occur implicitly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:467,Modifiability,variab,variables,467,"/// A C++ lambda expression, which produces a function object; /// (of unspecified type) that can be invoked later.; ///; /// Example:; /// \code; /// void low_pass_filter(std::vector<double> &values, double cutoff) {; /// values.erase(std::remove_if(values.begin(), values.end(),; /// [=](double value) { return value > cutoff; });; /// }; /// \endcode; ///; /// C++11 lambda expressions can capture local variables, either by copying; /// the values of those local variables at the time the function; /// object is constructed (not when it is called!) or by holding a; /// reference to the local variable. These captures can occur either; /// implicitly or can be written explicitly between the square; /// brackets ([...]) that start the lambda expression.; ///; /// C++1y introduces a new form of ""capture"" called an init-capture that; /// includes an initializing expression (rather than capturing a variable),; /// and which can never occur implicitly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:598,Modifiability,variab,variable,598,"/// A C++ lambda expression, which produces a function object; /// (of unspecified type) that can be invoked later.; ///; /// Example:; /// \code; /// void low_pass_filter(std::vector<double> &values, double cutoff) {; /// values.erase(std::remove_if(values.begin(), values.end(),; /// [=](double value) { return value > cutoff; });; /// }; /// \endcode; ///; /// C++11 lambda expressions can capture local variables, either by copying; /// the values of those local variables at the time the function; /// object is constructed (not when it is called!) or by holding a; /// reference to the local variable. These captures can occur either; /// implicitly or can be written explicitly between the square; /// brackets ([...]) that start the lambda expression.; ///; /// C++1y introduces a new form of ""capture"" called an init-capture that; /// includes an initializing expression (rather than capturing a variable),; /// and which can never occur implicitly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:905,Modifiability,variab,variable,905,"/// A C++ lambda expression, which produces a function object; /// (of unspecified type) that can be invoked later.; ///; /// Example:; /// \code; /// void low_pass_filter(std::vector<double> &values, double cutoff) {; /// values.erase(std::remove_if(values.begin(), values.end(),; /// [=](double value) { return value > cutoff; });; /// }; /// \endcode; ///; /// C++11 lambda expressions can capture local variables, either by copying; /// the values of those local variables at the time the function; /// object is constructed (not when it is called!) or by holding a; /// reference to the local variable. These captures can occur either; /// implicitly or can be written explicitly between the square; /// brackets ([...]) that start the lambda expression.; ///; /// C++1y introduces a new form of ""capture"" called an init-capture that; /// includes an initializing expression (rather than capturing a variable),; /// and which can never occur implicitly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:120,Availability,avail,available,120,"/// The location of the closing brace ('}') that completes; /// the lambda.; ///; /// The location of the brace is also available by looking up the; /// function call operator in the lambda class. However, it is; /// stored here to improve the performance of getSourceRange(), and; /// to avoid having to deserialize the function call operator from a; /// module file just to determine the source range.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:244,Performance,perform,performance,244,"/// The location of the closing brace ('}') that completes; /// the lambda.; ///; /// The location of the brace is also available by looking up the; /// function call operator in the lambda class. However, it is; /// stored here to improve the performance of getSourceRange(), and; /// to avoid having to deserialize the function call operator from a; /// module file just to determine the source range.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:289,Safety,avoid,avoid,289,"/// The location of the closing brace ('}') that completes; /// the lambda.; ///; /// The location of the brace is also available by looking up the; /// function call operator in the lambda class. However, it is; /// stored here to improve the performance of getSourceRange(), and; /// to avoid having to deserialize the function call operator from a; /// module file just to determine the source range.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:95,Integrability,interface,interface,95,/// Const iterator that walks over the capture initialization; /// arguments.; /// FIXME: This interface is prone to being used incorrectly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:128,Integrability,wrap,wrapping,128,"/// Retrieve the body of the lambda. This will be most of the time; /// a \p CompoundStmt, but can also be \p CoroutineBodyStmt wrapping; /// a \p CompoundStmt. Note that unlike functions, lambda-expressions; /// cannot have a function-try-block.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:167,Integrability,wrap,wrap,167,/// Retrieve the \p CompoundStmt representing the body of the lambda.; /// This is a convenience function for callers who do not need; /// to handle node(s) which may wrap a \p CompoundStmt.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:56,Availability,error,error,56,/// Points to the deallocation function used in case of error. May be null.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:8,Energy Efficiency,allocate,allocated,8,"/// The allocated type-source information, as written in the source.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:479,Energy Efficiency,allocate,allocated,479,"// CXXNewExpr is followed by several optional trailing objects.; // They are in order:; //; // * An optional ""Stmt *"" for the array size expression.; // Present if and ony if isArray().; //; // * An optional ""Stmt *"" for the init expression.; // Present if and only if hasInitializer().; //; // * An array of getNumPlacementArgs() ""Stmt *"" for the placement new; // arguments, if any.; //; // * An optional SourceRange for the range covering the parenthesized type-id; // if the allocated type was expressed as a parenthesized type-id.; // Present if and only if isParenTypeId().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:177,Integrability,wrap,wrap,177,"/// This might return std::nullopt even if isArray() returns true,; /// since there might not be an array size expression.; /// If the result is not std::nullopt, it will never wrap a nullptr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:177,Integrability,wrap,wrap,177,"/// This might return std::nullopt even if isArray() returns true,; /// since there might not be an array size expression.; /// If the result is not std::nullopt, it will never wrap a nullptr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:71,Energy Efficiency,allocate,allocated,71,/// Answers whether the usual array deallocation function for the; /// allocated type expects the size of the allocation as a; /// parameter.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:71,Energy Efficiency,allocate,allocated,71,/// Answers whether the usual array deallocation function for the; /// allocated type expects the size of the allocation as a; /// parameter. This can be true even if the actual deallocation; /// function that we're using doesn't want a size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:82,Integrability,depend,dependent,82,"/// Retrieve the type being destroyed.; ///; /// If the type being destroyed is a dependent type which may or may not; /// be a pointer, return an invalid type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:108,Integrability,depend,dependence,108,"/// Either the type source information or the name of the type, if; /// it couldn't be resolved due to type-dependence.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:132,Security,access,access,132,"/// Represents a C++ pseudo-destructor (C++ [expr.pseudo]).; ///; /// A pseudo-destructor is an expression that looks like a member access to a; /// destructor of a scalar type, except that scalar types don't have; /// destructors. For example:; ///; /// \code; /// typedef int T;; /// void f(int *p) {; /// p->T::~T();; /// }; /// \endcode; ///; /// Pseudo-destructors typically occur when instantiating templates such as:; ///; /// \code; /// template<typename T>; /// void destroy(T* ptr) {; /// ptr->T::~T();; /// }; /// \endcode; ///; /// for scalar types. A pseudo-destructor expression has no run-time semantics; /// beyond evaluating the base expression.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:122,Availability,avail,available,122,/// Retrieve the source location information for the type; /// being destroyed.; ///; /// This type-source information is available for non-dependent; /// pseudo-destructor expressions and some dependent pseudo-destructor; /// expressions. Returns null if we only have the identifier for a; /// dependent pseudo-destructor expression.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:140,Integrability,depend,dependent,140,/// Retrieve the source location information for the type; /// being destroyed.; ///; /// This type-source information is available for non-dependent; /// pseudo-destructor expressions and some dependent pseudo-destructor; /// expressions. Returns null if we only have the identifier for a; /// dependent pseudo-destructor expression.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:194,Integrability,depend,dependent,194,/// Retrieve the source location information for the type; /// being destroyed.; ///; /// This type-source information is available for non-dependent; /// pseudo-destructor expressions and some dependent pseudo-destructor; /// expressions. Returns null if we only have the identifier for a; /// dependent pseudo-destructor expression.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:295,Integrability,depend,dependent,295,/// Retrieve the source location information for the type; /// being destroyed.; ///; /// This type-source information is available for non-dependent; /// pseudo-destructor expressions and some dependent pseudo-destructor; /// expressions. Returns null if we only have the identifier for a; /// dependent pseudo-destructor expression.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:9,Integrability,depend,dependent,9,"/// In a dependent pseudo-destructor expression for which we do not; /// have full type information on the destroyed type, provides the name; /// of the destroyed type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:41,Integrability,depend,dependent,41,/// Set the name of destroyed type for a dependent pseudo-destructor; /// expression.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:51,Energy Efficiency,allocate,allocated,51,// Note: The TypeSourceInfos for the arguments are allocated after the; // TypeTraitExpr.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:48,Integrability,depend,dependent,48,/// The value of the type trait. Unspecified if dependent.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:48,Integrability,depend,dependent,48,/// The value of the type trait. Unspecified if dependent.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:204,Integrability,depend,dependent,204,"/// A reference to a name which we were able to look up during; /// parsing but could not resolve to a specific declaration.; ///; /// This arises in several ways:; /// * we might be waiting for argument-dependent lookup;; /// * the name might resolve to an overloaded function;; /// and eventually:; /// * the lookup might have included a function template.; ///; /// These never include UnresolvedUsingValueDecls, which are always class; /// members and therefore appear only in UnresolvedMemberLookupExprs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:33,Security,access,access,33,"/// The naming class (C++ [class.access.base]p5) of the lookup, if; /// any. This can generally be recalculated from the context chain,; /// but that can be fairly expensive for unqualified lookups.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:241,Security,Access,Access,241,"// UnresolvedLookupExpr is followed by several trailing objects.; // They are in order:; //; // * An array of getNumResults() DeclAccessPair for the results. These are; // undesugared, which is to say, they may include UsingShadowDecls.; // Access is relative to the naming class.; //; // * An optional ASTTemplateKWAndArgsInfo for the explicitly specified; // template keyword and arguments. Present if and only if; // hasTemplateKWAndArgsInfo().; //; // * An array of getNumTemplateArgs() TemplateArgumentLoc containing; // location information for the explicitly specified template arguments.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:40,Integrability,depend,dependent,40,"// After canonicalization, there may be dependent template arguments in; // CanonicalConverted But none of Args is dependent. When any of; // CanonicalConverted dependent, KnownDependent is true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:115,Integrability,depend,dependent,115,"// After canonicalization, there may be dependent template arguments in; // CanonicalConverted But none of Args is dependent. When any of; // CanonicalConverted dependent, KnownDependent is true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:161,Integrability,depend,dependent,161,"// After canonicalization, there may be dependent template arguments in; // CanonicalConverted But none of Args is dependent. When any of; // CanonicalConverted dependent, KnownDependent is true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:65,Integrability,depend,dependent,65,/// True if this declaration should be extended by; /// argument-dependent lookup.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:39,Modifiability,extend,extended,39,/// True if this declaration should be extended by; /// argument-dependent lookup.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:63,Security,access,access,63,/// Gets the 'naming class' (in the sense of C++0x; /// [class.access.base]p5) of the lookup. This is the scope; /// that was looked in to find these results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:93,Integrability,Depend,DependentScopeDeclRefExpr,93,"/// A qualified reference to a name whose declaration cannot; /// yet be resolved.; ///; /// DependentScopeDeclRefExpr is similar to DeclRefExpr in that; /// it expresses a reference to a declaration such as; /// X<T>::value. The difference, however, is that an; /// DependentScopeDeclRefExpr node is used only within C++ templates when; /// the qualification (e.g., X<T>::) refers to a dependent type. In; /// this case, X<T>::value cannot resolve to a declaration because the; /// declaration will differ from one instantiation of X<T> to the; /// next. Therefore, DependentScopeDeclRefExpr keeps track of the; /// qualifier (X<T>::) and the name of the entity being referenced; /// (""value""). Such expressions will instantiate to a DeclRefExpr once the; /// declaration can be found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:267,Integrability,Depend,DependentScopeDeclRefExpr,267,"/// A qualified reference to a name whose declaration cannot; /// yet be resolved.; ///; /// DependentScopeDeclRefExpr is similar to DeclRefExpr in that; /// it expresses a reference to a declaration such as; /// X<T>::value. The difference, however, is that an; /// DependentScopeDeclRefExpr node is used only within C++ templates when; /// the qualification (e.g., X<T>::) refers to a dependent type. In; /// this case, X<T>::value cannot resolve to a declaration because the; /// declaration will differ from one instantiation of X<T> to the; /// next. Therefore, DependentScopeDeclRefExpr keeps track of the; /// qualifier (X<T>::) and the name of the entity being referenced; /// (""value""). Such expressions will instantiate to a DeclRefExpr once the; /// declaration can be found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:387,Integrability,depend,dependent,387,"/// A qualified reference to a name whose declaration cannot; /// yet be resolved.; ///; /// DependentScopeDeclRefExpr is similar to DeclRefExpr in that; /// it expresses a reference to a declaration such as; /// X<T>::value. The difference, however, is that an; /// DependentScopeDeclRefExpr node is used only within C++ templates when; /// the qualification (e.g., X<T>::) refers to a dependent type. In; /// this case, X<T>::value cannot resolve to a declaration because the; /// declaration will differ from one instantiation of X<T> to the; /// next. Therefore, DependentScopeDeclRefExpr keeps track of the; /// qualifier (X<T>::) and the name of the entity being referenced; /// (""value""). Such expressions will instantiate to a DeclRefExpr once the; /// declaration can be found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:567,Integrability,Depend,DependentScopeDeclRefExpr,567,"/// A qualified reference to a name whose declaration cannot; /// yet be resolved.; ///; /// DependentScopeDeclRefExpr is similar to DeclRefExpr in that; /// it expresses a reference to a declaration such as; /// X<T>::value. The difference, however, is that an; /// DependentScopeDeclRefExpr node is used only within C++ templates when; /// the qualification (e.g., X<T>::) refers to a dependent type. In; /// this case, X<T>::value cannot resolve to a declaration because the; /// declaration will differ from one instantiation of X<T> to the; /// next. Therefore, DependentScopeDeclRefExpr keeps track of the; /// qualifier (X<T>::) and the name of the entity being referenced; /// (""value""). Such expressions will instantiate to a DeclRefExpr once the; /// declaration can be found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:50,Integrability,Depend,DependentScopeDeclRefExpr,50,"/// Note: getBeginLoc() is the start of the whole DependentScopeDeclRefExpr,; /// and differs from getLocation().getStart().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:145,Integrability,depend,dependent,145,"/// Describes an explicit type conversion that uses functional; /// notion but could not be resolved because one or more arguments are; /// type-dependent.; ///; /// The explicit type conversions expressed by; /// CXXUnresolvedConstructExpr have the form <tt>T(a1, a2, ..., aN)</tt>,; /// where \c T is some type and \c a1, \c a2, ..., \c aN are values, and; /// either \c T is a dependent type or one or more of the <tt>a</tt>'s is; /// type-dependent. For example, this would occur in a template such; /// as:; ///; /// \code; /// template<typename T, typename A1>; /// inline T make_a(const A1& a1) {; /// return T(a1);; /// }; /// \endcode; ///; /// When the returned expression is instantiated, it may resolve to a; /// constructor call, conversion function call, or some kind of type; /// conversion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:380,Integrability,depend,dependent,380,"/// Describes an explicit type conversion that uses functional; /// notion but could not be resolved because one or more arguments are; /// type-dependent.; ///; /// The explicit type conversions expressed by; /// CXXUnresolvedConstructExpr have the form <tt>T(a1, a2, ..., aN)</tt>,; /// where \c T is some type and \c a1, \c a2, ..., \c aN are values, and; /// either \c T is a dependent type or one or more of the <tt>a</tt>'s is; /// type-dependent. For example, this would occur in a template such; /// as:; ///; /// \code; /// template<typename T, typename A1>; /// inline T make_a(const A1& a1) {; /// return T(a1);; /// }; /// \endcode; ///; /// When the returned expression is instantiated, it may resolve to a; /// constructor call, conversion function call, or some kind of type; /// conversion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:443,Integrability,depend,dependent,443,"/// Describes an explicit type conversion that uses functional; /// notion but could not be resolved because one or more arguments are; /// type-dependent.; ///; /// The explicit type conversions expressed by; /// CXXUnresolvedConstructExpr have the form <tt>T(a1, a2, ..., aN)</tt>,; /// where \c T is some type and \c a1, \c a2, ..., \c aN are values, and; /// either \c T is a dependent type or one or more of the <tt>a</tt>'s is; /// type-dependent. For example, this would occur in a template such; /// as:; ///; /// \code; /// template<typename T, typename A1>; /// inline T make_a(const A1& a1) {; /// return T(a1);; /// }; /// \endcode; ///; /// When the returned expression is instantiated, it may resolve to a; /// constructor call, conversion function call, or some kind of type; /// conversion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:164,Integrability,depend,dependent,164,"/// Represents a C++ member access expression where the actual; /// member referenced could not be resolved because the base; /// expression or the member name was dependent.; ///; /// Like UnresolvedMemberExprs, these can be either implicit or; /// explicit accesses. It is only possible to get one of these with; /// an implicit access if a qualifier is provided.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:28,Security,access,access,28,"/// Represents a C++ member access expression where the actual; /// member referenced could not be resolved because the base; /// expression or the member name was dependent.; ///; /// Like UnresolvedMemberExprs, these can be either implicit or; /// explicit accesses. It is only possible to get one of these with; /// an implicit access if a qualifier is provided.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:259,Security,access,accesses,259,"/// Represents a C++ member access expression where the actual; /// member referenced could not be resolved because the base; /// expression or the member name was dependent.; ///; /// Like UnresolvedMemberExprs, these can be either implicit or; /// explicit accesses. It is only possible to get one of these with; /// an implicit access if a qualifier is provided.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:331,Security,access,access,331,"/// Represents a C++ member access expression where the actual; /// member referenced could not be resolved because the base; /// expression or the member name was dependent.; ///; /// Like UnresolvedMemberExprs, these can be either implicit or; /// explicit accesses. It is only possible to get one of these with; /// an implicit access if a qualifier is provided.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:112,Security,access,accesses,112,"/// The expression for the base pointer or class reference,; /// e.g., the \c x in x.f. Can be null in implicit accesses.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:72,Security,access,accesses,72,"/// The type of the base expression. Never null, even for; /// implicit accesses.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:153,Performance,perform,performance,153,"/// The nested-name-specifier that precedes the member name, if any.; /// FIXME: This could be in principle store as a trailing object.; /// However the performance impact of doing so should be investigated first.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:491,Security,access,access,491,"// CXXDependentScopeMemberExpr is followed by several trailing objects,; // some of which optional. They are in order:; //; // * An optional ASTTemplateKWAndArgsInfo for the explicitly specified; // template keyword and arguments. Present if and only if; // hasTemplateKWAndArgsInfo().; //; // * An array of getNumTemplateArgs() TemplateArgumentLoc containing location; // information for the explicitly specified template arguments.; //; // * An optional NamedDecl *. In a qualified member access expression such; // as t->Base::f, this member stores the resolves of name lookup in the; // context of the member access expression, to be used at instantiation; // time. Present if and only if hasFirstQualifierFoundInScope().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:613,Security,access,access,613,"// CXXDependentScopeMemberExpr is followed by several trailing objects,; // some of which optional. They are in order:; //; // * An optional ASTTemplateKWAndArgsInfo for the explicitly specified; // template keyword and arguments. Present if and only if; // hasTemplateKWAndArgsInfo().; //; // * An array of getNumTemplateArgs() TemplateArgumentLoc containing location; // information for the explicitly specified template arguments.; //; // * An optional NamedDecl *. In a qualified member access expression such; // as t->Base::f, this member stores the resolves of name lookup in the; // context of the member access expression, to be used at instantiation; // time. Present if and only if hasFirstQualifierFoundInScope().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:32,Security,access,access,32,"/// True if this is an implicit access, i.e. one in which the; /// member being accessed was not written in the source. The source; /// location of the operator is invalid in this case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:80,Security,access,accessed,80,"/// True if this is an implicit access, i.e. one in which the; /// member being accessed was not written in the source. The source; /// location of the operator is invalid in this case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:104,Security,access,access,104,"/// Retrieve the first part of the nested-name-specifier that was; /// found in the scope of the member access expression when the member access; /// was initially parsed.; ///; /// This function only returns a useful result when member access expression; /// uses a qualified member name, e.g., ""x.Base::f"". Here, the declaration; /// returned by this function describes what was found by unqualified name; /// lookup for the identifier ""Base"" within the scope of the member access; /// expression itself. At template instantiation time, this information is; /// combined with the results of name lookup into the type of the object; /// expression itself (the class type of x).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:138,Security,access,access,138,"/// Retrieve the first part of the nested-name-specifier that was; /// found in the scope of the member access expression when the member access; /// was initially parsed.; ///; /// This function only returns a useful result when member access expression; /// uses a qualified member name, e.g., ""x.Base::f"". Here, the declaration; /// returned by this function describes what was found by unqualified name; /// lookup for the identifier ""Base"" within the scope of the member access; /// expression itself. At template instantiation time, this information is; /// combined with the results of name lookup into the type of the object; /// expression itself (the class type of x).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:237,Security,access,access,237,"/// Retrieve the first part of the nested-name-specifier that was; /// found in the scope of the member access expression when the member access; /// was initially parsed.; ///; /// This function only returns a useful result when member access expression; /// uses a qualified member name, e.g., ""x.Base::f"". Here, the declaration; /// returned by this function describes what was found by unqualified name; /// lookup for the identifier ""Base"" within the scope of the member access; /// expression itself. At template instantiation time, this information is; /// combined with the results of name lookup into the type of the object; /// expression itself (the class type of x).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:476,Security,access,access,476,"/// Retrieve the first part of the nested-name-specifier that was; /// found in the scope of the member access expression when the member access; /// was initially parsed.; ///; /// This function only returns a useful result when member access expression; /// uses a qualified member name, e.g., ""x.Base::f"". Here, the declaration; /// returned by this function describes what was found by unqualified name; /// lookup for the identifier ""Base"" within the scope of the member access; /// expression itself. At template instantiation time, this information is; /// combined with the results of name lookup into the type of the object; /// expression itself (the class type of x).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:489,Integrability,depend,depending,489,"/// Represents a C++ member access expression for which lookup; /// produced a set of overloaded functions.; ///; /// The member access may be explicit or implicit:; /// \code; /// struct A {; /// int a, b;; /// int explicitAccess() { return this->a + this->A::b; }; /// int implicitAccess() { return a + A::b; }; /// };; /// \endcode; ///; /// In the final AST, an explicit access always becomes a MemberExpr.; /// An implicit access may become either a MemberExpr or a; /// DeclRefExpr, depending on whether the member is static.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:28,Security,access,access,28,"/// Represents a C++ member access expression for which lookup; /// produced a set of overloaded functions.; ///; /// The member access may be explicit or implicit:; /// \code; /// struct A {; /// int a, b;; /// int explicitAccess() { return this->a + this->A::b; }; /// int implicitAccess() { return a + A::b; }; /// };; /// \endcode; ///; /// In the final AST, an explicit access always becomes a MemberExpr.; /// An implicit access may become either a MemberExpr or a; /// DeclRefExpr, depending on whether the member is static.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:129,Security,access,access,129,"/// Represents a C++ member access expression for which lookup; /// produced a set of overloaded functions.; ///; /// The member access may be explicit or implicit:; /// \code; /// struct A {; /// int a, b;; /// int explicitAccess() { return this->a + this->A::b; }; /// int implicitAccess() { return a + A::b; }; /// };; /// \endcode; ///; /// In the final AST, an explicit access always becomes a MemberExpr.; /// An implicit access may become either a MemberExpr or a; /// DeclRefExpr, depending on whether the member is static.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:375,Security,access,access,375,"/// Represents a C++ member access expression for which lookup; /// produced a set of overloaded functions.; ///; /// The member access may be explicit or implicit:; /// \code; /// struct A {; /// int a, b;; /// int explicitAccess() { return this->a + this->A::b; }; /// int implicitAccess() { return a + A::b; }; /// };; /// \endcode; ///; /// In the final AST, an explicit access always becomes a MemberExpr.; /// An implicit access may become either a MemberExpr or a; /// DeclRefExpr, depending on whether the member is static.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:428,Security,access,access,428,"/// Represents a C++ member access expression for which lookup; /// produced a set of overloaded functions.; ///; /// The member access may be explicit or implicit:; /// \code; /// struct A {; /// int a, b;; /// int explicitAccess() { return this->a + this->A::b; }; /// int implicitAccess() { return a + A::b; }; /// };; /// \endcode; ///; /// In the final AST, an explicit access always becomes a MemberExpr.; /// An implicit access may become either a MemberExpr or a; /// DeclRefExpr, depending on whether the member is static.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:241,Security,Access,Access,241,"// UnresolvedMemberExpr is followed by several trailing objects.; // They are in order:; //; // * An array of getNumResults() DeclAccessPair for the results. These are; // undesugared, which is to say, they may include UsingShadowDecls.; // Access is relative to the naming class.; //; // * An optional ASTTemplateKWAndArgsInfo for the explicitly specified; // template keyword and arguments. Present if and only if; // hasTemplateKWAndArgsInfo().; //; // * An array of getNumTemplateArgs() TemplateArgumentLoc containing; // location information for the explicitly specified template arguments.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:32,Security,access,access,32,"/// True if this is an implicit access, i.e., one in which the; /// member being accessed was not written in the source.; ///; /// The source location of the operator is invalid in this case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:81,Security,access,accessed,81,"/// True if this is an implicit access, i.e., one in which the; /// member being accessed was not written in the source.; ///; /// The source location of the operator is invalid in this case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:106,Testability,test,tests,106,/// Represents a C++11 noexcept expression (C++ [expr.unary.noexcept]).; ///; /// The noexcept expression tests whether a given expression might throw. Its; /// result is a boolean constant.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:92,Integrability,depend,dependent,92,"/// The length of the parameter pack, if known.; ///; /// When this expression is not value-dependent, this is the length of; /// the pack. When the expression was parsed rather than instantiated; /// (and thus is value-dependent), this is zero.; ///; /// After partial substitution into a sizeof...(X) expression (for instance,; /// within an alias template or during function template argument deduction),; /// we store a trailing array of partially-substituted TemplateArguments,; /// and this is the length of that array.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:220,Integrability,depend,dependent,220,"/// The length of the parameter pack, if known.; ///; /// When this expression is not value-dependent, this is the length of; /// the pack. When the expression was parsed rather than instantiated; /// (and thus is value-dependent), this is zero.; ///; /// After partial substitution into a sizeof...(X) expression (for instance,; /// within an alias template or during function template argument deduction),; /// we store a trailing array of partially-substituted TemplateArguments,; /// and this is the length of that array.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:62,Integrability,rout,routine,62,/// Retrieve the length of the parameter pack.; ///; /// This routine may only be invoked when the expression is not; /// value-dependent.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:128,Integrability,depend,dependent,128,/// Retrieve the length of the parameter pack.; ///; /// This routine may only be invoked when the expression is not; /// value-dependent.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:564,Performance,perform,performing,564,"/// Represents a reference to a non-type template parameter pack that; /// has been substituted with a non-template argument pack.; ///; /// When a pack expansion in the source code contains multiple parameter packs; /// and those parameter packs correspond to different levels of template; /// parameter lists, this node is used to represent a non-type template; /// parameter pack from an outer level, which has already had its argument pack; /// substituted but that still lives within a pack expansion that itself; /// could not be instantiated. When actually performing a substitution into; /// that pack expansion (e.g., when all template parameters have corresponding; /// arguments), this type will be replaced with the appropriate underlying; /// expression at the current pack substitution index.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:637,Integrability,depend,depending,637,"/// Represents a prvalue temporary that is written into memory so that; /// a reference can bind to it.; ///; /// Prvalue expressions are materialized when they need to have an address; /// in memory for a reference to bind to. This happens when binding a; /// reference to the result of a conversion, e.g.,; ///; /// \code; /// const int &r = 1.0;; /// \endcode; ///; /// Here, 1.0 is implicitly converted to an \c int. That resulting \c int is; /// then materialized via a \c MaterializeTemporaryExpr, and the reference; /// binds to the temporary. \c MaterializeTemporaryExprs are always glvalues; /// (either an lvalue or an xvalue, depending on the kind of reference binding; /// to it), maintaining the invariant that references always bind to glvalues.; ///; /// Reference binding and copy-elision can both extend the lifetime of a; /// temporary. When either happens, the expression will also track the; /// declaration which is responsible for the lifetime extension.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:814,Modifiability,extend,extend,814,"/// Represents a prvalue temporary that is written into memory so that; /// a reference can bind to it.; ///; /// Prvalue expressions are materialized when they need to have an address; /// in memory for a reference to bind to. This happens when binding a; /// reference to the result of a conversion, e.g.,; ///; /// \code; /// const int &r = 1.0;; /// \endcode; ///; /// Here, 1.0 is implicitly converted to an \c int. That resulting \c int is; /// then materialized via a \c MaterializeTemporaryExpr, and the reference; /// binds to the temporary. \c MaterializeTemporaryExprs are always glvalues; /// (either an lvalue or an xvalue, depending on the kind of reference binding; /// to it), maintaining the invariant that references always bind to glvalues.; ///; /// Reference binding and copy-elision can both extend the lifetime of a; /// temporary. When either happens, the expression will also track the; /// declaration which is responsible for the lifetime extension.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:47,Usability,usab,usable,47,"/// Determine whether this temporary object is usable in constant; /// expressions, as specified in C++20 [expr.const]p4.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:89,Integrability,depend,dependent,89,/// Represents a folding of a pack over an operator.; ///; /// This expression is always dependent and represents a pack expansion of the; /// forms:; ///; /// ( expr op ... ); /// ( ... op expr ); /// ( expr op ... op expr ),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:395,Usability,resume,resumed,395,"/// Represents an expression that might suspend coroutine execution;; /// either a co_await or co_yield expression.; ///; /// Evaluation of this expression first evaluates its 'ready' expression. If; /// that returns 'false':; /// -- execution of the coroutine is suspended; /// -- the 'suspend' expression is evaluated; /// -- if the 'suspend' expression returns 'false', the coroutine is; /// resumed; /// -- otherwise, control passes back to the resumer.; /// If the coroutine is not suspended, or when it is resumed, the 'resume'; /// expression is evaluated, and its result is the result of the overall; /// expression.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:449,Usability,resume,resumer,449,"/// Represents an expression that might suspend coroutine execution;; /// either a co_await or co_yield expression.; ///; /// Evaluation of this expression first evaluates its 'ready' expression. If; /// that returns 'false':; /// -- execution of the coroutine is suspended; /// -- the 'suspend' expression is evaluated; /// -- if the 'suspend' expression returns 'false', the coroutine is; /// resumed; /// -- otherwise, control passes back to the resumer.; /// If the coroutine is not suspended, or when it is resumed, the 'resume'; /// expression is evaluated, and its result is the result of the overall; /// expression.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:512,Usability,resume,resumed,512,"/// Represents an expression that might suspend coroutine execution;; /// either a co_await or co_yield expression.; ///; /// Evaluation of this expression first evaluates its 'ready' expression. If; /// that returns 'false':; /// -- execution of the coroutine is suspended; /// -- the 'suspend' expression is evaluated; /// -- if the 'suspend' expression returns 'false', the coroutine is; /// resumed; /// -- otherwise, control passes back to the resumer.; /// If the coroutine is not suspended, or when it is resumed, the 'resume'; /// expression is evaluated, and its result is the result of the overall; /// expression.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:526,Usability,resume,resume,526,"/// Represents an expression that might suspend coroutine execution;; /// either a co_await or co_yield expression.; ///; /// Evaluation of this expression first evaluates its 'ready' expression. If; /// that returns 'false':; /// -- execution of the coroutine is suspended; /// -- the 'suspend' expression is evaluated; /// -- if the 'suspend' expression returns 'false', the coroutine is; /// resumed; /// -- otherwise, control passes back to the resumer.; /// If the coroutine is not suspended, or when it is resumed, the 'resume'; /// expression is evaluated, and its result is the result of the overall; /// expression.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:77,Integrability,depend,dependent,77,/// Represents a 'co_await' expression while the type of the promise; /// is dependent.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:34,Integrability,depend,dependent,34,// NOTE: A co_await expression is dependent on the coroutines promise; // type and may be dependent even when the `Op` expression is not.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:90,Integrability,depend,dependent,90,// NOTE: A co_await expression is dependent on the coroutines promise; // type and may be dependent even when the `Op` expression is not.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h:197,Usability,simpl,simple,197,"/// Represents a C++2a __builtin_bit_cast(T, v) expression. Used to implement; /// std::bit_cast. These can sometimes be evaluated as part of a constant; /// expression, but otherwise CodeGen to a simple memcpy in general.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:414,Integrability,interface,interface,414,"//===- ExprObjC.h - Classes for representing ObjC expressions ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the ExprObjC interface and subclasses.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:380,Performance,optimiz,optimize,380,"/// Determine whether this dictionary literal has any pack expansions.; ///; /// If the dictionary literal has pack expansions, then there will; /// be an array of pack expansion data following the array of; /// key/value pairs, which provide the locations of the ellipses (if; /// any) and number of elements in the expansion (if known). If; /// there are no pack expansions, we optimize away this storage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:30,Integrability,protocol,protocol,30,"/// ObjCProtocolExpr used for protocol expression in Objective-C.; ///; /// This is used as: \@protocol(foo), as in:; /// \code; /// [obj conformsToProtocol:@protocol(foo)]; /// \endcode; ///; /// The return type is ""Protocol*"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:95,Integrability,protocol,protocol,95,"/// ObjCProtocolExpr used for protocol expression in Objective-C.; ///; /// This is used as: \@protocol(foo), as in:; /// \code; /// [obj conformsToProtocol:@protocol(foo)]; /// \endcode; ///; /// The return type is ""Protocol*"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:158,Integrability,protocol,protocol,158,"/// ObjCProtocolExpr used for protocol expression in Objective-C.; ///; /// This is used as: \@protocol(foo), as in:; /// \code; /// [obj conformsToProtocol:@protocol(foo)]; /// \endcode; ///; /// The return type is ""Protocol*"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:217,Integrability,Protocol,Protocol,217,"/// ObjCProtocolExpr used for protocol expression in Objective-C.; ///; /// This is used as: \@protocol(foo), as in:; /// \code; /// [obj conformsToProtocol:@protocol(foo)]; /// \endcode; ///; /// The return type is ""Protocol*"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:54,Modifiability,variab,variable,54,/// ObjCIvarRefExpr - A reference to an ObjC instance variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:53,Security,access,access,53,/// ObjCPropertyRefExpr - A dot-syntax expression to access an ObjC; /// property.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:62,Integrability,message,message,62,"/// Indicates whether the property reference will result in a message; /// to the getter, the setter, or both.; /// This applies to both implicit and explicit property references.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:116,Integrability,interface,interface,116,"/// When the receiver in property access is 'super', this is; /// the location of the 'super' keyword. When it's an interface,; /// this is that interface.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:145,Integrability,interface,interface,145,"/// When the receiver in property access is 'super', this is; /// the location of the 'super' keyword. When it's an interface,; /// this is that interface.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:34,Security,access,access,34,"/// When the receiver in property access is 'super', this is; /// the location of the 'super' keyword. When it's an interface,; /// this is that interface.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:52,Integrability,message,message,52,/// True if the property reference will result in a message to the; /// getter.; /// This applies to both implicit and explicit property references.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:52,Integrability,message,message,52,/// True if the property reference will result in a message to the; /// setter.; /// This applies to both implicit and explicit property references.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:31,Integrability,message,message,31,"/// An expression that sends a message to the given Objective-C; /// object or class.; ///; /// The following contains two message send expressions:; ///; /// \code; /// [[NSString alloc] initWithString:@""Hello""]; /// \endcode; ///; /// The innermost message send invokes the ""alloc"" class method on the; /// NSString class, while the outermost message send invokes the; /// ""initWithString"" instance method on the object returned from; /// NSString's ""alloc"". In all, an Objective-C message send can take; /// on four different (although related) forms:; ///; /// 1. Send to an object instance.; /// 2. Send to a class.; /// 3. Send to the superclass instance of the current class.; /// 4. Send to the superclass of the current class.; ///; /// All four kinds of message sends are modeled by the ObjCMessageExpr; /// class, and can be distinguished via \c getReceiverKind(). Example:; ///; /// The ""void *"" trailing objects are actually ONE void * (the; /// receiver pointer), and NumArgs Expr *. But due to the; /// implementation of children(), these must be together contiguously.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:123,Integrability,message,message,123,"/// An expression that sends a message to the given Objective-C; /// object or class.; ///; /// The following contains two message send expressions:; ///; /// \code; /// [[NSString alloc] initWithString:@""Hello""]; /// \endcode; ///; /// The innermost message send invokes the ""alloc"" class method on the; /// NSString class, while the outermost message send invokes the; /// ""initWithString"" instance method on the object returned from; /// NSString's ""alloc"". In all, an Objective-C message send can take; /// on four different (although related) forms:; ///; /// 1. Send to an object instance.; /// 2. Send to a class.; /// 3. Send to the superclass instance of the current class.; /// 4. Send to the superclass of the current class.; ///; /// All four kinds of message sends are modeled by the ObjCMessageExpr; /// class, and can be distinguished via \c getReceiverKind(). Example:; ///; /// The ""void *"" trailing objects are actually ONE void * (the; /// receiver pointer), and NumArgs Expr *. But due to the; /// implementation of children(), these must be together contiguously.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:251,Integrability,message,message,251,"/// An expression that sends a message to the given Objective-C; /// object or class.; ///; /// The following contains two message send expressions:; ///; /// \code; /// [[NSString alloc] initWithString:@""Hello""]; /// \endcode; ///; /// The innermost message send invokes the ""alloc"" class method on the; /// NSString class, while the outermost message send invokes the; /// ""initWithString"" instance method on the object returned from; /// NSString's ""alloc"". In all, an Objective-C message send can take; /// on four different (although related) forms:; ///; /// 1. Send to an object instance.; /// 2. Send to a class.; /// 3. Send to the superclass instance of the current class.; /// 4. Send to the superclass of the current class.; ///; /// All four kinds of message sends are modeled by the ObjCMessageExpr; /// class, and can be distinguished via \c getReceiverKind(). Example:; ///; /// The ""void *"" trailing objects are actually ONE void * (the; /// receiver pointer), and NumArgs Expr *. But due to the; /// implementation of children(), these must be together contiguously.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:345,Integrability,message,message,345,"/// An expression that sends a message to the given Objective-C; /// object or class.; ///; /// The following contains two message send expressions:; ///; /// \code; /// [[NSString alloc] initWithString:@""Hello""]; /// \endcode; ///; /// The innermost message send invokes the ""alloc"" class method on the; /// NSString class, while the outermost message send invokes the; /// ""initWithString"" instance method on the object returned from; /// NSString's ""alloc"". In all, an Objective-C message send can take; /// on four different (although related) forms:; ///; /// 1. Send to an object instance.; /// 2. Send to a class.; /// 3. Send to the superclass instance of the current class.; /// 4. Send to the superclass of the current class.; ///; /// All four kinds of message sends are modeled by the ObjCMessageExpr; /// class, and can be distinguished via \c getReceiverKind(). Example:; ///; /// The ""void *"" trailing objects are actually ONE void * (the; /// receiver pointer), and NumArgs Expr *. But due to the; /// implementation of children(), these must be together contiguously.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:484,Integrability,message,message,484,"/// An expression that sends a message to the given Objective-C; /// object or class.; ///; /// The following contains two message send expressions:; ///; /// \code; /// [[NSString alloc] initWithString:@""Hello""]; /// \endcode; ///; /// The innermost message send invokes the ""alloc"" class method on the; /// NSString class, while the outermost message send invokes the; /// ""initWithString"" instance method on the object returned from; /// NSString's ""alloc"". In all, an Objective-C message send can take; /// on four different (although related) forms:; ///; /// 1. Send to an object instance.; /// 2. Send to a class.; /// 3. Send to the superclass instance of the current class.; /// 4. Send to the superclass of the current class.; ///; /// All four kinds of message sends are modeled by the ObjCMessageExpr; /// class, and can be distinguished via \c getReceiverKind(). Example:; ///; /// The ""void *"" trailing objects are actually ONE void * (the; /// receiver pointer), and NumArgs Expr *. But due to the; /// implementation of children(), these must be together contiguously.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:764,Integrability,message,message,764,"/// An expression that sends a message to the given Objective-C; /// object or class.; ///; /// The following contains two message send expressions:; ///; /// \code; /// [[NSString alloc] initWithString:@""Hello""]; /// \endcode; ///; /// The innermost message send invokes the ""alloc"" class method on the; /// NSString class, while the outermost message send invokes the; /// ""initWithString"" instance method on the object returned from; /// NSString's ""alloc"". In all, an Objective-C message send can take; /// on four different (although related) forms:; ///; /// 1. Send to an object instance.; /// 2. Send to a class.; /// 3. Send to the superclass instance of the current class.; /// 4. Send to the superclass of the current class.; ///; /// All four kinds of message sends are modeled by the ObjCMessageExpr; /// class, and can be distinguished via \c getReceiverKind(). Example:; ///; /// The ""void *"" trailing objects are actually ONE void * (the; /// receiver pointer), and NumArgs Expr *. But due to the; /// implementation of children(), these must be together contiguously.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:30,Integrability,message,message,30,/// The kind of receiver this message is sending to.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:41,Integrability,message,message,41,/// Stores either the selector that this message is sending; /// to (when \c HasMethod is zero) or an \c ObjCMethodDecl pointer; /// referring to the method that we type-checked against.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:35,Integrability,message,message,35,"/// The number of arguments in the message send, not; /// including the receiver.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:139,Availability,mask,masking,139,"/// The kind of message send this is, which is one of the; /// ReceiverKind values.; ///; /// We pad this out to a byte to avoid excessive masking and shifting.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:16,Integrability,message,message,16,"/// The kind of message send this is, which is one of the; /// ReceiverKind values.; ///; /// We pad this out to a byte to avoid excessive masking and shifting.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:123,Safety,avoid,avoid,123,"/// The kind of message send this is, which is one of the; /// ReceiverKind values.; ///; /// We pad this out to a byte to avoid excessive masking and shifting.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:17,Integrability,message,message,17,"/// Whether this message send is a ""delegate init call"",; /// i.e. a call of an init method on self from within an init method.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:17,Integrability,message,message,17,/// Whether this message send was implicitly generated by; /// the implementation rather than explicitly written by the user.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:13,Integrability,message,message,13,"/// When the message expression is a send to 'super', this is; /// the location of the 'super' keyword.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:38,Integrability,message,message,38,/// Retrieve the pointer value of the message receiver.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:33,Integrability,message,message,33,/// Set the pointer value of the message receiver.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:13,Integrability,message,message,13,"/// Create a message send to super.; ///; /// \param Context The ASTContext in which this expression will be created.; ///; /// \param T The result type of this message.; ///; /// \param VK The value kind of this message. A message returning; /// a l-value or r-value reference will be an l-value or x-value,; /// respectively.; ///; /// \param LBracLoc The location of the open square bracket '['.; ///; /// \param SuperLoc The location of the ""super"" keyword.; ///; /// \param IsInstanceSuper Whether this is an instance ""super""; /// message (otherwise, it's a class ""super"" message).; ///; /// \param Sel The selector used to determine which method gets called.; ///; /// \param Method The Objective-C method against which this message; /// send was type-checked. May be nullptr.; ///; /// \param Args The message send arguments.; ///; /// \param RBracLoc The location of the closing square bracket ']'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:161,Integrability,message,message,161,"/// Create a message send to super.; ///; /// \param Context The ASTContext in which this expression will be created.; ///; /// \param T The result type of this message.; ///; /// \param VK The value kind of this message. A message returning; /// a l-value or r-value reference will be an l-value or x-value,; /// respectively.; ///; /// \param LBracLoc The location of the open square bracket '['.; ///; /// \param SuperLoc The location of the ""super"" keyword.; ///; /// \param IsInstanceSuper Whether this is an instance ""super""; /// message (otherwise, it's a class ""super"" message).; ///; /// \param Sel The selector used to determine which method gets called.; ///; /// \param Method The Objective-C method against which this message; /// send was type-checked. May be nullptr.; ///; /// \param Args The message send arguments.; ///; /// \param RBracLoc The location of the closing square bracket ']'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:213,Integrability,message,message,213,"/// Create a message send to super.; ///; /// \param Context The ASTContext in which this expression will be created.; ///; /// \param T The result type of this message.; ///; /// \param VK The value kind of this message. A message returning; /// a l-value or r-value reference will be an l-value or x-value,; /// respectively.; ///; /// \param LBracLoc The location of the open square bracket '['.; ///; /// \param SuperLoc The location of the ""super"" keyword.; ///; /// \param IsInstanceSuper Whether this is an instance ""super""; /// message (otherwise, it's a class ""super"" message).; ///; /// \param Sel The selector used to determine which method gets called.; ///; /// \param Method The Objective-C method against which this message; /// send was type-checked. May be nullptr.; ///; /// \param Args The message send arguments.; ///; /// \param RBracLoc The location of the closing square bracket ']'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:224,Integrability,message,message,224,"/// Create a message send to super.; ///; /// \param Context The ASTContext in which this expression will be created.; ///; /// \param T The result type of this message.; ///; /// \param VK The value kind of this message. A message returning; /// a l-value or r-value reference will be an l-value or x-value,; /// respectively.; ///; /// \param LBracLoc The location of the open square bracket '['.; ///; /// \param SuperLoc The location of the ""super"" keyword.; ///; /// \param IsInstanceSuper Whether this is an instance ""super""; /// message (otherwise, it's a class ""super"" message).; ///; /// \param Sel The selector used to determine which method gets called.; ///; /// \param Method The Objective-C method against which this message; /// send was type-checked. May be nullptr.; ///; /// \param Args The message send arguments.; ///; /// \param RBracLoc The location of the closing square bracket ']'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:536,Integrability,message,message,536,"/// Create a message send to super.; ///; /// \param Context The ASTContext in which this expression will be created.; ///; /// \param T The result type of this message.; ///; /// \param VK The value kind of this message. A message returning; /// a l-value or r-value reference will be an l-value or x-value,; /// respectively.; ///; /// \param LBracLoc The location of the open square bracket '['.; ///; /// \param SuperLoc The location of the ""super"" keyword.; ///; /// \param IsInstanceSuper Whether this is an instance ""super""; /// message (otherwise, it's a class ""super"" message).; ///; /// \param Sel The selector used to determine which method gets called.; ///; /// \param Method The Objective-C method against which this message; /// send was type-checked. May be nullptr.; ///; /// \param Args The message send arguments.; ///; /// \param RBracLoc The location of the closing square bracket ']'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:577,Integrability,message,message,577,"/// Create a message send to super.; ///; /// \param Context The ASTContext in which this expression will be created.; ///; /// \param T The result type of this message.; ///; /// \param VK The value kind of this message. A message returning; /// a l-value or r-value reference will be an l-value or x-value,; /// respectively.; ///; /// \param LBracLoc The location of the open square bracket '['.; ///; /// \param SuperLoc The location of the ""super"" keyword.; ///; /// \param IsInstanceSuper Whether this is an instance ""super""; /// message (otherwise, it's a class ""super"" message).; ///; /// \param Sel The selector used to determine which method gets called.; ///; /// \param Method The Objective-C method against which this message; /// send was type-checked. May be nullptr.; ///; /// \param Args The message send arguments.; ///; /// \param RBracLoc The location of the closing square bracket ']'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:731,Integrability,message,message,731,"/// Create a message send to super.; ///; /// \param Context The ASTContext in which this expression will be created.; ///; /// \param T The result type of this message.; ///; /// \param VK The value kind of this message. A message returning; /// a l-value or r-value reference will be an l-value or x-value,; /// respectively.; ///; /// \param LBracLoc The location of the open square bracket '['.; ///; /// \param SuperLoc The location of the ""super"" keyword.; ///; /// \param IsInstanceSuper Whether this is an instance ""super""; /// message (otherwise, it's a class ""super"" message).; ///; /// \param Sel The selector used to determine which method gets called.; ///; /// \param Method The Objective-C method against which this message; /// send was type-checked. May be nullptr.; ///; /// \param Args The message send arguments.; ///; /// \param RBracLoc The location of the closing square bracket ']'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:809,Integrability,message,message,809,"/// Create a message send to super.; ///; /// \param Context The ASTContext in which this expression will be created.; ///; /// \param T The result type of this message.; ///; /// \param VK The value kind of this message. A message returning; /// a l-value or r-value reference will be an l-value or x-value,; /// respectively.; ///; /// \param LBracLoc The location of the open square bracket '['.; ///; /// \param SuperLoc The location of the ""super"" keyword.; ///; /// \param IsInstanceSuper Whether this is an instance ""super""; /// message (otherwise, it's a class ""super"" message).; ///; /// \param Sel The selector used to determine which method gets called.; ///; /// \param Method The Objective-C method against which this message; /// send was type-checked. May be nullptr.; ///; /// \param Args The message send arguments.; ///; /// \param RBracLoc The location of the closing square bracket ']'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:19,Integrability,message,message,19,"/// Create a class message send.; ///; /// \param Context The ASTContext in which this expression will be created.; ///; /// \param T The result type of this message.; ///; /// \param VK The value kind of this message. A message returning; /// a l-value or r-value reference will be an l-value or x-value,; /// respectively.; ///; /// \param LBracLoc The location of the open square bracket '['.; ///; /// \param Receiver The type of the receiver, including; /// source-location information.; ///; /// \param Sel The selector used to determine which method gets called.; ///; /// \param Method The Objective-C method against which this message; /// send was type-checked. May be nullptr.; ///; /// \param Args The message send arguments.; ///; /// \param RBracLoc The location of the closing square bracket ']'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:158,Integrability,message,message,158,"/// Create a class message send.; ///; /// \param Context The ASTContext in which this expression will be created.; ///; /// \param T The result type of this message.; ///; /// \param VK The value kind of this message. A message returning; /// a l-value or r-value reference will be an l-value or x-value,; /// respectively.; ///; /// \param LBracLoc The location of the open square bracket '['.; ///; /// \param Receiver The type of the receiver, including; /// source-location information.; ///; /// \param Sel The selector used to determine which method gets called.; ///; /// \param Method The Objective-C method against which this message; /// send was type-checked. May be nullptr.; ///; /// \param Args The message send arguments.; ///; /// \param RBracLoc The location of the closing square bracket ']'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:210,Integrability,message,message,210,"/// Create a class message send.; ///; /// \param Context The ASTContext in which this expression will be created.; ///; /// \param T The result type of this message.; ///; /// \param VK The value kind of this message. A message returning; /// a l-value or r-value reference will be an l-value or x-value,; /// respectively.; ///; /// \param LBracLoc The location of the open square bracket '['.; ///; /// \param Receiver The type of the receiver, including; /// source-location information.; ///; /// \param Sel The selector used to determine which method gets called.; ///; /// \param Method The Objective-C method against which this message; /// send was type-checked. May be nullptr.; ///; /// \param Args The message send arguments.; ///; /// \param RBracLoc The location of the closing square bracket ']'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:221,Integrability,message,message,221,"/// Create a class message send.; ///; /// \param Context The ASTContext in which this expression will be created.; ///; /// \param T The result type of this message.; ///; /// \param VK The value kind of this message. A message returning; /// a l-value or r-value reference will be an l-value or x-value,; /// respectively.; ///; /// \param LBracLoc The location of the open square bracket '['.; ///; /// \param Receiver The type of the receiver, including; /// source-location information.; ///; /// \param Sel The selector used to determine which method gets called.; ///; /// \param Method The Objective-C method against which this message; /// send was type-checked. May be nullptr.; ///; /// \param Args The message send arguments.; ///; /// \param RBracLoc The location of the closing square bracket ']'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:636,Integrability,message,message,636,"/// Create a class message send.; ///; /// \param Context The ASTContext in which this expression will be created.; ///; /// \param T The result type of this message.; ///; /// \param VK The value kind of this message. A message returning; /// a l-value or r-value reference will be an l-value or x-value,; /// respectively.; ///; /// \param LBracLoc The location of the open square bracket '['.; ///; /// \param Receiver The type of the receiver, including; /// source-location information.; ///; /// \param Sel The selector used to determine which method gets called.; ///; /// \param Method The Objective-C method against which this message; /// send was type-checked. May be nullptr.; ///; /// \param Args The message send arguments.; ///; /// \param RBracLoc The location of the closing square bracket ']'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:714,Integrability,message,message,714,"/// Create a class message send.; ///; /// \param Context The ASTContext in which this expression will be created.; ///; /// \param T The result type of this message.; ///; /// \param VK The value kind of this message. A message returning; /// a l-value or r-value reference will be an l-value or x-value,; /// respectively.; ///; /// \param LBracLoc The location of the open square bracket '['.; ///; /// \param Receiver The type of the receiver, including; /// source-location information.; ///; /// \param Sel The selector used to determine which method gets called.; ///; /// \param Method The Objective-C method against which this message; /// send was type-checked. May be nullptr.; ///; /// \param Args The message send arguments.; ///; /// \param RBracLoc The location of the closing square bracket ']'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:23,Integrability,message,message,23,"/// Create an instance message send.; ///; /// \param Context The ASTContext in which this expression will be created.; ///; /// \param T The result type of this message.; ///; /// \param VK The value kind of this message. A message returning; /// a l-value or r-value reference will be an l-value or x-value,; /// respectively.; ///; /// \param LBracLoc The location of the open square bracket '['.; ///; /// \param Receiver The expression used to produce the object that; /// will receive this message.; ///; /// \param Sel The selector used to determine which method gets called.; ///; /// \param Method The Objective-C method against which this message; /// send was type-checked. May be nullptr.; ///; /// \param Args The message send arguments.; ///; /// \param RBracLoc The location of the closing square bracket ']'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:162,Integrability,message,message,162,"/// Create an instance message send.; ///; /// \param Context The ASTContext in which this expression will be created.; ///; /// \param T The result type of this message.; ///; /// \param VK The value kind of this message. A message returning; /// a l-value or r-value reference will be an l-value or x-value,; /// respectively.; ///; /// \param LBracLoc The location of the open square bracket '['.; ///; /// \param Receiver The expression used to produce the object that; /// will receive this message.; ///; /// \param Sel The selector used to determine which method gets called.; ///; /// \param Method The Objective-C method against which this message; /// send was type-checked. May be nullptr.; ///; /// \param Args The message send arguments.; ///; /// \param RBracLoc The location of the closing square bracket ']'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:214,Integrability,message,message,214,"/// Create an instance message send.; ///; /// \param Context The ASTContext in which this expression will be created.; ///; /// \param T The result type of this message.; ///; /// \param VK The value kind of this message. A message returning; /// a l-value or r-value reference will be an l-value or x-value,; /// respectively.; ///; /// \param LBracLoc The location of the open square bracket '['.; ///; /// \param Receiver The expression used to produce the object that; /// will receive this message.; ///; /// \param Sel The selector used to determine which method gets called.; ///; /// \param Method The Objective-C method against which this message; /// send was type-checked. May be nullptr.; ///; /// \param Args The message send arguments.; ///; /// \param RBracLoc The location of the closing square bracket ']'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:225,Integrability,message,message,225,"/// Create an instance message send.; ///; /// \param Context The ASTContext in which this expression will be created.; ///; /// \param T The result type of this message.; ///; /// \param VK The value kind of this message. A message returning; /// a l-value or r-value reference will be an l-value or x-value,; /// respectively.; ///; /// \param LBracLoc The location of the open square bracket '['.; ///; /// \param Receiver The expression used to produce the object that; /// will receive this message.; ///; /// \param Sel The selector used to determine which method gets called.; ///; /// \param Method The Objective-C method against which this message; /// send was type-checked. May be nullptr.; ///; /// \param Args The message send arguments.; ///; /// \param RBracLoc The location of the closing square bracket ']'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:496,Integrability,message,message,496,"/// Create an instance message send.; ///; /// \param Context The ASTContext in which this expression will be created.; ///; /// \param T The result type of this message.; ///; /// \param VK The value kind of this message. A message returning; /// a l-value or r-value reference will be an l-value or x-value,; /// respectively.; ///; /// \param LBracLoc The location of the open square bracket '['.; ///; /// \param Receiver The expression used to produce the object that; /// will receive this message.; ///; /// \param Sel The selector used to determine which method gets called.; ///; /// \param Method The Objective-C method against which this message; /// send was type-checked. May be nullptr.; ///; /// \param Args The message send arguments.; ///; /// \param RBracLoc The location of the closing square bracket ']'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:649,Integrability,message,message,649,"/// Create an instance message send.; ///; /// \param Context The ASTContext in which this expression will be created.; ///; /// \param T The result type of this message.; ///; /// \param VK The value kind of this message. A message returning; /// a l-value or r-value reference will be an l-value or x-value,; /// respectively.; ///; /// \param LBracLoc The location of the open square bracket '['.; ///; /// \param Receiver The expression used to produce the object that; /// will receive this message.; ///; /// \param Sel The selector used to determine which method gets called.; ///; /// \param Method The Objective-C method against which this message; /// send was type-checked. May be nullptr.; ///; /// \param Args The message send arguments.; ///; /// \param RBracLoc The location of the closing square bracket ']'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:727,Integrability,message,message,727,"/// Create an instance message send.; ///; /// \param Context The ASTContext in which this expression will be created.; ///; /// \param T The result type of this message.; ///; /// \param VK The value kind of this message. A message returning; /// a l-value or r-value reference will be an l-value or x-value,; /// respectively.; ///; /// \param LBracLoc The location of the open square bracket '['.; ///; /// \param Receiver The expression used to produce the object that; /// will receive this message.; ///; /// \param Sel The selector used to determine which method gets called.; ///; /// \param Method The Objective-C method against which this message; /// send was type-checked. May be nullptr.; ///; /// \param Args The message send arguments.; ///; /// \param RBracLoc The location of the closing square bracket ']'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:32,Integrability,message,message,32,"/// Create an empty Objective-C message expression, to be; /// filled in by subsequent calls.; ///; /// \param Context The context in which the message send will be created.; ///; /// \param NumArgs The number of message arguments, not including; /// the receiver.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:144,Integrability,message,message,144,"/// Create an empty Objective-C message expression, to be; /// filled in by subsequent calls.; ///; /// \param Context The context in which the message send will be created.; ///; /// \param NumArgs The number of message arguments, not including; /// the receiver.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:213,Integrability,message,message,213,"/// Create an empty Objective-C message expression, to be; /// filled in by subsequent calls.; ///; /// \param Context The context in which the message send will be created.; ///; /// \param NumArgs The number of message arguments, not including; /// the receiver.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:26,Integrability,message,message,26,"/// Indicates whether the message send was implicitly; /// generated by the implementation. If false, it was written explicitly; /// in the source code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:45,Integrability,message,message,45,/// Determine the kind of receiver that this message is being; /// sent to.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:35,Integrability,message,message,35,/// \return the return type of the message being sent.; /// This is not always the type of the message expression itself because; /// of references (the expression would not have a reference type).; /// It is also not always the declared return type of the method because; /// of `instancetype` (in that case it's an expression type).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:95,Integrability,message,message,95,/// \return the return type of the message being sent.; /// This is not always the type of the message expression itself because; /// of references (the expression would not have a reference type).; /// It is also not always the declared return type of the method because; /// of `instancetype` (in that case it's an expression type).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:42,Integrability,message,message,42,/// Determine whether this is an instance message to either a; /// computed object or to super.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:39,Integrability,message,message,39,/// Determine whether this is an class message to either a; /// specified class or to super.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:61,Integrability,message,message,61,"/// Returns the object expression (receiver) for an instance message,; /// or null for a message that is not an instance message.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:89,Integrability,message,message,89,"/// Returns the object expression (receiver) for an instance message,; /// or null for a message that is not an instance message.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:121,Integrability,message,message,121,"/// Returns the object expression (receiver) for an instance message,; /// or null for a message that is not an instance message.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:14,Integrability,message,message,14,/// Turn this message send into an instance message that; /// computes the receiver object with the given expression.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:44,Integrability,message,message,44,/// Turn this message send into an instance message that; /// computes the receiver object with the given expression.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:32,Integrability,message,message,32,"/// Returns the type of a class message send, or NULL if the; /// message is not a class message.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:66,Integrability,message,message,66,"/// Returns the type of a class message send, or NULL if the; /// message is not a class message.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:89,Integrability,message,message,89,"/// Returns the type of a class message send, or NULL if the; /// message is not a class message.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:49,Integrability,message,message,49,"/// Returns a type-source information of a class message; /// send, or nullptr if the message is not a class message.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:86,Integrability,message,message,86,"/// Returns a type-source information of a class message; /// send, or nullptr if the message is not a class message.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:109,Integrability,message,message,109,"/// Returns a type-source information of a class message; /// send, or nullptr if the message is not a class message.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:78,Integrability,message,message,78,"/// Retrieve the location of the 'super' keyword for a class; /// or instance message to 'super', otherwise an invalid source location.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:45,Integrability,message,message,45,"/// Retrieve the receiver type to which this message is being directed.; ///; /// This routine cross-cuts all of the different kinds of message; /// sends to determine what the underlying (statically known) type; /// of the receiver will be; use \c getReceiverKind() to determine; /// whether the message is a class or an instance method, whether it; /// is a send to super or not, etc.; ///; /// \returns The type of the receiver.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:87,Integrability,rout,routine,87,"/// Retrieve the receiver type to which this message is being directed.; ///; /// This routine cross-cuts all of the different kinds of message; /// sends to determine what the underlying (statically known) type; /// of the receiver will be; use \c getReceiverKind() to determine; /// whether the message is a class or an instance method, whether it; /// is a send to super or not, etc.; ///; /// \returns The type of the receiver.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:136,Integrability,message,message,136,"/// Retrieve the receiver type to which this message is being directed.; ///; /// This routine cross-cuts all of the different kinds of message; /// sends to determine what the underlying (statically known) type; /// of the receiver will be; use \c getReceiverKind() to determine; /// whether the message is a class or an instance method, whether it; /// is a send to super or not, etc.; ///; /// \returns The type of the receiver.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:297,Integrability,message,message,297,"/// Retrieve the receiver type to which this message is being directed.; ///; /// This routine cross-cuts all of the different kinds of message; /// sends to determine what the underlying (statically known) type; /// of the receiver will be; use \c getReceiverKind() to determine; /// whether the message is a class or an instance method, whether it; /// is a send to super or not, etc.; ///; /// \returns The type of the receiver.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:29,Integrability,interface,interface,29,"/// Retrieve the Objective-C interface to which this message; /// is being directed, if known.; ///; /// This routine cross-cuts all of the different kinds of message; /// sends to determine what the underlying (statically known) type; /// of the receiver will be; use \c getReceiverKind() to determine; /// whether the message is a class or an instance method, whether it; /// is a send to super or not, etc.; ///; /// \returns The Objective-C interface if known, otherwise nullptr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:53,Integrability,message,message,53,"/// Retrieve the Objective-C interface to which this message; /// is being directed, if known.; ///; /// This routine cross-cuts all of the different kinds of message; /// sends to determine what the underlying (statically known) type; /// of the receiver will be; use \c getReceiverKind() to determine; /// whether the message is a class or an instance method, whether it; /// is a send to super or not, etc.; ///; /// \returns The Objective-C interface if known, otherwise nullptr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:110,Integrability,rout,routine,110,"/// Retrieve the Objective-C interface to which this message; /// is being directed, if known.; ///; /// This routine cross-cuts all of the different kinds of message; /// sends to determine what the underlying (statically known) type; /// of the receiver will be; use \c getReceiverKind() to determine; /// whether the message is a class or an instance method, whether it; /// is a send to super or not, etc.; ///; /// \returns The Objective-C interface if known, otherwise nullptr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:159,Integrability,message,message,159,"/// Retrieve the Objective-C interface to which this message; /// is being directed, if known.; ///; /// This routine cross-cuts all of the different kinds of message; /// sends to determine what the underlying (statically known) type; /// of the receiver will be; use \c getReceiverKind() to determine; /// whether the message is a class or an instance method, whether it; /// is a send to super or not, etc.; ///; /// \returns The Objective-C interface if known, otherwise nullptr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:320,Integrability,message,message,320,"/// Retrieve the Objective-C interface to which this message; /// is being directed, if known.; ///; /// This routine cross-cuts all of the different kinds of message; /// sends to determine what the underlying (statically known) type; /// of the receiver will be; use \c getReceiverKind() to determine; /// whether the message is a class or an instance method, whether it; /// is a send to super or not, etc.; ///; /// \returns The Objective-C interface if known, otherwise nullptr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:445,Integrability,interface,interface,445,"/// Retrieve the Objective-C interface to which this message; /// is being directed, if known.; ///; /// This routine cross-cuts all of the different kinds of message; /// sends to determine what the underlying (statically known) type; /// of the receiver will be; use \c getReceiverKind() to determine; /// whether the message is a class or an instance method, whether it; /// is a send to super or not, etc.; ///; /// \returns The Objective-C interface if known, otherwise nullptr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:129,Integrability,message,message,129,/// Retrieve the type referred to by 'super'.; ///; /// The returned type will either be an ObjCInterfaceType (for an; /// class message to super) or an ObjCObjectPointerType that refers; /// to a class (for an instance message to super);,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:220,Integrability,message,message,220,/// Retrieve the type referred to by 'super'.; ///; /// The returned type will either be an ObjCInterfaceType (for an; /// class message to super) or an ObjCObjectPointerType that refers; /// to a class (for an instance message to super);,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:50,Integrability,message,message,50,"/// Return the number of actual arguments in this message,; /// not counting the receiver.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:35,Integrability,message,message,35,"/// Retrieve the arguments to this message, not including the; /// receiver.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:46,Integrability,message,message,46,"/// isDelegateInitCall - Answers whether this message send has been; /// tagged as a ""delegate init call"", i.e. a call to a method in the; /// -init family on self from within an -init method implementation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:254,Modifiability,variab,variable,254,"/// ObjCIndirectCopyRestoreExpr - Represents the passing of a function; /// argument by indirect copy-restore in ARC. This is used to support; /// passing indirect arguments with the wrong lifetime, e.g. when; /// passing the address of a __strong local variable to an 'out'; /// parameter. This expression kind is only valid in an ""argument""; /// position to some sort of call expression.; ///; /// The parameter must have type 'pointer to T', and the argument must; /// have type 'pointer to U', where T and U agree except possibly in; /// qualification. If the argument value is null, then a null pointer; /// is passed; otherwise it points to an object A, and:; /// 1. A temporary object B of type T is initialized, either by; /// zero-initialization (used when initializing an 'out' parameter); /// or copy-initialization (used when initializing an 'inout'; /// parameter).; /// 2. The address of the temporary is passed to the function.; /// 3. If the call completes normally, A is move-assigned from B.; /// 4. Finally, A is destroyed immediately.; ///; /// Currently 'T' must be a retainable object lifetime and must be; /// __autoreleasing; this qualifier is ignored when initializing; /// the value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:20,Integrability,bridg,bridged,20,"/// An Objective-C ""bridged"" cast expression, which casts between; /// Objective-C pointers and C pointers, transferring ownership in the process.; ///; /// \code; /// NSString *str = (__bridge_transfer NSString *)CFCreateString();; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:35,Integrability,bridg,bridged,35,/// Construct an empty Objective-C bridged cast.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:28,Integrability,bridg,bridge,28,/// Determine which kind of bridge is being performed via this cast.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:44,Performance,perform,performed,44,/// Determine which kind of bridge is being performed via this cast.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:25,Integrability,bridg,bridge,25,/// Retrieve the kind of bridge being performed as a string.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:38,Performance,perform,performed,38,/// Retrieve the kind of bridge being performed as a string.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:24,Integrability,bridg,bridge,24,/// The location of the bridge keyword.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:14,Availability,avail,availability,14,"/// A runtime availability query.; ///; /// There are 2 ways to spell this node:; /// \code; /// @available(macos 10.10, ios 8, *); // Objective-C; /// __builtin_available(macos 10.10, ios 8, *); // C, C++, and Objective-C; /// \endcode; ///; /// Note that we only need to keep track of one \c VersionTuple here, which is; /// the one that corresponds to the current deployment target. This is meant to; /// be used in the condition of an \c if, but it is also usable as top level; /// expressions.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:98,Availability,avail,available,98,"/// A runtime availability query.; ///; /// There are 2 ways to spell this node:; /// \code; /// @available(macos 10.10, ios 8, *); // Objective-C; /// __builtin_available(macos 10.10, ios 8, *); // C, C++, and Objective-C; /// \endcode; ///; /// Note that we only need to keep track of one \c VersionTuple here, which is; /// the one that corresponds to the current deployment target. This is meant to; /// be used in the condition of an \c if, but it is also usable as top level; /// expressions.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:367,Deployability,deploy,deployment,367,"/// A runtime availability query.; ///; /// There are 2 ways to spell this node:; /// \code; /// @available(macos 10.10, ios 8, *); // Objective-C; /// __builtin_available(macos 10.10, ios 8, *); // C, C++, and Objective-C; /// \endcode; ///; /// Note that we only need to keep track of one \c VersionTuple here, which is; /// the one that corresponds to the current deployment target. This is meant to; /// be used in the condition of an \c if, but it is also usable as top level; /// expressions.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h:461,Usability,usab,usable,461,"/// A runtime availability query.; ///; /// There are 2 ways to spell this node:; /// \code; /// @available(macos 10.10, ios 8, *); // Objective-C; /// __builtin_available(macos 10.10, ios 8, *); // C, C++, and Objective-C; /// \endcode; ///; /// Note that we only need to keep track of one \c VersionTuple here, which is; /// the one that corresponds to the current deployment target. This is meant to; /// be used in the condition of an \c if, but it is also usable as top level; /// expressions.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprOpenMP.h:410,Integrability,interface,interface,410,"//===--- ExprOpenMP.h - Classes for representing expressions ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the Expr interface and subclasses.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprOpenMP.h:134,Modifiability,extend,extended,134,"/// OpenMP 5.0 [2.1.5, Array Sections].; /// To specify an array section in an OpenMP construct, array subscript; /// expressions are extended with the following syntax:; /// \code; /// [ lower-bound : length : stride ]; /// [ lower-bound : length : ]; /// [ lower-bound : length ]; /// [ lower-bound : : stride ]; /// [ lower-bound : : ]; /// [ lower-bound : ]; /// [ : length : stride ]; /// [ : length : ]; /// [ : length ]; /// [ : : stride ]; /// [ : : ]; /// [ : ]; /// \endcode; /// The array section must be a subset of the original array.; /// Array sections are allowed on multidimensional arrays. Base language array; /// subscript expressions can be used to specify length-one dimensions of; /// multidimensional array sections.; /// Each of the lower-bound, length, and stride expressions if specified must be; /// an integral type expressions of the base language. When evaluated; /// they represent a set of integer values as follows:; /// \code; /// { lower-bound, lower-bound + stride, lower-bound + 2 * stride,... ,; /// lower-bound + ((length - 1) * stride) }; /// \endcode; /// The lower-bound and length must evaluate to non-negative integers.; /// The stride must evaluate to a positive integer.; /// When the size of the array dimension is not known, the length must be; /// specified explicitly.; /// When the stride is absent it defaults to 1.; /// When the length is absent it defaults to ⌈(size − lower-bound)/stride⌉,; /// where size is the size of the array dimension. When the lower-bound is; /// absent it defaults to 0.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprOpenMP.h:4,Deployability,Update,Update,4,"/// Update expression for the originally specified iteration variable,; /// calculated as VD = Begin + CounterVD * Step;",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprOpenMP.h:61,Modifiability,variab,variable,61,"/// Update expression for the originally specified iteration variable,; /// calculated as VD = Begin + CounterVD * Step;",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprOpenMP.h:4,Deployability,Update,Updater,4,/// Updater for the internal counter: ++CounterVD;,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExprOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExprOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTMerger.h:52,Integrability,Interface,Interface,52,"//===--- ExternalASTMerger.h - Merging External AST Interface ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares the ExternalASTMerger, which vends a combination of ASTs; // from several different ASTContext/FileManager pairs; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExternalASTMerger.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTMerger.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTMerger.h:519,Usability,simpl,simple,519,"/// ExternalASTSource implementation that merges information from several; /// ASTContexts.; ///; /// ExternalASTMerger maintains a vector of ASTImporters that it uses to import; /// (potentially incomplete) Decls and DeclContexts from the source ASTContexts; /// in response to ExternalASTSource API calls.; ///; /// When lookup occurs in the resulting imported DeclContexts, the original; /// DeclContexts need to be queried. Roughly, there are three cases here:; ///; /// - The DeclContext of origin can be found by simple name lookup. In this; /// case, no additional state is required.; ///; /// - The DeclContext of origin is different from what would be found by name; /// lookup. In this case, Origins contains an entry overriding lookup and; /// specifying the correct pair of DeclContext/ASTContext.; ///; /// - The DeclContext of origin was determined by another ExternalASTMerger.; /// (This is possible when the source ASTContext for one of the Importers has; /// its own ExternalASTMerger). The origin must be properly forwarded in this; /// case.; ///; /// ExternalASTMerger's job is to maintain the data structures necessary to; /// allow this. The data structures themselves can be extracted (read-only) and; /// copied for re-use.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExternalASTMerger.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTMerger.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTMerger.h:8,Deployability,install,installed,8,/// The installed log stream.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExternalASTMerger.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTMerger.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTMerger.h:18,Testability,log,log,18,/// The installed log stream.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExternalASTMerger.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTMerger.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTMerger.h:21,Testability,log,log,21,/// Sets the current log stream.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExternalASTMerger.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTMerger.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTMerger.h:4,Performance,Perform,Performs,4,/// Performs an action for every DeclContext that is identified as; /// corresponding (either by forced origin or by name lookup) to DC.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExternalASTMerger.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTMerger.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTMerger.h:49,Deployability,install,installed,49,/// Log something if there is a logging callback installed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExternalASTMerger.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTMerger.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTMerger.h:4,Testability,Log,Log,4,/// Log something if there is a logging callback installed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExternalASTMerger.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTMerger.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTMerger.h:32,Testability,log,logging,32,/// Log something if there is a logging callback installed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExternalASTMerger.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTMerger.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTMerger.h:16,Testability,log,log,16,/// True if the log stream is not llvm::nulls();,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExternalASTMerger.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTMerger.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h:51,Integrability,Interface,Interface,51,"//===- ExternalASTSource.h - Abstract External AST Interface ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the ExternalASTSource interface, which enables; // construction of AST nodes from some external source.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h:423,Integrability,interface,interface,423,"//===- ExternalASTSource.h - Abstract External AST Interface ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the ExternalASTSource interface, which enables; // construction of AST nodes from some external source.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h:13,Integrability,interface,interface,13,"/// Abstract interface for external sources of AST nodes.; ///; /// External AST sources provide AST nodes constructed from some; /// external source, such as a precompiled header. External AST; /// sources can resolve types and declarations from abstract IDs into; /// actual type and declaration nodes, and read parts of declaration; /// contexts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h:19,Safety,safe,safely,19,/// RAII class for safely pairing a StartedDeserializing call; /// with FinishedDeserializing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h:115,Modifiability,extend,extends,115,/// Get the current generation of this AST source. This number; /// is incremented each time the AST source lazily extends an existing; /// entity.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h:4,Deployability,Update,Update,4,/// Update an out-of-date identifier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h:114,Integrability,rout,routine,114,"/// Gives the external AST source an opportunity to complete an; /// incomplete Objective-C class.; ///; /// This routine will only be invoked if the ""externally completed"" bit is; /// set on the ObjCInterfaceDecl via the function; /// \c ObjCInterfaceDecl::setExternallyCompleted().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h:4,Performance,Load,Loads,4,/// Loads comment ranges.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h:55,Integrability,rout,routine,55,"/// Perform layout on the given record.; ///; /// This routine allows the external AST source to provide an specific; /// layout for a record, overriding the layout that would normally be; /// constructed. It is intended for clients who receive specific layout; /// details rather than source code (such as LLDB). The client is expected; /// to fill in the field offsets, base offsets, virtual base offsets, and; /// complete object size.; ///; /// \param Record The record whose layout is being requested.; ///; /// \param Size The final size of the record, in bits.; ///; /// \param Alignment The final alignment of the record, in bits.; ///; /// \param FieldOffsets The offset of each of the fields within the record,; /// expressed in bits. All of the fields must be provided with offsets.; ///; /// \param BaseOffsets The offset of each of the direct, non-virtual base; /// classes. If any bases are not given offsets, the bases will be laid; /// out according to the ABI.; ///; /// \param VirtualBaseOffsets The offset of each of the virtual base classes; /// (either direct or not). If any bases are not given offsets, the bases will be laid; /// out according to the ABI.; ///; /// \returns true if the record layout was provided, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h:4,Performance,Perform,Perform,4,"/// Perform layout on the given record.; ///; /// This routine allows the external AST source to provide an specific; /// layout for a record, overriding the layout that would normally be; /// constructed. It is intended for clients who receive specific layout; /// details rather than source code (such as LLDB). The client is expected; /// to fill in the field offsets, base offsets, virtual base offsets, and; /// complete object size.; ///; /// \param Record The record whose layout is being requested.; ///; /// \param Size The final size of the record, in bits.; ///; /// \param Alignment The final alignment of the record, in bits.; ///; /// \param FieldOffsets The offset of each of the fields within the record,; /// expressed in bits. All of the fields must be provided with offsets.; ///; /// \param BaseOffsets The offset of each of the direct, non-virtual base; /// classes. If any bases are not given offsets, the bases will be laid; /// out according to the ABI.; ///; /// \param VirtualBaseOffsets The offset of each of the virtual base classes; /// (either direct or not). If any bases are not given offsets, the bases will be laid; /// out according to the ABI.; ///; /// \returns true if the record layout was provided, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h:95,Performance,perform,performance,95,//===--------------------------------------------------------------------===//; // Queries for performance analysis.; //===--------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h:65,Availability,down,down,65,"/// Return the amount of memory used by memory buffers, breaking down; /// by heap-backed versus mmap'ed memory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h:147,Usability,clear,clear,147,"/// Either a pointer to an AST node or the offset within the; /// external AST source where the AST node can be found.; ///; /// If the low bit is clear, a pointer to the AST node. If the low; /// bit is set, the upper 63 bits are the offset.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h:6,Performance,cache,cache,6,"/// A cache of the value of this pointer, in the most recent generation in; /// which we queried it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h:31,Usability,simpl,simply,31,// Our value is represented as simply T if there is no external AST source.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h:45,Deployability,update,updated,45,/// Create a pointer that is not potentially updated by later generations of; /// the external AST source.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h:62,Deployability,update,updates,62,/// Forcibly set this pointer (which must be lazy) as needing updates.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h:24,Performance,load,loaded,24,"/// Represents a lazily-loaded vector of data.; ///; /// The lazily-loaded vector of data contains data that is partially loaded; /// from an external source and partially added by local translation. The; /// items loaded from the external source are loaded lazily, when needed for; /// iteration over the complete vector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h:68,Performance,load,loaded,68,"/// Represents a lazily-loaded vector of data.; ///; /// The lazily-loaded vector of data contains data that is partially loaded; /// from an external source and partially added by local translation. The; /// items loaded from the external source are loaded lazily, when needed for; /// iteration over the complete vector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h:122,Performance,load,loaded,122,"/// Represents a lazily-loaded vector of data.; ///; /// The lazily-loaded vector of data contains data that is partially loaded; /// from an external source and partially added by local translation. The; /// items loaded from the external source are loaded lazily, when needed for; /// iteration over the complete vector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h:215,Performance,load,loaded,215,"/// Represents a lazily-loaded vector of data.; ///; /// The lazily-loaded vector of data contains data that is partially loaded; /// from an external source and partially added by local translation. The; /// items loaded from the external source are loaded lazily, when needed for; /// iteration over the complete vector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h:251,Performance,load,loaded,251,"/// Represents a lazily-loaded vector of data.; ///; /// The lazily-loaded vector of data contains data that is partially loaded; /// from an external source and partially added by local translation. The; /// items loaded from the external source are loaded lazily, when needed for; /// iteration over the complete vector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h:686,Energy Efficiency,efficient,efficient,686,"/// Iteration over the elements in the vector.; ///; /// In a complete iteration, the iterator walks the range [-M, N),; /// where negative values are used to indicate elements; /// loaded from the external source while non-negative values are used to; /// indicate elements added via \c push_back().; /// However, to provide iteration in source order (for, e.g., chained; /// precompiled headers), dereferencing the iterator flips the negative; /// values (corresponding to loaded entities), so that position -M; /// corresponds to element 0 in the loaded entities vector, position -M+1; /// corresponds to element 1 in the loaded entities vector, etc. This; /// gives us a reasonably efficient, source-order walk.; ///; /// We define this as a wrapping iterator around an int. The; /// iterator_adaptor_base class forwards the iterator methods to basic integer; /// arithmetic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h:746,Integrability,wrap,wrapping,746,"/// Iteration over the elements in the vector.; ///; /// In a complete iteration, the iterator walks the range [-M, N),; /// where negative values are used to indicate elements; /// loaded from the external source while non-negative values are used to; /// indicate elements added via \c push_back().; /// However, to provide iteration in source order (for, e.g., chained; /// precompiled headers), dereferencing the iterator flips the negative; /// values (corresponding to loaded entities), so that position -M; /// corresponds to element 0 in the loaded entities vector, position -M+1; /// corresponds to element 1 in the loaded entities vector, etc. This; /// gives us a reasonably efficient, source-order walk.; ///; /// We define this as a wrapping iterator around an int. The; /// iterator_adaptor_base class forwards the iterator methods to basic integer; /// arithmetic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h:182,Performance,load,loaded,182,"/// Iteration over the elements in the vector.; ///; /// In a complete iteration, the iterator walks the range [-M, N),; /// where negative values are used to indicate elements; /// loaded from the external source while non-negative values are used to; /// indicate elements added via \c push_back().; /// However, to provide iteration in source order (for, e.g., chained; /// precompiled headers), dereferencing the iterator flips the negative; /// values (corresponding to loaded entities), so that position -M; /// corresponds to element 0 in the loaded entities vector, position -M+1; /// corresponds to element 1 in the loaded entities vector, etc. This; /// gives us a reasonably efficient, source-order walk.; ///; /// We define this as a wrapping iterator around an int. The; /// iterator_adaptor_base class forwards the iterator methods to basic integer; /// arithmetic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h:475,Performance,load,loaded,475,"/// Iteration over the elements in the vector.; ///; /// In a complete iteration, the iterator walks the range [-M, N),; /// where negative values are used to indicate elements; /// loaded from the external source while non-negative values are used to; /// indicate elements added via \c push_back().; /// However, to provide iteration in source order (for, e.g., chained; /// precompiled headers), dereferencing the iterator flips the negative; /// values (corresponding to loaded entities), so that position -M; /// corresponds to element 0 in the loaded entities vector, position -M+1; /// corresponds to element 1 in the loaded entities vector, etc. This; /// gives us a reasonably efficient, source-order walk.; ///; /// We define this as a wrapping iterator around an int. The; /// iterator_adaptor_base class forwards the iterator methods to basic integer; /// arithmetic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h:550,Performance,load,loaded,550,"/// Iteration over the elements in the vector.; ///; /// In a complete iteration, the iterator walks the range [-M, N),; /// where negative values are used to indicate elements; /// loaded from the external source while non-negative values are used to; /// indicate elements added via \c push_back().; /// However, to provide iteration in source order (for, e.g., chained; /// precompiled headers), dereferencing the iterator flips the negative; /// values (corresponding to loaded entities), so that position -M; /// corresponds to element 0 in the loaded entities vector, position -M+1; /// corresponds to element 1 in the loaded entities vector, etc. This; /// gives us a reasonably efficient, source-order walk.; ///; /// We define this as a wrapping iterator around an int. The; /// iterator_adaptor_base class forwards the iterator methods to basic integer; /// arithmetic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h:625,Performance,load,loaded,625,"/// Iteration over the elements in the vector.; ///; /// In a complete iteration, the iterator walks the range [-M, N),; /// where negative values are used to indicate elements; /// loaded from the external source while non-negative values are used to; /// indicate elements added via \c push_back().; /// However, to provide iteration in source order (for, e.g., chained; /// precompiled headers), dereferencing the iterator flips the negative; /// values (corresponding to loaded entities), so that position -M; /// corresponds to element 0 in the loaded entities vector, position -M+1; /// corresponds to element 1 in the loaded entities vector, etc. This; /// gives us a reasonably efficient, source-order walk.; ///; /// We define this as a wrapping iterator around an int. The; /// iterator_adaptor_base class forwards the iterator methods to basic integer; /// arithmetic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ExternalASTSource.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/FormatString.h:103,Availability,error,error,103,"/// The conversion specifier and the argument type are compatible but still; /// seems likely to be an error. For instanace, ""%hhd"" and short.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/FormatString.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/FormatString.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/FormatString.h:104,Availability,error,error,104,"/// The conversion specifier and the argument type are compatible, but still; /// seems likely to be an error. For instance, ""%hd"" and _Bool.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/FormatString.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/FormatString.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/FormatString.h:3,Security,Validat,Validation,3,// Validation methods - to check if any element results in undefined behavior,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/FormatString.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/FormatString.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/FormatString.h:11,Availability,mask,mask,11,/// Handle mask types whose sizes are not between one and eight bytes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/FormatString.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/FormatString.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/GlobalDecl.h:422,Modifiability,variab,variable,422,"//===- GlobalDecl.h - Global declaration holder -----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // A GlobalDecl can hold either a regular variable/function or a C++ ctor/dtor; // together with its type.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/GlobalDecl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/GlobalDecl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/GlobalDecl.h:407,Deployability,update,updated,407,"/// GlobalDecl - represents a global declaration. This can either be a; /// CXXConstructorDecl and the constructor type (Base, Complete).; /// a CXXDestructorDecl and the destructor type (Base, Complete),; /// a FunctionDecl and the kernel reference type (Kernel, Stub), or; /// a VarDecl, a FunctionDecl or a BlockDecl.; ///; /// When a new type of GlobalDecl is added, the following places should; /// be updated to convert a Decl* to a GlobalDecl:; /// PredefinedExpr::ComputeName() in lib/AST/Expr.cpp.; /// getParentOfLocalEntity() in lib/AST/ItaniumMangle.cpp; /// ASTNameGenerator::Implementation::writeFuncOrVarName in lib/AST/Mangle.cpp; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/GlobalDecl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/GlobalDecl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/GlobalDecl.h:264,Testability,Stub,Stub,264,"/// GlobalDecl - represents a global declaration. This can either be a; /// CXXConstructorDecl and the constructor type (Base, Complete).; /// a CXXDestructorDecl and the destructor type (Base, Complete),; /// a FunctionDecl and the kernel reference type (Kernel, Stub), or; /// a VarDecl, a FunctionDecl or a BlockDecl.; ///; /// When a new type of GlobalDecl is added, the following places should; /// be updated to convert a Decl* to a GlobalDecl:; /// PredefinedExpr::ComputeName() in lib/AST/Expr.cpp.; /// getParentOfLocalEntity() in lib/AST/ItaniumMangle.cpp; /// ASTNameGenerator::Implementation::writeFuncOrVarName in lib/AST/Mangle.cpp; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/GlobalDecl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/GlobalDecl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/JSONNodeDumper.h:121,Deployability,release,releases,121,"// Dumps AST nodes in JSON format. There is no implied stability for the; // content or format of the dump between major releases of Clang, other than it; // being valid JSON output. Further, there is no requirement that the; // information dumped is a complete representation of the AST, only that the; // information presented is correct.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/JSONNodeDumper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/JSONNodeDumper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/JSONNodeDumper.h:13,Integrability,inject,injected-class-name,13,// Found the injected-class-name for a class template. This will be; // dumped as part of its surrounding class so we don't need to dump it; // here.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/JSONNodeDumper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/JSONNodeDumper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/JSONNodeDumper.h:13,Security,inject,injected-class-name,13,// Found the injected-class-name for a class template. This will be; // dumped as part of its surrounding class so we don't need to dump it; // here.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/JSONNodeDumper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/JSONNodeDumper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/LambdaCapture.h:31,Modifiability,variab,variable,31,"/// Describes the capture of a variable or of \c this, or of a; /// C++1y init-capture.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/LambdaCapture.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/LambdaCapture.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/LambdaCapture.h:62,Modifiability,variab,variable,62,"// Decl could represent:; // - a VarDecl* that represents the variable that was captured or the; // init-capture.; // - or, is a nullptr and Capture_This is set in Bits if this represents a; // capture of '*this' by value or reference.; // - or, is a nullptr and Capture_This is not set in Bits if this represents; // a capture of a VLA type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/LambdaCapture.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/LambdaCapture.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/LambdaCapture.h:30,Modifiability,variab,variable,30,"/// Create a new capture of a variable or of \c this.; ///; /// \param Loc The source location associated with this capture.; ///; /// \param Kind The kind of capture (this, byref, bycopy), which must; /// not be init-capture.; ///; /// \param Implicit Whether the capture was implicit or explicit.; ///; /// \param Var The local variable being captured, or null if capturing; /// \c this.; ///; /// \param EllipsisLoc The location of the ellipsis (...) for a; /// capture that is a pack expansion, or an invalid source; /// location to indicate that this is not a pack expansion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/LambdaCapture.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/LambdaCapture.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/LambdaCapture.h:330,Modifiability,variab,variable,330,"/// Create a new capture of a variable or of \c this.; ///; /// \param Loc The source location associated with this capture.; ///; /// \param Kind The kind of capture (this, byref, bycopy), which must; /// not be init-capture.; ///; /// \param Implicit Whether the capture was implicit or explicit.; ///; /// \param Var The local variable being captured, or null if capturing; /// \c this.; ///; /// \param EllipsisLoc The location of the ellipsis (...) for a; /// capture that is a pack expansion, or an invalid source; /// location to indicate that this is not a pack expansion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/LambdaCapture.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/LambdaCapture.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/LambdaCapture.h:45,Modifiability,variab,variable,45,/// Determine whether this capture handles a variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/LambdaCapture.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/LambdaCapture.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/LambdaCapture.h:38,Modifiability,variab,variable,38,/// Determine whether this captures a variable length array bound; /// expression.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/LambdaCapture.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/LambdaCapture.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/LambdaCapture.h:42,Modifiability,variab,variable,42,/// Retrieve the declaration of the local variable being; /// captured.; ///; /// This operation is only valid if this capture is a variable capture; /// (other than a capture of \c this).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/LambdaCapture.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/LambdaCapture.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/LambdaCapture.h:132,Modifiability,variab,variable,132,/// Retrieve the declaration of the local variable being; /// captured.; ///; /// This operation is only valid if this capture is a variable capture; /// (other than a capture of \c this).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/LambdaCapture.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/LambdaCapture.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/LambdaCapture.h:223,Modifiability,variab,variable,223,"/// Retrieve the source location of the capture.; ///; /// For an explicit capture, this returns the location of the; /// explicit capture in the source. For an implicit capture, this; /// returns the location at which the variable or \c this was first; /// used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/LambdaCapture.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/LambdaCapture.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/LexicallyOrderedRecursiveASTVisitor.h:441,Integrability,interface,interface,441,"//===--- LexicallyOrderedRecursiveASTVisitor.h - ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the LexicallyOrderedRecursiveASTVisitor interface, which; // recursively traverses the entire AST in a lexical order.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/LexicallyOrderedRecursiveASTVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/LexicallyOrderedRecursiveASTVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/LexicallyOrderedRecursiveASTVisitor.h:78,Performance,perform,performed,78,"/// A RecursiveASTVisitor subclass that guarantees that AST traversal is; /// performed in a lexical order (i.e. the order in which declarations are; /// written in the source).; ///; /// RecursiveASTVisitor doesn't guarantee lexical ordering because there are; /// some declarations, like Objective-C @implementation declarations; /// that might be represented in the AST differently to how they were written; /// in the source.; /// In particular, Objective-C @implementation declarations may contain; /// non-Objective-C declarations, like functions:; ///; /// @implementation MyClass; ///; /// - (void) method { }; /// void normalFunction() { }; ///; /// @end; ///; /// Clang's AST stores these declarations outside of the @implementation; /// declaration, so the example above would be represented using the following; /// AST:; /// |-ObjCImplementationDecl ... MyClass; /// | `-ObjCMethodDecl ... method; /// | ...; /// `-FunctionDecl ... normalFunction; /// ...; ///; /// This class ensures that these declarations are traversed before the; /// corresponding TraverseDecl for the @implementation returns. This ensures; /// that the lexical parent relationship between these declarations and the; /// @implementation is preserved while traversing the AST. Note that the; /// current implementation doesn't mix these declarations with the declarations; /// contained in the @implementation, so the traversal of all of the; /// declarations in the @implementation still doesn't follow the lexical order.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/LexicallyOrderedRecursiveASTVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/LexicallyOrderedRecursiveASTVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/LocInfoType.h:50,Safety,Avoid,Avoids,50,// The last number that can fit in Type's TC.; // Avoids conflict with an existing Type class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/LocInfoType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/LocInfoType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Mangle.h:413,Integrability,interface,interface,413,"//===--- Mangle.h - Mangle C++ Names ----------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Defines the C++ name mangling interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Mangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Mangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Mangle.h:113,Modifiability,Extend,Extend,113,/// Generates a unique string for an externally visible type for use with TBAA; /// or type uniquing.; /// TODO: Extend this to internal types by generating names that are unique; /// across translation units so it can be used with LTO.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Mangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Mangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Mangle.h:66,Security,access,access,66,"// This has to live here, otherwise the CXXNameMangler won't have access to; // it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Mangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Mangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Mangle.h:57,Availability,failure,failure,57,"/// Writes name for \p D to \p OS.; /// \returns true on failure, false on success.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Mangle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Mangle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/MangleNumberingContext.h:430,Integrability,interface,interface,430,"//=== MangleNumberingContext.h - Context for mangling numbers ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the LambdaBlockMangleContext interface, which keeps track; // of the Itanium C++ ABI mangling numbers for lambda expressions and block; // literals.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/MangleNumberingContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/MangleNumberingContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/MangleNumberingContext.h:51,Modifiability,variab,variable,51,/// Retrieve the mangling number of a static local variable within; /// this context.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/MangleNumberingContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/MangleNumberingContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/MangleNumberingContext.h:51,Modifiability,variab,variable,51,/// Retrieve the mangling number of a static local variable within; /// this context.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/MangleNumberingContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/MangleNumberingContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/MangleNumberingContext.h:190,Integrability,depend,dependent,190,"// Retrieve the index of the next lambda appearing in this context, which is; // used for deduplicating lambdas across modules. Note that this is a simple; // sequence number and is not ABI-dependent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/MangleNumberingContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/MangleNumberingContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/MangleNumberingContext.h:148,Usability,simpl,simple,148,"// Retrieve the index of the next lambda appearing in this context, which is; // used for deduplicating lambdas across modules. Note that this is a simple; // sequence number and is not ABI-dependent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/MangleNumberingContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/MangleNumberingContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h:357,Integrability,depend,dependent,357,"/// Represents a C++ nested name specifier, such as; /// ""\::std::vector<int>::"".; ///; /// C++ nested name specifiers are the prefixes to qualified; /// names. For example, ""foo::"" in ""foo::x"" is a nested name; /// specifier. Nested name specifiers are made up of a sequence of; /// specifiers, each of which can be a namespace, type, identifier; /// (for dependent names), decltype specifier, or the global specifier ('::').; /// The last two specifiers can only appear at the start of a; /// nested-namespace-specifier.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h:283,Integrability,depend,depending,283,"/// The last component in the nested name specifier, which; /// can be an identifier, a declaration, or a type.; ///; /// When the pointer is NULL, this specifier represents the global; /// specifier '::'. Otherwise, the pointer is one of; /// IdentifierInfo*, Namespace*, or Type*, depending on the kind of; /// specifier as encoded within the prefix.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h:63,Testability,mock,mockup,63,/// Either find or insert the given nested name specifier; /// mockup in the given context.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h:90,Integrability,depend,dependent,90,"/// Builds a specifier combining a prefix and an identifier.; ///; /// The prefix must be dependent, since nested name specifiers; /// referencing an identifier are only permitted when the identifier; /// cannot be resolved.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h:113,Integrability,depend,dependent,113,"/// Builds a specifier that consists of just an identifier.; ///; /// The nested-name-specifier is assumed to be dependent, but has no; /// prefix because the prefix is implied by something outside of the; /// nested name specifier, e.g., in ""x->Base::f"", the ""x"" has a dependent; /// type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h:270,Integrability,depend,dependent,270,"/// Builds a specifier that consists of just an identifier.; ///; /// The nested-name-specifier is assumed to be dependent, but has no; /// prefix because the prefix is implied by something outside of the; /// nested name specifier, e.g., in ""x->Base::f"", the ""x"" has a dependent; /// type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h:51,Integrability,depend,dependent,51,/// Whether this nested name specifier refers to a dependent; /// type or not.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h:51,Availability,error,error,51,/// Whether this nested name specifier contains an error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h:4,Modifiability,Extend,Extend,4,"/// Extend the current nested-name-specifier by another; /// nested-name-specifier component of the form 'type::'.; ///; /// \param Context The AST context in which this nested-name-specifier; /// resides.; ///; /// \param TemplateKWLoc The location of the 'template' keyword, if present.; ///; /// \param TL The TypeLoc that describes the type preceding the '::'.; ///; /// \param ColonColonLoc The location of the trailing '::'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h:4,Modifiability,Extend,Extend,4,/// Extend the current nested-name-specifier by another; /// nested-name-specifier component of the form 'identifier::'.; ///; /// \param Context The AST context in which this nested-name-specifier; /// resides.; ///; /// \param Identifier The identifier.; ///; /// \param IdentifierLoc The location of the identifier.; ///; /// \param ColonColonLoc The location of the trailing '::'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h:4,Modifiability,Extend,Extend,4,/// Extend the current nested-name-specifier by another; /// nested-name-specifier component of the form 'namespace::'.; ///; /// \param Context The AST context in which this nested-name-specifier; /// resides.; ///; /// \param Namespace The namespace.; ///; /// \param NamespaceLoc The location of the namespace name.; ///; /// \param ColonColonLoc The location of the trailing '::'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h:4,Modifiability,Extend,Extend,4,/// Extend the current nested-name-specifier by another; /// nested-name-specifier component of the form 'namespace-alias::'.; ///; /// \param Context The AST context in which this nested-name-specifier; /// resides.; ///; /// \param Alias The namespace alias.; ///; /// \param AliasLoc The location of the namespace alias; /// name.; ///; /// \param ColonColonLoc The location of the trailing '::'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h:102,Integrability,rout,routine,102,"/// Make a new nested-name-specifier from incomplete source-location; /// information.; ///; /// This routine should be used very, very rarely, in cases where we; /// need to synthesize a nested-name-specifier. Most code should instead use; /// \c Adopt() with a proper \c NestedNameSpecifierLoc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h:4,Usability,Clear,Clear,4,"/// Clear out this builder, and prepare it to build another; /// nested-name-specifier with source-location information.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NestedNameSpecifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NSAPI.h:21,Performance,cache,caches,21,// Provides info and caches identifiers/selectors for NSFoundation API.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/NSAPI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NSAPI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NSAPI.h:26,Integrability,Interface,InterfaceDecl,26,/// Returns \c true if \p InterfaceDecl is subclass of \p NSClassKind,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/NSAPI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/NSAPI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ODRDiagsEmitter.h:121,Availability,error,error,121,// Use this to diagnose that an unexpected Decl was encountered; // or no difference was detected. This causes a generic error; // message to be emitted.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ODRDiagsEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ODRDiagsEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ODRDiagsEmitter.h:131,Integrability,message,message,131,// Use this to diagnose that an unexpected Decl was encountered; // or no difference was detected. This causes a generic error; // message to be emitted.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ODRDiagsEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ODRDiagsEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ODRDiagsEmitter.h:89,Safety,detect,detected,89,// Use this to diagnose that an unexpected Decl was encountered; // or no difference was detected. This causes a generic error; // message to be emitted.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ODRDiagsEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ODRDiagsEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ODRDiagsEmitter.h:13,Integrability,protocol,protocol,13,/// Check if protocol lists are the same and diagnose if they are different.; ///; /// Returns true if found a mismatch and diagnosed it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ODRDiagsEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ODRDiagsEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ODRHash.h:44,Availability,failure,failures,44,"//===-- ODRHash.h - Hashing to diagnose ODR failures ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file contains the declaration of the ODRHash class, which calculates; /// a hash based on AST nodes, which is stable across different runs.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ODRHash.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ODRHash.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ODRHash.h:20,Security,Hash,Hashing,20,"//===-- ODRHash.h - Hashing to diagnose ODR failures ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file contains the declaration of the ODRHash class, which calculates; /// a hash based on AST nodes, which is stable across different runs.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ODRHash.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ODRHash.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ODRHash.h:477,Security,hash,hash,477,"//===-- ODRHash.h - Hashing to diagnose ODR failures ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file contains the declaration of the ODRHash class, which calculates; /// a hash based on AST nodes, which is stable across different runs.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ODRHash.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ODRHash.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ODRHash.h:178,Safety,detect,detect,178,"// ODRHash is used to calculate a hash based on AST node contents that; // does not rely on pointer addresses. This allows the hash to not vary; // between runs and is usable to detect ODR problems in modules. To use,; // construct an ODRHash object, then call Add* methods over the nodes that; // need to be hashed. Then call CalculateHash to get the hash value.; // Typically, only one Add* call is needed. clear can be called to reuse the; // object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ODRHash.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ODRHash.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ODRHash.h:34,Security,hash,hash,34,"// ODRHash is used to calculate a hash based on AST node contents that; // does not rely on pointer addresses. This allows the hash to not vary; // between runs and is usable to detect ODR problems in modules. To use,; // construct an ODRHash object, then call Add* methods over the nodes that; // need to be hashed. Then call CalculateHash to get the hash value.; // Typically, only one Add* call is needed. clear can be called to reuse the; // object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ODRHash.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ODRHash.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ODRHash.h:127,Security,hash,hash,127,"// ODRHash is used to calculate a hash based on AST node contents that; // does not rely on pointer addresses. This allows the hash to not vary; // between runs and is usable to detect ODR problems in modules. To use,; // construct an ODRHash object, then call Add* methods over the nodes that; // need to be hashed. Then call CalculateHash to get the hash value.; // Typically, only one Add* call is needed. clear can be called to reuse the; // object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ODRHash.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ODRHash.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ODRHash.h:309,Security,hash,hashed,309,"// ODRHash is used to calculate a hash based on AST node contents that; // does not rely on pointer addresses. This allows the hash to not vary; // between runs and is usable to detect ODR problems in modules. To use,; // construct an ODRHash object, then call Add* methods over the nodes that; // need to be hashed. Then call CalculateHash to get the hash value.; // Typically, only one Add* call is needed. clear can be called to reuse the; // object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ODRHash.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ODRHash.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ODRHash.h:352,Security,hash,hash,352,"// ODRHash is used to calculate a hash based on AST node contents that; // does not rely on pointer addresses. This allows the hash to not vary; // between runs and is usable to detect ODR problems in modules. To use,; // construct an ODRHash object, then call Add* methods over the nodes that; // need to be hashed. Then call CalculateHash to get the hash value.; // Typically, only one Add* call is needed. clear can be called to reuse the; // object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ODRHash.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ODRHash.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ODRHash.h:168,Usability,usab,usable,168,"// ODRHash is used to calculate a hash based on AST node contents that; // does not rely on pointer addresses. This allows the hash to not vary; // between runs and is usable to detect ODR problems in modules. To use,; // construct an ODRHash object, then call Add* methods over the nodes that; // need to be hashed. Then call CalculateHash to get the hash value.; // Typically, only one Add* call is needed. clear can be called to reuse the; // object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ODRHash.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ODRHash.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ODRHash.h:409,Usability,clear,clear,409,"// ODRHash is used to calculate a hash based on AST node contents that; // does not rely on pointer addresses. This allows the hash to not vary; // between runs and is usable to detect ODR problems in modules. To use,; // construct an ODRHash object, then call Add* methods over the nodes that; // need to be hashed. Then call CalculateHash to get the hash value.; // Typically, only one Add* call is needed. clear can be called to reuse the; // object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ODRHash.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ODRHash.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ODRHash.h:34,Integrability,interface,interfaces,34,// Use this for ODR checking ObjC interfaces. This; // method compares more information than the AddDecl class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ODRHash.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ODRHash.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ODRHash.h:152,Security,hash,hash,152,// Use this for ODR checking functions between modules. This method compares; // more information than the AddDecl class. SkipBody will process the; // hash as if the function has no body.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ODRHash.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ODRHash.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ODRHash.h:34,Integrability,protocol,protocols,34,// Use this for ODR checking ObjC protocols. This; // method compares more information than the AddDecl class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ODRHash.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ODRHash.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ODRHash.h:51,Security,hash,hash,51,// Add booleans to ID and uses it to calculate the hash.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ODRHash.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ODRHash.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:28,Deployability,update,update,28,"/// Class that handles post-update expression for some clauses, like; /// 'lastprivate', 'reduction' etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:9,Deployability,update,update,9,/// Post-update expression for the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:13,Deployability,update,update,13,/// Get post-update expression for the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:13,Deployability,update,update,13,/// Get post-update expression for the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:45,Modifiability,variab,variables,45,"/// This represents clauses with the list of variables like 'private',; /// 'firstprivate', 'copyin', 'shared', or 'reduction' clauses in the; /// '#pragma omp ...' directives.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:14,Modifiability,variab,variables,14,/// Number of variables in the list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:29,Modifiability,variab,variables,29,/// Build a clause with \a N variables; ///; /// \param K Kind of the clause.; /// \param StartLoc Starting location of the clause (the clause keyword).; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param N Number of the variables in the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:270,Modifiability,variab,variables,270,/// Build a clause with \a N variables; ///; /// \param K Kind of the clause.; /// \param StartLoc Starting location of the clause (the clause keyword).; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param N Number of the variables in the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:20,Modifiability,variab,variables,20,/// Fetches list of variables associated with this clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:21,Modifiability,variab,variables,21,/// Sets the list of variables for this clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:24,Modifiability,variab,variables,24,/// Fetches list of all variables in the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:113,Energy Efficiency,allocate,allocate,113,/// This represents 'allocator' clause in the '#pragma omp ...'; /// directive.; ///; /// \code; /// #pragma omp allocate(a) allocator(omp_default_mem_alloc); /// \endcode; /// In this example directive '#pragma omp allocate' has simple 'allocator'; /// clause with the allocator 'omp_default_mem_alloc'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:216,Energy Efficiency,allocate,allocate,216,/// This represents 'allocator' clause in the '#pragma omp ...'; /// directive.; ///; /// \code; /// #pragma omp allocate(a) allocator(omp_default_mem_alloc); /// \endcode; /// In this example directive '#pragma omp allocate' has simple 'allocator'; /// clause with the allocator 'omp_default_mem_alloc'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:230,Usability,simpl,simple,230,/// This represents 'allocator' clause in the '#pragma omp ...'; /// directive.; ///; /// \code; /// #pragma omp allocate(a) allocator(omp_default_mem_alloc); /// \endcode; /// In this example directive '#pragma omp allocate' has simple 'allocator'; /// clause with the allocator 'omp_default_mem_alloc'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:59,Energy Efficiency,allocate,allocate,59,/// This represents the 'align' clause in the '#pragma omp allocate'; /// directive.; ///; /// \code; /// #pragma omp allocate(a) allocator(omp_default_mem_alloc) align(8); /// \endcode; /// In this example directive '#pragma omp allocate' has simple 'allocator'; /// clause with the allocator 'omp_default_mem_alloc' and align clause with; /// value of 8.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:118,Energy Efficiency,allocate,allocate,118,/// This represents the 'align' clause in the '#pragma omp allocate'; /// directive.; ///; /// \code; /// #pragma omp allocate(a) allocator(omp_default_mem_alloc) align(8); /// \endcode; /// In this example directive '#pragma omp allocate' has simple 'allocator'; /// clause with the allocator 'omp_default_mem_alloc' and align clause with; /// value of 8.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:230,Energy Efficiency,allocate,allocate,230,/// This represents the 'align' clause in the '#pragma omp allocate'; /// directive.; ///; /// \code; /// #pragma omp allocate(a) allocator(omp_default_mem_alloc) align(8); /// \endcode; /// In this example directive '#pragma omp allocate' has simple 'allocator'; /// clause with the allocator 'omp_default_mem_alloc' and align clause with; /// value of 8.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:244,Usability,simpl,simple,244,/// This represents the 'align' clause in the '#pragma omp allocate'; /// directive.; ///; /// \code; /// #pragma omp allocate(a) allocator(omp_default_mem_alloc) align(8); /// \endcode; /// In this example directive '#pragma omp allocate' has simple 'allocator'; /// clause with the allocator 'omp_default_mem_alloc' and align clause with; /// value of 8.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:28,Energy Efficiency,allocate,allocate,28,/// This represents clause 'allocate' in the '#pragma omp ...' directives.; ///; /// \code; /// #pragma omp parallel private(a) allocate(omp_default_mem_alloc :a); /// \endcode; /// In this example directive '#pragma omp parallel' has clause 'private'; /// and clause 'allocate' for the variable 'a'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:128,Energy Efficiency,allocate,allocate,128,/// This represents clause 'allocate' in the '#pragma omp ...' directives.; ///; /// \code; /// #pragma omp parallel private(a) allocate(omp_default_mem_alloc :a); /// \endcode; /// In this example directive '#pragma omp parallel' has clause 'private'; /// and clause 'allocate' for the variable 'a'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:269,Energy Efficiency,allocate,allocate,269,/// This represents clause 'allocate' in the '#pragma omp ...' directives.; ///; /// \code; /// #pragma omp parallel private(a) allocate(omp_default_mem_alloc :a); /// \endcode; /// In this example directive '#pragma omp parallel' has clause 'private'; /// and clause 'allocate' for the variable 'a'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:287,Modifiability,variab,variable,287,/// This represents clause 'allocate' in the '#pragma omp ...' directives.; ///; /// \code; /// #pragma omp parallel private(a) allocate(omp_default_mem_alloc :a); /// \endcode; /// In this example directive '#pragma omp parallel' has clause 'private'; /// and clause 'allocate' for the variable 'a'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:32,Modifiability,variab,variables,32,/// Build clause with number of variables \a N.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param Allocator Allocator expression.; /// \param ColonLoc Location of ':' delimiter.; /// \param EndLoc Ending location of the clause.; /// \param N Number of the variables in the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:316,Modifiability,variab,variables,316,/// Build clause with number of variables \a N.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param Allocator Allocator expression.; /// \param ColonLoc Location of ':' delimiter.; /// \param EndLoc Ending location of the clause.; /// \param N Number of the variables in the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:56,Modifiability,variab,variables,56,/// Build an empty clause.; ///; /// \param N Number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:34,Modifiability,variab,variables,34,/// Creates clause with a list of variables \a VL.; ///; /// \param C AST context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param Allocator Allocator expression.; /// \param ColonLoc Location of ':' delimiter.; /// \param EndLoc Ending location of the clause.; /// \param VL List of references to the variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:359,Modifiability,variab,variables,359,/// Creates clause with a list of variables \a VL.; ///; /// \param C AST context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param Allocator Allocator expression.; /// \param ColonLoc Location of ':' delimiter.; /// \param EndLoc Ending location of the clause.; /// \param VL List of references to the variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:52,Modifiability,variab,variables,52,/// Creates an empty clause with the place for \a N variables.; ///; /// \param C AST context.; /// \param N The number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:123,Modifiability,variab,variables,123,/// Creates an empty clause with the place for \a N variables.; ///; /// \param C AST context.; /// \param N The number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:201,Usability,simpl,simple,201,/// This represents 'if' clause in the '#pragma omp ...' directive.; ///; /// \code; /// #pragma omp parallel if(parallel:a > 5); /// \endcode; /// In this example directive '#pragma omp parallel' has simple 'if' clause with; /// condition 'a > 5' and directive name modifier 'parallel'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:190,Usability,simpl,simple,190,/// This represents 'final' clause in the '#pragma omp ...' directive.; ///; /// \code; /// #pragma omp task final(a > 5); /// \endcode; /// In this example directive '#pragma omp task' has simple 'final'; /// clause with condition 'a > 5'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:211,Usability,simpl,simple,211,/// This represents 'num_threads' clause in the '#pragma omp ...'; /// directive.; ///; /// \code; /// #pragma omp parallel num_threads(6); /// \endcode; /// In this example directive '#pragma omp parallel' has simple 'num_threads'; /// clause with number of threads '6'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:317,Performance,concurren,concurrently,317,/// This represents 'safelen' clause in the '#pragma omp ...'; /// directive.; ///; /// \code; /// #pragma omp simd safelen(4); /// \endcode; /// In this example directive '#pragma omp simd' has clause 'safelen'; /// with single expression '4'.; /// If the safelen clause is used then no two iterations executed; /// concurrently with SIMD instructions can have a greater distance; /// in the logical iteration space than its value. The parameter of; /// the safelen clause must be a constant positive integer expression.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:21,Safety,safe,safelen,21,/// This represents 'safelen' clause in the '#pragma omp ...'; /// directive.; ///; /// \code; /// #pragma omp simd safelen(4); /// \endcode; /// In this example directive '#pragma omp simd' has clause 'safelen'; /// with single expression '4'.; /// If the safelen clause is used then no two iterations executed; /// concurrently with SIMD instructions can have a greater distance; /// in the logical iteration space than its value. The parameter of; /// the safelen clause must be a constant positive integer expression.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:116,Safety,safe,safelen,116,/// This represents 'safelen' clause in the '#pragma omp ...'; /// directive.; ///; /// \code; /// #pragma omp simd safelen(4); /// \endcode; /// In this example directive '#pragma omp simd' has clause 'safelen'; /// with single expression '4'.; /// If the safelen clause is used then no two iterations executed; /// concurrently with SIMD instructions can have a greater distance; /// in the logical iteration space than its value. The parameter of; /// the safelen clause must be a constant positive integer expression.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:203,Safety,safe,safelen,203,/// This represents 'safelen' clause in the '#pragma omp ...'; /// directive.; ///; /// \code; /// #pragma omp simd safelen(4); /// \endcode; /// In this example directive '#pragma omp simd' has clause 'safelen'; /// with single expression '4'.; /// If the safelen clause is used then no two iterations executed; /// concurrently with SIMD instructions can have a greater distance; /// in the logical iteration space than its value. The parameter of; /// the safelen clause must be a constant positive integer expression.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:257,Safety,safe,safelen,257,/// This represents 'safelen' clause in the '#pragma omp ...'; /// directive.; ///; /// \code; /// #pragma omp simd safelen(4); /// \endcode; /// In this example directive '#pragma omp simd' has clause 'safelen'; /// with single expression '4'.; /// If the safelen clause is used then no two iterations executed; /// concurrently with SIMD instructions can have a greater distance; /// in the logical iteration space than its value. The parameter of; /// the safelen clause must be a constant positive integer expression.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:459,Safety,safe,safelen,459,/// This represents 'safelen' clause in the '#pragma omp ...'; /// directive.; ///; /// \code; /// #pragma omp simd safelen(4); /// \endcode; /// In this example directive '#pragma omp simd' has clause 'safelen'; /// with single expression '4'.; /// If the safelen clause is used then no two iterations executed; /// concurrently with SIMD instructions can have a greater distance; /// in the logical iteration space than its value. The parameter of; /// the safelen clause must be a constant positive integer expression.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:393,Testability,log,logical,393,/// This represents 'safelen' clause in the '#pragma omp ...'; /// directive.; ///; /// \code; /// #pragma omp simd safelen(4); /// \endcode; /// In this example directive '#pragma omp simd' has clause 'safelen'; /// with single expression '4'.; /// If the safelen clause is used then no two iterations executed; /// concurrently with SIMD instructions can have a greater distance; /// in the logical iteration space than its value. The parameter of; /// the safelen clause must be a constant positive integer expression.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:8,Safety,safe,safelen,8,/// Set safelen.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:11,Safety,safe,safelen,11,/// Build 'safelen' clause.; ///; /// \param Len Expression associated with this clause.; /// \param StartLoc Starting location of the clause.; /// \param EndLoc Ending location of the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:11,Safety,safe,safe,11,/// Return safe iteration space distance.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:355,Performance,concurren,concurrently,355,/// This represents 'simdlen' clause in the '#pragma omp ...'; /// directive.; ///; /// \code; /// #pragma omp simd simdlen(4); /// \endcode; /// In this example directive '#pragma omp simd' has clause 'simdlen'; /// with single expression '4'.; /// If the 'simdlen' clause is used then it specifies the preferred number of; /// iterations to be executed concurrently. The parameter of the 'simdlen'; /// clause must be a constant positive integer expression.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:11,Safety,safe,safe,11,/// Return safe iteration space distance.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:203,Usability,simpl,simple,203,/// This represents 'default' clause in the '#pragma omp ...' directive.; ///; /// \code; /// #pragma omp parallel default(shared); /// \endcode; /// In this example directive '#pragma omp parallel' has simple 'default'; /// clause with kind 'shared'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:212,Usability,simpl,simple,212,/// This represents 'proc_bind' clause in the '#pragma omp ...'; /// directive.; ///; /// \code; /// #pragma omp parallel proc_bind(master); /// \endcode; /// In this example directive '#pragma omp parallel' has simple 'proc_bind'; /// clause with kind 'master'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:248,Usability,simpl,simple,248,/// This represents 'atomic_default_mem_order' clause in the '#pragma omp; /// requires' directive.; ///; /// \code; /// #pragma omp requires atomic_default_mem_order(seq_cst); /// \endcode; /// In this example directive '#pragma omp requires' has simple; /// atomic_default_mem_order' clause with kind 'seq_cst'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:52,Availability,error,error,52,/// This represents 'at' clause in the '#pragma omp error' directive; ///; /// \code; /// #pragma omp error at(compilation); /// \endcode; /// In this example directive '#pragma omp error' has simple; /// 'at' clause with kind 'complilation'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:102,Availability,error,error,102,/// This represents 'at' clause in the '#pragma omp error' directive; ///; /// \code; /// #pragma omp error at(compilation); /// \endcode; /// In this example directive '#pragma omp error' has simple; /// 'at' clause with kind 'complilation'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:182,Availability,error,error,182,/// This represents 'at' clause in the '#pragma omp error' directive; ///; /// \code; /// #pragma omp error at(compilation); /// \endcode; /// In this example directive '#pragma omp error' has simple; /// 'at' clause with kind 'complilation'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:193,Usability,simpl,simple,193,/// This represents 'at' clause in the '#pragma omp error' directive; ///; /// \code; /// #pragma omp error at(compilation); /// \endcode; /// In this example directive '#pragma omp error' has simple; /// 'at' clause with kind 'complilation'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:58,Availability,error,error,58,/// This represents 'severity' clause in the '#pragma omp error' directive; ///; /// \code; /// #pragma omp error severity(fatal); /// \endcode; /// In this example directive '#pragma omp error' has simple; /// 'severity' clause with kind 'fatal'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:108,Availability,error,error,108,/// This represents 'severity' clause in the '#pragma omp error' directive; ///; /// \code; /// #pragma omp error severity(fatal); /// \endcode; /// In this example directive '#pragma omp error' has simple; /// 'severity' clause with kind 'fatal'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:188,Availability,error,error,188,/// This represents 'severity' clause in the '#pragma omp error' directive; ///; /// \code; /// #pragma omp error severity(fatal); /// \endcode; /// In this example directive '#pragma omp error' has simple; /// 'severity' clause with kind 'fatal'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:199,Usability,simpl,simple,199,/// This represents 'severity' clause in the '#pragma omp error' directive; ///; /// \code; /// #pragma omp error severity(fatal); /// \endcode; /// In this example directive '#pragma omp error' has simple; /// 'severity' clause with kind 'fatal'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:57,Availability,error,error,57,"/// This represents 'message' clause in the '#pragma omp error' directive; ///; /// \code; /// #pragma omp error message(""GNU compiler required.""); /// \endcode; /// In this example directive '#pragma omp error' has simple; /// 'message' clause with user error message of ""GNU compiler required."".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:107,Availability,error,error,107,"/// This represents 'message' clause in the '#pragma omp error' directive; ///; /// \code; /// #pragma omp error message(""GNU compiler required.""); /// \endcode; /// In this example directive '#pragma omp error' has simple; /// 'message' clause with user error message of ""GNU compiler required."".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:205,Availability,error,error,205,"/// This represents 'message' clause in the '#pragma omp error' directive; ///; /// \code; /// #pragma omp error message(""GNU compiler required.""); /// \endcode; /// In this example directive '#pragma omp error' has simple; /// 'message' clause with user error message of ""GNU compiler required."".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:255,Availability,error,error,255,"/// This represents 'message' clause in the '#pragma omp error' directive; ///; /// \code; /// #pragma omp error message(""GNU compiler required.""); /// \endcode; /// In this example directive '#pragma omp error' has simple; /// 'message' clause with user error message of ""GNU compiler required."".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:21,Integrability,message,message,21,"/// This represents 'message' clause in the '#pragma omp error' directive; ///; /// \code; /// #pragma omp error message(""GNU compiler required.""); /// \endcode; /// In this example directive '#pragma omp error' has simple; /// 'message' clause with user error message of ""GNU compiler required."".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:113,Integrability,message,message,113,"/// This represents 'message' clause in the '#pragma omp error' directive; ///; /// \code; /// #pragma omp error message(""GNU compiler required.""); /// \endcode; /// In this example directive '#pragma omp error' has simple; /// 'message' clause with user error message of ""GNU compiler required."".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:229,Integrability,message,message,229,"/// This represents 'message' clause in the '#pragma omp error' directive; ///; /// \code; /// #pragma omp error message(""GNU compiler required.""); /// \endcode; /// In this example directive '#pragma omp error' has simple; /// 'message' clause with user error message of ""GNU compiler required."".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:261,Integrability,message,message,261,"/// This represents 'message' clause in the '#pragma omp error' directive; ///; /// \code; /// #pragma omp error message(""GNU compiler required.""); /// \endcode; /// In this example directive '#pragma omp error' has simple; /// 'message' clause with user error message of ""GNU compiler required."".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:216,Usability,simpl,simple,216,"/// This represents 'message' clause in the '#pragma omp error' directive; ///; /// \code; /// #pragma omp error message(""GNU compiler required.""); /// \endcode; /// In this example directive '#pragma omp error' has simple; /// 'message' clause with user error message of ""GNU compiler required."".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:22,Integrability,message,message,22,// Expression of the 'message' clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:8,Integrability,message,message,8,/// Set message string of the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:11,Integrability,message,message,11,/// Build 'message' clause with message string argument; ///; /// \param MS Argument of the clause (message string).; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:32,Integrability,message,message,32,/// Build 'message' clause with message string argument; ///; /// \param MS Argument of the clause (message string).; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:100,Integrability,message,message,100,/// Build 'message' clause with message string argument; ///; /// \param MS Argument of the clause (message string).; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:12,Integrability,message,message,12,/// Returns message string of the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:21,Energy Efficiency,schedul,schedule,21,"/// This represents 'schedule' clause in the '#pragma omp ...' directive.; ///; /// \code; /// #pragma omp for schedule(static, 3); /// \endcode; /// In this example directive '#pragma omp for' has 'schedule' clause with; /// arguments 'static' and '3'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:111,Energy Efficiency,schedul,schedule,111,"/// This represents 'schedule' clause in the '#pragma omp ...' directive.; ///; /// \code; /// #pragma omp for schedule(static, 3); /// \endcode; /// In this example directive '#pragma omp for' has 'schedule' clause with; /// arguments 'static' and '3'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:199,Energy Efficiency,schedul,schedule,199,"/// This represents 'schedule' clause in the '#pragma omp ...' directive.; ///; /// \code; /// #pragma omp for schedule(static, 3); /// \endcode; /// In this example directive '#pragma omp for' has 'schedule' clause with; /// arguments 'static' and '3'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:19,Energy Efficiency,schedul,schedule,19,/// A kind of the 'schedule' clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:19,Energy Efficiency,schedul,schedule,19,/// Modifiers for 'schedule' clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:26,Energy Efficiency,schedul,schedule,26,/// Start location of the schedule ind in source code.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:8,Energy Efficiency,schedul,schedule,8,/// Set schedule kind.; ///; /// \param K Schedule kind.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:42,Energy Efficiency,Schedul,Schedule,42,/// Set schedule kind.; ///; /// \param K Schedule kind.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:18,Energy Efficiency,schedul,schedule,18,/// Set the first schedule modifier.; ///; /// \param M Schedule modifier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:56,Energy Efficiency,Schedul,Schedule,56,/// Set the first schedule modifier.; ///; /// \param M Schedule modifier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:19,Energy Efficiency,schedul,schedule,19,/// Set the second schedule modifier.; ///; /// \param M Schedule modifier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:57,Energy Efficiency,Schedul,Schedule,57,/// Set the second schedule modifier.; ///; /// \param M Schedule modifier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:30,Energy Efficiency,schedul,schedule,30,/// Set location of the first schedule modifier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:31,Energy Efficiency,schedul,schedule,31,/// Set location of the second schedule modifier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:8,Energy Efficiency,schedul,schedule,8,/// Set schedule modifier location.; ///; /// \param M Schedule modifier location.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:55,Energy Efficiency,Schedul,Schedule,55,/// Set schedule modifier location.; ///; /// \param M Schedule modifier location.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:8,Energy Efficiency,schedul,schedule,8,/// Set schedule kind start location.; ///; /// \param KLoc Schedule kind location.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:60,Energy Efficiency,Schedul,Schedule,60,/// Set schedule kind start location.; ///; /// \param KLoc Schedule kind location.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:11,Energy Efficiency,schedul,schedule,11,"/// Build 'schedule' clause with schedule kind \a Kind and chunk size; /// expression \a ChunkSize.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param KLoc Starting location of the argument.; /// \param CommaLoc Location of ','.; /// \param EndLoc Ending location of the clause.; /// \param Kind Schedule kind.; /// \param ChunkSize Chunk size.; /// \param HelperChunkSize Helper chunk size for combined directives.; /// \param M1 The first modifier applied to 'schedule' clause.; /// \param M1Loc Location of the first modifier; /// \param M2 The second modifier applied to 'schedule' clause.; /// \param M2Loc Location of the second modifier",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:33,Energy Efficiency,schedul,schedule,33,"/// Build 'schedule' clause with schedule kind \a Kind and chunk size; /// expression \a ChunkSize.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param KLoc Starting location of the argument.; /// \param CommaLoc Location of ','.; /// \param EndLoc Ending location of the clause.; /// \param Kind Schedule kind.; /// \param ChunkSize Chunk size.; /// \param HelperChunkSize Helper chunk size for combined directives.; /// \param M1 The first modifier applied to 'schedule' clause.; /// \param M1Loc Location of the first modifier; /// \param M2 The second modifier applied to 'schedule' clause.; /// \param M2Loc Location of the second modifier",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:355,Energy Efficiency,Schedul,Schedule,355,"/// Build 'schedule' clause with schedule kind \a Kind and chunk size; /// expression \a ChunkSize.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param KLoc Starting location of the argument.; /// \param CommaLoc Location of ','.; /// \param EndLoc Ending location of the clause.; /// \param Kind Schedule kind.; /// \param ChunkSize Chunk size.; /// \param HelperChunkSize Helper chunk size for combined directives.; /// \param M1 The first modifier applied to 'schedule' clause.; /// \param M1Loc Location of the first modifier; /// \param M2 The second modifier applied to 'schedule' clause.; /// \param M2Loc Location of the second modifier",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:521,Energy Efficiency,schedul,schedule,521,"/// Build 'schedule' clause with schedule kind \a Kind and chunk size; /// expression \a ChunkSize.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param KLoc Starting location of the argument.; /// \param CommaLoc Location of ','.; /// \param EndLoc Ending location of the clause.; /// \param Kind Schedule kind.; /// \param ChunkSize Chunk size.; /// \param HelperChunkSize Helper chunk size for combined directives.; /// \param M1 The first modifier applied to 'schedule' clause.; /// \param M1Loc Location of the first modifier; /// \param M2 The second modifier applied to 'schedule' clause.; /// \param M2Loc Location of the second modifier",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:635,Energy Efficiency,schedul,schedule,635,"/// Build 'schedule' clause with schedule kind \a Kind and chunk size; /// expression \a ChunkSize.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param KLoc Starting location of the argument.; /// \param CommaLoc Location of ','.; /// \param EndLoc Ending location of the clause.; /// \param Kind Schedule kind.; /// \param ChunkSize Chunk size.; /// \param HelperChunkSize Helper chunk size for combined directives.; /// \param M1 The first modifier applied to 'schedule' clause.; /// \param M1Loc Location of the first modifier; /// \param M2 The second modifier applied to 'schedule' clause.; /// \param M2Loc Location of the second modifier",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:21,Deployability,update,update,21,"/// This represents 'update' clause in the '#pragma omp atomic'; /// directive.; ///; /// \code; /// #pragma omp atomic update; /// \endcode; /// In this example directive '#pragma omp atomic' has 'update' clause.; /// Also, this class represents 'update' clause in '#pragma omp depobj'; /// directive.; ///; /// \code; /// #pragma omp depobj(a) update(in); /// \endcode; /// In this example directive '#pragma omp depobj' has 'update' clause with 'in'; /// dependence kind.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:120,Deployability,update,update,120,"/// This represents 'update' clause in the '#pragma omp atomic'; /// directive.; ///; /// \code; /// #pragma omp atomic update; /// \endcode; /// In this example directive '#pragma omp atomic' has 'update' clause.; /// Also, this class represents 'update' clause in '#pragma omp depobj'; /// directive.; ///; /// \code; /// #pragma omp depobj(a) update(in); /// \endcode; /// In this example directive '#pragma omp depobj' has 'update' clause with 'in'; /// dependence kind.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:198,Deployability,update,update,198,"/// This represents 'update' clause in the '#pragma omp atomic'; /// directive.; ///; /// \code; /// #pragma omp atomic update; /// \endcode; /// In this example directive '#pragma omp atomic' has 'update' clause.; /// Also, this class represents 'update' clause in '#pragma omp depobj'; /// directive.; ///; /// \code; /// #pragma omp depobj(a) update(in); /// \endcode; /// In this example directive '#pragma omp depobj' has 'update' clause with 'in'; /// dependence kind.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:248,Deployability,update,update,248,"/// This represents 'update' clause in the '#pragma omp atomic'; /// directive.; ///; /// \code; /// #pragma omp atomic update; /// \endcode; /// In this example directive '#pragma omp atomic' has 'update' clause.; /// Also, this class represents 'update' clause in '#pragma omp depobj'; /// directive.; ///; /// \code; /// #pragma omp depobj(a) update(in); /// \endcode; /// In this example directive '#pragma omp depobj' has 'update' clause with 'in'; /// dependence kind.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:346,Deployability,update,update,346,"/// This represents 'update' clause in the '#pragma omp atomic'; /// directive.; ///; /// \code; /// #pragma omp atomic update; /// \endcode; /// In this example directive '#pragma omp atomic' has 'update' clause.; /// Also, this class represents 'update' clause in '#pragma omp depobj'; /// directive.; ///; /// \code; /// #pragma omp depobj(a) update(in); /// \endcode; /// In this example directive '#pragma omp depobj' has 'update' clause with 'in'; /// dependence kind.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:428,Deployability,update,update,428,"/// This represents 'update' clause in the '#pragma omp atomic'; /// directive.; ///; /// \code; /// #pragma omp atomic update; /// \endcode; /// In this example directive '#pragma omp atomic' has 'update' clause.; /// Also, this class represents 'update' clause in '#pragma omp depobj'; /// directive.; ///; /// \code; /// #pragma omp depobj(a) update(in); /// \endcode; /// In this example directive '#pragma omp depobj' has 'update' clause with 'in'; /// dependence kind.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:458,Integrability,depend,dependence,458,"/// This represents 'update' clause in the '#pragma omp atomic'; /// directive.; ///; /// \code; /// #pragma omp atomic update; /// \endcode; /// In this example directive '#pragma omp atomic' has 'update' clause.; /// Also, this class represents 'update' clause in '#pragma omp depobj'; /// directive.; ///; /// \code; /// #pragma omp depobj(a) update(in); /// \endcode; /// In this example directive '#pragma omp depobj' has 'update' clause with 'in'; /// dependence kind.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:12,Modifiability,extend,extended,12,/// true if extended version of the clause for 'depobj' directive.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:13,Integrability,depend,dependence,13,/// Sets the dependence kind for the clause for 'depobj' directive.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:11,Deployability,update,update,11,/// Build 'update' clause.; ///; /// \param StartLoc Starting location of the clause.; /// \param EndLoc Ending location of the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:233,Integrability,Depend,Dependence,233,/// Creates clause for 'depobj' directive.; ///; /// \param C AST context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param ArgumentLoc Location of the argument.; /// \param DK Dependence kind.; /// \param EndLoc Ending location of the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:52,Modifiability,variab,variables,52,/// Creates an empty clause with the place for \a N variables.; ///; /// \param C AST context.; /// \param IsExtended true if extended clause for 'depobj' directive must be; /// created.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:126,Modifiability,extend,extended,126,/// Creates an empty clause with the place for \a N variables.; ///; /// \param C AST context.; /// \param IsExtended true if extended clause for 'depobj' directive must be; /// created.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:32,Modifiability,extend,extended,32,/// Checks if the clause is the extended clauses for 'depobj' directive.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:13,Integrability,depend,dependence,13,/// Gets the dependence kind in clause for 'depobj' directive.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:21,Deployability,release,release,21,/// This represents 'release' clause in the '#pragma omp atomic|flush'; /// directives.; ///; /// \code; /// #pragma omp flush release; /// \endcode; /// In this example directive '#pragma omp flush' has 'release' clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:127,Deployability,release,release,127,/// This represents 'release' clause in the '#pragma omp atomic|flush'; /// directives.; ///; /// \code; /// #pragma omp flush release; /// \endcode; /// In this example directive '#pragma omp flush' has 'release' clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:205,Deployability,release,release,205,/// This represents 'release' clause in the '#pragma omp atomic|flush'; /// directives.; ///; /// \code; /// #pragma omp flush release; /// \endcode; /// In this example directive '#pragma omp flush' has 'release' clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:11,Deployability,release,release,11,/// Build 'release' clause.; ///; /// \param StartLoc Starting location of the clause.; /// \param EndLoc Ending location of the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:232,Modifiability,variab,variables,232,"/// This represents clause 'private' in the '#pragma omp ...' directives.; ///; /// \code; /// #pragma omp parallel private(a,b); /// \endcode; /// In this example directive '#pragma omp parallel' has clause 'private'; /// with the variables 'a' and 'b'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:32,Modifiability,variab,variables,32,/// Build clause with number of variables \a N.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param N Number of the variables in the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:224,Modifiability,variab,variables,224,/// Build clause with number of variables \a N.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param N Number of the variables in the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:56,Modifiability,variab,variables,56,/// Build an empty clause.; ///; /// \param N Number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:89,Modifiability,variab,variables,89,/// Sets the list of references to private copies with initializers for; /// new private variables.; /// \param VL List of references.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:89,Modifiability,variab,variables,89,/// Gets the list of references to private copies with initializers for; /// new private variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:34,Modifiability,variab,variables,34,/// Creates clause with a list of variables \a VL.; ///; /// \param C AST context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param VL List of references to the variables.; /// \param PrivateVL List of references to private copies with initializers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:267,Modifiability,variab,variables,267,/// Creates clause with a list of variables \a VL.; ///; /// \param C AST context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param VL List of references to the variables.; /// \param PrivateVL List of references to private copies with initializers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:52,Modifiability,variab,variables,52,/// Creates an empty clause with the place for \a N variables.; ///; /// \param C AST context.; /// \param N The number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:123,Modifiability,variab,variables,123,/// Creates an empty clause with the place for \a N variables.; ///; /// \param C AST context.; /// \param N The number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:252,Modifiability,variab,variables,252,"/// This represents clause 'firstprivate' in the '#pragma omp ...'; /// directives.; ///; /// \code; /// #pragma omp parallel firstprivate(a,b); /// \endcode; /// In this example directive '#pragma omp parallel' has clause 'firstprivate'; /// with the variables 'a' and 'b'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:32,Modifiability,variab,variables,32,/// Build clause with number of variables \a N.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param N Number of the variables in the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:224,Modifiability,variab,variables,224,/// Build clause with number of variables \a N.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param N Number of the variables in the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:56,Modifiability,variab,variables,56,/// Build an empty clause.; ///; /// \param N Number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:89,Modifiability,variab,variables,89,/// Sets the list of references to private copies with initializers for; /// new private variables.; /// \param VL List of references.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:89,Modifiability,variab,variables,89,/// Gets the list of references to private copies with initializers for; /// new private variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:47,Modifiability,variab,variables,47,/// Sets the list of references to initializer variables for new; /// private variables.; /// \param VL List of references.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:78,Modifiability,variab,variables,78,/// Sets the list of references to initializer variables for new; /// private variables.; /// \param VL List of references.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:47,Modifiability,variab,variables,47,/// Gets the list of references to initializer variables for new; /// private variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:78,Modifiability,variab,variables,78,/// Gets the list of references to initializer variables for new; /// private variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:34,Modifiability,variab,variables,34,/// Creates clause with a list of variables \a VL.; ///; /// \param C AST context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param VL List of references to the original variables.; /// \param PrivateVL List of references to private copies with initializers.; /// \param InitVL List of references to auto generated variables used for; /// initialization of a single array element. Used if firstprivate variable is; /// of array type.; /// \param PreInit Statement that must be executed before entering the OpenMP; /// region with this clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:276,Modifiability,variab,variables,276,/// Creates clause with a list of variables \a VL.; ///; /// \param C AST context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param VL List of references to the original variables.; /// \param PrivateVL List of references to private copies with initializers.; /// \param InitVL List of references to auto generated variables used for; /// initialization of a single array element. Used if firstprivate variable is; /// of array type.; /// \param PreInit Statement that must be executed before entering the OpenMP; /// region with this clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:421,Modifiability,variab,variables,421,/// Creates clause with a list of variables \a VL.; ///; /// \param C AST context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param VL List of references to the original variables.; /// \param PrivateVL List of references to private copies with initializers.; /// \param InitVL List of references to auto generated variables used for; /// initialization of a single array element. Used if firstprivate variable is; /// of array type.; /// \param PreInit Statement that must be executed before entering the OpenMP; /// region with this clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:508,Modifiability,variab,variable,508,/// Creates clause with a list of variables \a VL.; ///; /// \param C AST context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param VL List of references to the original variables.; /// \param PrivateVL List of references to private copies with initializers.; /// \param InitVL List of references to auto generated variables used for; /// initialization of a single array element. Used if firstprivate variable is; /// of array type.; /// \param PreInit Statement that must be executed before entering the OpenMP; /// region with this clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:52,Modifiability,variab,variables,52,/// Creates an empty clause with the place for \a N variables.; ///; /// \param C AST context.; /// \param N The number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:123,Modifiability,variab,variables,123,/// Creates an empty clause with the place for \a N variables.; ///; /// \param C AST context.; /// \param N The number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:241,Modifiability,variab,variables,241,"/// This represents clause 'lastprivate' in the '#pragma omp ...'; /// directives.; ///; /// \code; /// #pragma omp simd lastprivate(a,b); /// \endcode; /// In this example directive '#pragma omp simd' has clause 'lastprivate'; /// with the variables 'a' and 'b'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:31,Energy Efficiency,allocate,allocated,31,"// There are 4 additional tail-allocated arrays at the end of the class:; // 1. Contains list of pseudo variables with the default initialization for; // each non-firstprivate variables. Used in codegen for initialization of; // lastprivate copies.; // 2. List of helper expressions for proper generation of assignment operation; // required for lastprivate clause. This list represents private variables; // (for arrays, single array element).; // 3. List of helper expressions for proper generation of assignment operation; // required for lastprivate clause. This list represents original variables; // (for arrays, single array element).; // 4. List of helper expressions that represents assignment operation:; // \code; // DstExprs = SrcExprs;; // \endcode; // Required for proper codegen of final assignment performed by the; // lastprivate clause.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:104,Modifiability,variab,variables,104,"// There are 4 additional tail-allocated arrays at the end of the class:; // 1. Contains list of pseudo variables with the default initialization for; // each non-firstprivate variables. Used in codegen for initialization of; // lastprivate copies.; // 2. List of helper expressions for proper generation of assignment operation; // required for lastprivate clause. This list represents private variables; // (for arrays, single array element).; // 3. List of helper expressions for proper generation of assignment operation; // required for lastprivate clause. This list represents original variables; // (for arrays, single array element).; // 4. List of helper expressions that represents assignment operation:; // \code; // DstExprs = SrcExprs;; // \endcode; // Required for proper codegen of final assignment performed by the; // lastprivate clause.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:176,Modifiability,variab,variables,176,"// There are 4 additional tail-allocated arrays at the end of the class:; // 1. Contains list of pseudo variables with the default initialization for; // each non-firstprivate variables. Used in codegen for initialization of; // lastprivate copies.; // 2. List of helper expressions for proper generation of assignment operation; // required for lastprivate clause. This list represents private variables; // (for arrays, single array element).; // 3. List of helper expressions for proper generation of assignment operation; // required for lastprivate clause. This list represents original variables; // (for arrays, single array element).; // 4. List of helper expressions that represents assignment operation:; // \code; // DstExprs = SrcExprs;; // \endcode; // Required for proper codegen of final assignment performed by the; // lastprivate clause.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:395,Modifiability,variab,variables,395,"// There are 4 additional tail-allocated arrays at the end of the class:; // 1. Contains list of pseudo variables with the default initialization for; // each non-firstprivate variables. Used in codegen for initialization of; // lastprivate copies.; // 2. List of helper expressions for proper generation of assignment operation; // required for lastprivate clause. This list represents private variables; // (for arrays, single array element).; // 3. List of helper expressions for proper generation of assignment operation; // required for lastprivate clause. This list represents original variables; // (for arrays, single array element).; // 4. List of helper expressions that represents assignment operation:; // \code; // DstExprs = SrcExprs;; // \endcode; // Required for proper codegen of final assignment performed by the; // lastprivate clause.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:592,Modifiability,variab,variables,592,"// There are 4 additional tail-allocated arrays at the end of the class:; // 1. Contains list of pseudo variables with the default initialization for; // each non-firstprivate variables. Used in codegen for initialization of; // lastprivate copies.; // 2. List of helper expressions for proper generation of assignment operation; // required for lastprivate clause. This list represents private variables; // (for arrays, single array element).; // 3. List of helper expressions for proper generation of assignment operation; // required for lastprivate clause. This list represents original variables; // (for arrays, single array element).; // 4. List of helper expressions that represents assignment operation:; // \code; // DstExprs = SrcExprs;; // \endcode; // Required for proper codegen of final assignment performed by the; // lastprivate clause.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:814,Performance,perform,performed,814,"// There are 4 additional tail-allocated arrays at the end of the class:; // 1. Contains list of pseudo variables with the default initialization for; // each non-firstprivate variables. Used in codegen for initialization of; // lastprivate copies.; // 2. List of helper expressions for proper generation of assignment operation; // required for lastprivate clause. This list represents private variables; // (for arrays, single array element).; // 3. List of helper expressions for proper generation of assignment operation; // required for lastprivate clause. This list represents original variables; // (for arrays, single array element).; // 4. List of helper expressions that represents assignment operation:; // \code; // DstExprs = SrcExprs;; // \endcode; // Required for proper codegen of final assignment performed by the; // lastprivate clause.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:32,Modifiability,variab,variables,32,/// Build clause with number of variables \a N.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param N Number of the variables in the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:224,Modifiability,variab,variables,224,/// Build clause with number of variables \a N.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param N Number of the variables in the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:56,Modifiability,variab,variables,56,/// Build an empty clause.; ///; /// \param N Number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:97,Modifiability,variab,variables,97,/// Get the list of helper expressions for initialization of private; /// copies for lastprivate variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:120,Modifiability,variab,variables,120,"/// Set list of helper expressions, required for proper codegen of the; /// clause. These expressions represent private variables (for arrays, single; /// array element) in the final assignment statement performed by the; /// lastprivate clause.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:204,Performance,perform,performed,204,"/// Set list of helper expressions, required for proper codegen of the; /// clause. These expressions represent private variables (for arrays, single; /// array element) in the final assignment statement performed by the; /// lastprivate clause.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:121,Modifiability,variab,variables,121,"/// Set list of helper expressions, required for proper codegen of the; /// clause. These expressions represent original variables (for arrays, single; /// array element) in the final assignment statement performed by the; /// lastprivate clause.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:205,Performance,perform,performed,205,"/// Set list of helper expressions, required for proper codegen of the; /// clause. These expressions represent original variables (for arrays, single; /// array element) in the final assignment statement performed by the; /// lastprivate clause.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:177,Modifiability,variab,variable,177,"/// Set list of helper assignment expressions, required for proper; /// codegen of the clause. These expressions are assignment expressions that; /// assign private copy of the variable to original variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:198,Modifiability,variab,variable,198,"/// Set list of helper assignment expressions, required for proper; /// codegen of the clause. These expressions are assignment expressions that; /// assign private copy of the variable to original variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:34,Modifiability,variab,variables,34,"/// Creates clause with a list of variables \a VL.; ///; /// \param C AST context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param VL List of references to the variables.; /// \param SrcExprs List of helper expressions for proper generation of; /// assignment operation required for lastprivate clause. This list represents; /// private variables (for arrays, single array element).; /// \param DstExprs List of helper expressions for proper generation of; /// assignment operation required for lastprivate clause. This list represents; /// original variables (for arrays, single array element).; /// \param AssignmentOps List of helper expressions that represents assignment; /// operation:; /// \code; /// DstExprs = SrcExprs;; /// \endcode; /// Required for proper codegen of final assignment performed by the; /// lastprivate clause.; /// \param LPKind Lastprivate kind, e.g. 'conditional'.; /// \param LPKindLoc Location of the lastprivate kind.; /// \param ColonLoc Location of the ':' symbol if lastprivate kind is used.; /// \param PreInit Statement that must be executed before entering the OpenMP; /// region with this clause.; /// \param PostUpdate Expression that must be executed after exit from the; /// OpenMP region with this clause.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:267,Modifiability,variab,variables,267,"/// Creates clause with a list of variables \a VL.; ///; /// \param C AST context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param VL List of references to the variables.; /// \param SrcExprs List of helper expressions for proper generation of; /// assignment operation required for lastprivate clause. This list represents; /// private variables (for arrays, single array element).; /// \param DstExprs List of helper expressions for proper generation of; /// assignment operation required for lastprivate clause. This list represents; /// original variables (for arrays, single array element).; /// \param AssignmentOps List of helper expressions that represents assignment; /// operation:; /// \code; /// DstExprs = SrcExprs;; /// \endcode; /// Required for proper codegen of final assignment performed by the; /// lastprivate clause.; /// \param LPKind Lastprivate kind, e.g. 'conditional'.; /// \param LPKindLoc Location of the lastprivate kind.; /// \param ColonLoc Location of the ':' symbol if lastprivate kind is used.; /// \param PreInit Statement that must be executed before entering the OpenMP; /// region with this clause.; /// \param PostUpdate Expression that must be executed after exit from the; /// OpenMP region with this clause.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:444,Modifiability,variab,variables,444,"/// Creates clause with a list of variables \a VL.; ///; /// \param C AST context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param VL List of references to the variables.; /// \param SrcExprs List of helper expressions for proper generation of; /// assignment operation required for lastprivate clause. This list represents; /// private variables (for arrays, single array element).; /// \param DstExprs List of helper expressions for proper generation of; /// assignment operation required for lastprivate clause. This list represents; /// original variables (for arrays, single array element).; /// \param AssignmentOps List of helper expressions that represents assignment; /// operation:; /// \code; /// DstExprs = SrcExprs;; /// \endcode; /// Required for proper codegen of final assignment performed by the; /// lastprivate clause.; /// \param LPKind Lastprivate kind, e.g. 'conditional'.; /// \param LPKindLoc Location of the lastprivate kind.; /// \param ColonLoc Location of the ':' symbol if lastprivate kind is used.; /// \param PreInit Statement that must be executed before entering the OpenMP; /// region with this clause.; /// \param PostUpdate Expression that must be executed after exit from the; /// OpenMP region with this clause.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:657,Modifiability,variab,variables,657,"/// Creates clause with a list of variables \a VL.; ///; /// \param C AST context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param VL List of references to the variables.; /// \param SrcExprs List of helper expressions for proper generation of; /// assignment operation required for lastprivate clause. This list represents; /// private variables (for arrays, single array element).; /// \param DstExprs List of helper expressions for proper generation of; /// assignment operation required for lastprivate clause. This list represents; /// original variables (for arrays, single array element).; /// \param AssignmentOps List of helper expressions that represents assignment; /// operation:; /// \code; /// DstExprs = SrcExprs;; /// \endcode; /// Required for proper codegen of final assignment performed by the; /// lastprivate clause.; /// \param LPKind Lastprivate kind, e.g. 'conditional'.; /// \param LPKindLoc Location of the lastprivate kind.; /// \param ColonLoc Location of the ':' symbol if lastprivate kind is used.; /// \param PreInit Statement that must be executed before entering the OpenMP; /// region with this clause.; /// \param PostUpdate Expression that must be executed after exit from the; /// OpenMP region with this clause.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:903,Performance,perform,performed,903,"/// Creates clause with a list of variables \a VL.; ///; /// \param C AST context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param VL List of references to the variables.; /// \param SrcExprs List of helper expressions for proper generation of; /// assignment operation required for lastprivate clause. This list represents; /// private variables (for arrays, single array element).; /// \param DstExprs List of helper expressions for proper generation of; /// assignment operation required for lastprivate clause. This list represents; /// original variables (for arrays, single array element).; /// \param AssignmentOps List of helper expressions that represents assignment; /// operation:; /// \code; /// DstExprs = SrcExprs;; /// \endcode; /// Required for proper codegen of final assignment performed by the; /// lastprivate clause.; /// \param LPKind Lastprivate kind, e.g. 'conditional'.; /// \param LPKindLoc Location of the lastprivate kind.; /// \param ColonLoc Location of the ':' symbol if lastprivate kind is used.; /// \param PreInit Statement that must be executed before entering the OpenMP; /// region with this clause.; /// \param PostUpdate Expression that must be executed after exit from the; /// OpenMP region with this clause.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:52,Modifiability,variab,variables,52,/// Creates an empty clause with the place for \a N variables.; ///; /// \param C AST context.; /// \param N The number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:123,Modifiability,variab,variables,123,/// Creates an empty clause with the place for \a N variables.; ///; /// \param C AST context.; /// \param N The number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:107,Modifiability,variab,variables,107,"/// Set list of helper expressions, required for generation of private; /// copies of original lastprivate variables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:229,Modifiability,variab,variables,229,"/// This represents clause 'shared' in the '#pragma omp ...' directives.; ///; /// \code; /// #pragma omp parallel shared(a,b); /// \endcode; /// In this example directive '#pragma omp parallel' has clause 'shared'; /// with the variables 'a' and 'b'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:32,Modifiability,variab,variables,32,/// Build clause with number of variables \a N.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param N Number of the variables in the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:224,Modifiability,variab,variables,224,/// Build clause with number of variables \a N.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param N Number of the variables in the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:56,Modifiability,variab,variables,56,/// Build an empty clause.; ///; /// \param N Number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:34,Modifiability,variab,variables,34,/// Creates clause with a list of variables \a VL.; ///; /// \param C AST context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param VL List of references to the variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:267,Modifiability,variab,variables,267,/// Creates clause with a list of variables \a VL.; ///; /// \param C AST context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param VL List of references to the variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:38,Modifiability,variab,variables,38,/// Creates an empty clause with \a N variables.; ///; /// \param C AST context.; /// \param N The number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:109,Modifiability,variab,variables,109,/// Creates an empty clause with \a N variables.; ///; /// \param C AST context.; /// \param N The number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:262,Modifiability,variab,variables,262,"/// This represents clause 'reduction' in the '#pragma omp ...'; /// directives.; ///; /// \code; /// #pragma omp parallel reduction(+:a,b); /// \endcode; /// In this example directive '#pragma omp parallel' has clause 'reduction'; /// with operator '+' and the variables 'a' and 'b'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:32,Modifiability,variab,variables,32,/// Build clause with number of variables \a N.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param ModifierLoc Modifier location.; /// \param ColonLoc Location of ':'.; /// \param EndLoc Ending location of the clause.; /// \param N Number of the variables in the clause.; /// \param QualifierLoc The nested-name qualifier with location information; /// \param NameInfo The full name info for reduction identifier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:305,Modifiability,variab,variables,305,/// Build clause with number of variables \a N.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param ModifierLoc Modifier location.; /// \param ColonLoc Location of ':'.; /// \param EndLoc Ending location of the clause.; /// \param N Number of the variables in the clause.; /// \param QualifierLoc The nested-name qualifier with location information; /// \param NameInfo The full name info for reduction identifier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:56,Modifiability,variab,variables,56,/// Build an empty clause.; ///; /// \param N Number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:147,Modifiability,variab,variable,147,"/// Set list of helper expressions, required for proper codegen of the; /// clause. These expressions represent private copy of the reduction; /// variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:166,Performance,perform,performed,166,"/// Set list of helper expressions, required for proper codegen of the; /// clause. These expressions represent LHS expression in the final; /// reduction expression performed by the reduction clause.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:212,Modifiability,variab,variables,212,"/// Set list of helper expressions, required for proper codegen of the; /// clause. These expressions represent RHS expression in the final; /// reduction expression performed by the reduction clause.; /// Also, variables in these expressions are used for proper initialization of; /// reduction copies.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:166,Performance,perform,performed,166,"/// Set list of helper expressions, required for proper codegen of the; /// clause. These expressions represent RHS expression in the final; /// reduction expression performed by the reduction clause.; /// Also, variables in these expressions are used for proper initialization of; /// reduction copies.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:34,Modifiability,variab,variables,34,"/// Creates clause with a list of variables \a VL.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param ModifierLoc Modifier location.; /// \param ColonLoc Location of ':'.; /// \param EndLoc Ending location of the clause.; /// \param VL The variables in the clause.; /// \param QualifierLoc The nested-name qualifier with location information; /// \param NameInfo The full name info for reduction identifier.; /// \param Privates List of helper expressions for proper generation of; /// private copies.; /// \param LHSExprs List of helper expressions for proper generation of; /// assignment operation required for copyprivate clause. This list represents; /// LHSs of the reduction expressions.; /// \param RHSExprs List of helper expressions for proper generation of; /// assignment operation required for copyprivate clause. This list represents; /// RHSs of the reduction expressions.; /// Also, variables in these expressions are used for proper initialization of; /// reduction copies.; /// \param ReductionOps List of helper expressions that represents reduction; /// expressions:; /// \code; /// LHSExprs binop RHSExprs;; /// operator binop(LHSExpr, RHSExpr);; /// <CutomReduction>(LHSExpr, RHSExpr);; /// \endcode; /// Required for proper codegen of final reduction operation performed by the; /// reduction clause.; /// \param CopyOps List of copy operations for inscan reductions:; /// \code; /// TempExprs = LHSExprs;; /// \endcode; /// \param CopyArrayTemps Temp arrays for prefix sums.; /// \param CopyArrayElems Temp arrays for prefix sums.; /// \param PreInit Statement that must be executed before entering the OpenMP; /// region with this clause.; /// \param PostUpdate Expression that must be executed after exit from the; /// OpenMP region with this clause.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:299,Modifiability,variab,variables,299,"/// Creates clause with a list of variables \a VL.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param ModifierLoc Modifier location.; /// \param ColonLoc Location of ':'.; /// \param EndLoc Ending location of the clause.; /// \param VL The variables in the clause.; /// \param QualifierLoc The nested-name qualifier with location information; /// \param NameInfo The full name info for reduction identifier.; /// \param Privates List of helper expressions for proper generation of; /// private copies.; /// \param LHSExprs List of helper expressions for proper generation of; /// assignment operation required for copyprivate clause. This list represents; /// LHSs of the reduction expressions.; /// \param RHSExprs List of helper expressions for proper generation of; /// assignment operation required for copyprivate clause. This list represents; /// RHSs of the reduction expressions.; /// Also, variables in these expressions are used for proper initialization of; /// reduction copies.; /// \param ReductionOps List of helper expressions that represents reduction; /// expressions:; /// \code; /// LHSExprs binop RHSExprs;; /// operator binop(LHSExpr, RHSExpr);; /// <CutomReduction>(LHSExpr, RHSExpr);; /// \endcode; /// Required for proper codegen of final reduction operation performed by the; /// reduction clause.; /// \param CopyOps List of copy operations for inscan reductions:; /// \code; /// TempExprs = LHSExprs;; /// \endcode; /// \param CopyArrayTemps Temp arrays for prefix sums.; /// \param CopyArrayElems Temp arrays for prefix sums.; /// \param PreInit Statement that must be executed before entering the OpenMP; /// region with this clause.; /// \param PostUpdate Expression that must be executed after exit from the; /// OpenMP region with this clause.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:958,Modifiability,variab,variables,958,"/// Creates clause with a list of variables \a VL.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param ModifierLoc Modifier location.; /// \param ColonLoc Location of ':'.; /// \param EndLoc Ending location of the clause.; /// \param VL The variables in the clause.; /// \param QualifierLoc The nested-name qualifier with location information; /// \param NameInfo The full name info for reduction identifier.; /// \param Privates List of helper expressions for proper generation of; /// private copies.; /// \param LHSExprs List of helper expressions for proper generation of; /// assignment operation required for copyprivate clause. This list represents; /// LHSs of the reduction expressions.; /// \param RHSExprs List of helper expressions for proper generation of; /// assignment operation required for copyprivate clause. This list represents; /// RHSs of the reduction expressions.; /// Also, variables in these expressions are used for proper initialization of; /// reduction copies.; /// \param ReductionOps List of helper expressions that represents reduction; /// expressions:; /// \code; /// LHSExprs binop RHSExprs;; /// operator binop(LHSExpr, RHSExpr);; /// <CutomReduction>(LHSExpr, RHSExpr);; /// \endcode; /// Required for proper codegen of final reduction operation performed by the; /// reduction clause.; /// \param CopyOps List of copy operations for inscan reductions:; /// \code; /// TempExprs = LHSExprs;; /// \endcode; /// \param CopyArrayTemps Temp arrays for prefix sums.; /// \param CopyArrayElems Temp arrays for prefix sums.; /// \param PreInit Statement that must be executed before entering the OpenMP; /// region with this clause.; /// \param PostUpdate Expression that must be executed after exit from the; /// OpenMP region with this clause.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:1343,Performance,perform,performed,1343,"/// Creates clause with a list of variables \a VL.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param ModifierLoc Modifier location.; /// \param ColonLoc Location of ':'.; /// \param EndLoc Ending location of the clause.; /// \param VL The variables in the clause.; /// \param QualifierLoc The nested-name qualifier with location information; /// \param NameInfo The full name info for reduction identifier.; /// \param Privates List of helper expressions for proper generation of; /// private copies.; /// \param LHSExprs List of helper expressions for proper generation of; /// assignment operation required for copyprivate clause. This list represents; /// LHSs of the reduction expressions.; /// \param RHSExprs List of helper expressions for proper generation of; /// assignment operation required for copyprivate clause. This list represents; /// RHSs of the reduction expressions.; /// Also, variables in these expressions are used for proper initialization of; /// reduction copies.; /// \param ReductionOps List of helper expressions that represents reduction; /// expressions:; /// \code; /// LHSExprs binop RHSExprs;; /// operator binop(LHSExpr, RHSExpr);; /// <CutomReduction>(LHSExpr, RHSExpr);; /// \endcode; /// Required for proper codegen of final reduction operation performed by the; /// reduction clause.; /// \param CopyOps List of copy operations for inscan reductions:; /// \code; /// TempExprs = LHSExprs;; /// \endcode; /// \param CopyArrayTemps Temp arrays for prefix sums.; /// \param CopyArrayElems Temp arrays for prefix sums.; /// \param PreInit Statement that must be executed before entering the OpenMP; /// region with this clause.; /// \param PostUpdate Expression that must be executed after exit from the; /// OpenMP region with this clause.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:52,Modifiability,variab,variables,52,/// Creates an empty clause with the place for \a N variables.; ///; /// \param C AST context.; /// \param N The number of variables.; /// \param Modifier Reduction modifier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:123,Modifiability,variab,variables,123,/// Creates an empty clause with the place for \a N variables.; ///; /// \param C AST context.; /// \param N The number of variables.; /// \param Modifier Reduction modifier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:285,Modifiability,variab,variables,285,"/// This represents clause 'task_reduction' in the '#pragma omp taskgroup'; /// directives.; ///; /// \code; /// #pragma omp taskgroup task_reduction(+:a,b); /// \endcode; /// In this example directive '#pragma omp taskgroup' has clause; /// 'task_reduction' with operator '+' and the variables 'a' and 'b'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:32,Modifiability,variab,variables,32,/// Build clause with number of variables \a N.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param ColonLoc Location of ':'.; /// \param N Number of the variables in the clause.; /// \param QualifierLoc The nested-name qualifier with location information; /// \param NameInfo The full name info for reduction identifier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:262,Modifiability,variab,variables,262,/// Build clause with number of variables \a N.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param ColonLoc Location of ':'.; /// \param N Number of the variables in the clause.; /// \param QualifierLoc The nested-name qualifier with location information; /// \param NameInfo The full name info for reduction identifier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:56,Modifiability,variab,variables,56,/// Build an empty clause.; ///; /// \param N Number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:142,Modifiability,variab,variable,142,"/// Set list of helper expressions, required for proper codegen of the clause.; /// These expressions represent private copy of the reduction variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:166,Performance,perform,performed,166,"/// Set list of helper expressions, required for proper codegen of the clause.; /// These expressions represent LHS expression in the final reduction; /// expression performed by the reduction clause.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:207,Modifiability,variab,variables,207,"/// Set list of helper expressions, required for proper codegen of the clause.; /// These expressions represent RHS expression in the final reduction; /// expression performed by the reduction clause. Also, variables in these; /// expressions are used for proper initialization of reduction copies.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:166,Performance,perform,performed,166,"/// Set list of helper expressions, required for proper codegen of the clause.; /// These expressions represent RHS expression in the final reduction; /// expression performed by the reduction clause. Also, variables in these; /// expressions are used for proper initialization of reduction copies.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:34,Modifiability,variab,variables,34,"/// Creates clause with a list of variables \a VL.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param ColonLoc Location of ':'.; /// \param EndLoc Ending location of the clause.; /// \param VL The variables in the clause.; /// \param QualifierLoc The nested-name qualifier with location information; /// \param NameInfo The full name info for reduction identifier.; /// \param Privates List of helper expressions for proper generation of; /// private copies.; /// \param LHSExprs List of helper expressions for proper generation of; /// assignment operation required for copyprivate clause. This list represents; /// LHSs of the reduction expressions.; /// \param RHSExprs List of helper expressions for proper generation of; /// assignment operation required for copyprivate clause. This list represents; /// RHSs of the reduction expressions.; /// Also, variables in these expressions are used for proper initialization of; /// reduction copies.; /// \param ReductionOps List of helper expressions that represents reduction; /// expressions:; /// \code; /// LHSExprs binop RHSExprs;; /// operator binop(LHSExpr, RHSExpr);; /// <CutomReduction>(LHSExpr, RHSExpr);; /// \endcode; /// Required for proper codegen of final reduction operation performed by the; /// reduction clause.; /// \param PreInit Statement that must be executed before entering the OpenMP; /// region with this clause.; /// \param PostUpdate Expression that must be executed after exit from the; /// OpenMP region with this clause.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:256,Modifiability,variab,variables,256,"/// Creates clause with a list of variables \a VL.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param ColonLoc Location of ':'.; /// \param EndLoc Ending location of the clause.; /// \param VL The variables in the clause.; /// \param QualifierLoc The nested-name qualifier with location information; /// \param NameInfo The full name info for reduction identifier.; /// \param Privates List of helper expressions for proper generation of; /// private copies.; /// \param LHSExprs List of helper expressions for proper generation of; /// assignment operation required for copyprivate clause. This list represents; /// LHSs of the reduction expressions.; /// \param RHSExprs List of helper expressions for proper generation of; /// assignment operation required for copyprivate clause. This list represents; /// RHSs of the reduction expressions.; /// Also, variables in these expressions are used for proper initialization of; /// reduction copies.; /// \param ReductionOps List of helper expressions that represents reduction; /// expressions:; /// \code; /// LHSExprs binop RHSExprs;; /// operator binop(LHSExpr, RHSExpr);; /// <CutomReduction>(LHSExpr, RHSExpr);; /// \endcode; /// Required for proper codegen of final reduction operation performed by the; /// reduction clause.; /// \param PreInit Statement that must be executed before entering the OpenMP; /// region with this clause.; /// \param PostUpdate Expression that must be executed after exit from the; /// OpenMP region with this clause.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:915,Modifiability,variab,variables,915,"/// Creates clause with a list of variables \a VL.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param ColonLoc Location of ':'.; /// \param EndLoc Ending location of the clause.; /// \param VL The variables in the clause.; /// \param QualifierLoc The nested-name qualifier with location information; /// \param NameInfo The full name info for reduction identifier.; /// \param Privates List of helper expressions for proper generation of; /// private copies.; /// \param LHSExprs List of helper expressions for proper generation of; /// assignment operation required for copyprivate clause. This list represents; /// LHSs of the reduction expressions.; /// \param RHSExprs List of helper expressions for proper generation of; /// assignment operation required for copyprivate clause. This list represents; /// RHSs of the reduction expressions.; /// Also, variables in these expressions are used for proper initialization of; /// reduction copies.; /// \param ReductionOps List of helper expressions that represents reduction; /// expressions:; /// \code; /// LHSExprs binop RHSExprs;; /// operator binop(LHSExpr, RHSExpr);; /// <CutomReduction>(LHSExpr, RHSExpr);; /// \endcode; /// Required for proper codegen of final reduction operation performed by the; /// reduction clause.; /// \param PreInit Statement that must be executed before entering the OpenMP; /// region with this clause.; /// \param PostUpdate Expression that must be executed after exit from the; /// OpenMP region with this clause.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:1300,Performance,perform,performed,1300,"/// Creates clause with a list of variables \a VL.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param ColonLoc Location of ':'.; /// \param EndLoc Ending location of the clause.; /// \param VL The variables in the clause.; /// \param QualifierLoc The nested-name qualifier with location information; /// \param NameInfo The full name info for reduction identifier.; /// \param Privates List of helper expressions for proper generation of; /// private copies.; /// \param LHSExprs List of helper expressions for proper generation of; /// assignment operation required for copyprivate clause. This list represents; /// LHSs of the reduction expressions.; /// \param RHSExprs List of helper expressions for proper generation of; /// assignment operation required for copyprivate clause. This list represents; /// RHSs of the reduction expressions.; /// Also, variables in these expressions are used for proper initialization of; /// reduction copies.; /// \param ReductionOps List of helper expressions that represents reduction; /// expressions:; /// \code; /// LHSExprs binop RHSExprs;; /// operator binop(LHSExpr, RHSExpr);; /// <CutomReduction>(LHSExpr, RHSExpr);; /// \endcode; /// Required for proper codegen of final reduction operation performed by the; /// reduction clause.; /// \param PreInit Statement that must be executed before entering the OpenMP; /// region with this clause.; /// \param PostUpdate Expression that must be executed after exit from the; /// OpenMP region with this clause.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:52,Modifiability,variab,variables,52,/// Creates an empty clause with the place for \a N variables.; ///; /// \param C AST context.; /// \param N The number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:123,Modifiability,variab,variables,123,/// Creates an empty clause with the place for \a N variables.; ///; /// \param C AST context.; /// \param N The number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:259,Modifiability,variab,variables,259,"/// This represents clause 'in_reduction' in the '#pragma omp task' directives.; ///; /// \code; /// #pragma omp task in_reduction(+:a,b); /// \endcode; /// In this example directive '#pragma omp task' has clause 'in_reduction' with; /// operator '+' and the variables 'a' and 'b'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:32,Modifiability,variab,variables,32,/// Build clause with number of variables \a N.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param ColonLoc Location of ':'.; /// \param N Number of the variables in the clause.; /// \param QualifierLoc The nested-name qualifier with location information; /// \param NameInfo The full name info for reduction identifier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:262,Modifiability,variab,variables,262,/// Build clause with number of variables \a N.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param ColonLoc Location of ':'.; /// \param N Number of the variables in the clause.; /// \param QualifierLoc The nested-name qualifier with location information; /// \param NameInfo The full name info for reduction identifier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:56,Modifiability,variab,variables,56,/// Build an empty clause.; ///; /// \param N Number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:142,Modifiability,variab,variable,142,"/// Set list of helper expressions, required for proper codegen of the clause.; /// These expressions represent private copy of the reduction variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:166,Performance,perform,performed,166,"/// Set list of helper expressions, required for proper codegen of the clause.; /// These expressions represent LHS expression in the final reduction; /// expression performed by the reduction clause.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:207,Modifiability,variab,variables,207,"/// Set list of helper expressions, required for proper codegen of the clause.; /// These expressions represent RHS expression in the final reduction; /// expression performed by the reduction clause. Also, variables in these; /// expressions are used for proper initialization of reduction copies.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:166,Performance,perform,performed,166,"/// Set list of helper expressions, required for proper codegen of the clause.; /// These expressions represent RHS expression in the final reduction; /// expression performed by the reduction clause. Also, variables in these; /// expressions are used for proper initialization of reduction copies.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:34,Modifiability,variab,variables,34,"/// Creates clause with a list of variables \a VL.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param ColonLoc Location of ':'.; /// \param EndLoc Ending location of the clause.; /// \param VL The variables in the clause.; /// \param QualifierLoc The nested-name qualifier with location information; /// \param NameInfo The full name info for reduction identifier.; /// \param Privates List of helper expressions for proper generation of; /// private copies.; /// \param LHSExprs List of helper expressions for proper generation of; /// assignment operation required for copyprivate clause. This list represents; /// LHSs of the reduction expressions.; /// \param RHSExprs List of helper expressions for proper generation of; /// assignment operation required for copyprivate clause. This list represents; /// RHSs of the reduction expressions.; /// Also, variables in these expressions are used for proper initialization of; /// reduction copies.; /// \param ReductionOps List of helper expressions that represents reduction; /// expressions:; /// \code; /// LHSExprs binop RHSExprs;; /// operator binop(LHSExpr, RHSExpr);; /// <CutomReduction>(LHSExpr, RHSExpr);; /// \endcode; /// Required for proper codegen of final reduction operation performed by the; /// reduction clause.; /// \param TaskgroupDescriptors List of helper taskgroup descriptors for; /// corresponding items in parent taskgroup task_reduction clause.; /// \param PreInit Statement that must be executed before entering the OpenMP; /// region with this clause.; /// \param PostUpdate Expression that must be executed after exit from the; /// OpenMP region with this clause.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:256,Modifiability,variab,variables,256,"/// Creates clause with a list of variables \a VL.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param ColonLoc Location of ':'.; /// \param EndLoc Ending location of the clause.; /// \param VL The variables in the clause.; /// \param QualifierLoc The nested-name qualifier with location information; /// \param NameInfo The full name info for reduction identifier.; /// \param Privates List of helper expressions for proper generation of; /// private copies.; /// \param LHSExprs List of helper expressions for proper generation of; /// assignment operation required for copyprivate clause. This list represents; /// LHSs of the reduction expressions.; /// \param RHSExprs List of helper expressions for proper generation of; /// assignment operation required for copyprivate clause. This list represents; /// RHSs of the reduction expressions.; /// Also, variables in these expressions are used for proper initialization of; /// reduction copies.; /// \param ReductionOps List of helper expressions that represents reduction; /// expressions:; /// \code; /// LHSExprs binop RHSExprs;; /// operator binop(LHSExpr, RHSExpr);; /// <CutomReduction>(LHSExpr, RHSExpr);; /// \endcode; /// Required for proper codegen of final reduction operation performed by the; /// reduction clause.; /// \param TaskgroupDescriptors List of helper taskgroup descriptors for; /// corresponding items in parent taskgroup task_reduction clause.; /// \param PreInit Statement that must be executed before entering the OpenMP; /// region with this clause.; /// \param PostUpdate Expression that must be executed after exit from the; /// OpenMP region with this clause.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:915,Modifiability,variab,variables,915,"/// Creates clause with a list of variables \a VL.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param ColonLoc Location of ':'.; /// \param EndLoc Ending location of the clause.; /// \param VL The variables in the clause.; /// \param QualifierLoc The nested-name qualifier with location information; /// \param NameInfo The full name info for reduction identifier.; /// \param Privates List of helper expressions for proper generation of; /// private copies.; /// \param LHSExprs List of helper expressions for proper generation of; /// assignment operation required for copyprivate clause. This list represents; /// LHSs of the reduction expressions.; /// \param RHSExprs List of helper expressions for proper generation of; /// assignment operation required for copyprivate clause. This list represents; /// RHSs of the reduction expressions.; /// Also, variables in these expressions are used for proper initialization of; /// reduction copies.; /// \param ReductionOps List of helper expressions that represents reduction; /// expressions:; /// \code; /// LHSExprs binop RHSExprs;; /// operator binop(LHSExpr, RHSExpr);; /// <CutomReduction>(LHSExpr, RHSExpr);; /// \endcode; /// Required for proper codegen of final reduction operation performed by the; /// reduction clause.; /// \param TaskgroupDescriptors List of helper taskgroup descriptors for; /// corresponding items in parent taskgroup task_reduction clause.; /// \param PreInit Statement that must be executed before entering the OpenMP; /// region with this clause.; /// \param PostUpdate Expression that must be executed after exit from the; /// OpenMP region with this clause.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:1300,Performance,perform,performed,1300,"/// Creates clause with a list of variables \a VL.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param ColonLoc Location of ':'.; /// \param EndLoc Ending location of the clause.; /// \param VL The variables in the clause.; /// \param QualifierLoc The nested-name qualifier with location information; /// \param NameInfo The full name info for reduction identifier.; /// \param Privates List of helper expressions for proper generation of; /// private copies.; /// \param LHSExprs List of helper expressions for proper generation of; /// assignment operation required for copyprivate clause. This list represents; /// LHSs of the reduction expressions.; /// \param RHSExprs List of helper expressions for proper generation of; /// assignment operation required for copyprivate clause. This list represents; /// RHSs of the reduction expressions.; /// Also, variables in these expressions are used for proper initialization of; /// reduction copies.; /// \param ReductionOps List of helper expressions that represents reduction; /// expressions:; /// \code; /// LHSExprs binop RHSExprs;; /// operator binop(LHSExpr, RHSExpr);; /// <CutomReduction>(LHSExpr, RHSExpr);; /// \endcode; /// Required for proper codegen of final reduction operation performed by the; /// reduction clause.; /// \param TaskgroupDescriptors List of helper taskgroup descriptors for; /// corresponding items in parent taskgroup task_reduction clause.; /// \param PreInit Statement that must be executed before entering the OpenMP; /// region with this clause.; /// \param PostUpdate Expression that must be executed after exit from the; /// OpenMP region with this clause.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:52,Modifiability,variab,variables,52,/// Creates an empty clause with the place for \a N variables.; ///; /// \param C AST context.; /// \param N The number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:123,Modifiability,variab,variables,123,/// Creates an empty clause with the place for \a N variables.; ///; /// \param C AST context.; /// \param N The number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:226,Modifiability,variab,variables,226,"/// This represents clause 'linear' in the '#pragma omp ...'; /// directives.; ///; /// \code; /// #pragma omp simd linear(a,b : 2); /// \endcode; /// In this example directive '#pragma omp simd' has clause 'linear'; /// with variables 'a', 'b' and linear step '2'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:47,Modifiability,variab,variables,47,/// Build 'linear' clause with given number of variables \a NumVars.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param ColonLoc Location of ':'.; /// \param StepModifierLoc Location of 'step' modifier.; /// \param EndLoc Ending location of the clause.; /// \param NumVars Number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:342,Modifiability,variab,variables,342,/// Build 'linear' clause with given number of variables \a NumVars.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param ColonLoc Location of ':'.; /// \param StepModifierLoc Location of 'step' modifier.; /// \param EndLoc Ending location of the clause.; /// \param NumVars Number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:62,Modifiability,variab,variables,62,/// Build an empty clause.; ///; /// \param NumVars Number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:181,Deployability,update,update,181,"/// Gets the list of initial values for linear variables.; ///; /// There are NumVars expressions with initial values allocated after the; /// varlist, they are followed by NumVars update expressions (used to update; /// the linear variable's value on current iteration) and they are followed by; /// NumVars final expressions (used to calculate the linear variable's; /// value after the loop body). After these lists, there are 2 helper; /// expressions - linear step and a helper to calculate it before the; /// loop body (used when the linear step is not constant):; ///; /// { Vars[] /* in OMPVarListClause */; Privates[]; Inits[]; Updates[];; /// Finals[]; Step; CalcStep; }",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:209,Deployability,update,update,209,"/// Gets the list of initial values for linear variables.; ///; /// There are NumVars expressions with initial values allocated after the; /// varlist, they are followed by NumVars update expressions (used to update; /// the linear variable's value on current iteration) and they are followed by; /// NumVars final expressions (used to calculate the linear variable's; /// value after the loop body). After these lists, there are 2 helper; /// expressions - linear step and a helper to calculate it before the; /// loop body (used when the linear step is not constant):; ///; /// { Vars[] /* in OMPVarListClause */; Privates[]; Inits[]; Updates[];; /// Finals[]; Step; CalcStep; }",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:637,Deployability,Update,Updates,637,"/// Gets the list of initial values for linear variables.; ///; /// There are NumVars expressions with initial values allocated after the; /// varlist, they are followed by NumVars update expressions (used to update; /// the linear variable's value on current iteration) and they are followed by; /// NumVars final expressions (used to calculate the linear variable's; /// value after the loop body). After these lists, there are 2 helper; /// expressions - linear step and a helper to calculate it before the; /// loop body (used when the linear step is not constant):; ///; /// { Vars[] /* in OMPVarListClause */; Privates[]; Inits[]; Updates[];; /// Finals[]; Step; CalcStep; }",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:118,Energy Efficiency,allocate,allocated,118,"/// Gets the list of initial values for linear variables.; ///; /// There are NumVars expressions with initial values allocated after the; /// varlist, they are followed by NumVars update expressions (used to update; /// the linear variable's value on current iteration) and they are followed by; /// NumVars final expressions (used to calculate the linear variable's; /// value after the loop body). After these lists, there are 2 helper; /// expressions - linear step and a helper to calculate it before the; /// loop body (used when the linear step is not constant):; ///; /// { Vars[] /* in OMPVarListClause */; Privates[]; Inits[]; Updates[];; /// Finals[]; Step; CalcStep; }",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:47,Modifiability,variab,variables,47,"/// Gets the list of initial values for linear variables.; ///; /// There are NumVars expressions with initial values allocated after the; /// varlist, they are followed by NumVars update expressions (used to update; /// the linear variable's value on current iteration) and they are followed by; /// NumVars final expressions (used to calculate the linear variable's; /// value after the loop body). After these lists, there are 2 helper; /// expressions - linear step and a helper to calculate it before the; /// loop body (used when the linear step is not constant):; ///; /// { Vars[] /* in OMPVarListClause */; Privates[]; Inits[]; Updates[];; /// Finals[]; Step; CalcStep; }",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:232,Modifiability,variab,variable,232,"/// Gets the list of initial values for linear variables.; ///; /// There are NumVars expressions with initial values allocated after the; /// varlist, they are followed by NumVars update expressions (used to update; /// the linear variable's value on current iteration) and they are followed by; /// NumVars final expressions (used to calculate the linear variable's; /// value after the loop body). After these lists, there are 2 helper; /// expressions - linear step and a helper to calculate it before the; /// loop body (used when the linear step is not constant):; ///; /// { Vars[] /* in OMPVarListClause */; Privates[]; Inits[]; Updates[];; /// Finals[]; Step; CalcStep; }",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:357,Modifiability,variab,variable,357,"/// Gets the list of initial values for linear variables.; ///; /// There are NumVars expressions with initial values allocated after the; /// varlist, they are followed by NumVars update expressions (used to update; /// the linear variable's value on current iteration) and they are followed by; /// NumVars final expressions (used to calculate the linear variable's; /// value after the loop body). After these lists, there are 2 helper; /// expressions - linear step and a helper to calculate it before the; /// loop body (used when the linear step is not constant):; ///; /// { Vars[] /* in OMPVarListClause */; Privates[]; Inits[]; Updates[];; /// Finals[]; Step; CalcStep; }",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:21,Deployability,update,update,21,/// Sets the list of update expressions for linear variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:51,Modifiability,variab,variables,51,/// Sets the list of update expressions for linear variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:27,Deployability,update,update,27,/// Sets the list of final update expressions for linear variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:57,Modifiability,variab,variables,57,/// Sets the list of final update expressions for linear variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:49,Modifiability,variab,variables,49,/// Gets the list of used expressions for linear variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:51,Modifiability,variab,variables,51,/// Sets the list of the copies of original linear variables.; /// \param PL List of expressions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:51,Modifiability,variab,variables,51,/// Sets the list of the initial values for linear variables.; /// \param IL List of expressions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:34,Modifiability,variab,variables,34,/// Creates clause with a list of variables \a VL and a linear step; /// \a Step.; ///; /// \param C AST Context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param Modifier Modifier of 'linear' clause.; /// \param ModifierLoc Modifier location.; /// \param ColonLoc Location of ':'.; /// \param StepModifierLoc Location of 'step' modifier.; /// \param EndLoc Ending location of the clause.; /// \param VL List of references to the variables.; /// \param PL List of private copies of original variables.; /// \param IL List of initial values for the variables.; /// \param Step Linear step.; /// \param CalcStep Calculation of the linear step.; /// \param PreInit Statement that must be executed before entering the OpenMP; /// region with this clause.; /// \param PostUpdate Expression that must be executed after exit from the; /// OpenMP region with this clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:486,Modifiability,variab,variables,486,/// Creates clause with a list of variables \a VL and a linear step; /// \a Step.; ///; /// \param C AST Context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param Modifier Modifier of 'linear' clause.; /// \param ModifierLoc Modifier location.; /// \param ColonLoc Location of ':'.; /// \param StepModifierLoc Location of 'step' modifier.; /// \param EndLoc Ending location of the clause.; /// \param VL List of references to the variables.; /// \param PL List of private copies of original variables.; /// \param IL List of initial values for the variables.; /// \param Step Linear step.; /// \param CalcStep Calculation of the linear step.; /// \param PreInit Statement that must be executed before entering the OpenMP; /// region with this clause.; /// \param PostUpdate Expression that must be executed after exit from the; /// OpenMP region with this clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:547,Modifiability,variab,variables,547,/// Creates clause with a list of variables \a VL and a linear step; /// \a Step.; ///; /// \param C AST Context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param Modifier Modifier of 'linear' clause.; /// \param ModifierLoc Modifier location.; /// \param ColonLoc Location of ':'.; /// \param StepModifierLoc Location of 'step' modifier.; /// \param EndLoc Ending location of the clause.; /// \param VL List of references to the variables.; /// \param PL List of private copies of original variables.; /// \param IL List of initial values for the variables.; /// \param Step Linear step.; /// \param CalcStep Calculation of the linear step.; /// \param PreInit Statement that must be executed before entering the OpenMP; /// region with this clause.; /// \param PostUpdate Expression that must be executed after exit from the; /// OpenMP region with this clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:604,Modifiability,variab,variables,604,/// Creates clause with a list of variables \a VL and a linear step; /// \a Step.; ///; /// \param C AST Context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param Modifier Modifier of 'linear' clause.; /// \param ModifierLoc Modifier location.; /// \param ColonLoc Location of ':'.; /// \param StepModifierLoc Location of 'step' modifier.; /// \param EndLoc Ending location of the clause.; /// \param VL List of references to the variables.; /// \param PL List of private copies of original variables.; /// \param IL List of initial values for the variables.; /// \param Step Linear step.; /// \param CalcStep Calculation of the linear step.; /// \param PreInit Statement that must be executed before entering the OpenMP; /// region with this clause.; /// \param PostUpdate Expression that must be executed after exit from the; /// OpenMP region with this clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:58,Modifiability,variab,variables,58,/// Creates an empty clause with the place for \a NumVars variables.; ///; /// \param C AST context.; /// \param NumVars Number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:131,Modifiability,variab,variables,131,/// Creates an empty clause with the place for \a NumVars variables.; ///; /// \param C AST context.; /// \param NumVars Number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:21,Deployability,update,update,21,/// Sets the list of update expressions for linear variables.; /// \param UL List of expressions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:51,Modifiability,variab,variables,51,/// Sets the list of update expressions for linear variables.; /// \param UL List of expressions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:27,Deployability,update,update,27,/// Sets the list of final update expressions for linear variables.; /// \param FL List of expressions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:57,Modifiability,variab,variables,57,/// Sets the list of final update expressions for linear variables.; /// \param FL List of expressions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:229,Modifiability,variab,variables,229,"/// This represents clause 'aligned' in the '#pragma omp ...'; /// directives.; ///; /// \code; /// #pragma omp simd aligned(a,b : 8); /// \endcode; /// In this example directive '#pragma omp simd' has clause 'aligned'; /// with variables 'a', 'b' and alignment '8'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:48,Modifiability,variab,variables,48,/// Build 'aligned' clause with given number of variables \a NumVars.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param ColonLoc Location of ':'.; /// \param EndLoc Ending location of the clause.; /// \param NumVars Number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:286,Modifiability,variab,variables,286,/// Build 'aligned' clause with given number of variables \a NumVars.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param ColonLoc Location of ':'.; /// \param EndLoc Ending location of the clause.; /// \param NumVars Number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:62,Modifiability,variab,variables,62,/// Build an empty clause.; ///; /// \param NumVars Number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:34,Modifiability,variab,variables,34,/// Creates clause with a list of variables \a VL and alignment \a A.; ///; /// \param C AST Context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param ColonLoc Location of ':'.; /// \param EndLoc Ending location of the clause.; /// \param VL List of references to the variables.; /// \param A Alignment.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:324,Modifiability,variab,variables,324,/// Creates clause with a list of variables \a VL and alignment \a A.; ///; /// \param C AST Context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param ColonLoc Location of ':'.; /// \param EndLoc Ending location of the clause.; /// \param VL List of references to the variables.; /// \param A Alignment.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:58,Modifiability,variab,variables,58,/// Creates an empty clause with the place for \a NumVars variables.; ///; /// \param C AST context.; /// \param NumVars Number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:131,Modifiability,variab,variables,131,/// Creates an empty clause with the place for \a NumVars variables.; ///; /// \param C AST context.; /// \param NumVars Number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:229,Modifiability,variab,variables,229,"/// This represents clause 'copyin' in the '#pragma omp ...' directives.; ///; /// \code; /// #pragma omp parallel copyin(a,b); /// \endcode; /// In this example directive '#pragma omp parallel' has clause 'copyin'; /// with the variables 'a' and 'b'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:31,Energy Efficiency,allocate,allocated,31,// Class has 3 additional tail allocated arrays:; // 1. List of helper expressions for proper generation of assignment operation; // required for copyin clause. This list represents sources.; // 2. List of helper expressions for proper generation of assignment operation; // required for copyin clause. This list represents destinations.; // 3. List of helper expressions that represents assignment operation:; // \code; // DstExprs = SrcExprs;; // \endcode; // Required for proper codegen of propagation of master's thread values of; // threadprivate variables to local instances of that variables in other; // implicit threads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:552,Modifiability,variab,variables,552,// Class has 3 additional tail allocated arrays:; // 1. List of helper expressions for proper generation of assignment operation; // required for copyin clause. This list represents sources.; // 2. List of helper expressions for proper generation of assignment operation; // required for copyin clause. This list represents destinations.; // 3. List of helper expressions that represents assignment operation:; // \code; // DstExprs = SrcExprs;; // \endcode; // Required for proper codegen of propagation of master's thread values of; // threadprivate variables to local instances of that variables in other; // implicit threads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:589,Modifiability,variab,variables,589,// Class has 3 additional tail allocated arrays:; // 1. List of helper expressions for proper generation of assignment operation; // required for copyin clause. This list represents sources.; // 2. List of helper expressions for proper generation of assignment operation; // required for copyin clause. This list represents destinations.; // 3. List of helper expressions that represents assignment operation:; // \code; // DstExprs = SrcExprs;; // \endcode; // Required for proper codegen of propagation of master's thread values of; // threadprivate variables to local instances of that variables in other; // implicit threads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:32,Modifiability,variab,variables,32,/// Build clause with number of variables \a N.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param N Number of the variables in the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:224,Modifiability,variab,variables,224,/// Build clause with number of variables \a N.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param N Number of the variables in the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:56,Modifiability,variab,variables,56,/// Build an empty clause.; ///; /// \param N Number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:169,Performance,perform,performed,169,"/// Set list of helper expressions, required for proper codegen of the; /// clause. These expressions represent source expression in the final; /// assignment statement performed by the copyin clause.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:174,Performance,perform,performed,174,"/// Set list of helper expressions, required for proper codegen of the; /// clause. These expressions represent destination expression in the final; /// assignment statement performed by the copyin clause.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:34,Modifiability,variab,variables,34,/// Creates clause with a list of variables \a VL.; ///; /// \param C AST context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param VL List of references to the variables.; /// \param SrcExprs List of helper expressions for proper generation of; /// assignment operation required for copyin clause. This list represents; /// sources.; /// \param DstExprs List of helper expressions for proper generation of; /// assignment operation required for copyin clause. This list represents; /// destinations.; /// \param AssignmentOps List of helper expressions that represents assignment; /// operation:; /// \code; /// DstExprs = SrcExprs;; /// \endcode; /// Required for proper codegen of propagation of master's thread values of; /// threadprivate variables to local instances of that variables in other; /// implicit threads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:267,Modifiability,variab,variables,267,/// Creates clause with a list of variables \a VL.; ///; /// \param C AST context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param VL List of references to the variables.; /// \param SrcExprs List of helper expressions for proper generation of; /// assignment operation required for copyin clause. This list represents; /// sources.; /// \param DstExprs List of helper expressions for proper generation of; /// assignment operation required for copyin clause. This list represents; /// destinations.; /// \param AssignmentOps List of helper expressions that represents assignment; /// operation:; /// \code; /// DstExprs = SrcExprs;; /// \endcode; /// Required for proper codegen of propagation of master's thread values of; /// threadprivate variables to local instances of that variables in other; /// implicit threads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:850,Modifiability,variab,variables,850,/// Creates clause with a list of variables \a VL.; ///; /// \param C AST context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param VL List of references to the variables.; /// \param SrcExprs List of helper expressions for proper generation of; /// assignment operation required for copyin clause. This list represents; /// sources.; /// \param DstExprs List of helper expressions for proper generation of; /// assignment operation required for copyin clause. This list represents; /// destinations.; /// \param AssignmentOps List of helper expressions that represents assignment; /// operation:; /// \code; /// DstExprs = SrcExprs;; /// \endcode; /// Required for proper codegen of propagation of master's thread values of; /// threadprivate variables to local instances of that variables in other; /// implicit threads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:887,Modifiability,variab,variables,887,/// Creates clause with a list of variables \a VL.; ///; /// \param C AST context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param VL List of references to the variables.; /// \param SrcExprs List of helper expressions for proper generation of; /// assignment operation required for copyin clause. This list represents; /// sources.; /// \param DstExprs List of helper expressions for proper generation of; /// assignment operation required for copyin clause. This list represents; /// destinations.; /// \param AssignmentOps List of helper expressions that represents assignment; /// operation:; /// \code; /// DstExprs = SrcExprs;; /// \endcode; /// Required for proper codegen of propagation of master's thread values of; /// threadprivate variables to local instances of that variables in other; /// implicit threads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:38,Modifiability,variab,variables,38,/// Creates an empty clause with \a N variables.; ///; /// \param C AST context.; /// \param N The number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:109,Modifiability,variab,variables,109,/// Creates an empty clause with \a N variables.; ///; /// \param C AST context.; /// \param N The number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:245,Modifiability,variab,variables,245,"/// This represents clause 'copyprivate' in the '#pragma omp ...'; /// directives.; ///; /// \code; /// #pragma omp single copyprivate(a,b); /// \endcode; /// In this example directive '#pragma omp single' has clause 'copyprivate'; /// with the variables 'a' and 'b'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:32,Modifiability,variab,variables,32,/// Build clause with number of variables \a N.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param N Number of the variables in the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:224,Modifiability,variab,variables,224,/// Build clause with number of variables \a N.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param N Number of the variables in the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:56,Modifiability,variab,variables,56,/// Build an empty clause.; ///; /// \param N Number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:169,Performance,perform,performed,169,"/// Set list of helper expressions, required for proper codegen of the; /// clause. These expressions represent source expression in the final; /// assignment statement performed by the copyprivate clause.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:174,Performance,perform,performed,174,"/// Set list of helper expressions, required for proper codegen of the; /// clause. These expressions represent destination expression in the final; /// assignment statement performed by the copyprivate clause.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:34,Modifiability,variab,variables,34,/// Creates clause with a list of variables \a VL.; ///; /// \param C AST context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param VL List of references to the variables.; /// \param SrcExprs List of helper expressions for proper generation of; /// assignment operation required for copyprivate clause. This list represents; /// sources.; /// \param DstExprs List of helper expressions for proper generation of; /// assignment operation required for copyprivate clause. This list represents; /// destinations.; /// \param AssignmentOps List of helper expressions that represents assignment; /// operation:; /// \code; /// DstExprs = SrcExprs;; /// \endcode; /// Required for proper codegen of final assignment performed by the; /// copyprivate clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:267,Modifiability,variab,variables,267,/// Creates clause with a list of variables \a VL.; ///; /// \param C AST context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param VL List of references to the variables.; /// \param SrcExprs List of helper expressions for proper generation of; /// assignment operation required for copyprivate clause. This list represents; /// sources.; /// \param DstExprs List of helper expressions for proper generation of; /// assignment operation required for copyprivate clause. This list represents; /// destinations.; /// \param AssignmentOps List of helper expressions that represents assignment; /// operation:; /// \code; /// DstExprs = SrcExprs;; /// \endcode; /// Required for proper codegen of final assignment performed by the; /// copyprivate clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:817,Performance,perform,performed,817,/// Creates clause with a list of variables \a VL.; ///; /// \param C AST context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param VL List of references to the variables.; /// \param SrcExprs List of helper expressions for proper generation of; /// assignment operation required for copyprivate clause. This list represents; /// sources.; /// \param DstExprs List of helper expressions for proper generation of; /// assignment operation required for copyprivate clause. This list represents; /// destinations.; /// \param AssignmentOps List of helper expressions that represents assignment; /// operation:; /// \code; /// DstExprs = SrcExprs;; /// \endcode; /// Required for proper codegen of final assignment performed by the; /// copyprivate clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:38,Modifiability,variab,variables,38,/// Creates an empty clause with \a N variables.; ///; /// \param C AST context.; /// \param N The number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:109,Modifiability,variab,variables,109,/// Creates an empty clause with \a N variables.; ///; /// \param C AST context.; /// \param N The number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:376,Modifiability,variab,variables,376,"/// This represents implicit clause 'flush' for the '#pragma omp flush'; /// directive.; /// This clause does not exist by itself, it can be only as a part of 'omp; /// flush' directive. This clause is introduced to keep the original structure; /// of \a OMPExecutableDirective class and its derivatives and to use the; /// existing infrastructure of clauses with the list of variables.; ///; /// \code; /// #pragma omp flush(a,b); /// \endcode; /// In this example directive '#pragma omp flush' has implicit clause 'flush'; /// with the variables 'a' and 'b'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:538,Modifiability,variab,variables,538,"/// This represents implicit clause 'flush' for the '#pragma omp flush'; /// directive.; /// This clause does not exist by itself, it can be only as a part of 'omp; /// flush' directive. This clause is introduced to keep the original structure; /// of \a OMPExecutableDirective class and its derivatives and to use the; /// existing infrastructure of clauses with the list of variables.; ///; /// \code; /// #pragma omp flush(a,b); /// \endcode; /// In this example directive '#pragma omp flush' has implicit clause 'flush'; /// with the variables 'a' and 'b'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:32,Modifiability,variab,variables,32,/// Build clause with number of variables \a N.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param N Number of the variables in the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:224,Modifiability,variab,variables,224,/// Build clause with number of variables \a N.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param N Number of the variables in the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:56,Modifiability,variab,variables,56,/// Build an empty clause.; ///; /// \param N Number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:34,Modifiability,variab,variables,34,/// Creates clause with a list of variables \a VL.; ///; /// \param C AST context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param VL List of references to the variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:267,Modifiability,variab,variables,267,/// Creates clause with a list of variables \a VL.; ///; /// \param C AST context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param VL List of references to the variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:38,Modifiability,variab,variables,38,/// Creates an empty clause with \a N variables.; ///; /// \param C AST context.; /// \param N The number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:109,Modifiability,variab,variables,109,/// Creates an empty clause with \a N variables.; ///; /// \param C AST context.; /// \param N The number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:379,Modifiability,variab,variables,379,"/// This represents implicit clause 'depobj' for the '#pragma omp depobj'; /// directive.; /// This clause does not exist by itself, it can be only as a part of 'omp; /// depobj' directive. This clause is introduced to keep the original structure; /// of \a OMPExecutableDirective class and its derivatives and to use the; /// existing infrastructure of clauses with the list of variables.; ///; /// \code; /// #pragma omp depobj(a) destroy; /// \endcode; /// In this example directive '#pragma omp depobj' has implicit clause 'depobj'; /// with the depobj 'a'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:32,Modifiability,variab,variables,32,/// Build clause with number of variables \a N.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:37,Integrability,depend,depend,37,"/// This represents implicit clause 'depend' for the '#pragma omp task'; /// directive.; ///; /// \code; /// #pragma omp task depend(in:a,b); /// \endcode; /// In this example directive '#pragma omp task' with clause 'depend' with the; /// variables 'a' and 'b' with dependency 'in'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:126,Integrability,depend,depend,126,"/// This represents implicit clause 'depend' for the '#pragma omp task'; /// directive.; ///; /// \code; /// #pragma omp task depend(in:a,b); /// \endcode; /// In this example directive '#pragma omp task' with clause 'depend' with the; /// variables 'a' and 'b' with dependency 'in'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:218,Integrability,depend,depend,218,"/// This represents implicit clause 'depend' for the '#pragma omp task'; /// directive.; ///; /// \code; /// #pragma omp task depend(in:a,b); /// \endcode; /// In this example directive '#pragma omp task' with clause 'depend' with the; /// variables 'a' and 'b' with dependency 'in'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:267,Integrability,depend,dependency,267,"/// This represents implicit clause 'depend' for the '#pragma omp task'; /// directive.; ///; /// \code; /// #pragma omp task depend(in:a,b); /// \endcode; /// In this example directive '#pragma omp task' with clause 'depend' with the; /// variables 'a' and 'b' with dependency 'in'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:240,Modifiability,variab,variables,240,"/// This represents implicit clause 'depend' for the '#pragma omp task'; /// directive.; ///; /// \code; /// #pragma omp task depend(in:a,b); /// \endcode; /// In this example directive '#pragma omp task' with clause 'depend' with the; /// variables 'a' and 'b' with dependency 'in'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:4,Integrability,Depend,Dependency,4,"/// Dependency type (one of in, out, inout).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:4,Integrability,Depend,Dependency,4,/// Dependency type location.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:4,Integrability,Depend,Dependency,4,/// Dependency type and source locations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:41,Integrability,depend,depend,41,"/// Number of loops, associated with the depend clause.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:315,Integrability,depend,depend,315,/// Build clause with number of variables \a N.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param N Number of the variables in the clause.; /// \param NumLoops Number of loops that is associated with this depend; /// clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:32,Modifiability,variab,variables,32,/// Build clause with number of variables \a N.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param N Number of the variables in the clause.; /// \param NumLoops Number of loops that is associated with this depend; /// clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:224,Modifiability,variab,variables,224,/// Build clause with number of variables \a N.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param N Number of the variables in the clause.; /// \param NumLoops Number of loops that is associated with this depend; /// clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:133,Integrability,depend,depend,133,/// Build an empty clause.; ///; /// \param N Number of variables.; /// \param NumLoops Number of loops that is associated with this depend; /// clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:56,Modifiability,variab,variables,56,/// Build an empty clause.; ///; /// \param N Number of variables.; /// \param NumLoops Number of loops that is associated with this depend; /// clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:8,Integrability,depend,dependency,8,/// Set dependency kind.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:8,Integrability,depend,dependency,8,/// Set dependency kind and its location.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:18,Integrability,depend,dependency,18,/// Sets optional dependency modifier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:243,Integrability,Depend,Dependency,243,/// Creates clause with a list of variables \a VL.; ///; /// \param C AST context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param Data Dependency type and source locations.; /// \param VL List of references to the variables.; /// \param NumLoops Number of loops that is associated with this depend; /// clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:399,Integrability,depend,depend,399,/// Creates clause with a list of variables \a VL.; ///; /// \param C AST context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param Data Dependency type and source locations.; /// \param VL List of references to the variables.; /// \param NumLoops Number of loops that is associated with this depend; /// clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:34,Modifiability,variab,variables,34,/// Creates clause with a list of variables \a VL.; ///; /// \param C AST context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param Data Dependency type and source locations.; /// \param VL List of references to the variables.; /// \param NumLoops Number of loops that is associated with this depend; /// clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:322,Modifiability,variab,variables,322,/// Creates clause with a list of variables \a VL.; ///; /// \param C AST context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param Data Dependency type and source locations.; /// \param VL List of references to the variables.; /// \param NumLoops Number of loops that is associated with this depend; /// clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:186,Integrability,depend,depend,186,/// Creates an empty clause with \a N variables.; ///; /// \param C AST context.; /// \param N The number of variables.; /// \param NumLoops Number of loops that is associated with this depend; /// clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:38,Modifiability,variab,variables,38,/// Creates an empty clause with \a N variables.; ///; /// \param C AST context.; /// \param N The number of variables.; /// \param NumLoops Number of loops that is associated with this depend; /// clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:109,Modifiability,variab,variables,109,/// Creates an empty clause with \a N variables.; ///; /// \param C AST context.; /// \param N The number of variables.; /// \param NumLoops Number of loops that is associated with this depend; /// clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:8,Integrability,depend,dependency,8,/// Get dependency type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:8,Integrability,depend,dependency,8,/// Get dependency type location.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:20,Integrability,depend,depend,20,/// Return optional depend modifier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:30,Integrability,depend,depend,30,/// Set the loop data for the depend clauses with 'sink|source' kind of; /// dependency.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:77,Integrability,depend,dependency,77,/// Set the loop data for the depend clauses with 'sink|source' kind of; /// dependency.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:193,Usability,simpl,simple,193,/// This represents 'threads' clause in the '#pragma omp ...' directive.; ///; /// \code; /// #pragma omp ordered threads; /// \endcode; /// In this example directive '#pragma omp ordered' has simple 'threads' clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:187,Usability,simpl,simple,187,/// This represents 'simd' clause in the '#pragma omp ...' directive.; ///; /// \code; /// #pragma omp ordered simd; /// \endcode; /// In this example directive '#pragma omp ordered' has simple 'simd' clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:226,Deployability,update,update,226,"/// This represents clauses with a list of expressions that are mappable.; /// Examples of these clauses are 'map' in; /// '#pragma omp target [enter|exit] [data]...' directives, and 'to' and 'from; /// in '#pragma omp target update...' directives.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:91,Availability,avail,available,91,// Perform some checks to make sure the data sizes are consistent with the; // information available when the clause was created.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:3,Performance,Perform,Perform,3,// Perform some checks to make sure the data sizes are consistent with the; // information available when the clause was created.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:3,Modifiability,Variab,Variable,3,// Variable to compute the accumulation of the number of components.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:73,Deployability,update,update,73,"// Look for the desired declaration. While we are looking for it, we; // update the state so that we know the component where a given list; // starts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:17,Security,access,access,17,"/// Iterators to access all the declarations, number of lists, list sizes, and; /// components.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:221,Modifiability,variab,variables,221,"/// This represents clause 'map' in the '#pragma omp ...'; /// directives.; ///; /// \code; /// #pragma omp target map(a,b); /// \endcode; /// In this example directive '#pragma omp target' has clause 'map'; /// with the variables 'a' and 'b'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:34,Modifiability,variab,variables,34,/// Creates clause with a list of variables \a VL.; ///; /// \param C AST context.; /// \param Locs Locations needed to build a mappable clause. It includes 1); /// StartLoc: starting location of the clause (the clause keyword); 2); /// LParenLoc: location of '('; 3) EndLoc: ending location of the clause.; /// \param Vars The original expression used in the clause.; /// \param Declarations Declarations used in the clause.; /// \param ComponentLists Component lists used in the clause.; /// \param UDMapperRefs References to user-defined mappers associated with; /// expressions used in the clause.; /// \param IteratorModifier Iterator modifier.; /// \param MapModifiers Map-type-modifiers.; /// \param MapModifiersLoc Location of map-type-modifiers.; /// \param UDMQualifierLoc C++ nested name specifier for the associated; /// user-defined mapper.; /// \param MapperId The identifier of associated user-defined mapper.; /// \param Type Map type.; /// \param TypeIsImplicit Map type is inferred implicitly.; /// \param TypeLoc Location of the map type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:120,Availability,error,error,120,"/// Is this an implicit map type?; /// We have to capture 'IsMapTypeImplicit' from the parser for more; /// informative error messages. It helps distinguish map(r) from; /// map(tofrom: r), which is important to print more helpful error; /// messages for some target directives.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:231,Availability,error,error,231,"/// Is this an implicit map type?; /// We have to capture 'IsMapTypeImplicit' from the parser for more; /// informative error messages. It helps distinguish map(r) from; /// map(tofrom: r), which is important to print more helpful error; /// messages for some target directives.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:126,Integrability,message,messages,126,"/// Is this an implicit map type?; /// We have to capture 'IsMapTypeImplicit' from the parser for more; /// informative error messages. It helps distinguish map(r) from; /// map(tofrom: r), which is important to print more helpful error; /// messages for some target directives.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:242,Integrability,message,messages,242,"/// Is this an implicit map type?; /// We have to capture 'IsMapTypeImplicit' from the parser for more; /// informative error messages. It helps distinguish map(r) from; /// map(tofrom: r), which is important to print more helpful error; /// messages for some target directives.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:4,Safety,Safe,Safe,4,/// Safe iteration space distance.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:8,Safety,safe,safelen,8,/// Set safelen.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:11,Safety,safe,safe,11,/// Return safe iteration space distance.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:4,Safety,Safe,Safe,4,/// Safe iteration space distance.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:8,Safety,safe,safelen,8,/// Set safelen.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:11,Safety,safe,safe,11,/// Return safe iteration space distance.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:19,Energy Efficiency,schedul,schedule,19,/// A kind of the 'schedule' clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:26,Energy Efficiency,schedul,schedule,26,/// Start location of the schedule kind in source code.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:8,Energy Efficiency,schedul,schedule,8,/// Set schedule kind.; ///; /// \param K Schedule kind.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:42,Energy Efficiency,Schedul,Schedule,42,/// Set schedule kind.; ///; /// \param K Schedule kind.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:8,Energy Efficiency,schedul,schedule,8,/// Set schedule kind start location.; ///; /// \param KLoc Schedule kind location.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:60,Energy Efficiency,Schedul,Schedule,60,/// Set schedule kind start location.; ///; /// \param KLoc Schedule kind location.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:38,Energy Efficiency,schedul,schedule,38,"/// Build 'dist_schedule' clause with schedule kind \a Kind and chunk; /// size expression \a ChunkSize.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param KLoc Starting location of the argument.; /// \param CommaLoc Location of ','.; /// \param EndLoc Ending location of the clause.; /// \param Kind DistSchedule kind.; /// \param ChunkSize Chunk size.; /// \param HelperChunkSize Helper chunk size for combined directives.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:114,Deployability,update,update,114,"/// This represents clause 'to' in the '#pragma omp ...'; /// directives.; ///; /// \code; /// #pragma omp target update to(a,b); /// \endcode; /// In this example directive '#pragma omp target update' has clause 'to'; /// with the variables 'a' and 'b'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:194,Deployability,update,update,194,"/// This represents clause 'to' in the '#pragma omp ...'; /// directives.; ///; /// \code; /// #pragma omp target update to(a,b); /// \endcode; /// In this example directive '#pragma omp target update' has clause 'to'; /// with the variables 'a' and 'b'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:232,Modifiability,variab,variables,232,"/// This represents clause 'to' in the '#pragma omp ...'; /// directives.; ///; /// \code; /// #pragma omp target update to(a,b); /// \endcode; /// In this example directive '#pragma omp target update' has clause 'to'; /// with the variables 'a' and 'b'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:32,Modifiability,variab,variables,32,/// Build clause with number of variables \a NumVars.; ///; /// \param TheMotionModifiers Motion-modifiers.; /// \param TheMotionModifiersLoc Locations of motion-modifiers.; /// \param MapperQualifierLoc C++ nested name specifier for the associated; /// user-defined mapper.; /// \param MapperIdInfo The identifier of associated user-defined mapper.; /// \param Locs Locations needed to build a mappable clause. It includes 1); /// StartLoc: starting location of the clause (the clause keyword); 2); /// LParenLoc: location of '('; 3) EndLoc: ending location of the clause.; /// \param Sizes All required sizes to build a mappable clause. It includes 1); /// NumVars: number of expressions listed in this clause; 2); /// NumUniqueDeclarations: number of unique base declarations in this clause;; /// 3) NumComponentLists: number of component lists in this clause; and 4); /// NumComponents: total number of expression components in the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:34,Modifiability,variab,variables,34,/// Creates clause with a list of variables \a Vars.; ///; /// \param C AST context.; /// \param Locs Locations needed to build a mappable clause. It includes 1); /// StartLoc: starting location of the clause (the clause keyword); 2); /// LParenLoc: location of '('; 3) EndLoc: ending location of the clause.; /// \param Vars The original expression used in the clause.; /// \param Declarations Declarations used in the clause.; /// \param ComponentLists Component lists used in the clause.; /// \param MotionModifiers Motion-modifiers.; /// \param MotionModifiersLoc Location of motion-modifiers.; /// \param UDMapperRefs References to user-defined mappers associated with; /// expressions used in the clause.; /// \param UDMQualifierLoc C++ nested name specifier for the associated; /// user-defined mapper.; /// \param MapperId The identifier of associated user-defined mapper.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:58,Modifiability,variab,variables,58,/// Creates an empty clause with the place for \a NumVars variables.; ///; /// \param C AST context.; /// \param Sizes All required sizes to build a mappable clause. It includes 1); /// NumVars: number of expressions listed in this clause; 2); /// NumUniqueDeclarations: number of unique base declarations in this clause;; /// 3) NumComponentLists: number of component lists in this clause; and 4); /// NumComponents: total number of expression components in the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:116,Deployability,update,update,116,"/// This represents clause 'from' in the '#pragma omp ...'; /// directives.; ///; /// \code; /// #pragma omp target update from(a,b); /// \endcode; /// In this example directive '#pragma omp target update' has clause 'from'; /// with the variables 'a' and 'b'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:198,Deployability,update,update,198,"/// This represents clause 'from' in the '#pragma omp ...'; /// directives.; ///; /// \code; /// #pragma omp target update from(a,b); /// \endcode; /// In this example directive '#pragma omp target update' has clause 'from'; /// with the variables 'a' and 'b'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:238,Modifiability,variab,variables,238,"/// This represents clause 'from' in the '#pragma omp ...'; /// directives.; ///; /// \code; /// #pragma omp target update from(a,b); /// \endcode; /// In this example directive '#pragma omp target update' has clause 'from'; /// with the variables 'a' and 'b'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:32,Modifiability,variab,variables,32,/// Build clause with number of variables \a NumVars.; ///; /// \param TheMotionModifiers Motion-modifiers.; /// \param TheMotionModifiersLoc Locations of motion-modifiers.; /// \param MapperQualifierLoc C++ nested name specifier for the associated; /// user-defined mapper.; /// \param MapperIdInfo The identifier of associated user-defined mapper.; /// \param Locs Locations needed to build a mappable clause. It includes 1); /// StartLoc: starting location of the clause (the clause keyword); 2); /// LParenLoc: location of '('; 3) EndLoc: ending location of the clause.; /// \param Sizes All required sizes to build a mappable clause. It includes 1); /// NumVars: number of expressions listed in this clause; 2); /// NumUniqueDeclarations: number of unique base declarations in this clause;; /// 3) NumComponentLists: number of component lists in this clause; and 4); /// NumComponents: total number of expression components in the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:34,Modifiability,variab,variables,34,/// Creates clause with a list of variables \a Vars.; ///; /// \param C AST context.; /// \param Locs Locations needed to build a mappable clause. It includes 1); /// StartLoc: starting location of the clause (the clause keyword); 2); /// LParenLoc: location of '('; 3) EndLoc: ending location of the clause.; /// \param Vars The original expression used in the clause.; /// \param Declarations Declarations used in the clause.; /// \param ComponentLists Component lists used in the clause.; /// \param MotionModifiers Motion-modifiers.; /// \param MotionModifiersLoc Location of motion-modifiers.; /// \param UDMapperRefs References to user-defined mappers associated with; /// expressions used in the clause.; /// \param UDMQualifierLoc C++ nested name specifier for the associated; /// user-defined mapper.; /// \param MapperId The identifier of associated user-defined mapper.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:58,Modifiability,variab,variables,58,/// Creates an empty clause with the place for \a NumVars variables.; ///; /// \param C AST context.; /// \param Sizes All required sizes to build a mappable clause. It includes 1); /// NumVars: number of expressions listed in this clause; 2); /// NumUniqueDeclarations: number of unique base declarations in this clause;; /// 3) NumComponentLists: number of component lists in this clause; and 4); /// NumComponents: total number of expression components in the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:264,Modifiability,variab,variables,264,"/// This represents clause 'use_device_ptr' in the '#pragma omp ...'; /// directives.; ///; /// \code; /// #pragma omp target data use_device_ptr(a,b); /// \endcode; /// In this example directive '#pragma omp target data' has clause; /// 'use_device_ptr' with the variables 'a' and 'b'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:32,Modifiability,variab,variables,32,/// Build clause with number of variables \a NumVars.; ///; /// \param Locs Locations needed to build a mappable clause. It includes 1); /// StartLoc: starting location of the clause (the clause keyword); 2); /// LParenLoc: location of '('; 3) EndLoc: ending location of the clause.; /// \param Sizes All required sizes to build a mappable clause. It includes 1); /// NumVars: number of expressions listed in this clause; 2); /// NumUniqueDeclarations: number of unique base declarations in this clause;; /// 3) NumComponentLists: number of component lists in this clause; and 4); /// NumComponents: total number of expression components in the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:89,Modifiability,variab,variables,89,/// Sets the list of references to private copies with initializers for new; /// private variables.; /// \param VL List of references.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:89,Modifiability,variab,variables,89,/// Gets the list of references to private copies with initializers for new; /// private variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:47,Modifiability,variab,variables,47,/// Sets the list of references to initializer variables for new private; /// variables.; /// \param VL List of references.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:78,Modifiability,variab,variables,78,/// Sets the list of references to initializer variables for new private; /// variables.; /// \param VL List of references.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:47,Modifiability,variab,variables,47,/// Gets the list of references to initializer variables for new private; /// variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:78,Modifiability,variab,variables,78,/// Gets the list of references to initializer variables for new private; /// variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:34,Modifiability,variab,variables,34,/// Creates clause with a list of variables \a Vars.; ///; /// \param C AST context.; /// \param Locs Locations needed to build a mappable clause. It includes 1); /// StartLoc: starting location of the clause (the clause keyword); 2); /// LParenLoc: location of '('; 3) EndLoc: ending location of the clause.; /// \param Vars The original expression used in the clause.; /// \param PrivateVars Expressions referring to private copies.; /// \param Inits Expressions referring to private copy initializers.; /// \param Declarations Declarations used in the clause.; /// \param ComponentLists Component lists used in the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:58,Modifiability,variab,variables,58,/// Creates an empty clause with the place for \a NumVars variables.; ///; /// \param C AST context.; /// \param Sizes All required sizes to build a mappable clause. It includes 1); /// NumVars: number of expressions listed in this clause; 2); /// NumUniqueDeclarations: number of unique base declarations in this clause;; /// 3) NumComponentLists: number of component lists in this clause; and 4); /// NumComponents: total number of expression components in the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:267,Modifiability,variab,variables,267,"/// This represents clause 'use_device_addr' in the '#pragma omp ...'; /// directives.; ///; /// \code; /// #pragma omp target data use_device_addr(a,b); /// \endcode; /// In this example directive '#pragma omp target data' has clause; /// 'use_device_addr' with the variables 'a' and 'b'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:32,Modifiability,variab,variables,32,/// Build clause with number of variables \a NumVars.; ///; /// \param Locs Locations needed to build a mappable clause. It includes 1); /// StartLoc: starting location of the clause (the clause keyword); 2); /// LParenLoc: location of '('; 3) EndLoc: ending location of the clause.; /// \param Sizes All required sizes to build a mappable clause. It includes 1); /// NumVars: number of expressions listed in this clause; 2); /// NumUniqueDeclarations: number of unique base declarations in this clause;; /// 3) NumComponentLists: number of component lists in this clause; and 4); /// NumComponents: total number of expression components in the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:34,Modifiability,variab,variables,34,/// Creates clause with a list of variables \a Vars.; ///; /// \param C AST context.; /// \param Locs Locations needed to build a mappable clause. It includes 1); /// StartLoc: starting location of the clause (the clause keyword); 2); /// LParenLoc: location of '('; 3) EndLoc: ending location of the clause.; /// \param Vars The original expression used in the clause.; /// \param Declarations Declarations used in the clause.; /// \param ComponentLists Component lists used in the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:58,Modifiability,variab,variables,58,/// Creates an empty clause with the place for \a NumVars variables.; ///; /// \param C AST context.; /// \param Sizes All required sizes to build a mappable clause. It includes 1); /// NumVars: number of expressions listed in this clause; 2); /// NumUniqueDeclarations: number of unique base declarations in this clause;; /// 3) NumComponentLists: number of component lists in this clause; and 4); /// NumComponents: total number of expression components in the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:251,Modifiability,variab,variables,251,"/// This represents clause 'is_device_ptr' in the '#pragma omp ...'; /// directives.; ///; /// \code; /// #pragma omp target is_device_ptr(a,b); /// \endcode; /// In this example directive '#pragma omp target' has clause; /// 'is_device_ptr' with the variables 'a' and 'b'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:32,Modifiability,variab,variables,32,/// Build clause with number of variables \a NumVars.; ///; /// \param Locs Locations needed to build a mappable clause. It includes 1); /// StartLoc: starting location of the clause (the clause keyword); 2); /// LParenLoc: location of '('; 3) EndLoc: ending location of the clause.; /// \param Sizes All required sizes to build a mappable clause. It includes 1); /// NumVars: number of expressions listed in this clause; 2); /// NumUniqueDeclarations: number of unique base declarations in this clause;; /// 3) NumComponentLists: number of component lists in this clause; and 4); /// NumComponents: total number of expression components in the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:34,Modifiability,variab,variables,34,/// Creates clause with a list of variables \a Vars.; ///; /// \param C AST context.; /// \param Locs Locations needed to build a mappable clause. It includes 1); /// StartLoc: starting location of the clause (the clause keyword); 2); /// LParenLoc: location of '('; 3) EndLoc: ending location of the clause.; /// \param Vars The original expression used in the clause.; /// \param Declarations Declarations used in the clause.; /// \param ComponentLists Component lists used in the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:58,Modifiability,variab,variables,58,/// Creates an empty clause with the place for \a NumVars variables.; ///; /// \param C AST context.; /// \param Sizes All required sizes to build a mappable clause. It includes 1); /// NumVars: number of expressions listed in this clause; 2); /// NumUniqueDeclarations: number of unique base declarations in this clause;; /// 3) NumComponentLists: number of component lists in this clause; and 4); /// NumComponents: total number of expression components in the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:255,Modifiability,variab,variables,255,"/// This represents clause 'has_device_ptr' in the '#pragma omp ...'; /// directives.; ///; /// \code; /// #pragma omp target has_device_addr(a,b); /// \endcode; /// In this example directive '#pragma omp target' has clause; /// 'has_device_ptr' with the variables 'a' and 'b'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:32,Modifiability,variab,variables,32,/// Build clause with number of variables \a NumVars.; ///; /// \param Locs Locations needed to build a mappable clause. It includes 1); /// StartLoc: starting location of the clause (the clause keyword); 2); /// LParenLoc: location of '('; 3) EndLoc: ending location of the clause.; /// \param Sizes All required sizes to build a mappable clause. It includes 1); /// NumVars: number of expressions listed in this clause; 2); /// NumUniqueDeclarations: number of unique base declarations in this clause;; /// 3) NumComponentLists: number of component lists in this clause; and 4); /// NumComponents: total number of expression components in the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:34,Modifiability,variab,variables,34,/// Creates clause with a list of variables \a Vars.; ///; /// \param C AST context.; /// \param Locs Locations needed to build a mappable clause. It includes 1); /// StartLoc: starting location of the clause (the clause keyword); 2); /// LParenLoc: location of '('; 3) EndLoc: ending location of the clause.; /// \param Vars The original expression used in the clause.; /// \param Declarations Declarations used in the clause.; /// \param ComponentLists Component lists used in the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:58,Modifiability,variab,variables,58,/// Creates an empty clause with the place for \a NumVars variables.; ///; /// \param C AST context.; /// \param Sizes All required sizes to build a mappable clause. It includes 1); /// NumVars: number of expressions listed in this clause; 2); /// NumUniqueDeclarations: number of unique base declarations in this clause;; /// 3) NumComponentLists: number of component lists in this clause; and 4); /// NumComponents: total number of expression components in the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:233,Modifiability,variab,variable,233,/// This represents clause 'nontemporal' in the '#pragma omp ...' directives.; ///; /// \code; /// #pragma omp simd nontemporal(a); /// \endcode; /// In this example directive '#pragma omp simd' has clause 'nontemporal' for; /// the variable 'a'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:32,Modifiability,variab,variables,32,/// Build clause with number of variables \a N.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param N Number of the variables in the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:224,Modifiability,variab,variables,224,/// Build clause with number of variables \a N.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param N Number of the variables in the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:56,Modifiability,variab,variables,56,/// Build an empty clause.; ///; /// \param N Number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:34,Modifiability,variab,variables,34,/// Creates clause with a list of variables \a VL.; ///; /// \param C AST context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param VL List of references to the variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:267,Modifiability,variab,variables,267,/// Creates clause with a list of variables \a VL.; ///; /// \param C AST context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param VL List of references to the variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:52,Modifiability,variab,variables,52,/// Creates an empty clause with the place for \a N variables.; ///; /// \param C AST context.; /// \param N The number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:123,Modifiability,variab,variables,123,/// Creates an empty clause with the place for \a N variables.; ///; /// \param C AST context.; /// \param N The number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:115,Performance,concurren,concurrent,115,/// This represents 'order' clause in the '#pragma omp ...' directive.; ///; /// \code; /// #pragma omp simd order(concurrent); /// \endcode; /// In this example directive '#pragma omp parallel' has simple 'order'; /// clause with kind 'concurrent'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:237,Performance,concurren,concurrent,237,/// This represents 'order' clause in the '#pragma omp ...' directive.; ///; /// \code; /// #pragma omp simd order(concurrent); /// \endcode; /// In this example directive '#pragma omp parallel' has simple 'order'; /// clause with kind 'concurrent'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:199,Usability,simpl,simple,199,/// This represents 'order' clause in the '#pragma omp ...' directive.; ///; /// \code; /// #pragma omp simd order(concurrent); /// \endcode; /// In this example directive '#pragma omp parallel' has simple 'order'; /// clause with kind 'concurrent'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:46,Performance,concurren,concurrent,46,/// Build 'order' clause with argument \p A ('concurrent').; ///; /// \param A Argument of the clause ('concurrent').; /// \param ALoc Starting location of the argument.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param Modifier The modifier applied to 'order' clause.; /// \param MLoc Location of the modifier,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:104,Performance,concurren,concurrent,104,/// Build 'order' clause with argument \p A ('concurrent').; ///; /// \param A Argument of the clause ('concurrent').; /// \param ALoc Starting location of the argument.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param Modifier The modifier applied to 'order' clause.; /// \param MLoc Location of the modifier,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:24,Modifiability,variab,variable,24,/// Location of interop variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:37,Modifiability,variab,variable,37,/// Sets the location of the interop variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:280,Modifiability,variab,variable,280,/// Build 'init' clause.; ///; /// \param IsTarget Uses the 'target' interop-type.; /// \param IsTargetSync Uses the 'targetsync' interop-type.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param VarLoc Location of the interop variable.; /// \param EndLoc Ending location of the clause.; /// \param N Number of expressions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:105,Modifiability,variab,variable,105,/// Creates a fully specified clause.; ///; /// \param C AST context.; /// \param InteropVar The interop variable.; /// \param InteropInfo The interop-type and prefer_type list.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param VarLoc Location of the interop variable.; /// \param EndLoc Ending location of the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:314,Modifiability,variab,variable,314,/// Creates a fully specified clause.; ///; /// \param C AST context.; /// \param InteropVar The interop variable.; /// \param InteropInfo The interop-type and prefer_type list.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param VarLoc Location of the interop variable.; /// \param EndLoc Ending location of the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:40,Modifiability,variab,variable,40,/// Returns the location of the interop variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:24,Modifiability,variab,variable,24,/// Returns the interop variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:24,Modifiability,variab,variable,24,/// Location of interop variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:16,Modifiability,variab,variable,16,/// The interop variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:20,Modifiability,variab,variable,20,/// Set the interop variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:37,Modifiability,variab,variable,37,/// Sets the location of the interop variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:40,Modifiability,variab,variable,40,/// Build 'use' clause with and interop variable expression \a InteropVar.; ///; /// \param InteropVar The interop variable.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param VarLoc Location of the interop variable.; /// \param EndLoc Ending location of the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:115,Modifiability,variab,variable,115,/// Build 'use' clause with and interop variable expression \a InteropVar.; ///; /// \param InteropVar The interop variable.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param VarLoc Location of the interop variable.; /// \param EndLoc Ending location of the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:261,Modifiability,variab,variable,261,/// Build 'use' clause with and interop variable expression \a InteropVar.; ///; /// \param InteropVar The interop variable.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param VarLoc Location of the interop variable.; /// \param EndLoc Ending location of the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:40,Modifiability,variab,variable,40,/// Returns the location of the interop variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:24,Modifiability,variab,variable,24,/// Returns the interop variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:24,Modifiability,variab,variable,24,/// Location of interop variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:16,Modifiability,variab,variable,16,/// The interop variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:20,Modifiability,variab,variable,20,/// Set the interop variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:37,Modifiability,variab,variable,37,/// Sets the location of the interop variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:43,Modifiability,variab,variable,43,/// Build 'destroy' clause with an interop variable expression \a InteropVar.; ///; /// \param InteropVar The interop variable.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param VarLoc Location of the interop variable.; /// \param EndLoc Ending location of the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:118,Modifiability,variab,variable,118,/// Build 'destroy' clause with an interop variable expression \a InteropVar.; ///; /// \param InteropVar The interop variable.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param VarLoc Location of the interop variable.; /// \param EndLoc Ending location of the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:264,Modifiability,variab,variable,264,/// Build 'destroy' clause with an interop variable expression \a InteropVar.; ///; /// \param InteropVar The interop variable.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param VarLoc Location of the interop variable.; /// \param EndLoc Ending location of the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:40,Modifiability,variab,variable,40,/// Returns the location of the interop variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:24,Modifiability,variab,variable,24,/// Returns the interop variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:208,Usability,simpl,simple,208,/// This represents 'novariants' clause in the '#pragma omp ...' directive.; ///; /// \code; /// #pragma omp dispatch novariants(a > 5); /// \endcode; /// In this example directive '#pragma omp dispatch' has simple 'novariants'; /// clause with condition 'a > 5'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:206,Usability,simpl,simple,206,/// This represents 'nocontext' clause in the '#pragma omp ...' directive.; ///; /// \code; /// #pragma omp dispatch nocontext(a > 5); /// \endcode; /// In this example directive '#pragma omp dispatch' has simple 'nocontext'; /// clause with condition 'a > 5'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:230,Modifiability,variab,variable,230,/// This represents 'detach' clause in the '#pragma omp task' directive.; ///; /// \code; /// #pragma omp task detach(evt); /// \endcode; /// In this example directive '#pragma omp detach' has simple 'detach' clause; /// with the variable 'evt'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:193,Usability,simpl,simple,193,/// This represents 'detach' clause in the '#pragma omp task' directive.; ///; /// \code; /// #pragma omp task detach(evt); /// \endcode; /// In this example directive '#pragma omp detach' has simple 'detach' clause; /// with the variable 'evt'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:230,Modifiability,variab,variables,230,"/// This represents clause 'inclusive' in the '#pragma omp scan' directive.; ///; /// \code; /// #pragma omp scan inclusive(a,b); /// \endcode; /// In this example directive '#pragma omp scan' has clause 'inclusive'; /// with the variables 'a' and 'b'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:32,Modifiability,variab,variables,32,/// Build clause with number of variables \a N.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param N Number of the variables in the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:224,Modifiability,variab,variables,224,/// Build clause with number of variables \a N.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param N Number of the variables in the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:56,Modifiability,variab,variables,56,/// Build an empty clause.; ///; /// \param N Number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:34,Modifiability,variab,variables,34,/// Creates clause with a list of variables \a VL.; ///; /// \param C AST context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param VL List of references to the original variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:276,Modifiability,variab,variables,276,/// Creates clause with a list of variables \a VL.; ///; /// \param C AST context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param VL List of references to the original variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:52,Modifiability,variab,variables,52,/// Creates an empty clause with the place for \a N variables.; ///; /// \param C AST context.; /// \param N The number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:123,Modifiability,variab,variables,123,/// Creates an empty clause with the place for \a N variables.; ///; /// \param C AST context.; /// \param N The number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:230,Modifiability,variab,variables,230,"/// This represents clause 'exclusive' in the '#pragma omp scan' directive.; ///; /// \code; /// #pragma omp scan exclusive(a,b); /// \endcode; /// In this example directive '#pragma omp scan' has clause 'exclusive'; /// with the variables 'a' and 'b'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:32,Modifiability,variab,variables,32,/// Build clause with number of variables \a N.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param N Number of the variables in the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:224,Modifiability,variab,variables,224,/// Build clause with number of variables \a N.; ///; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param N Number of the variables in the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:56,Modifiability,variab,variables,56,/// Build an empty clause.; ///; /// \param N Number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:34,Modifiability,variab,variables,34,/// Creates clause with a list of variables \a VL.; ///; /// \param C AST context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param VL List of references to the original variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:276,Modifiability,variab,variables,276,/// Creates clause with a list of variables \a VL.; ///; /// \param C AST context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param VL List of references to the original variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:52,Modifiability,variab,variables,52,/// Creates an empty clause with the place for \a N variables.; ///; /// \param C AST context.; /// \param N The number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:123,Modifiability,variab,variables,123,/// Creates an empty clause with the place for \a N variables.; ///; /// \param C AST context.; /// \param N The number of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:105,Availability,mask,masked,105,/// This represents 'filter' clause in the '#pragma omp ...' directive.; ///; /// \code; /// #pragma omp masked filter(tid); /// \endcode; /// In this example directive '#pragma omp masked' has 'filter' clause with; /// thread id.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:182,Availability,mask,masked,182,/// This represents 'filter' clause in the '#pragma omp ...' directive.; ///; /// \code; /// #pragma omp masked filter(tid); /// \endcode; /// In this example directive '#pragma omp masked' has 'filter' clause with; /// thread id.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:28,Usability,simpl,simple,28,/// This class implements a simple visitor for OMPClause; /// subclasses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:33,Modifiability,variab,variables,33,/// Process clauses with list of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:21,Modifiability,variab,variables,21,/// Sets the list of variables for this clause.; ///; /// \param Clauses The list of clauses for the directive.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:256,Integrability,depend,dependence-type,256,"/// This represents the 'doacross' clause for the '#pragma omp ordered'; /// directive.; ///; /// \code; /// #pragma omp ordered doacross(sink: i-1, j-1); /// \endcode; /// In this example directive '#pragma omp ordered' with clause 'doacross' with; /// a dependence-type 'sink' and loop-iteration vector expressions i-1 and j-1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:4,Integrability,Depend,Dependence,4,/// Dependence type (sink or source).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:4,Integrability,Depend,Dependence,4,/// Dependence type location.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:8,Integrability,depend,dependence,8,/// Set dependence type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:8,Integrability,depend,dependence,8,/// Set dependence type location.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:252,Integrability,depend,dependence,252,/// Creates clause with a list of expressions \a VL.; ///; /// \param C AST context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param DepType The dependence type.; /// \param DepLoc Location of the dependence type.; /// \param ColonLoc Location of ':'.; /// \param VL List of references to the expressions.; /// \param NumLoops Number of loops that associated with the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:304,Integrability,depend,dependence,304,/// Creates clause with a list of expressions \a VL.; ///; /// \param C AST context.; /// \param StartLoc Starting location of the clause.; /// \param LParenLoc Location of '('.; /// \param EndLoc Ending location of the clause.; /// \param DepType The dependence type.; /// \param DepLoc Location of the dependence type.; /// \param ColonLoc Location of ':'.; /// \param VL List of references to the expressions.; /// \param NumLoops Number of loops that associated with the clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:8,Integrability,depend,dependence,8,/// Get dependence type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:8,Integrability,depend,dependence,8,/// Get dependence type location.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OperationKinds.h:454,Performance,perform,performed,454,"//===- OperationKinds.h - Operation enums -----------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file enumerates the different kinds of operations that can be; // performed by various expressions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OperationKinds.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OperationKinds.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OperationKinds.h:16,Integrability,bridg,bridging,16,/// The kind of bridging performed by the Objective-C bridge cast.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OperationKinds.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OperationKinds.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OperationKinds.h:54,Integrability,bridg,bridge,54,/// The kind of bridging performed by the Objective-C bridge cast.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OperationKinds.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OperationKinds.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OperationKinds.h:25,Performance,perform,performed,25,/// The kind of bridging performed by the Objective-C bridge cast.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OperationKinds.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OperationKinds.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OperationKinds.h:4,Integrability,Bridg,Bridging,4,"/// Bridging via __bridge, which does nothing but reinterpret; /// the bits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OperationKinds.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OperationKinds.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OperationKinds.h:4,Integrability,Bridg,Bridging,4,"/// Bridging via __bridge_transfer, which transfers ownership of an; /// Objective-C pointer into ARC.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OperationKinds.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OperationKinds.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OperationKinds.h:60,Availability,avail,available,60,"/// Bridging via __bridge_retain, which makes an ARC object available; /// as a +1 C pointer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OperationKinds.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OperationKinds.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OperationKinds.h:4,Integrability,Bridg,Bridging,4,"/// Bridging via __bridge_retain, which makes an ARC object available; /// as a +1 C pointer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OperationKinds.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OperationKinds.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OptionalDiagnostic.h:50,Availability,down,down,50,"// FIXME: Force the precision of the source value down so we don't; // print digits which are usually useless (we don't really care here if; // we truncate a digit by accident in edge cases). Ideally,; // APFloat::toString would automatically print the shortest; // representation which rounds to the correct value, but it's a bit; // tricky to implement. Could use std::to_chars.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OptionalDiagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OptionalDiagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OSLog.h:118,Performance,load,loading,118,"// The item is corresponding to the '%m' format specifier, no value is; // populated in the buffer and the runtime is loading the errno value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OSLog.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OSLog.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OSLog.h:17,Availability,mask,mask,17,// The item is a mask type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OSLog.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OSLog.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OSLog.h:246,Availability,error,error,246,"// Given a call 'E' to one of the builtins __builtin_os_log_format() or; // __builtin_os_log_format_buffer_size(), compute the layout of the buffer that; // the call will write into and store it in 'layout'. Returns 'false' if there; // was some error encountered while computing the layout, and 'true' otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/OSLog.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OSLog.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ParentMap.h:16,Deployability,update,updates,16,/// Adds and/or updates the parent/child-relations of the complete; /// stmt tree of S. All children of S including indirect descendants are; /// visited and updated or inserted but not the parents of S.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ParentMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ParentMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ParentMap.h:158,Deployability,update,updated,158,/// Adds and/or updates the parent/child-relations of the complete; /// stmt tree of S. All children of S including indirect descendants are; /// visited and updated or inserted but not the parents of S.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ParentMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ParentMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ParentMap.h:109,Deployability,update,update,109,"/// Manually sets the parent of \p S to \p Parent.; ///; /// If \p S is already in the map, this method will update the mapping.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ParentMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ParentMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ParentMapContext.h:605,Availability,down,downwards,605,"/// Returns the parents of the given node (within the traversal scope).; ///; /// Note that this will lazily compute the parents of all nodes; /// and store them for later retrieval. Thus, the first call is O(n); /// in the number of AST nodes.; ///; /// Caveats and FIXMEs:; /// Calculating the parent map over all AST nodes will need to load the; /// full AST. This can be undesirable in the case where the full AST is; /// expensive to create (for example, when using precompiled header; /// preambles). Thus, there are good opportunities for optimization here.; /// One idea is to walk the given node downwards, looking for references; /// to declaration contexts - once a declaration context is found, compute; /// the parent map for the declaration context; if that can satisfy the; /// request, loading the whole AST can be avoided. Note that this is made; /// more complex by statements in templates having multiple parents - those; /// problems can be solved by building closure over the templated parts of; /// the AST, which also avoids touching large parts of the AST.; /// Additionally, we will want to add an interface to already give a hint; /// where to search for the parents, for example when looking at a statement; /// inside a certain function.; ///; /// 'NodeT' can be one of Decl, Stmt, Type, TypeLoc,; /// NestedNameSpecifier or NestedNameSpecifierLoc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ParentMapContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ParentMapContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ParentMapContext.h:1123,Integrability,interface,interface,1123,"/// Returns the parents of the given node (within the traversal scope).; ///; /// Note that this will lazily compute the parents of all nodes; /// and store them for later retrieval. Thus, the first call is O(n); /// in the number of AST nodes.; ///; /// Caveats and FIXMEs:; /// Calculating the parent map over all AST nodes will need to load the; /// full AST. This can be undesirable in the case where the full AST is; /// expensive to create (for example, when using precompiled header; /// preambles). Thus, there are good opportunities for optimization here.; /// One idea is to walk the given node downwards, looking for references; /// to declaration contexts - once a declaration context is found, compute; /// the parent map for the declaration context; if that can satisfy the; /// request, loading the whole AST can be avoided. Note that this is made; /// more complex by statements in templates having multiple parents - those; /// problems can be solved by building closure over the templated parts of; /// the AST, which also avoids touching large parts of the AST.; /// Additionally, we will want to add an interface to already give a hint; /// where to search for the parents, for example when looking at a statement; /// inside a certain function.; ///; /// 'NodeT' can be one of Decl, Stmt, Type, TypeLoc,; /// NestedNameSpecifier or NestedNameSpecifierLoc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ParentMapContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ParentMapContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ParentMapContext.h:339,Performance,load,load,339,"/// Returns the parents of the given node (within the traversal scope).; ///; /// Note that this will lazily compute the parents of all nodes; /// and store them for later retrieval. Thus, the first call is O(n); /// in the number of AST nodes.; ///; /// Caveats and FIXMEs:; /// Calculating the parent map over all AST nodes will need to load the; /// full AST. This can be undesirable in the case where the full AST is; /// expensive to create (for example, when using precompiled header; /// preambles). Thus, there are good opportunities for optimization here.; /// One idea is to walk the given node downwards, looking for references; /// to declaration contexts - once a declaration context is found, compute; /// the parent map for the declaration context; if that can satisfy the; /// request, loading the whole AST can be avoided. Note that this is made; /// more complex by statements in templates having multiple parents - those; /// problems can be solved by building closure over the templated parts of; /// the AST, which also avoids touching large parts of the AST.; /// Additionally, we will want to add an interface to already give a hint; /// where to search for the parents, for example when looking at a statement; /// inside a certain function.; ///; /// 'NodeT' can be one of Decl, Stmt, Type, TypeLoc,; /// NestedNameSpecifier or NestedNameSpecifierLoc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ParentMapContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ParentMapContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ParentMapContext.h:546,Performance,optimiz,optimization,546,"/// Returns the parents of the given node (within the traversal scope).; ///; /// Note that this will lazily compute the parents of all nodes; /// and store them for later retrieval. Thus, the first call is O(n); /// in the number of AST nodes.; ///; /// Caveats and FIXMEs:; /// Calculating the parent map over all AST nodes will need to load the; /// full AST. This can be undesirable in the case where the full AST is; /// expensive to create (for example, when using precompiled header; /// preambles). Thus, there are good opportunities for optimization here.; /// One idea is to walk the given node downwards, looking for references; /// to declaration contexts - once a declaration context is found, compute; /// the parent map for the declaration context; if that can satisfy the; /// request, loading the whole AST can be avoided. Note that this is made; /// more complex by statements in templates having multiple parents - those; /// problems can be solved by building closure over the templated parts of; /// the AST, which also avoids touching large parts of the AST.; /// Additionally, we will want to add an interface to already give a hint; /// where to search for the parents, for example when looking at a statement; /// inside a certain function.; ///; /// 'NodeT' can be one of Decl, Stmt, Type, TypeLoc,; /// NestedNameSpecifier or NestedNameSpecifierLoc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ParentMapContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ParentMapContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ParentMapContext.h:802,Performance,load,loading,802,"/// Returns the parents of the given node (within the traversal scope).; ///; /// Note that this will lazily compute the parents of all nodes; /// and store them for later retrieval. Thus, the first call is O(n); /// in the number of AST nodes.; ///; /// Caveats and FIXMEs:; /// Calculating the parent map over all AST nodes will need to load the; /// full AST. This can be undesirable in the case where the full AST is; /// expensive to create (for example, when using precompiled header; /// preambles). Thus, there are good opportunities for optimization here.; /// One idea is to walk the given node downwards, looking for references; /// to declaration contexts - once a declaration context is found, compute; /// the parent map for the declaration context; if that can satisfy the; /// request, loading the whole AST can be avoided. Note that this is made; /// more complex by statements in templates having multiple parents - those; /// problems can be solved by building closure over the templated parts of; /// the AST, which also avoids touching large parts of the AST.; /// Additionally, we will want to add an interface to already give a hint; /// where to search for the parents, for example when looking at a statement; /// inside a certain function.; ///; /// 'NodeT' can be one of Decl, Stmt, Type, TypeLoc,; /// NestedNameSpecifier or NestedNameSpecifierLoc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ParentMapContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ParentMapContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ParentMapContext.h:831,Safety,avoid,avoided,831,"/// Returns the parents of the given node (within the traversal scope).; ///; /// Note that this will lazily compute the parents of all nodes; /// and store them for later retrieval. Thus, the first call is O(n); /// in the number of AST nodes.; ///; /// Caveats and FIXMEs:; /// Calculating the parent map over all AST nodes will need to load the; /// full AST. This can be undesirable in the case where the full AST is; /// expensive to create (for example, when using precompiled header; /// preambles). Thus, there are good opportunities for optimization here.; /// One idea is to walk the given node downwards, looking for references; /// to declaration contexts - once a declaration context is found, compute; /// the parent map for the declaration context; if that can satisfy the; /// request, loading the whole AST can be avoided. Note that this is made; /// more complex by statements in templates having multiple parents - those; /// problems can be solved by building closure over the templated parts of; /// the AST, which also avoids touching large parts of the AST.; /// Additionally, we will want to add an interface to already give a hint; /// where to search for the parents, for example when looking at a statement; /// inside a certain function.; ///; /// 'NodeT' can be one of Decl, Stmt, Type, TypeLoc,; /// NestedNameSpecifier or NestedNameSpecifierLoc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ParentMapContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ParentMapContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ParentMapContext.h:1041,Safety,avoid,avoids,1041,"/// Returns the parents of the given node (within the traversal scope).; ///; /// Note that this will lazily compute the parents of all nodes; /// and store them for later retrieval. Thus, the first call is O(n); /// in the number of AST nodes.; ///; /// Caveats and FIXMEs:; /// Calculating the parent map over all AST nodes will need to load the; /// full AST. This can be undesirable in the case where the full AST is; /// expensive to create (for example, when using precompiled header; /// preambles). Thus, there are good opportunities for optimization here.; /// One idea is to walk the given node downwards, looking for references; /// to declaration contexts - once a declaration context is found, compute; /// the parent map for the declaration context; if that can satisfy the; /// request, loading the whole AST can be avoided. Note that this is made; /// more complex by statements in templates having multiple parents - those; /// problems can be solved by building closure over the templated parts of; /// the AST, which also avoids touching large parts of the AST.; /// Additionally, we will want to add an interface to already give a hint; /// where to search for the parents, for example when looking at a statement; /// inside a certain function.; ///; /// 'NodeT' can be one of Decl, Stmt, Type, TypeLoc,; /// NestedNameSpecifier or NestedNameSpecifierLoc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ParentMapContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ParentMapContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ParentMapContext.h:4,Usability,Clear,Clear,4,/// Clear parent maps.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/ParentMapContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/ParentMapContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/PrettyPrinter.h:122,Availability,redundant,redundant,122,"/// When printing type to be inserted into code in specific context, this; /// callback can be used to avoid printing the redundant part of the; /// qualifier. For example, when inserting code inside namespace foo, we; /// should print bar::SomeType instead of foo::bar::SomeType.; /// To do this, shouldPrintScope should return true on ""foo"" NamespaceDecl.; /// The printing stops at the first isScopeVisible() == true, so there will; /// be no calls with outer scopes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/PrettyPrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/PrettyPrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/PrettyPrinter.h:103,Safety,avoid,avoid,103,"/// When printing type to be inserted into code in specific context, this; /// callback can be used to avoid printing the redundant part of the; /// qualifier. For example, when inserting code inside namespace foo, we; /// should print bar::SomeType instead of foo::bar::SomeType.; /// To do this, shouldPrintScope should return true on ""foo"" NamespaceDecl.; /// The printing stops at the first isScopeVisible() == true, so there will; /// be no calls with outer scopes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/PrettyPrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/PrettyPrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/PrettyPrinter.h:122,Safety,redund,redundant,122,"/// When printing type to be inserted into code in specific context, this; /// callback can be used to avoid printing the redundant part of the; /// qualifier. For example, when inserting code inside namespace foo, we; /// should print bar::SomeType instead of foo::bar::SomeType.; /// To do this, shouldPrintScope should return true on ""foo"" NamespaceDecl.; /// The printing stops at the first isScopeVisible() == true, so there will; /// be no calls with outer scopes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/PrettyPrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/PrettyPrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/PrettyPrinter.h:220,Availability,avail,available,220,"/// Adjust this printing policy for cases where it's known that we're; /// printing C++ code (for instance, if AST dumping reaches a C++-only; /// construct). This should not be used if a real LangOptions object is; /// available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/PrettyPrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/PrettyPrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/PrettyPrinter.h:25,Modifiability,variab,variable,25,"/// Suppress printing of variable initializers.; ///; /// This flag is used when printing the loop variable in a for-range; /// statement. For example, given:; ///; /// \code; /// for (auto x : coll); /// \endcode; ///; /// SuppressInitializers will be true when printing ""auto x"", so that the; /// internal initializer constructed for x will not be printed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/PrettyPrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/PrettyPrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/PrettyPrinter.h:99,Modifiability,variab,variable,99,"/// Suppress printing of variable initializers.; ///; /// This flag is used when printing the loop variable in a for-range; /// statement. For example, given:; ///; /// \code; /// for (auto x : coll); /// \endcode; ///; /// SuppressInitializers will be true when printing ""auto x"", so that the; /// internal initializer constructed for x will not be printed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/PrettyPrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/PrettyPrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/PrettyPrinter.h:112,Availability,avail,available,112,"/// When true, print the built-in wchar_t type as __wchar_t. For use in; /// Microsoft mode when wchar_t is not available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/PrettyPrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/PrettyPrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/PrettyPrinter.h:24,Integrability,Inject,InjectedClassNameType,24,"/// Whether to print an InjectedClassNameType with template arguments or as; /// written. When a template argument is unnamed, printing it results in; /// invalid C++ code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/PrettyPrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/PrettyPrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/PrettyPrinter.h:24,Security,Inject,InjectedClassNameType,24,"/// Whether to print an InjectedClassNameType with template arguments or as; /// written. When a template argument is unnamed, printing it results in; /// invalid C++ code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/PrettyPrinter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/PrettyPrinter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Randstruct.h:406,Integrability,interface,interface,406,"//===- Randstruct.h - Interfact for structure randomization -------*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains the interface for Clang's structure field layout; // randomization.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Randstruct.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Randstruct.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RawCommentList.h:12,Security,sanitiz,sanitized,12,"/// Returns sanitized comment text, suitable for presentation in editor UIs.; /// E.g. will transform:; /// // This is a long multiline comment.; /// // Parts of it might be indented.; /// /* The comments styles might be mixed. */; /// into; /// ""This is a long multiline comment.\n""; /// "" Parts of it might be indented.\n""; /// ""The comments styles might be mixed.""; /// Also removes leading indentation and sanitizes some common cases:; /// /* This is a first line.; /// * This is a second line. It is indented.; /// * This is a third line. */; /// and; /// /* This is a first line.; /// This is a second line. It is indented.; /// This is a third line. */; /// will both turn into:; /// ""This is a first line.\n""; /// "" This is a second line. It is indented.\n""; /// ""This is a third line.""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/RawCommentList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RawCommentList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RawCommentList.h:410,Security,sanitiz,sanitizes,410,"/// Returns sanitized comment text, suitable for presentation in editor UIs.; /// E.g. will transform:; /// // This is a long multiline comment.; /// // Parts of it might be indented.; /// /* The comments styles might be mixed. */; /// into; /// ""This is a long multiline comment.\n""; /// "" Parts of it might be indented.\n""; /// ""The comments styles might be mixed.""; /// Also removes leading indentation and sanitizes some common cases:; /// /* This is a first line.; /// * This is a second line. It is indented.; /// * This is a third line. */; /// and; /// /* This is a first line.; /// This is a second line. It is indented.; /// This is a third line. */; /// will both turn into:; /// ""This is a first line.\n""; /// "" This is a second line. It is indented.\n""; /// ""This is a third line.""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/RawCommentList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RawCommentList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RawCommentList.h:12,Security,sanitiz,sanitized,12,"/// Returns sanitized comment text as separated lines with locations in; /// source, suitable for further processing and rendering requiring source; /// locations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/RawCommentList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RawCommentList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecordLayout.h:418,Integrability,interface,interface,418,"//===- RecordLayout.h - Layout information for a struct/union ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the RecordLayout interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/RecordLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecordLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecordLayout.h:150,Performance,perform,performance,150,// PreferredAlignment - Preferred alignment of record in characters. This; // can be different than Alignment in cases where it is beneficial for; // performance or backwards compatibility preserving (e.g. AIX-ABI).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/RecordLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecordLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecordLayout.h:60,Modifiability,extend,extended,60,/// HasVFPtr - Does this class have a vftable that could be extended by; /// a derived class. The class may have inherited this pointer from; /// a primary base class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/RecordLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecordLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecordLayout.h:113,Modifiability,inherit,inherited,113,/// HasVFPtr - Does this class have a vftable that could be extended by; /// a derived class. The class may have inherited this pointer from; /// a primary base class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/RecordLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecordLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecordLayout.h:99,Modifiability,inherit,inheriting,99,"/// hasOwnVFPtr - Does this class provide its own virtual-function; /// table pointer, rather than inheriting one from a primary base; /// class? If so, it is at offset zero.; ///; /// This implies that the ABI has no primary base class, meaning; /// that it has no base classes that are suitable under the conditions; /// of the ABI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/RecordLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecordLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecordLayout.h:86,Modifiability,extend,extended,86,/// hasVFPtr - Does this class have a virtual function table pointer; /// that can be extended by a derived class? This is synonymous with; /// this class having a VFPtr at offset zero.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/RecordLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecordLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecordLayout.h:95,Modifiability,inherit,inheriting,95,"/// hasOwnVBPtr - Does this class provide its own virtual-base; /// table pointer, rather than inheriting one from a primary base; /// class?; ///; /// This implies that the ABI has no primary base class, meaning; /// that it has no base classes that are suitable under the conditions; /// of the ABI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/RecordLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecordLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h:425,Integrability,interface,interface,425,"//===--- RecursiveASTVisitor.h - Recursive AST Visitor ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the RecursiveASTVisitor interface, which recursively; // traverses the entire AST.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h:1837,Availability,down,down,1837,"r traversing an AST rooted at x. This method simply; /// dispatches (i.e. forwards) to TraverseFoo(Foo *x) where Foo; /// is the dynamic type of *x, which calls WalkUpFromFoo(x) and; /// then recursively visits the child nodes of x.; /// TraverseStmt(Stmt *x) and TraverseType(QualType x) work; /// similarly.; /// 2. WalkUpFromFoo(Foo *x) does task #2. It does not try to visit; /// any child node of x. Instead, it first calls WalkUpFromBar(x); /// where Bar is the direct parent class of Foo (unless Foo has; /// no parent), and then calls VisitFoo(x) (see the next list item).; /// 3. VisitFoo(Foo *x) does task #3.; ///; /// These three method groups are tiered (Traverse* > WalkUpFrom* >; /// Visit*). A method (e.g. Traverse*) may call methods from the same; /// tier (e.g. other Traverse*) or one tier lower (e.g. WalkUpFrom*).; /// It may not call methods from a higher tier.; ///; /// Note that since WalkUpFromFoo() calls WalkUpFromBar() (where Bar; /// is Foo's super class) before calling VisitFoo(), the result is; /// that the Visit*() methods for a given node are called in the; /// top-down order (e.g. for a node of type NamespaceDecl, the order will; /// be VisitDecl(), VisitNamedDecl(), and then VisitNamespaceDecl()).; ///; /// This scheme guarantees that all Visit*() calls for the same AST; /// node are grouped together. In other words, Visit*() methods for; /// different nodes are never interleaved.; ///; /// Clients of this visitor should subclass the visitor (providing; /// themselves as the template argument, using the curiously recurring; /// template pattern) and override any of the Traverse*, WalkUpFrom*,; /// and Visit* methods for declarations, types, statements,; /// expressions, or other AST nodes where the visitor should customize; /// behavior. Most users only need to override Visit*. Advanced; /// users may override Traverse* and WalkUpFrom* to implement custom; /// traversal strategies. Returning false from one of these overridden; /// functions wil",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h:163,Performance,perform,performs,163,"// end namespace detail; /// A class that does preorder or postorder; /// depth-first traversal on the entire Clang AST and visits each node.; ///; /// This class performs three distinct tasks:; /// 1. traverse the AST (i.e. go to each node);; /// 2. at a given node, walk up the class hierarchy, starting from; /// the node's dynamic type, until the top-most class (e.g. Stmt,; /// Decl, or Type) is reached.; /// 3. given a (node, class) combination, where 'class' is some base; /// class of the dynamic type of 'node', call a user-overridable; /// function to actually visit the node.; ///; /// These tasks are done by three groups of methods, respectively:; /// 1. TraverseDecl(Decl *x) does task #1. It is the entry point; /// for traversing an AST rooted at x. This method simply; /// dispatches (i.e. forwards) to TraverseFoo(Foo *x) where Foo; /// is the dynamic type of *x, which calls WalkUpFromFoo(x) and; /// then recursively visits the child nodes of x.; /// TraverseStmt(Stmt *x) and TraverseType(QualType x) work; /// similarly.; /// 2. WalkUpFromFoo(Foo *x) does task #2. It does not try to visit; /// any child node of x. Instead, it first calls WalkUpFromBar(x); /// where Bar is the direct parent class of Foo (unless Foo has; /// no parent), and then calls VisitFoo(x) (see the next list item).; /// 3. VisitFoo(Foo *x) does task #3.; ///; /// These three method groups are tiered (Traverse* > WalkUpFrom* >; /// Visit*). A method (e.g. Traverse*) may call methods from the same; /// tier (e.g. other Traverse*) or one tier lower (e.g. WalkUpFrom*).; /// It may not call methods from a higher tier.; ///; /// Note that since WalkUpFromFoo() calls WalkUpFromBar() (where Bar; /// is Foo's super class) before calling VisitFoo(), the result is; /// that the Visit*() methods for a given node are called in the; /// top-down order (e.g. for a node of type NamespaceDecl, the order will; /// be VisitDecl(), VisitNamedDecl(), and then VisitNamespaceDecl()).; ///; /// This scheme guara",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h:2737,Safety,abort,abort,2737,"higher tier.; ///; /// Note that since WalkUpFromFoo() calls WalkUpFromBar() (where Bar; /// is Foo's super class) before calling VisitFoo(), the result is; /// that the Visit*() methods for a given node are called in the; /// top-down order (e.g. for a node of type NamespaceDecl, the order will; /// be VisitDecl(), VisitNamedDecl(), and then VisitNamespaceDecl()).; ///; /// This scheme guarantees that all Visit*() calls for the same AST; /// node are grouped together. In other words, Visit*() methods for; /// different nodes are never interleaved.; ///; /// Clients of this visitor should subclass the visitor (providing; /// themselves as the template argument, using the curiously recurring; /// template pattern) and override any of the Traverse*, WalkUpFrom*,; /// and Visit* methods for declarations, types, statements,; /// expressions, or other AST nodes where the visitor should customize; /// behavior. Most users only need to override Visit*. Advanced; /// users may override Traverse* and WalkUpFrom* to implement custom; /// traversal strategies. Returning false from one of these overridden; /// functions will abort the entire traversal.; ///; /// By default, this visitor tries to visit every part of the explicit; /// source code exactly once. The default policy towards templates; /// is to descend into the 'pattern' class or function body, not any; /// explicit or implicit instantiations. Explicit specializations; /// are still visited, and the patterns of partial specializations; /// are visited separately. This behavior can be changed by; /// overriding shouldVisitTemplateInstantiations() in the derived class; /// to return true, in which case all known implicit and explicit; /// instantiations will be visited at the same time as the pattern; /// from which they were produced.; ///; /// By default, this visitor preorder traverses the AST. If postorder traversal; /// is needed, the \c shouldTraversePostOrder method needs to be overridden; /// to return \c true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h:779,Usability,simpl,simply,779,"// end namespace detail; /// A class that does preorder or postorder; /// depth-first traversal on the entire Clang AST and visits each node.; ///; /// This class performs three distinct tasks:; /// 1. traverse the AST (i.e. go to each node);; /// 2. at a given node, walk up the class hierarchy, starting from; /// the node's dynamic type, until the top-most class (e.g. Stmt,; /// Decl, or Type) is reached.; /// 3. given a (node, class) combination, where 'class' is some base; /// class of the dynamic type of 'node', call a user-overridable; /// function to actually visit the node.; ///; /// These tasks are done by three groups of methods, respectively:; /// 1. TraverseDecl(Decl *x) does task #1. It is the entry point; /// for traversing an AST rooted at x. This method simply; /// dispatches (i.e. forwards) to TraverseFoo(Foo *x) where Foo; /// is the dynamic type of *x, which calls WalkUpFromFoo(x) and; /// then recursively visits the child nodes of x.; /// TraverseStmt(Stmt *x) and TraverseType(QualType x) work; /// similarly.; /// 2. WalkUpFromFoo(Foo *x) does task #2. It does not try to visit; /// any child node of x. Instead, it first calls WalkUpFromBar(x); /// where Bar is the direct parent class of Foo (unless Foo has; /// no parent), and then calls VisitFoo(x) (see the next list item).; /// 3. VisitFoo(Foo *x) does task #3.; ///; /// These three method groups are tiered (Traverse* > WalkUpFrom* >; /// Visit*). A method (e.g. Traverse*) may call methods from the same; /// tier (e.g. other Traverse*) or one tier lower (e.g. WalkUpFrom*).; /// It may not call methods from a higher tier.; ///; /// Note that since WalkUpFromFoo() calls WalkUpFromBar() (where Bar; /// is Foo's super class) before calling VisitFoo(), the result is; /// that the Visit*() methods for a given node are called in the; /// top-down order (e.g. for a node of type NamespaceDecl, the order will; /// be VisitDecl(), VisitNamedDecl(), and then VisitNamespaceDecl()).; ///; /// This scheme guara",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h:6,Performance,queue,queue,6,"/// A queue used for performing data recursion over statements.; /// Parameters involving this type are used to implement data; /// recursion over Stmts and Exprs within this class, and should; /// typically not be explicitly specified by derived classes.; /// The bool bit indicates whether the statement has been traversed or not.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h:21,Performance,perform,performing,21,"/// A queue used for performing data recursion over statements.; /// Parameters involving this type are used to implement data; /// recursion over Stmts and Exprs within this class, and should; /// typically not be explicitly specified by derived classes.; /// The bool bit indicates whether the statement has been traversed or not.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h:229,Security,access,access,229,"/// Recursively visit a constructor initializer. This; /// automatically dispatches to another visitor for the initializer; /// expression, but not for the name of the initializer, so may; /// be overridden for clients that need access to the name.; ///; /// \returns false if the visitation was terminated early, true otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h:37,Integrability,protocol,protocol,37,"/// Recursively visit an Objective-C protocol reference with location; /// information.; ///; /// \returns false if the visitation was terminated early, true otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h:98,Performance,queue,queue,98,"// Traverse the given statement. If the most-derived traverse function takes a; // data recursion queue, pass it on; otherwise, discard it. Note that the; // first branch of this conditional must compile whether or not the derived; // class can take a queue, so if we're taking the second arm, make the first; // arm call our function rather than the derived class version.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h:252,Performance,queue,queue,252,"// Traverse the given statement. If the most-derived traverse function takes a; // data recursion queue, pass it on; otherwise, discard it. Note that the; // first branch of this conditional must compile whether or not the derived; // class can take a queue, so if we're taking the second arm, make the first; // arm call our function rather than the derived class version.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h:63,Performance,perform,performing,63,"// Try to traverse the given statement, or enqueue it if we're performing data; // recursion in the middle of traversing another statement. Can only be called; // from within a DEF_TRAVERSE_STMT body or similar context.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h:33,Modifiability,variab,variables,33,/// Process clauses with list of variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h:3,Safety,Avoid,Avoid,3,"// Avoid traversing the ConceptReference in the TypeConstraint; // if we have an immediately-declared-constraint, otherwise; // we'll end up visiting the concept and the arguments in; // the TC twice.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h:75,Availability,avail,available,75,"// ----------------- Type traversal -----------------; // This macro makes available a variable T, the passed-in type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h:87,Modifiability,variab,variable,87,"// ----------------- Type traversal -----------------; // This macro makes available a variable T, the passed-in type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h:78,Availability,avail,available,78,"// ----------------- TypeLoc traversal -----------------; // This macro makes available a variable TL, the passed-in TypeLoc.; // If requested, it calls WalkUpFrom* for the Type in the given TypeLoc,; // in addition to WalkUpFrom* for the TypeLoc itself, such that existing; // clients that override the WalkUpFrom*Type() and/or Visit*Type() methods; // continue to work.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h:90,Modifiability,variab,variable,90,"// ----------------- TypeLoc traversal -----------------; // This macro makes available a variable TL, the passed-in TypeLoc.; // If requested, it calls WalkUpFrom* for the Type in the given TypeLoc,; // in addition to WalkUpFrom* for the TypeLoc itself, such that existing; // clients that override the WalkUpFrom*Type() and/or Visit*Type() methods; // continue to work.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h:789,Integrability,wrap,wrapper,789,"// Move this over to the 'main' typeloc tree. Note that this is a; // move -- we pretend that we were really looking at the unqualified; // typeloc all along -- rather than a recursion, so we don't follow; // the normal CRTP plan of going through; // getDerived().TraverseTypeLoc. If we did, we'd be traversing; // twice for the same type (once as a QualifiedTypeLoc version of; // the type, once as an UnqualifiedTypeLoc version of the type),; // which in effect means we'd call VisitTypeLoc twice with the; // 'same' type. This solves that problem, at the cost of never; // seeing the qualified version of the type (unless the client; // subclasses TraverseQualifiedTypeLoc themselves). It's not a; // perfect solution. A perfect solution probably requires making; // QualifiedTypeLoc a wrapper around TypeLoc -- like QualType is a; // wrapper around Type* -- rather than being its own class in the; // type hierarchy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h:838,Integrability,wrap,wrapper,838,"// Move this over to the 'main' typeloc tree. Note that this is a; // move -- we pretend that we were really looking at the unqualified; // typeloc all along -- rather than a recursion, so we don't follow; // the normal CRTP plan of going through; // getDerived().TraverseTypeLoc. If we did, we'd be traversing; // twice for the same type (once as a QualifiedTypeLoc version of; // the type, once as an UnqualifiedTypeLoc version of the type),; // which in effect means we'd call VisitTypeLoc twice with the; // 'same' type. This solves that problem, at the cost of never; // seeing the qualified version of the type (unless the client; // subclasses TraverseQualifiedTypeLoc themselves). It's not a; // perfect solution. A perfect solution probably requires making; // QualifiedTypeLoc a wrapper around TypeLoc -- like QualType is a; // wrapper around Type* -- rather than being its own class in the; // type hierarchy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h:14,Availability,avail,available,14,"// This isn't available for ArrayType, but is for the ArrayTypeLoc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h:20,Availability,avail,available,20,"// This macro makes available a variable D, the passed-in decl.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h:32,Modifiability,variab,variable,32,"// This macro makes available a variable D, the passed-in decl.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h:274,Performance,load,loading,274,"// Code in an unnamed namespace shows up automatically in; // decls_begin()/decls_end(). Thus we don't need to recurse on; // D->getAnonymousNamespace().; // If the traversal scope is set, then consider them to be the children of; // the TUDecl, rather than traversing (and loading?) all top-level decls.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h:46,Modifiability,variab,variable,46,"// This macro unifies the traversal of class, variable and function; // template declarations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h:5,Integrability,depend,dependent,5,// A dependent using declaration which was marked with 'typename'.; // template<class T> class A : public B<T> { using typename B<T>::foo; };,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h:19,Modifiability,variab,variable,19,"// Visit parameter variable declarations of the implicit function; // if the traverser is visiting implicit code. Parameter variable; // declarations do not have valid TypeSourceInfo, so to visit them; // we need to traverse the declarations explicitly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h:124,Modifiability,variab,variable,124,"// Visit parameter variable declarations of the implicit function; // if the traverser is visiting implicit code. Parameter variable; // declarations do not have valid TypeSourceInfo, so to visit them; // we need to traverse the declarations explicitly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h:470,Availability,avail,available,470,"// ----------------- Stmt traversal -----------------; //; // For stmts, we automate (in the DEF_TRAVERSE_STMT macro) iterating; // over the children defined in children() (every stmt defines these,; // though sometimes the range is empty). Each individual Traverse*; // method only needs to worry about children other than those. To see; // what children() does for a given class, see, e.g.,; // http://clang.llvm.org/doxygen/Stmt_8cpp_source.html; // This macro makes available a variable S, the passed-in stmt.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h:482,Modifiability,variab,variable,482,"// ----------------- Stmt traversal -----------------; //; // For stmts, we automate (in the DEF_TRAVERSE_STMT macro) iterating; // over the children defined in children() (every stmt defines these,; // though sometimes the range is empty). Each individual Traverse*; // method only needs to worry about children other than those. To see; // what children() does for a given class, see, e.g.,; // http://clang.llvm.org/doxygen/Stmt_8cpp_source.html; // This macro makes available a variable S, the passed-in stmt.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h:25,Usability,simpl,simple,25,// The implicit model is simple: everything else is in the lambda class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h:96,Integrability,depend,depending,96,"// For coroutines expressions, traverse either the operand; // as written or the implied calls, depending on what the; // derived class requests.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Redeclarable.h:418,Integrability,interface,interface,418,"//===- Redeclarable.h - Base for Decls that can be redeclared --*- C++ -*-====//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the Redeclarable interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Redeclarable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Redeclarable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Redeclarable.h:1495,Integrability,interface,interface,1495,"// Some notes on redeclarables:; //; // - Every redeclarable is on a circular linked list.; //; // - Every decl has a pointer to the first element of the chain _and_ a; // DeclLink that may point to one of 3 possible states:; // - the ""previous"" (temporal) element in the chain; // - the ""latest"" (temporal) element in the chain; // - the ""uninitialized-latest"" value (when newly-constructed); //; // - The first element is also often called the canonical element. Every; // element has a pointer to it so that ""getCanonical"" can be fast.; //; // - Most links in the chain point to previous, except the link out of; // the first; it points to latest.; //; // - Elements are called ""first"", ""previous"", ""latest"" or; // ""most-recent"" when referring to temporal order: order of addition; // to the chain.; //; // - It's easiest to just ignore the implementation of DeclLink when making; // sense of the redeclaration chain.; //; // - There's also a ""definition"" link for several types of; // redeclarable, where only one definition should exist at any given; // time (and the defn pointer is stored in the decl's ""data"" which; // is copied to every element on the chain when it's changed).; //; // Here is some ASCII art:; //; // ""first"" ""latest""; // ""canonical"" ""most recent""; // +------------+ first +--------------+; // | | <--------------------------- | |; // | | | |; // | | | |; // | | +--------------+ | |; // | | first | | | |; // | | <---- | | | |; // | | | | | |; // | @class A | link | @interface A | link | @class A |; // | seen first | <---- | seen second | <---- | seen third |; // | | | | | |; // +------------+ +--------------+ +--------------+; // | data | defn | data | defn | data |; // | | ----> | | <---- | |; // +------------+ +--------------+ +--------------+; // | | ^ ^; // | |defn | |; // | link +-----+ |; // +-->-------------------------------------------+; /// Provides common interface for the Decls that can be redeclared.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Redeclarable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Redeclarable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Redeclarable.h:1903,Integrability,interface,interface,1903,"// Some notes on redeclarables:; //; // - Every redeclarable is on a circular linked list.; //; // - Every decl has a pointer to the first element of the chain _and_ a; // DeclLink that may point to one of 3 possible states:; // - the ""previous"" (temporal) element in the chain; // - the ""latest"" (temporal) element in the chain; // - the ""uninitialized-latest"" value (when newly-constructed); //; // - The first element is also often called the canonical element. Every; // element has a pointer to it so that ""getCanonical"" can be fast.; //; // - Most links in the chain point to previous, except the link out of; // the first; it points to latest.; //; // - Elements are called ""first"", ""previous"", ""latest"" or; // ""most-recent"" when referring to temporal order: order of addition; // to the chain.; //; // - It's easiest to just ignore the implementation of DeclLink when making; // sense of the redeclaration chain.; //; // - There's also a ""definition"" link for several types of; // redeclarable, where only one definition should exist at any given; // time (and the defn pointer is stored in the decl's ""data"" which; // is copied to every element on the chain when it's changed).; //; // Here is some ASCII art:; //; // ""first"" ""latest""; // ""canonical"" ""most recent""; // +------------+ first +--------------+; // | | <--------------------------- | |; // | | | |; // | | | |; // | | +--------------+ | |; // | | first | | | |; // | | <---- | | | |; // | | | | | |; // | @class A | link | @interface A | link | @class A |; // | seen first | <---- | seen second | <---- | seen third |; // | | | | | |; // +------------+ +--------------+ +--------------+; // | data | defn | data | defn | data |; // | | ----> | | <---- | |; // +------------+ +--------------+ +--------------+; // | | ^ ^; // | |defn | |; // | link +-----+ |; // +-->-------------------------------------------+; /// Provides common interface for the Decls that can be redeclared.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Redeclarable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Redeclarable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Redeclarable.h:92,Deployability,update,updated,92,"/// A pointer to a known latest declaration, either statically known or; /// generationally updated as decls are added by an external source.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Redeclarable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Redeclarable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Redeclarable.h:109,Integrability,depend,dependencies,109,"/// We store a pointer to the ASTContext in the UninitializedLatest; /// pointer, but to avoid circular type dependencies when we steal the low; /// bits of this pointer, we use a raw void* here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Redeclarable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Redeclarable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Redeclarable.h:89,Safety,avoid,avoid,89,"/// We store a pointer to the ASTContext in the UninitializedLatest; /// pointer, but to avoid circular type dependencies when we steal the low; /// bits of this pointer, we use a raw void* here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Redeclarable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Redeclarable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Redeclarable.h:3,Energy Efficiency,Allocate,Allocate,3,"// Allocate the generational 'most recent' cache now, if needed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Redeclarable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Redeclarable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Redeclarable.h:43,Performance,cache,cache,43,"// Allocate the generational 'most recent' cache now, if needed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Redeclarable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Redeclarable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Redeclarable.h:96,Performance,load,loaded,96,/// Get the primary declaration for a declaration from an AST file. That; /// will be the first-loaded declaration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Redeclarable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Redeclarable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Redeclarable.h:20,Integrability,interface,interface,20,"/// Provides common interface for the Decls that cannot be redeclared,; /// but can be merged if the same declaration is brought in from multiple; /// modules.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Redeclarable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Redeclarable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Redeclarable.h:6,Integrability,wrap,wrapper,6,"/// A wrapper class around a pointer that always points to its canonical; /// declaration.; ///; /// CanonicalDeclPtr<decl_type> behaves just like decl_type*, except we call; /// decl_type::getCanonicalDecl() on construction.; ///; /// This is useful for hashtables that you want to be keyed on a declaration's; /// canonical decl -- if you use CanonicalDeclPtr as the key, you don't need to; /// remember to call getCanonicalDecl() everywhere.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Redeclarable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Redeclarable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Redeclarable.h:255,Security,hash,hashtables,255,"/// A wrapper class around a pointer that always points to its canonical; /// declaration.; ///; /// CanonicalDeclPtr<decl_type> behaves just like decl_type*, except we call; /// decl_type::getCanonicalDecl() on construction.; ///; /// This is useful for hashtables that you want to be keyed on a declaration's; /// canonical decl -- if you use CanonicalDeclPtr as the key, you don't need to; /// remember to call getCanonicalDecl() everywhere.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Redeclarable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Redeclarable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/SelectorLocationsKind.h:66,Deployability,release,release,66,"/// For nullary selectors, immediately before the end:; /// ""[foo release]"" / ""-(void)release;""; /// Or immediately before the arguments:; /// ""[foo first:1 second:2]"" / ""-(id)first:(int)x second:(int)y;",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/SelectorLocationsKind.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/SelectorLocationsKind.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/SelectorLocationsKind.h:86,Deployability,release,release,86,"/// For nullary selectors, immediately before the end:; /// ""[foo release]"" / ""-(void)release;""; /// Or immediately before the arguments:; /// ""[foo first:1 second:2]"" / ""-(id)first:(int)x second:(int)y;",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/SelectorLocationsKind.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/SelectorLocationsKind.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/SelectorLocationsKind.h:66,Deployability,release,release,66,"/// For nullary selectors, immediately before the end:; /// ""[foo release]"" / ""-(void)release;""; /// Or with a space between the arguments:; /// ""[foo first: 1 second: 2]"" / ""-(id)first: (int)x second: (int)y;",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/SelectorLocationsKind.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/SelectorLocationsKind.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/SelectorLocationsKind.h:86,Deployability,release,release,86,"/// For nullary selectors, immediately before the end:; /// ""[foo release]"" / ""-(void)release;""; /// Or with a space between the arguments:; /// ""[foo first: 1 second: 2]"" / ""-(id)first: (int)x second: (int)y;",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/SelectorLocationsKind.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/SelectorLocationsKind.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/SelectorLocationsKind.h:121,Deployability,release,release,121,"/// Get the ""standard"" location of a selector identifier, e.g:; /// For nullary selectors, immediately before ']': ""[foo release]""; ///; /// \param WithArgSpace if true the standard location is with a space apart; /// before arguments: ""[foo first: 1 second: 2]""; /// If false: ""[foo first:1 second:2]""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/SelectorLocationsKind.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/SelectorLocationsKind.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/SelectorLocationsKind.h:121,Deployability,release,release,121,"/// Get the ""standard"" location of a selector identifier, e.g:; /// For nullary selectors, immediately before ']': ""[foo release]""; ///; /// \param WithArgSpace if true the standard location is with a space apart; /// before arguments: ""-(id)first: (int)x second: (int)y;""; /// If false: ""-(id)first:(int)x second:(int)y;""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/SelectorLocationsKind.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/SelectorLocationsKind.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:410,Integrability,interface,interface,410,"//===- Stmt.h - Classes for representing statements -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the Stmt interface and subclasses.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:48,Modifiability,variab,variable,48,/// True if this if statement has storage for a variable declaration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:55,Modifiability,variab,variable,55,/// True if the SwitchStmt has storage for a condition variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:54,Modifiability,variab,variable,54,/// True if the WhileStmt has storage for a condition variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:36,Energy Efficiency,allocate,allocated,36,/// The kind of result that is tail-allocated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:79,Energy Efficiency,allocate,allocated,79,"/// When ResultKind == ConstantResultStorageKind::Int64, true if the; /// tail-allocated integer is unsigned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:87,Energy Efficiency,allocate,allocated,87,/// When ResultKind == ConstantResultStorageKind::Int64. the BitWidth of the; /// tail-allocated integer. 7 bits because it is the minimal number of bits; /// to represent a value from 0 to 64 (the size of the tail-allocated; /// integer).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:215,Energy Efficiency,allocate,allocated,215,/// When ResultKind == ConstantResultStorageKind::Int64. the BitWidth of the; /// tail-allocated integer. 7 bits because it is the minimal number of bits; /// to represent a value from 0 to 64 (the size of the tail-allocated; /// integer).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:109,Energy Efficiency,allocate,allocated,109,"/// When ResultKind == ConstantResultStorageKind::APValue, true if the; /// ASTContext will cleanup the tail-allocated APValue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:152,Security,access,access,152,/// The offset in bytes from the this pointer to the start of the; /// trailing objects belonging to CallExpr. Intentionally byte sized; /// for faster access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:218,Energy Efficiency,allocate,allocated,218,"/// True if this member expression used a nested-name-specifier to; /// refer to the member, e.g., ""x->Base::f"", or found its member via; /// a using declaration. When true, a MemberExprNameQualifier; /// structure is allocated immediately after the MemberExpr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:147,Integrability,depend,dependent,147,/// The number of levels of template parameters enclosing this statement; /// expression. Used to determine if a statement expression remains; /// dependent after instantiation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:23,Modifiability,variab,variable,23,/// Whether the thrown variable (if any) is in scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:10,Energy Efficiency,allocate,allocate,10,"/// Do we allocate an array? If so, the first trailing ""Stmt *"" is the; /// size expression.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:86,Energy Efficiency,allocate,allocated,86,"/// If this is an array allocation, does the usual deallocation; /// function for the allocated type want to know the allocated size?",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:118,Energy Efficiency,allocate,allocated,118,"/// If this is an array allocation, does the usual deallocation; /// function for the allocated type want to know the allocated size?",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:16,Energy Efficiency,allocate,allocated,16,/// True if the allocated type was expressed as a parenthesized type-id.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:36,Integrability,depend,dependent,36,"/// If this expression is not value-dependent, this indicates whether; /// the trait evaluated true or false.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:122,Testability,test,test,122,"/// The number of arguments to this type trait. According to [implimits]; /// 8 bits would be enough, but we require (and test for) at least 16 bits; /// to mirror FunctionType.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:190,Deployability,update,updated,190,"/// Padding used by the derived classes to store various bits. If you; /// need to add some data here, shrink this padding and add your data; /// above. NumOverloadExprBits also needs to be updated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:69,Integrability,depend,dependent,69,/// True if these lookup results should be extended by; /// argument-dependent lookup if this is the operand of a function call.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:43,Modifiability,extend,extended,43,/// True if these lookup results should be extended by; /// argument-dependent lookup if this is the operand of a function call.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:130,Deployability,install,installed,130,/// viewAST - Visualize an AST rooted at this Stmt* using GraphViz. Only; /// works on systems with GraphViz (Mac OS X) or dot+gv installed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:182,Security,Hash,Hash,182,/// Calculate a unique representation for a statement that is; /// stable across compiler invocations.; ///; /// \param ID profile information will be stored in ID.; ///; /// \param Hash an ODRHash object which will be called where pointers would; /// have been used in the Profile function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:15,Energy Efficiency,Adapt,Adaptor,15,"/// DeclStmt - Adaptor class for mixing declarations with statements and; /// expressions. For example, CompoundStmt mixes statements, expressions; /// and declarations (variables, types). Another example is ForStmt, where; /// the first statement can be an expression or a declaration.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:15,Modifiability,Adapt,Adaptor,15,"/// DeclStmt - Adaptor class for mixing declarations with statements and; /// expressions. For example, CompoundStmt mixes statements, expressions; /// and declarations (variables, types). Another example is ForStmt, where; /// the first statement can be an expression or a declaration.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:170,Modifiability,variab,variables,170,"/// DeclStmt - Adaptor class for mixing declarations with statements and; /// expressions. For example, CompoundStmt mixes statements, expressions; /// and declarations (variables, types). Another example is ForStmt, where; /// the first statement can be an expression or a declaration.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:101,Energy Efficiency,allocate,allocated,101,/// Build a case statement assuming that the storage for the; /// trailing objects has been properly allocated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:82,Testability,Assert,Assert,82,/// Set the location of the ... in a case statement of the form LHS ... RHS.; /// Assert that this case statement is of this form.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:387,Modifiability,variab,variable,387,"// IfStmt is followed by several trailing objects, some of which optional.; // Note that it would be more convenient to put the optional trailing; // objects at then end but this would change the order of the children.; // The trailing objects are in order:; //; // * A ""Stmt *"" for the init statement.; // Present if and only if hasInitStorage().; //; // * A ""Stmt *"" for the condition variable.; // Present if and only if hasVarStorage(). This is in fact a ""DeclStmt *"".; //; // * A ""Stmt *"" for the condition.; // Always present. This is in fact a ""Expr *"".; //; // * A ""Stmt *"" for the then statement.; // Always present.; //; // * A ""Stmt *"" for the else statement.; // Present if and only if hasElseStorage().; //; // * A ""SourceLocation"" for the location of the ""else"".; // Present if and only if hasElseStorage().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:89,Modifiability,variab,variable,89,"/// Create an empty IfStmt optionally with storage for an else statement,; /// condition variable and init expression.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:42,Modifiability,variab,variable,42,/// True if this IfStmt has storage for a variable declaration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:17,Modifiability,variab,variable,17,"/// Retrieve the variable declared in this ""if"" statement, if any.; ///; /// In the following example, ""x"" is the condition variable.; /// \code; /// if (int x = foo()) {; /// printf(""x is %d"", x);; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:124,Modifiability,variab,variable,124,"/// Retrieve the variable declared in this ""if"" statement, if any.; ///; /// In the following example, ""x"" is the condition variable.; /// \code; /// if (int x = foo()) {; /// printf(""x is %d"", x);; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:22,Modifiability,variab,variable,22,/// Set the condition variable for this if statement.; /// The if statement must have storage for the condition variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:112,Modifiability,variab,variable,112,/// Set the condition variable for this if statement.; /// The if statement must have storage for the condition variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:35,Modifiability,variab,variable,35,"/// If this IfStmt has a condition variable, return the faux DeclStmt; /// associated with the creation of that condition variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:122,Modifiability,variab,variable,122,"/// If this IfStmt has a condition variable, return the faux DeclStmt; /// associated with the creation of that condition variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:123,Integrability,depend,dependent,123,"/// If this is an 'if constexpr', determine which substatement will be taken.; /// Otherwise, or if the condition is value-dependent, returns std::nullopt.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:138,Modifiability,variab,variable,138,// Iterators over subexpressions. The iterators will include iterating; // over the initialization expression referenced by the condition variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:392,Modifiability,variab,variable,392,"// SwitchStmt is followed by several trailing objects,; // some of which optional. Note that it would be more convenient to; // put the optional trailing objects at the end but this would change; // the order in children().; // The trailing objects are in order:; //; // * A ""Stmt *"" for the init statement.; // Present if and only if hasInitStorage().; //; // * A ""Stmt *"" for the condition variable.; // Present if and only if hasVarStorage(). This is in fact a ""DeclStmt *"".; //; // * A ""Stmt *"" for the condition.; // Always present. This is in fact an ""Expr *"".; //; // * A ""Stmt *"" for the body.; // Always present.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:105,Modifiability,variab,variable,105,/// Create an empty switch statement optionally with storage for; /// an init expression and a condition variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:56,Modifiability,variab,variable,56,/// True if this SwitchStmt has storage for a condition variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:17,Modifiability,variab,variable,17,"/// Retrieve the variable declared in this ""switch"" statement, if any.; ///; /// In the following example, ""x"" is the condition variable.; /// \code; /// switch (int x = foo()) {; /// case 0: break;; /// // ...; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:128,Modifiability,variab,variable,128,"/// Retrieve the variable declared in this ""switch"" statement, if any.; ///; /// In the following example, ""x"" is the condition variable.; /// \code; /// switch (int x = foo()) {; /// case 0: break;; /// // ...; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:22,Modifiability,variab,variable,22,/// Set the condition variable in this switch statement.; /// The switch statement must have storage for it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:39,Modifiability,variab,variable,39,"/// If this SwitchStmt has a condition variable, return the faux DeclStmt; /// associated with the creation of that condition variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:126,Modifiability,variab,variable,126,"/// If this SwitchStmt has a condition variable, return the faux DeclStmt; /// associated with the creation of that condition variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:287,Modifiability,variab,variable,287,"// WhileStmt is followed by several trailing objects,; // some of which optional. Note that it would be more; // convenient to put the optional trailing object at the end; // but this would affect children().; // The trailing objects are in order:; //; // * A ""Stmt *"" for the condition variable.; // Present if and only if hasVarStorage(). This is in fact a ""DeclStmt *"".; //; // * A ""Stmt *"" for the condition.; // Always present. This is in fact an ""Expr *"".; //; // * A ""Stmt *"" for the body.; // Always present.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:81,Modifiability,variab,variable,81,/// Create an empty while statement optionally with storage for; /// a condition variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:55,Modifiability,variab,variable,55,/// True if this WhileStmt has storage for a condition variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:17,Modifiability,variab,variable,17,"/// Retrieve the variable declared in this ""while"" statement, if any.; ///; /// In the following example, ""x"" is the condition variable.; /// \code; /// while (int x = random()) {; /// // ...; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:127,Modifiability,variab,variable,127,"/// Retrieve the variable declared in this ""while"" statement, if any.; ///; /// In the following example, ""x"" is the condition variable.; /// \code; /// while (int x = random()) {; /// // ...; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:22,Modifiability,variab,variable,22,/// Set the condition variable of this while statement.; /// The while statement must have storage for it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:38,Modifiability,variab,variable,38,"/// If this WhileStmt has a condition variable, return the faux DeclStmt; /// associated with the creation of that condition variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:125,Modifiability,variab,variable,125,"/// If this WhileStmt has a condition variable, return the faux DeclStmt; /// associated with the creation of that condition variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:17,Modifiability,variab,variable,17,"/// Retrieve the variable declared in this ""for"" statement, if any.; ///; /// In the following example, ""y"" is the condition variable.; /// \code; /// for (int x = random(); int y = mangle(x); ++x) {; /// // ...; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:125,Modifiability,variab,variable,125,"/// Retrieve the variable declared in this ""for"" statement, if any.; ///; /// In the following example, ""y"" is the condition variable.; /// \code; /// for (int x = random(); int y = mangle(x); ++x) {; /// // ...; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:36,Modifiability,variab,variable,36,"/// If this ForStmt has a condition variable, return the faux DeclStmt; /// associated with the creation of that condition variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:123,Modifiability,variab,variable,123,"/// If this ForStmt has a condition variable, return the faux DeclStmt; /// associated with the creation of that condition variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:341,Integrability,depend,depend,341,"/// ReturnStmt - This represents a return, optionally of an expression:; /// return;; /// return 4;; ///; /// Note that GCC allows return with no argument in a function declared to; /// return a value, and it allows returning a value in functions declared to; /// return void. We explicitly model this in the AST, which means you can't; /// depend on the return type of the function and the presence of an argument.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:17,Modifiability,variab,variable,17,/// Retrieve the variable that might be used for the named return; /// value optimization.; ///; /// The optimization itself can only be performed if the variable is; /// also marked as an NRVO object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:154,Modifiability,variab,variable,154,/// Retrieve the variable that might be used for the named return; /// value optimization.; ///; /// The optimization itself can only be performed if the variable is; /// also marked as an NRVO object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:77,Performance,optimiz,optimization,77,/// Retrieve the variable that might be used for the named return; /// value optimization.; ///; /// The optimization itself can only be performed if the variable is; /// also marked as an NRVO object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:105,Performance,optimiz,optimization,105,/// Retrieve the variable that might be used for the named return; /// value optimization.; ///; /// The optimization itself can only be performed if the variable is; /// also marked as an NRVO object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:137,Performance,perform,performed,137,/// Retrieve the variable that might be used for the named return; /// value optimization.; ///; /// The optimization itself can only be performed if the variable is; /// also marked as an NRVO object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:12,Modifiability,variab,variable,12,"/// Set the variable that might be used for the named return value; /// optimization. The return statement must have storage for it,; /// which is the case if and only if hasNRVOCandidate() is true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:72,Performance,optimiz,optimization,72,"/// Set the variable that might be used for the named return value; /// optimization. The return statement must have storage for it,; /// which is the case if and only if hasNRVOCandidate() is true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:107,Performance,optimiz,optimized,107,"/// If true, treat this inline assembly as having side effects.; /// This assembly statement should not be optimized, deleted or moved.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:36,Energy Efficiency,allocate,allocate,36,"// FIXME: If we wanted to, we could allocate all of these in one big array.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:136,Availability,error,errors,136,"/// AnalyzeAsmString - Analyze the asm string of the current asm, decomposing; /// it into pieces. If the asm string is erroneous, emit errors and return; /// true, otherwise return false. This handles canonicalization and; /// translation of strings from GCC syntax to LLVM IR syntax, and handles; //// flattening of named references like %[foo] to Operand AsmStringPiece's.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:75,Modifiability,variab,variable-length,75,"/// The different capture forms: by 'this', by reference, capture for; /// variable-length array type etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:38,Modifiability,variab,variable,38,"/// Describes the capture of either a variable, or 'this', or; /// variable-length array type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:67,Modifiability,variab,variable-length,67,"/// Describes the capture of either a variable, or 'this', or; /// variable-length array type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:184,Modifiability,variab,variable,184,"/// Create a new capture.; ///; /// \param Loc The source location associated with this capture.; ///; /// \param Kind The kind of capture (this, ByRef, ...).; ///; /// \param Var The variable being captured, or null if capturing this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:46,Modifiability,variab,variable,46,/// Retrieve the source location at which the variable or 'this' was; /// first used.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:45,Modifiability,variab,variable,45,/// Determine whether this capture handles a variable (by reference).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:45,Modifiability,variab,variable,45,/// Determine whether this capture handles a variable by copy.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:45,Modifiability,variab,variable-length,45,/// Determine whether this capture handles a variable-length array; /// type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:36,Modifiability,variab,variable,36,/// Retrieve the declaration of the variable being captured.; ///; /// This operation is only valid if this capture captures a variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:127,Modifiability,variab,variable,127,/// Retrieve the declaration of the variable being captured.; ///; /// This operation is only valid if this capture captures a variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:18,Modifiability,variab,variable,18,"/// The number of variable captured, including 'this'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:28,Modifiability,variab,variables,28,"/// The record for captured variables, a RecordDecl or CXXRecordDecl.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:49,Modifiability,variab,variables,49,/// Retrieve the record declaration for captured variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:44,Modifiability,variab,variables,44,/// Set the record declaration for captured variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:17,Modifiability,variab,variable,17,/// True if this variable has been captured.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtCXX.h:87,Integrability,depend,dependent,87,"/// Representation of a Microsoft __if_exists or __if_not_exists; /// statement with a dependent name.; ///; /// The __if_exists statement can be used to include a sequence of statements; /// in the program only when a particular dependent name does not exist. For; /// example:; ///; /// \code; /// template<typename T>; /// void call_foo(T &t) {; /// __if_exists (T::foo) {; /// t.foo(); // okay: only called when T::foo exists.; /// }; /// }; /// \endcode; ///; /// Similarly, the __if_not_exists statement can be used to include the; /// statements when a particular name does not exist.; ///; /// Note that this statement only captures __if_exists and __if_not_exists; /// statements whose name is dependent. All non-dependent cases are handled; /// directly in the parser, so that they don't introduce a new scope. Clang; /// introduces scopes in the dependent case to keep names inside the compound; /// statement from leaking out into the surround statements, which would; /// compromise the template instantiation model. This behavior differs from; /// Visual C++ (which never introduces a scope), but is a fairly reasonable; /// approximation of the VC++ behavior.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtCXX.h:230,Integrability,depend,dependent,230,"/// Representation of a Microsoft __if_exists or __if_not_exists; /// statement with a dependent name.; ///; /// The __if_exists statement can be used to include a sequence of statements; /// in the program only when a particular dependent name does not exist. For; /// example:; ///; /// \code; /// template<typename T>; /// void call_foo(T &t) {; /// __if_exists (T::foo) {; /// t.foo(); // okay: only called when T::foo exists.; /// }; /// }; /// \endcode; ///; /// Similarly, the __if_not_exists statement can be used to include the; /// statements when a particular name does not exist.; ///; /// Note that this statement only captures __if_exists and __if_not_exists; /// statements whose name is dependent. All non-dependent cases are handled; /// directly in the parser, so that they don't introduce a new scope. Clang; /// introduces scopes in the dependent case to keep names inside the compound; /// statement from leaking out into the surround statements, which would; /// compromise the template instantiation model. This behavior differs from; /// Visual C++ (which never introduces a scope), but is a fairly reasonable; /// approximation of the VC++ behavior.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtCXX.h:703,Integrability,depend,dependent,703,"/// Representation of a Microsoft __if_exists or __if_not_exists; /// statement with a dependent name.; ///; /// The __if_exists statement can be used to include a sequence of statements; /// in the program only when a particular dependent name does not exist. For; /// example:; ///; /// \code; /// template<typename T>; /// void call_foo(T &t) {; /// __if_exists (T::foo) {; /// t.foo(); // okay: only called when T::foo exists.; /// }; /// }; /// \endcode; ///; /// Similarly, the __if_not_exists statement can be used to include the; /// statements when a particular name does not exist.; ///; /// Note that this statement only captures __if_exists and __if_not_exists; /// statements whose name is dependent. All non-dependent cases are handled; /// directly in the parser, so that they don't introduce a new scope. Clang; /// introduces scopes in the dependent case to keep names inside the compound; /// statement from leaking out into the surround statements, which would; /// compromise the template instantiation model. This behavior differs from; /// Visual C++ (which never introduces a scope), but is a fairly reasonable; /// approximation of the VC++ behavior.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtCXX.h:722,Integrability,depend,dependent,722,"/// Representation of a Microsoft __if_exists or __if_not_exists; /// statement with a dependent name.; ///; /// The __if_exists statement can be used to include a sequence of statements; /// in the program only when a particular dependent name does not exist. For; /// example:; ///; /// \code; /// template<typename T>; /// void call_foo(T &t) {; /// __if_exists (T::foo) {; /// t.foo(); // okay: only called when T::foo exists.; /// }; /// }; /// \endcode; ///; /// Similarly, the __if_not_exists statement can be used to include the; /// statements when a particular name does not exist.; ///; /// Note that this statement only captures __if_exists and __if_not_exists; /// statements whose name is dependent. All non-dependent cases are handled; /// directly in the parser, so that they don't introduce a new scope. Clang; /// introduces scopes in the dependent case to keep names inside the compound; /// statement from leaking out into the surround statements, which would; /// compromise the template instantiation model. This behavior differs from; /// Visual C++ (which never introduces a scope), but is a fairly reasonable; /// approximation of the VC++ behavior.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtCXX.h:857,Integrability,depend,dependent,857,"/// Representation of a Microsoft __if_exists or __if_not_exists; /// statement with a dependent name.; ///; /// The __if_exists statement can be used to include a sequence of statements; /// in the program only when a particular dependent name does not exist. For; /// example:; ///; /// \code; /// template<typename T>; /// void call_foo(T &t) {; /// __if_exists (T::foo) {; /// t.foo(); // okay: only called when T::foo exists.; /// }; /// }; /// \endcode; ///; /// Similarly, the __if_not_exists statement can be used to include the; /// statements when a particular name does not exist.; ///; /// Note that this statement only captures __if_exists and __if_not_exists; /// statements whose name is dependent. All non-dependent cases are handled; /// directly in the parser, so that they don't introduce a new scope. Clang; /// introduces scopes in the dependent case to keep names inside the compound; /// statement from leaking out into the surround statements, which would; /// compromise the template instantiation model. This behavior differs from; /// Visual C++ (which never introduces a scope), but is a fairly reasonable; /// approximation of the VC++ behavior.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtCXX.h:42,Testability,test,testing,42,"/// Retrieve the name of the entity we're testing for, along with; /// location information",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtCXX.h:156,Availability,down,down,156,/// Represents the body of a coroutine. This wraps the normal function; /// body and holds the additional semantic context required to set up and tear; /// down the coroutine frame.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtCXX.h:45,Integrability,wrap,wraps,45,/// Represents the body of a coroutine. This wraps the normal function; /// body and holds the additional semantic context required to set up and tear; /// down the coroutine frame.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtCXX.h:148,Integrability,wrap,wrap,148,"/// Retrieve the body of the coroutine as written. This will be either; /// a CompoundStmt. If the coroutine is in function-try-block, we will; /// wrap the CXXTryStmt into a CompoundStmt to keep consistency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtCXX.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtCXX.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtObjC.h:31,Integrability,synchroniz,synchronized,31,/// Represents Objective-C's \@synchronized statement.; ///; /// Example:; /// \code; /// @synchronized (sem) {; /// do-something;; /// }; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtObjC.h:91,Integrability,synchroniz,synchronized,91,/// Represents Objective-C's \@synchronized statement.; ///; /// Example:; /// \code; /// @synchronized (sem) {; /// do-something;; /// }; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtObjC.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtObjC.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:994,Integrability,wrap,wraps,994,"------------------===//; // AST classes for directives.; //===----------------------------------------------------------------------===//; /// Representation of an OpenMP canonical loop.; ///; /// OpenMP 1.0 C/C++, section 2.4.1 for Construct; canonical-shape; /// OpenMP 2.0 C/C++, section 2.4.1 for Construct; canonical-shape; /// OpenMP 2.5, section 2.5.1 Loop Construct; canonical form; /// OpenMP 3.1, section 2.5.1 Loop Construct; canonical form; /// OpenMP 4.0, section 2.6 Canonical Loop Form; /// OpenMP 4.5, section 2.6 Canonical Loop Form; /// OpenMP 5.0, section 2.9.1 Canonical Loop Form; /// OpenMP 5.1, section 2.11.1 Canonical Loop Nest Form; ///; /// An OpenMP canonical loop is a for-statement or range-based for-statement; /// with additional requirements that ensure that the number of iterations is; /// known before entering the loop and allow skipping to an arbitrary iteration.; /// The OMPCanonicalLoop AST node wraps a ForStmt or CXXForRangeStmt that is; /// known to fulfill OpenMP's canonical loop requirements because of being; /// associated to an OMPLoopBasedDirective. That is, the general structure is:; ///; /// OMPLoopBasedDirective; /// [`- CapturedStmt ]; /// [ `- CapturedDecl]; /// ` OMPCanonicalLoop; /// `- ForStmt/CXXForRangeStmt; /// `- Stmt; ///; /// One or multiple CapturedStmt/CapturedDecl pairs may be inserted by some; /// directives such as OMPParallelForDirective, but others do not need them; /// (such as OMPTileDirective). In The OMPCanonicalLoop and; /// ForStmt/CXXForRangeStmt pair is repeated for loop associated with the; /// directive. A OMPCanonicalLoop must not appear in the AST unless associated; /// with a OMPLoopBasedDirective. In an imperfectly nested loop nest, the; /// OMPCanonicalLoop may also be wrapped in a CompoundStmt:; ///; /// [...]; /// ` OMPCanonicalLoop; /// `- ForStmt/CXXForRangeStmt; /// `- CompoundStmt; /// |- Leading in-between code (if any); /// |- OMPCanonicalLoop; /// | `- ForStmt/CXXForRangeStmt; /// | `- ..",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:1826,Integrability,wrap,wrapped,1826,"additional requirements that ensure that the number of iterations is; /// known before entering the loop and allow skipping to an arbitrary iteration.; /// The OMPCanonicalLoop AST node wraps a ForStmt or CXXForRangeStmt that is; /// known to fulfill OpenMP's canonical loop requirements because of being; /// associated to an OMPLoopBasedDirective. That is, the general structure is:; ///; /// OMPLoopBasedDirective; /// [`- CapturedStmt ]; /// [ `- CapturedDecl]; /// ` OMPCanonicalLoop; /// `- ForStmt/CXXForRangeStmt; /// `- Stmt; ///; /// One or multiple CapturedStmt/CapturedDecl pairs may be inserted by some; /// directives such as OMPParallelForDirective, but others do not need them; /// (such as OMPTileDirective). In The OMPCanonicalLoop and; /// ForStmt/CXXForRangeStmt pair is repeated for loop associated with the; /// directive. A OMPCanonicalLoop must not appear in the AST unless associated; /// with a OMPLoopBasedDirective. In an imperfectly nested loop nest, the; /// OMPCanonicalLoop may also be wrapped in a CompoundStmt:; ///; /// [...]; /// ` OMPCanonicalLoop; /// `- ForStmt/CXXForRangeStmt; /// `- CompoundStmt; /// |- Leading in-between code (if any); /// |- OMPCanonicalLoop; /// | `- ForStmt/CXXForRangeStmt; /// | `- ...; /// `- Trailing in-between code (if any); ///; /// The leading/trailing in-between code must not itself be a OMPCanonicalLoop; /// to avoid confusion which loop belongs to the nesting.; ///; /// There are three different kinds of iteration variables for different; /// purposes:; /// * Loop user variable: The user-accessible variable with different value for; /// each iteration.; /// * Loop iteration variable: The variable used to identify a loop iteration;; /// for range-based for-statement, this is the hidden iterator '__begin'. For; /// other loops, it is identical to the loop user variable. Must be a; /// random-access iterator, pointer or integer type.; /// * Logical iteration counter: Normalized loop counter starting at 0 and; /// i",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:3869,Integrability,wrap,wrapped,3869," /// of the loop iteration variable and is always an unsigned integer type; /// appropriate to represent the range of the loop iteration variable. Its; /// value corresponds to the logical iteration number in the OpenMP; /// specification.; ///; /// This AST node provides two captured statements:; /// * The distance function which computes the number of iterations.; /// * The loop user variable function that computes the loop user variable when; /// given a logical iteration number.; ///; /// These captured statements provide the link between C/C++ semantics and the; /// logical iteration counters used by the OpenMPIRBuilder which is; /// language-agnostic and therefore does not know e.g. how to advance a; /// random-access iterator. The OpenMPIRBuilder will use this information to; /// apply simd, workshare-loop, distribute, taskloop and loop directives to the; /// loop. For compatibility with the non-OpenMPIRBuilder codegen path, an; /// OMPCanonicalLoop can itself also be wrapped into the CapturedStmts of an; /// OMPLoopDirective and skipped when searching for the associated syntactical; /// loop.; ///; /// Example:; /// <code>; /// std::vector<std::string> Container{1,2,3};; /// for (std::string Str : Container); /// Body(Str);; /// </code>; /// which is syntactic sugar for approximately:; /// <code>; /// auto &&__range = Container;; /// auto __begin = std::begin(__range);; /// auto __end = std::end(__range);; /// for (; __begin != __end; ++__begin) {; /// std::String Str = *__begin;; /// Body(Str);; /// }; /// </code>; /// In this example, the loop user variable is `Str`, the loop iteration; /// variable is `__begin` of type `std::vector<std::string>::iterator` and the; /// logical iteration number type is `size_t` (unsigned version of; /// `std::vector<std::string>::iterator::difference_type` aka `ptrdiff_t`).; /// Therefore, the distance function will be; /// <code>; /// [&](size_t &Result) { Result = __end - __begin; }; /// </code>; /// and the loop variable ",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:2301,Modifiability,variab,variables,2301,"///; /// One or multiple CapturedStmt/CapturedDecl pairs may be inserted by some; /// directives such as OMPParallelForDirective, but others do not need them; /// (such as OMPTileDirective). In The OMPCanonicalLoop and; /// ForStmt/CXXForRangeStmt pair is repeated for loop associated with the; /// directive. A OMPCanonicalLoop must not appear in the AST unless associated; /// with a OMPLoopBasedDirective. In an imperfectly nested loop nest, the; /// OMPCanonicalLoop may also be wrapped in a CompoundStmt:; ///; /// [...]; /// ` OMPCanonicalLoop; /// `- ForStmt/CXXForRangeStmt; /// `- CompoundStmt; /// |- Leading in-between code (if any); /// |- OMPCanonicalLoop; /// | `- ForStmt/CXXForRangeStmt; /// | `- ...; /// `- Trailing in-between code (if any); ///; /// The leading/trailing in-between code must not itself be a OMPCanonicalLoop; /// to avoid confusion which loop belongs to the nesting.; ///; /// There are three different kinds of iteration variables for different; /// purposes:; /// * Loop user variable: The user-accessible variable with different value for; /// each iteration.; /// * Loop iteration variable: The variable used to identify a loop iteration;; /// for range-based for-statement, this is the hidden iterator '__begin'. For; /// other loops, it is identical to the loop user variable. Must be a; /// random-access iterator, pointer or integer type.; /// * Logical iteration counter: Normalized loop counter starting at 0 and; /// incrementing by one at each iteration. Allows abstracting over the type; /// of the loop iteration variable and is always an unsigned integer type; /// appropriate to represent the range of the loop iteration variable. Its; /// value corresponds to the logical iteration number in the OpenMP; /// specification.; ///; /// This AST node provides two captured statements:; /// * The distance function which computes the number of iterations.; /// * The loop user variable function that computes the loop user variable when; /// given a lo",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:2357,Modifiability,variab,variable,2357,"///; /// One or multiple CapturedStmt/CapturedDecl pairs may be inserted by some; /// directives such as OMPParallelForDirective, but others do not need them; /// (such as OMPTileDirective). In The OMPCanonicalLoop and; /// ForStmt/CXXForRangeStmt pair is repeated for loop associated with the; /// directive. A OMPCanonicalLoop must not appear in the AST unless associated; /// with a OMPLoopBasedDirective. In an imperfectly nested loop nest, the; /// OMPCanonicalLoop may also be wrapped in a CompoundStmt:; ///; /// [...]; /// ` OMPCanonicalLoop; /// `- ForStmt/CXXForRangeStmt; /// `- CompoundStmt; /// |- Leading in-between code (if any); /// |- OMPCanonicalLoop; /// | `- ForStmt/CXXForRangeStmt; /// | `- ...; /// `- Trailing in-between code (if any); ///; /// The leading/trailing in-between code must not itself be a OMPCanonicalLoop; /// to avoid confusion which loop belongs to the nesting.; ///; /// There are three different kinds of iteration variables for different; /// purposes:; /// * Loop user variable: The user-accessible variable with different value for; /// each iteration.; /// * Loop iteration variable: The variable used to identify a loop iteration;; /// for range-based for-statement, this is the hidden iterator '__begin'. For; /// other loops, it is identical to the loop user variable. Must be a; /// random-access iterator, pointer or integer type.; /// * Logical iteration counter: Normalized loop counter starting at 0 and; /// incrementing by one at each iteration. Allows abstracting over the type; /// of the loop iteration variable and is always an unsigned integer type; /// appropriate to represent the range of the loop iteration variable. Its; /// value corresponds to the logical iteration number in the OpenMP; /// specification.; ///; /// This AST node provides two captured statements:; /// * The distance function which computes the number of iterations.; /// * The loop user variable function that computes the loop user variable when; /// given a lo",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:2387,Modifiability,variab,variable,2387,"///; /// One or multiple CapturedStmt/CapturedDecl pairs may be inserted by some; /// directives such as OMPParallelForDirective, but others do not need them; /// (such as OMPTileDirective). In The OMPCanonicalLoop and; /// ForStmt/CXXForRangeStmt pair is repeated for loop associated with the; /// directive. A OMPCanonicalLoop must not appear in the AST unless associated; /// with a OMPLoopBasedDirective. In an imperfectly nested loop nest, the; /// OMPCanonicalLoop may also be wrapped in a CompoundStmt:; ///; /// [...]; /// ` OMPCanonicalLoop; /// `- ForStmt/CXXForRangeStmt; /// `- CompoundStmt; /// |- Leading in-between code (if any); /// |- OMPCanonicalLoop; /// | `- ForStmt/CXXForRangeStmt; /// | `- ...; /// `- Trailing in-between code (if any); ///; /// The leading/trailing in-between code must not itself be a OMPCanonicalLoop; /// to avoid confusion which loop belongs to the nesting.; ///; /// There are three different kinds of iteration variables for different; /// purposes:; /// * Loop user variable: The user-accessible variable with different value for; /// each iteration.; /// * Loop iteration variable: The variable used to identify a loop iteration;; /// for range-based for-statement, this is the hidden iterator '__begin'. For; /// other loops, it is identical to the loop user variable. Must be a; /// random-access iterator, pointer or integer type.; /// * Logical iteration counter: Normalized loop counter starting at 0 and; /// incrementing by one at each iteration. Allows abstracting over the type; /// of the loop iteration variable and is always an unsigned integer type; /// appropriate to represent the range of the loop iteration variable. Its; /// value corresponds to the logical iteration number in the OpenMP; /// specification.; ///; /// This AST node provides two captured statements:; /// * The distance function which computes the number of iterations.; /// * The loop user variable function that computes the loop user variable when; /// given a lo",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:2464,Modifiability,variab,variable,2464,"TileDirective). In The OMPCanonicalLoop and; /// ForStmt/CXXForRangeStmt pair is repeated for loop associated with the; /// directive. A OMPCanonicalLoop must not appear in the AST unless associated; /// with a OMPLoopBasedDirective. In an imperfectly nested loop nest, the; /// OMPCanonicalLoop may also be wrapped in a CompoundStmt:; ///; /// [...]; /// ` OMPCanonicalLoop; /// `- ForStmt/CXXForRangeStmt; /// `- CompoundStmt; /// |- Leading in-between code (if any); /// |- OMPCanonicalLoop; /// | `- ForStmt/CXXForRangeStmt; /// | `- ...; /// `- Trailing in-between code (if any); ///; /// The leading/trailing in-between code must not itself be a OMPCanonicalLoop; /// to avoid confusion which loop belongs to the nesting.; ///; /// There are three different kinds of iteration variables for different; /// purposes:; /// * Loop user variable: The user-accessible variable with different value for; /// each iteration.; /// * Loop iteration variable: The variable used to identify a loop iteration;; /// for range-based for-statement, this is the hidden iterator '__begin'. For; /// other loops, it is identical to the loop user variable. Must be a; /// random-access iterator, pointer or integer type.; /// * Logical iteration counter: Normalized loop counter starting at 0 and; /// incrementing by one at each iteration. Allows abstracting over the type; /// of the loop iteration variable and is always an unsigned integer type; /// appropriate to represent the range of the loop iteration variable. Its; /// value corresponds to the logical iteration number in the OpenMP; /// specification.; ///; /// This AST node provides two captured statements:; /// * The distance function which computes the number of iterations.; /// * The loop user variable function that computes the loop user variable when; /// given a logical iteration number.; ///; /// These captured statements provide the link between C/C++ semantics and the; /// logical iteration counters used by the OpenMPIRBuilder which i",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:2478,Modifiability,variab,variable,2478,"TileDirective). In The OMPCanonicalLoop and; /// ForStmt/CXXForRangeStmt pair is repeated for loop associated with the; /// directive. A OMPCanonicalLoop must not appear in the AST unless associated; /// with a OMPLoopBasedDirective. In an imperfectly nested loop nest, the; /// OMPCanonicalLoop may also be wrapped in a CompoundStmt:; ///; /// [...]; /// ` OMPCanonicalLoop; /// `- ForStmt/CXXForRangeStmt; /// `- CompoundStmt; /// |- Leading in-between code (if any); /// |- OMPCanonicalLoop; /// | `- ForStmt/CXXForRangeStmt; /// | `- ...; /// `- Trailing in-between code (if any); ///; /// The leading/trailing in-between code must not itself be a OMPCanonicalLoop; /// to avoid confusion which loop belongs to the nesting.; ///; /// There are three different kinds of iteration variables for different; /// purposes:; /// * Loop user variable: The user-accessible variable with different value for; /// each iteration.; /// * Loop iteration variable: The variable used to identify a loop iteration;; /// for range-based for-statement, this is the hidden iterator '__begin'. For; /// other loops, it is identical to the loop user variable. Must be a; /// random-access iterator, pointer or integer type.; /// * Logical iteration counter: Normalized loop counter starting at 0 and; /// incrementing by one at each iteration. Allows abstracting over the type; /// of the loop iteration variable and is always an unsigned integer type; /// appropriate to represent the range of the loop iteration variable. Its; /// value corresponds to the logical iteration number in the OpenMP; /// specification.; ///; /// This AST node provides two captured statements:; /// * The distance function which computes the number of iterations.; /// * The loop user variable function that computes the loop user variable when; /// given a logical iteration number.; ///; /// These captured statements provide the link between C/C++ semantics and the; /// logical iteration counters used by the OpenMPIRBuilder which i",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:2652,Modifiability,variab,variable,2652,"with the; /// directive. A OMPCanonicalLoop must not appear in the AST unless associated; /// with a OMPLoopBasedDirective. In an imperfectly nested loop nest, the; /// OMPCanonicalLoop may also be wrapped in a CompoundStmt:; ///; /// [...]; /// ` OMPCanonicalLoop; /// `- ForStmt/CXXForRangeStmt; /// `- CompoundStmt; /// |- Leading in-between code (if any); /// |- OMPCanonicalLoop; /// | `- ForStmt/CXXForRangeStmt; /// | `- ...; /// `- Trailing in-between code (if any); ///; /// The leading/trailing in-between code must not itself be a OMPCanonicalLoop; /// to avoid confusion which loop belongs to the nesting.; ///; /// There are three different kinds of iteration variables for different; /// purposes:; /// * Loop user variable: The user-accessible variable with different value for; /// each iteration.; /// * Loop iteration variable: The variable used to identify a loop iteration;; /// for range-based for-statement, this is the hidden iterator '__begin'. For; /// other loops, it is identical to the loop user variable. Must be a; /// random-access iterator, pointer or integer type.; /// * Logical iteration counter: Normalized loop counter starting at 0 and; /// incrementing by one at each iteration. Allows abstracting over the type; /// of the loop iteration variable and is always an unsigned integer type; /// appropriate to represent the range of the loop iteration variable. Its; /// value corresponds to the logical iteration number in the OpenMP; /// specification.; ///; /// This AST node provides two captured statements:; /// * The distance function which computes the number of iterations.; /// * The loop user variable function that computes the loop user variable when; /// given a logical iteration number.; ///; /// These captured statements provide the link between C/C++ semantics and the; /// logical iteration counters used by the OpenMPIRBuilder which is; /// language-agnostic and therefore does not know e.g. how to advance a; /// random-access iterator. The Op",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:2906,Modifiability,variab,variable,2906,"mpoundStmt; /// |- Leading in-between code (if any); /// |- OMPCanonicalLoop; /// | `- ForStmt/CXXForRangeStmt; /// | `- ...; /// `- Trailing in-between code (if any); ///; /// The leading/trailing in-between code must not itself be a OMPCanonicalLoop; /// to avoid confusion which loop belongs to the nesting.; ///; /// There are three different kinds of iteration variables for different; /// purposes:; /// * Loop user variable: The user-accessible variable with different value for; /// each iteration.; /// * Loop iteration variable: The variable used to identify a loop iteration;; /// for range-based for-statement, this is the hidden iterator '__begin'. For; /// other loops, it is identical to the loop user variable. Must be a; /// random-access iterator, pointer or integer type.; /// * Logical iteration counter: Normalized loop counter starting at 0 and; /// incrementing by one at each iteration. Allows abstracting over the type; /// of the loop iteration variable and is always an unsigned integer type; /// appropriate to represent the range of the loop iteration variable. Its; /// value corresponds to the logical iteration number in the OpenMP; /// specification.; ///; /// This AST node provides two captured statements:; /// * The distance function which computes the number of iterations.; /// * The loop user variable function that computes the loop user variable when; /// given a logical iteration number.; ///; /// These captured statements provide the link between C/C++ semantics and the; /// logical iteration counters used by the OpenMPIRBuilder which is; /// language-agnostic and therefore does not know e.g. how to advance a; /// random-access iterator. The OpenMPIRBuilder will use this information to; /// apply simd, workshare-loop, distribute, taskloop and loop directives to the; /// loop. For compatibility with the non-OpenMPIRBuilder codegen path, an; /// OMPCanonicalLoop can itself also be wrapped into the CapturedStmts of an; /// OMPLoopDirective and ski",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:3016,Modifiability,variab,variable,3016,"mpoundStmt; /// |- Leading in-between code (if any); /// |- OMPCanonicalLoop; /// | `- ForStmt/CXXForRangeStmt; /// | `- ...; /// `- Trailing in-between code (if any); ///; /// The leading/trailing in-between code must not itself be a OMPCanonicalLoop; /// to avoid confusion which loop belongs to the nesting.; ///; /// There are three different kinds of iteration variables for different; /// purposes:; /// * Loop user variable: The user-accessible variable with different value for; /// each iteration.; /// * Loop iteration variable: The variable used to identify a loop iteration;; /// for range-based for-statement, this is the hidden iterator '__begin'. For; /// other loops, it is identical to the loop user variable. Must be a; /// random-access iterator, pointer or integer type.; /// * Logical iteration counter: Normalized loop counter starting at 0 and; /// incrementing by one at each iteration. Allows abstracting over the type; /// of the loop iteration variable and is always an unsigned integer type; /// appropriate to represent the range of the loop iteration variable. Its; /// value corresponds to the logical iteration number in the OpenMP; /// specification.; ///; /// This AST node provides two captured statements:; /// * The distance function which computes the number of iterations.; /// * The loop user variable function that computes the loop user variable when; /// given a logical iteration number.; ///; /// These captured statements provide the link between C/C++ semantics and the; /// logical iteration counters used by the OpenMPIRBuilder which is; /// language-agnostic and therefore does not know e.g. how to advance a; /// random-access iterator. The OpenMPIRBuilder will use this information to; /// apply simd, workshare-loop, distribute, taskloop and loop directives to the; /// loop. For compatibility with the non-OpenMPIRBuilder codegen path, an; /// OMPCanonicalLoop can itself also be wrapped into the CapturedStmts of an; /// OMPLoopDirective and ski",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:3268,Modifiability,variab,variable,3268,"bles for different; /// purposes:; /// * Loop user variable: The user-accessible variable with different value for; /// each iteration.; /// * Loop iteration variable: The variable used to identify a loop iteration;; /// for range-based for-statement, this is the hidden iterator '__begin'. For; /// other loops, it is identical to the loop user variable. Must be a; /// random-access iterator, pointer or integer type.; /// * Logical iteration counter: Normalized loop counter starting at 0 and; /// incrementing by one at each iteration. Allows abstracting over the type; /// of the loop iteration variable and is always an unsigned integer type; /// appropriate to represent the range of the loop iteration variable. Its; /// value corresponds to the logical iteration number in the OpenMP; /// specification.; ///; /// This AST node provides two captured statements:; /// * The distance function which computes the number of iterations.; /// * The loop user variable function that computes the loop user variable when; /// given a logical iteration number.; ///; /// These captured statements provide the link between C/C++ semantics and the; /// logical iteration counters used by the OpenMPIRBuilder which is; /// language-agnostic and therefore does not know e.g. how to advance a; /// random-access iterator. The OpenMPIRBuilder will use this information to; /// apply simd, workshare-loop, distribute, taskloop and loop directives to the; /// loop. For compatibility with the non-OpenMPIRBuilder codegen path, an; /// OMPCanonicalLoop can itself also be wrapped into the CapturedStmts of an; /// OMPLoopDirective and skipped when searching for the associated syntactical; /// loop.; ///; /// Example:; /// <code>; /// std::vector<std::string> Container{1,2,3};; /// for (std::string Str : Container); /// Body(Str);; /// </code>; /// which is syntactic sugar for approximately:; /// <code>; /// auto &&__range = Container;; /// auto __begin = std::begin(__range);; /// auto __end = std::end(",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:3314,Modifiability,variab,variable,3314,"bles for different; /// purposes:; /// * Loop user variable: The user-accessible variable with different value for; /// each iteration.; /// * Loop iteration variable: The variable used to identify a loop iteration;; /// for range-based for-statement, this is the hidden iterator '__begin'. For; /// other loops, it is identical to the loop user variable. Must be a; /// random-access iterator, pointer or integer type.; /// * Logical iteration counter: Normalized loop counter starting at 0 and; /// incrementing by one at each iteration. Allows abstracting over the type; /// of the loop iteration variable and is always an unsigned integer type; /// appropriate to represent the range of the loop iteration variable. Its; /// value corresponds to the logical iteration number in the OpenMP; /// specification.; ///; /// This AST node provides two captured statements:; /// * The distance function which computes the number of iterations.; /// * The loop user variable function that computes the loop user variable when; /// given a logical iteration number.; ///; /// These captured statements provide the link between C/C++ semantics and the; /// logical iteration counters used by the OpenMPIRBuilder which is; /// language-agnostic and therefore does not know e.g. how to advance a; /// random-access iterator. The OpenMPIRBuilder will use this information to; /// apply simd, workshare-loop, distribute, taskloop and loop directives to the; /// loop. For compatibility with the non-OpenMPIRBuilder codegen path, an; /// OMPCanonicalLoop can itself also be wrapped into the CapturedStmts of an; /// OMPLoopDirective and skipped when searching for the associated syntactical; /// loop.; ///; /// Example:; /// <code>; /// std::vector<std::string> Container{1,2,3};; /// for (std::string Str : Container); /// Body(Str);; /// </code>; /// which is syntactic sugar for approximately:; /// <code>; /// auto &&__range = Container;; /// auto __begin = std::begin(__range);; /// auto __end = std::end(",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:4464,Modifiability,variab,variable,4464,"mber.; ///; /// These captured statements provide the link between C/C++ semantics and the; /// logical iteration counters used by the OpenMPIRBuilder which is; /// language-agnostic and therefore does not know e.g. how to advance a; /// random-access iterator. The OpenMPIRBuilder will use this information to; /// apply simd, workshare-loop, distribute, taskloop and loop directives to the; /// loop. For compatibility with the non-OpenMPIRBuilder codegen path, an; /// OMPCanonicalLoop can itself also be wrapped into the CapturedStmts of an; /// OMPLoopDirective and skipped when searching for the associated syntactical; /// loop.; ///; /// Example:; /// <code>; /// std::vector<std::string> Container{1,2,3};; /// for (std::string Str : Container); /// Body(Str);; /// </code>; /// which is syntactic sugar for approximately:; /// <code>; /// auto &&__range = Container;; /// auto __begin = std::begin(__range);; /// auto __end = std::end(__range);; /// for (; __begin != __end; ++__begin) {; /// std::String Str = *__begin;; /// Body(Str);; /// }; /// </code>; /// In this example, the loop user variable is `Str`, the loop iteration; /// variable is `__begin` of type `std::vector<std::string>::iterator` and the; /// logical iteration number type is `size_t` (unsigned version of; /// `std::vector<std::string>::iterator::difference_type` aka `ptrdiff_t`).; /// Therefore, the distance function will be; /// <code>; /// [&](size_t &Result) { Result = __end - __begin; }; /// </code>; /// and the loop variable function is; /// <code>; /// [&,__begin](std::vector<std::string>::iterator &Result, size_t Logical) {; /// Result = __begin + Logical;; /// }; /// </code>; /// The variable `__begin`, aka the loop iteration variable, is captured by; /// value because it is modified in the loop body, but both functions require; /// the initial value. The OpenMP specification explicitly leaves unspecified; /// when the loop expressions are evaluated such that a capture by reference is; /// suff",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:4507,Modifiability,variab,variable,4507,"mber.; ///; /// These captured statements provide the link between C/C++ semantics and the; /// logical iteration counters used by the OpenMPIRBuilder which is; /// language-agnostic and therefore does not know e.g. how to advance a; /// random-access iterator. The OpenMPIRBuilder will use this information to; /// apply simd, workshare-loop, distribute, taskloop and loop directives to the; /// loop. For compatibility with the non-OpenMPIRBuilder codegen path, an; /// OMPCanonicalLoop can itself also be wrapped into the CapturedStmts of an; /// OMPLoopDirective and skipped when searching for the associated syntactical; /// loop.; ///; /// Example:; /// <code>; /// std::vector<std::string> Container{1,2,3};; /// for (std::string Str : Container); /// Body(Str);; /// </code>; /// which is syntactic sugar for approximately:; /// <code>; /// auto &&__range = Container;; /// auto __begin = std::begin(__range);; /// auto __end = std::end(__range);; /// for (; __begin != __end; ++__begin) {; /// std::String Str = *__begin;; /// Body(Str);; /// }; /// </code>; /// In this example, the loop user variable is `Str`, the loop iteration; /// variable is `__begin` of type `std::vector<std::string>::iterator` and the; /// logical iteration number type is `size_t` (unsigned version of; /// `std::vector<std::string>::iterator::difference_type` aka `ptrdiff_t`).; /// Therefore, the distance function will be; /// <code>; /// [&](size_t &Result) { Result = __end - __begin; }; /// </code>; /// and the loop variable function is; /// <code>; /// [&,__begin](std::vector<std::string>::iterator &Result, size_t Logical) {; /// Result = __begin + Logical;; /// }; /// </code>; /// The variable `__begin`, aka the loop iteration variable, is captured by; /// value because it is modified in the loop body, but both functions require; /// the initial value. The OpenMP specification explicitly leaves unspecified; /// when the loop expressions are evaluated such that a capture by reference is; /// suff",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:4871,Modifiability,variab,variable,4871,"///; /// These captured statements provide the link between C/C++ semantics and the; /// logical iteration counters used by the OpenMPIRBuilder which is; /// language-agnostic and therefore does not know e.g. how to advance a; /// random-access iterator. The OpenMPIRBuilder will use this information to; /// apply simd, workshare-loop, distribute, taskloop and loop directives to the; /// loop. For compatibility with the non-OpenMPIRBuilder codegen path, an; /// OMPCanonicalLoop can itself also be wrapped into the CapturedStmts of an; /// OMPLoopDirective and skipped when searching for the associated syntactical; /// loop.; ///; /// Example:; /// <code>; /// std::vector<std::string> Container{1,2,3};; /// for (std::string Str : Container); /// Body(Str);; /// </code>; /// which is syntactic sugar for approximately:; /// <code>; /// auto &&__range = Container;; /// auto __begin = std::begin(__range);; /// auto __end = std::end(__range);; /// for (; __begin != __end; ++__begin) {; /// std::String Str = *__begin;; /// Body(Str);; /// }; /// </code>; /// In this example, the loop user variable is `Str`, the loop iteration; /// variable is `__begin` of type `std::vector<std::string>::iterator` and the; /// logical iteration number type is `size_t` (unsigned version of; /// `std::vector<std::string>::iterator::difference_type` aka `ptrdiff_t`).; /// Therefore, the distance function will be; /// <code>; /// [&](size_t &Result) { Result = __end - __begin; }; /// </code>; /// and the loop variable function is; /// <code>; /// [&,__begin](std::vector<std::string>::iterator &Result, size_t Logical) {; /// Result = __begin + Logical;; /// }; /// </code>; /// The variable `__begin`, aka the loop iteration variable, is captured by; /// value because it is modified in the loop body, but both functions require; /// the initial value. The OpenMP specification explicitly leaves unspecified; /// when the loop expressions are evaluated such that a capture by reference is; /// sufficient.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:5045,Modifiability,variab,variable,5045,"///; /// These captured statements provide the link between C/C++ semantics and the; /// logical iteration counters used by the OpenMPIRBuilder which is; /// language-agnostic and therefore does not know e.g. how to advance a; /// random-access iterator. The OpenMPIRBuilder will use this information to; /// apply simd, workshare-loop, distribute, taskloop and loop directives to the; /// loop. For compatibility with the non-OpenMPIRBuilder codegen path, an; /// OMPCanonicalLoop can itself also be wrapped into the CapturedStmts of an; /// OMPLoopDirective and skipped when searching for the associated syntactical; /// loop.; ///; /// Example:; /// <code>; /// std::vector<std::string> Container{1,2,3};; /// for (std::string Str : Container); /// Body(Str);; /// </code>; /// which is syntactic sugar for approximately:; /// <code>; /// auto &&__range = Container;; /// auto __begin = std::begin(__range);; /// auto __end = std::end(__range);; /// for (; __begin != __end; ++__begin) {; /// std::String Str = *__begin;; /// Body(Str);; /// }; /// </code>; /// In this example, the loop user variable is `Str`, the loop iteration; /// variable is `__begin` of type `std::vector<std::string>::iterator` and the; /// logical iteration number type is `size_t` (unsigned version of; /// `std::vector<std::string>::iterator::difference_type` aka `ptrdiff_t`).; /// Therefore, the distance function will be; /// <code>; /// [&](size_t &Result) { Result = __end - __begin; }; /// </code>; /// and the loop variable function is; /// <code>; /// [&,__begin](std::vector<std::string>::iterator &Result, size_t Logical) {; /// Result = __begin + Logical;; /// }; /// </code>; /// The variable `__begin`, aka the loop iteration variable, is captured by; /// value because it is modified in the loop body, but both functions require; /// the initial value. The OpenMP specification explicitly leaves unspecified; /// when the loop expressions are evaluated such that a capture by reference is; /// sufficient.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:5088,Modifiability,variab,variable,5088,"///; /// These captured statements provide the link between C/C++ semantics and the; /// logical iteration counters used by the OpenMPIRBuilder which is; /// language-agnostic and therefore does not know e.g. how to advance a; /// random-access iterator. The OpenMPIRBuilder will use this information to; /// apply simd, workshare-loop, distribute, taskloop and loop directives to the; /// loop. For compatibility with the non-OpenMPIRBuilder codegen path, an; /// OMPCanonicalLoop can itself also be wrapped into the CapturedStmts of an; /// OMPLoopDirective and skipped when searching for the associated syntactical; /// loop.; ///; /// Example:; /// <code>; /// std::vector<std::string> Container{1,2,3};; /// for (std::string Str : Container); /// Body(Str);; /// </code>; /// which is syntactic sugar for approximately:; /// <code>; /// auto &&__range = Container;; /// auto __begin = std::begin(__range);; /// auto __end = std::end(__range);; /// for (; __begin != __end; ++__begin) {; /// std::String Str = *__begin;; /// Body(Str);; /// }; /// </code>; /// In this example, the loop user variable is `Str`, the loop iteration; /// variable is `__begin` of type `std::vector<std::string>::iterator` and the; /// logical iteration number type is `size_t` (unsigned version of; /// `std::vector<std::string>::iterator::difference_type` aka `ptrdiff_t`).; /// Therefore, the distance function will be; /// <code>; /// [&](size_t &Result) { Result = __end - __begin; }; /// </code>; /// and the loop variable function is; /// <code>; /// [&,__begin](std::vector<std::string>::iterator &Result, size_t Logical) {; /// Result = __begin + Logical;; /// }; /// </code>; /// The variable `__begin`, aka the loop iteration variable, is captured by; /// value because it is modified in the loop body, but both functions require; /// the initial value. The OpenMP specification explicitly leaves unspecified; /// when the loop expressions are evaluated such that a capture by reference is; /// sufficient.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:2195,Safety,avoid,avoid,2195,"tive. That is, the general structure is:; ///; /// OMPLoopBasedDirective; /// [`- CapturedStmt ]; /// [ `- CapturedDecl]; /// ` OMPCanonicalLoop; /// `- ForStmt/CXXForRangeStmt; /// `- Stmt; ///; /// One or multiple CapturedStmt/CapturedDecl pairs may be inserted by some; /// directives such as OMPParallelForDirective, but others do not need them; /// (such as OMPTileDirective). In The OMPCanonicalLoop and; /// ForStmt/CXXForRangeStmt pair is repeated for loop associated with the; /// directive. A OMPCanonicalLoop must not appear in the AST unless associated; /// with a OMPLoopBasedDirective. In an imperfectly nested loop nest, the; /// OMPCanonicalLoop may also be wrapped in a CompoundStmt:; ///; /// [...]; /// ` OMPCanonicalLoop; /// `- ForStmt/CXXForRangeStmt; /// `- CompoundStmt; /// |- Leading in-between code (if any); /// |- OMPCanonicalLoop; /// | `- ForStmt/CXXForRangeStmt; /// | `- ...; /// `- Trailing in-between code (if any); ///; /// The leading/trailing in-between code must not itself be a OMPCanonicalLoop; /// to avoid confusion which loop belongs to the nesting.; ///; /// There are three different kinds of iteration variables for different; /// purposes:; /// * Loop user variable: The user-accessible variable with different value for; /// each iteration.; /// * Loop iteration variable: The variable used to identify a loop iteration;; /// for range-based for-statement, this is the hidden iterator '__begin'. For; /// other loops, it is identical to the loop user variable. Must be a; /// random-access iterator, pointer or integer type.; /// * Logical iteration counter: Normalized loop counter starting at 0 and; /// incrementing by one at each iteration. Allows abstracting over the type; /// of the loop iteration variable and is always an unsigned integer type; /// appropriate to represent the range of the loop iteration variable. Its; /// value corresponds to the logical iteration number in the OpenMP; /// specification.; ///; /// This AST node provides ",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:2376,Security,access,accessible,2376,"///; /// One or multiple CapturedStmt/CapturedDecl pairs may be inserted by some; /// directives such as OMPParallelForDirective, but others do not need them; /// (such as OMPTileDirective). In The OMPCanonicalLoop and; /// ForStmt/CXXForRangeStmt pair is repeated for loop associated with the; /// directive. A OMPCanonicalLoop must not appear in the AST unless associated; /// with a OMPLoopBasedDirective. In an imperfectly nested loop nest, the; /// OMPCanonicalLoop may also be wrapped in a CompoundStmt:; ///; /// [...]; /// ` OMPCanonicalLoop; /// `- ForStmt/CXXForRangeStmt; /// `- CompoundStmt; /// |- Leading in-between code (if any); /// |- OMPCanonicalLoop; /// | `- ForStmt/CXXForRangeStmt; /// | `- ...; /// `- Trailing in-between code (if any); ///; /// The leading/trailing in-between code must not itself be a OMPCanonicalLoop; /// to avoid confusion which loop belongs to the nesting.; ///; /// There are three different kinds of iteration variables for different; /// purposes:; /// * Loop user variable: The user-accessible variable with different value for; /// each iteration.; /// * Loop iteration variable: The variable used to identify a loop iteration;; /// for range-based for-statement, this is the hidden iterator '__begin'. For; /// other loops, it is identical to the loop user variable. Must be a; /// random-access iterator, pointer or integer type.; /// * Logical iteration counter: Normalized loop counter starting at 0 and; /// incrementing by one at each iteration. Allows abstracting over the type; /// of the loop iteration variable and is always an unsigned integer type; /// appropriate to represent the range of the loop iteration variable. Its; /// value corresponds to the logical iteration number in the OpenMP; /// specification.; ///; /// This AST node provides two captured statements:; /// * The distance function which computes the number of iterations.; /// * The loop user variable function that computes the loop user variable when; /// given a lo",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:2684,Security,access,access,2684,"e AST unless associated; /// with a OMPLoopBasedDirective. In an imperfectly nested loop nest, the; /// OMPCanonicalLoop may also be wrapped in a CompoundStmt:; ///; /// [...]; /// ` OMPCanonicalLoop; /// `- ForStmt/CXXForRangeStmt; /// `- CompoundStmt; /// |- Leading in-between code (if any); /// |- OMPCanonicalLoop; /// | `- ForStmt/CXXForRangeStmt; /// | `- ...; /// `- Trailing in-between code (if any); ///; /// The leading/trailing in-between code must not itself be a OMPCanonicalLoop; /// to avoid confusion which loop belongs to the nesting.; ///; /// There are three different kinds of iteration variables for different; /// purposes:; /// * Loop user variable: The user-accessible variable with different value for; /// each iteration.; /// * Loop iteration variable: The variable used to identify a loop iteration;; /// for range-based for-statement, this is the hidden iterator '__begin'. For; /// other loops, it is identical to the loop user variable. Must be a; /// random-access iterator, pointer or integer type.; /// * Logical iteration counter: Normalized loop counter starting at 0 and; /// incrementing by one at each iteration. Allows abstracting over the type; /// of the loop iteration variable and is always an unsigned integer type; /// appropriate to represent the range of the loop iteration variable. Its; /// value corresponds to the logical iteration number in the OpenMP; /// specification.; ///; /// This AST node provides two captured statements:; /// * The distance function which computes the number of iterations.; /// * The loop user variable function that computes the loop user variable when; /// given a logical iteration number.; ///; /// These captured statements provide the link between C/C++ semantics and the; /// logical iteration counters used by the OpenMPIRBuilder which is; /// language-agnostic and therefore does not know e.g. how to advance a; /// random-access iterator. The OpenMPIRBuilder will use this information to; /// apply simd, work",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:3606,Security,access,access,3606,"r; /// other loops, it is identical to the loop user variable. Must be a; /// random-access iterator, pointer or integer type.; /// * Logical iteration counter: Normalized loop counter starting at 0 and; /// incrementing by one at each iteration. Allows abstracting over the type; /// of the loop iteration variable and is always an unsigned integer type; /// appropriate to represent the range of the loop iteration variable. Its; /// value corresponds to the logical iteration number in the OpenMP; /// specification.; ///; /// This AST node provides two captured statements:; /// * The distance function which computes the number of iterations.; /// * The loop user variable function that computes the loop user variable when; /// given a logical iteration number.; ///; /// These captured statements provide the link between C/C++ semantics and the; /// logical iteration counters used by the OpenMPIRBuilder which is; /// language-agnostic and therefore does not know e.g. how to advance a; /// random-access iterator. The OpenMPIRBuilder will use this information to; /// apply simd, workshare-loop, distribute, taskloop and loop directives to the; /// loop. For compatibility with the non-OpenMPIRBuilder codegen path, an; /// OMPCanonicalLoop can itself also be wrapped into the CapturedStmts of an; /// OMPLoopDirective and skipped when searching for the associated syntactical; /// loop.; ///; /// Example:; /// <code>; /// std::vector<std::string> Container{1,2,3};; /// for (std::string Str : Container); /// Body(Str);; /// </code>; /// which is syntactic sugar for approximately:; /// <code>; /// auto &&__range = Container;; /// auto __begin = std::begin(__range);; /// auto __end = std::end(__range);; /// for (; __begin != __end; ++__begin) {; /// std::String Str = *__begin;; /// Body(Str);; /// }; /// </code>; /// In this example, the loop user variable is `Str`, the loop iteration; /// variable is `__begin` of type `std::vector<std::string>::iterator` and the; /// logical iter",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:2733,Testability,Log,Logical,2733,"t, the; /// OMPCanonicalLoop may also be wrapped in a CompoundStmt:; ///; /// [...]; /// ` OMPCanonicalLoop; /// `- ForStmt/CXXForRangeStmt; /// `- CompoundStmt; /// |- Leading in-between code (if any); /// |- OMPCanonicalLoop; /// | `- ForStmt/CXXForRangeStmt; /// | `- ...; /// `- Trailing in-between code (if any); ///; /// The leading/trailing in-between code must not itself be a OMPCanonicalLoop; /// to avoid confusion which loop belongs to the nesting.; ///; /// There are three different kinds of iteration variables for different; /// purposes:; /// * Loop user variable: The user-accessible variable with different value for; /// each iteration.; /// * Loop iteration variable: The variable used to identify a loop iteration;; /// for range-based for-statement, this is the hidden iterator '__begin'. For; /// other loops, it is identical to the loop user variable. Must be a; /// random-access iterator, pointer or integer type.; /// * Logical iteration counter: Normalized loop counter starting at 0 and; /// incrementing by one at each iteration. Allows abstracting over the type; /// of the loop iteration variable and is always an unsigned integer type; /// appropriate to represent the range of the loop iteration variable. Its; /// value corresponds to the logical iteration number in the OpenMP; /// specification.; ///; /// This AST node provides two captured statements:; /// * The distance function which computes the number of iterations.; /// * The loop user variable function that computes the loop user variable when; /// given a logical iteration number.; ///; /// These captured statements provide the link between C/C++ semantics and the; /// logical iteration counters used by the OpenMPIRBuilder which is; /// language-agnostic and therefore does not know e.g. how to advance a; /// random-access iterator. The OpenMPIRBuilder will use this information to; /// apply simd, workshare-loop, distribute, taskloop and loop directives to the; /// loop. For compatibility wit",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:3060,Testability,log,logical,3060,"iling in-between code (if any); ///; /// The leading/trailing in-between code must not itself be a OMPCanonicalLoop; /// to avoid confusion which loop belongs to the nesting.; ///; /// There are three different kinds of iteration variables for different; /// purposes:; /// * Loop user variable: The user-accessible variable with different value for; /// each iteration.; /// * Loop iteration variable: The variable used to identify a loop iteration;; /// for range-based for-statement, this is the hidden iterator '__begin'. For; /// other loops, it is identical to the loop user variable. Must be a; /// random-access iterator, pointer or integer type.; /// * Logical iteration counter: Normalized loop counter starting at 0 and; /// incrementing by one at each iteration. Allows abstracting over the type; /// of the loop iteration variable and is always an unsigned integer type; /// appropriate to represent the range of the loop iteration variable. Its; /// value corresponds to the logical iteration number in the OpenMP; /// specification.; ///; /// This AST node provides two captured statements:; /// * The distance function which computes the number of iterations.; /// * The loop user variable function that computes the loop user variable when; /// given a logical iteration number.; ///; /// These captured statements provide the link between C/C++ semantics and the; /// logical iteration counters used by the OpenMPIRBuilder which is; /// language-agnostic and therefore does not know e.g. how to advance a; /// random-access iterator. The OpenMPIRBuilder will use this information to; /// apply simd, workshare-loop, distribute, taskloop and loop directives to the; /// loop. For compatibility with the non-OpenMPIRBuilder codegen path, an; /// OMPCanonicalLoop can itself also be wrapped into the CapturedStmts of an; /// OMPLoopDirective and skipped when searching for the associated syntactical; /// loop.; ///; /// Example:; /// <code>; /// std::vector<std::string> Container{1,2,",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:3341,Testability,log,logical,3341,"bles for different; /// purposes:; /// * Loop user variable: The user-accessible variable with different value for; /// each iteration.; /// * Loop iteration variable: The variable used to identify a loop iteration;; /// for range-based for-statement, this is the hidden iterator '__begin'. For; /// other loops, it is identical to the loop user variable. Must be a; /// random-access iterator, pointer or integer type.; /// * Logical iteration counter: Normalized loop counter starting at 0 and; /// incrementing by one at each iteration. Allows abstracting over the type; /// of the loop iteration variable and is always an unsigned integer type; /// appropriate to represent the range of the loop iteration variable. Its; /// value corresponds to the logical iteration number in the OpenMP; /// specification.; ///; /// This AST node provides two captured statements:; /// * The distance function which computes the number of iterations.; /// * The loop user variable function that computes the loop user variable when; /// given a logical iteration number.; ///; /// These captured statements provide the link between C/C++ semantics and the; /// logical iteration counters used by the OpenMPIRBuilder which is; /// language-agnostic and therefore does not know e.g. how to advance a; /// random-access iterator. The OpenMPIRBuilder will use this information to; /// apply simd, workshare-loop, distribute, taskloop and loop directives to the; /// loop. For compatibility with the non-OpenMPIRBuilder codegen path, an; /// OMPCanonicalLoop can itself also be wrapped into the CapturedStmts of an; /// OMPLoopDirective and skipped when searching for the associated syntactical; /// loop.; ///; /// Example:; /// <code>; /// std::vector<std::string> Container{1,2,3};; /// for (std::string Str : Container); /// Body(Str);; /// </code>; /// which is syntactic sugar for approximately:; /// <code>; /// auto &&__range = Container;; /// auto __begin = std::begin(__range);; /// auto __end = std::end(",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:3457,Testability,log,logical,3457,"le: The variable used to identify a loop iteration;; /// for range-based for-statement, this is the hidden iterator '__begin'. For; /// other loops, it is identical to the loop user variable. Must be a; /// random-access iterator, pointer or integer type.; /// * Logical iteration counter: Normalized loop counter starting at 0 and; /// incrementing by one at each iteration. Allows abstracting over the type; /// of the loop iteration variable and is always an unsigned integer type; /// appropriate to represent the range of the loop iteration variable. Its; /// value corresponds to the logical iteration number in the OpenMP; /// specification.; ///; /// This AST node provides two captured statements:; /// * The distance function which computes the number of iterations.; /// * The loop user variable function that computes the loop user variable when; /// given a logical iteration number.; ///; /// These captured statements provide the link between C/C++ semantics and the; /// logical iteration counters used by the OpenMPIRBuilder which is; /// language-agnostic and therefore does not know e.g. how to advance a; /// random-access iterator. The OpenMPIRBuilder will use this information to; /// apply simd, workshare-loop, distribute, taskloop and loop directives to the; /// loop. For compatibility with the non-OpenMPIRBuilder codegen path, an; /// OMPCanonicalLoop can itself also be wrapped into the CapturedStmts of an; /// OMPLoopDirective and skipped when searching for the associated syntactical; /// loop.; ///; /// Example:; /// <code>; /// std::vector<std::string> Container{1,2,3};; /// for (std::string Str : Container); /// Body(Str);; /// </code>; /// which is syntactic sugar for approximately:; /// <code>; /// auto &&__range = Container;; /// auto __begin = std::begin(__range);; /// auto __end = std::end(__range);; /// for (; __begin != __end; ++__begin) {; /// std::String Str = *__begin;; /// Body(Str);; /// }; /// </code>; /// In this example, the loop user variab",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:4587,Testability,log,logical,4587,"mber.; ///; /// These captured statements provide the link between C/C++ semantics and the; /// logical iteration counters used by the OpenMPIRBuilder which is; /// language-agnostic and therefore does not know e.g. how to advance a; /// random-access iterator. The OpenMPIRBuilder will use this information to; /// apply simd, workshare-loop, distribute, taskloop and loop directives to the; /// loop. For compatibility with the non-OpenMPIRBuilder codegen path, an; /// OMPCanonicalLoop can itself also be wrapped into the CapturedStmts of an; /// OMPLoopDirective and skipped when searching for the associated syntactical; /// loop.; ///; /// Example:; /// <code>; /// std::vector<std::string> Container{1,2,3};; /// for (std::string Str : Container); /// Body(Str);; /// </code>; /// which is syntactic sugar for approximately:; /// <code>; /// auto &&__range = Container;; /// auto __begin = std::begin(__range);; /// auto __end = std::end(__range);; /// for (; __begin != __end; ++__begin) {; /// std::String Str = *__begin;; /// Body(Str);; /// }; /// </code>; /// In this example, the loop user variable is `Str`, the loop iteration; /// variable is `__begin` of type `std::vector<std::string>::iterator` and the; /// logical iteration number type is `size_t` (unsigned version of; /// `std::vector<std::string>::iterator::difference_type` aka `ptrdiff_t`).; /// Therefore, the distance function will be; /// <code>; /// [&](size_t &Result) { Result = __end - __begin; }; /// </code>; /// and the loop variable function is; /// <code>; /// [&,__begin](std::vector<std::string>::iterator &Result, size_t Logical) {; /// Result = __begin + Logical;; /// }; /// </code>; /// The variable `__begin`, aka the loop iteration variable, is captured by; /// value because it is modified in the loop body, but both functions require; /// the initial value. The OpenMP specification explicitly leaves unspecified; /// when the loop expressions are evaluated such that a capture by reference is; /// suff",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:4972,Testability,Log,Logical,4972,"///; /// These captured statements provide the link between C/C++ semantics and the; /// logical iteration counters used by the OpenMPIRBuilder which is; /// language-agnostic and therefore does not know e.g. how to advance a; /// random-access iterator. The OpenMPIRBuilder will use this information to; /// apply simd, workshare-loop, distribute, taskloop and loop directives to the; /// loop. For compatibility with the non-OpenMPIRBuilder codegen path, an; /// OMPCanonicalLoop can itself also be wrapped into the CapturedStmts of an; /// OMPLoopDirective and skipped when searching for the associated syntactical; /// loop.; ///; /// Example:; /// <code>; /// std::vector<std::string> Container{1,2,3};; /// for (std::string Str : Container); /// Body(Str);; /// </code>; /// which is syntactic sugar for approximately:; /// <code>; /// auto &&__range = Container;; /// auto __begin = std::begin(__range);; /// auto __end = std::end(__range);; /// for (; __begin != __end; ++__begin) {; /// std::String Str = *__begin;; /// Body(Str);; /// }; /// </code>; /// In this example, the loop user variable is `Str`, the loop iteration; /// variable is `__begin` of type `std::vector<std::string>::iterator` and the; /// logical iteration number type is `size_t` (unsigned version of; /// `std::vector<std::string>::iterator::difference_type` aka `ptrdiff_t`).; /// Therefore, the distance function will be; /// <code>; /// [&](size_t &Result) { Result = __end - __begin; }; /// </code>; /// and the loop variable function is; /// <code>; /// [&,__begin](std::vector<std::string>::iterator &Result, size_t Logical) {; /// Result = __begin + Logical;; /// }; /// </code>; /// The variable `__begin`, aka the loop iteration variable, is captured by; /// value because it is modified in the loop body, but both functions require; /// the initial value. The OpenMP specification explicitly leaves unspecified; /// when the loop expressions are evaluated such that a capture by reference is; /// sufficient.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:5007,Testability,Log,Logical,5007,"///; /// These captured statements provide the link between C/C++ semantics and the; /// logical iteration counters used by the OpenMPIRBuilder which is; /// language-agnostic and therefore does not know e.g. how to advance a; /// random-access iterator. The OpenMPIRBuilder will use this information to; /// apply simd, workshare-loop, distribute, taskloop and loop directives to the; /// loop. For compatibility with the non-OpenMPIRBuilder codegen path, an; /// OMPCanonicalLoop can itself also be wrapped into the CapturedStmts of an; /// OMPLoopDirective and skipped when searching for the associated syntactical; /// loop.; ///; /// Example:; /// <code>; /// std::vector<std::string> Container{1,2,3};; /// for (std::string Str : Container); /// Body(Str);; /// </code>; /// which is syntactic sugar for approximately:; /// <code>; /// auto &&__range = Container;; /// auto __begin = std::begin(__range);; /// auto __end = std::end(__range);; /// for (; __begin != __end; ++__begin) {; /// std::String Str = *__begin;; /// Body(Str);; /// }; /// </code>; /// In this example, the loop user variable is `Str`, the loop iteration; /// variable is `__begin` of type `std::vector<std::string>::iterator` and the; /// logical iteration number type is `size_t` (unsigned version of; /// `std::vector<std::string>::iterator::difference_type` aka `ptrdiff_t`).; /// Therefore, the distance function will be; /// <code>; /// [&](size_t &Result) { Result = __end - __begin; }; /// </code>; /// and the loop variable function is; /// <code>; /// [&,__begin](std::vector<std::string>::iterator &Result, size_t Logical) {; /// Result = __begin + Logical;; /// }; /// </code>; /// The variable `__begin`, aka the loop iteration variable, is captured by; /// value because it is modified in the loop body, but both functions require; /// the initial value. The OpenMP specification explicitly leaves unspecified; /// when the loop expressions are evaluated such that a capture by reference is; /// sufficient.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:16,Integrability,wrap,wrapped,16,/// @}; /// The wrapped syntactic loop statement (ForStmt or CXXForRangeStmt).; /// @{,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:209,Testability,Log,LogicalTy,209,/// @}; /// The function that computes the number of loop iterations. Can be evaluated; /// before entering the loop but after the syntactical loop's init; /// statement(s).; ///; /// Function signature: void(LogicalTy &Result); /// Any values necessary to compute the distance are captures of the closure.; /// @{,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:53,Modifiability,variab,variable,53,"/// @}; /// The function that computes the loop user variable from a logical iteration; /// counter. Can be evaluated as first statement in the loop.; ///; /// Function signature: void(LoopVarTy &Result, LogicalTy Number); /// Any other values required to compute the loop user variable (such as start; /// value, step size) are captured by the closure. In particular, the initial; /// value of loop iteration variable is captured by value to be unaffected by; /// previous iterations.; /// @{",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:278,Modifiability,variab,variable,278,"/// @}; /// The function that computes the loop user variable from a logical iteration; /// counter. Can be evaluated as first statement in the loop.; ///; /// Function signature: void(LoopVarTy &Result, LogicalTy Number); /// Any other values required to compute the loop user variable (such as start; /// value, step size) are captured by the closure. In particular, the initial; /// value of loop iteration variable is captured by value to be unaffected by; /// previous iterations.; /// @{",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:410,Modifiability,variab,variable,410,"/// @}; /// The function that computes the loop user variable from a logical iteration; /// counter. Can be evaluated as first statement in the loop.; ///; /// Function signature: void(LoopVarTy &Result, LogicalTy Number); /// Any other values required to compute the loop user variable (such as start; /// value, step size) are captured by the closure. In particular, the initial; /// value of loop iteration variable is captured by value to be unaffected by; /// previous iterations.; /// @{",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:69,Testability,log,logical,69,"/// @}; /// The function that computes the loop user variable from a logical iteration; /// counter. Can be evaluated as first statement in the loop.; ///; /// Function signature: void(LoopVarTy &Result, LogicalTy Number); /// Any other values required to compute the loop user variable (such as start; /// value, step size) are captured by the closure. In particular, the initial; /// value of loop iteration variable is captured by value to be unaffected by; /// previous iterations.; /// @{",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:204,Testability,Log,LogicalTy,204,"/// @}; /// The function that computes the loop user variable from a logical iteration; /// counter. Can be evaluated as first statement in the loop.; ///; /// Function signature: void(LoopVarTy &Result, LogicalTy Number); /// Any other values required to compute the loop user variable (such as start; /// value, step size) are captured by the closure. In particular, the initial; /// value of loop iteration variable is captured by value to be unaffected by; /// previous iterations.; /// @{",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:39,Modifiability,variab,variable,39,/// @}; /// Reference to the loop user variable as accessed in the loop body.; /// @{,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:51,Security,access,accessed,51,/// @}; /// Reference to the loop user variable as accessed in the loop body.; /// @{,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:260,Availability,down,down,260,/// Was this directive mapped from an another directive?; /// e.g. 1) omp loop bind(parallel) is mapped to OMPD_for; /// 2) omp loop bind(teams) is mapped to OMPD_distribute; /// 3) omp loop bind(thread) is mapped to OMPD_simd; /// It was necessary to note it down in the Directive because of; /// clang::TreeTransform::TransformOMPExecutableDirective() pass in; /// the frontend.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:137,Testability,assert,assertion,137,/// Gets a single clause of the specified kind associated with the; /// current directive iff there is only one clause of this kind (and assertion; /// is fired if there is more than one clause is associated with the; /// directive). Returns nullptr if no clause of this kind is associated with; /// the directive.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:231,Modifiability,variab,variables,231,"/// This represents '#pragma omp parallel' directive.; ///; /// \code; /// #pragma omp parallel private(a,b) reduction(+: c,d); /// \endcode; /// In this example directive '#pragma omp parallel' has clauses 'private'; /// with the variables 'a' and 'b' and 'reduction' with operator '+' and; /// variables 'c' and 'd'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:296,Modifiability,variab,variables,296,"/// This represents '#pragma omp parallel' directive.; ///; /// \code; /// #pragma omp parallel private(a,b) reduction(+: c,d); /// \endcode; /// In this example directive '#pragma omp parallel' has clauses 'private'; /// with the variables 'a' and 'b' and 'reduction' with operator '+' and; /// variables 'c' and 'd'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:115,Integrability,depend,depends,115,"/// DistributeEnsureUpperBound - used when composing 'omp distribute'; /// with 'omp for' in a same construct, EUB depends on DistUB",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:30,Modifiability,variab,variable,30,/// Distribute loop iteration variable init used when composing 'omp; /// distribute'; /// with 'omp for' in a same construct,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:4,Deployability,Update,Update,4,/// Update of LowerBound for statically scheduled omp loops for; /// outer loop in combined constructs (e.g. 'distribute parallel for'),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:40,Energy Efficiency,schedul,scheduled,40,/// Update of LowerBound for statically scheduled omp loops for; /// outer loop in combined constructs (e.g. 'distribute parallel for'),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:4,Deployability,Update,Update,4,/// Update of UpperBound for statically scheduled omp loops for; /// outer loop in combined constructs (e.g. 'distribute parallel for'),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:40,Energy Efficiency,schedul,scheduled,40,/// Update of UpperBound for statically scheduled omp loops for; /// outer loop in combined constructs (e.g. 'distribute parallel for'),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:112,Energy Efficiency,schedul,schedule,112,/// Distribute Loop condition used when composing 'omp distribute'; /// with 'omp for' in a same construct when schedule is chunked.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:115,Energy Efficiency,schedul,schedule,115,/// 'omp parallel for' loop condition used when composed with; /// 'omp distribute' in the same construct and when schedule is; /// chunked and the chunk size is 1.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:19,Modifiability,variab,variable,19,/// Loop iteration variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:19,Modifiability,variab,variable,19,/// Loop iteration variable init.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:33,Modifiability,variab,variable,33,/// IsLastIteration - local flag variable passed to runtime.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:23,Modifiability,variab,variable,23,/// LowerBound - local variable passed to runtime.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:23,Modifiability,variab,variable,23,/// UpperBound - local variable passed to runtime.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:19,Modifiability,variab,variable,19,/// Stride - local variable passed to runtime.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:4,Deployability,Update,Update,4,/// Update of LowerBound for statically scheduled 'omp for' loops.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:40,Energy Efficiency,schedul,scheduled,40,/// Update of LowerBound for statically scheduled 'omp for' loops.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:4,Deployability,Update,Update,4,/// Update of UpperBound for statically scheduled 'omp for' loops.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:40,Energy Efficiency,schedul,scheduled,40,/// Update of UpperBound for statically scheduled 'omp for' loops.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:80,Energy Efficiency,schedul,schedule,80,/// PreviousLowerBound - local variable passed to runtime in the; /// enclosing schedule or null if that does not apply.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:31,Modifiability,variab,variable,31,/// PreviousLowerBound - local variable passed to runtime in the; /// enclosing schedule or null if that does not apply.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:80,Energy Efficiency,schedul,schedule,80,/// PreviousUpperBound - local variable passed to runtime in the; /// enclosing schedule or null if that does not apply.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:31,Modifiability,variab,variable,31,/// PreviousUpperBound - local variable passed to runtime in the; /// enclosing schedule or null if that does not apply.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:70,Energy Efficiency,schedul,scheduling,70,"/// PrevEUB - expression similar to EUB but to be used when loop; /// scheduling uses PrevLB and PrevUB (e.g. in 'distribute parallel for'; /// when ensuring that the UB is either the calculated UB by the runtime or; /// the end of the assigned distribute chunk); /// expression UB = min (UB, PrevUB)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:34,Deployability,update,update,34,/// Expressions for loop counters update for CodeGen.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:103,Deployability,update,updates,103,/// Initialize all the fields to null.; /// \param Size Number of elements in the; /// counters/finals/updates/dependent_counters/dependent_inits/finals_conditions; /// arrays.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:200,Integrability,depend,dependence,200,"/// Get the de-sugared statements after the loop transformation.; ///; /// Might be nullptr if either the directive generates no loops and is handled; /// directly in CodeGen, or resolving a template-dependence context is; /// required.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:484,Deployability,update,updates,484,"/// Offsets to the stored exprs.; /// This enumeration contains offsets to all the pointers to children; /// expressions stored in OMPLoopDirective.; /// The first 9 children are necessary for all the loop directives,; /// the next 8 are specific to the worksharing ones, and the next 11 are; /// used for combined constructs containing two pragmas associated to loops.; /// After the fixed children, three arrays of length NumAssociatedLoops are; /// allocated: loop counters, their updates and final values.; /// PrevLowerBound and PrevUpperBound are used to communicate blocking; /// information in composite constructs which require loop blocking; /// DistInc is used to generate the increment expression for the distribute; /// loop when combined with a further nested loop; /// PrevEnsureUpperBound is used as the EnsureUpperBound expression for the; /// for loop when combined with a previous distribute loop in the same pragma; /// (e.g. 'distribute parallel for'); ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:452,Energy Efficiency,allocate,allocated,452,"/// Offsets to the stored exprs.; /// This enumeration contains offsets to all the pointers to children; /// expressions stored in OMPLoopDirective.; /// The first 9 children are necessary for all the loop directives,; /// the next 8 are specific to the worksharing ones, and the next 11 are; /// used for combined constructs containing two pragmas associated to loops.; /// After the fixed children, three arrays of length NumAssociatedLoops are; /// allocated: loop counters, their updates and final values.; /// PrevLowerBound and PrevUpperBound are used to communicate blocking; /// information in composite constructs which require loop blocking; /// DistInc is used to generate the increment expression for the distribute; /// loop when combined with a further nested loop; /// PrevEnsureUpperBound is used as the EnsureUpperBound expression for the; /// for loop when combined with a previous distribute loop in the same pragma; /// (e.g. 'distribute parallel for'); ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:150,Deployability,update,updates,150,// The '...End' enumerators do not correspond to child expressions - they; // specify the offset to the end (and start of the following counters/; // updates/finals/dependent_counters/dependent_inits/finals_conditions; // arrays).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:62,Deployability,update,updates,62,// Offset to the end (and start of the following; // counters/updates/finals/dependent_counters/dependent_inits/finals_conditions; // arrays) for combined distribute loop directives.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:12,Deployability,update,updates,12,/// Get the updates storage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:12,Deployability,update,updates,12,/// Get the updates storage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:26,Deployability,update,updates,26,/// Get the final counter updates storage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:12,Integrability,depend,dependent,12,/// Get the dependent counters storage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:12,Integrability,depend,dependent,12,/// Get the dependent inits storage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:41,Deployability,Update,Updates,41,"// Counters, PrivateCounters, Inits,; // Updates, Finals, DependentCounters,; // DependentInits, FinalsConditions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:58,Integrability,Depend,DependentCounters,58,"// Counters, PrivateCounters, Inits,; // Updates, Finals, DependentCounters,; // DependentInits, FinalsConditions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:81,Integrability,Depend,DependentInits,81,"// Counters, PrivateCounters, Inits,; // Updates, Finals, DependentCounters,; // DependentInits, FinalsConditions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:232,Modifiability,variab,variables,232,"/// This represents '#pragma omp simd' directive.; ///; /// \code; /// #pragma omp simd private(a,b) linear(i,j:s) reduction(+:c,d); /// \endcode; /// In this example directive '#pragma omp simd' has clauses 'private'; /// with the variables 'a' and 'b', 'linear' with variables 'i', 'j' and; /// linear step 's', 'reduction' with operator '+' and variables 'c' and 'd'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:269,Modifiability,variab,variables,269,"/// This represents '#pragma omp simd' directive.; ///; /// \code; /// #pragma omp simd private(a,b) linear(i,j:s) reduction(+:c,d); /// \endcode; /// In this example directive '#pragma omp simd' has clauses 'private'; /// with the variables 'a' and 'b', 'linear' with variables 'i', 'j' and; /// linear step 's', 'reduction' with operator '+' and variables 'c' and 'd'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:348,Modifiability,variab,variables,348,"/// This represents '#pragma omp simd' directive.; ///; /// \code; /// #pragma omp simd private(a,b) linear(i,j:s) reduction(+:c,d); /// \endcode; /// In this example directive '#pragma omp simd' has clauses 'private'; /// with the variables 'a' and 'b', 'linear' with variables 'i', 'j' and; /// linear step 's', 'reduction' with operator '+' and variables 'c' and 'd'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:215,Modifiability,variab,variables,215,"/// This represents '#pragma omp for' directive.; ///; /// \code; /// #pragma omp for private(a,b) reduction(+:c,d); /// \endcode; /// In this example directive '#pragma omp for' has clauses 'private' with the; /// variables 'a' and 'b' and 'reduction' with operator '+' and variables 'c'; /// and 'd'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:275,Modifiability,variab,variables,275,"/// This represents '#pragma omp for' directive.; ///; /// \code; /// #pragma omp for private(a,b) reduction(+:c,d); /// \endcode; /// In this example directive '#pragma omp for' has clauses 'private' with the; /// variables 'a' and 'b' and 'reduction' with operator '+' and variables 'c'; /// and 'd'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:244,Modifiability,variab,variables,244,"/// This represents '#pragma omp for simd' directive.; ///; /// \code; /// #pragma omp for simd private(a,b) linear(i,j:s) reduction(+:c,d); /// \endcode; /// In this example directive '#pragma omp for simd' has clauses 'private'; /// with the variables 'a' and 'b', 'linear' with variables 'i', 'j' and; /// linear step 's', 'reduction' with operator '+' and variables 'c' and 'd'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:281,Modifiability,variab,variables,281,"/// This represents '#pragma omp for simd' directive.; ///; /// \code; /// #pragma omp for simd private(a,b) linear(i,j:s) reduction(+:c,d); /// \endcode; /// In this example directive '#pragma omp for simd' has clauses 'private'; /// with the variables 'a' and 'b', 'linear' with variables 'i', 'j' and; /// linear step 's', 'reduction' with operator '+' and variables 'c' and 'd'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:360,Modifiability,variab,variables,360,"/// This represents '#pragma omp for simd' directive.; ///; /// \code; /// #pragma omp for simd private(a,b) linear(i,j:s) reduction(+:c,d); /// \endcode; /// In this example directive '#pragma omp for simd' has clauses 'private'; /// with the variables 'a' and 'b', 'linear' with variables 'i', 'j' and; /// linear step 's', 'reduction' with operator '+' and variables 'c' and 'd'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:230,Modifiability,variab,variables,230,"/// This represents '#pragma omp sections' directive.; ///; /// \code; /// #pragma omp sections private(a,b) reduction(+:c,d); /// \endcode; /// In this example directive '#pragma omp sections' has clauses 'private' with; /// the variables 'a' and 'b' and 'reduction' with operator '+' and variables; /// 'c' and 'd'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:290,Modifiability,variab,variables,290,"/// This represents '#pragma omp sections' directive.; ///; /// \code; /// #pragma omp sections private(a,b) reduction(+:c,d); /// \endcode; /// In this example directive '#pragma omp sections' has clauses 'private' with; /// the variables 'a' and 'b' and 'reduction' with operator '+' and variables; /// 'c' and 'd'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:206,Modifiability,variab,variables,206,"/// This represents '#pragma omp scope' directive.; /// \code; /// #pragma omp scope private(a,b) nowait; /// \endcode; /// In this example directive '#pragma omp scope' has clauses 'private' with; /// the variables 'a' and 'b' and nowait.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:224,Modifiability,variab,variables,224,"/// This represents '#pragma omp single' directive.; ///; /// \code; /// #pragma omp single private(a,b) copyprivate(c,d); /// \endcode; /// In this example directive '#pragma omp single' has clauses 'private' with; /// the variables 'a' and 'b' and 'copyprivate' with variables 'c' and 'd'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:269,Modifiability,variab,variables,269,"/// This represents '#pragma omp single' directive.; ///; /// \code; /// #pragma omp single private(a,b) copyprivate(c,d); /// \endcode; /// In this example directive '#pragma omp single' has clauses 'private' with; /// the variables 'a' and 'b' and 'copyprivate' with variables 'c' and 'd'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:242,Modifiability,variab,variables,242,"/// This represents '#pragma omp parallel for' directive.; ///; /// \code; /// #pragma omp parallel for private(a,b) reduction(+:c,d); /// \endcode; /// In this example directive '#pragma omp parallel for' has clauses 'private'; /// with the variables 'a' and 'b' and 'reduction' with operator '+' and; /// variables 'c' and 'd'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:307,Modifiability,variab,variables,307,"/// This represents '#pragma omp parallel for' directive.; ///; /// \code; /// #pragma omp parallel for private(a,b) reduction(+:c,d); /// \endcode; /// In this example directive '#pragma omp parallel for' has clauses 'private'; /// with the variables 'a' and 'b' and 'reduction' with operator '+' and; /// variables 'c' and 'd'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:271,Modifiability,variab,variables,271,"/// This represents '#pragma omp parallel for simd' directive.; ///; /// \code; /// #pragma omp parallel for simd private(a,b) linear(i,j:s) reduction(+:c,d); /// \endcode; /// In this example directive '#pragma omp parallel for simd' has clauses; /// 'private' with the variables 'a' and 'b', 'linear' with variables 'i', 'j'; /// and linear step 's', 'reduction' with operator '+' and variables 'c' and; /// 'd'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:308,Modifiability,variab,variables,308,"/// This represents '#pragma omp parallel for simd' directive.; ///; /// \code; /// #pragma omp parallel for simd private(a,b) linear(i,j:s) reduction(+:c,d); /// \endcode; /// In this example directive '#pragma omp parallel for simd' has clauses; /// 'private' with the variables 'a' and 'b', 'linear' with variables 'i', 'j'; /// and linear step 's', 'reduction' with operator '+' and variables 'c' and; /// 'd'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:387,Modifiability,variab,variables,387,"/// This represents '#pragma omp parallel for simd' directive.; ///; /// \code; /// #pragma omp parallel for simd private(a,b) linear(i,j:s) reduction(+:c,d); /// \endcode; /// In this example directive '#pragma omp parallel for simd' has clauses; /// 'private' with the variables 'a' and 'b', 'linear' with variables 'i', 'j'; /// and linear step 's', 'reduction' with operator '+' and variables 'c' and; /// 'd'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:234,Modifiability,variab,variables,234,"/// This represents '#pragma omp parallel master' directive.; ///; /// \code; /// #pragma omp parallel master private(a,b); /// \endcode; /// In this example directive '#pragma omp parallel master' has clauses; /// 'private' with the variables 'a' and 'b'; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:42,Availability,mask,masked,42,/// This represents '#pragma omp parallel masked' directive.; ///; /// \code; /// #pragma omp parallel masked filter(tid); /// \endcode; /// In this example directive '#pragma omp parallel masked' has a clause; /// 'filter' with the variable tid; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:103,Availability,mask,masked,103,/// This represents '#pragma omp parallel masked' directive.; ///; /// \code; /// #pragma omp parallel masked filter(tid); /// \endcode; /// In this example directive '#pragma omp parallel masked' has a clause; /// 'filter' with the variable tid; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:189,Availability,mask,masked,189,/// This represents '#pragma omp parallel masked' directive.; ///; /// \code; /// #pragma omp parallel masked filter(tid); /// \endcode; /// In this example directive '#pragma omp parallel masked' has a clause; /// 'filter' with the variable tid; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:233,Modifiability,variab,variable,233,/// This represents '#pragma omp parallel masked' directive.; ///; /// \code; /// #pragma omp parallel masked filter(tid); /// \endcode; /// In this example directive '#pragma omp parallel masked' has a clause; /// 'filter' with the variable tid; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:257,Modifiability,variab,variables,257,"/// This represents '#pragma omp parallel sections' directive.; ///; /// \code; /// #pragma omp parallel sections private(a,b) reduction(+:c,d); /// \endcode; /// In this example directive '#pragma omp parallel sections' has clauses; /// 'private' with the variables 'a' and 'b' and 'reduction' with operator '+'; /// and variables 'c' and 'd'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:322,Modifiability,variab,variables,322,"/// This represents '#pragma omp parallel sections' directive.; ///; /// \code; /// #pragma omp parallel sections private(a,b) reduction(+:c,d); /// \endcode; /// In this example directive '#pragma omp parallel sections' has clauses; /// 'private' with the variables 'a' and 'b' and 'reduction' with operator '+'; /// and variables 'c' and 'd'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:210,Modifiability,variab,variables,210,"/// This represents '#pragma omp task' directive.; ///; /// \code; /// #pragma omp task private(a,b) final(d); /// \endcode; /// In this example directive '#pragma omp task' has clauses 'private' with the; /// variables 'a' and 'b' and 'final' with condition 'd'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:35,Modifiability,variab,variable,35,/// Sets the task_reduction return variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:340,Modifiability,variab,variable,340,"/// Creates directive.; ///; /// \param C AST context.; /// \param StartLoc Starting location of the directive kind.; /// \param EndLoc Ending Location of the directive.; /// \param Clauses List of clauses.; /// \param AssociatedStmt Statement, associated with the directive.; /// \param ReductionRef Reference to the task_reduction return variable.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:51,Modifiability,variab,variable,51,/// Returns reference to the task_reduction return variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:177,Modifiability,variab,variables,177,"/// This represents '#pragma omp flush' directive.; ///; /// \code; /// #pragma omp flush(a,b); /// \endcode; /// In this example directive '#pragma omp flush' has 2 arguments- variables 'a'; /// and 'b'.; /// 'omp flush' directive does not have clauses but have an optional list of; /// variables to flush. This list of variables is stored within some fake clause; /// FlushClause.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:288,Modifiability,variab,variables,288,"/// This represents '#pragma omp flush' directive.; ///; /// \code; /// #pragma omp flush(a,b); /// \endcode; /// In this example directive '#pragma omp flush' has 2 arguments- variables 'a'; /// and 'b'.; /// 'omp flush' directive does not have clauses but have an optional list of; /// variables to flush. This list of variables is stored within some fake clause; /// FlushClause.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:321,Modifiability,variab,variables,321,"/// This represents '#pragma omp flush' directive.; ///; /// \code; /// #pragma omp flush(a,b); /// \endcode; /// In this example directive '#pragma omp flush' has 2 arguments- variables 'a'; /// and 'b'.; /// 'omp flush' directive does not have clauses but have an optional list of; /// variables to flush. This list of variables is stored within some fake clause; /// FlushClause.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:95,Integrability,depend,depend,95,"/// This represents '#pragma omp depobj' directive.; ///; /// \code; /// #pragma omp depobj(a) depend(in:x,y); /// \endcode; /// In this example directive '#pragma omp depobj' initializes a depobj object; /// 'a' with dependence type 'in' and a list with 'x' and 'y' locators.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:218,Integrability,depend,dependence,218,"/// This represents '#pragma omp depobj' directive.; ///; /// \code; /// #pragma omp depobj(a) depend(in:x,y); /// \endcode; /// In this example directive '#pragma omp depobj' initializes a depobj object; /// 'a' with dependence type 'in' and a list with 'x' and 'y' locators.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:21,Deployability,update,update,21,/// Used for 'atomic update' or 'atomic capture' constructs. They may; /// have atomic expressions of forms:; /// \code; /// x = x binop expr;; /// x = expr binop x;; /// \endcode; /// This field is 1 for the first form of the expression and 0 for the; /// second. Required for correct codegen of non-associative operations (like; /// << or >>).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:21,Deployability,update,update,21,/// Used for 'atomic update' or 'atomic capture' constructs. They may; /// have atomic expressions of forms:; /// \code; /// v = x; <update x>;; /// <update x>; v = x;; /// \endcode; /// This field is 1 for the first(postfix) form of the expression and 0; /// otherwise.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:133,Deployability,update,update,133,/// Used for 'atomic update' or 'atomic capture' constructs. They may; /// have atomic expressions of forms:; /// \code; /// v = x; <update x>;; /// <update x>; v = x;; /// \endcode; /// This field is 1 for the first(postfix) form of the expression and 0; /// otherwise.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:150,Deployability,update,update,150,/// Used for 'atomic update' or 'atomic capture' constructs. They may; /// have atomic expressions of forms:; /// \code; /// v = x; <update x>;; /// <update x>; v = x;; /// \endcode; /// This field is 1 for the first(postfix) form of the expression and 0; /// otherwise.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:16,Deployability,update,updated,16,/// 1 if 'v' is updated only when the condition is false (compare capture; /// only).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:64,Deployability,update,updated,64,"/// True if original value of 'x' must be stored in 'v', not an updated one.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:19,Deployability,update,updated,19,/// True if 'v' is updated only when the condition is false (compare capture; /// only).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:26,Deployability,update,update,26,/// Return true if helper update expression has form; /// 'OpaqueValueExpr(x) binop OpaqueValueExpr(expr)' and false if it has form; /// 'OpaqueValueExpr(expr) binop OpaqueValueExpr(x)'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:42,Deployability,update,updated,42,"/// Return true if 'v' expression must be updated to original value of; /// 'x', false if 'v' must be updated to the new value of 'x'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:102,Deployability,update,updated,102,"/// Return true if 'v' expression must be updated to original value of; /// 'x', false if 'v' must be updated to the new value of 'x'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:26,Deployability,update,updated,26,/// Return true if 'v' is updated only when the condition is evaluated false; /// (compare capture only).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:263,Modifiability,variab,variables,263,"/// This represents '#pragma omp target parallel for' directive.; ///; /// \code; /// #pragma omp target parallel for private(a,b) reduction(+:c,d); /// \endcode; /// In this example directive '#pragma omp target parallel for' has clauses; /// 'private' with the variables 'a' and 'b' and 'reduction' with operator '+'; /// and variables 'c' and 'd'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:328,Modifiability,variab,variables,328,"/// This represents '#pragma omp target parallel for' directive.; ///; /// \code; /// #pragma omp target parallel for private(a,b) reduction(+:c,d); /// \endcode; /// In this example directive '#pragma omp target parallel for' has clauses; /// 'private' with the variables 'a' and 'b' and 'reduction' with operator '+'; /// and variables 'c' and 'd'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:243,Modifiability,variab,variables,243,"/// This represents '#pragma omp taskloop' directive.; ///; /// \code; /// #pragma omp taskloop private(a,b) grainsize(val) num_tasks(num); /// \endcode; /// In this example directive '#pragma omp taskloop' has clauses 'private'; /// with the variables 'a' and 'b', 'grainsize' with expression 'val' and; /// 'num_tasks' with expression 'num'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:258,Modifiability,variab,variables,258,"/// This represents '#pragma omp taskloop simd' directive.; ///; /// \code; /// #pragma omp taskloop simd private(a,b) grainsize(val) num_tasks(num); /// \endcode; /// In this example directive '#pragma omp taskloop simd' has clauses 'private'; /// with the variables 'a' and 'b', 'grainsize' with expression 'val' and; /// 'num_tasks' with expression 'num'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:264,Modifiability,variab,variables,264,"/// This represents '#pragma omp master taskloop' directive.; ///; /// \code; /// #pragma omp master taskloop private(a,b) grainsize(val) num_tasks(num); /// \endcode; /// In this example directive '#pragma omp master taskloop' has clauses; /// 'private' with the variables 'a' and 'b', 'grainsize' with expression 'val'; /// and 'num_tasks' with expression 'num'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:33,Availability,mask,masked,33,"/// This represents '#pragma omp masked taskloop' directive.; ///; /// \code; /// #pragma omp masked taskloop private(a,b) grainsize(val) num_tasks(num); /// \endcode; /// In this example directive '#pragma omp masked taskloop' has clauses; /// 'private' with the variables 'a' and 'b', 'grainsize' with expression 'val'; /// and 'num_tasks' with expression 'num'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:94,Availability,mask,masked,94,"/// This represents '#pragma omp masked taskloop' directive.; ///; /// \code; /// #pragma omp masked taskloop private(a,b) grainsize(val) num_tasks(num); /// \endcode; /// In this example directive '#pragma omp masked taskloop' has clauses; /// 'private' with the variables 'a' and 'b', 'grainsize' with expression 'val'; /// and 'num_tasks' with expression 'num'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:211,Availability,mask,masked,211,"/// This represents '#pragma omp masked taskloop' directive.; ///; /// \code; /// #pragma omp masked taskloop private(a,b) grainsize(val) num_tasks(num); /// \endcode; /// In this example directive '#pragma omp masked taskloop' has clauses; /// 'private' with the variables 'a' and 'b', 'grainsize' with expression 'val'; /// and 'num_tasks' with expression 'num'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:264,Modifiability,variab,variables,264,"/// This represents '#pragma omp masked taskloop' directive.; ///; /// \code; /// #pragma omp masked taskloop private(a,b) grainsize(val) num_tasks(num); /// \endcode; /// In this example directive '#pragma omp masked taskloop' has clauses; /// 'private' with the variables 'a' and 'b', 'grainsize' with expression 'val'; /// and 'num_tasks' with expression 'num'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:279,Modifiability,variab,variables,279,"/// This represents '#pragma omp master taskloop simd' directive.; ///; /// \code; /// #pragma omp master taskloop simd private(a,b) grainsize(val) num_tasks(num); /// \endcode; /// In this example directive '#pragma omp master taskloop simd' has clauses; /// 'private' with the variables 'a' and 'b', 'grainsize' with expression 'val'; /// and 'num_tasks' with expression 'num'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:33,Availability,mask,masked,33,"/// This represents '#pragma omp masked taskloop simd' directive.; ///; /// \code; /// #pragma omp masked taskloop simd private(a,b) grainsize(val) num_tasks(num); /// \endcode; /// In this example directive '#pragma omp masked taskloop simd' has clauses; /// 'private' with the variables 'a' and 'b', 'grainsize' with expression 'val'; /// and 'num_tasks' with expression 'num'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:99,Availability,mask,masked,99,"/// This represents '#pragma omp masked taskloop simd' directive.; ///; /// \code; /// #pragma omp masked taskloop simd private(a,b) grainsize(val) num_tasks(num); /// \endcode; /// In this example directive '#pragma omp masked taskloop simd' has clauses; /// 'private' with the variables 'a' and 'b', 'grainsize' with expression 'val'; /// and 'num_tasks' with expression 'num'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:221,Availability,mask,masked,221,"/// This represents '#pragma omp masked taskloop simd' directive.; ///; /// \code; /// #pragma omp masked taskloop simd private(a,b) grainsize(val) num_tasks(num); /// \endcode; /// In this example directive '#pragma omp masked taskloop simd' has clauses; /// 'private' with the variables 'a' and 'b', 'grainsize' with expression 'val'; /// and 'num_tasks' with expression 'num'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:279,Modifiability,variab,variables,279,"/// This represents '#pragma omp masked taskloop simd' directive.; ///; /// \code; /// #pragma omp masked taskloop simd private(a,b) grainsize(val) num_tasks(num); /// \endcode; /// In this example directive '#pragma omp masked taskloop simd' has clauses; /// 'private' with the variables 'a' and 'b', 'grainsize' with expression 'val'; /// and 'num_tasks' with expression 'num'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:296,Modifiability,variab,variables,296,"/// This represents '#pragma omp parallel master taskloop' directive.; ///; /// \code; /// #pragma omp parallel master taskloop private(a,b) grainsize(val); /// num_tasks(num); /// \endcode; /// In this example directive '#pragma omp parallel master taskloop' has clauses; /// 'private' with the variables 'a' and 'b', 'grainsize' with expression 'val'; /// and 'num_tasks' with expression 'num'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:42,Availability,mask,masked,42,"/// This represents '#pragma omp parallel masked taskloop' directive.; ///; /// \code; /// #pragma omp parallel masked taskloop private(a,b) grainsize(val); /// num_tasks(num); /// \endcode; /// In this example directive '#pragma omp parallel masked taskloop' has clauses; /// 'private' with the variables 'a' and 'b', 'grainsize' with expression 'val'; /// and 'num_tasks' with expression 'num'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:112,Availability,mask,masked,112,"/// This represents '#pragma omp parallel masked taskloop' directive.; ///; /// \code; /// #pragma omp parallel masked taskloop private(a,b) grainsize(val); /// num_tasks(num); /// \endcode; /// In this example directive '#pragma omp parallel masked taskloop' has clauses; /// 'private' with the variables 'a' and 'b', 'grainsize' with expression 'val'; /// and 'num_tasks' with expression 'num'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:243,Availability,mask,masked,243,"/// This represents '#pragma omp parallel masked taskloop' directive.; ///; /// \code; /// #pragma omp parallel masked taskloop private(a,b) grainsize(val); /// num_tasks(num); /// \endcode; /// In this example directive '#pragma omp parallel masked taskloop' has clauses; /// 'private' with the variables 'a' and 'b', 'grainsize' with expression 'val'; /// and 'num_tasks' with expression 'num'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:296,Modifiability,variab,variables,296,"/// This represents '#pragma omp parallel masked taskloop' directive.; ///; /// \code; /// #pragma omp parallel masked taskloop private(a,b) grainsize(val); /// num_tasks(num); /// \endcode; /// In this example directive '#pragma omp parallel masked taskloop' has clauses; /// 'private' with the variables 'a' and 'b', 'grainsize' with expression 'val'; /// and 'num_tasks' with expression 'num'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:311,Modifiability,variab,variables,311,"/// This represents '#pragma omp parallel master taskloop simd' directive.; ///; /// \code; /// #pragma omp parallel master taskloop simd private(a,b) grainsize(val); /// num_tasks(num); /// \endcode; /// In this example directive '#pragma omp parallel master taskloop simd' has; /// clauses 'private' with the variables 'a' and 'b', 'grainsize' with; /// expression 'val' and 'num_tasks' with expression 'num'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:42,Availability,mask,masked,42,"/// This represents '#pragma omp parallel masked taskloop simd' directive.; ///; /// \code; /// #pragma omp parallel masked taskloop simd private(a,b) grainsize(val); /// num_tasks(num); /// \endcode; /// In this example directive '#pragma omp parallel masked taskloop simd' has; /// clauses 'private' with the variables 'a' and 'b', 'grainsize' with; /// expression 'val' and 'num_tasks' with expression 'num'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:117,Availability,mask,masked,117,"/// This represents '#pragma omp parallel masked taskloop simd' directive.; ///; /// \code; /// #pragma omp parallel masked taskloop simd private(a,b) grainsize(val); /// num_tasks(num); /// \endcode; /// In this example directive '#pragma omp parallel masked taskloop simd' has; /// clauses 'private' with the variables 'a' and 'b', 'grainsize' with; /// expression 'val' and 'num_tasks' with expression 'num'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:253,Availability,mask,masked,253,"/// This represents '#pragma omp parallel masked taskloop simd' directive.; ///; /// \code; /// #pragma omp parallel masked taskloop simd private(a,b) grainsize(val); /// num_tasks(num); /// \endcode; /// In this example directive '#pragma omp parallel masked taskloop simd' has; /// clauses 'private' with the variables 'a' and 'b', 'grainsize' with; /// expression 'val' and 'num_tasks' with expression 'num'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:311,Modifiability,variab,variables,311,"/// This represents '#pragma omp parallel masked taskloop simd' directive.; ///; /// \code; /// #pragma omp parallel masked taskloop simd private(a,b) grainsize(val); /// num_tasks(num); /// \endcode; /// In this example directive '#pragma omp parallel masked taskloop simd' has; /// clauses 'private' with the variables 'a' and 'b', 'grainsize' with; /// expression 'val' and 'num_tasks' with expression 'num'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:219,Modifiability,variab,variables,219,"/// This represents '#pragma omp distribute' directive.; ///; /// \code; /// #pragma omp distribute private(a,b); /// \endcode; /// In this example directive '#pragma omp distribute' has clauses 'private'; /// with the variables 'a' and 'b'; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:40,Deployability,update,update,40,"/// This represents '#pragma omp target update' directive.; ///; /// \code; /// #pragma omp target update to(a) from(b) device(1); /// \endcode; /// In this example directive '#pragma omp target update' has clause 'to' with; /// argument 'a', clause 'from' with argument 'b' and clause 'device' with; /// argument '1'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:99,Deployability,update,update,99,"/// This represents '#pragma omp target update' directive.; ///; /// \code; /// #pragma omp target update to(a) from(b) device(1); /// \endcode; /// In this example directive '#pragma omp target update' has clause 'to' with; /// argument 'a', clause 'from' with argument 'b' and clause 'device' with; /// argument '1'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:195,Deployability,update,update,195,"/// This represents '#pragma omp target update' directive.; ///; /// \code; /// #pragma omp target update to(a) from(b) device(1); /// \endcode; /// In this example directive '#pragma omp target update' has clause 'to' with; /// argument 'a', clause 'from' with argument 'b' and clause 'device' with; /// argument '1'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:272,Modifiability,variab,variables,272,"/// This represents '#pragma omp distribute parallel for' composite; /// directive.; ///; /// \code; /// #pragma omp distribute parallel for private(a,b); /// \endcode; /// In this example directive '#pragma omp distribute parallel for' has clause; /// 'private' with the variables 'a' and 'b'; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:285,Modifiability,variab,variables,285,/// This represents '#pragma omp distribute parallel for simd' composite; /// directive.; ///; /// \code; /// #pragma omp distribute parallel for simd private(x); /// \endcode; /// In this example directive '#pragma omp distribute parallel for simd' has; /// clause 'private' with the variables 'x'; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:241,Modifiability,variab,variables,241,/// This represents '#pragma omp distribute simd' composite directive.; ///; /// \code; /// #pragma omp distribute simd private(x); /// \endcode; /// In this example directive '#pragma omp distribute simd' has clause; /// 'private' with the variables 'x'; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:277,Modifiability,variab,variable,277,"/// This represents '#pragma omp target parallel for simd' directive.; ///; /// \code; /// #pragma omp target parallel for simd private(a) map(b) safelen(c); /// \endcode; /// In this example directive '#pragma omp target parallel for simd' has clauses; /// 'private' with the variable 'a', 'map' with the variable 'b' and 'safelen'; /// with the variable 'c'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:306,Modifiability,variab,variable,306,"/// This represents '#pragma omp target parallel for simd' directive.; ///; /// \code; /// #pragma omp target parallel for simd private(a) map(b) safelen(c); /// \endcode; /// In this example directive '#pragma omp target parallel for simd' has clauses; /// 'private' with the variable 'a', 'map' with the variable 'b' and 'safelen'; /// with the variable 'c'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:347,Modifiability,variab,variable,347,"/// This represents '#pragma omp target parallel for simd' directive.; ///; /// \code; /// #pragma omp target parallel for simd private(a) map(b) safelen(c); /// \endcode; /// In this example directive '#pragma omp target parallel for simd' has clauses; /// 'private' with the variable 'a', 'map' with the variable 'b' and 'safelen'; /// with the variable 'c'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:146,Safety,safe,safelen,146,"/// This represents '#pragma omp target parallel for simd' directive.; ///; /// \code; /// #pragma omp target parallel for simd private(a) map(b) safelen(c); /// \endcode; /// In this example directive '#pragma omp target parallel for simd' has clauses; /// 'private' with the variable 'a', 'map' with the variable 'b' and 'safelen'; /// with the variable 'c'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:324,Safety,safe,safelen,324,"/// This represents '#pragma omp target parallel for simd' directive.; ///; /// \code; /// #pragma omp target parallel for simd private(a) map(b) safelen(c); /// \endcode; /// In this example directive '#pragma omp target parallel for simd' has clauses; /// 'private' with the variable 'a', 'map' with the variable 'b' and 'safelen'; /// with the variable 'c'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:238,Modifiability,variab,variable,238,"/// This represents '#pragma omp target simd' directive.; ///; /// \code; /// #pragma omp target simd private(a) map(b) safelen(c); /// \endcode; /// In this example directive '#pragma omp target simd' has clauses 'private'; /// with the variable 'a', 'map' with the variable 'b' and 'safelen' with; /// the variable 'c'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:267,Modifiability,variab,variable,267,"/// This represents '#pragma omp target simd' directive.; ///; /// \code; /// #pragma omp target simd private(a) map(b) safelen(c); /// \endcode; /// In this example directive '#pragma omp target simd' has clauses 'private'; /// with the variable 'a', 'map' with the variable 'b' and 'safelen' with; /// the variable 'c'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:308,Modifiability,variab,variable,308,"/// This represents '#pragma omp target simd' directive.; ///; /// \code; /// #pragma omp target simd private(a) map(b) safelen(c); /// \endcode; /// In this example directive '#pragma omp target simd' has clauses 'private'; /// with the variable 'a', 'map' with the variable 'b' and 'safelen' with; /// the variable 'c'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:120,Safety,safe,safelen,120,"/// This represents '#pragma omp target simd' directive.; ///; /// \code; /// #pragma omp target simd private(a) map(b) safelen(c); /// \endcode; /// In this example directive '#pragma omp target simd' has clauses 'private'; /// with the variable 'a', 'map' with the variable 'b' and 'safelen' with; /// the variable 'c'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:285,Safety,safe,safelen,285,"/// This represents '#pragma omp target simd' directive.; ///; /// \code; /// #pragma omp target simd private(a) map(b) safelen(c); /// \endcode; /// In this example directive '#pragma omp target simd' has clauses 'private'; /// with the variable 'a', 'map' with the variable 'b' and 'safelen' with; /// the variable 'c'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:237,Modifiability,variab,variables,237,"/// This represents '#pragma omp teams distribute' directive.; ///; /// \code; /// #pragma omp teams distribute private(a,b); /// \endcode; /// In this example directive '#pragma omp teams distribute' has clauses; /// 'private' with the variables 'a' and 'b'; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:265,Modifiability,variab,variables,265,"/// This represents '#pragma omp teams distribute simd'; /// combined directive.; ///; /// \code; /// #pragma omp teams distribute simd private(a,b); /// \endcode; /// In this example directive '#pragma omp teams distribute simd'; /// has clause 'private' with the variables 'a' and 'b'; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:303,Modifiability,variab,variables,303,/// This represents '#pragma omp teams distribute parallel for simd' composite; /// directive.; ///; /// \code; /// #pragma omp teams distribute parallel for simd private(x); /// \endcode; /// In this example directive '#pragma omp teams distribute parallel for simd'; /// has clause 'private' with the variables 'x'; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:288,Modifiability,variab,variables,288,/// This represents '#pragma omp teams distribute parallel for' composite; /// directive.; ///; /// \code; /// #pragma omp teams distribute parallel for private(x); /// \endcode; /// In this example directive '#pragma omp teams distribute parallel for'; /// has clause 'private' with the variables 'x'; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:264,Modifiability,variab,variables,264,/// This represents '#pragma omp target teams distribute' combined directive.; ///; /// \code; /// #pragma omp target teams distribute private(x); /// \endcode; /// In this example directive '#pragma omp target teams distribute' has clause; /// 'private' with the variables 'x'; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:308,Modifiability,variab,variables,308,/// This represents '#pragma omp target teams distribute parallel for' combined; /// directive.; ///; /// \code; /// #pragma omp target teams distribute parallel for private(x); /// \endcode; /// In this example directive '#pragma omp target teams distribute parallel; /// for' has clause 'private' with the variables 'x'; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:323,Modifiability,variab,variables,323,/// This represents '#pragma omp target teams distribute parallel for simd'; /// combined directive.; ///; /// \code; /// #pragma omp target teams distribute parallel for simd private(x); /// \endcode; /// In this example directive '#pragma omp target teams distribute parallel; /// for simd' has clause 'private' with the variables 'x'; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:284,Modifiability,variab,variables,284,/// This represents '#pragma omp target teams distribute simd' combined; /// directive.; ///; /// \code; /// #pragma omp target teams distribute simd private(x); /// \endcode; /// In this example directive '#pragma omp target teams distribute simd'; /// has clause 'private' with the variables 'x'; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:520,Integrability,depend,dependent,520,"/// Create a new AST node representation for '#pragma omp tile'.; ///; /// \param C Context of the AST.; /// \param StartLoc Location of the introducer (e.g. the 'omp' token).; /// \param EndLoc Location of the directive's end (e.g. the tok::eod).; /// \param Clauses The directive's clauses.; /// \param NumLoops Number of associated loops (number of items in the; /// 'sizes' clause).; /// \param AssociatedStmt The outermost associated loop.; /// \param TransformedStmt The loop nest after tiling, or nullptr in; /// dependent contexts.; /// \param PreInits Helper preinits statements for the loop nest.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:151,Energy Efficiency,allocate,allocate,151,/// Build an empty '#pragma omp tile' AST node for deserialization.; ///; /// \param C Context of the AST.; /// \param NumClauses Number of clauses to allocate.; /// \param NumLoops Number of associated loops to allocate.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:212,Energy Efficiency,allocate,allocate,212,/// Build an empty '#pragma omp tile' AST node for deserialization.; ///; /// \param C Context of the AST.; /// \param NumClauses Number of clauses to allocate.; /// \param NumLoops Number of associated loops to allocate.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:428,Integrability,depend,dependent,428,"/// Create a new AST node representation for '#pragma omp unroll'.; ///; /// \param C Context of the AST.; /// \param StartLoc Location of the introducer (e.g. the 'omp' token).; /// \param EndLoc Location of the directive's end (e.g. the tok::eod).; /// \param Clauses The directive's clauses.; /// \param AssociatedStmt The outermost associated loop.; /// \param TransformedStmt The loop nest after tiling, or nullptr in; /// dependent contexts.; /// \param PreInits Helper preinits statements for the loop nest.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:153,Energy Efficiency,allocate,allocate,153,/// Build an empty '#pragma omp unroll' AST node for deserialization.; ///; /// \param C Context of the AST.; /// \param NumClauses Number of clauses to allocate.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:121,Integrability,depend,depend,121,"/// This represents '#pragma omp interop' directive.; ///; /// \code; /// #pragma omp interop init(target:obj) device(x) depend(inout:y) nowait; /// \endcode; /// In this example directive '#pragma omp interop' has; /// clauses 'init', 'device', 'depend' and 'nowait'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:247,Integrability,depend,depend,247,"/// This represents '#pragma omp interop' directive.; ///; /// \code; /// #pragma omp interop init(target:obj) device(x) depend(inout:y) nowait; /// \endcode; /// In this example directive '#pragma omp interop' has; /// clauses 'init', 'device', 'depend' and 'nowait'.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:213,Modifiability,variab,variable,213,/// This represents '#pragma omp dispatch' directive.; ///; /// \code; /// #pragma omp dispatch device(dnum); /// \endcode; /// This example shows a directive '#pragma omp dispatch' with a; /// device clause with variable 'dnum'.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:33,Availability,mask,masked,33,/// This represents '#pragma omp masked' directive.; /// \code; /// #pragma omp masked filter(tid); /// \endcode; /// This example shows a directive '#pragma omp masked' with a filter clause; /// with variable 'tid'.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:80,Availability,mask,masked,80,/// This represents '#pragma omp masked' directive.; /// \code; /// #pragma omp masked filter(tid); /// \endcode; /// This example shows a directive '#pragma omp masked' with a filter clause; /// with variable 'tid'.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:162,Availability,mask,masked,162,/// This represents '#pragma omp masked' directive.; /// \code; /// #pragma omp masked filter(tid); /// \endcode; /// This example shows a directive '#pragma omp masked' with a filter clause; /// with variable 'tid'.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:201,Modifiability,variab,variable,201,/// This represents '#pragma omp masked' directive.; /// \code; /// #pragma omp masked filter(tid); /// \endcode; /// This example shows a directive '#pragma omp masked' with a filter clause; /// with variable 'tid'.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:290,Modifiability,variab,variable,290,/// This represents '#pragma omp metadirective' directive.; ///; /// \code; /// #pragma omp metadirective when(user={condition(N>10)}: parallel for); /// \endcode; /// In this example directive '#pragma omp metadirective' has clauses 'when'; /// with a dynamic user condition to check if a variable 'N > 10'; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:237,Modifiability,variab,variables,237,"/// This represents '#pragma omp loop' directive.; ///; /// \code; /// #pragma omp loop private(a,b) binding(parallel) order(concurrent); /// \endcode; /// In this example directive '#pragma omp loop' has; /// clauses 'private' with the variables 'a' and 'b', 'binding' with; /// modifier 'parallel' and 'order(concurrent).; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:125,Performance,concurren,concurrent,125,"/// This represents '#pragma omp loop' directive.; ///; /// \code; /// #pragma omp loop private(a,b) binding(parallel) order(concurrent); /// \endcode; /// In this example directive '#pragma omp loop' has; /// clauses 'private' with the variables 'a' and 'b', 'binding' with; /// modifier 'parallel' and 'order(concurrent).; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:311,Performance,concurren,concurrent,311,"/// This represents '#pragma omp loop' directive.; ///; /// \code; /// #pragma omp loop private(a,b) binding(parallel) order(concurrent); /// \endcode; /// In this example directive '#pragma omp loop' has; /// clauses 'private' with the variables 'a' and 'b', 'binding' with; /// modifier 'parallel' and 'order(concurrent).; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:237,Modifiability,variab,variables,237,"/// This represents '#pragma omp teams loop' directive.; ///; /// \code; /// #pragma omp teams loop private(a,b) order(concurrent); /// \endcode; /// In this example directive '#pragma omp teams loop' has; /// clauses 'private' with the variables 'a' and 'b', and order(concurrent).; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:119,Performance,concurren,concurrent,119,"/// This represents '#pragma omp teams loop' directive.; ///; /// \code; /// #pragma omp teams loop private(a,b) order(concurrent); /// \endcode; /// In this example directive '#pragma omp teams loop' has; /// clauses 'private' with the variables 'a' and 'b', and order(concurrent).; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:270,Performance,concurren,concurrent,270,"/// This represents '#pragma omp teams loop' directive.; ///; /// \code; /// #pragma omp teams loop private(a,b) order(concurrent); /// \endcode; /// In this example directive '#pragma omp teams loop' has; /// clauses 'private' with the variables 'a' and 'b', and order(concurrent).; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:258,Modifiability,variab,variables,258,"/// This represents '#pragma omp target teams loop' directive.; ///; /// \code; /// #pragma omp target teams loop private(a,b) order(concurrent); /// \endcode; /// In this example directive '#pragma omp target teams loop' has; /// clauses 'private' with the variables 'a' and 'b', and order(concurrent).; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:133,Performance,concurren,concurrent,133,"/// This represents '#pragma omp target teams loop' directive.; ///; /// \code; /// #pragma omp target teams loop private(a,b) order(concurrent); /// \endcode; /// In this example directive '#pragma omp target teams loop' has; /// clauses 'private' with the variables 'a' and 'b', and order(concurrent).; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:291,Performance,concurren,concurrent,291,"/// This represents '#pragma omp target teams loop' directive.; ///; /// \code; /// #pragma omp target teams loop private(a,b) order(concurrent); /// \endcode; /// In this example directive '#pragma omp target teams loop' has; /// clauses 'private' with the variables 'a' and 'b', and order(concurrent).; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:246,Modifiability,variab,variables,246,"/// This represents '#pragma omp parallel loop' directive.; ///; /// \code; /// #pragma omp parallel loop private(a,b) order(concurrent); /// \endcode; /// In this example directive '#pragma omp parallel loop' has; /// clauses 'private' with the variables 'a' and 'b', and order(concurrent).; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:125,Performance,concurren,concurrent,125,"/// This represents '#pragma omp parallel loop' directive.; ///; /// \code; /// #pragma omp parallel loop private(a,b) order(concurrent); /// \endcode; /// In this example directive '#pragma omp parallel loop' has; /// clauses 'private' with the variables 'a' and 'b', and order(concurrent).; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:279,Performance,concurren,concurrent,279,"/// This represents '#pragma omp parallel loop' directive.; ///; /// \code; /// #pragma omp parallel loop private(a,b) order(concurrent); /// \endcode; /// In this example directive '#pragma omp parallel loop' has; /// clauses 'private' with the variables 'a' and 'b', and order(concurrent).; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:267,Modifiability,variab,variables,267,"/// This represents '#pragma omp target parallel loop' directive.; ///; /// \code; /// #pragma omp target parallel loop private(a,b) order(concurrent); /// \endcode; /// In this example directive '#pragma omp target parallel loop' has; /// clauses 'private' with the variables 'a' and 'b', and order(concurrent).; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:139,Performance,concurren,concurrent,139,"/// This represents '#pragma omp target parallel loop' directive.; ///; /// \code; /// #pragma omp target parallel loop private(a,b) order(concurrent); /// \endcode; /// In this example directive '#pragma omp target parallel loop' has; /// clauses 'private' with the variables 'a' and 'b', and order(concurrent).; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:300,Performance,concurren,concurrent,300,"/// This represents '#pragma omp target parallel loop' directive.; ///; /// \code; /// #pragma omp target parallel loop private(a,b) order(concurrent); /// \endcode; /// In this example directive '#pragma omp target parallel loop' has; /// clauses 'private' with the variables 'a' and 'b', and order(concurrent).; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:33,Availability,error,error,33,/// This represents '#pragma omp error' directive.; ///; /// \code; /// #pragma omp error; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h:84,Availability,error,error,84,/// This represents '#pragma omp error' directive.; ///; /// \code; /// #pragma omp error; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtOpenMP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtVisitor.h:438,Integrability,interface,interfaces,438,"//===- StmtVisitor.h - Visitor for Stmt subclasses --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the StmtVisitor and ConstStmtVisitor interfaces.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtVisitor.h:46,Usability,simpl,simple,46,"/// StmtVisitorBase - This class implements a simple visitor for Stmt; /// subclasses. Since Expr derives from Stmt, this also includes support for; /// visiting Exprs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtVisitor.h:79,Performance,optimiz,optimizer,79,"// If we have a binary expr, dispatch to the subcode of the binop. A smart; // optimizer (e.g. LLVM) will fold this comparison into the switch stmt; // below.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtVisitor.h:42,Usability,simpl,simple,42,"/// StmtVisitor - This class implements a simple visitor for Stmt subclasses.; /// Since Expr derives from Stmt, this also includes support for visiting Exprs.; ///; /// This class does not preserve constness of Stmt pointers (see also; /// ConstStmtVisitor).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtVisitor.h:47,Usability,simpl,simple,47,"/// ConstStmtVisitor - This class implements a simple visitor for Stmt; /// subclasses. Since Expr derives from Stmt, this also includes support for; /// visiting Exprs.; ///; /// This class preserves constness of Stmt pointers (see also StmtVisitor).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/StmtVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/StmtVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateArgumentVisitor.h:429,Integrability,interface,interface,429,"//===- TemplateArgumentVisitor.h - Visitor for TArg subclasses --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the TemplateArgumentVisitor interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TemplateArgumentVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateArgumentVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateArgumentVisitor.h:6,Usability,simpl,simple,6,/// A simple visitor class that helps create template argument visitors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TemplateArgumentVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateArgumentVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateArgumentVisitor.h:44,Usability,simpl,simple,44,// namespace templateargumentvisitor; /// A simple visitor class that helps create template argument visitors.; ///; /// This class does not preserve constness of TemplateArgument references (see; /// also ConstTemplateArgumentVisitor).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TemplateArgumentVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateArgumentVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateArgumentVisitor.h:6,Usability,simpl,simple,6,/// A simple visitor class that helps create template argument visitors.; ///; /// This class preserves constness of TemplateArgument references (see also; /// TemplateArgumentVisitor).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TemplateArgumentVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateArgumentVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h:165,Integrability,depend,dependency,165,"// Provide PointerLikeTypeTraits for clang::Expr*, this default one requires a; // full definition of Expr, but this file only sees a forward del because of; // the dependency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h:233,Integrability,depend,dependent,233,"/// The template argument is a non-type template argument that can't be; /// represented by the special-case Declaration, NullPtr, or Integral; /// forms. These values are only ever produced by constant evaluation,; /// so cannot be dependent.; /// TODO: merge Declaration, NullPtr and Integral into this?",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h:126,Integrability,depend,dependent,126,"/// The template argument is an expression, and we've not resolved it to one; /// of the other forms yet, either because it's dependent or because we're; /// representing a non-canonical template argument (for instance, in a; /// TemplateSpecializationType).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h:46,Energy Efficiency,allocate,allocated,46,// We store a decomposed APSInt with the data allocated by ASTContext if; // BitWidth > 64. The memory may be shared between multiple; // TemplateArgument instances.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h:56,Integrability,depend,dependent,56,/// Construct a template argument that refers to a (non-dependent); /// declaration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h:92,Energy Efficiency,allocate,allocated,92,/// Construct an integral constant template argument. The memory to; /// store the value is allocated with Ctx.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h:190,Integrability,depend,dependent,190,"/// Construct a template argument that is a template.; ///; /// This form of template argument is generally used for template template; /// parameters. However, the template name could be a dependent template; /// name that ends up being instantiated to a function template whose address; /// is taken.; ///; /// \param Name The template name.; ///; /// \param IsDefaulted If 'true', implies that this TemplateArgument; /// corresponds to a default template parameter",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h:205,Integrability,depend,dependent,205,"/// Construct a template argument that is a template pack expansion.; ///; /// This form of template argument is generally used for template template; /// parameters. However, the template name could be a dependent template; /// name that ends up being instantiated to a function template whose address; /// is taken.; ///; /// \param Name The template name.; ///; /// \param NumExpansions The number of expansions that will be generated by; /// instantiating; ///; /// \param IsDefaulted If 'true', implies that this TemplateArgument; /// corresponds to a default template parameter",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h:151,Integrability,depend,dependent,151,"/// Construct a template argument that is an expression.; ///; /// This form of template argument only occurs in template argument; /// lists used for dependent types and for expression; it will not; /// occur in a non-dependent, canonical template argument list.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h:219,Integrability,depend,dependent,219,"/// Construct a template argument that is an expression.; ///; /// This form of template argument only occurs in template argument; /// lists used for dependent types and for expression; it will not; /// occur in a non-dependent, canonical template argument list.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h:38,Integrability,depend,dependent,38,/// Whether this template argument is dependent on a template; /// parameter such that its result can change from one instantiation to; /// another.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h:38,Integrability,depend,dependent,38,/// Whether this template argument is dependent on a template; /// parameter.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h:63,Availability,error,error,63,/// Debugging aid that dumps the template argument to standard error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h:13,Integrability,wrap,wrapper,13,/// Location wrapper for a TemplateArgument. TemplateArgument is to; /// TemplateArgumentLoc as Type is to TypeLoc.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h:110,Safety,safe,safe,110,"/// Represents an explicit template argument list in C++, e.g.,; /// the ""<int>"" in ""sort<int>"".; /// This is safe to be used inside an AST node, in contrast with; /// TemplateArgumentListInfo.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateBase.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h:418,Integrability,interface,interface,418,"//===- TemplateName.h - C++ Template Name Representation --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the TemplateName interface and subclasses.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h:82,Integrability,depend,depending,82,"/// The pack index, or the number of stored templates; /// or template arguments, depending on which subclass we have.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h:562,Integrability,depend,dependent,562,"/// Represents a C++ template name within the type system.; ///; /// A C++ template name refers to a template within the C++ type; /// system. In most cases, a template name is simply a reference to a; /// class template, e.g.; ///; /// \code; /// template<typename T> class X { };; ///; /// X<int> xi;; /// \endcode; ///; /// Here, the 'X' in \c X<int> is a template name that refers to the; /// declaration of the class template X, above. Template names can; /// also refer to function templates, C++0x template aliases, etc.; ///; /// Some template names are dependent. For example, consider:; ///; /// \code; /// template<typename MetaFun, typename T1, typename T2> struct apply2 {; /// typedef typename MetaFun::template apply<T1, T2>::type type;; /// };; /// \endcode; ///; /// Here, ""apply"" is treated as a template name within the typename; /// specifier in the typedef. ""apply"" is a nested template, and can; /// only be understood in the context of",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h:177,Usability,simpl,simply,177,"/// Represents a C++ template name within the type system.; ///; /// A C++ template name refers to a template within the C++ type; /// system. In most cases, a template name is simply a reference to a; /// class template, e.g.; ///; /// \code; /// template<typename T> class X { };; ///; /// X<int> xi;; /// \endcode; ///; /// Here, the 'X' in \c X<int> is a template name that refers to the; /// declaration of the class template X, above. Template names can; /// also refer to function templates, C++0x template aliases, etc.; ///; /// Some template names are dependent. For example, consider:; ///; /// \code; /// template<typename MetaFun, typename T1, typename T2> struct apply2 {; /// typedef typename MetaFun::template apply<T1, T2>::type type;; /// };; /// \endcode; ///; /// Here, ""apply"" is treated as a template name within the typename; /// specifier in the typedef. ""apply"" is a nested template, and can; /// only be understood in the context of",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h:58,Integrability,depend,depending,58,// NameDecl is either a TemplateDecl or a UsingShadowDecl depending on the; // NameKind.; // !! There is no free low bits in 32-bit builds to discriminate more than 4; // pointer types in PointerUnion.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h:6,Integrability,depend,dependent,6,/// A dependent template name that has not been resolved to a; /// template (or set of templates).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h:274,Integrability,depend,dependent,274,"/// Retrieve the underlying template declaration that; /// this template name refers to, if known.; ///; /// \returns The template declaration that this template name refers; /// to, if any. If the template name does not refer to a specific; /// declaration because it is a dependent name, or if it refers to a; /// set of function templates, returns NULL.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h:328,Integrability,depend,dependent,328,"/// Retrieve the underlying, overloaded function template; /// declarations that this template name refers to, if known.; ///; /// \returns The set of overloaded function templates that this template; /// name refers to, if known. If the template name does not refer to a; /// specific set of function templates because it is a dependent name or; /// refers to a single template, returns NULL.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h:28,Integrability,depend,dependent,28,"/// Retrieve the underlying dependent template name; /// structure, if any.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h:33,Integrability,depend,dependent,33,/// Determines whether this is a dependent template name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h:65,Integrability,depend,depends,65,/// Determines whether this is a template name that somehow; /// depends on a template parameter.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h:166,Usability,simpl,simple,166,"/// Print the template name.; ///; /// \param OS the output stream to which the template name will be; /// printed.; ///; /// \param Qual print the (Qualified::None) simple name,; /// (Qualified::AsWritten) any written (possibly partial) qualifier, or; /// (Qualified::Fully) the fully qualified name.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h:64,Availability,error,error,64,/// Debugging aid that dumps the template name to standard; /// error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h:601,Availability,down,downstream,601,"/// Represents a template name that was expressed as a; /// qualified name.; ///; /// This kind of template name refers to a template name that was; /// preceded by a nested name specifier, e.g., \c std::vector. Here,; /// the nested name specifier is ""std::"" and the template name is the; /// declaration for ""vector"". The QualifiedTemplateName class is only; /// used to provide ""sugar"" for template names that were expressed; /// with a qualified name, and has no semantic meaning. In this; /// manner, it is to TemplateName what ElaboratedType is to Type,; /// providing extra syntactic sugar for downstream clients.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h:231,Availability,redundant,redundant,231,"/// The nested name specifier that qualifies the template name.; ///; /// The bit is used to indicate whether the ""template"" keyword was; /// present before the template name itself. Note that the; /// ""template"" keyword is always redundant in this case (otherwise,; /// the template name would be a dependent name and we would express; /// this name with DependentTemplateName).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h:300,Integrability,depend,dependent,300,"/// The nested name specifier that qualifies the template name.; ///; /// The bit is used to indicate whether the ""template"" keyword was; /// present before the template name itself. Note that the; /// ""template"" keyword is always redundant in this case (otherwise,; /// the template name would be a dependent name and we would express; /// this name with DependentTemplateName).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h:356,Integrability,Depend,DependentTemplateName,356,"/// The nested name specifier that qualifies the template name.; ///; /// The bit is used to indicate whether the ""template"" keyword was; /// present before the template name itself. Note that the; /// ""template"" keyword is always redundant in this case (otherwise,; /// the template name would be a dependent name and we would express; /// this name with DependentTemplateName).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h:231,Safety,redund,redundant,231,"/// The nested name specifier that qualifies the template name.; ///; /// The bit is used to indicate whether the ""template"" keyword was; /// present before the template name itself. Note that the; /// ""template"" keyword is always redundant in this case (otherwise,; /// the template name would be a dependent name and we would express; /// this name with DependentTemplateName).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h:17,Integrability,depend,dependent,17,"/// Represents a dependent template name that cannot be; /// resolved prior to template instantiation.; ///; /// This kind of template name refers to a dependent template name,; /// including its nested name specifier (if any). For example,; /// DependentTemplateName can refer to ""MetaFun::template apply"",; /// where ""MetaFun::"" is the nested name specifier and ""apply"" is the; /// template name referenced. The ""template"" keyword is implied.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h:152,Integrability,depend,dependent,152,"/// Represents a dependent template name that cannot be; /// resolved prior to template instantiation.; ///; /// This kind of template name refers to a dependent template name,; /// including its nested name specifier (if any). For example,; /// DependentTemplateName can refer to ""MetaFun::template apply"",; /// where ""MetaFun::"" is the nested name specifier and ""apply"" is the; /// template name referenced. The ""template"" keyword is implied.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h:246,Integrability,Depend,DependentTemplateName,246,"/// Represents a dependent template name that cannot be; /// resolved prior to template instantiation.; ///; /// This kind of template name refers to a dependent template name,; /// including its nested name specifier (if any). For example,; /// DependentTemplateName can refer to ""MetaFun::template apply"",; /// where ""MetaFun::"" is the nested name specifier and ""apply"" is the; /// template name referenced. The ""template"" keyword is implied.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h:203,Usability,clear,clear,203,/// The nested name specifier that qualifies the template; /// name.; ///; /// The bit stored in this qualifier describes whether the \c Name field; /// is interpreted as an IdentifierInfo pointer (when clear) or as an; /// overloaded operator kind (when set).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h:8,Integrability,depend,dependent,8,/// The dependent template name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h:87,Usability,clear,clear,87,/// The identifier template name.; ///; /// Only valid when the bit on \c Qualifier is clear.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h:46,Integrability,depend,dependent,46,/// The canonical template name to which this dependent; /// template name refers.; ///; /// The canonical template name for a dependent template name is; /// another dependent template name whose nested name specifier is; /// canonical.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h:127,Integrability,depend,dependent,127,/// The canonical template name to which this dependent; /// template name refers.; ///; /// The canonical template name for a dependent template name is; /// another dependent template name whose nested name specifier is; /// canonical.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h:167,Integrability,depend,dependent,167,/// The canonical template name to which this dependent; /// template name refers.; ///; /// The canonical template name for a dependent template name is; /// another dependent template name whose nested name specifier is; /// canonical.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h:15,Availability,avail,available,15,// No bits are available!,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TemplateName.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TemplateName.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TextNodeDumper.h:230,Availability,avail,available,230,"/// \p Context, \p SM, and \p Traits can be null. This is because we want; /// to be able to call \p dump() in a debugger without having to pass the; /// \p ASTContext to \p dump. Not all parts of the AST dump output will be; /// available without the \p ASTContext.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TextNodeDumper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TextNodeDumper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:477,Integrability,interface,interface,477,"//===- Type.h - C Language Family Type Representation -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// C Language Family Type Representation; ///; /// This file defines the clang::Type interface and subclasses, used to; /// represent types for languages in the C family.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:66,Deployability,release,releases,66,/// This object can be modified without requiring retains or; /// releases.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:65,Deployability,release,released,65,/// Assigning into this object requires the old value to be; /// released and the new value to be retained. The timing of the; /// release of the old value is inexact: it may be moved to; /// immediately after the last known point where the value is; /// live.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:131,Deployability,release,release,131,/// Assigning into this object requires the old value to be; /// released and the new value to be retained. The timing of the; /// release of the old value is inexact: it may be moved to; /// immediately after the last known point where the value is; /// live.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:38,Availability,mask,mask,38,"/// The width of the ""fast"" qualifier mask.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:23,Availability,mask,mask,23,/// The fast qualifier mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:119,Integrability,message,message,119,"// This function is not supposed to be used with language specific; // address spaces. If that happens, the diagnostic message should consider; // printing the QualType instead of the address space value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:24,Integrability,message,messages,24,// TODO: The diagnostic messages where Addr may be 0 should be fixed; // since it cannot differentiate the situation where 0 denotes the default; // address space or user specified __attribute__((address_space(0))).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:41,Energy Efficiency,allocate,allocated,41,// Fast qualifiers are those that can be allocated directly; // on a QualType object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:93,Energy Efficiency,allocate,allocated,93,/// Return true if the set contains any qualifiers which require an ExtQuals; /// node to be allocated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:99,Energy Efficiency,allocate,allocated,99,"// We also define global_device and global_host address spaces,; // to distinguish global pointers allocated on host from pointers; // allocated on device, which are a subset of __global.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:135,Energy Efficiency,allocate,allocated,135,"// We also define global_device and global_host address spaces,; // to distinguish global pointers allocated on host from pointers; // allocated on device, which are a subset of __global.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:167,Safety,safe,safely,167,/// Determines if these qualifiers compatibly include another set.; /// Generally this answers the question of whether an object with the other; /// qualifiers can be safely used as an object with these qualifiers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:195,Energy Efficiency,reduce,reduces,195,"/// A (possibly-)qualified type.; ///; /// For efficiency, we don't store CV-qualified types as nodes on their; /// own: instead each reference to a type stores the qualifiers. This; /// greatly reduces the number of nodes we need to allocate for types (for; /// example we only need one for 'int', 'const int', 'volatile int',; /// 'const volatile int', etc).; ///; /// As an added efficiency bonus, instead of making this a pair, we; /// just store the two bits we care about in the low bits of the; /// pointer. To handle the packing/unpacking, we make QualType be a; /// simple wrapper class that acts like a smart pointer. A third bit; /// indicates whether there are extended qualifiers present, in which; /// case the pointer points to a special structure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:234,Energy Efficiency,allocate,allocate,234,"/// A (possibly-)qualified type.; ///; /// For efficiency, we don't store CV-qualified types as nodes on their; /// own: instead each reference to a type stores the qualifiers. This; /// greatly reduces the number of nodes we need to allocate for types (for; /// example we only need one for 'int', 'const int', 'volatile int',; /// 'const volatile int', etc).; ///; /// As an added efficiency bonus, instead of making this a pair, we; /// just store the two bits we care about in the low bits of the; /// pointer. To handle the packing/unpacking, we make QualType be a; /// simple wrapper class that acts like a smart pointer. A third bit; /// indicates whether there are extended qualifiers present, in which; /// case the pointer points to a special structure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:582,Integrability,wrap,wrapper,582,"/// A (possibly-)qualified type.; ///; /// For efficiency, we don't store CV-qualified types as nodes on their; /// own: instead each reference to a type stores the qualifiers. This; /// greatly reduces the number of nodes we need to allocate for types (for; /// example we only need one for 'int', 'const int', 'volatile int',; /// 'const volatile int', etc).; ///; /// As an added efficiency bonus, instead of making this a pair, we; /// just store the two bits we care about in the low bits of the; /// pointer. To handle the packing/unpacking, we make QualType be a; /// simple wrapper class that acts like a smart pointer. A third bit; /// indicates whether there are extended qualifiers present, in which; /// case the pointer points to a special structure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:673,Modifiability,extend,extended,673,"/// A (possibly-)qualified type.; ///; /// For efficiency, we don't store CV-qualified types as nodes on their; /// own: instead each reference to a type stores the qualifiers. This; /// greatly reduces the number of nodes we need to allocate for types (for; /// example we only need one for 'int', 'const int', 'volatile int',; /// 'const volatile int', etc).; ///; /// As an added efficiency bonus, instead of making this a pair, we; /// just store the two bits we care about in the low bits of the; /// pointer. To handle the packing/unpacking, we make QualType be a; /// simple wrapper class that acts like a smart pointer. A third bit; /// indicates whether there are extended qualifiers present, in which; /// case the pointer points to a special structure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:575,Usability,simpl,simple,575,"/// A (possibly-)qualified type.; ///; /// For efficiency, we don't store CV-qualified types as nodes on their; /// own: instead each reference to a type stores the qualifiers. This; /// greatly reduces the number of nodes we need to allocate for types (for; /// example we only need one for 'int', 'const int', 'volatile int',; /// 'const volatile int', etc).; ///; /// As an added efficiency bonus, instead of making this a pair, we; /// just store the two bits we care about in the low bits of the; /// pointer. To handle the packing/unpacking, we make QualType be a; /// simple wrapper class that acts like a smart pointer. A third bit; /// indicates whether there are extended qualifiers present, in which; /// case the pointer points to a special structure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:25,Energy Efficiency,efficient,efficiently,25,"// Thankfully, these are efficiently composable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:177,Energy Efficiency,efficient,efficient,177,"/// Retrieves a pointer to the underlying (unqualified) type.; ///; /// This function requires that the type not be NULL. If the type might be; /// NULL, use the (slightly less efficient) \c getTypePtrOrNull().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:43,Modifiability,extend,extended,43,"// Removes fast qualifiers, but leaves any extended qualifiers in place.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:114,Integrability,rout,routine,114,"/// Retrieve the unqualified variant of the given type,; /// removing as little sugar as possible.; ///; /// This routine looks through various kinds of sugar to find the; /// least-desugared type that is unqualified. For example, given:; ///; /// \code; /// typedef int Integer;; /// typedef const Integer CInteger;; /// typedef CInteger DifferenceType;; /// \endcode; ///; /// Executing \c getUnqualifiedType() on the type \c DifferenceType will; /// desugar until we hit the type \c Integer, which has no qualifiers on it.; ///; /// The resulting type might still be qualified if it's sugar for an array; /// type. To strip qualifiers even from within a sugared array type, use; /// ASTContext::getUnqualifiedArrayType.; ///; /// Note: In C, the _Atomic qualifier is special (see C23 6.2.5p32 for; /// details), and it is not stripped by this function. Use; /// getAtomicUnqualifiedType() to strip qualifiers including _Atomic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:114,Integrability,rout,routine,114,"/// Determine the type of a (typically non-lvalue) expression with the; /// specified result type.; ///; /// This routine should be used for expressions for which the return type is; /// explicitly specified (e.g., in a cast or call) and isn't necessarily; /// an lvalue. It removes a top-level reference (since there are no; /// expressions of reference type) and deletes top-level cvr-qualifiers; /// from non-class types (in C++) or all types (in C).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:99,Integrability,rout,routine,99,"/// Return the specified type with one level of ""sugar"" removed from; /// the type.; ///; /// This routine takes off the first typedef, typeof, etc. If the outer level; /// of the type is already concrete, it returns it unmodified.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:255,Integrability,depend,depend,255,"/// The type is a struct containing a field whose type is neither; /// PCK_Trivial nor PCK_VolatileTrivial.; /// Note that a C++ struct type does not necessarily match this; C++ copying; /// semantics are too complex to express here, in part because they depend; /// on the exact constructor or assignment operator that is chosen by; /// overload resolution to do the copy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:554,Integrability,message,message,554,"/// Substitute type arguments from an object type for the Objective-C type; /// parameters used in the subject type.; ///; /// This operation combines the computation of type arguments for; /// substitution (\c Type::getObjCSubstitutions) with the actual process of; /// substitution (\c QualType::substObjCTypeArgs) for the convenience of; /// callers that need to perform a single substitution in isolation.; ///; /// \param objectType The type of the object whose member type we're; /// substituting into. For example, this might be the receiver of a message; /// or the base of a property access.; ///; /// \param dc The declaration context from which the subject type was; /// retrieved, which indicates (for example) which type parameters should; /// be substituted.; ///; /// \param context The context in which the subject type was written.; ///; /// \returns the subject type after replacing all of the Objective-C type; /// parameters with their corresponding arguments.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:366,Performance,perform,perform,366,"/// Substitute type arguments from an object type for the Objective-C type; /// parameters used in the subject type.; ///; /// This operation combines the computation of type arguments for; /// substitution (\c Type::getObjCSubstitutions) with the actual process of; /// substitution (\c QualType::substObjCTypeArgs) for the convenience of; /// callers that need to perform a single substitution in isolation.; ///; /// \param objectType The type of the object whose member type we're; /// substituting into. For example, this might be the receiver of a message; /// or the base of a property access.; ///; /// \param dc The declaration context from which the subject type was; /// retrieved, which indicates (for example) which type parameters should; /// be substituted.; ///; /// \param context The context in which the subject type was written.; ///; /// \returns the subject type after replacing all of the Objective-C type; /// parameters with their corresponding arguments.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:593,Security,access,access,593,"/// Substitute type arguments from an object type for the Objective-C type; /// parameters used in the subject type.; ///; /// This operation combines the computation of type arguments for; /// substitution (\c Type::getObjCSubstitutions) with the actual process of; /// substitution (\c QualType::substObjCTypeArgs) for the convenience of; /// callers that need to perform a single substitution in isolation.; ///; /// \param objectType The type of the object whose member type we're; /// substituting into. For example, this might be the receiver of a message; /// or the base of a property access.; ///; /// \param dc The declaration context from which the subject type was; /// retrieved, which indicates (for example) which type parameters should; /// be substituted.; ///; /// \param context The context in which the subject type was written.; ///; /// \returns the subject type after replacing all of the Objective-C type; /// parameters with their corresponding arguments.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:90,Safety,avoid,avoid,90,"// These methods are implemented in a separate translation unit;; // ""static""-ize them to avoid creating temporary QualTypes in the; // caller.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:108,Security,access,access,108,"/// Base class that is common to both the \c ExtQuals and \c Type; /// classes, which allows \c QualType to access the common fields between the; /// two.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:148,Energy Efficiency,efficient,efficient,148,"/// The ""base"" type of an extended qualifiers type (\c ExtQuals) or; /// a self-referential pointer (for \c Type).; ///; /// This pointer allows an efficient mapping from a QualType to its; /// underlying type pointer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:26,Modifiability,extend,extended,26,"/// The ""base"" type of an extended qualifiers type (\c ExtQuals) or; /// a self-referential pointer (for \c Type).; ///; /// This pointer allows an efficient mapping from a QualType to its; /// underlying type pointer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:230,Energy Efficiency,allocate,allocated,230,"/// We can encode up to four bits in the low bits of a; /// type pointer, but there are many more type qualifiers that we want; /// to be able to apply to an arbitrary type. Therefore we have this; /// struct, intended to be heap-allocated and used by QualType to; /// store qualifiers.; ///; /// The current design tags the 'const', 'restrict', and 'volatile' qualifiers; /// in three low bits on the QualType pointer; a fourth bit records whether; /// the pointer is an ExtQuals node. The extended qualifiers (address spaces,; /// Objective-C GC attributes) are much more rare.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:491,Modifiability,extend,extended,491,"/// We can encode up to four bits in the low bits of a; /// type pointer, but there are many more type qualifiers that we want; /// to be able to apply to an arbitrary type. Therefore we have this; /// struct, intended to be heap-allocated and used by QualType to; /// store qualifiers.; ///; /// The current design tags the 'const', 'restrict', and 'volatile' qualifiers; /// in three low bits on the QualType pointer; a fourth bit records whether; /// the pointer is an ExtQuals node. The extended qualifiers (address spaces,; /// Objective-C GC attributes) are much more rare.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:252,Deployability,Update,Update,252,"// NOTE: changing the fast qualifiers should be straightforward as; // long as you don't make 'const' non-fast.; // 1. Qualifiers:; // a) Modify the bitmasks (Qualifiers::TQ and DeclSpec::TQ).; // Fast qualifiers must occupy the low-order bits.; // b) Update Qualifiers::FastWidth and FastMask.; // 2. QualType:; // a) Update is{Volatile,Restrict}Qualified(), defined inline.; // b) Update remove{Volatile,Restrict}, defined near the end of; // this header.; // 3. ASTContext:; // a) Update get{Volatile,Restrict}Type.; /// The immutable set of qualifiers applied by this node. Always contains; /// extended qualifiers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:319,Deployability,Update,Update,319,"// NOTE: changing the fast qualifiers should be straightforward as; // long as you don't make 'const' non-fast.; // 1. Qualifiers:; // a) Modify the bitmasks (Qualifiers::TQ and DeclSpec::TQ).; // Fast qualifiers must occupy the low-order bits.; // b) Update Qualifiers::FastWidth and FastMask.; // 2. QualType:; // a) Update is{Volatile,Restrict}Qualified(), defined inline.; // b) Update remove{Volatile,Restrict}, defined near the end of; // this header.; // 3. ASTContext:; // a) Update get{Volatile,Restrict}Type.; /// The immutable set of qualifiers applied by this node. Always contains; /// extended qualifiers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:383,Deployability,Update,Update,383,"// NOTE: changing the fast qualifiers should be straightforward as; // long as you don't make 'const' non-fast.; // 1. Qualifiers:; // a) Modify the bitmasks (Qualifiers::TQ and DeclSpec::TQ).; // Fast qualifiers must occupy the low-order bits.; // b) Update Qualifiers::FastWidth and FastMask.; // 2. QualType:; // a) Update is{Volatile,Restrict}Qualified(), defined inline.; // b) Update remove{Volatile,Restrict}, defined near the end of; // this header.; // 3. ASTContext:; // a) Update get{Volatile,Restrict}Type.; /// The immutable set of qualifiers applied by this node. Always contains; /// extended qualifiers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:484,Deployability,Update,Update,484,"// NOTE: changing the fast qualifiers should be straightforward as; // long as you don't make 'const' non-fast.; // 1. Qualifiers:; // a) Modify the bitmasks (Qualifiers::TQ and DeclSpec::TQ).; // Fast qualifiers must occupy the low-order bits.; // b) Update Qualifiers::FastWidth and FastMask.; // 2. QualType:; // a) Update is{Volatile,Restrict}Qualified(), defined inline.; // b) Update remove{Volatile,Restrict}, defined near the end of; // this header.; // 3. ASTContext:; // a) Update get{Volatile,Restrict}Type.; /// The immutable set of qualifiers applied by this node. Always contains; /// extended qualifiers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:599,Modifiability,extend,extended,599,"// NOTE: changing the fast qualifiers should be straightforward as; // long as you don't make 'const' non-fast.; // 1. Qualifiers:; // a) Modify the bitmasks (Qualifiers::TQ and DeclSpec::TQ).; // Fast qualifiers must occupy the low-order bits.; // b) Update Qualifiers::FastWidth and FastMask.; // 2. QualType:; // a) Update is{Volatile,Restrict}Qualified(), defined inline.; // b) Update remove{Volatile,Restrict}, defined near the end of; // this header.; // 3. ASTContext:; // a) Update get{Volatile,Restrict}Type.; /// The immutable set of qualifiers applied by this node. Always contains; /// extended qualifiers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:1043,Testability,test,tests,1043,"/// The base class of the type hierarchy.; ///; /// A central concept with types is that each type always has a canonical; /// type. A canonical type is the type with any typedef names stripped out; /// of it or the types it references. For example, consider:; ///; /// typedef int foo;; /// typedef foo* bar;; /// 'int *' 'foo *' 'bar'; ///; /// There will be a Type object created for 'int'. Since int is canonical, its; /// CanonicalType pointer points to itself. There is also a Type for 'foo' (a; /// TypedefType). Its CanonicalType pointer points to the 'int' Type. Next; /// there is a PointerType that represents 'int*', which, like 'int', is; /// canonical. Finally, there is a PointerType type for 'foo*' whose canonical; /// type is 'int*', and there is a TypedefType for 'bar', whose canonical type; /// is also 'int*'.; ///; /// Non-canonical types are useful for emitting diagnostics, without losing; /// information about typedefs being used. Canonical types are useful for type; /// comparisons (they allow by-pointer equality tests) and useful for reasoning; /// about whether something has a particular form (e.g. is a function type),; /// because they implicitly, recursively, strip all typedefs out of a type.; ///; /// Types, once created, are immutable.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:34,Integrability,depend,dependency,34,/// Store information on the type dependency.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:16,Performance,cache,cache,16,/// True if the cache (i.e. the bitfields here starting with; /// 'Cache') is valid.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:67,Performance,Cache,Cache,67,/// True if the cache (i.e. the bitfields here starting with; /// 'Cache') is valid.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:30,Modifiability,extend,extended,30,/// Whether this function has extended Qualifiers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:30,Modifiability,extend,extended,30,/// Whether this function has extended parameter information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:18,Integrability,protocol,protocols,18,/// The number of protocols stored directly on this object type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:41,Energy Efficiency,efficient,efficient,41,/// An ElaboratedTypeKeyword. 8 bits for efficient access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:51,Security,access,access,51,/// An ElaboratedTypeKeyword. 8 bits for efficient access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:433,Performance,perform,performance,433,"/// The number of template arguments in the type-constraints, which is; /// expected to be able to hold at least 1024 according to [implimits].; /// However as this limit is somewhat easy to hit with template; /// metaprogramming we'd prefer to keep it as large as possible.; /// At the moment it has been left as a non-bitfield since this type; /// safely fits in 64 bits as an unsigned, so there is no reason to; /// introduce the performance impact of a bitfield.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:350,Safety,safe,safely,350,"/// The number of template arguments in the type-constraints, which is; /// expected to be able to hold at least 1024 according to [implimits].; /// However as this limit is somewhat easy to hit with template; /// metaprogramming we'd prefer to keep it as large as possible.; /// At the moment it has been left as a non-bitfield since this type; /// safely fits in 64 bits as an unsigned, so there is no reason to; /// introduce the performance impact of a bitfield.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:454,Performance,perform,performance,454,"/// The number of template arguments named in this class template; /// specialization, which is expected to be able to hold at least 1024; /// according to [implimits]. However, as this limit is somewhat easy to; /// hit with template metaprogramming we'd prefer to keep it as large; /// as possible. At the moment it has been left as a non-bitfield since; /// this type safely fits in 64 bits as an unsigned, so there is no reason; /// to introduce the performance impact of a bitfield.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:371,Safety,safe,safely,371,"/// The number of template arguments named in this class template; /// specialization, which is expected to be able to hold at least 1024; /// according to [implimits]. However, as this limit is somewhat easy to; /// hit with template metaprogramming we'd prefer to keep it as large; /// as possible. At the moment it has been left as a non-bitfield since; /// this type safely fits in 64 bits as an unsigned, so there is no reason; /// to introduce the performance impact of a bitfield.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:454,Performance,perform,performance,454,"/// The number of template arguments named in this class template; /// specialization, which is expected to be able to hold at least 1024; /// according to [implimits]. However, as this limit is somewhat easy to; /// hit with template metaprogramming we'd prefer to keep it as large; /// as possible. At the moment it has been left as a non-bitfield since; /// this type safely fits in 64 bits as an unsigned, so there is no reason; /// to introduce the performance impact of a bitfield.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:371,Safety,safe,safely,371,"/// The number of template arguments named in this class template; /// specialization, which is expected to be able to hold at least 1024; /// according to [implimits]. However, as this limit is somewhat easy to; /// hit with template metaprogramming we'd prefer to keep it as large; /// as possible. At the moment it has been left as a non-bitfield since; /// this type safely fits in 64 bits as an unsigned, so there is no reason; /// to introduce the performance impact of a bitfield.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:463,Performance,perform,performance,463,"/// The number of expansions that this pack expansion will; /// generate when substituted (+1), which is expected to be able to; /// hold at least 1024 according to [implimits]. However, as this limit; /// is somewhat easy to hit with template metaprogramming we'd prefer to; /// keep it as large as possible. At the moment it has been left as a; /// non-bitfield since this type safely fits in 64 bits as an unsigned, so; /// there is no reason to introduce the performance impact of a bitfield.; ///; /// This field will only have a non-zero value when some of the parameter; /// packs that occur within the pattern have been substituted but others; /// have not.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:380,Safety,safe,safely,380,"/// The number of expansions that this pack expansion will; /// generate when substituted (+1), which is expected to be able to; /// hold at least 1024 according to [implimits]. However, as this limit; /// is somewhat easy to hit with template metaprogramming we'd prefer to; /// keep it as large as possible. At the moment it has been left as a; /// non-bitfield since this type safely fits in 64 bits as an unsigned, so; /// there is no reason to introduce the performance impact of a bitfield.; ///; /// This field will only have a non-zero value when some of the parameter; /// packs that occur within the pattern have been substituted but others; /// have not.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:500,Integrability,rout,routine,500,"/// Whether this type is or contains an unexpanded parameter; /// pack, used to support C++0x variadic templates.; ///; /// A type that contains a parameter pack shall be expanded by the; /// ellipsis operator at some point. For example, the typedef in the; /// following example contains an unexpanded parameter pack 'T':; ///; /// \code; /// template<typename ...T>; /// struct X {; /// typedef T* pointer_types; // ill-formed; T is a parameter pack.; /// };; /// \endcode; ///; /// Note that this routine does not specify which",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:25,Performance,scalab,scalable,25,/// Returns true for all scalable vector types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:25,Performance,scalab,scalable,25,/// Returns true for SVE scalable vector types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:25,Performance,scalab,scalable,25,/// Returns true for RVV scalable vector types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:156,Availability,mask,mask,156,"/// Determines if this is a sizeless type supported by the; /// 'riscv_rvv_vector_bits' type attribute, which can be applied to a single; /// RVV vector or mask.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:331,Integrability,rout,routine,331,"/// Types are partitioned into 3 broad categories (C99 6.2.5p1):; /// object types, function types, and incomplete types.; /// Return true if this is an incomplete type.; /// A type that can describe objects, but which lacks information needed to; /// determine its size (e.g. void, or a fwd declared struct). Clients of this; /// routine will need to determine if the size is actually required.; ///; /// Def If non-null, and the type refers to some kind of declaration; /// that can be completed (such as a C struct, C++ class, or Objective-C; /// class), will be set to the declaration.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:4,Testability,Test,Test,4,/// Test if this type is a standard-layout type.; /// (C++0x [basic.type]p9),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:4,Testability,Test,Test,4,/// Test for a particular builtin type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:4,Testability,Test,Test,4,/// Test for a type which does not represent an actual type-system type but; /// is instead used as a placeholder for various convenient purposes within; /// Clang. All such types are BuiltinTypes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:4,Testability,Test,Test,4,/// Test for a specific placeholder type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:4,Testability,Test,Test,4,/// Test for a placeholder type other than Overload; see; /// BuiltinType::isNonOverloadPlaceholderType.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:118,Testability,test,test,118,/// isIntegerType() does *not* include complex integers (a GCC extension).; /// isComplexIntegerType() can be used to test for complex integers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:164,Testability,test,test,164,"// C99 6.2.5p10 (float, double, long double); /// isComplexType() does *not* include complex integers (a GCC extension).; /// isComplexIntegerType() can be used to test for complex integers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:3,Modifiability,Extend,Extended,3,// Extended vector type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:3,Modifiability,Extend,Extended,3,// Extended vector type with bool element.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:9,Integrability,depend,dependent,9,// value-dependent address space qualifier,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:75,Integrability,interface,interface,75,"// __attribute__((objc_independent_class)); // FIXME: change this to 'raw' interface type, so we can used 'interface' type; // for the common case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:107,Integrability,interface,interface,107,"// __attribute__((objc_independent_class)); // FIXME: change this to 'raw' interface type, so we can used 'interface' type; // for the common case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:66,Integrability,depend,dependent,66,"/// Return the implicit lifetime for this type, which must not be dependent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:28,Availability,error,error,28,/// Whether this type is an error type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:27,Integrability,depend,dependent,27,"/// Whether this type is a dependent type, meaning that its definition; /// somehow depends on a template parameter (C++ [temp.dep.type]).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:84,Integrability,depend,depends,84,"/// Whether this type is a dependent type, meaning that its definition; /// somehow depends on a template parameter (C++ [temp.dep.type]).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:52,Integrability,depend,dependent,52,"/// Determine whether this type is an instantiation-dependent type,; /// meaning that the type involves a template parameter (even if the; /// definition does not actually depend on the type substituted for that; /// template parameter).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:172,Integrability,depend,depend,172,"/// Determine whether this type is an instantiation-dependent type,; /// meaning that the type involves a template parameter (even if the; /// definition does not actually depend on the type substituted for that; /// template parameter).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:27,Modifiability,variab,variably-modified,27,/// Whether this type is a variably-modified type (C99 6.7.5).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:33,Modifiability,variab,variable-length,33,/// Whether this type involves a variable-length array type; /// with a definite size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:133,Integrability,interface,interface,133,"/// Whether this type is represented natively as a pointer. This includes; /// pointers, references, block pointers, and Objective-C interface,; /// qualified id, and qualified interface types, as well as nullptr_t.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:177,Integrability,interface,interface,177,"/// Whether this type is represented natively as a pointer. This includes; /// pointers, references, block pointers, and Objective-C interface,; /// qualified id, and qualified interface types, as well as nullptr_t.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:112,Integrability,interface,interface,112,// The following is a convenience method that returns an ObjCObjectPointerType; // for object declared using an interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:124,Integrability,inject,injected-class-name,124,"/// Retrieves the CXXRecordDecl that this type refers to, either; /// because the type is a RecordType or because it is the injected-class-name; /// type of a class template or class template partial specialization.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:124,Security,inject,injected-class-name,124,"/// Retrieves the CXXRecordDecl that this type refers to, either; /// because the type is a RecordType or because it is the injected-class-name; /// type of a class template or class template partial specialization.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:115,Integrability,inject,injected-class-name,115,"/// Retrieves the TagDecl that this type refers to, either; /// because the type is a TagType or because it is the injected-class-name; /// type of a class template or class template partial specialization.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:115,Security,inject,injected-class-name,115,"/// Retrieves the TagDecl that this type refers to, either; /// because the type is a TagType or because it is the injected-class-name; /// type of a class template or class template partial specialization.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:57,Modifiability,variab,variable,57,"/// Get the DeducedType whose type will be deduced for a variable with; /// an initializer of this type. This looks through declarators like pointer; /// types, but not through decltype or typedefs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:54,Modifiability,variab,variable,54,"/// Get the AutoType whose type will be deduced for a variable with; /// an initializer of this type. This looks through declarators like pointer; /// types, but not through decltype or typedefs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:33,Modifiability,variab,variable,33,"/// Return true if this is not a variable sized type,; /// according to the rules of C99 6.7.5p3. It is not legal to call this on; /// incomplete types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:263,Integrability,depend,dependent,263,"/// Determine whether the given type can have a nullability; /// specifier applied to it, i.e., if it is any kind of pointer type.; ///; /// \param ResultIfUnknown The value to return if we don't yet know whether; /// this type can have nullability because it is dependent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:243,Integrability,message,message,243,"/// Retrieve the set of substitutions required when accessing a member; /// of the Objective-C receiver type that is declared in the given context.; ///; /// \c *this is the type of the object we're operating on, e.g., the; /// receiver for a message send or the base of a property access, and is; /// expected to be of some object or object pointer type.; ///; /// \param dc The declaration context for which we are building up a; /// substitution mapping, which should be an Objective-C class, extension,; /// category, or method within.; ///; /// \returns an array of type arguments that can be substituted for; /// the type parameters of the given declaration context in any type described; /// within that context, or an empty optional to indicate that no; /// substitution is required.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:52,Security,access,accessing,52,"/// Retrieve the set of substitutions required when accessing a member; /// of the Objective-C receiver type that is declared in the given context.; ///; /// \c *this is the type of the object we're operating on, e.g., the; /// receiver for a message send or the base of a property access, and is; /// expected to be of some object or object pointer type.; ///; /// \param dc The declaration context for which we are building up a; /// substitution mapping, which should be an Objective-C class, extension,; /// category, or method within.; ///; /// \returns an array of type arguments that can be substituted for; /// the type parameters of the given declaration context in any type described; /// within that context, or an empty optional to indicate that no; /// substitution is required.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:282,Security,access,access,282,"/// Retrieve the set of substitutions required when accessing a member; /// of the Objective-C receiver type that is declared in the given context.; ///; /// \c *this is the type of the object we're operating on, e.g., the; /// receiver for a message send or the base of a property access, and is; /// expected to be of some object or object pointer type.; ///; /// \param dc The declaration context for which we are building up a; /// substitution mapping, which should be an Objective-C class, extension,; /// category, or method within.; ///; /// \returns an array of type arguments that can be substituted for; /// the type parameters of the given declaration context in any type described; /// within that context, or an empty optional to indicate that no; /// substitution is required.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:34,Integrability,interface,interface,34,/// Determines if this is an ObjC interface type that may accept type; /// parameters.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:223,Modifiability,Variab,VariableArrayType,223,"/// Represents a C array with a specified size that is not an; /// integer-constant-expression. For example, 'int s[x+foo()]'.; /// Since the size expression is an arbitrary expression, we store it as such.; ///; /// Note: VariableArrayType's aren't uniqued (since the expressions aren't) and; /// should not be: two lexically equivalent variable array types could mean; /// different things, for example, these variables do not have the same type; /// dynamically:; ///; /// void foo(int x) {; /// int Y[x];; /// ++x;; /// int Z[x];; /// }",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:338,Modifiability,variab,variable,338,"/// Represents a C array with a specified size that is not an; /// integer-constant-expression. For example, 'int s[x+foo()]'.; /// Since the size expression is an arbitrary expression, we store it as such.; ///; /// Note: VariableArrayType's aren't uniqued (since the expressions aren't) and; /// should not be: two lexically equivalent variable array types could mean; /// different things, for example, these variables do not have the same type; /// dynamically:; ///; /// void foo(int x) {; /// int Y[x];; /// ++x;; /// int Z[x];; /// }",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:412,Modifiability,variab,variables,412,"/// Represents a C array with a specified size that is not an; /// integer-constant-expression. For example, 'int s[x+foo()]'.; /// Since the size expression is an arbitrary expression, we store it as such.; ///; /// Note: VariableArrayType's aren't uniqued (since the expressions aren't) and; /// should not be: two lexically equivalent variable array types could mean; /// different things, for example, these variables do not have the same type; /// dynamically:; ///; /// void foo(int x) {; /// int Y[x];; /// ++x;; /// int Z[x];; /// }",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:84,Integrability,depend,dependency,84,// We use C-style casts instead of cast<> here because we do not wish; // to have a dependency of Type.h on Stmt.h/Expr.h.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:58,Integrability,depend,dependent,58,"/// Represents an array type in C++ whose size is a value-dependent expression.; ///; /// For example:; /// \code; /// template<typename T, int Size>; /// class array {; /// T data[Size];; /// };; /// \endcode; ///; /// For these types, we won't actually know what the array bound is; /// until template instantiation occurs, at which point this will; /// become either a ConstantArrayType or a VariableArrayType.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:395,Modifiability,Variab,VariableArrayType,395,"/// Represents an array type in C++ whose size is a value-dependent expression.; ///; /// For example:; /// \code; /// template<typename T, int Size>; /// class array {; /// T data[Size];; /// };; /// \endcode; ///; /// For these types, we won't actually know what the array bound is; /// until template instantiation occurs, at which point this will; /// become either a ConstantArrayType or a VariableArrayType.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:84,Integrability,depend,dependency,84,// We use C-style casts instead of cast<> here because we do not wish; // to have a dependency of Type.h on Stmt.h/Expr.h.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:95,Integrability,depend,dependent,95,"/// Represents an extended address space qualifier where the input address space; /// value is dependent. Non-dependent address spaces are not represented with a; /// special Type subclass; they are stored on an ExtQuals node as part of a QualType.; ///; /// For example:; /// \code; /// template<typename T, int AddrSpace>; /// class AddressSpace {; /// typedef T __attribute__((address_space(AddrSpace))) type;; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:110,Integrability,depend,dependent,110,"/// Represents an extended address space qualifier where the input address space; /// value is dependent. Non-dependent address spaces are not represented with a; /// special Type subclass; they are stored on an ExtQuals node as part of a QualType.; ///; /// For example:; /// \code; /// template<typename T, int AddrSpace>; /// class AddressSpace {; /// typedef T __attribute__((address_space(AddrSpace))) type;; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:18,Modifiability,extend,extended,18,"/// Represents an extended address space qualifier where the input address space; /// value is dependent. Non-dependent address spaces are not represented with a; /// special Type subclass; they are stored on an ExtQuals node as part of a QualType.; ///; /// For example:; /// \code; /// template<typename T, int AddrSpace>; /// class AddressSpace {; /// typedef T __attribute__((address_space(AddrSpace))) type;; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:77,Integrability,depend,dependent,77,"/// Represents an extended vector type where either the type or size is; /// dependent.; ///; /// For example:; /// \code; /// template<typename T, int Size>; /// class vector {; /// typedef T __attribute__((ext_vector_type(Size))) type;; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:18,Modifiability,extend,extended,18,"/// Represents an extended vector type where either the type or size is; /// dependent.; ///; /// For example:; /// \code; /// template<typename T, int Size>; /// class vector {; /// typedef T __attribute__((ext_vector_type(Size))) type;; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:31,Availability,mask,mask,31,/// is RISC-V RVV fixed-length mask vector,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:62,Integrability,depend,dependent,62,"/// Represents a vector type where either the type or size is dependent.; ////; /// For example:; /// \code; /// template<typename T, int Size>; /// class vector {; /// typedef T __attribute__((vector_size(Size))) type;; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:20,Modifiability,Extend,Extended,20,"/// ExtVectorType - Extended vector type. This type is created using; /// __attribute__((ext_vector_type(n)), where ""n"" is the number of elements.; /// Unlike vector_size, ext_vector_type is only allowed on typedef's. This; /// class enables syntactic extensions, like Vector Components for accessing; /// points (as .xyzw), colors (as .rgba), and textures (modeled after OpenGL; /// Shading Language).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:291,Security,access,accessing,291,"/// ExtVectorType - Extended vector type. This type is created using; /// __attribute__((ext_vector_type(n)), where ""n"" is the number of elements.; /// Unlike vector_size, ext_vector_type is only allowed on typedef's. This; /// class enables syntactic extensions, like Vector Components for accessing; /// points (as .xyzw), colors (as .rgba), and textures (modeled after OpenGL; /// Shading Language).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:87,Integrability,depend,dependent,87,/// Represents a matrix type where the type and the number of rows and columns; /// is dependent on a template.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:198,Availability,avail,available,198,"/// Interesting information about a specific parameter that can't simply; /// be reflected in parameter's type. This is only used by FunctionProtoType; /// but is in FunctionType to make this class available during the; /// specification of the bases of FunctionProtoType.; ///; /// It makes sense to model language features this way when there's some; /// sort of parameter-specific override (such as an attribute) that; /// affects how the function is called. For example, the ARC ns_consumed; /// attribute changes whether a parameter is passed at +0 (the default); /// or +1 (ns_consumed). This must be reflected in the function type,; /// but isn't really a change to the parameter type.; ///; /// One serious disadvantage of modelling language features this way is; /// that they generally do not work with language features that attempt; /// to destructure types. For example, template argument deduction will; /// not be able to match a parameter declared as; /// T (*)(U); /// against an argument of type; /// void (*)(__attribute__((ns_consumed)) id); /// because the substitution of T=void, U=id into the former will; /// not produce the latter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:66,Usability,simpl,simply,66,"/// Interesting information about a specific parameter that can't simply; /// be reflected in parameter's type. This is only used by FunctionProtoType; /// but is in FunctionType to make this class available during the; /// specification of the bases of FunctionProtoType.; ///; /// It makes sense to model language features this way when there's some; /// sort of parameter-specific override (such as an attribute) that; /// affects how the function is called. For example, the ARC ns_consumed; /// attribute changes whether a parameter is passed at +0 (the default); /// or +1 (ns_consumed). This must be reflected in the function type,; /// but isn't really a change to the parameter type.; ///; /// One serious disadvantage of modelling language features this way is; /// that they generally do not work with language features that attempt; /// to destructure types. For example, template argument deduction will; /// not be able to match a parameter declared as; /// T (*)(U); /// against an argument of type; /// void (*)(__attribute__((ns_consumed)) id); /// because the substitution of T=void, U=id into the former will; /// not produce the latter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:345,Availability,failure,failures,345,"/// A class which abstracts out some details necessary for; /// making a call.; ///; /// It is not actually used directly for storing this information in; /// a FunctionType, although FunctionType does currently use the; /// same bit-pattern.; ///; // If you add a field (say Foo), other than the obvious places (both,; // constructors, compile failures), what you need to update is; // * Operator==; // * getFoo; // * withFoo; // * functionType. Add Foo, getFoo.; // * ASTContext::getFooType; // * ASTContext::mergeFunctionTypes; // * FunctionNoProtoType::Profile; // * FunctionProtoType::Profile; // * TypePrinter::PrintFunctionProto; // * AST read and write; // * Codegen",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:373,Deployability,update,update,373,"/// A class which abstracts out some details necessary for; /// making a call.; ///; /// It is not actually used directly for storing this information in; /// a FunctionType, although FunctionType does currently use the; /// same bit-pattern.; ///; // If you add a field (say Foo), other than the obvious places (both,; // constructors, compile failures), what you need to update is; // * Operator==; // * getFoo; // * withFoo; // * functionType. Add Foo, getFoo.; // * ASTContext::getFooType; // * ASTContext::mergeFunctionTypes; // * FunctionNoProtoType::Profile; // * FunctionProtoType::Profile; // * TypePrinter::PrintFunctionProto; // * AST read and write; // * Codegen",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:6,Usability,simpl,simple,6,/// A simple holder for a QualType representing a type in an; /// exception specification. Unfortunately needed by FunctionProtoType; /// because TrailingObjects cannot handle repeated types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:6,Usability,simpl,simple,6,/// A simple holder for various uncommon bits which do not fit in; /// FunctionTypeBitfields. Aligned to alignof(void *) to maintain the; /// alignment of subsequent objects in TrailingObjects.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:79,Availability,avail,available,79,"/// Represents a K&R-style 'int foo()' function, which has; /// no information available about its arguments.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:39,Integrability,depend,dependent,39,/// Return whether this function has a dependent exception spec.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:54,Integrability,depend,dependent,54,/// Return whether this function has an instantiation-dependent exception; /// spec.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:19,Availability,avail,available,19,/// Return all the available information about this type's exception spec.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:98,Integrability,depend,depends,98,"/// Determine whether this function type has a non-throwing exception; /// specification. If this depends on template arguments, returns; /// \c ResultIfDependent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:19,Integrability,depend,dependent,19,"/// Represents the dependent type named by a dependently-scoped; /// typename using declaration, e.g.; /// using typename Base<T>::foo;; ///; /// Template instantiation turns these into the underlying type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:45,Integrability,depend,dependently-scoped,45,"/// Represents the dependent type named by a dependently-scoped; /// typename using declaration, e.g.; /// using typename Base<T>::foo;; ///; /// Template instantiation turns these into the underlying type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:42,Integrability,depend,dependent,42,"/// Internal representation of canonical, dependent; /// `typeof(expr)` types.; ///; /// This class is used internally by the ASTContext to manage; /// canonical, dependent types, only. Clients will only see instances; /// of this class via TypeOfExprType nodes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:163,Integrability,depend,dependent,163,"/// Internal representation of canonical, dependent; /// `typeof(expr)` types.; ///; /// This class is used internally by the ASTContext to manage; /// canonical, dependent types, only. Clients will only see instances; /// of this class via TypeOfExprType nodes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:42,Integrability,depend,dependent,42,"/// Internal representation of canonical, dependent; /// decltype(expr) types.; ///; /// This class is used internally by the ASTContext to manage; /// canonical, dependent types, only. Clients will only see instances; /// of this class via DecltypeType nodes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:163,Integrability,depend,dependent,163,"/// Internal representation of canonical, dependent; /// decltype(expr) types.; ///; /// This class is used internally by the ASTContext to manage; /// canonical, dependent types, only. Clients will only see instances; /// of this class via DecltypeType nodes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:32,Integrability,depend,dependent,32,"/// The transformed type if not dependent, otherwise the same as BaseType.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:42,Integrability,depend,dependent,42,"/// Internal representation of canonical, dependent; /// __underlying_type(type) types.; ///; /// This class is used internally by the ASTContext to manage; /// canonical, dependent types, only. Clients will only see instances; /// of this class via UnaryTransformType nodes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:172,Integrability,depend,dependent,172,"/// Internal representation of canonical, dependent; /// __underlying_type(type) types.; ///; /// This class is used internally by the ASTContext to manage; /// canonical, dependent types, only. Clients will only see instances; /// of this class via UnaryTransformType nodes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:67,Safety,detect,detect,67,/// A helper class that allows the use of isa/cast/dyncast; /// to detect TagType objects of structs/unions/classes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:67,Safety,detect,detect,67,/// A helper class that allows the use of isa/cast/dyncast; /// to detect TagType objects of enums.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:432,Modifiability,rewrite,rewrite,432,"/// Does this attribute behave like a type qualifier?; ///; /// A type qualifier adjusts a type to provide specialized rules for; /// a specific object, like the standard const and volatile qualifiers.; /// This includes attributes controlling things like nullability,; /// address spaces, and ARC ownership. The value of the object is still; /// largely described by the modified type.; ///; /// In contrast, many type attributes ""rewrite"" their modified type to; /// produce a fundamentally different type, not necessarily related in any; /// formalizable way to the original type. For example, calling convention; /// and vector attributes are not simple type qualifiers.; ///; /// Type qualifiers are often, but not always, reflected in the canonical; /// type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:651,Usability,simpl,simple,651,"/// Does this attribute behave like a type qualifier?; ///; /// A type qualifier adjusts a type to provide specialized rules for; /// a specific object, like the standard const and volatile qualifiers.; /// This includes attributes controlling things like nullability,; /// address spaces, and ARC ownership. The value of the object is still; /// largely described by the modified type.; ///; /// In contrast, many type attributes ""rewrite"" their modified type to; /// produce a fundamentally different type, not necessarily related in any; /// formalizable way to the original type. For example, calling convention; /// and vector attributes are not simple type qualifiers.; ///; /// Type qualifiers are often, but not always, reflected in the canonical; /// type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:532,Performance,perform,performing,532,"/// Represents the result of substituting a set of types for a template; /// type parameter pack.; ///; /// When a pack expansion in the source code contains multiple parameter packs; /// and those parameter packs correspond to different levels of template; /// parameter lists, this type node is used to represent a template type; /// parameter pack from an outer level, which has already had its argument pack; /// substituted but that still lives within a pack expansion that itself; /// could not be instantiated. When actually performing a substitution into; /// that pack expansion (e.g., when all template parameters have corresponding; /// arguments), this type will be replaced with the \c SubstTemplateTypeParmType; /// at the current pack substitution index.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:369,Integrability,depend,dependent,369,"/// Common base class for placeholders for types that get replaced by; /// placeholder type deduction: C++11 auto, C++14 decltype(auto), C++17 deduced; /// class template types, and constrained type names.; ///; /// These types are usually a placeholder for a deduced type. However, before; /// the initializer is attached, or (usually) if the initializer is; /// type-dependent, there is no deduced type and the type is canonical. In; /// the latter case, it is also a dependent type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:470,Integrability,depend,dependent,470,"/// Common base class for placeholders for types that get replaced by; /// placeholder type deduction: C++11 auto, C++14 decltype(auto), C++17 deduced; /// class template types, and constrained type names.; ///; /// These types are usually a placeholder for a deduced type. However, before; /// the initializer is attached, or (usually) if the initializer is; /// type-dependent, there is no deduced type and the type is canonical. In; /// the latter case, it is also a dependent type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:839,Energy Efficiency,allocate,allocated,839,"/// Represents a type template specialization; the template; /// must be a class template, a type alias template, or a template; /// template parameter. A template which cannot be resolved to one of; /// these, e.g. because it is written with a dependent scope; /// specifier, is instead represented as a; /// @c DependentTemplateSpecializationType.; ///; /// A non-dependent template specialization type is always ""sugar"",; /// typically for a \c RecordType. For example, a class template; /// specialization type of \c vector<int> will refer to a tag type for; /// the instantiation \c std::vector<int, std::allocator<int>>; ///; /// Template specializations are dependent if either the template or; /// any of the template arguments are dependent, in which case the; /// type may also be canonical.; ///; /// Instances of this type are allocated with a trailing array of; /// TemplateArguments, followed by a QualType representing the; /// non-canonical aliased type when the template is a type alias; /// template.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:245,Integrability,depend,dependent,245,"/// Represents a type template specialization; the template; /// must be a class template, a type alias template, or a template; /// template parameter. A template which cannot be resolved to one of; /// these, e.g. because it is written with a dependent scope; /// specifier, is instead represented as a; /// @c DependentTemplateSpecializationType.; ///; /// A non-dependent template specialization type is always ""sugar"",; /// typically for a \c RecordType. For example, a class template; /// specialization type of \c vector<int> will refer to a tag type for; /// the instantiation \c std::vector<int, std::allocator<int>>; ///; /// Template specializations are dependent if either the template or; /// any of the template arguments are dependent, in which case the; /// type may also be canonical.; ///; /// Instances of this type are allocated with a trailing array of; /// TemplateArguments, followed by a QualType representing the; /// non-canonical aliased type when the template is a type alias; /// template.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:313,Integrability,Depend,DependentTemplateSpecializationType,313,"/// Represents a type template specialization; the template; /// must be a class template, a type alias template, or a template; /// template parameter. A template which cannot be resolved to one of; /// these, e.g. because it is written with a dependent scope; /// specifier, is instead represented as a; /// @c DependentTemplateSpecializationType.; ///; /// A non-dependent template specialization type is always ""sugar"",; /// typically for a \c RecordType. For example, a class template; /// specialization type of \c vector<int> will refer to a tag type for; /// the instantiation \c std::vector<int, std::allocator<int>>; ///; /// Template specializations are dependent if either the template or; /// any of the template arguments are dependent, in which case the; /// type may also be canonical.; ///; /// Instances of this type are allocated with a trailing array of; /// TemplateArguments, followed by a QualType representing the; /// non-canonical aliased type when the template is a type alias; /// template.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:366,Integrability,depend,dependent,366,"/// Represents a type template specialization; the template; /// must be a class template, a type alias template, or a template; /// template parameter. A template which cannot be resolved to one of; /// these, e.g. because it is written with a dependent scope; /// specifier, is instead represented as a; /// @c DependentTemplateSpecializationType.; ///; /// A non-dependent template specialization type is always ""sugar"",; /// typically for a \c RecordType. For example, a class template; /// specialization type of \c vector<int> will refer to a tag type for; /// the instantiation \c std::vector<int, std::allocator<int>>; ///; /// Template specializations are dependent if either the template or; /// any of the template arguments are dependent, in which case the; /// type may also be canonical.; ///; /// Instances of this type are allocated with a trailing array of; /// TemplateArguments, followed by a QualType representing the; /// non-canonical aliased type when the template is a type alias; /// template.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:665,Integrability,depend,dependent,665,"/// Represents a type template specialization; the template; /// must be a class template, a type alias template, or a template; /// template parameter. A template which cannot be resolved to one of; /// these, e.g. because it is written with a dependent scope; /// specifier, is instead represented as a; /// @c DependentTemplateSpecializationType.; ///; /// A non-dependent template specialization type is always ""sugar"",; /// typically for a \c RecordType. For example, a class template; /// specialization type of \c vector<int> will refer to a tag type for; /// the instantiation \c std::vector<int, std::allocator<int>>; ///; /// Template specializations are dependent if either the template or; /// any of the template arguments are dependent, in which case the; /// type may also be canonical.; ///; /// Instances of this type are allocated with a trailing array of; /// TemplateArguments, followed by a QualType representing the; /// non-canonical aliased type when the template is a type alias; /// template.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:740,Integrability,depend,dependent,740,"/// Represents a type template specialization; the template; /// must be a class template, a type alias template, or a template; /// template parameter. A template which cannot be resolved to one of; /// these, e.g. because it is written with a dependent scope; /// specifier, is instead represented as a; /// @c DependentTemplateSpecializationType.; ///; /// A non-dependent template specialization type is always ""sugar"",; /// typically for a \c RecordType. For example, a class template; /// specialization type of \c vector<int> will refer to a tag type for; /// the instantiation \c std::vector<int, std::allocator<int>>; ///; /// Template specializations are dependent if either the template or; /// any of the template arguments are dependent, in which case the; /// type may also be canonical.; ///; /// Instances of this type are allocated with a trailing array of; /// TemplateArguments, followed by a QualType representing the; /// non-canonical aliased type when the template is a type alias; /// template.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:62,Integrability,depend,dependent,62,"/// Determine whether any of the given template arguments are dependent.; ///; /// The converted arguments should be supplied when known; whether an; /// argument is dependent can depend on the conversions performed on it; /// (for example, a 'const int' passed as a template argument might be; /// dependent if the parameter is a reference but non-dependent if the; /// parameter is an int).; ///; /// Note that the \p Args parameter is unused: this is intentional, to remind; /// the caller that they need to pass in the converted arguments, not the; /// specified arguments.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:166,Integrability,depend,dependent,166,"/// Determine whether any of the given template arguments are dependent.; ///; /// The converted arguments should be supplied when known; whether an; /// argument is dependent can depend on the conversions performed on it; /// (for example, a 'const int' passed as a template argument might be; /// dependent if the parameter is a reference but non-dependent if the; /// parameter is an int).; ///; /// Note that the \p Args parameter is unused: this is intentional, to remind; /// the caller that they need to pass in the converted arguments, not the; /// specified arguments.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:180,Integrability,depend,depend,180,"/// Determine whether any of the given template arguments are dependent.; ///; /// The converted arguments should be supplied when known; whether an; /// argument is dependent can depend on the conversions performed on it; /// (for example, a 'const int' passed as a template argument might be; /// dependent if the parameter is a reference but non-dependent if the; /// parameter is an int).; ///; /// Note that the \p Args parameter is unused: this is intentional, to remind; /// the caller that they need to pass in the converted arguments, not the; /// specified arguments.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:299,Integrability,depend,dependent,299,"/// Determine whether any of the given template arguments are dependent.; ///; /// The converted arguments should be supplied when known; whether an; /// argument is dependent can depend on the conversions performed on it; /// (for example, a 'const int' passed as a template argument might be; /// dependent if the parameter is a reference but non-dependent if the; /// parameter is an int).; ///; /// Note that the \p Args parameter is unused: this is intentional, to remind; /// the caller that they need to pass in the converted arguments, not the; /// specified arguments.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:349,Integrability,depend,dependent,349,"/// Determine whether any of the given template arguments are dependent.; ///; /// The converted arguments should be supplied when known; whether an; /// argument is dependent can depend on the conversions performed on it; /// (for example, a 'const int' passed as a template argument might be; /// dependent if the parameter is a reference but non-dependent if the; /// parameter is an int).; ///; /// Note that the \p Args parameter is unused: this is intentional, to remind; /// the caller that they need to pass in the converted arguments, not the; /// specified arguments.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:206,Performance,perform,performed,206,"/// Determine whether any of the given template arguments are dependent.; ///; /// The converted arguments should be supplied when known; whether an; /// argument is dependent can depend on the conversions performed on it; /// (for example, a 'const int' passed as a template argument might be; /// dependent if the parameter is a reference but non-dependent if the; /// parameter is an int).; ///; /// Note that the \p Args parameter is unused: this is intentional, to remind; /// the caller that they need to pass in the converted arguments, not the; /// specified arguments.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:8,Integrability,inject,injected,8,"/// The injected class name of a C++ class template or class; /// template partial specialization. Used to record that a type was; /// spelled with a bare identifier rather than as a template-id; the; /// equivalent for non-templated classes is just RecordType.; ///; /// Injected class name types are always dependent. Template; /// instantiation turns these into RecordTypes.; ///; /// Injected class name types are always canonical. This works; /// because it is impossible to compare an injected class name type; /// with the corresponding non-injected template type, for the same; /// reason that it is impossible to directly compare template; /// parameters from different dependent contexts: injected class name; /// types can only occur within the scope of a particular templated; /// declaration, and within that scope every template specialization; /// will canonicalize to the injected class name (when appropriate; /// according to the rules of the language).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:272,Integrability,Inject,Injected,272,"/// The injected class name of a C++ class template or class; /// template partial specialization. Used to record that a type was; /// spelled with a bare identifier rather than as a template-id; the; /// equivalent for non-templated classes is just RecordType.; ///; /// Injected class name types are always dependent. Template; /// instantiation turns these into RecordTypes.; ///; /// Injected class name types are always canonical. This works; /// because it is impossible to compare an injected class name type; /// with the corresponding non-injected template type, for the same; /// reason that it is impossible to directly compare template; /// parameters from different dependent contexts: injected class name; /// types can only occur within the scope of a particular templated; /// declaration, and within that scope every template specialization; /// will canonicalize to the injected class name (when appropriate; /// according to the rules of the language).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:309,Integrability,depend,dependent,309,"/// The injected class name of a C++ class template or class; /// template partial specialization. Used to record that a type was; /// spelled with a bare identifier rather than as a template-id; the; /// equivalent for non-templated classes is just RecordType.; ///; /// Injected class name types are always dependent. Template; /// instantiation turns these into RecordTypes.; ///; /// Injected class name types are always canonical. This works; /// because it is impossible to compare an injected class name type; /// with the corresponding non-injected template type, for the same; /// reason that it is impossible to directly compare template; /// parameters from different dependent contexts: injected class name; /// types can only occur within the scope of a particular templated; /// declaration, and within that scope every template specialization; /// will canonicalize to the injected class name (when appropriate; /// according to the rules of the language).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:388,Integrability,Inject,Injected,388,"/// The injected class name of a C++ class template or class; /// template partial specialization. Used to record that a type was; /// spelled with a bare identifier rather than as a template-id; the; /// equivalent for non-templated classes is just RecordType.; ///; /// Injected class name types are always dependent. Template; /// instantiation turns these into RecordTypes.; ///; /// Injected class name types are always canonical. This works; /// because it is impossible to compare an injected class name type; /// with the corresponding non-injected template type, for the same; /// reason that it is impossible to directly compare template; /// parameters from different dependent contexts: injected class name; /// types can only occur within the scope of a particular templated; /// declaration, and within that scope every template specialization; /// will canonicalize to the injected class name (when appropriate; /// according to the rules of the language).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:491,Integrability,inject,injected,491,"/// The injected class name of a C++ class template or class; /// template partial specialization. Used to record that a type was; /// spelled with a bare identifier rather than as a template-id; the; /// equivalent for non-templated classes is just RecordType.; ///; /// Injected class name types are always dependent. Template; /// instantiation turns these into RecordTypes.; ///; /// Injected class name types are always canonical. This works; /// because it is impossible to compare an injected class name type; /// with the corresponding non-injected template type, for the same; /// reason that it is impossible to directly compare template; /// parameters from different dependent contexts: injected class name; /// types can only occur within the scope of a particular templated; /// declaration, and within that scope every template specialization; /// will canonicalize to the injected class name (when appropriate; /// according to the rules of the language).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:548,Integrability,inject,injected,548,"/// The injected class name of a C++ class template or class; /// template partial specialization. Used to record that a type was; /// spelled with a bare identifier rather than as a template-id; the; /// equivalent for non-templated classes is just RecordType.; ///; /// Injected class name types are always dependent. Template; /// instantiation turns these into RecordTypes.; ///; /// Injected class name types are always canonical. This works; /// because it is impossible to compare an injected class name type; /// with the corresponding non-injected template type, for the same; /// reason that it is impossible to directly compare template; /// parameters from different dependent contexts: injected class name; /// types can only occur within the scope of a particular templated; /// declaration, and within that scope every template specialization; /// will canonicalize to the injected class name (when appropriate; /// according to the rules of the language).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:679,Integrability,depend,dependent,679,"/// The injected class name of a C++ class template or class; /// template partial specialization. Used to record that a type was; /// spelled with a bare identifier rather than as a template-id; the; /// equivalent for non-templated classes is just RecordType.; ///; /// Injected class name types are always dependent. Template; /// instantiation turns these into RecordTypes.; ///; /// Injected class name types are always canonical. This works; /// because it is impossible to compare an injected class name type; /// with the corresponding non-injected template type, for the same; /// reason that it is impossible to directly compare template; /// parameters from different dependent contexts: injected class name; /// types can only occur within the scope of a particular templated; /// declaration, and within that scope every template specialization; /// will canonicalize to the injected class name (when appropriate; /// according to the rules of the language).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:699,Integrability,inject,injected,699,"/// The injected class name of a C++ class template or class; /// template partial specialization. Used to record that a type was; /// spelled with a bare identifier rather than as a template-id; the; /// equivalent for non-templated classes is just RecordType.; ///; /// Injected class name types are always dependent. Template; /// instantiation turns these into RecordTypes.; ///; /// Injected class name types are always canonical. This works; /// because it is impossible to compare an injected class name type; /// with the corresponding non-injected template type, for the same; /// reason that it is impossible to directly compare template; /// parameters from different dependent contexts: injected class name; /// types can only occur within the scope of a particular templated; /// declaration, and within that scope every template specialization; /// will canonicalize to the injected class name (when appropriate; /// according to the rules of the language).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:888,Integrability,inject,injected,888,"/// The injected class name of a C++ class template or class; /// template partial specialization. Used to record that a type was; /// spelled with a bare identifier rather than as a template-id; the; /// equivalent for non-templated classes is just RecordType.; ///; /// Injected class name types are always dependent. Template; /// instantiation turns these into RecordTypes.; ///; /// Injected class name types are always canonical. This works; /// because it is impossible to compare an injected class name type; /// with the corresponding non-injected template type, for the same; /// reason that it is impossible to directly compare template; /// parameters from different dependent contexts: injected class name; /// types can only occur within the scope of a particular templated; /// declaration, and within that scope every template specialization; /// will canonicalize to the injected class name (when appropriate; /// according to the rules of the language).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:8,Security,inject,injected,8,"/// The injected class name of a C++ class template or class; /// template partial specialization. Used to record that a type was; /// spelled with a bare identifier rather than as a template-id; the; /// equivalent for non-templated classes is just RecordType.; ///; /// Injected class name types are always dependent. Template; /// instantiation turns these into RecordTypes.; ///; /// Injected class name types are always canonical. This works; /// because it is impossible to compare an injected class name type; /// with the corresponding non-injected template type, for the same; /// reason that it is impossible to directly compare template; /// parameters from different dependent contexts: injected class name; /// types can only occur within the scope of a particular templated; /// declaration, and within that scope every template specialization; /// will canonicalize to the injected class name (when appropriate; /// according to the rules of the language).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:272,Security,Inject,Injected,272,"/// The injected class name of a C++ class template or class; /// template partial specialization. Used to record that a type was; /// spelled with a bare identifier rather than as a template-id; the; /// equivalent for non-templated classes is just RecordType.; ///; /// Injected class name types are always dependent. Template; /// instantiation turns these into RecordTypes.; ///; /// Injected class name types are always canonical. This works; /// because it is impossible to compare an injected class name type; /// with the corresponding non-injected template type, for the same; /// reason that it is impossible to directly compare template; /// parameters from different dependent contexts: injected class name; /// types can only occur within the scope of a particular templated; /// declaration, and within that scope every template specialization; /// will canonicalize to the injected class name (when appropriate; /// according to the rules of the language).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:388,Security,Inject,Injected,388,"/// The injected class name of a C++ class template or class; /// template partial specialization. Used to record that a type was; /// spelled with a bare identifier rather than as a template-id; the; /// equivalent for non-templated classes is just RecordType.; ///; /// Injected class name types are always dependent. Template; /// instantiation turns these into RecordTypes.; ///; /// Injected class name types are always canonical. This works; /// because it is impossible to compare an injected class name type; /// with the corresponding non-injected template type, for the same; /// reason that it is impossible to directly compare template; /// parameters from different dependent contexts: injected class name; /// types can only occur within the scope of a particular templated; /// declaration, and within that scope every template specialization; /// will canonicalize to the injected class name (when appropriate; /// according to the rules of the language).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:491,Security,inject,injected,491,"/// The injected class name of a C++ class template or class; /// template partial specialization. Used to record that a type was; /// spelled with a bare identifier rather than as a template-id; the; /// equivalent for non-templated classes is just RecordType.; ///; /// Injected class name types are always dependent. Template; /// instantiation turns these into RecordTypes.; ///; /// Injected class name types are always canonical. This works; /// because it is impossible to compare an injected class name type; /// with the corresponding non-injected template type, for the same; /// reason that it is impossible to directly compare template; /// parameters from different dependent contexts: injected class name; /// types can only occur within the scope of a particular templated; /// declaration, and within that scope every template specialization; /// will canonicalize to the injected class name (when appropriate; /// according to the rules of the language).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:548,Security,inject,injected,548,"/// The injected class name of a C++ class template or class; /// template partial specialization. Used to record that a type was; /// spelled with a bare identifier rather than as a template-id; the; /// equivalent for non-templated classes is just RecordType.; ///; /// Injected class name types are always dependent. Template; /// instantiation turns these into RecordTypes.; ///; /// Injected class name types are always canonical. This works; /// because it is impossible to compare an injected class name type; /// with the corresponding non-injected template type, for the same; /// reason that it is impossible to directly compare template; /// parameters from different dependent contexts: injected class name; /// types can only occur within the scope of a particular templated; /// declaration, and within that scope every template specialization; /// will canonicalize to the injected class name (when appropriate; /// according to the rules of the language).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:699,Security,inject,injected,699,"/// The injected class name of a C++ class template or class; /// template partial specialization. Used to record that a type was; /// spelled with a bare identifier rather than as a template-id; the; /// equivalent for non-templated classes is just RecordType.; ///; /// Injected class name types are always dependent. Template; /// instantiation turns these into RecordTypes.; ///; /// Injected class name types are always canonical. This works; /// because it is impossible to compare an injected class name type; /// with the corresponding non-injected template type, for the same; /// reason that it is impossible to directly compare template; /// parameters from different dependent contexts: injected class name; /// types can only occur within the scope of a particular templated; /// declaration, and within that scope every template specialization; /// will canonicalize to the injected class name (when appropriate; /// according to the rules of the language).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:888,Security,inject,injected,888,"/// The injected class name of a C++ class template or class; /// template partial specialization. Used to record that a type was; /// spelled with a bare identifier rather than as a template-id; the; /// equivalent for non-templated classes is just RecordType.; ///; /// Injected class name types are always dependent. Template; /// instantiation turns these into RecordTypes.; ///; /// Injected class name types are always canonical. This works; /// because it is impossible to compare an injected class name type; /// with the corresponding non-injected template type, for the same; /// reason that it is impossible to directly compare template; /// parameters from different dependent contexts: injected class name; /// types can only occur within the scope of a particular templated; /// declaration, and within that scope every template specialization; /// will canonicalize to the injected class name (when appropriate; /// according to the rules of the language).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:327,Integrability,depend,dependent,327,"/// The template specialization which this type represents.; /// For example, in; /// template <class T> class A { ... };; /// this is A<T>, whereas in; /// template <class X, class Y> class A<B<X,Y> > { ... };; /// this is A<B<X,Y> >.; ///; /// It is always unqualified, always a template specialization type,; /// and always dependent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:82,Availability,error,error,82,/// Converts a type specifier (DeclSpec::TST) into a tag type kind.; /// It is an error to provide a type specifier which *isn't* a tag kind here.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:74,Availability,error,error,74,/// Converts an elaborated type keyword into a TagTypeKind.; /// It is an error to provide an elaborated type keyword; /// which *isn't* a tag kind here.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:146,Availability,error,error,146,// Any semantic dependence on the qualifier will have; // been incorporated into NamedType. We still need to; // track syntactic (instantiation / error / pack); // dependence on the qualifier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:16,Integrability,depend,dependence,16,// Any semantic dependence on the qualifier will have; // been incorporated into NamedType. We still need to; // track syntactic (instantiation / error / pack); // dependence on the qualifier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:164,Integrability,depend,dependence,164,// Any semantic dependence on the qualifier will have; // been incorporated into NamedType. We still need to; // track syntactic (instantiation / error / pack); // dependence on the qualifier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:69,Integrability,depend,dependent,69,"/// Represents a qualified type name for which the type name is; /// dependent.; ///; /// DependentNameType represents a class of dependent types that involve a; /// possibly dependent nested-name-specifier (e.g., ""T::"") followed by a; /// name of a type. The DependentNameType may start with a ""typename"" (for a; /// typename-specifier), ""class"", ""struct"", ""union"", or ""enum"" (for a; /// dependent elaborated-type-specifier), or nothing (in contexts where we; /// know that we must be referring to a type, e.g., in a base class specifier).; /// Typically the nested-name-specifier is dependent, but in MSVC compatibility; /// mode, this type is used with non-dependent names to delay name lookup until; /// instantiation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:90,Integrability,Depend,DependentNameType,90,"/// Represents a qualified type name for which the type name is; /// dependent.; ///; /// DependentNameType represents a class of dependent types that involve a; /// possibly dependent nested-name-specifier (e.g., ""T::"") followed by a; /// name of a type. The DependentNameType may start with a ""typename"" (for a; /// typename-specifier), ""class"", ""struct"", ""union"", or ""enum"" (for a; /// dependent elaborated-type-specifier), or nothing (in contexts where we; /// know that we must be referring to a type, e.g., in a base class specifier).; /// Typically the nested-name-specifier is dependent, but in MSVC compatibility; /// mode, this type is used with non-dependent names to delay name lookup until; /// instantiation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:130,Integrability,depend,dependent,130,"/// Represents a qualified type name for which the type name is; /// dependent.; ///; /// DependentNameType represents a class of dependent types that involve a; /// possibly dependent nested-name-specifier (e.g., ""T::"") followed by a; /// name of a type. The DependentNameType may start with a ""typename"" (for a; /// typename-specifier), ""class"", ""struct"", ""union"", or ""enum"" (for a; /// dependent elaborated-type-specifier), or nothing (in contexts where we; /// know that we must be referring to a type, e.g., in a base class specifier).; /// Typically the nested-name-specifier is dependent, but in MSVC compatibility; /// mode, this type is used with non-dependent names to delay name lookup until; /// instantiation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:175,Integrability,depend,dependent,175,"/// Represents a qualified type name for which the type name is; /// dependent.; ///; /// DependentNameType represents a class of dependent types that involve a; /// possibly dependent nested-name-specifier (e.g., ""T::"") followed by a; /// name of a type. The DependentNameType may start with a ""typename"" (for a; /// typename-specifier), ""class"", ""struct"", ""union"", or ""enum"" (for a; /// dependent elaborated-type-specifier), or nothing (in contexts where we; /// know that we must be referring to a type, e.g., in a base class specifier).; /// Typically the nested-name-specifier is dependent, but in MSVC compatibility; /// mode, this type is used with non-dependent names to delay name lookup until; /// instantiation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:260,Integrability,Depend,DependentNameType,260,"/// Represents a qualified type name for which the type name is; /// dependent.; ///; /// DependentNameType represents a class of dependent types that involve a; /// possibly dependent nested-name-specifier (e.g., ""T::"") followed by a; /// name of a type. The DependentNameType may start with a ""typename"" (for a; /// typename-specifier), ""class"", ""struct"", ""union"", or ""enum"" (for a; /// dependent elaborated-type-specifier), or nothing (in contexts where we; /// know that we must be referring to a type, e.g., in a base class specifier).; /// Typically the nested-name-specifier is dependent, but in MSVC compatibility; /// mode, this type is used with non-dependent names to delay name lookup until; /// instantiation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:389,Integrability,depend,dependent,389,"/// Represents a qualified type name for which the type name is; /// dependent.; ///; /// DependentNameType represents a class of dependent types that involve a; /// possibly dependent nested-name-specifier (e.g., ""T::"") followed by a; /// name of a type. The DependentNameType may start with a ""typename"" (for a; /// typename-specifier), ""class"", ""struct"", ""union"", or ""enum"" (for a; /// dependent elaborated-type-specifier), or nothing (in contexts where we; /// know that we must be referring to a type, e.g., in a base class specifier).; /// Typically the nested-name-specifier is dependent, but in MSVC compatibility; /// mode, this type is used with non-dependent names to delay name lookup until; /// instantiation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:585,Integrability,depend,dependent,585,"/// Represents a qualified type name for which the type name is; /// dependent.; ///; /// DependentNameType represents a class of dependent types that involve a; /// possibly dependent nested-name-specifier (e.g., ""T::"") followed by a; /// name of a type. The DependentNameType may start with a ""typename"" (for a; /// typename-specifier), ""class"", ""struct"", ""union"", or ""enum"" (for a; /// dependent elaborated-type-specifier), or nothing (in contexts where we; /// know that we must be referring to a type, e.g., in a base class specifier).; /// Typically the nested-name-specifier is dependent, but in MSVC compatibility; /// mode, this type is used with non-dependent names to delay name lookup until; /// instantiation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:660,Integrability,depend,dependent,660,"/// Represents a qualified type name for which the type name is; /// dependent.; ///; /// DependentNameType represents a class of dependent types that involve a; /// possibly dependent nested-name-specifier (e.g., ""T::"") followed by a; /// name of a type. The DependentNameType may start with a ""typename"" (for a; /// typename-specifier), ""class"", ""struct"", ""union"", or ""enum"" (for a; /// dependent elaborated-type-specifier), or nothing (in contexts where we; /// know that we must be referring to a type, e.g., in a base class specifier).; /// Typically the nested-name-specifier is dependent, but in MSVC compatibility; /// mode, this type is used with non-dependent names to delay name lookup until; /// instantiation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:87,Integrability,rout,routine,87,"/// Retrieve the type named by the typename specifier as an identifier.; ///; /// This routine will return a non-NULL identifier pointer when the; /// form of the original typename was terminated by an identifier,; /// e.g., ""typename T::type"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:15,Integrability,wrap,wraps,15,"/// This class wraps the list of protocol qualifiers. For types that can; /// take ObjC protocol qualifers, they can subclass this class.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:33,Integrability,protocol,protocol,33,"/// This class wraps the list of protocol qualifiers. For types that can; /// take ObjC protocol qualifers, they can subclass this class.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:88,Integrability,protocol,protocol,88,"/// This class wraps the list of protocol qualifiers. For types that can; /// take ObjC protocol qualifers, they can subclass this class.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:36,Integrability,protocol,protocols,36,"/// Return the number of qualifying protocols in this type, or 0 if; /// there are none.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:12,Integrability,protocol,protocol,12,/// Fetch a protocol by index.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:24,Integrability,protocol,protocol,24,/// Retrieve all of the protocol qualifiers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:80,Integrability,protocol,protocols,80,/// Represents a type parameter type in Objective C. It can take; /// a list of protocols.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:18,Integrability,protocol,protocols,18,/// The number of protocols stored on this type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:8,Integrability,protocol,protocols,8,"/// The protocols are stored after the ObjCTypeParamType node. In the; /// canonical type, the list of protocols are sorted alphabetically; /// and uniqued.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:103,Integrability,protocol,protocols,103,"/// The protocols are stored after the ObjCTypeParamType node. In the; /// canonical type, the list of protocols are sorted alphabetically; /// and uniqued.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:36,Integrability,protocol,protocols,36,"/// Return the number of qualifying protocols in this interface type,; /// or 0 if there are none.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:54,Integrability,interface,interface,54,"/// Return the number of qualifying protocols in this interface type,; /// or 0 if there are none.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:196,Integrability,protocol,protocols,196,"/// Represents a class type in Objective C.; ///; /// Every Objective C type is a combination of a base type, a set of; /// type arguments (optional, for parameterized classes) and a list of; /// protocols.; ///; /// Given the following declarations:; /// \code; /// \@class C<T>;; /// \@protocol P;; /// \endcode; ///; /// 'C' is an ObjCInterfaceType C. It is sugar for an ObjCObjectType; /// with base C and no protocols.; ///; /// 'C<P>' is an unspecialized ObjCObjectType with base C and protocol list [P].; /// 'C<C*>' is a specialized ObjCObjectType with type arguments 'C*' and no; /// protocol list.; /// 'C<C*><P>' is a specialized ObjCObjectType with base C, type arguments 'C*',; /// and protocol list [P].; ///; /// 'id' is a TypedefType which is sugar for an ObjCObjectPointerType whose; /// pointee is an ObjCObjectType with base BuiltinType::ObjCIdType; /// and no protocols.; ///; /// 'id<P>' is an ObjCObjectPointerType whose pointee is an ObjCObjectType; /// with base BuiltinType::ObjCIdType and protocol list [P]. Eventually; /// this should get its own sugar class to better represent the source.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:288,Integrability,protocol,protocol,288,"/// Represents a class type in Objective C.; ///; /// Every Objective C type is a combination of a base type, a set of; /// type arguments (optional, for parameterized classes) and a list of; /// protocols.; ///; /// Given the following declarations:; /// \code; /// \@class C<T>;; /// \@protocol P;; /// \endcode; ///; /// 'C' is an ObjCInterfaceType C. It is sugar for an ObjCObjectType; /// with base C and no protocols.; ///; /// 'C<P>' is an unspecialized ObjCObjectType with base C and protocol list [P].; /// 'C<C*>' is a specialized ObjCObjectType with type arguments 'C*' and no; /// protocol list.; /// 'C<C*><P>' is a specialized ObjCObjectType with base C, type arguments 'C*',; /// and protocol list [P].; ///; /// 'id' is a TypedefType which is sugar for an ObjCObjectPointerType whose; /// pointee is an ObjCObjectType with base BuiltinType::ObjCIdType; /// and no protocols.; ///; /// 'id<P>' is an ObjCObjectPointerType whose pointee is an ObjCObjectType; /// with base BuiltinType::ObjCIdType and protocol list [P]. Eventually; /// this should get its own sugar class to better represent the source.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:413,Integrability,protocol,protocols,413,"/// Represents a class type in Objective C.; ///; /// Every Objective C type is a combination of a base type, a set of; /// type arguments (optional, for parameterized classes) and a list of; /// protocols.; ///; /// Given the following declarations:; /// \code; /// \@class C<T>;; /// \@protocol P;; /// \endcode; ///; /// 'C' is an ObjCInterfaceType C. It is sugar for an ObjCObjectType; /// with base C and no protocols.; ///; /// 'C<P>' is an unspecialized ObjCObjectType with base C and protocol list [P].; /// 'C<C*>' is a specialized ObjCObjectType with type arguments 'C*' and no; /// protocol list.; /// 'C<C*><P>' is a specialized ObjCObjectType with base C, type arguments 'C*',; /// and protocol list [P].; ///; /// 'id' is a TypedefType which is sugar for an ObjCObjectPointerType whose; /// pointee is an ObjCObjectType with base BuiltinType::ObjCIdType; /// and no protocols.; ///; /// 'id<P>' is an ObjCObjectPointerType whose pointee is an ObjCObjectType; /// with base BuiltinType::ObjCIdType and protocol list [P]. Eventually; /// this should get its own sugar class to better represent the source.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:492,Integrability,protocol,protocol,492,"/// Represents a class type in Objective C.; ///; /// Every Objective C type is a combination of a base type, a set of; /// type arguments (optional, for parameterized classes) and a list of; /// protocols.; ///; /// Given the following declarations:; /// \code; /// \@class C<T>;; /// \@protocol P;; /// \endcode; ///; /// 'C' is an ObjCInterfaceType C. It is sugar for an ObjCObjectType; /// with base C and no protocols.; ///; /// 'C<P>' is an unspecialized ObjCObjectType with base C and protocol list [P].; /// 'C<C*>' is a specialized ObjCObjectType with type arguments 'C*' and no; /// protocol list.; /// 'C<C*><P>' is a specialized ObjCObjectType with base C, type arguments 'C*',; /// and protocol list [P].; ///; /// 'id' is a TypedefType which is sugar for an ObjCObjectPointerType whose; /// pointee is an ObjCObjectType with base BuiltinType::ObjCIdType; /// and no protocols.; ///; /// 'id<P>' is an ObjCObjectPointerType whose pointee is an ObjCObjectType; /// with base BuiltinType::ObjCIdType and protocol list [P]. Eventually; /// this should get its own sugar class to better represent the source.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:593,Integrability,protocol,protocol,593,"/// Represents a class type in Objective C.; ///; /// Every Objective C type is a combination of a base type, a set of; /// type arguments (optional, for parameterized classes) and a list of; /// protocols.; ///; /// Given the following declarations:; /// \code; /// \@class C<T>;; /// \@protocol P;; /// \endcode; ///; /// 'C' is an ObjCInterfaceType C. It is sugar for an ObjCObjectType; /// with base C and no protocols.; ///; /// 'C<P>' is an unspecialized ObjCObjectType with base C and protocol list [P].; /// 'C<C*>' is a specialized ObjCObjectType with type arguments 'C*' and no; /// protocol list.; /// 'C<C*><P>' is a specialized ObjCObjectType with base C, type arguments 'C*',; /// and protocol list [P].; ///; /// 'id' is a TypedefType which is sugar for an ObjCObjectPointerType whose; /// pointee is an ObjCObjectType with base BuiltinType::ObjCIdType; /// and no protocols.; ///; /// 'id<P>' is an ObjCObjectPointerType whose pointee is an ObjCObjectType; /// with base BuiltinType::ObjCIdType and protocol list [P]. Eventually; /// this should get its own sugar class to better represent the source.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:699,Integrability,protocol,protocol,699,"/// Represents a class type in Objective C.; ///; /// Every Objective C type is a combination of a base type, a set of; /// type arguments (optional, for parameterized classes) and a list of; /// protocols.; ///; /// Given the following declarations:; /// \code; /// \@class C<T>;; /// \@protocol P;; /// \endcode; ///; /// 'C' is an ObjCInterfaceType C. It is sugar for an ObjCObjectType; /// with base C and no protocols.; ///; /// 'C<P>' is an unspecialized ObjCObjectType with base C and protocol list [P].; /// 'C<C*>' is a specialized ObjCObjectType with type arguments 'C*' and no; /// protocol list.; /// 'C<C*><P>' is a specialized ObjCObjectType with base C, type arguments 'C*',; /// and protocol list [P].; ///; /// 'id' is a TypedefType which is sugar for an ObjCObjectPointerType whose; /// pointee is an ObjCObjectType with base BuiltinType::ObjCIdType; /// and no protocols.; ///; /// 'id<P>' is an ObjCObjectPointerType whose pointee is an ObjCObjectType; /// with base BuiltinType::ObjCIdType and protocol list [P]. Eventually; /// this should get its own sugar class to better represent the source.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:880,Integrability,protocol,protocols,880,"/// Represents a class type in Objective C.; ///; /// Every Objective C type is a combination of a base type, a set of; /// type arguments (optional, for parameterized classes) and a list of; /// protocols.; ///; /// Given the following declarations:; /// \code; /// \@class C<T>;; /// \@protocol P;; /// \endcode; ///; /// 'C' is an ObjCInterfaceType C. It is sugar for an ObjCObjectType; /// with base C and no protocols.; ///; /// 'C<P>' is an unspecialized ObjCObjectType with base C and protocol list [P].; /// 'C<C*>' is a specialized ObjCObjectType with type arguments 'C*' and no; /// protocol list.; /// 'C<C*><P>' is a specialized ObjCObjectType with base C, type arguments 'C*',; /// and protocol list [P].; ///; /// 'id' is a TypedefType which is sugar for an ObjCObjectPointerType whose; /// pointee is an ObjCObjectType with base BuiltinType::ObjCIdType; /// and no protocols.; ///; /// 'id<P>' is an ObjCObjectPointerType whose pointee is an ObjCObjectType; /// with base BuiltinType::ObjCIdType and protocol list [P]. Eventually; /// this should get its own sugar class to better represent the source.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:1015,Integrability,protocol,protocol,1015,"/// Represents a class type in Objective C.; ///; /// Every Objective C type is a combination of a base type, a set of; /// type arguments (optional, for parameterized classes) and a list of; /// protocols.; ///; /// Given the following declarations:; /// \code; /// \@class C<T>;; /// \@protocol P;; /// \endcode; ///; /// 'C' is an ObjCInterfaceType C. It is sugar for an ObjCObjectType; /// with base C and no protocols.; ///; /// 'C<P>' is an unspecialized ObjCObjectType with base C and protocol list [P].; /// 'C<C*>' is a specialized ObjCObjectType with type arguments 'C*' and no; /// protocol list.; /// 'C<C*><P>' is a specialized ObjCObjectType with base C, type arguments 'C*',; /// and protocol list [P].; ///; /// 'id' is a TypedefType which is sugar for an ObjCObjectPointerType whose; /// pointee is an ObjCObjectType with base BuiltinType::ObjCIdType; /// and no protocols.; ///; /// 'id<P>' is an ObjCObjectPointerType whose pointee is an ObjCObjectType; /// with base BuiltinType::ObjCIdType and protocol list [P]. Eventually; /// this should get its own sugar class to better represent the source.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:154,Modifiability,parameteriz,parameterized,154,"/// Represents a class type in Objective C.; ///; /// Every Objective C type is a combination of a base type, a set of; /// type arguments (optional, for parameterized classes) and a list of; /// protocols.; ///; /// Given the following declarations:; /// \code; /// \@class C<T>;; /// \@protocol P;; /// \endcode; ///; /// 'C' is an ObjCInterfaceType C. It is sugar for an ObjCObjectType; /// with base C and no protocols.; ///; /// 'C<P>' is an unspecialized ObjCObjectType with base C and protocol list [P].; /// 'C<C*>' is a specialized ObjCObjectType with type arguments 'C*' and no; /// protocol list.; /// 'C<C*><P>' is a specialized ObjCObjectType with base C, type arguments 'C*',; /// and protocol list [P].; ///; /// 'id' is a TypedefType which is sugar for an ObjCObjectPointerType whose; /// pointee is an ObjCObjectType with base BuiltinType::ObjCIdType; /// and no protocols.; ///; /// 'id<P>' is an ObjCObjectPointerType whose pointee is an ObjCObjectType; /// with base BuiltinType::ObjCIdType and protocol list [P]. Eventually; /// this should get its own sugar class to better represent the source.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:158,Integrability,protocol,protocols,158,"// ObjCObjectType.NumTypeArgs - the number of type arguments stored; // after the ObjCObjectPointerType node.; // ObjCObjectType.NumProtocols - the number of protocols stored; // after the type arguments of ObjCObjectPointerType node.; //; // These protocols are those written directly on the type. If; // protocol qualifiers ever become additive, the iterators will need; // to get kindof complicated.; //; // In the canonical object type, these are sorted alphabetically; // and uniqued.; /// Either a BuiltinType or an InterfaceType or sugar for either.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:249,Integrability,protocol,protocols,249,"// ObjCObjectType.NumTypeArgs - the number of type arguments stored; // after the ObjCObjectPointerType node.; // ObjCObjectType.NumProtocols - the number of protocols stored; // after the type arguments of ObjCObjectPointerType node.; //; // These protocols are those written directly on the type. If; // protocol qualifiers ever become additive, the iterators will need; // to get kindof complicated.; //; // In the canonical object type, these are sorted alphabetically; // and uniqued.; /// Either a BuiltinType or an InterfaceType or sugar for either.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:306,Integrability,protocol,protocol,306,"// ObjCObjectType.NumTypeArgs - the number of type arguments stored; // after the ObjCObjectPointerType node.; // ObjCObjectType.NumProtocols - the number of protocols stored; // after the type arguments of ObjCObjectPointerType node.; //; // These protocols are those written directly on the type. If; // protocol qualifiers ever become additive, the iterators will need; // to get kindof complicated.; //; // In the canonical object type, these are sorted alphabetically; // and uniqued.; /// Either a BuiltinType or an InterfaceType or sugar for either.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:522,Integrability,Interface,InterfaceType,522,"// ObjCObjectType.NumTypeArgs - the number of type arguments stored; // after the ObjCObjectPointerType node.; // ObjCObjectType.NumProtocols - the number of protocols stored; // after the type arguments of ObjCObjectPointerType node.; //; // These protocols are those written directly on the type. If; // protocol qualifiers ever become additive, the iterators will need; // to get kindof complicated.; //; // In the canonical object type, these are sorted alphabetically; // and uniqued.; /// Either a BuiltinType or an InterfaceType or sugar for either.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:4,Performance,Cache,Cached,4,/// Cached superclass type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:36,Integrability,protocol,protocols,36,"/// Return the number of qualifying protocols in this interface type,; /// or 0 if there are none.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:54,Integrability,interface,interface,54,"/// Return the number of qualifying protocols in this interface type,; /// or 0 if there are none.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:13,Integrability,interface,interface,13,"/// Gets the interface declaration for this object type, if the base type; /// really is an interface.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:92,Integrability,interface,interface,92,"/// Gets the interface declaration for this object type, if the base type; /// really is an interface.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:67,Integrability,protocol,protocol,67,"/// Strip off the Objective-C ""kindof"" type and (with it) any; /// protocol qualifiers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:4,Integrability,Interface,Interfaces,4,"/// Interfaces are the core concept in Objective-C for object oriented design.; /// They basically correspond to C++ classes. There are two kinds of interface; /// types: normal interfaces like `NSString`, and qualified interfaces, which; /// are qualified with a protocol list like `NSString<NSCopyable, NSAmazing>`.; ///; /// ObjCInterfaceType guarantees the following properties when considered; /// as a subtype of its superclass, ObjCObjectType:; /// - There are no protocol qualifiers. To reinforce this, code which; /// tries to invoke the protocol methods via an ObjCInterfaceType will; /// fail to compile.; /// - It is its own base type. That is, if T is an ObjCInterfaceType*,; /// T->getBaseType() == QualType(T, 0).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:149,Integrability,interface,interface,149,"/// Interfaces are the core concept in Objective-C for object oriented design.; /// They basically correspond to C++ classes. There are two kinds of interface; /// types: normal interfaces like `NSString`, and qualified interfaces, which; /// are qualified with a protocol list like `NSString<NSCopyable, NSAmazing>`.; ///; /// ObjCInterfaceType guarantees the following properties when considered; /// as a subtype of its superclass, ObjCObjectType:; /// - There are no protocol qualifiers. To reinforce this, code which; /// tries to invoke the protocol methods via an ObjCInterfaceType will; /// fail to compile.; /// - It is its own base type. That is, if T is an ObjCInterfaceType*,; /// T->getBaseType() == QualType(T, 0).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:178,Integrability,interface,interfaces,178,"/// Interfaces are the core concept in Objective-C for object oriented design.; /// They basically correspond to C++ classes. There are two kinds of interface; /// types: normal interfaces like `NSString`, and qualified interfaces, which; /// are qualified with a protocol list like `NSString<NSCopyable, NSAmazing>`.; ///; /// ObjCInterfaceType guarantees the following properties when considered; /// as a subtype of its superclass, ObjCObjectType:; /// - There are no protocol qualifiers. To reinforce this, code which; /// tries to invoke the protocol methods via an ObjCInterfaceType will; /// fail to compile.; /// - It is its own base type. That is, if T is an ObjCInterfaceType*,; /// T->getBaseType() == QualType(T, 0).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:220,Integrability,interface,interfaces,220,"/// Interfaces are the core concept in Objective-C for object oriented design.; /// They basically correspond to C++ classes. There are two kinds of interface; /// types: normal interfaces like `NSString`, and qualified interfaces, which; /// are qualified with a protocol list like `NSString<NSCopyable, NSAmazing>`.; ///; /// ObjCInterfaceType guarantees the following properties when considered; /// as a subtype of its superclass, ObjCObjectType:; /// - There are no protocol qualifiers. To reinforce this, code which; /// tries to invoke the protocol methods via an ObjCInterfaceType will; /// fail to compile.; /// - It is its own base type. That is, if T is an ObjCInterfaceType*,; /// T->getBaseType() == QualType(T, 0).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:264,Integrability,protocol,protocol,264,"/// Interfaces are the core concept in Objective-C for object oriented design.; /// They basically correspond to C++ classes. There are two kinds of interface; /// types: normal interfaces like `NSString`, and qualified interfaces, which; /// are qualified with a protocol list like `NSString<NSCopyable, NSAmazing>`.; ///; /// ObjCInterfaceType guarantees the following properties when considered; /// as a subtype of its superclass, ObjCObjectType:; /// - There are no protocol qualifiers. To reinforce this, code which; /// tries to invoke the protocol methods via an ObjCInterfaceType will; /// fail to compile.; /// - It is its own base type. That is, if T is an ObjCInterfaceType*,; /// T->getBaseType() == QualType(T, 0).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:471,Integrability,protocol,protocol,471,"/// Interfaces are the core concept in Objective-C for object oriented design.; /// They basically correspond to C++ classes. There are two kinds of interface; /// types: normal interfaces like `NSString`, and qualified interfaces, which; /// are qualified with a protocol list like `NSString<NSCopyable, NSAmazing>`.; ///; /// ObjCInterfaceType guarantees the following properties when considered; /// as a subtype of its superclass, ObjCObjectType:; /// - There are no protocol qualifiers. To reinforce this, code which; /// tries to invoke the protocol methods via an ObjCInterfaceType will; /// fail to compile.; /// - It is its own base type. That is, if T is an ObjCInterfaceType*,; /// T->getBaseType() == QualType(T, 0).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:547,Integrability,protocol,protocol,547,"/// Interfaces are the core concept in Objective-C for object oriented design.; /// They basically correspond to C++ classes. There are two kinds of interface; /// types: normal interfaces like `NSString`, and qualified interfaces, which; /// are qualified with a protocol list like `NSString<NSCopyable, NSAmazing>`.; ///; /// ObjCInterfaceType guarantees the following properties when considered; /// as a subtype of its superclass, ObjCObjectType:; /// - There are no protocol qualifiers. To reinforce this, code which; /// tries to invoke the protocol methods via an ObjCInterfaceType will; /// fail to compile.; /// - It is its own base type. That is, if T is an ObjCInterfaceType*,; /// T->getBaseType() == QualType(T, 0).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:32,Integrability,interface,interface,32,/// Get the declaration of this interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:97,Integrability,protocol,protocols,97,"// Nonsense to ""hide"" certain members of ObjCObjectType within this; // class. People asking for protocols on an ObjCInterfaceType are; // not going to get what they want: ObjCInterfaceTypes are; // guaranteed to have no protocols.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:221,Integrability,protocol,protocols,221,"// Nonsense to ""hide"" certain members of ObjCObjectType within this; // class. People asking for protocols on an ObjCInterfaceType are; // not going to get what they want: ObjCInterfaceTypes are; // guaranteed to have no protocols.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:253,Integrability,protocol,protocol-qualified,253,"/// Represents a pointer to an Objective C object.; ///; /// These are constructed from pointer declarators when the pointee type is; /// an ObjCObjectType (or sugar for one). In addition, the 'id' and 'Class'; /// types are typedefs for these, and the protocol-qualified types 'id<P>'; /// and 'Class<P>' are translated into these.; ///; /// Pointers to pointers to Objective C objects are still PointerTypes;; /// only the first level of pointer gets it own type implementation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:284,Integrability,protocol,protocol,284,"/// Gets the type pointed to by this ObjC pointer. Always returns non-null.; ///; /// This method is equivalent to getPointeeType() except that; /// it discards any typedefs (or other sugar) between this; /// type and the ""outermost"" object type. So for:; /// \code; /// \@class A; \@protocol P; \@protocol Q;; /// typedef A<P> AP;; /// typedef A A1;; /// typedef A1<P> A1P;; /// typedef A1P<Q> A1PQ;; /// \endcode; /// For 'A*', getObjectType() will return 'A'.; /// For 'A<P>*', getObjectType() will return 'A<P>'.; /// For 'AP*', getObjectType() will return 'A<P>'.; /// For 'A1*', getObjectType() will return 'A'.; /// For 'A1<P>*', getObjectType() will return 'A1<P>'.; /// For 'A1P*', getObjectType() will return 'A1<P>'.; /// For 'A1PQ*', getObjectType() will return 'A1<Q>', because; /// adding protocols to a protocol-qualified base discards the; /// old qualifiers (for now). But if it didn't, getObjectType(); /// would return 'A1P<Q>' (and we'd have to make iterating over; /// qualifiers more complicated).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:298,Integrability,protocol,protocol,298,"/// Gets the type pointed to by this ObjC pointer. Always returns non-null.; ///; /// This method is equivalent to getPointeeType() except that; /// it discards any typedefs (or other sugar) between this; /// type and the ""outermost"" object type. So for:; /// \code; /// \@class A; \@protocol P; \@protocol Q;; /// typedef A<P> AP;; /// typedef A A1;; /// typedef A1<P> A1P;; /// typedef A1P<Q> A1PQ;; /// \endcode; /// For 'A*', getObjectType() will return 'A'.; /// For 'A<P>*', getObjectType() will return 'A<P>'.; /// For 'AP*', getObjectType() will return 'A<P>'.; /// For 'A1*', getObjectType() will return 'A'.; /// For 'A1<P>*', getObjectType() will return 'A1<P>'.; /// For 'A1P*', getObjectType() will return 'A1<P>'.; /// For 'A1PQ*', getObjectType() will return 'A1<Q>', because; /// adding protocols to a protocol-qualified base discards the; /// old qualifiers (for now). But if it didn't, getObjectType(); /// would return 'A1P<Q>' (and we'd have to make iterating over; /// qualifiers more complicated).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:803,Integrability,protocol,protocols,803,"/// Gets the type pointed to by this ObjC pointer. Always returns non-null.; ///; /// This method is equivalent to getPointeeType() except that; /// it discards any typedefs (or other sugar) between this; /// type and the ""outermost"" object type. So for:; /// \code; /// \@class A; \@protocol P; \@protocol Q;; /// typedef A<P> AP;; /// typedef A A1;; /// typedef A1<P> A1P;; /// typedef A1P<Q> A1PQ;; /// \endcode; /// For 'A*', getObjectType() will return 'A'.; /// For 'A<P>*', getObjectType() will return 'A<P>'.; /// For 'AP*', getObjectType() will return 'A<P>'.; /// For 'A1*', getObjectType() will return 'A'.; /// For 'A1<P>*', getObjectType() will return 'A1<P>'.; /// For 'A1P*', getObjectType() will return 'A1<P>'.; /// For 'A1PQ*', getObjectType() will return 'A1<Q>', because; /// adding protocols to a protocol-qualified base discards the; /// old qualifiers (for now). But if it didn't, getObjectType(); /// would return 'A1P<Q>' (and we'd have to make iterating over; /// qualifiers more complicated).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:818,Integrability,protocol,protocol-qualified,818,"/// Gets the type pointed to by this ObjC pointer. Always returns non-null.; ///; /// This method is equivalent to getPointeeType() except that; /// it discards any typedefs (or other sugar) between this; /// type and the ""outermost"" object type. So for:; /// \code; /// \@class A; \@protocol P; \@protocol Q;; /// typedef A<P> AP;; /// typedef A A1;; /// typedef A1<P> A1P;; /// typedef A1P<Q> A1PQ;; /// \endcode; /// For 'A*', getObjectType() will return 'A'.; /// For 'A<P>*', getObjectType() will return 'A<P>'.; /// For 'AP*', getObjectType() will return 'A<P>'.; /// For 'A1*', getObjectType() will return 'A'.; /// For 'A1<P>*', getObjectType() will return 'A1<P>'.; /// For 'A1P*', getObjectType() will return 'A1<P>'.; /// For 'A1PQ*', getObjectType() will return 'A1<Q>', because; /// adding protocols to a protocol-qualified base discards the; /// old qualifiers (for now). But if it didn't, getObjectType(); /// would return 'A1P<Q>' (and we'd have to make iterating over; /// qualifiers more complicated).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:52,Integrability,interface,interface,52,"/// If this pointer points to an Objective C; /// \@interface type, gets the type for that interface. Any protocol; /// qualifiers on the interface are ignored.; ///; /// \return null if the base type for this pointer is 'id' or 'Class'",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:91,Integrability,interface,interface,91,"/// If this pointer points to an Objective C; /// \@interface type, gets the type for that interface. Any protocol; /// qualifiers on the interface are ignored.; ///; /// \return null if the base type for this pointer is 'id' or 'Class'",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:106,Integrability,protocol,protocol,106,"/// If this pointer points to an Objective C; /// \@interface type, gets the type for that interface. Any protocol; /// qualifiers on the interface are ignored.; ///; /// \return null if the base type for this pointer is 'id' or 'Class'",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:138,Integrability,interface,interface,138,"/// If this pointer points to an Objective C; /// \@interface type, gets the type for that interface. Any protocol; /// qualifiers on the interface are ignored.; ///; /// \return null if the base type for this pointer is 'id' or 'Class'",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:45,Integrability,interface,interface,45,"/// If this pointer points to an Objective \@interface; /// type, gets the declaration for that interface.; ///; /// \return null if the base type for this pointer is 'id' or 'Class'",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:96,Integrability,interface,interface,96,"/// If this pointer points to an Objective \@interface; /// type, gets the declaration for that interface.; ///; /// \return null if the base type for this pointer is 'id' or 'Class'",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:113,Integrability,protocol,protocols,113,"/// True if this is equivalent to the 'id' type, i.e. if; /// its object type is the primitive 'id' type with no protocols.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:119,Integrability,protocol,protocols,119,"/// True if this is equivalent to the 'Class' type,; /// i.e. if its object tive is the primitive 'Class' type with no protocols.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:73,Integrability,protocol,protocols,73,/// True if this is equivalent to 'id<P>' for some non-empty set of; /// protocols.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:76,Integrability,protocol,protocols,76,/// True if this is equivalent to 'Class<P>' for some non-empty set of; /// protocols.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:138,Integrability,protocol,protocols,138,"/// An iterator over the qualifiers on the object type. Provided; /// for convenience. This will always iterate over the full set of; /// protocols on a type, not just those provided directly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:36,Integrability,protocol,protocols,36,/// Return the number of qualifying protocols on the object type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:26,Integrability,protocol,protocol,26,/// Retrieve a qualifying protocol by index on the object type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:67,Integrability,protocol,protocol,67,"/// Strip off the Objective-C ""kindof"" type and (with it) any; /// protocol qualifiers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:80,Performance,perform,performing,80,"/// Gets the type contained by this atomic type, i.e.; /// the type returned by performing an atomic load of this atomic type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:101,Performance,load,load,101,"/// Gets the type contained by this atomic type, i.e.; /// the type returned by performing an atomic load of this atomic type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:104,Integrability,wrap,wrappers,104,"/// A container of type source information.; ///; /// A client can read the relevant info using TypeLoc wrappers, e.g:; /// @code; /// TypeLoc TL = TypeSourceInfo->getTypeLoc();; /// TL.getBeginLoc().print(OS, SrcMgr);; /// @endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:82,Energy Efficiency,allocate,allocated,82,"// Contains a memory block after the class, used for type source information,; // allocated by ASTContext.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:20,Integrability,wrap,wrapped,20,/// Return the type wrapped by this type source info.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:23,Integrability,wrap,wrapper,23,/// Return the TypeLoc wrapper for the type source info.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:164,Integrability,rout,routine,164,"/// If Type is a reference type (e.g., const; /// int&), returns the type that the reference refers to (""const; /// int""). Otherwise, returns the type itself. This routine is used; /// throughout Sema to implement C++ 5p6:; ///; /// If an expression initially has the type ""reference to T"" (8.3.2,; /// 8.5.3), the type is adjusted to ""T"" prior to any further; /// analysis, the expression designates the object or function; /// denoted by the reference, and the expression is an lvalue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:4,Testability,Test,Tests,4,/// Tests whether the type is categorized as a fundamental type.; ///; /// \returns True for types specified in C++0x [basic.fundamental].,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:4,Testability,Test,Tests,4,/// Tests whether the type is categorized as a compound type.; ///; /// \returns True for types specified in C++0x [basic.compound].,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h:132,Availability,down,down,132,"// Just because the canonical type is correct does not mean we can use cast<>,; // since we may not have stripped off all the sugar down to the base type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/Type.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Type.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:36,Integrability,Wrap,Wrapper,36,"//===- TypeLoc.h - Type Source Info Wrapper ---------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// Defines the clang::TypeLoc interface and its subclasses.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:422,Integrability,interface,interface,422,"//===- TypeLoc.h - Type Source Info Wrapper ---------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// Defines the clang::TypeLoc interface and its subclasses.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:9,Integrability,wrap,wrapper,9,"/// Base wrapper for a particular ""section"" of type source info.; ///; /// A client should use the TypeLoc subclasses through castAs()/getAs(); /// in order to get at the actual information.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:43,Testability,assert,asserting,43,"/// Convert to the specified TypeLoc type, asserting that this TypeLoc; /// is of the desired type.; ///; /// \pre T::isKind(*this)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:44,Integrability,wrap,wrapper,44,/// Get the type for which this source info wrapper provides; /// information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:68,Modifiability,variab,variable,68,"/// Get the typeloc of an AutoType whose type will be deduced for a variable; /// with an initializer of this type. This looks through declarators like; /// pointer types, but not through decltype or typedefs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:133,Usability,simpl,simple,133,/// Initializes this to state that every location in this; /// type is the given location.; ///; /// This method exists to provide a simple transition for code that; /// relies on location-less types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:4,Integrability,Wrap,Wrapper,4,/// Wrapper of type source information for a type with; /// no direct qualifiers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:4,Integrability,Wrap,Wrapper,4,"/// Wrapper of type source information for a type with; /// non-trivial direct qualifiers.; ///; /// Currently, we intentionally do not provide source location for; /// type qualifiers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:1258,Modifiability,inherit,inherit,1258,"/// A metaprogramming base class for TypeLoc classes which correspond; /// to a particular Type subclass. It is accepted for a single; /// TypeLoc class to correspond to multiple Type classes.; ///; /// \tparam Base a class from which to derive; /// \tparam Derived the class deriving from this one; /// \tparam TypeClass the concrete Type subclass associated with this; /// location type; /// \tparam LocalData the structure type of local location data for; /// this type; ///; /// TypeLocs with non-constant amounts of local data should override; /// getExtraLocalDataSize(); getExtraLocalData() will then point to; /// this extra memory.; ///; /// TypeLocs with an inner type should define; /// QualType getInnerType() const; /// and getInnerTypeLoc() will then point to this inner type's; /// location data.; ///; /// A word about hierarchies: this template is not designed to be; /// derived from multiple times in a hierarchy. It is also not; /// designed to be used for classes where subtypes might provide; /// different amounts of source information. It should be subclassed; /// only at the deepest portion of the hierarchy where all children; /// have identical source information; if that's an abstract type,; /// then further descendents should inherit from; /// InheritingConcreteTypeLoc instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:1276,Modifiability,Inherit,InheritingConcreteTypeLoc,1276,"/// A metaprogramming base class for TypeLoc classes which correspond; /// to a particular Type subclass. It is accepted for a single; /// TypeLoc class to correspond to multiple Type classes.; ///; /// \tparam Base a class from which to derive; /// \tparam Derived the class deriving from this one; /// \tparam TypeClass the concrete Type subclass associated with this; /// location type; /// \tparam LocalData the structure type of local location data for; /// this type; ///; /// TypeLocs with non-constant amounts of local data should override; /// getExtraLocalDataSize(); getExtraLocalData() will then point to; /// this extra memory.; ///; /// TypeLocs with an inner type should define; /// QualType getInnerType() const; /// and getInnerTypeLoc() will then point to this inner type's; /// location data.; ///; /// A word about hierarchies: this template is not designed to be; /// derived from multiple times in a hierarchy. It is also not; /// designed to be used for classes where subtypes might provide; /// different amounts of source information. It should be subclassed; /// only at the deepest portion of the hierarchy where all children; /// have identical source information; if that's an abstract type,; /// then further descendents should inherit from; /// InheritingConcreteTypeLoc instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:12,Modifiability,variab,variable-sized,12,// Copy the variable-sized local data. We need to do this; // separately because the padding in the source and the padding in; // the destination might be different.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:146,Modifiability,variab,variable,146,/// Gets a pointer past the Info structure; useful for classes with; /// local data that can't be captured in the Info (e.g. because it's; /// of variable size).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:4,Integrability,Wrap,Wrapper,4,/// Wrapper for source info for builtin types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:4,Integrability,Wrap,Wrapper,4,/// Wrapper for source info for types used via transparent aliases.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:4,Integrability,Wrap,Wrapper,4,/// Wrapper for source info for typedefs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:4,Integrability,Wrap,Wrapper,4,/// Wrapper for source info for injected class names of class; /// templates.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:32,Integrability,inject,injected,32,/// Wrapper for source info for injected class names of class; /// templates.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:32,Security,inject,injected,32,/// Wrapper for source info for injected class names of class; /// templates.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:4,Integrability,Wrap,Wrapper,4,/// Wrapper for source info for unresolved typename using decls.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:4,Integrability,Wrap,Wrapper,4,/// Wrapper for source info for tag types. Note that this only; /// records source info for the name itself; a type written 'struct foo'; /// should be represented as an ElaboratedTypeLoc. We currently; /// only do that when C++ is enabled because of the expense of; /// creating an ElaboratedType node for so many type references in C.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:4,Integrability,Wrap,Wrapper,4,/// Wrapper for source info for record types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:4,Integrability,Wrap,Wrapper,4,/// Wrapper for source info for enum types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:4,Integrability,Wrap,Wrapper,4,/// Wrapper for template type parameters.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:4,Integrability,Protocol,ProtocolLAngleLoc,4,"/// ProtocolLAngleLoc, ProtocolRAngleLoc, and the source locations for; /// protocol qualifiers are stored after Info.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:23,Integrability,Protocol,ProtocolRAngleLoc,23,"/// ProtocolLAngleLoc, ProtocolRAngleLoc, and the source locations for; /// protocol qualifiers are stored after Info.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:76,Integrability,protocol,protocol,76,"/// ProtocolLAngleLoc, ProtocolRAngleLoc, and the source locations for; /// protocol qualifiers are stored after Info.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:55,Integrability,protocol,protocol,55,"// SourceLocations are stored after Info, one for each protocol qualifier.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:18,Integrability,protocol,protocol,18,"// When there are protocol qualifers, we have LAngleLoc and RAngleLoc; // as well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:4,Integrability,Wrap,Wrapper,4,/// Wrapper for substituted template type parameters.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:4,Integrability,Wrap,Wrapper,4,/// Wrapper for substituted template type parameters.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:73,Integrability,protocol,protocols,73,// A helper class for defining ObjC TypeLocs that can qualified with; // protocols.; //; // TypeClass basically has to be either ObjCInterfaceType or; // ObjCObjectPointerType.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:84,Integrability,Protocol,Protocol,84,"// SourceLocations are stored after the type argument information, one for; // each Protocol.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:4,Integrability,Wrap,Wrapper,4,/// Wrapper for source info for ObjC interfaces.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:37,Integrability,interface,interfaces,37,/// Wrapper for source info for ObjC interfaces.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:4,Integrability,Wrap,Wrapper,4,/// Wrapper for source info for pointers decayed from arrays and; /// functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:4,Integrability,Wrap,Wrapper,4,/// Wrapper for source info for pointers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:4,Integrability,Wrap,Wrapper,4,/// Wrapper for source info for block pointers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:4,Integrability,Wrap,Wrapper,4,/// Wrapper for source info for member pointers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:4,Integrability,Wrap,Wraps,4,/// Wraps an ObjCPointerType with source location information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:4,Integrability,Wrap,Wrapper,4,/// Wrapper for source info for functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:4,Integrability,Wrap,Wrapper,4,/// Wrapper for source info for arrays.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:50,Integrability,depend,dependent,50,"// Even if we have a nested-name-specifier in the dependent; // template specialization type, we won't record the nested-name-specifier; // location information when this type-source location information is; // part of a nested-name-specifier.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h:33,Integrability,protocol,protocol,33,/// The source range is just the protocol name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLocVisitor.h:420,Integrability,interface,interface,420,"//===--- TypeLocVisitor.h - Visitor for TypeLoc subclasses ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the TypeLocVisitor interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeLocVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeLocVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeVisitor.h:417,Integrability,interface,interface,417,"//===--- TypeVisitor.h - Visitor for Type subclasses ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the TypeVisitor interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeVisitor.h:98,Modifiability,inherit,inherited,98,"/// An operation on a type.; ///; /// \tparam ImplClass Class implementing the operation. Must be inherited from; /// TypeVisitor.; /// \tparam RetTy %Type of result produced by the operation.; ///; /// The class implements polymorphic operation on an object of type derived; /// from Type. The operation is performed by calling method Visit. It then; /// dispatches the call to function \c VisitFooType, if actual argument type; /// is \c FooType.; ///; /// The class implements static polymorphism using Curiously Recurring; /// Template Pattern. It is designed to be a base class for some concrete; /// class:; ///; /// \code; /// class SomeVisitor : public TypeVisitor<SomeVisitor,sometype> { ... };; /// ...; /// Type *atype = ...; /// ...; /// SomeVisitor avisitor;; /// sometype result = avisitor.Visit(atype);; /// \endcode; ///; /// Actual treatment is made by methods of the derived class, TypeVisitor only; /// dispatches call to the appropriate method. If the implementation class; /// \c ImplClass provides specific action for some type, say; /// \c ConstantArrayType, it should define method; /// <tt>VisitConstantArrayType(const ConstantArrayType*)</tt>. Otherwise; /// \c TypeVisitor dispatches call to the method that handles parent type. In; /// this example handlers are tried in the sequence:; ///; /// \li <tt>ImplClass::VisitConstantArrayType(const ConstantArrayType*)</tt>; /// \li <tt>ImplClass::VisitArrayType(const ArrayType*)</tt>; /// \li <tt>ImplClass::VisitType(const Type*)</tt>; /// \li <tt>TypeVisitor::VisitType(const Type*)</tt>; ///; /// The first function of this sequence that is defined will handle object of; /// type \c ConstantArrayType.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeVisitor.h:224,Modifiability,polymorphi,polymorphic,224,"/// An operation on a type.; ///; /// \tparam ImplClass Class implementing the operation. Must be inherited from; /// TypeVisitor.; /// \tparam RetTy %Type of result produced by the operation.; ///; /// The class implements polymorphic operation on an object of type derived; /// from Type. The operation is performed by calling method Visit. It then; /// dispatches the call to function \c VisitFooType, if actual argument type; /// is \c FooType.; ///; /// The class implements static polymorphism using Curiously Recurring; /// Template Pattern. It is designed to be a base class for some concrete; /// class:; ///; /// \code; /// class SomeVisitor : public TypeVisitor<SomeVisitor,sometype> { ... };; /// ...; /// Type *atype = ...; /// ...; /// SomeVisitor avisitor;; /// sometype result = avisitor.Visit(atype);; /// \endcode; ///; /// Actual treatment is made by methods of the derived class, TypeVisitor only; /// dispatches call to the appropriate method. If the implementation class; /// \c ImplClass provides specific action for some type, say; /// \c ConstantArrayType, it should define method; /// <tt>VisitConstantArrayType(const ConstantArrayType*)</tt>. Otherwise; /// \c TypeVisitor dispatches call to the method that handles parent type. In; /// this example handlers are tried in the sequence:; ///; /// \li <tt>ImplClass::VisitConstantArrayType(const ConstantArrayType*)</tt>; /// \li <tt>ImplClass::VisitArrayType(const ArrayType*)</tt>; /// \li <tt>ImplClass::VisitType(const Type*)</tt>; /// \li <tt>TypeVisitor::VisitType(const Type*)</tt>; ///; /// The first function of this sequence that is defined will handle object of; /// type \c ConstantArrayType.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeVisitor.h:487,Modifiability,polymorphi,polymorphism,487,"/// An operation on a type.; ///; /// \tparam ImplClass Class implementing the operation. Must be inherited from; /// TypeVisitor.; /// \tparam RetTy %Type of result produced by the operation.; ///; /// The class implements polymorphic operation on an object of type derived; /// from Type. The operation is performed by calling method Visit. It then; /// dispatches the call to function \c VisitFooType, if actual argument type; /// is \c FooType.; ///; /// The class implements static polymorphism using Curiously Recurring; /// Template Pattern. It is designed to be a base class for some concrete; /// class:; ///; /// \code; /// class SomeVisitor : public TypeVisitor<SomeVisitor,sometype> { ... };; /// ...; /// Type *atype = ...; /// ...; /// SomeVisitor avisitor;; /// sometype result = avisitor.Visit(atype);; /// \endcode; ///; /// Actual treatment is made by methods of the derived class, TypeVisitor only; /// dispatches call to the appropriate method. If the implementation class; /// \c ImplClass provides specific action for some type, say; /// \c ConstantArrayType, it should define method; /// <tt>VisitConstantArrayType(const ConstantArrayType*)</tt>. Otherwise; /// \c TypeVisitor dispatches call to the method that handles parent type. In; /// this example handlers are tried in the sequence:; ///; /// \li <tt>ImplClass::VisitConstantArrayType(const ConstantArrayType*)</tt>; /// \li <tt>ImplClass::VisitArrayType(const ArrayType*)</tt>; /// \li <tt>ImplClass::VisitType(const Type*)</tt>; /// \li <tt>TypeVisitor::VisitType(const Type*)</tt>; ///; /// The first function of this sequence that is defined will handle object of; /// type \c ConstantArrayType.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeVisitor.h:308,Performance,perform,performed,308,"/// An operation on a type.; ///; /// \tparam ImplClass Class implementing the operation. Must be inherited from; /// TypeVisitor.; /// \tparam RetTy %Type of result produced by the operation.; ///; /// The class implements polymorphic operation on an object of type derived; /// from Type. The operation is performed by calling method Visit. It then; /// dispatches the call to function \c VisitFooType, if actual argument type; /// is \c FooType.; ///; /// The class implements static polymorphism using Curiously Recurring; /// Template Pattern. It is designed to be a base class for some concrete; /// class:; ///; /// \code; /// class SomeVisitor : public TypeVisitor<SomeVisitor,sometype> { ... };; /// ...; /// Type *atype = ...; /// ...; /// SomeVisitor avisitor;; /// sometype result = avisitor.Visit(atype);; /// \endcode; ///; /// Actual treatment is made by methods of the derived class, TypeVisitor only; /// dispatches call to the appropriate method. If the implementation class; /// \c ImplClass provides specific action for some type, say; /// \c ConstantArrayType, it should define method; /// <tt>VisitConstantArrayType(const ConstantArrayType*)</tt>. Otherwise; /// \c TypeVisitor dispatches call to the method that handles parent type. In; /// this example handlers are tried in the sequence:; ///; /// \li <tt>ImplClass::VisitConstantArrayType(const ConstantArrayType*)</tt>; /// \li <tt>ImplClass::VisitArrayType(const ArrayType*)</tt>; /// \li <tt>ImplClass::VisitType(const Type*)</tt>; /// \li <tt>TypeVisitor::VisitType(const Type*)</tt>; ///; /// The first function of this sequence that is defined will handle object of; /// type \c ConstantArrayType.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeVisitor.h:4,Performance,Perform,Performs,4,/// Performs the operation associated with this visitor object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/TypeVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/TypeVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/UnresolvedSet.h:98,Security,access,access,98,"/// Replaces the declaration at the given iterator with the new one,; /// preserving the original access bits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/UnresolvedSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/UnresolvedSet.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/VTableBuilder.h:252,Usability,simpl,simply,252,"/// The kind is stored in the lower 3 bits of the value. For offsets, we; /// make use of the facts that classes can't be larger than 2^55 bytes,; /// so we store the offset in the lower part of the 61 bits that remain.; /// (The reason that we're not simply using a PointerIntPair here is that we; /// need the offsets to be 64-bit, even when on a 32-bit machine).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/VTableBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/VTableBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/VTableBuilder.h:32,Modifiability,inherit,inheritance,32,/// Holds information about the inheritance path to a virtual base or function; /// table pointer. A record may contain as many vfptrs or vbptrs as there are; /// base subobjects.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/VTableBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/VTableBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/VTableBuilder.h:87,Modifiability,inherit,inheritance,87,"/// This is the most derived class that has this vptr at offset zero. When; /// single inheritance is used, this is always the most derived class. If; /// multiple inheritance is used, it may be any direct or indirect base.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/VTableBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/VTableBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/VTableBuilder.h:164,Modifiability,inherit,inheritance,164,"/// This is the most derived class that has this vptr at offset zero. When; /// single inheritance is used, this is always the most derived class. If; /// multiple inheritance is used, it may be any direct or indirect base.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/VTableBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/VTableBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/VTableBuilder.h:23,Modifiability,inherit,inheritance,23,/// The bases from the inheritance path that got used to mangle the vbtable; /// name. This is not really a full path like a CXXBasePath. It holds the; /// subset of records that need to be mangled into the vbtable symbol name in; /// order to get a unique name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/VTableBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/VTableBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/VTableBuilder.h:104,Modifiability,inherit,inherits,104,"/// The set of possibly indirect vbases that contain this vbtable. When a; /// derived class indirectly inherits from the same vbase twice, we only keep; /// vtables and their paths from the first instance.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/AST/VTableBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/VTableBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:921,Security,access,accessing,921,"//===- ASTMatchers.h - Structural query framework ---------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements matchers to be used together with the MatchFinder to; // match AST nodes.; //; // Matchers are created by generator functions, which can be combined in; // a functional in-language DSL to express queries over the C++ AST.; //; // For example, to match a class with a certain name, one would call:; // cxxRecordDecl(hasName(""MyClass"")); // which returns a matcher that can be used to find all AST nodes that declare; // a class named 'MyClass'.; //; // For more complicated match expressions we're often interested in accessing; // multiple parts of the matched AST nodes once a match is found. In that case,; // call `.bind(""name"")` on match expressions that match the nodes you want to; // access.; //; // For example, when we're interested in child classes of a certain class, we; // would write:; // cxxRecordDecl(hasName(""MyClass""), has(recordDecl().bind(""child""))); // When the match is found via the MatchFinder, a user provided callback will; // be called with a BoundNodes instance that contains a mapping from the; // strings that we provided for the `.bind()` calls to the nodes that were; // matched.; // In the given example, each time our matcher finds a match we get a callback; // where ""child"" is bound to the RecordDecl node of the matching child; // class declaration.; //; // See ASTMatchersInternal.h for a more in-depth explanation of the; // implementation details of the matcher framework.; //; // See ASTMatchFinder.h for how to use the generated matchers to run over; // an AST.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:1095,Security,access,access,1095,"//===- ASTMatchers.h - Structural query framework ---------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements matchers to be used together with the MatchFinder to; // match AST nodes.; //; // Matchers are created by generator functions, which can be combined in; // a functional in-language DSL to express queries over the C++ AST.; //; // For example, to match a class with a certain name, one would call:; // cxxRecordDecl(hasName(""MyClass"")); // which returns a matcher that can be used to find all AST nodes that declare; // a class named 'MyClass'.; //; // For more complicated match expressions we're often interested in accessing; // multiple parts of the matched AST nodes once a match is found. In that case,; // call `.bind(""name"")` on match expressions that match the nodes you want to; // access.; //; // For example, when we're interested in child classes of a certain class, we; // would write:; // cxxRecordDecl(hasName(""MyClass""), has(recordDecl().bind(""child""))); // When the match is found via the MatchFinder, a user provided callback will; // be called with a BoundNodes instance that contains a mapping from the; // strings that we provided for the `.bind()` calls to the nodes that were; // matched.; // In the given example, each time our matcher finds a match we get a callback; // where ""child"" is bound to the RecordDecl node of the matching child; // class declaration.; //; // See ASTMatchersInternal.h for a more in-depth explanation of the; // implementation details of the matcher framework.; //; // See ASTMatchFinder.h for how to use the generated matchers to run over; // an AST.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:179,Security,access,access,179,"/// Maps string IDs to AST nodes matched by parts of a matcher.; ///; /// The bound nodes are generated by calling \c bind(""id"") on the node matchers; /// of the nodes we want to access later.; ///; /// The instances of BoundNodes are created by \c MatchFinder when the user's; /// callbacks are executed every time a match is found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:432,Usability,Usab,Usable,432,"/// @}; /// Matches any node.; ///; /// Useful when another matcher requires a child matcher, but there's no; /// additional constraint. This will often be used with an explicit conversion; /// to an \c internal::Matcher<> type such as \c TypeMatcher.; ///; /// Example: \c DeclarationMatcher(anything()) matches all declarations, e.g.,; /// \code; /// ""int* p"" and ""void f()"" in; /// int* p;; /// void f();; /// \endcode; ///; /// Usable as: Any Matcher",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:280,Usability,Usab,Usable,280,"/// Matches AST nodes that were expanded within the main-file.; ///; /// Example matches X but not Y; /// (matcher = cxxRecordDecl(isExpansionInMainFile()); /// \code; /// #include <Y.h>; /// class X {};; /// \endcode; /// Y.h:; /// \code; /// class Y {};; /// \endcode; ///; /// Usable as: Matcher<Decl>, Matcher<Stmt>, Matcher<TypeLoc>",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:312,Usability,Usab,Usable,312,"/// Matches AST nodes that were expanded within system-header-files.; ///; /// Example matches Y but not X; /// (matcher = cxxRecordDecl(isExpansionInSystemHeader()); /// \code; /// #include <SystemHeader.h>; /// class X {};; /// \endcode; /// SystemHeader.h:; /// \code; /// class Y {};; /// \endcode; ///; /// Usable as: Matcher<Decl>, Matcher<Stmt>, Matcher<TypeLoc>",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:353,Usability,Usab,Usable,353,"/// Matches AST nodes that were expanded within files whose name is; /// partially matching a given regex.; ///; /// Example matches Y but not X; /// (matcher = cxxRecordDecl(isExpansionInFileMatching(""AST.*"")); /// \code; /// #include ""ASTMatcher.h""; /// class X {};; /// \endcode; /// ASTMatcher.h:; /// \code; /// class Y {};; /// \endcode; ///; /// Usable as: Matcher<Decl>, Matcher<Stmt>, Matcher<TypeLoc>",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:102,Testability,test,test,102,"/// Matches a declaration of a namespace.; ///; /// Given; /// \code; /// namespace {}; /// namespace test {}; /// \endcode; /// namespaceDecl(); /// matches ""namespace {}"" and ""namespace test {}""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:188,Testability,test,test,188,"/// Matches a declaration of a namespace.; ///; /// Given; /// \code; /// namespace {}; /// namespace test {}; /// \endcode; /// namespaceDecl(); /// matches ""namespace {}"" and ""namespace test {}""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:90,Testability,test,test,90,"/// Matches a declaration of a namespace alias.; ///; /// Given; /// \code; /// namespace test {}; /// namespace alias = ::test;; /// \endcode; /// namespaceAliasDecl(); /// matches ""namespace alias"" but not ""namespace test""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:123,Testability,test,test,123,"/// Matches a declaration of a namespace alias.; ///; /// Given; /// \code; /// namespace test {}; /// namespace alias = ::test;; /// \endcode; /// namespaceAliasDecl(); /// matches ""namespace alias"" but not ""namespace test""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:219,Testability,test,test,219,"/// Matches a declaration of a namespace alias.; ///; /// Given; /// \code; /// namespace test {}; /// namespace alias = ::test;; /// \endcode; /// namespaceAliasDecl(); /// matches ""namespace alias"" but not ""namespace test""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:44,Modifiability,variab,variable,44,"/// Matches declarator declarations (field, variable, function; /// and non-type template parameter declarations).; ///; /// Given; /// \code; /// class X { int y; };; /// \endcode; /// declaratorDecl(); /// matches \c int y.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:22,Modifiability,variab,variable,22,/// Matches parameter variable declarations.; ///; /// Given; /// \code; /// void f(int x);; /// \endcode; /// parmVarDecl(); /// matches \c int x.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:16,Security,access,access,16,/// Matches C++ access specifier declarations.; ///; /// Given; /// \code; /// class C {; /// public:; /// int a;; /// };; /// \endcode; /// accessSpecDecl(); /// matches 'public:',MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:141,Security,access,accessSpecDecl,141,/// Matches C++ access specifier declarations.; ///; /// Given; /// \code; /// class C {; /// public:; /// int a;; /// };; /// \endcode; /// accessSpecDecl(); /// matches 'public:',MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:84,Modifiability,inherit,inheritance,84,/// Matches public C++ declarations and C++ base specifers that specify public; /// inheritance.; ///; /// Examples:; /// \code; /// class C {; /// public: int a; // fieldDecl(isPublic()) matches 'a'; /// protected: int b;; /// private: int c;; /// };; /// \endcode; ///; /// \code; /// class Base {};; /// class Derived1 : public Base {}; // matches 'Base'; /// struct Derived2 : Base {}; // matches 'Base'; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:90,Modifiability,inherit,inheritance,90,/// Matches protected C++ declarations and C++ base specifers that specify; /// protected inheritance.; ///; /// Examples:; /// \code; /// class C {; /// public: int a;; /// protected: int b; // fieldDecl(isProtected()) matches 'b'; /// private: int c;; /// };; /// \endcode; ///; /// \code; /// class Base {};; /// class Derived : protected Base {}; // matches 'Base'; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:86,Modifiability,inherit,inheritance,86,/// Matches private C++ declarations and C++ base specifers that specify private; /// inheritance.; ///; /// Examples:; /// \code; /// class C {; /// public: int a;; /// protected: int b;; /// private: int c; // fieldDecl(isPrivate()) matches 'c'; /// };; /// \endcode; ///; /// \code; /// struct Base {};; /// struct Derived1 : private Base {}; // matches 'Base'; /// class Derived2 : Base {}; // matches 'Base'; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:339,Modifiability,variab,variable,339,"/// Causes all nested matchers to be matched with the specified traversal kind.; ///; /// Given; /// \code; /// void foo(); /// {; /// int i = 3.0;; /// }; /// \endcode; /// The matcher; /// \code; /// traverse(TK_IgnoreUnlessSpelledInSource,; /// varDecl(hasInitializer(floatLiteral().bind(""init""))); /// ); /// \endcode; /// matches the variable declaration with ""init"" bound to the ""3.0"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:47,Integrability,depend,dependent,47,"/// Matches expressions that are instantiation-dependent even if it is; /// neither type- nor value-dependent.; ///; /// In the following example, the expression sizeof(sizeof(T() + T())); /// is instantiation-dependent (since it involves a template parameter T),; /// but is neither type- nor value-dependent, since the type of the inner; /// sizeof is known (std::size_t) and therefore the size of the outer; /// sizeof is known.; /// \code; /// template<typename T>; /// void f(T x, T y) { sizeof(sizeof(T() + T()); }; /// \endcode; /// expr(isInstantiationDependent()) matches sizeof(sizeof(T() + T())",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:100,Integrability,depend,dependent,100,"/// Matches expressions that are instantiation-dependent even if it is; /// neither type- nor value-dependent.; ///; /// In the following example, the expression sizeof(sizeof(T() + T())); /// is instantiation-dependent (since it involves a template parameter T),; /// but is neither type- nor value-dependent, since the type of the inner; /// sizeof is known (std::size_t) and therefore the size of the outer; /// sizeof is known.; /// \code; /// template<typename T>; /// void f(T x, T y) { sizeof(sizeof(T() + T()); }; /// \endcode; /// expr(isInstantiationDependent()) matches sizeof(sizeof(T() + T())",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:210,Integrability,depend,dependent,210,"/// Matches expressions that are instantiation-dependent even if it is; /// neither type- nor value-dependent.; ///; /// In the following example, the expression sizeof(sizeof(T() + T())); /// is instantiation-dependent (since it involves a template parameter T),; /// but is neither type- nor value-dependent, since the type of the inner; /// sizeof is known (std::size_t) and therefore the size of the outer; /// sizeof is known.; /// \code; /// template<typename T>; /// void f(T x, T y) { sizeof(sizeof(T() + T()); }; /// \endcode; /// expr(isInstantiationDependent()) matches sizeof(sizeof(T() + T())",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:300,Integrability,depend,dependent,300,"/// Matches expressions that are instantiation-dependent even if it is; /// neither type- nor value-dependent.; ///; /// In the following example, the expression sizeof(sizeof(T() + T())); /// is instantiation-dependent (since it involves a template parameter T),; /// but is neither type- nor value-dependent, since the type of the inner; /// sizeof is known (std::size_t) and therefore the size of the outer; /// sizeof is known.; /// \code; /// template<typename T>; /// void f(T x, T y) { sizeof(sizeof(T() + T()); }; /// \endcode; /// expr(isInstantiationDependent()) matches sizeof(sizeof(T() + T())",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:38,Integrability,depend,dependent,38,"/// Matches expressions that are type-dependent because the template type; /// is not yet instantiated.; ///; /// For example, the expressions ""x"" and ""x + y"" are type-dependent in; /// the following code, but ""y"" is not type-dependent:; /// \code; /// template<typename T>; /// void add(T x, int y) {; /// x + y;; /// }; /// \endcode; /// expr(isTypeDependent()) matches x + y",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:168,Integrability,depend,dependent,168,"/// Matches expressions that are type-dependent because the template type; /// is not yet instantiated.; ///; /// For example, the expressions ""x"" and ""x + y"" are type-dependent in; /// the following code, but ""y"" is not type-dependent:; /// \code; /// template<typename T>; /// void add(T x, int y) {; /// x + y;; /// }; /// \endcode; /// expr(isTypeDependent()) matches x + y",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:226,Integrability,depend,dependent,226,"/// Matches expressions that are type-dependent because the template type; /// is not yet instantiated.; ///; /// For example, the expressions ""x"" and ""x + y"" are type-dependent in; /// the following code, but ""y"" is not type-dependent:; /// \code; /// template<typename T>; /// void add(T x, int y) {; /// x + y;; /// }; /// \endcode; /// expr(isTypeDependent()) matches x + y",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:38,Integrability,depend,dependent,38,"/// Matches expression that are value-dependent because they contain a; /// non-type template parameter.; ///; /// For example, the array bound of ""Chars"" in the following example is; /// value-dependent.; /// \code; /// template<int Size> int f() { return Size; }; /// \endcode; /// expr(isValueDependent()) matches return Size",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:194,Integrability,depend,dependent,194,"/// Matches expression that are value-dependent because they contain a; /// non-type template parameter.; ///; /// For example, the array bound of ""Chars"" in the following example is; /// value-dependent.; /// \code; /// template<int Size> int f() { return Size; }; /// \endcode; /// expr(isValueDependent()) matches return Size",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:60,Usability,guid,guide,60,/// Matches user-defined and implicitly generated deduction guide.; ///; /// Example matches the deduction guide.; /// \code; /// template<typename T>; /// class X { X(int) };; /// X(int) -> X<int>;; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:107,Usability,guid,guide,107,/// Matches user-defined and implicitly generated deduction guide.; ///; /// Example matches the deduction guide.; /// \code; /// template<typename T>; /// class X { X(int) };; /// X(int) -> X<int>;; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:12,Modifiability,variab,variable,12,"/// Matches variable declarations.; ///; /// Note: this does not match declarations of member variables, which are; /// ""field"" declarations in Clang parlance.; ///; /// Example matches a; /// \code; /// int a;; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:94,Modifiability,variab,variables,94,"/// Matches variable declarations.; ///; /// Note: this does not match declarations of member variables, which are; /// ""field"" declarations in Clang parlance.; ///; /// Example matches a; /// \code; /// int a;; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:144,Integrability,depend,dependent,144,/// Matches member expressions where the actual member referenced could not be; /// resolved because the base expression or the member name was dependent.; ///; /// Given; /// \code; /// template <class T> void f() { T t; t.g(); }; /// \endcode; /// cxxDependentScopeMemberExpr(); /// matches t.g,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:228,Testability,test,test,228,"/// Matches call expressions which were resolved using ADL.; ///; /// Example matches y(x) but not y(42) or NS::y(x).; /// \code; /// namespace NS {; /// struct X {};; /// void y(X);; /// }; ///; /// void y(...);; ///; /// void test() {; /// NS::X x;; /// y(x); // Matches; /// NS::y(x); // Doesn't match; /// y(42); // Doesn't match; /// using NS::y;; /// y(x); // Found by both unqualified lookup and ADL, doesn't match; // }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:23,Integrability,Message,Message,23,"/// Matches ObjectiveC Message invocation expressions.; ///; /// The innermost message send invokes the ""alloc"" class method on the; /// NSString class, while the outermost message send invokes the; /// ""initWithString"" instance method on the object returned from; /// NSString's ""alloc"". This matcher should match both message sends.; /// \code; /// [[NSString alloc] initWithString:@""Hello""]; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:79,Integrability,message,message,79,"/// Matches ObjectiveC Message invocation expressions.; ///; /// The innermost message send invokes the ""alloc"" class method on the; /// NSString class, while the outermost message send invokes the; /// ""initWithString"" instance method on the object returned from; /// NSString's ""alloc"". This matcher should match both message sends.; /// \code; /// [[NSString alloc] initWithString:@""Hello""]; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:173,Integrability,message,message,173,"/// Matches ObjectiveC Message invocation expressions.; ///; /// The innermost message send invokes the ""alloc"" class method on the; /// NSString class, while the outermost message send invokes the; /// ""initWithString"" instance method on the object returned from; /// NSString's ""alloc"". This matcher should match both message sends.; /// \code; /// [[NSString alloc] initWithString:@""Hello""]; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:320,Integrability,message,message,320,"/// Matches ObjectiveC Message invocation expressions.; ///; /// The innermost message send invokes the ""alloc"" class method on the; /// NSString class, while the outermost message send invokes the; /// ""initWithString"" instance method on the object returned from; /// NSString's ""alloc"". This matcher should match both message sends.; /// \code; /// [[NSString alloc] initWithString:@""Hello""]; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:24,Integrability,interface,interface,24,/// Matches Objective-C interface declarations.; ///; /// Example matches Foo; /// \code; /// @interface Foo; /// @end; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:95,Integrability,interface,interface,95,/// Matches Objective-C interface declarations.; ///; /// Example matches Foo; /// \code; /// @interface Foo; /// @end; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:24,Integrability,protocol,protocol,24,/// Matches Objective-C protocol declarations.; ///; /// Example matches FooDelegate; /// \code; /// @protocol FooDelegate; /// @end; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:102,Integrability,protocol,protocol,102,/// Matches Objective-C protocol declarations.; ///; /// Example matches FooDelegate; /// \code; /// @protocol FooDelegate; /// @end; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:106,Integrability,interface,interface,106,/// Matches Objective-C category declarations.; ///; /// Example matches Foo (Additions); /// \code; /// @interface Foo (Additions); /// @end; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:137,Integrability,interface,interface,137,/// Matches Objective-C method declarations.; ///; /// Example matches both declaration and definition of -[Foo method]; /// \code; /// @interface Foo; /// - (void)method;; /// @end; ///; /// @implementation Foo; /// - (void)method {}; /// @end; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:33,Modifiability,variab,variable,33,/// Matches Objective-C instance variable declarations.; ///; /// Example matches _enabled; /// \code; /// @implementation Foo {; /// BOOL _enabled;; /// }; /// @end; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:98,Integrability,interface,interface,98,/// Matches Objective-C property declarations.; ///; /// Example matches enabled; /// \code; /// @interface Foo; /// @property BOOL enabled;; /// @end; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:34,Integrability,wrap,wrapper,34,/// Matches a constant expression wrapper.; ///; /// Example matches the constant in the case statement:; /// (matcher = constantExpr()); /// \code; /// switch (a) {; /// case 37: break;; /// }; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:316,Testability,test,testLambdaCapture,316,"/// Matches a loop initializing the elements of an array in a number of contexts:; /// * in the implicit copy/move constructor for a class with an array member; /// * when a lambda-expression captures an array by value; /// * when a decomposition declaration decomposes an array; ///; /// Given; /// \code; /// void testLambdaCapture() {; /// int a[10];; /// auto Lam1 = [a]() {; /// return;; /// };; /// }; /// \endcode; /// arrayInitLoopExpr() matches the implicit loop that initializes each element of; /// the implicit array field inside the lambda object, that represents the array `a`; /// captured by value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:349,Testability,test,testStructBinding,349,"/// The arrayInitIndexExpr consists of two subexpressions: a common expression; /// (the source array) that is evaluated once up-front, and a per-element initializer; /// that runs once for each array element. Within the per-element initializer,; /// the current index may be obtained via an ArrayInitIndexExpr.; ///; /// Given; /// \code; /// void testStructBinding() {; /// int a[2] = {1, 2};; /// auto [x, y] = a;; /// }; /// \endcode; /// arrayInitIndexExpr() matches the array index that implicitly iterates; /// over the array `a` to copy each element to the anonymous array; /// that backs the structured binding `[x, y]` elements of which are; /// referred to by their aliases `x` and `y`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:66,Integrability,depend,dependent,66,/// Matches co_await expressions where the type of the promise is dependent,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:552,Usability,Usab,Usable,552,"/// Matches if any of the given matchers matches.; ///; /// Unlike \c anyOf, \c eachOf will generate a match result for each; /// matching submatcher.; ///; /// For example, in:; /// \code; /// class A { int a; int b; };; /// \endcode; /// The matcher:; /// \code; /// cxxRecordDecl(eachOf(has(fieldDecl(hasName(""a"")).bind(""v"")),; /// has(fieldDecl(hasName(""b"")).bind(""v"")))); /// \endcode; /// will generate two results binding ""v"", the first of which binds; /// the field declaration of \c a, the second the field declaration of; /// \c b.; ///; /// Usable as: Any Matcher",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:60,Usability,Usab,Usable,60,/// Matches if any of the given matchers matches.; ///; /// Usable as: Any Matcher,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:51,Usability,Usab,Usable,51,/// Matches if all given matchers match.; ///; /// Usable as: Any Matcher,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:683,Usability,Usab,Usable,683,"/// Matches any node regardless of the submatcher.; ///; /// However, \c optionally will retain any bindings generated by the submatcher.; /// Useful when additional information which may or may not present about a main; /// matching node is desired.; ///; /// For example, in:; /// \code; /// class Foo {; /// int bar;; /// }; /// \endcode; /// The matcher:; /// \code; /// cxxRecordDecl(; /// optionally(has(; /// fieldDecl(hasName(""bar"")).bind(""var""); /// ))).bind(""record""); /// \endcode; /// will produce a result binding for both ""record"" and ""var"".; /// The matcher will produce a ""record"" binding for even if there is no data; /// member named ""bar"" in that class.; ///; /// Usable as: Any Matcher",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:704,Usability,Usab,Usable,704,"/// Matches any of the \p NodeMatchers with InnerMatchers nested within; ///; /// Given; /// \code; /// if (true);; /// for (; true; );; /// \endcode; /// with the matcher; /// \code; /// mapAnyOf(ifStmt, forStmt).with(; /// hasCondition(cxxBoolLiteralExpr(equals(true))); /// ).bind(""trueCond""); /// \endcode; /// matches the \c if and the \c for. It is equivalent to:; /// \code; /// auto trueCond = hasCondition(cxxBoolLiteralExpr(equals(true)));; /// anyOf(; /// ifStmt(trueCond).bind(""trueCond""),; /// forStmt(trueCond).bind(""trueCond""); /// );; /// \endcode; ///; /// The with() chain-call accepts zero or more matchers which are combined; /// as-if with allOf() in each of the node matchers.; /// Usable as: Any Matcher",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:246,Integrability,depend,depending,246,"/// Matches nodes which can be used with binary operators.; ///; /// The code; /// \code; /// var1 != var2;; /// \endcode; /// might be represented in the clang AST as a binaryOperator, a; /// cxxOperatorCallExpr or a cxxRewrittenBinaryOperator, depending on; ///; /// * whether the types of var1 and var2 are fundamental (binaryOperator) or at; /// least one is a class type (cxxOperatorCallExpr); /// * whether the code appears in a template declaration, if at least one of the; /// vars is a dependent-type (binaryOperator); /// * whether the code relies on a rewritten binary operator, such as a; /// spaceship operator or an inverted equality operator; /// (cxxRewrittenBinaryOperator); ///; /// This matcher elides details in places where the matchers for the nodes are; /// compatible.; ///; /// Given; /// \code; /// binaryOperation(; /// hasOperatorName(""!=""),; /// hasLHS(expr().bind(""lhs"")),; /// hasRHS(expr().bind(""rhs"")); /// ); /// \endcode; /// matches each use of ""!="" in:; /// \code; /// struct S{; /// bool operator!=(const S&) const;; /// };; ///; /// void foo(); /// {; /// 1 != 2;; /// S() != S();; /// }; ///; /// template<typename T>; /// void templ(); /// {; /// 1 != 2;; /// T() != S();; /// }; /// struct HasOpEq; /// {; /// bool operator==(const HasOpEq &) const;; /// };; ///; /// void inverse(); /// {; /// HasOpEq s1;; /// HasOpEq s2;; /// if (s1 != s2); /// return;; /// }; ///; /// struct HasSpaceship; /// {; /// bool operator<=>(const HasOpEq &) const;; /// };; ///; /// void use_spaceship(); /// {; /// HasSpaceship s1;; /// HasSpaceship s2;; /// if (s1 != s2); /// return;; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:495,Integrability,depend,dependent-type,495,"/// Matches nodes which can be used with binary operators.; ///; /// The code; /// \code; /// var1 != var2;; /// \endcode; /// might be represented in the clang AST as a binaryOperator, a; /// cxxOperatorCallExpr or a cxxRewrittenBinaryOperator, depending on; ///; /// * whether the types of var1 and var2 are fundamental (binaryOperator) or at; /// least one is a class type (cxxOperatorCallExpr); /// * whether the code appears in a template declaration, if at least one of the; /// vars is a dependent-type (binaryOperator); /// * whether the code relies on a rewritten binary operator, such as a; /// spaceship operator or an inverted equality operator; /// (cxxRewrittenBinaryOperator); ///; /// This matcher elides details in places where the matchers for the nodes are; /// compatible.; ///; /// Given; /// \code; /// binaryOperation(; /// hasOperatorName(""!=""),; /// hasLHS(expr().bind(""lhs"")),; /// hasRHS(expr().bind(""rhs"")); /// ); /// \endcode; /// matches each use of ""!="" in:; /// \code; /// struct S{; /// bool operator!=(const S&) const;; /// };; ///; /// void foo(); /// {; /// 1 != 2;; /// S() != S();; /// }; ///; /// template<typename T>; /// void templ(); /// {; /// 1 != 2;; /// T() != S();; /// }; /// struct HasOpEq; /// {; /// bool operator==(const HasOpEq &) const;; /// };; ///; /// void inverse(); /// {; /// HasOpEq s1;; /// HasOpEq s2;; /// if (s1 != s2); /// return;; /// }; ///; /// struct HasSpaceship; /// {; /// bool operator<=>(const HasOpEq &) const;; /// };; ///; /// void use_spaceship(); /// {; /// HasSpaceship s1;; /// HasSpaceship s2;; /// if (s1 != s2); /// return;; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:144,Security,access,accessing,144,"/// Matches function calls and constructor calls; ///; /// Because CallExpr and CXXConstructExpr do not share a common; /// base class with API accessing arguments etc, AST Matchers for code; /// which should match both are typically duplicated. This matcher; /// removes the need for duplication.; ///; /// Given code; /// \code; /// struct ConstructorTakesInt; /// {; /// ConstructorTakesInt(int i) {}; /// };; ///; /// void callTakesInt(int i); /// {; /// }; ///; /// void doCall(); /// {; /// callTakesInt(42);; /// }; ///; /// void doConstruct(); /// {; /// ConstructorTakesInt cti(42);; /// }; /// \endcode; ///; /// The matcher; /// \code; /// invocation(hasArgument(0, integerLiteral(equals(42)))); /// \endcode; /// matches the expression in both doCall and doConstruct",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:111,Performance,perform,performance,111,"/// Matches NamedDecl nodes that have any of the specified names.; ///; /// This matcher is only provided as a performance optimization of hasName.; /// \code; /// hasAnyName(a, b, c); /// \endcode; /// is equivalent to, but faster than; /// \code; /// anyOf(hasName(a), hasName(b), hasName(c)); /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:123,Performance,optimiz,optimization,123,"/// Matches NamedDecl nodes that have any of the specified names.; ///; /// This matcher is only provided as a performance optimization of hasName.; /// \code; /// hasAnyName(a, b, c); /// \endcode; /// is equivalent to, but faster than; /// \code; /// anyOf(hasName(a), hasName(b), hasName(c)); /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:537,Usability,Usab,Usable,537,"/// Matches overloaded operator names.; ///; /// Matches overloaded operator names specified in strings without the; /// ""operator"" prefix: e.g. ""<<"".; ///; /// Given:; /// \code; /// class A { int operator*(); };; /// const A &operator<<(const A &a, const A &b);; /// A a;; /// a << a; // <-- This matches; /// \endcode; ///; /// \c cxxOperatorCallExpr(hasOverloadedOperatorName(""<<""))) matches the; /// specified line and; /// \c cxxRecordDecl(hasMethod(hasOverloadedOperatorName(""*""))); /// matches the declaration of \c A.; ///; /// Usable as: Matcher<CXXOperatorCallExpr>, Matcher<FunctionDecl>",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:21,Integrability,depend,dependent,21,"/// Matches template-dependent, but known, member names.; ///; /// In template declarations, dependent members are not resolved and so can; /// not be matched to particular named declarations.; ///; /// This matcher allows to match on the known name of members.; ///; /// Given; /// \code; /// template <typename T>; /// struct S {; /// void mem();; /// };; /// template <typename T>; /// void x() {; /// S<T> s;; /// s.mem();; /// }; /// \endcode; /// \c cxxDependentScopeMemberExpr(hasMemberName(""mem"")) matches `s.mem()`",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:93,Integrability,depend,dependent,93,"/// Matches template-dependent, but known, member names.; ///; /// In template declarations, dependent members are not resolved and so can; /// not be matched to particular named declarations.; ///; /// This matcher allows to match on the known name of members.; ///; /// Given; /// \code; /// template <typename T>; /// struct S {; /// void mem();; /// };; /// template <typename T>; /// void x() {; /// S<T> s;; /// s.mem();; /// }; /// \endcode; /// \c cxxDependentScopeMemberExpr(hasMemberName(""mem"")) matches `s.mem()`",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:21,Integrability,depend,dependent,21,"/// Matches template-dependent, but known, member names against an already-bound; /// node; ///; /// In template declarations, dependent members are not resolved and so can; /// not be matched to particular named declarations.; ///; /// This matcher allows to match on the name of already-bound VarDecl, FieldDecl; /// and CXXMethodDecl nodes.; ///; /// Given; /// \code; /// template <typename T>; /// struct S {; /// void mem();; /// };; /// template <typename T>; /// void x() {; /// S<T> s;; /// s.mem();; /// }; /// \endcode; /// The matcher; /// @code; /// \c cxxDependentScopeMemberExpr(; /// hasObjectExpression(declRefExpr(hasType(templateSpecializationType(; /// hasDeclaration(classTemplateDecl(has(cxxRecordDecl(has(; /// cxxMethodDecl(hasName(""mem"")).bind(""templMem""); /// ))))); /// )))),; /// memberHasSameNameAsBoundNode(""templMem""); /// ); /// @endcode; /// first matches and binds the @c mem member of the @c S template, then; /// compares its name to the usage in @c s.mem() in the @c x function template",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:127,Integrability,depend,dependent,127,"/// Matches template-dependent, but known, member names against an already-bound; /// node; ///; /// In template declarations, dependent members are not resolved and so can; /// not be matched to particular named declarations.; ///; /// This matcher allows to match on the name of already-bound VarDecl, FieldDecl; /// and CXXMethodDecl nodes.; ///; /// Given; /// \code; /// template <typename T>; /// struct S {; /// void mem();; /// };; /// template <typename T>; /// void x() {; /// S<T> s;; /// s.mem();; /// }; /// \endcode; /// The matcher; /// @code; /// \c cxxDependentScopeMemberExpr(; /// hasObjectExpression(declRefExpr(hasType(templateSpecializationType(; /// hasDeclaration(classTemplateDecl(has(cxxRecordDecl(has(; /// cxxMethodDecl(hasName(""mem"")).bind(""templMem""); /// ))))); /// )))),; /// memberHasSameNameAsBoundNode(""templMem""); /// ); /// @endcode; /// first matches and binds the @c mem member of the @c S template, then; /// compares its name to the usage in @c s.mem() in the @c x function template",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:869,Integrability,interface,interface,869,"/// Matches C++ classes that are directly or indirectly derived from a class; /// matching \c Base, or Objective-C classes that directly or indirectly; /// subclass a class matching \c Base.; ///; /// Note that a class is not considered to be derived from itself.; ///; /// Example matches Y, Z, C (Base == hasName(""X"")); /// \code; /// class X;; /// class Y : public X {}; // directly derived; /// class Z : public Y {}; // indirectly derived; /// typedef X A;; /// typedef A B;; /// class C : public B {}; // derived from a typedef of X; /// \endcode; ///; /// In the following example, Bar matches isDerivedFrom(hasName(""X"")):; /// \code; /// class Foo;; /// typedef Foo X;; /// class Bar : public Foo {}; // derived from a type that X is a typedef of; /// \endcode; ///; /// In the following example, Bar matches isDerivedFrom(hasName(""NSObject"")); /// \code; /// @interface NSObject @end; /// @interface Bar : NSObject @end; /// \endcode; ///; /// Usable as: Matcher<CXXRecordDecl>, Matcher<ObjCInterfaceDecl>",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:899,Integrability,interface,interface,899,"/// Matches C++ classes that are directly or indirectly derived from a class; /// matching \c Base, or Objective-C classes that directly or indirectly; /// subclass a class matching \c Base.; ///; /// Note that a class is not considered to be derived from itself.; ///; /// Example matches Y, Z, C (Base == hasName(""X"")); /// \code; /// class X;; /// class Y : public X {}; // directly derived; /// class Z : public Y {}; // indirectly derived; /// typedef X A;; /// typedef A B;; /// class C : public B {}; // derived from a typedef of X; /// \endcode; ///; /// In the following example, Bar matches isDerivedFrom(hasName(""X"")):; /// \code; /// class Foo;; /// typedef Foo X;; /// class Bar : public Foo {}; // derived from a type that X is a typedef of; /// \endcode; ///; /// In the following example, Bar matches isDerivedFrom(hasName(""NSObject"")); /// \code; /// @interface NSObject @end; /// @interface Bar : NSObject @end; /// \endcode; ///; /// Usable as: Matcher<CXXRecordDecl>, Matcher<ObjCInterfaceDecl>",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:953,Usability,Usab,Usable,953,"/// Matches C++ classes that are directly or indirectly derived from a class; /// matching \c Base, or Objective-C classes that directly or indirectly; /// subclass a class matching \c Base.; ///; /// Note that a class is not considered to be derived from itself.; ///; /// Example matches Y, Z, C (Base == hasName(""X"")); /// \code; /// class X;; /// class Y : public X {}; // directly derived; /// class Z : public Y {}; // indirectly derived; /// typedef X A;; /// typedef A B;; /// class C : public B {}; // derived from a typedef of X; /// \endcode; ///; /// In the following example, Bar matches isDerivedFrom(hasName(""X"")):; /// \code; /// class Foo;; /// typedef Foo X;; /// class Bar : public Foo {}; // derived from a type that X is a typedef of; /// \endcode; ///; /// In the following example, Bar matches isDerivedFrom(hasName(""NSObject"")); /// \code; /// @interface NSObject @end; /// @interface Bar : NSObject @end; /// \endcode; ///; /// Usable as: Matcher<CXXRecordDecl>, Matcher<ObjCInterfaceDecl>",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:437,Modifiability,Refactor,Refactor,437,"/// Matches C++ classes that have a direct or indirect base matching \p; /// BaseSpecMatcher.; ///; /// Example:; /// matcher hasAnyBase(hasType(cxxRecordDecl(hasName(""SpecialBase"")))); /// \code; /// class Foo;; /// class Bar : Foo {};; /// class Baz : Bar {};; /// class SpecialBase;; /// class Proxy : SpecialBase {}; // matches Proxy; /// class IndirectlyDerived : Proxy {}; //matches IndirectlyDerived; /// \endcode; ///; // FIXME: Refactor this and isDerivedFrom to reuse implementation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:427,Usability,Usab,Usable,427,"/// Matches AST nodes that have child AST nodes that match the; /// provided matcher.; ///; /// Example matches X, Y; /// (matcher = cxxRecordDecl(has(cxxRecordDecl(hasName(""X""))); /// \code; /// class X {}; // Matches X, because X::X is a class of name X inside X.; /// class Y { class X {}; };; /// class Z { class Y { class X {}; }; }; // Does not match Z.; /// \endcode; ///; /// ChildT must be an AST base type.; ///; /// Usable as: Any Matcher; /// Note that has is direct matcher, so it also matches things like implicit; /// casts and paren casts. If you are matching with expr then you should; /// probably consider using ignoringParenImpCasts like:; /// has(ignoringParenImpCasts(expr())).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:431,Usability,Usab,Usable,431,"/// Matches AST nodes that have descendant AST nodes that match the; /// provided matcher.; ///; /// Example matches X, Y, Z; /// (matcher = cxxRecordDecl(hasDescendant(cxxRecordDecl(hasName(""X""))))); /// \code; /// class X {}; // Matches X, because X::X is a class of name X inside X.; /// class Y { class X {}; };; /// class Z { class Y { class X {}; }; };; /// \endcode; ///; /// DescendantT must be an AST base type.; ///; /// Usable as: Any Matcher",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:588,Usability,Usab,Usable,588,"/// Matches AST nodes that have child AST nodes that match the; /// provided matcher.; ///; /// Example matches X, Y, Y::X, Z::Y, Z::Y::X; /// (matcher = cxxRecordDecl(forEach(cxxRecordDecl(hasName(""X""))); /// \code; /// class X {};; /// class Y { class X {}; }; // Matches Y, because Y::X is a class of name X; /// // inside Y.; /// class Z { class Y { class X {}; }; }; // Does not match Z.; /// \endcode; ///; /// ChildT must be an AST base type.; ///; /// As opposed to 'has', 'forEach' will cause a match for each result that; /// matches instead of only on the first one.; ///; /// Usable as: Any Matcher",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:813,Integrability,inject,injected,813,"/// Matches AST nodes that have descendant AST nodes that match the; /// provided matcher.; ///; /// Example matches X, A, A::X, B, B::C, B::C::X; /// (matcher = cxxRecordDecl(forEachDescendant(cxxRecordDecl(hasName(""X""))))); /// \code; /// class X {};; /// class A { class X {}; }; // Matches A, because A::X is a class of name; /// // X inside A.; /// class B { class C { class X {}; }; };; /// \endcode; ///; /// DescendantT must be an AST base type.; ///; /// As opposed to 'hasDescendant', 'forEachDescendant' will cause a match for; /// each result that matches instead of only on the first one.; ///; /// Note: Recursively combined ForEachDescendant can cause many matches:; /// cxxRecordDecl(forEachDescendant(cxxRecordDecl(; /// forEachDescendant(cxxRecordDecl()); /// ))); /// will match 10 times (plus injected class name matches) on:; /// \code; /// class A { class B { class C { class D { class E {}; }; }; }; };; /// \endcode; ///; /// Usable as: Any Matcher",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:813,Security,inject,injected,813,"/// Matches AST nodes that have descendant AST nodes that match the; /// provided matcher.; ///; /// Example matches X, A, A::X, B, B::C, B::C::X; /// (matcher = cxxRecordDecl(forEachDescendant(cxxRecordDecl(hasName(""X""))))); /// \code; /// class X {};; /// class A { class X {}; }; // Matches A, because A::X is a class of name; /// // X inside A.; /// class B { class C { class X {}; }; };; /// \endcode; ///; /// DescendantT must be an AST base type.; ///; /// As opposed to 'hasDescendant', 'forEachDescendant' will cause a match for; /// each result that matches instead of only on the first one.; ///; /// Note: Recursively combined ForEachDescendant can cause many matches:; /// cxxRecordDecl(forEachDescendant(cxxRecordDecl(; /// forEachDescendant(cxxRecordDecl()); /// ))); /// will match 10 times (plus injected class name matches) on:; /// \code; /// class A { class B { class C { class D { class E {}; }; }; }; };; /// \endcode; ///; /// Usable as: Any Matcher",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:950,Usability,Usab,Usable,950,"/// Matches AST nodes that have descendant AST nodes that match the; /// provided matcher.; ///; /// Example matches X, A, A::X, B, B::C, B::C::X; /// (matcher = cxxRecordDecl(forEachDescendant(cxxRecordDecl(hasName(""X""))))); /// \code; /// class X {};; /// class A { class X {}; }; // Matches A, because A::X is a class of name; /// // X inside A.; /// class B { class C { class X {}; }; };; /// \endcode; ///; /// DescendantT must be an AST base type.; ///; /// As opposed to 'hasDescendant', 'forEachDescendant' will cause a match for; /// each result that matches instead of only on the first one.; ///; /// Note: Recursively combined ForEachDescendant can cause many matches:; /// cxxRecordDecl(forEachDescendant(cxxRecordDecl(; /// forEachDescendant(cxxRecordDecl()); /// ))); /// will match 10 times (plus injected class name matches) on:; /// \code; /// class A { class B { class C { class D { class E {}; }; }; }; };; /// \endcode; ///; /// Usable as: Any Matcher",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:384,Usability,Usab,Usable,384,"/// Matches if the node or any descendant matches.; ///; /// Generates results for each match.; ///; /// For example, in:; /// \code; /// class A { class B {}; class C {}; };; /// \endcode; /// The matcher:; /// \code; /// cxxRecordDecl(hasName(""::A""),; /// findAll(cxxRecordDecl(isDefinition()).bind(""m""))); /// \endcode; /// will generate results for \c A, \c B and \c C.; ///; /// Usable as: Any Matcher",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:270,Usability,Usab,Usable,270,"/// Matches AST nodes that have a parent that matches the provided; /// matcher.; ///; /// Given; /// \code; /// void f() { for (;;) { int x = 42; if (true) { int x = 43; } } }; /// \endcode; /// \c compoundStmt(hasParent(ifStmt())) matches ""{ int x = 43; }"".; ///; /// Usable as: Any Matcher",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:301,Usability,Usab,Usable,301,"/// Matches AST nodes that have an ancestor that matches the provided; /// matcher.; ///; /// Given; /// \code; /// void f() { if (true) { int x = 42; } }; /// void g() { for (;;) { int x = 43; } }; /// \endcode; /// \c expr(integerLiteral(hasAncestor(ifStmt()))) matches \c 42, but not 43.; ///; /// Usable as: Any Matcher",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:197,Usability,Usab,Usable,197,"/// Matches if the provided matcher does not match.; ///; /// Example matches Y (matcher = cxxRecordDecl(unless(hasName(""X"")))); /// \code; /// class X {};; /// class Y {};; /// \endcode; ///; /// Usable as: Any Matcher",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:1260,Integrability,Inject,InjectedClassNameType,1260,"/// Matches a node if the declaration associated with that node; /// matches the given matcher.; ///; /// The associated declaration is:; /// - for type nodes, the declaration of the underlying type; /// - for CallExpr, the declaration of the callee; /// - for MemberExpr, the declaration of the referenced member; /// - for CXXConstructExpr, the declaration of the constructor; /// - for CXXNewExpr, the declaration of the operator new; /// - for ObjCIvarExpr, the declaration of the ivar; ///; /// For type nodes, hasDeclaration will generally match the declaration of the; /// sugared type. Given; /// \code; /// class X {};; /// typedef X Y;; /// Y y;; /// \endcode; /// in varDecl(hasType(hasDeclaration(decl()))) the decl will match the; /// typedefDecl. A common use case is to match the underlying, desugared type.; /// This can be achieved by using the hasUnqualifiedDesugaredType matcher:; /// \code; /// varDecl(hasType(hasUnqualifiedDesugaredType(; /// recordType(hasDeclaration(decl()))))); /// \endcode; /// In this matcher, the decl will match the CXXRecordDecl of class X.; ///; /// Usable as: Matcher<AddrLabelExpr>, Matcher<CallExpr>,; /// Matcher<CXXConstructExpr>, Matcher<CXXNewExpr>, Matcher<DeclRefExpr>,; /// Matcher<EnumType>, Matcher<InjectedClassNameType>, Matcher<LabelStmt>,; /// Matcher<MemberExpr>, Matcher<QualType>, Matcher<RecordType>,; /// Matcher<TagType>, Matcher<TemplateSpecializationType>,; /// Matcher<TemplateTypeParmType>, Matcher<TypedefType>,; /// Matcher<UnresolvedUsingType>",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:1260,Security,Inject,InjectedClassNameType,1260,"/// Matches a node if the declaration associated with that node; /// matches the given matcher.; ///; /// The associated declaration is:; /// - for type nodes, the declaration of the underlying type; /// - for CallExpr, the declaration of the callee; /// - for MemberExpr, the declaration of the referenced member; /// - for CXXConstructExpr, the declaration of the constructor; /// - for CXXNewExpr, the declaration of the operator new; /// - for ObjCIvarExpr, the declaration of the ivar; ///; /// For type nodes, hasDeclaration will generally match the declaration of the; /// sugared type. Given; /// \code; /// class X {};; /// typedef X Y;; /// Y y;; /// \endcode; /// in varDecl(hasType(hasDeclaration(decl()))) the decl will match the; /// typedefDecl. A common use case is to match the underlying, desugared type.; /// This can be achieved by using the hasUnqualifiedDesugaredType matcher:; /// \code; /// varDecl(hasType(hasUnqualifiedDesugaredType(; /// recordType(hasDeclaration(decl()))))); /// \endcode; /// In this matcher, the decl will match the CXXRecordDecl of class X.; ///; /// Usable as: Matcher<AddrLabelExpr>, Matcher<CallExpr>,; /// Matcher<CXXConstructExpr>, Matcher<CXXNewExpr>, Matcher<DeclRefExpr>,; /// Matcher<EnumType>, Matcher<InjectedClassNameType>, Matcher<LabelStmt>,; /// Matcher<MemberExpr>, Matcher<QualType>, Matcher<RecordType>,; /// Matcher<TagType>, Matcher<TemplateSpecializationType>,; /// Matcher<TemplateTypeParmType>, Matcher<TypedefType>,; /// Matcher<UnresolvedUsingType>",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:1099,Usability,Usab,Usable,1099,"/// Matches a node if the declaration associated with that node; /// matches the given matcher.; ///; /// The associated declaration is:; /// - for type nodes, the declaration of the underlying type; /// - for CallExpr, the declaration of the callee; /// - for MemberExpr, the declaration of the referenced member; /// - for CXXConstructExpr, the declaration of the constructor; /// - for CXXNewExpr, the declaration of the operator new; /// - for ObjCIvarExpr, the declaration of the ivar; ///; /// For type nodes, hasDeclaration will generally match the declaration of the; /// sugared type. Given; /// \code; /// class X {};; /// typedef X Y;; /// Y y;; /// \endcode; /// in varDecl(hasType(hasDeclaration(decl()))) the decl will match the; /// typedefDecl. A common use case is to match the underlying, desugared type.; /// This can be achieved by using the hasUnqualifiedDesugaredType matcher:; /// \code; /// varDecl(hasType(hasUnqualifiedDesugaredType(; /// recordType(hasDeclaration(decl()))))); /// \endcode; /// In this matcher, the decl will match the CXXRecordDecl of class X.; ///; /// Usable as: Matcher<AddrLabelExpr>, Matcher<CallExpr>,; /// Matcher<CXXConstructExpr>, Matcher<CXXNewExpr>, Matcher<DeclRefExpr>,; /// Matcher<EnumType>, Matcher<InjectedClassNameType>, Matcher<LabelStmt>,; /// Matcher<MemberExpr>, Matcher<QualType>, Matcher<RecordType>,; /// Matcher<TagType>, Matcher<TemplateSpecializationType>,; /// Matcher<TemplateTypeParmType>, Matcher<TypedefType>,; /// Matcher<UnresolvedUsingType>",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:45,Integrability,Message,Message,45,"/// Matches on the receiver of an ObjectiveC Message expression.; ///; /// Example; /// matcher = objCMessageExpr(hasReceiverType(asString(""UIWebView *"")));; /// matches the [webView ...] message invocation.; /// \code; /// NSString *webViewJavaScript = ...; /// UIWebView *webView = ...; /// [webView stringByEvaluatingJavaScriptFromString:webViewJavascript];; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:188,Integrability,message,message,188,"/// Matches on the receiver of an ObjectiveC Message expression.; ///; /// Example; /// matcher = objCMessageExpr(hasReceiverType(asString(""UIWebView *"")));; /// matches the [webView ...] message invocation.; /// \code; /// NSString *webViewJavaScript = ...; /// UIWebView *webView = ...; /// [webView stringByEvaluatingJavaScriptFromString:webViewJavascript];; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:171,Integrability,interface,interface,171,/// Returns true when the Objective-C method declaration is a class method.; ///; /// Example; /// matcher = objcMethodDecl(isClassMethod()); /// matches; /// \code; /// @interface I + (void)foo; @end; /// \endcode; /// but not; /// \code; /// @interface I - (void)bar; @end; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:245,Integrability,interface,interface,245,/// Returns true when the Objective-C method declaration is a class method.; ///; /// Example; /// matcher = objcMethodDecl(isClassMethod()); /// matches; /// \code; /// @interface I + (void)foo; @end; /// \endcode; /// but not; /// \code; /// @interface I - (void)bar; @end; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:178,Integrability,interface,interface,178,/// Returns true when the Objective-C method declaration is an instance method.; ///; /// Example; /// matcher = objcMethodDecl(isInstanceMethod()); /// matches; /// \code; /// @interface I - (void)bar; @end; /// \endcode; /// but not; /// \code; /// @interface I + (void)foo; @end; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:252,Integrability,interface,interface,252,/// Returns true when the Objective-C method declaration is an instance method.; ///; /// Example; /// matcher = objcMethodDecl(isInstanceMethod()); /// matches; /// \code; /// @interface I - (void)bar; @end; /// \endcode; /// but not; /// \code; /// @interface I + (void)foo; @end; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:38,Integrability,message,message,38,"/// Returns true when the Objective-C message is sent to a class.; ///; /// Example; /// matcher = objcMessageExpr(isClassMessage()); /// matches; /// \code; /// [NSString stringWithFormat:@""format""];; /// \endcode; /// but not; /// \code; /// NSString *x = @""hello"";; /// [x containsString:@""h""];; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:38,Integrability,message,message,38,"/// Returns true when the Objective-C message is sent to an instance.; ///; /// Example; /// matcher = objcMessageExpr(isInstanceMessage()); /// matches; /// \code; /// NSString *x = @""hello"";; /// [x containsString:@""h""];; /// \endcode; /// but not; /// \code; /// [NSString stringWithFormat:@""format""];; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:31,Integrability,message,message,31,"/// Matches if the Objective-C message is sent to an instance,; /// and the inner matcher matches on that instance.; ///; /// For example the method call in; /// \code; /// NSString *x = @""hello"";; /// [x containsString:@""h""];; /// \endcode; /// is matched by; /// objcMessageExpr(hasReceiver(declRefExpr(to(varDecl(hasName(""x""))))))",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:152,Integrability,message,message,152,"/// Matches when BaseName == Selector.getAsString(); ///; /// matcher = objCMessageExpr(hasSelector(""loadHTMLString:baseURL:""));; /// matches the outer message expr in the code below, but NOT the message; /// invocation for self.bodyView.; /// \code; /// [self.bodyView loadHTMLString:html baseURL:NULL];; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:196,Integrability,message,message,196,"/// Matches when BaseName == Selector.getAsString(); ///; /// matcher = objCMessageExpr(hasSelector(""loadHTMLString:baseURL:""));; /// matches the outer message expr in the code below, but NOT the message; /// invocation for self.bodyView.; /// \code; /// [self.bodyView loadHTMLString:html baseURL:NULL];; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:101,Performance,load,loadHTMLString,101,"/// Matches when BaseName == Selector.getAsString(); ///; /// matcher = objCMessageExpr(hasSelector(""loadHTMLString:baseURL:""));; /// matches the outer message expr in the code below, but NOT the message; /// invocation for self.bodyView.; /// \code; /// [self.bodyView loadHTMLString:html baseURL:NULL];; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:270,Performance,load,loadHTMLString,270,"/// Matches when BaseName == Selector.getAsString(); ///; /// matcher = objCMessageExpr(hasSelector(""loadHTMLString:baseURL:""));; /// matches the outer message expr in the code below, but NOT the message; /// invocation for self.bodyView.; /// \code; /// [self.bodyView loadHTMLString:html baseURL:NULL];; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:193,Integrability,message,message,193,"/// Matches ObjC selectors whose name contains; /// a substring matched by the given RegExp.; /// matcher = objCMessageExpr(matchesSelector(""loadHTMLString\:baseURL?""));; /// matches the outer message expr in the code below, but NOT the message; /// invocation for self.bodyView.; /// \code; /// [self.bodyView loadHTMLString:html baseURL:NULL];; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:237,Integrability,message,message,237,"/// Matches ObjC selectors whose name contains; /// a substring matched by the given RegExp.; /// matcher = objCMessageExpr(matchesSelector(""loadHTMLString\:baseURL?""));; /// matches the outer message expr in the code below, but NOT the message; /// invocation for self.bodyView.; /// \code; /// [self.bodyView loadHTMLString:html baseURL:NULL];; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:141,Performance,load,loadHTMLString,141,"/// Matches ObjC selectors whose name contains; /// a substring matched by the given RegExp.; /// matcher = objCMessageExpr(matchesSelector(""loadHTMLString\:baseURL?""));; /// matches the outer message expr in the code below, but NOT the message; /// invocation for self.bodyView.; /// \code; /// [self.bodyView loadHTMLString:html baseURL:NULL];; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:311,Performance,load,loadHTMLString,311,"/// Matches ObjC selectors whose name contains; /// a substring matched by the given RegExp.; /// matcher = objCMessageExpr(matchesSelector(""loadHTMLString\:baseURL?""));; /// matches the outer message expr in the code below, but NOT the message; /// invocation for self.bodyView.; /// \code; /// [self.bodyView loadHTMLString:html baseURL:NULL];; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:152,Availability,error,error,152,/// Matches when the selector is the empty selector; ///; /// Matches only when the selector of the objCMessageExpr is NULL. This may; /// represent an error condition in the tree!,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:187,Integrability,message,message,187,"/// Matches when the selector is a Unary Selector; ///; /// matcher = objCMessageExpr(matchesSelector(hasUnarySelector());; /// matches self.bodyView in the code below, but NOT the outer message; /// invocation of ""loadHTMLString:baseURL:"".; /// \code; /// [self.bodyView loadHTMLString:html baseURL:NULL];; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:215,Performance,load,loadHTMLString,215,"/// Matches when the selector is a Unary Selector; ///; /// matcher = objCMessageExpr(matchesSelector(hasUnarySelector());; /// matches self.bodyView in the code below, but NOT the outer message; /// invocation of ""loadHTMLString:baseURL:"".; /// \code; /// [self.bodyView loadHTMLString:html baseURL:NULL];; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:272,Performance,load,loadHTMLString,272,"/// Matches when the selector is a Unary Selector; ///; /// matcher = objCMessageExpr(matchesSelector(hasUnarySelector());; /// matches self.bodyView in the code below, but NOT the outer message; /// invocation of ""loadHTMLString:baseURL:"".; /// \code; /// [self.bodyView loadHTMLString:html baseURL:NULL];; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:136,Integrability,message,message,136,/// Matches when the selector is a keyword selector; ///; /// objCMessageExpr(hasKeywordSelector()) matches the generated setFrame; /// message expression in; ///; /// \code; /// UIWebView *webView = ...;; /// CGRect bodyFrame = webView.frame;; /// bodyFrame.size.height = self.bodyContentHeight;; /// webView.frame = bodyFrame;; /// // ^---- matches here; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:259,Performance,load,loadHTMLString,259,"/// Matches when the selector has the specified number of arguments; ///; /// matcher = objCMessageExpr(numSelectorArgs(0));; /// matches self.bodyView in the code below; ///; /// matcher = objCMessageExpr(numSelectorArgs(2));; /// matches the invocation of ""loadHTMLString:baseURL:"" but not that; /// of self.bodyView; /// \code; /// [self.bodyView loadHTMLString:html baseURL:NULL];; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:350,Performance,load,loadHTMLString,350,"/// Matches when the selector has the specified number of arguments; ///; /// matcher = objCMessageExpr(numSelectorArgs(0));; /// matches self.bodyView in the code below; ///; /// matcher = objCMessageExpr(numSelectorArgs(2));; /// matches the invocation of ""loadHTMLString:baseURL:"" but not that; /// of self.bodyView; /// \code; /// [self.bodyView loadHTMLString:html baseURL:NULL];; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:112,Integrability,message,message,112,"/// Matches 1) if the call expression's callee's declaration matches the; /// given matcher; or 2) if the Obj-C message expression's callee's method; /// declaration matches the given matcher.; ///; /// Example matches y.x() (matcher = callExpr(callee(; /// cxxMethodDecl(hasName(""x""))))); /// \code; /// class Y { public: void x(); };; /// void z() { Y y; y.x(); }; /// \endcode; ///; /// Example 2. Matches [I foo] with; /// objcMessageExpr(callee(objcMethodDecl(hasName(""foo"")))); ///; /// \code; /// @interface I: NSObject; /// +(void)foo;; /// @end; /// ...; /// [I foo]; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:505,Integrability,interface,interface,505,"/// Matches 1) if the call expression's callee's declaration matches the; /// given matcher; or 2) if the Obj-C message expression's callee's method; /// declaration matches the given matcher.; ///; /// Example matches y.x() (matcher = callExpr(callee(; /// cxxMethodDecl(hasName(""x""))))); /// \code; /// class Y { public: void x(); };; /// void z() { Y y; y.x(); }; /// \endcode; ///; /// Example 2. Matches [I foo] with; /// objcMessageExpr(callee(objcMethodDecl(hasName(""foo"")))); ///; /// \code; /// @interface I: NSObject; /// +(void)foo;; /// @end; /// ...; /// [I foo]; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:150,Modifiability,variab,variable,150,"/// Overloaded to match the declaration of the expression's or value; /// declaration's type.; ///; /// In case of a value declaration (for example a variable declaration),; /// this resolves one layer of indirection. For example, in the value; /// declaration ""X x;"", cxxRecordDecl(hasName(""X"")) matches the declaration of; /// X, while varDecl(hasType(cxxRecordDecl(hasName(""X"")))) matches the; /// declaration of x.; ///; /// Example matches x (matcher = expr(hasType(cxxRecordDecl(hasName(""X""))))); /// and z (matcher = varDecl(hasType(cxxRecordDecl(hasName(""X""))))); /// and friend class X (matcher = friendDecl(hasType(""X"")); /// and public virtual X (matcher = cxxBaseSpecifier(hasType(; /// cxxRecordDecl(hasName(""X"")))); /// \code; /// class X {};; /// void y(X &x) { x; X z; }; /// class Y { friend class X; };; /// class Z : public virtual X {};; /// \endcode; ///; /// Example matches class Derived; /// (matcher = cxxRecordDecl(hasAnyBase(hasType(cxxRecordDecl(hasName(""Base"")))))); /// \code; /// class Base {};; /// class Derived : Base {};; /// \endcode; ///; /// Usable as: Matcher<Expr>, Matcher<FriendDecl>, Matcher<ValueDecl>,; /// Matcher<CXXBaseSpecifier>",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:1080,Usability,Usab,Usable,1080,"/// Overloaded to match the declaration of the expression's or value; /// declaration's type.; ///; /// In case of a value declaration (for example a variable declaration),; /// this resolves one layer of indirection. For example, in the value; /// declaration ""X x;"", cxxRecordDecl(hasName(""X"")) matches the declaration of; /// X, while varDecl(hasType(cxxRecordDecl(hasName(""X"")))) matches the; /// declaration of x.; ///; /// Example matches x (matcher = expr(hasType(cxxRecordDecl(hasName(""X""))))); /// and z (matcher = varDecl(hasType(cxxRecordDecl(hasName(""X""))))); /// and friend class X (matcher = friendDecl(hasType(""X"")); /// and public virtual X (matcher = cxxBaseSpecifier(hasType(; /// cxxRecordDecl(hasName(""X"")))); /// \code; /// class X {};; /// void y(X &x) { x; X z; }; /// class Y { friend class X; };; /// class Z : public virtual X {};; /// \endcode; ///; /// Example matches class Derived; /// (matcher = cxxRecordDecl(hasAnyBase(hasType(cxxRecordDecl(hasName(""Base"")))))); /// \code; /// class Base {};; /// class Derived : Base {};; /// \endcode; ///; /// Usable as: Matcher<Expr>, Matcher<FriendDecl>, Matcher<ValueDecl>,; /// Matcher<CXXBaseSpecifier>",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:526,Usability,Usab,Usable,526,"/// Matches if the type location of a node matches the inner matcher.; ///; /// Examples:; /// \code; /// int x;; /// \endcode; /// declaratorDecl(hasTypeLoc(loc(asString(""int"")))); /// matches int x; ///; /// \code; /// auto x = int(3);; /// \endcode; /// cxxTemporaryObjectExpr(hasTypeLoc(loc(asString(""int"")))); /// matches int(3); ///; /// \code; /// struct Foo { Foo(int, int); };; /// auto x = Foo(1, 2);; /// \endcode; /// cxxFunctionalCastExpr(hasTypeLoc(loc(asString(""struct Foo"")))); /// matches Foo(1, 2); ///; /// Usable as: Matcher<BlockDecl>, Matcher<CXXBaseSpecifier>,; /// Matcher<CXXCtorInitializer>, Matcher<CXXFunctionalCastExpr>,; /// Matcher<CXXNewExpr>, Matcher<CXXTemporaryObjectExpr>,; /// Matcher<CXXUnresolvedConstructExpr>,; /// Matcher<ClassTemplateSpecializationDecl>, Matcher<CompoundLiteralExpr>,; /// Matcher<DeclaratorDecl>, Matcher<ExplicitCastExpr>,; /// Matcher<ObjCPropertyDecl>, Matcher<TemplateArgumentLoc>,; /// Matcher<TypedefNameDecl>",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:447,Usability,Usab,Usable,447,"/// Matches if a node refers to a declaration through a specific; /// using shadow declaration.; ///; /// Examples:; /// \code; /// namespace a { int f(); }; /// using a::f;; /// int x = f();; /// \endcode; /// declRefExpr(throughUsingDecl(anything())); /// matches \c f; ///; /// \code; /// namespace a { class X{}; }; /// using a::X;; /// X x;; /// \endcode; /// typeLoc(loc(usingType(throughUsingDecl(anything())))); /// matches \c X; ///; /// Usable as: Matcher<DeclRefExpr>, Matcher<UsingType>",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:14,Modifiability,variab,variable,14,/// Matches a variable declaration that has an initializer expression; /// that matches the given matcher.; ///; /// Example matches x (matcher = varDecl(hasInitializer(callExpr()))); /// \code; /// bool y() { return true; }; /// bool x = y();; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:14,Modifiability,variab,variable,14,/// Matches a variable serving as the implicit variable for a lambda init-; /// capture.; ///; /// Example matches x (matcher = varDecl(isInitCapture())); /// \code; /// auto f = [x=3]() { return x; };; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:47,Modifiability,variab,variable,47,/// Matches a variable serving as the implicit variable for a lambda init-; /// capture.; ///; /// Example matches x (matcher = varDecl(isInitCapture())); /// \code; /// auto f = [x=3]() { return x; };; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:28,Modifiability,variab,variable,28,/// \brief Matches a static variable with local scope.; ///; /// Example matches y (matcher = varDecl(isStaticLocal())); /// \code; /// void f() {; /// int x;; /// static int y;; /// }; /// static int z;; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:14,Modifiability,variab,variable,14,/// Matches a variable declaration that has function scope and is a; /// non-static local variable.; ///; /// Example matches x (matcher = varDecl(hasLocalStorage()); /// \code; /// void f() {; /// int x;; /// static int y;; /// }; /// int z;; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:90,Modifiability,variab,variable,90,/// Matches a variable declaration that has function scope and is a; /// non-static local variable.; ///; /// Example matches x (matcher = varDecl(hasLocalStorage()); /// \code; /// void f() {; /// int x;; /// static int y;; /// }; /// int z;; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:14,Modifiability,variab,variable,14,/// Matches a variable declaration that does not have local storage.; ///; /// Example matches y and z (matcher = varDecl(hasGlobalStorage()); /// \code; /// void f() {; /// int x;; /// static int y;; /// }; /// int z;; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:14,Modifiability,variab,variable,14,"/// Matches a variable declaration that has automatic storage duration.; ///; /// Example matches x, but not y, z, or a.; /// (matcher = varDecl(hasAutomaticStorageDuration()); /// \code; /// void f() {; /// int x;; /// static int y;; /// thread_local int z;; /// }; /// int a;; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:14,Modifiability,variab,variable,14,"/// Matches a variable declaration that has static storage duration.; /// It includes the variable declared at namespace scope and those declared; /// with ""static"" and ""extern"" storage class specifiers.; ///; /// \code; /// void f() {; /// int x;; /// static int y;; /// thread_local int z;; /// }; /// int a;; /// static int b;; /// extern int c;; /// varDecl(hasStaticStorageDuration()); /// matches the function declaration y, a, b and c.; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:90,Modifiability,variab,variable,90,"/// Matches a variable declaration that has static storage duration.; /// It includes the variable declared at namespace scope and those declared; /// with ""static"" and ""extern"" storage class specifiers.; ///; /// \code; /// void f() {; /// int x;; /// static int y;; /// thread_local int z;; /// }; /// int a;; /// static int b;; /// extern int c;; /// varDecl(hasStaticStorageDuration()); /// matches the function declaration y, a, b and c.; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:14,Modifiability,variab,variable,14,"/// Matches a variable declaration that has thread storage duration.; ///; /// Example matches z, but not x, z, or a.; /// (matcher = varDecl(hasThreadStorageDuration()); /// \code; /// void f() {; /// int x;; /// static int y;; /// thread_local int z;; /// }; /// int a;; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:14,Modifiability,variab,variable,14,"/// Matches a variable declaration that is an exception variable from; /// a C++ catch block, or an Objective-C \@catch statement.; ///; /// Example matches x (matcher = varDecl(isExceptionVariable()); /// \code; /// void f(int y) {; /// try {; /// } catch (int x) {; /// }; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:56,Modifiability,variab,variable,56,"/// Matches a variable declaration that is an exception variable from; /// a C++ catch block, or an Objective-C \@catch statement.; ///; /// Example matches x (matcher = varDecl(isExceptionVariable()); /// \code; /// void f(int y) {; /// try {; /// } catch (int x) {; /// }; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:96,Integrability,message,message-send,96,"/// Matches any argument of a call expression or a constructor call; /// expression, or an ObjC-message-send expression.; ///; /// Given; /// \code; /// void x(int, int, int) { int y; x(1, y, 42); }; /// \endcode; /// callExpr(hasAnyArgument(declRefExpr())); /// matches x(1, y, 42); /// with hasAnyArgument(...); /// matching y; ///; /// For ObjectiveC, given; /// \code; /// @interface I - (void) f:(int) y; @end; /// void foo(I *i) { [i f:12]; }; /// \endcode; /// objcMessageExpr(hasAnyArgument(integerLiteral(equals(12)))); /// matches [i f:12]",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:378,Integrability,interface,interface,378,"/// Matches any argument of a call expression or a constructor call; /// expression, or an ObjC-message-send expression.; ///; /// Given; /// \code; /// void x(int, int, int) { int y; x(1, y, 42); }; /// \endcode; /// callExpr(hasAnyArgument(declRefExpr())); /// matches x(1, y, 42); /// with hasAnyArgument(...); /// matching y; ///; /// For ObjectiveC, given; /// \code; /// @interface I - (void) f:(int) y; @end; /// void foo(I *i) { [i f:12]; }; /// \endcode; /// objcMessageExpr(hasAnyArgument(integerLiteral(equals(12)))); /// matches [i f:12]",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:107,Modifiability,variab,variable,107,"/// Matches a `LambdaCapture` that refers to the specified `VarDecl`. The; /// `VarDecl` can be a separate variable that is captured by value or; /// reference, or a synthesized variable if the capture has an initializer.; ///; /// Given; /// \code; /// void foo() {; /// int x;; /// auto f = [x](){};; /// auto g = [x = 1](){};; /// }; /// \endcode; /// In the matcher; /// lambdaExpr(hasAnyCapture(lambdaCapture(capturesVar(hasName(""x"")))),; /// capturesVar(hasName(""x"")) matches `x` and `x = 1`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:178,Modifiability,variab,variable,178,"/// Matches a `LambdaCapture` that refers to the specified `VarDecl`. The; /// `VarDecl` can be a separate variable that is captured by value or; /// reference, or a synthesized variable if the capture has an initializer.; ///; /// Given; /// \code; /// void foo() {; /// int x;; /// auto f = [x](){};; /// auto g = [x = 1](){};; /// }; /// \endcode; /// In the matcher; /// lambdaExpr(hasAnyCapture(lambdaCapture(capturesVar(hasName(""x"")))),; /// capturesVar(hasName(""x"")) matches `x` and `x = 1`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:346,Integrability,interface,interface,346,"/// Matches the n'th parameter of a function or an ObjC method; /// declaration or a block.; ///; /// Given; /// \code; /// class X { void f(int x) {} };; /// \endcode; /// cxxMethodDecl(hasParameter(0, hasType(varDecl()))); /// matches f(int x) {}; /// with hasParameter(...); /// matching int x; ///; /// For ObjectiveC, given; /// \code; /// @interface I - (void) f:(int) y; @end; /// \endcode; //; /// the matcher objcMethodDecl(hasParameter(0, hasName(""y""))); /// matches the declaration of method f with hasParameter; /// matching y.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:279,Security,access,access,279,"/// Matches all arguments and their respective types for a \c CallExpr or; /// \c CXXConstructExpr. It is very similar to \c forEachArgumentWithParam but; /// it works on calls through function pointers as well.; ///; /// The difference is, that function pointers do not provide access to a; /// \c ParmVarDecl, but only the \c QualType for each argument.; ///; /// Given; /// \code; /// void f(int i);; /// int y;; /// f(y);; /// void (*f_ptr)(int) = f;; /// f_ptr(y);; /// \endcode; /// callExpr(; /// forEachArgumentWithParamType(; /// declRefExpr(to(varDecl(hasName(""y"")))),; /// qualType(isInteger()).bind(""type); /// )); /// matches f(y) and f_ptr(y); /// with declRefExpr(...); /// matching int y; /// and qualType(...); /// matching int",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:8,Testability,test,test,8,"// This test is cheaper compared to the big matcher in the next if.; // Therefore, please keep this order.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:425,Integrability,interface,interface,425,"/// Matches any parameter of a function or an ObjC method declaration or a; /// block.; ///; /// Does not match the 'this' parameter of a method.; ///; /// Given; /// \code; /// class X { void f(int x, int y, int z) {} };; /// \endcode; /// cxxMethodDecl(hasAnyParameter(hasName(""y""))); /// matches f(int x, int y, int z) {}; /// with hasAnyParameter(...); /// matching int y; ///; /// For ObjectiveC, given; /// \code; /// @interface I - (void) f:(int) y; @end; /// \endcode; //; /// the matcher objcMethodDecl(hasAnyParameter(hasName(""y""))); /// matches the declaration of method f with hasParameter; /// matching y.; ///; /// For blocks, given; /// \code; /// b = ^(int y) { printf(""%d"", y) };; /// \endcode; ///; /// the matcher blockDecl(hasAnyParameter(hasName(""y""))); /// matches the declaration of the block b with hasParameter; /// matching y.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:35,Modifiability,variab,variable,35,"/// Matches extern ""C"" function or variable declarations.; ///; /// Given:; /// \code; /// extern ""C"" void f() {}; /// extern ""C"" { void g() {} }; /// void h() {}; /// extern ""C"" int x = 1;; /// extern ""C"" int y = 2;; /// int z = 3;; /// \endcode; /// functionDecl(isExternC()); /// matches the declaration of f and g, but not the declaration of h.; /// varDecl(isExternC()); /// matches the declaration of x and y, but not the declaration of z.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:12,Modifiability,variab,variable,12,"/// Matches variable/function declarations that have ""static"" storage; /// class specifier (""static"" keyword) written in the source.; ///; /// Given:; /// \code; /// static void f() {}; /// static int i = 0;; /// extern int j;; /// int k;; /// \endcode; /// functionDecl(isStaticStorageClass()); /// matches the function declaration f.; /// varDecl(isStaticStorageClass()); /// matches the variable declaration i.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:390,Modifiability,variab,variable,390,"/// Matches variable/function declarations that have ""static"" storage; /// class specifier (""static"" keyword) written in the source.; ///; /// Given:; /// \code; /// static void f() {}; /// static int i = 0;; /// extern int j;; /// int k;; /// \endcode; /// functionDecl(isStaticStorageClass()); /// matches the function declaration f.; /// varDecl(isStaticStorageClass()); /// matches the variable declaration i.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:22,Modifiability,variab,variable,22,"/// Matches constexpr variable and function declarations,; /// and if constexpr.; ///; /// Given:; /// \code; /// constexpr int foo = 42;; /// constexpr int bar();; /// void baz() { if constexpr(1 > 0) {} }; /// \endcode; /// varDecl(isConstexpr()); /// matches the declaration of foo.; /// functionDecl(isConstexpr()); /// matches the declaration of bar.; /// ifStmt(isConstexpr()); /// matches the if statement in baz.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:22,Modifiability,variab,variable,22,"/// Matches constinit variable declarations.; ///; /// Given:; /// \code; /// constinit int foo = 42;; /// constinit const char* bar = ""bar"";; /// int baz = 42;; /// [[clang::require_constant_initialization]] int xyz = 42;; /// \endcode; /// varDecl(isConstinit()); /// matches the declaration of `foo` and `bar`, but not `baz` and `xyz`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:746,Modifiability,variab,variable,746,"/// Matches if a node equals a previously bound node.; ///; /// Matches a node if it equals the node previously bound to \p ID.; ///; /// Given; /// \code; /// class X { int a; int b; };; /// \endcode; /// cxxRecordDecl(; /// has(fieldDecl(hasName(""a""), hasType(type().bind(""t"")))),; /// has(fieldDecl(hasName(""b""), hasType(type(equalsBoundNode(""t"")))))); /// matches the class \c X, as \c a and \c b have the same type.; ///; /// Note that when multiple matches are involved via \c forEach* matchers,; /// \c equalsBoundNodes acts as a filter.; /// For example:; /// compoundStmt(; /// forEachDescendant(varDecl().bind(""d"")),; /// forEachDescendant(declRefExpr(to(decl(equalsBoundNode(""d"")))))); /// will trigger a match for each combination of variable declaration; /// and reference to that variable declaration within a compound statement.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:794,Modifiability,variab,variable,794,"/// Matches if a node equals a previously bound node.; ///; /// Matches a node if it equals the node previously bound to \p ID.; ///; /// Given; /// \code; /// class X { int a; int b; };; /// \endcode; /// cxxRecordDecl(; /// has(fieldDecl(hasName(""a""), hasType(type().bind(""t"")))),; /// has(fieldDecl(hasName(""b""), hasType(type(equalsBoundNode(""t"")))))); /// matches the class \c X, as \c a and \c b have the same type.; ///; /// Note that when multiple matches are involved via \c forEach* matchers,; /// \c equalsBoundNodes acts as a filter.; /// For example:; /// compoundStmt(; /// forEachDescendant(varDecl().bind(""d"")),; /// forEachDescendant(declRefExpr(to(decl(equalsBoundNode(""d"")))))); /// will trigger a match for each combination of variable declaration; /// and reference to that variable declaration within a compound statement.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:26,Modifiability,variab,variable,26,/// Matches the condition variable statement in an if statement.; ///; /// Given; /// \code; /// if (A* a = GetAPointer()) {}; /// \endcode; /// hasConditionVariableStatement(...); /// matches 'A* a = GetAPointer()'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:793,Usability,Usab,Usable,793,"/// Matches literals that are equal to the given value of type ValueT.; ///; /// Given; /// \code; /// f('\0', false, 3.14, 42);; /// \endcode; /// characterLiteral(equals(0)); /// matches '\0'; /// cxxBoolLiteral(equals(false)) and cxxBoolLiteral(equals(0)); /// match false; /// floatLiteral(equals(3.14)) and floatLiteral(equals(314e-2)); /// match 3.14; /// integerLiteral(equals(42)); /// matches 42; ///; /// Note that you cannot directly match a negative numeric literal because the; /// minus sign is not part of the literal: It is a unary operator whose operand; /// is the positive numeric literal. Instead, you must use a unaryOperator(); /// matcher to match the minus sign:; ///; /// unaryOperator(hasOperatorName(""-""),; /// hasUnaryOperand(integerLiteral(equals(13)))); ///; /// Usable as: Matcher<CharacterLiteral>, Matcher<CXXBoolLiteralExpr>,; /// Matcher<FloatingLiteral>, Matcher<IntegerLiteral>",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:328,Integrability,interface,interface,328,"/// Matches if a declaration has a body attached.; ///; /// Example matches A, va, fa; /// \code; /// class A {};; /// class B; // Doesn't match, as it has no body.; /// int va;; /// extern int vb; // Doesn't match, as it doesn't define the variable.; /// void fa() {}; /// void fb(); // Doesn't match, as it has no body.; /// @interface X; /// - (void)ma; // Doesn't match, interface is declaration.; /// @end; /// @implementation X; /// - (void)ma {}; /// @end; /// \endcode; ///; /// Usable as: Matcher<TagDecl>, Matcher<VarDecl>, Matcher<FunctionDecl>,; /// Matcher<ObjCMethodDecl>",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:375,Integrability,interface,interface,375,"/// Matches if a declaration has a body attached.; ///; /// Example matches A, va, fa; /// \code; /// class A {};; /// class B; // Doesn't match, as it has no body.; /// int va;; /// extern int vb; // Doesn't match, as it doesn't define the variable.; /// void fa() {}; /// void fb(); // Doesn't match, as it has no body.; /// @interface X; /// - (void)ma; // Doesn't match, interface is declaration.; /// @end; /// @implementation X; /// - (void)ma {}; /// @end; /// \endcode; ///; /// Usable as: Matcher<TagDecl>, Matcher<VarDecl>, Matcher<FunctionDecl>,; /// Matcher<ObjCMethodDecl>",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:241,Modifiability,variab,variable,241,"/// Matches if a declaration has a body attached.; ///; /// Example matches A, va, fa; /// \code; /// class A {};; /// class B; // Doesn't match, as it has no body.; /// int va;; /// extern int vb; // Doesn't match, as it doesn't define the variable.; /// void fa() {}; /// void fb(); // Doesn't match, as it has no body.; /// @interface X; /// - (void)ma; // Doesn't match, interface is declaration.; /// @end; /// @implementation X; /// - (void)ma {}; /// @end; /// \endcode; ///; /// Usable as: Matcher<TagDecl>, Matcher<VarDecl>, Matcher<FunctionDecl>,; /// Matcher<ObjCMethodDecl>",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:487,Usability,Usab,Usable,487,"/// Matches if a declaration has a body attached.; ///; /// Example matches A, va, fa; /// \code; /// class A {};; /// class B; // Doesn't match, as it has no body.; /// int va;; /// extern int vb; // Doesn't match, as it doesn't define the variable.; /// void fa() {}; /// void fb(); // Doesn't match, as it has no body.; /// @interface X; /// - (void)ma; // Doesn't match, interface is declaration.; /// @end; /// @implementation X; /// - (void)ma {}; /// @end; /// \endcode; ///; /// Usable as: Matcher<TagDecl>, Matcher<VarDecl>, Matcher<FunctionDecl>,; /// Matcher<ObjCMethodDecl>",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:546,Modifiability,inherit,inheritance,546,"/// Matches each method overridden by the given method. This matcher may; /// produce multiple matches.; ///; /// Given; /// \code; /// class A { virtual void f(); };; /// class B : public A { void f(); };; /// class C : public B { void f(); };; /// \endcode; /// cxxMethodDecl(ofClass(hasName(""C"")),; /// forEachOverridden(cxxMethodDecl().bind(""b""))).bind(""d""); /// matches once, with ""b"" binding ""A::f"" and ""d"" binding ""C::f"" (Note; /// that B::f is not overridden by C::f).; ///; /// The check can produce multiple matches in case of multiple inheritance, e.g.; /// \code; /// class A1 { virtual void f(); };; /// class A2 { virtual void f(); };; /// class C : public A1, public A2 { void f(); };; /// \endcode; /// cxxMethodDecl(ofClass(hasName(""C"")),; /// forEachOverridden(cxxMethodDecl().bind(""b""))).bind(""d""); /// matches twice, once with ""b"" binding ""A1::f"" and ""d"" binding ""C::f"", and; /// once with ""b"" binding ""A2::f"" and ""d"" binding ""C::f"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:93,Modifiability,inherit,inheritance,93,"/// Matches declarations of virtual methods and C++ base specifers that specify; /// virtual inheritance.; ///; /// Example:; /// \code; /// class A {; /// public:; /// virtual void x(); // matches x; /// };; /// \endcode; ///; /// Example:; /// \code; /// class Base {};; /// class DirectlyDerived : virtual Base {}; // matches Base; /// class IndirectlyDerived : DirectlyDerived, Base {}; // matches Base; /// \endcode; ///; /// Usable as: Matcher<CXXMethodDecl>, Matcher<CXXBaseSpecifier>",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:431,Usability,Usab,Usable,431,"/// Matches declarations of virtual methods and C++ base specifers that specify; /// virtual inheritance.; ///; /// Example:; /// \code; /// class A {; /// public:; /// virtual void x(); // matches x; /// };; /// \endcode; ///; /// Example:; /// \code; /// class Base {};; /// class DirectlyDerived : virtual Base {}; // matches Base; /// class IndirectlyDerived : DirectlyDerived, Base {}; // matches Base; /// \endcode; ///; /// Usable as: Matcher<CXXMethodDecl>, Matcher<CXXBaseSpecifier>",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:235,Integrability,interface,interface,235,"/// Matches QualType nodes that are of any pointer type; this includes; /// the Objective-C object pointer type, which is different despite being; /// syntactically similar.; ///; /// Given; /// \code; /// int *i = nullptr;; ///; /// @interface Foo; /// @end; /// Foo *f;; ///; /// int j;; /// \endcode; /// varDecl(hasType(isAnyPointer())); /// matches ""int *i"" and ""Foo *f"", but not ""int j"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:78,Modifiability,variab,variable,78,"/// Matches template instantiations of function, class, or static; /// member variable template instantiations.; ///; /// Given; /// \code; /// template <typename T> class X {}; class A {}; X<A> x;; /// \endcode; /// or; /// \code; /// template <typename T> class X {}; class A {}; template class X<A>;; /// \endcode; /// or; /// \code; /// template <typename T> class X {}; class A {}; extern template class X<A>;; /// \endcode; /// cxxRecordDecl(hasName(""::X""), isTemplateInstantiation()); /// matches the template instantiation of X<A>.; ///; /// But given; /// \code; /// template <typename T> class X {}; class A {};; /// template <> class X<A> {}; X<A> x;; /// \endcode; /// cxxRecordDecl(hasName(""::X""), isTemplateInstantiation()); /// does not match, as X<A> is an explicit template specialization.; ///; /// Usable as: Matcher<FunctionDecl>, Matcher<VarDecl>, Matcher<CXXRecordDecl>",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:817,Usability,Usab,Usable,817,"/// Matches template instantiations of function, class, or static; /// member variable template instantiations.; ///; /// Given; /// \code; /// template <typename T> class X {}; class A {}; X<A> x;; /// \endcode; /// or; /// \code; /// template <typename T> class X {}; class A {}; template class X<A>;; /// \endcode; /// or; /// \code; /// template <typename T> class X {}; class A {}; extern template class X<A>;; /// \endcode; /// cxxRecordDecl(hasName(""::X""), isTemplateInstantiation()); /// matches the template instantiation of X<A>.; ///; /// But given; /// \code; /// template <typename T> class X {}; class A {};; /// template <> class X<A> {}; X<A> x;; /// \endcode; /// cxxRecordDecl(hasName(""::X""), isTemplateInstantiation()); /// does not match, as X<A> is an explicit template specialization.; ///; /// Usable as: Matcher<FunctionDecl>, Matcher<VarDecl>, Matcher<CXXRecordDecl>",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:88,Modifiability,variab,variable,88,"/// Matches explicit template specializations of function, class, or; /// static member variable template instantiations.; ///; /// Given; /// \code; /// template<typename T> void A(T t) { }; /// template<> void A(int N) { }; /// \endcode; /// functionDecl(isExplicitTemplateSpecialization()); /// matches the specialization A<int>().; ///; /// Usable as: Matcher<FunctionDecl>, Matcher<VarDecl>, Matcher<CXXRecordDecl>",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:345,Usability,Usab,Usable,345,"/// Matches explicit template specializations of function, class, or; /// static member variable template instantiations.; ///; /// Given; /// \code; /// template<typename T> void A(T t) { }; /// template<> void A(int N) { }; /// \endcode; /// functionDecl(isExplicitTemplateSpecialization()); /// matches the specialization A<int>().; ///; /// Usable as: Matcher<FunctionDecl>, Matcher<VarDecl>, Matcher<CXXRecordDecl>",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:268,Modifiability,variab,variable,268,"/// Matches `QualifiedTypeLoc`s that have an unqualified `TypeLoc` matching; /// `InnerMatcher`.; ///; /// Given; /// \code; /// int* const x;; /// const int y;; /// \endcode; /// qualifiedTypeLoc(hasUnqualifiedLoc(pointerTypeLoc())); /// matches the `TypeLoc` of the variable declaration of `x`, but not `y`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:180,Modifiability,variab,variable,180,/// Matches C or C++ elaborated `TypeLoc`s.; ///; /// Given; /// \code; /// struct s {};; /// struct s ss;; /// \endcode; /// elaboratedTypeLoc(); /// matches the `TypeLoc` of the variable declaration of `ss`.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:344,Modifiability,variab,variable,344,"/// Matches elaborated `TypeLoc`s that have a named `TypeLoc` matching; /// `InnerMatcher`.; ///; /// Given; /// \code; /// template <typename T>; /// class C {};; /// class C<int> c;; ///; /// class D {};; /// class D d;; /// \endcode; /// elaboratedTypeLoc(hasNamedTypeLoc(templateSpecializationTypeLoc()));; /// matches the `TypeLoc` of the variable declaration of `c`, but not `d`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:248,Usability,Usab,Usable,248,"/// Matches arrays and C99 complex types that have a specific element; /// type.; ///; /// Given; /// \code; /// struct A {};; /// A a[7];; /// int b[7];; /// \endcode; /// arrayType(hasElementType(builtinType())); /// matches ""int b[7]""; ///; /// Usable as: Matcher<ArrayType>, Matcher<ComplexType>",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:45,Integrability,depend,dependent,45,"/// Matches C++ arrays whose size is a value-dependent expression.; ///; /// Given; /// \code; /// template<typename T, int Size>; /// class array {; /// T data[Size];; /// };; /// \endcode; /// dependentSizedArrayType(); /// matches ""T data[Size]""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:195,Integrability,depend,dependentSizedArrayType,195,"/// Matches C++ arrays whose size is a value-dependent expression.; ///; /// Given; /// \code; /// template<typename T, int Size>; /// class array {; /// T data[Size];; /// };; /// \endcode; /// dependentSizedArrayType(); /// matches ""T data[Size]""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:75,Integrability,depend,dependent,75,"/// Matches C++ extended vector type where either the type or size is; /// dependent.; ///; /// Given; /// \code; /// template<typename T, int Size>; /// class vector {; /// typedef T __attribute__((ext_vector_type(Size))) type;; /// };; /// \endcode; /// dependentSizedExtVectorType(); /// matches ""T __attribute__((ext_vector_type(Size)))""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:256,Integrability,depend,dependentSizedExtVectorType,256,"/// Matches C++ extended vector type where either the type or size is; /// dependent.; ///; /// Given; /// \code; /// template<typename T, int Size>; /// class vector {; /// typedef T __attribute__((ext_vector_type(Size))) type;; /// };; /// \endcode; /// dependentSizedExtVectorType(); /// matches ""T __attribute__((ext_vector_type(Size)))""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:16,Modifiability,extend,extended,16,"/// Matches C++ extended vector type where either the type or size is; /// dependent.; ///; /// Given; /// \code; /// template<typename T, int Size>; /// class vector {; /// typedef T __attribute__((ext_vector_type(Size))) type;; /// };; /// \endcode; /// dependentSizedExtVectorType(); /// matches ""T __attribute__((ext_vector_type(Size)))""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:219,Modifiability,variab,variableArrayType,219,"/// Matches C arrays with a specified size that is not an; /// integer-constant-expression.; ///; /// Given; /// \code; /// void f() {; /// int a[] = { 2, 3 }; /// int b[42];; /// int c[a[0]];; /// }; /// \endcode; /// variableArrayType(); /// matches ""int c[a[0]]""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:15,Modifiability,Variab,VariableArrayType,15,"/// Matches \c VariableArrayType nodes that have a specific size; /// expression.; ///; /// Given; /// \code; /// void f(int b) {; /// int a[b];; /// }; /// \endcode; /// variableArrayType(hasSizeExpr(ignoringImpCasts(declRefExpr(to(; /// varDecl(hasName(""b""))))))); /// matches ""int a[b]""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:171,Modifiability,variab,variableArrayType,171,"/// Matches \c VariableArrayType nodes that have a specific size; /// expression.; ///; /// Given; /// \code; /// void f(int b) {; /// int a[b];; /// }; /// \endcode; /// variableArrayType(hasSizeExpr(ignoringImpCasts(declRefExpr(to(; /// varDecl(hasName(""b""))))))); /// matches ""int a[b]""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:221,Usability,Usab,Usable,221,"/// Matches atomic types with a specific value type.; ///; /// Given; /// \code; /// _Atomic(int) i;; /// _Atomic(float) f;; /// \endcode; /// atomicType(hasValueType(isInteger())); /// matches ""_Atomic(int) i""; ///; /// Usable as: Matcher<AtomicType>",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:330,Usability,Usab,Usable,330,"/// Matches \c AutoType nodes where the deduced type is a specific type.; ///; /// Note: There is no \c TypeLoc for the deduced type and thus no; /// \c getDeducedLoc() matcher.; ///; /// Given; /// \code; /// auto a = 1;; /// auto b = 2.0;; /// \endcode; /// autoType(hasDeducedType(isInteger())); /// matches ""auto a""; ///; /// Usable as: Matcher<AutoType>",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:261,Usability,Usab,Usable,261,"/// Matches \c DecltypeType or \c UsingType nodes to find the underlying type.; ///; /// Given; /// \code; /// decltype(1) a = 1;; /// decltype(2.0) b = 2.0;; /// \endcode; /// decltypeType(hasUnderlyingType(isInteger())); /// matches the type of ""a""; ///; /// Usable as: Matcher<DecltypeType>, Matcher<UsingType>",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:313,Usability,Usab,Usable,313,/// Matches \c ParenType nodes where the inner type is a specific type.; ///; /// Given; /// \code; /// int (*ptr_to_array)[4];; /// int (*ptr_to_func)(int);; /// \endcode; ///; /// \c varDecl(hasType(pointsTo(parenType(innerType(functionType()))))) matches; /// \c ptr_to_func but not \c ptr_to_array.; ///; /// Usable as: Matcher<ParenType>,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:170,Integrability,interface,interface,170,"/// Matches pointer types, but does not match Objective-C object pointer; /// types.; ///; /// Given; /// \code; /// int *a;; /// int &b = *a;; /// int c = 5;; ///; /// @interface Foo; /// @end; /// Foo *f;; /// \endcode; /// pointerType(); /// matches ""int *a"", but does not match ""Foo *f"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:181,Integrability,interface,interface,181,"/// Matches an Objective-C object pointer type, which is different from; /// a pointer type, despite being syntactically similar.; ///; /// Given; /// \code; /// int *a;; ///; /// @interface Foo; /// @end; /// Foo *f;; /// \endcode; /// pointerType(); /// matches ""Foo *f"", but does not match ""int *a"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:298,Usability,Usab,Usable,298,"/// Narrows PointerType (and similar) matchers to those where the; /// \c pointee matches a given matcher.; ///; /// Given; /// \code; /// int *a;; /// int const *b;; /// float const *f;; /// \endcode; /// pointerType(pointee(isConstQualified(), isInteger())); /// matches ""int const *b""; ///; /// Usable as: Matcher<BlockPointerType>, Matcher<MemberPointerType>,; /// Matcher<PointerType>, Matcher<ReferenceType>",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:65,Energy Efficiency,Green,Green,65,/// Matches enum types.; ///; /// Given; /// \code; /// enum C { Green };; /// enum class S { Red };; ///; /// C c;; /// S s;; /// \endcode; //; /// \c enumType() matches the type of the variable declarations of both \c c and; /// \c s.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:187,Modifiability,variab,variable,187,/// Matches enum types.; ///; /// Given; /// \code; /// enum C { Green };; /// enum class S { Red };; ///; /// C c;; /// S s;; /// \endcode; //; /// \c enumType() matches the type of the variable declarations of both \c c and; /// \c s.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:312,Modifiability,variab,variable,312,/// Matches template specialization types.; ///; /// Given; /// \code; /// template <typename T>; /// class C { };; ///; /// template class C<int>; // A; /// C<char> var; // B; /// \endcode; ///; /// \c templateSpecializationType() matches the type of the explicit; /// instantiation in \c A and the type of the variable declaration in \c B.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:309,Modifiability,variab,variable,309,"/// Matches C++17 deduced template specialization types, e.g. deduced class; /// template types.; ///; /// Given; /// \code; /// template <typename T>; /// class C { public: C(T); };; ///; /// C c(123);; /// \endcode; /// \c deducedTemplateSpecializationType() matches the type in the declaration; /// of the variable \c c.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:201,Modifiability,variab,variable,201,"/// Matches record types (e.g. structs, classes).; ///; /// Given; /// \code; /// class C {};; /// struct S {};; ///; /// C c;; /// S s;; /// \endcode; ///; /// \c recordType() matches the type of the variable declarations of both \c c; /// and \c s.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:193,Modifiability,variab,variable,193,/// Matches tag types (record and enum types).; ///; /// Given; /// \code; /// enum E {};; /// class C {};; ///; /// E e;; /// C c;; /// \endcode; ///; /// \c tagType() matches the type of the variable declarations of both \c e; /// and \c c.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:309,Modifiability,variab,variable,309,/// Matches types specified with an elaborated type keyword or with a; /// qualified name.; ///; /// Given; /// \code; /// namespace N {; /// namespace M {; /// class D {};; /// }; /// }; /// class C {};; ///; /// class C c;; /// N::M::D d;; /// \endcode; ///; /// \c elaboratedType() matches the type of the variable declarations of both; /// \c c and \c d.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:363,Modifiability,variab,variable,363,"/// Matches ElaboratedTypes whose qualifier, a NestedNameSpecifier,; /// matches \c InnerMatcher if the qualifier exists.; ///; /// Given; /// \code; /// namespace N {; /// namespace M {; /// class D {};; /// }; /// }; /// N::M::D d;; /// \endcode; ///; /// \c elaboratedType(hasQualifier(hasPrefix(specifiesNamespace(hasName(""N"")))); /// matches the type of the variable declaration of \c d.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:318,Modifiability,variab,variable,318,"/// Matches ElaboratedTypes whose named type matches \c InnerMatcher.; ///; /// Given; /// \code; /// namespace N {; /// namespace M {; /// class D {};; /// }; /// }; /// N::M::D d;; /// \endcode; ///; /// \c elaboratedType(namesType(recordType(; /// hasDeclaration(namedDecl(hasName(""D"")))))) matches the type of the variable; /// declaration of \c d.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:208,Modifiability,variab,variable,208,/// Matches types specified through a using declaration.; ///; /// Given; /// \code; /// namespace a { struct S {}; }; /// using a::S;; /// S s;; /// \endcode; ///; /// \c usingType() matches the type of the variable declaration of \c s.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:12,Integrability,inject,injected,12,"/// Matches injected class name types.; ///; /// Example matches S s, but not S<T> s.; /// (matcher = parmVarDecl(hasType(injectedClassNameType()))); /// \code; /// template <typename T> struct S {; /// void f(S s);; /// void g(S<T> s);; /// };; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:122,Integrability,inject,injectedClassNameType,122,"/// Matches injected class name types.; ///; /// Example matches S s, but not S<T> s.; /// (matcher = parmVarDecl(hasType(injectedClassNameType()))); /// \code; /// template <typename T> struct S {; /// void f(S s);; /// void g(S<T> s);; /// };; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:12,Security,inject,injected,12,"/// Matches injected class name types.; ///; /// Example matches S s, but not S<T> s.; /// (matcher = parmVarDecl(hasType(injectedClassNameType()))); /// \code; /// template <typename T> struct S {; /// void f(S s);; /// void g(S<T> s);; /// };; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:122,Security,inject,injectedClassNameType,122,"/// Matches injected class name types.; ///; /// Example matches S s, but not S<T> s.; /// (matcher = parmVarDecl(hasType(injectedClassNameType()))); /// \code; /// template <typename T> struct S {; /// void f(S s);; /// void g(S<T> s);; /// };; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:60,Usability,guid,guide,60,"/// Matches constructor, conversion function, and deduction guide declarations; /// that have an explicit specifier if this explicit specifier is resolved to; /// true.; ///; /// Given; /// \code; /// template<bool b>; /// struct S {; /// S(int); // #1; /// explicit S(double); // #2; /// operator int(); // #3; /// explicit operator bool(); // #4; /// explicit(false) S(bool) // # 7; /// explicit(true) S(char) // # 8; /// explicit(b) S(S) // # 9; /// };; /// S(int) -> S<true> // #5; /// explicit S(double) -> S<false> // #6; /// \endcode; /// cxxConstructorDecl(isExplicit()) will match #2 and #8, but not #1, #7 or #9.; /// cxxConversionDecl(isExplicit()) will match #4, but not #3.; /// cxxDeductionGuideDecl(isExplicit()) will match #6, but not #5.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:23,Modifiability,variab,variables,23,"/// Matches functions, variables and namespace declarations that are marked with; /// the inline keyword.; ///; /// Given; /// \code; /// inline void f();; /// void g();; /// namespace n {; /// inline namespace m {}; /// }; /// inline int Foo = 5;; /// \endcode; /// functionDecl(isInline()) will match ::f().; /// namespaceDecl(isInline()) will match n::m.; /// varDecl(isInline()) will match Foo;",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:134,Modifiability,polymorphi,polymorphic,134,// This is required because the spelling of the function used to determine; // whether inline is specified or not differs between the polymorphic types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:478,Performance,queue,queue,478,"/// Matches declaration of the function, method, or block the statement; /// belongs to.; ///; /// Given:; /// \code; /// F& operator=(const F& o) {; /// std::copy_if(o.begin(), o.end(), begin(), [](V v) { return v > 0; });; /// return *this;; /// }; /// \endcode; /// returnStmt(forCallable(functionDecl(hasName(""operator="")))); /// matches 'return *this'; /// but does not match 'return v > 0'; ///; /// Given:; /// \code; /// -(void) foo {; /// int x = 1;; /// dispatch_sync(queue, ^{ int y = 2; });; /// }; /// \endcode; /// declStmt(forCallable(objcMethodDecl())); /// matches 'int x = 1'; /// but does not match 'int y = 2'.; /// whereas declStmt(forCallable(blockDecl())); /// matches 'int y = 2'; /// but does not match 'int x = 1'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:66,Integrability,wrap,wrapped,66,"/// Matches expressions that match InnerMatcher that are possibly wrapped in an; /// elidable constructor and other corresponding bookkeeping nodes.; ///; /// In C++17, elidable copy constructors are no longer being generated in the; /// AST as it is not permitted by the standard. They are, however, part of the; /// AST in C++14 and earlier. So, a matcher must abstract over these differences; /// to work in all language modes. This matcher skips elidable constructor-call; /// AST nodes, `ExprWithCleanups` nodes wrapping elidable constructor-calls and; /// various implicit nodes inside the constructor calls, all of which will not; /// appear in the C++17 AST.; ///; /// Given; ///; /// \code; /// struct H {};; /// H G();; /// void f() {; /// H D = G();; /// }; /// \endcode; ///; /// ``varDecl(hasInitializer(ignoringElidableConstructorCall(callExpr())))``; /// matches ``H D = G()`` in C++11 through C++17 (and beyond).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:517,Integrability,wrap,wrapping,517,"/// Matches expressions that match InnerMatcher that are possibly wrapped in an; /// elidable constructor and other corresponding bookkeeping nodes.; ///; /// In C++17, elidable copy constructors are no longer being generated in the; /// AST as it is not permitted by the standard. They are, however, part of the; /// AST in C++14 and earlier. So, a matcher must abstract over these differences; /// to work in all language modes. This matcher skips elidable constructor-call; /// AST nodes, `ExprWithCleanups` nodes wrapping elidable constructor-calls and; /// various implicit nodes inside the constructor calls, all of which will not; /// appear in the C++17 AST.; ///; /// Given; ///; /// \code; /// struct H {};; /// H G();; /// void f() {; /// H D = G();; /// }; /// \endcode; ///; /// ``varDecl(hasInitializer(ignoringElidableConstructorCall(callExpr())))``; /// matches ``H D = G()`` in C++11 through C++17 (and beyond).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:1398,Integrability,interface,interface,1398,"//===- ASTMatchersInternal.h - Structural query framework -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Implements the base layer of the matcher framework.; //; // Matchers are methods that return a Matcher<T> which provides a method; // Matches(...) which is a predicate on an AST node. The Matches method's; // parameters define the context of the match, which allows matchers to recurse; // or store the current node as bound to a specific string, so that it can be; // retrieved later.; //; // In general, matchers have two parts:; // 1. A function Matcher<T> MatcherName(<arguments>) which returns a Matcher<T>; // based on the arguments and optionally on template type deduction based; // on the arguments. Matcher<T>s form an implicit reverse hierarchy; // to clang's AST class hierarchy, meaning that you can use a Matcher<Base>; // everywhere a Matcher<Derived> is required.; // 2. An implementation of a class derived from MatcherInterface<T>.; //; // The matcher functions are defined in ASTMatchers.h. To make it possible; // to implement both the matcher function and the implementation of the matcher; // interface in one place, ASTMatcherMacros.h defines macros that allow; // implementing a matcher in a single place.; //; // This file contains the base classes needed to construct the actual matchers.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:68,Security,access,accessible,68,"/// A type-list implementation.; ///; /// A ""linked list"" of types, accessible by using the ::head and ::tail; /// typedefs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:26,Security,access,access,26,/// Unifies obtaining the access specifier from Decl and CXXBaseSpecifier nodes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:14,Integrability,interface,interface,14,/// A visitor interface to visit all BoundNodes results for a; /// BoundNodesTree.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:12,Integrability,interface,interface,12,"/// Generic interface for all matchers.; ///; /// Used by the implementation of Matcher<T> and DynTypedMatcher.; /// In general, implement MatcherInterface<T> or SingleNodeMatcherInterface<T>; /// instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:12,Integrability,interface,interface,12,"/// Generic interface for matchers on an AST node of type T.; ///; /// Implement this if your matcher may need to inspect the children or; /// descendants of the node or bind matched nodes to names. If you are; /// writing a simple matcher that only inspects properties of the; /// current node and doesn't care about its children or descendants,; /// implement SingleNodeMatcherInterface instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:225,Usability,simpl,simple,225,"/// Generic interface for matchers on an AST node of type T.; ///; /// Implement this if your matcher may need to inspect the children or; /// descendants of the node or bind matched nodes to names. If you are; /// writing a simple matcher that only inspects properties of the; /// current node and doesn't care about its children or descendants,; /// implement SingleNodeMatcherInterface instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:4,Integrability,Interface,Interface,4,/// Interface for matchers that only evaluate properties on a single; /// node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:94,Integrability,interface,interface,94,"/// Matches nodes that do not match the provided matcher.; ///; /// Uses the variadic matcher interface, but fails if; /// InnerMatchers.size() != 1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:30,Integrability,interface,interface,30,/// Construct a \c Matcher<T> interface around the dynamic matcher.; ///; /// This method asserts that \c canConvertTo() is \c true. Callers; /// should call \c canConvertTo() first to make sure that \c this is; /// compatible with T.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:90,Testability,assert,asserts,90,/// Construct a \c Matcher<T> interface around the dynamic matcher.; ///; /// This method asserts that \c canConvertTo() is \c true. Callers; /// should call \c canConvertTo() first to make sure that \c this is; /// compatible with T.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:61,Performance,perform,perform,61,/// A potentially stricter node kind.; ///; /// It allows to perform implicit and dynamic cast of matchers without; /// needing to change \c Implementation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:4,Integrability,Wrap,Wrapper,4,"/// Wrapper of a MatcherInterface<T> *that allows copying.; ///; /// A Matcher<Base> can be used anywhere a Matcher<Derived> is; /// required. This establishes an is-a relationship which is reverse; /// to the AST hierarchy. In other words, Matcher<T> is contravariant; /// with respect to T. The relationship is built via a type conversion; /// operator rather than a type hierarchy to be able to templatize the; /// type hierarchy instead of spelling it out.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:90,Integrability,Depend,Depending,90,"/// Allows the conversion of a \c Matcher<Type> to a \c; /// Matcher<QualType>.; ///; /// Depending on the constructor argument, the matcher is either strict, i.e.; /// does only matches in the absence of qualifiers, or not, i.e. simply; /// ignores any qualifiers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:230,Usability,simpl,simply,230,"/// Allows the conversion of a \c Matcher<Type> to a \c; /// Matcher<QualType>.; ///; /// Depending on the constructor argument, the matcher is either strict, i.e.; /// does only matches in the absence of qualifiers, or not, i.e. simply; /// ignores any qualifiers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:4,Integrability,Interface,Interface,4,"/// Interface that allows matchers to traverse the AST.; /// FIXME: Find a better name.; ///; /// This provides three entry methods for each base node type in the AST:; /// - \c matchesChildOf:; /// Matches a matcher on every child node of the given node. Returns true; /// if at least one child node could be matched.; /// - \c matchesDescendantOf:; /// Matches a matcher on all descendant nodes of the given node. Returns true; /// if at least one descendant matched.; /// - \c matchesAncestorOf:; /// Matches a matcher on all ancestors of the given node. Returns true if; /// at least one ancestor matched.; ///; /// FIXME: Currently we only allow Stmt and Decl nodes to start a traversal.; /// In the future, we want to implement this for all nodes for which it makes; /// sense. In the case of matchesAncestorOf, we'll want to implement it for; /// all nodes, as all nodes have ancestors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:136,Modifiability,Polymorphi,PolymorphicMatcher,136,/// Matches overloaded operators with a specific name.; ///; /// The type argument ArgT is not used by this matcher but is used by; /// PolymorphicMatcher and should be StringRef.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:22,Integrability,rout,routine,22,"/// Unqualified match routine.; ///; /// It is much faster than the full match, but it only works for unqualified; /// matches.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:15,Integrability,rout,routine,15,"/// Full match routine; ///; /// Fast implementation for the simple case of a named declaration at; /// namespace or RecordDecl scope.; /// It is slower than matchesNodeUnqualified, but faster than; /// matchesNodeFullSlow.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:61,Usability,simpl,simple,61,"/// Full match routine; ///; /// Fast implementation for the simple case of a named declaration at; /// namespace or RecordDecl scope.; /// It is slower than matchesNodeUnqualified, but faster than; /// matchesNodeFullSlow.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:15,Integrability,rout,routine,15,/// Full match routine; ///; /// It generates the fully qualified name of the declaration (which is; /// expensive) before trying to match.; /// It is slower but simple and works on all cases.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:162,Usability,simpl,simple,162,/// Full match routine; ///; /// It generates the fully qualified name of the declaration (which is; /// expensive) before trying to match.; /// It is slower but simple and works on all cases.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:104,Modifiability,Polymorphi,PolymorphicMatcher,104,/// Matches declarations for QualType and CallExpr.; ///; /// Type argument DeclMatcherT is required by PolymorphicMatcher but; /// not actually used.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:114,Integrability,depend,dependent,114,"// For template specialization types, we want to match the template; // declaration, as long as the type is still dependent, and otherwise the; // declaration of the instantiated tag type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:26,Integrability,depend,dependent,26,"// If the template is non-dependent, we want to match the instantiated; // tag type.; // For example, given:; // template<typename T> struct X {}; X<int> a;; // The following matcher will match, which otherwise would not:; // templateSpecializationType(hasDeclaration(cxxRecordDecl())).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:22,Integrability,depend,dependent,22,"// If the template is dependent or an alias, match the template; // declaration.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:79,Integrability,wrap,wrap,79,"// For the size() == 1 case, we simply return that one matcher.; // No need to wrap it in a variadic operation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:32,Usability,simpl,simply,32,"// For the size() == 1 case, we simply return that one matcher.; // No need to wrap it in a variadic operation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:460,Modifiability,variab,variable,460,"/// A VariadicDynCastAllOfMatcher<SourceT, TargetT> object is a; /// variadic functor that takes a number of Matcher<TargetT> and returns a; /// Matcher<SourceT> that matches TargetT nodes that are matched by all of the; /// given matchers, if SourceT can be dynamically casted into TargetT.; ///; /// For example:; /// const VariadicDynCastAllOfMatcher<Decl, CXXRecordDecl> record;; /// Creates a functor record(...) that creates a Matcher<Decl> given; /// a variable number of arguments of type Matcher<CXXRecordDecl>.; /// The returned matcher matches if the given Decl can by dynamically; /// casted to CXXRecordDecl and all given matchers match.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:413,Modifiability,variab,variable,413,/// A \c VariadicAllOfMatcher<T> object is a variadic functor that takes; /// a number of \c Matcher<T> and returns a \c Matcher<T> that matches \c T; /// nodes that are matched by all of the given matchers.; ///; /// For example:; /// const VariadicAllOfMatcher<NestedNameSpecifier> nestedNameSpecifier;; /// Creates a functor nestedNameSpecifier(...) that creates a; /// \c Matcher<NestedNameSpecifier> given a variable number of arguments of type; /// \c Matcher<NestedNameSpecifier>.; /// The returned matcher matches if all given matchers match.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:56,Modifiability,Polymorphi,Polymorphic,56,"/// VariadicOperatorMatcher related types.; /// @{; /// Polymorphic matcher object that uses a \c; /// DynTypedMatcher::VariadicOperator operator.; ///; /// Input matchers can have any type (including other polymorphic matcher; /// types), and the actual Matcher<T> is generated on demand with an implicit; /// conversion operator.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:207,Modifiability,polymorphi,polymorphic,207,"/// VariadicOperatorMatcher related types.; /// @{; /// Polymorphic matcher object that uses a \c; /// DynTypedMatcher::VariadicOperator operator.; ///; /// Input matchers can have any type (including other polymorphic matcher; /// types), and the actual Matcher<T> is generated on demand with an implicit; /// conversion operator.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:73,Energy Efficiency,adapt,adapting,73,"/// Converts a \c Matcher<T> to a matcher of desired type \c To by; /// ""adapting"" a \c To into a \c T.; ///; /// The \c ArgumentAdapterT argument specifies how the adaptation is done.; ///; /// For example:; /// \c ArgumentAdaptingMatcher<HasMatcher, T>(InnerMatcher);; /// Given that \c InnerMatcher is of type \c Matcher<T>, this returns a matcher; /// that is convertible into any matcher of type \c To by constructing; /// \c HasMatcher<To, T>(InnerMatcher).; ///; /// If a matcher does not need knowledge about the inner type, prefer to use; /// PolymorphicMatcher.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:165,Energy Efficiency,adapt,adaptation,165,"/// Converts a \c Matcher<T> to a matcher of desired type \c To by; /// ""adapting"" a \c To into a \c T.; ///; /// The \c ArgumentAdapterT argument specifies how the adaptation is done.; ///; /// For example:; /// \c ArgumentAdaptingMatcher<HasMatcher, T>(InnerMatcher);; /// Given that \c InnerMatcher is of type \c Matcher<T>, this returns a matcher; /// that is convertible into any matcher of type \c To by constructing; /// \c HasMatcher<To, T>(InnerMatcher).; ///; /// If a matcher does not need knowledge about the inner type, prefer to use; /// PolymorphicMatcher.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:73,Modifiability,adapt,adapting,73,"/// Converts a \c Matcher<T> to a matcher of desired type \c To by; /// ""adapting"" a \c To into a \c T.; ///; /// The \c ArgumentAdapterT argument specifies how the adaptation is done.; ///; /// For example:; /// \c ArgumentAdaptingMatcher<HasMatcher, T>(InnerMatcher);; /// Given that \c InnerMatcher is of type \c Matcher<T>, this returns a matcher; /// that is convertible into any matcher of type \c To by constructing; /// \c HasMatcher<To, T>(InnerMatcher).; ///; /// If a matcher does not need knowledge about the inner type, prefer to use; /// PolymorphicMatcher.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:165,Modifiability,adapt,adaptation,165,"/// Converts a \c Matcher<T> to a matcher of desired type \c To by; /// ""adapting"" a \c To into a \c T.; ///; /// The \c ArgumentAdapterT argument specifies how the adaptation is done.; ///; /// For example:; /// \c ArgumentAdaptingMatcher<HasMatcher, T>(InnerMatcher);; /// Given that \c InnerMatcher is of type \c Matcher<T>, this returns a matcher; /// that is convertible into any matcher of type \c To by constructing; /// \c HasMatcher<To, T>(InnerMatcher).; ///; /// If a matcher does not need knowledge about the inner type, prefer to use; /// PolymorphicMatcher.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:552,Modifiability,Polymorphi,PolymorphicMatcher,552,"/// Converts a \c Matcher<T> to a matcher of desired type \c To by; /// ""adapting"" a \c To into a \c T.; ///; /// The \c ArgumentAdapterT argument specifies how the adaptation is done.; ///; /// For example:; /// \c ArgumentAdaptingMatcher<HasMatcher, T>(InnerMatcher);; /// Given that \c InnerMatcher is of type \c Matcher<T>, this returns a matcher; /// that is convertible into any matcher of type \c To by constructing; /// \c HasMatcher<To, T>(InnerMatcher).; ///; /// If a matcher does not need knowledge about the inner type, prefer to use; /// PolymorphicMatcher.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:6,Modifiability,Polymorphi,PolymorphicMatcher,6,"/// A PolymorphicMatcher<MatcherT, P1, ..., PN> object can be; /// created from N parameters p1, ..., pN (of type P1, ..., PN) and; /// used as a Matcher<T> where a MatcherT<T, P1, ..., PN>(p1, ..., pN); /// can be constructed.; ///; /// For example:; /// - PolymorphicMatcher<IsDefinitionMatcher>(); /// creates an object that can be used as a Matcher<T> for any type T; /// where an IsDefinitionMatcher<T>() can be constructed.; /// - PolymorphicMatcher<ValueEqualsMatcher, int>(42); /// creates an object that can be used as a Matcher<T> for any type T; /// where a ValueEqualsMatcher<T, int>(42) can be constructed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:258,Modifiability,Polymorphi,PolymorphicMatcher,258,"/// A PolymorphicMatcher<MatcherT, P1, ..., PN> object can be; /// created from N parameters p1, ..., pN (of type P1, ..., PN) and; /// used as a Matcher<T> where a MatcherT<T, P1, ..., PN>(p1, ..., pN); /// can be constructed.; ///; /// For example:; /// - PolymorphicMatcher<IsDefinitionMatcher>(); /// creates an object that can be used as a Matcher<T> for any type T; /// where an IsDefinitionMatcher<T>() can be constructed.; /// - PolymorphicMatcher<ValueEqualsMatcher, int>(42); /// creates an object that can be used as a Matcher<T> for any type T; /// where a ValueEqualsMatcher<T, int>(42) can be constructed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:437,Modifiability,Polymorphi,PolymorphicMatcher,437,"/// A PolymorphicMatcher<MatcherT, P1, ..., PN> object can be; /// created from N parameters p1, ..., pN (of type P1, ..., PN) and; /// used as a Matcher<T> where a MatcherT<T, P1, ..., PN>(p1, ..., pN); /// can be constructed.; ///; /// For example:; /// - PolymorphicMatcher<IsDefinitionMatcher>(); /// creates an object that can be used as a Matcher<T> for any type T; /// where an IsDefinitionMatcher<T>() can be constructed.; /// - PolymorphicMatcher<ValueEqualsMatcher, int>(42); /// creates an object that can be used as a Matcher<T> for any type T; /// where a ValueEqualsMatcher<T, int>(42) can be constructed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:246,Energy Efficiency,adapt,adapt,246,"/// Converts a \c Matcher<InnerT> to a \c Matcher<OuterT>, where; /// \c OuterT is any type that is supported by \c Getter.; ///; /// \code Getter<OuterT>::value() \endcode returns a; /// \code InnerTBase (OuterT::*)() \endcode, which is used to adapt a \c OuterT; /// object into a \c InnerT",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:246,Modifiability,adapt,adapt,246,"/// Converts a \c Matcher<InnerT> to a \c Matcher<OuterT>, where; /// \c OuterT is any type that is supported by \c Getter.; ///; /// \code Getter<OuterT>::value() \endcode returns a; /// \code InnerTBase (OuterT::*)() \endcode, which is used to adapt a \c OuterT; /// object into a \c InnerT",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:6,Usability,simpl,simple,6,/// A simple memoizer of T(*)() functions.; ///; /// It will call the passed 'Func' template parameter at most once.; /// Used to support AST_MATCHER_FUNCTION() macro.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:94,Security,access,accessing,94,// FIXME: unify ClassTemplateSpecializationDecl and TemplateSpecializationType's; // APIs for accessing the template argument list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h:136,Modifiability,Polymorphi,PolymorphicMatcher,136,/// Matches overloaded operators with a specific name.; ///; /// The type argument ArgT is not used by this matcher but is used by; /// PolymorphicMatcher and should be std::vector<std::string>>.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersInternal.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h:259,Modifiability,variab,variables,259,"/// AST_MATCHER_FUNCTION_P(ReturnType, DefineMatcher, ParamType, Param) {; /// ... }; /// defines a single-parameter function named DefineMatcher() that returns a; /// ReturnType object.; ///; /// The code between the curly braces has access to the following variables:; ///; /// Param: the parameter passed to the function; its type; /// is ParamType.; ///; /// The code should return an instance of ReturnType.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h:235,Security,access,access,235,"/// AST_MATCHER_FUNCTION_P(ReturnType, DefineMatcher, ParamType, Param) {; /// ... }; /// defines a single-parameter function named DefineMatcher() that returns a; /// ReturnType object.; ///; /// The code between the curly braces has access to the following variables:; ///; /// Param: the parameter passed to the function; its type; /// is ParamType.; ///; /// The code should return an instance of ReturnType.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h:220,Modifiability,variab,variables,220,"/// AST_MATCHER(Type, DefineMatcher) { ... }; /// defines a zero parameter function named DefineMatcher() that returns a; /// Matcher<Type> object.; ///; /// The code between the curly braces has access to the following variables:; ///; /// Node: the AST node being matched; its type is Type.; /// Finder: an ASTMatchFinder*.; /// Builder: a BoundNodesTreeBuilder*.; ///; /// The code should return true if 'Node' matches.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h:196,Security,access,access,196,"/// AST_MATCHER(Type, DefineMatcher) { ... }; /// defines a zero parameter function named DefineMatcher() that returns a; /// Matcher<Type> object.; ///; /// The code between the curly braces has access to the following variables:; ///; /// Node: the AST node being matched; its type is Type.; /// Finder: an ASTMatchFinder*.; /// Builder: a BoundNodesTreeBuilder*.; ///; /// The code should return true if 'Node' matches.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h:242,Modifiability,variab,variables,242,"/// AST_MATCHER_P(Type, DefineMatcher, ParamType, Param) { ... }; /// defines a single-parameter function named DefineMatcher() that returns a; /// Matcher<Type> object.; ///; /// The code between the curly braces has access to the following variables:; ///; /// Node: the AST node being matched; its type is Type.; /// Param: the parameter passed to the function; its type; /// is ParamType.; /// Finder: an ASTMatchFinder*.; /// Builder: a BoundNodesTreeBuilder*.; ///; /// The code should return true if 'Node' matches.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h:218,Security,access,access,218,"/// AST_MATCHER_P(Type, DefineMatcher, ParamType, Param) { ... }; /// defines a single-parameter function named DefineMatcher() that returns a; /// Matcher<Type> object.; ///; /// The code between the curly braces has access to the following variables:; ///; /// Node: the AST node being matched; its type is Type.; /// Param: the parameter passed to the function; its type; /// is ParamType.; /// Finder: an ASTMatchFinder*.; /// Builder: a BoundNodesTreeBuilder*.; ///; /// The code should return true if 'Node' matches.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h:268,Modifiability,variab,variables,268,"/// AST_MATCHER_P2(; /// Type, DefineMatcher, ParamType1, Param1, ParamType2, Param2) { ... }; /// defines a two-parameter function named DefineMatcher() that returns a; /// Matcher<Type> object.; ///; /// The code between the curly braces has access to the following variables:; ///; /// Node: the AST node being matched; its type is Type.; /// Param1, Param2: the parameters passed to the function; their types; /// are ParamType1 and ParamType2.; /// Finder: an ASTMatchFinder*.; /// Builder: a BoundNodesTreeBuilder*.; ///; /// The code should return true if 'Node' matches.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h:244,Security,access,access,244,"/// AST_MATCHER_P2(; /// Type, DefineMatcher, ParamType1, Param1, ParamType2, Param2) { ... }; /// defines a two-parameter function named DefineMatcher() that returns a; /// Matcher<Type> object.; ///; /// The code between the curly braces has access to the following variables:; ///; /// Node: the AST node being matched; its type is Type.; /// Param1, Param2: the parameters passed to the function; their types; /// are ParamType1 and ParamType2.; /// Finder: an ASTMatchFinder*.; /// Builder: a BoundNodesTreeBuilder*.; ///; /// The code should return true if 'Node' matches.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h:317,Modifiability,Polymorphi,PolymorphicMatcherWithParam,317,"/// Construct a type-list to be passed to the AST_POLYMORPHIC_MATCHER*; /// macros.; ///; /// You can't pass something like \c TypeList<Foo, Bar> to a macro, because it; /// will look at that as two arguments. However, you can pass; /// \c void(TypeList<Foo, Bar>), which works thanks to the parenthesis.; /// The \c PolymorphicMatcherWithParam* classes will unpack the function type to; /// extract the TypeList object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h:127,Modifiability,polymorphi,polymorphic,127,"/// AST_POLYMORPHIC_MATCHER(DefineMatcher) { ... }; /// defines a single-parameter function named DefineMatcher() that is; /// polymorphic in the return type.; ///; /// The variables are the same as for AST_MATCHER, but NodeType will be deduced; /// from the calling context.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h:173,Modifiability,variab,variables,173,"/// AST_POLYMORPHIC_MATCHER(DefineMatcher) { ... }; /// defines a single-parameter function named DefineMatcher() that is; /// polymorphic in the return type.; ///; /// The variables are the same as for AST_MATCHER, but NodeType will be deduced; /// from the calling context.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h:147,Modifiability,polymorphi,polymorphic,147,"/// AST_POLYMORPHIC_MATCHER_P(DefineMatcher, ParamType, Param) { ... }; /// defines a single-parameter function named DefineMatcher() that is; /// polymorphic in the return type.; ///; /// The variables are the same as for; /// AST_MATCHER_P, with the addition of NodeType, which specifies the node type; /// of the matcher Matcher<NodeType> returned by the function matcher().; ///; /// FIXME: Pull out common code with above macro?",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h:193,Modifiability,variab,variables,193,"/// AST_POLYMORPHIC_MATCHER_P(DefineMatcher, ParamType, Param) { ... }; /// defines a single-parameter function named DefineMatcher() that is; /// polymorphic in the return type.; ///; /// The variables are the same as for; /// AST_MATCHER_P, with the addition of NodeType, which specifies the node type; /// of the matcher Matcher<NodeType> returned by the function matcher().; ///; /// FIXME: Pull out common code with above macro?",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h:162,Modifiability,polymorphi,polymorphic,162,"/// AST_POLYMORPHIC_MATCHER_P2(; /// DefineMatcher, ParamType1, Param1, ParamType2, Param2) { ... }; /// defines a two-parameter function named matcher() that is polymorphic in; /// the return type.; ///; /// The variables are the same as for AST_MATCHER_P2, with the; /// addition of NodeType, which specifies the node type of the matcher; /// Matcher<NodeType> returned by the function DefineMatcher().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h:213,Modifiability,variab,variables,213,"/// AST_POLYMORPHIC_MATCHER_P2(; /// DefineMatcher, ParamType1, Param1, ParamType2, Param2) { ... }; /// defines a two-parameter function named matcher() that is polymorphic in; /// the return type.; ///; /// The variables are the same as for AST_MATCHER_P2, with the; /// addition of NodeType, which specifies the node type of the matcher; /// Matcher<NodeType> returned by the function DefineMatcher().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h:308,Modifiability,variab,variables,308,"/// AST_MATCHER_REGEX(Type, DefineMatcher, Param) { ... }; /// defines a function named DefineMatcher() that takes a regular expression; /// string paramater and an optional RegexFlags parameter and returns a; /// Matcher<Type> object.; ///; /// The code between the curly braces has access to the following variables:; ///; /// Node: the AST node being matched; its type is Type.; /// Param: a pointer to an \ref llvm::Regex object; /// Finder: an ASTMatchFinder*.; /// Builder: a BoundNodesTreeBuilder*.; ///; /// The code should return true if 'Node' matches.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h:284,Security,access,access,284,"/// AST_MATCHER_REGEX(Type, DefineMatcher, Param) { ... }; /// defines a function named DefineMatcher() that takes a regular expression; /// string paramater and an optional RegexFlags parameter and returns a; /// Matcher<Type> object.; ///; /// The code between the curly braces has access to the following variables:; ///; /// Node: the AST node being matched; its type is Type.; /// Param: a pointer to an \ref llvm::Regex object; /// Finder: an ASTMatchFinder*.; /// Builder: a BoundNodesTreeBuilder*.; ///; /// The code should return true if 'Node' matches.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h:223,Modifiability,polymorphi,polymorphic,223,"/// AST_POLYMORPHIC_MATCHER_REGEX(DefineMatcher, ReturnTypesF, Param) { ... }; /// defines a function named DefineMatcher() that takes a regular expression; /// string paramater and an optional RegexFlags parameter that is polymorphic in; /// the return type.; ///; /// The variables are the same as for; /// AST_MATCHER_REGEX, with the addition of NodeType, which specifies the node; /// type of the matcher Matcher<NodeType> returned by the function matcher().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h:274,Modifiability,variab,variables,274,"/// AST_POLYMORPHIC_MATCHER_REGEX(DefineMatcher, ReturnTypesF, Param) { ... }; /// defines a function named DefineMatcher() that takes a regular expression; /// string paramater and an optional RegexFlags parameter that is polymorphic in; /// the return type.; ///; /// The variables are the same as for; /// AST_MATCHER_REGEX, with the addition of NodeType, which specifies the node; /// type of the matcher Matcher<NodeType> returned by the function matcher().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchersMacros.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchFinder.h:831,Security,access,accessed,831,"//===--- ASTMatchFinder.h - Structural query framework ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Provides a way to construct an ASTConsumer that runs given matchers; // over the AST and invokes a given callback on every match.; //; // The general idea is to construct a matcher expression that describes a; // subtree match on the AST. Next, a callback that is executed every time the; // expression matches is registered, and the matcher is run over the AST of; // some code. Matched subexpressions can be bound to string IDs and easily; // be accessed from the registered callback. The callback can than use the; // AST nodes that the subexpressions matched on to output information about; // the match or construct changes that can be applied to the code.; //; // Example:; // class HandleMatch : public MatchFinder::MatchCallback {; // public:; // virtual void Run(const MatchFinder::MatchResult &Result) {; // const CXXRecordDecl *Class =; // Result.Nodes.GetDeclAs<CXXRecordDecl>(""id"");; // ...; // }; // };; //; // int main(int argc, char **argv) {; // ClangTool Tool(argc, argv);; // MatchFinder finder;; // finder.AddMatcher(Id(""id"", record(hasName(""::a_namespace::AClass""))),; // new HandleMatch);; // return Tool.Run(newFrontendActionFactory(&finder));; // }; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchFinder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchFinder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchFinder.h:50,Testability,test,testing,50,/// Called when parsing is finished. Intended for testing only.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchFinder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchFinder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchFinder.h:135,Integrability,interface,interface,135,"/// @}; /// Adds a matcher to execute when running over the AST.; ///; /// This is similar to \c addMatcher(), but it uses the dynamic interface. It; /// is more flexible, but the lost type information enables a caller to pass; /// a matcher that cannot match anything.; ///; /// \returns \c true if the matcher is a valid top-level matcher, \c false; /// otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchFinder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchFinder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchFinder.h:162,Modifiability,flexible,flexible,162,"/// @}; /// Adds a matcher to execute when running over the AST.; ///; /// This is similar to \c addMatcher(), but it uses the dynamic interface. It; /// is more flexible, but the lost type information enables a caller to pass; /// a matcher that cannot match anything.; ///; /// \returns \c true if the matcher is a valid top-level matcher, \c false; /// otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchFinder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchFinder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchFinder.h:164,Testability,benchmark,benchmarking,164,"/// Registers a callback to notify the end of parsing.; ///; /// The provided closure is called after parsing is done, before the AST is; /// traversed. Useful for benchmarking.; /// Each call to FindAll(...) will call the closure once.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchFinder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchFinder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchFinder.h:42,Usability,simpl,simplify,42,/// All the callbacks in one container to simplify iteration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchFinder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchFinder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/GtestMatchers.h:36,Testability,mock,mock,36,"/// This enum indicates whether the mock method in the matched ON_CALL or; /// EXPECT_CALL macro has arguments. For example, `None` can be used to match; /// `ON_CALL(mock, TwoParamMethod)` whereas `Some` can be used to match; /// `ON_CALL(mock, TwoParamMethod(m1, m2))`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/GtestMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/GtestMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/GtestMatchers.h:167,Testability,mock,mock,167,"/// This enum indicates whether the mock method in the matched ON_CALL or; /// EXPECT_CALL macro has arguments. For example, `None` can be used to match; /// `ON_CALL(mock, TwoParamMethod)` whereas `Some` can be used to match; /// `ON_CALL(mock, TwoParamMethod(m1, m2))`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/GtestMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/GtestMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/GtestMatchers.h:240,Testability,mock,mock,240,"/// This enum indicates whether the mock method in the matched ON_CALL or; /// EXPECT_CALL macro has arguments. For example, `None` can be used to match; /// `ON_CALL(mock, TwoParamMethod)` whereas `Some` can be used to match; /// `ON_CALL(mock, TwoParamMethod(m1, m2))`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/GtestMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/GtestMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/GtestMatchers.h:24,Testability,ASSERT,ASSERT,24,"/// Matcher for gtest's ASSERT comparison macros including ASSERT_EQ, ASSERT_NE,; /// ASSERT_GE, ASSERT_GT, ASSERT_LE and ASSERT_LT.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/GtestMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/GtestMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/GtestMatchers.h:44,Testability,Mock,MockObject,44,/// Matcher for gtest's EXPECT_CALL macro. `MockObject` matches the mock; /// object and `MockMethodName` is the name of the method invoked on the mock; /// object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/GtestMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/GtestMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/GtestMatchers.h:68,Testability,mock,mock,68,/// Matcher for gtest's EXPECT_CALL macro. `MockObject` matches the mock; /// object and `MockMethodName` is the name of the method invoked on the mock; /// object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/GtestMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/GtestMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/GtestMatchers.h:90,Testability,Mock,MockMethodName,90,/// Matcher for gtest's EXPECT_CALL macro. `MockObject` matches the mock; /// object and `MockMethodName` is the name of the method invoked on the mock; /// object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/GtestMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/GtestMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/GtestMatchers.h:147,Testability,mock,mock,147,/// Matcher for gtest's EXPECT_CALL macro. `MockObject` matches the mock; /// object and `MockMethodName` is the name of the method invoked on the mock; /// object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/GtestMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/GtestMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/GtestMatchers.h:119,Modifiability,flexible,flexible,119,/// Matcher for gtest's EXPECT_CALL macro. `MockCall` matches the whole mock; /// member method call. This API is more flexible but requires more knowledge of; /// the AST structure of EXPECT_CALL macros.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/GtestMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/GtestMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/GtestMatchers.h:44,Testability,Mock,MockCall,44,/// Matcher for gtest's EXPECT_CALL macro. `MockCall` matches the whole mock; /// member method call. This API is more flexible but requires more knowledge of; /// the AST structure of EXPECT_CALL macros.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/GtestMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/GtestMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/GtestMatchers.h:72,Testability,mock,mock,72,/// Matcher for gtest's EXPECT_CALL macro. `MockCall` matches the whole mock; /// member method call. This API is more flexible but requires more knowledge of; /// the AST structure of EXPECT_CALL macros.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/GtestMatchers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/GtestMatchers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h:42,Availability,error,error,42,"//===--- Diagnostics.h - Helper class for error diagnostics -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Diagnostics class to manage error messages.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h:424,Availability,error,error,424,"//===--- Diagnostics.h - Helper class for error diagnostics -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Diagnostics class to manage error messages.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h:430,Integrability,message,messages,430,"//===--- Diagnostics.h - Helper class for error diagnostics -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Diagnostics class to manage error messages.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h:27,Availability,error,error,27,/// Helper class to manage error messages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h:33,Integrability,message,messages,33,/// Helper class to manage error messages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h:8,Availability,error,errors,8,/// All errors from the system.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h:157,Availability,error,error,157,/// Class defining a parser context.; ///; /// Used by the parser to specify (possibly recursive) contexts where the; /// parsing/construction can fail. Any error triggered within a context will; /// keep information about the context chain.; /// This class should be used as a RAII instance in the stack.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h:102,Availability,error,errors,102,"/// Context for overloaded matcher construction.; ///; /// This context will take care of merging all errors that happen within it; /// as ""candidate"" overloads for the same matcher.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h:15,Availability,error,errors,15,/// Revert all errors that happened within this context.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h:11,Availability,error,error,11,"/// Add an error to the diagnostics.; ///; /// All the context information will be kept on the error message.; /// \return a helper class to allow the caller to pass the arguments for the; /// error message, using the << operator.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h:95,Availability,error,error,95,"/// Add an error to the diagnostics.; ///; /// All the context information will be kept on the error message.; /// \return a helper class to allow the caller to pass the arguments for the; /// error message, using the << operator.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h:193,Availability,error,error,193,"/// Add an error to the diagnostics.; ///; /// All the context information will be kept on the error message.; /// \return a helper class to allow the caller to pass the arguments for the; /// error message, using the << operator.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h:101,Integrability,message,message,101,"/// Add an error to the diagnostics.; ///; /// All the context information will be kept on the error message.; /// \return a helper class to allow the caller to pass the arguments for the; /// error message, using the << operator.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h:199,Integrability,message,message,199,"/// Add an error to the diagnostics.; ///; /// All the context information will be kept on the error message.; /// \return a helper class to allow the caller to pass the arguments for the; /// error message, using the << operator.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h:32,Availability,error,error,32,/// Information stored for each error found.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h:51,Availability,error,error,51,/// Returns a simple string representation of each error.; ///; /// Each error only shows the error message without any context.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h:73,Availability,error,error,73,/// Returns a simple string representation of each error.; ///; /// Each error only shows the error message without any context.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h:94,Availability,error,error,94,/// Returns a simple string representation of each error.; ///; /// Each error only shows the error message without any context.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h:100,Integrability,message,message,100,/// Returns a simple string representation of each error.; ///; /// Each error only shows the error message without any context.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h:14,Usability,simpl,simple,14,/// Returns a simple string representation of each error.; ///; /// Each error only shows the error message without any context.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h:51,Availability,error,error,51,/// Returns the full string representation of each error.; ///; /// Each error message contains the full context.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h:73,Availability,error,error,73,/// Returns the full string representation of each error.; ///; /// Each error message contains the full context.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h:79,Integrability,message,message,79,/// Returns the full string representation of each error.; ///; /// Each error message contains the full context.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Diagnostics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h:395,Usability,Simpl,Simple,395,"//===- Parser.h - Matcher expression parser ---------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// Simple matcher expression parser.; ///; /// The parser understands matcher expressions of the form:; /// MatcherName(Arg0, Arg1, ..., ArgN); /// as well as simple types like strings.; /// The parser does not know how to process the matchers. It delegates this task; /// to a Sema object received as an argument.; ///; /// \code; /// Grammar for the expressions supported:; /// <Expression> := <Literal> | <NamedValue> | <MatcherExpression>; /// <Literal> := <StringLiteral> | <Boolean> | <Double> | <Unsigned>; /// <StringLiteral> := ""quoted string""; /// <Boolean> := true | false; /// <Double> := [0-9]+.[0-9]* | [0-9]+.[0-9]*[eE][-+]?[0-9]+; /// <Unsigned> := [0-9]+; /// <NamedValue> := <Identifier>; /// <MatcherExpression> := <Identifier>(<ArgumentList>) |; /// <Identifier>(<ArgumentList>).bind(<StringLiteral>); /// <Identifier> := [a-zA-Z]+; /// <ArgumentList> := <Expression> | <Expression>,<ArgumentList>; /// \endcode; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h:551,Usability,simpl,simple,551,"//===- Parser.h - Matcher expression parser ---------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// Simple matcher expression parser.; ///; /// The parser understands matcher expressions of the form:; /// MatcherName(Arg0, Arg1, ..., ArgN); /// as well as simple types like strings.; /// The parser does not know how to process the matchers. It delegates this task; /// to a Sema object received as an argument.; ///; /// \code; /// Grammar for the expressions supported:; /// <Expression> := <Literal> | <NamedValue> | <MatcherExpression>; /// <Literal> := <StringLiteral> | <Boolean> | <Double> | <Unsigned>; /// <StringLiteral> := ""quoted string""; /// <Boolean> := true | false; /// <Double> := [0-9]+.[0-9]* | [0-9]+.[0-9]*[eE][-+]?[0-9]+; /// <Unsigned> := [0-9]+; /// <NamedValue> := <Identifier>; /// <MatcherExpression> := <Identifier>(<ArgumentList>) |; /// <Identifier>(<ArgumentList>).bind(<StringLiteral>); /// <Identifier> := [a-zA-Z]+; /// <ArgumentList> := <Expression> | <Expression>,<ArgumentList>; /// \endcode; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h:551,Energy Efficiency,efficient,efficient,551,"/// Interface to connect the parser with the registry and more.; ///; /// The parser uses the Sema instance passed into; /// parseMatcherExpression() to handle all matcher tokens. The simplest; /// processor implementation would simply call into the registry to create; /// the matchers.; /// However, a more complex processor might decide to intercept the matcher; /// creation and do some extra work. For example, it could apply some; /// transformation to the matcher by adding some id() nodes, or could detect; /// specific matcher nodes for more efficient lookup.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h:4,Integrability,Interface,Interface,4,"/// Interface to connect the parser with the registry and more.; ///; /// The parser uses the Sema instance passed into; /// parseMatcherExpression() to handle all matcher tokens. The simplest; /// processor implementation would simply call into the registry to create; /// the matchers.; /// However, a more complex processor might decide to intercept the matcher; /// creation and do some extra work. For example, it could apply some; /// transformation to the matcher by adding some id() nodes, or could detect; /// specific matcher nodes for more efficient lookup.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h:507,Safety,detect,detect,507,"/// Interface to connect the parser with the registry and more.; ///; /// The parser uses the Sema instance passed into; /// parseMatcherExpression() to handle all matcher tokens. The simplest; /// processor implementation would simply call into the registry to create; /// the matchers.; /// However, a more complex processor might decide to intercept the matcher; /// creation and do some extra work. For example, it could apply some; /// transformation to the matcher by adding some id() nodes, or could detect; /// specific matcher nodes for more efficient lookup.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h:184,Usability,simpl,simplest,184,"/// Interface to connect the parser with the registry and more.; ///; /// The parser uses the Sema instance passed into; /// parseMatcherExpression() to handle all matcher tokens. The simplest; /// processor implementation would simply call into the registry to create; /// the matchers.; /// However, a more complex processor might decide to intercept the matcher; /// creation and do some extra work. For example, it could apply some; /// transformation to the matcher by adding some id() nodes, or could detect; /// specific matcher nodes for more efficient lookup.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h:229,Usability,simpl,simply,229,"/// Interface to connect the parser with the registry and more.; ///; /// The parser uses the Sema instance passed into; /// parseMatcherExpression() to handle all matcher tokens. The simplest; /// processor implementation would simply call into the registry to create; /// the matchers.; /// However, a more complex processor might decide to intercept the matcher; /// creation and do some extra work. For example, it could apply some; /// transformation to the matcher by adding some id() nodes, or could detect; /// specific matcher nodes for more efficient lookup.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h:270,Availability,error,error,270,"/// Process a matcher expression.; ///; /// All the arguments passed here have already been processed.; ///; /// \param Ctor A matcher constructor looked up by lookupMatcherCtor.; ///; /// \param NameRange The location of the name in the matcher source.; /// Useful for error reporting.; ///; /// \param BindID The ID to use to bind the matcher, or a null \c StringRef; /// if no ID is specified.; ///; /// \param Args The argument list for the matcher.; ///; /// \return The matcher objects constructed by the processor, or a null; /// matcher if an error occurred. In that case, \c Error will contain a; /// description of the error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h:551,Availability,error,error,551,"/// Process a matcher expression.; ///; /// All the arguments passed here have already been processed.; ///; /// \param Ctor A matcher constructor looked up by lookupMatcherCtor.; ///; /// \param NameRange The location of the name in the matcher source.; /// Useful for error reporting.; ///; /// \param BindID The ID to use to bind the matcher, or a null \c StringRef; /// if no ID is specified.; ///; /// \param Args The argument list for the matcher.; ///; /// \return The matcher objects constructed by the processor, or a null; /// matcher if an error occurred. In that case, \c Error will contain a; /// description of the error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h:584,Availability,Error,Error,584,"/// Process a matcher expression.; ///; /// All the arguments passed here have already been processed.; ///; /// \param Ctor A matcher constructor looked up by lookupMatcherCtor.; ///; /// \param NameRange The location of the name in the matcher source.; /// Useful for error reporting.; ///; /// \param BindID The ID to use to bind the matcher, or a null \c StringRef; /// if no ID is specified.; ///; /// \param Args The argument list for the matcher.; ///; /// \return The matcher objects constructed by the processor, or a null; /// matcher if an error occurred. In that case, \c Error will contain a; /// description of the error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h:629,Availability,error,error,629,"/// Process a matcher expression.; ///; /// All the arguments passed here have already been processed.; ///; /// \param Ctor A matcher constructor looked up by lookupMatcherCtor.; ///; /// \param NameRange The location of the name in the matcher source.; /// Useful for error reporting.; ///; /// \param BindID The ID to use to bind the matcher, or a null \c StringRef; /// if no ID is specified.; ///; /// \param Args The argument list for the matcher.; ///; /// \return The matcher objects constructed by the processor, or a null; /// matcher if an error occurred. In that case, \c Error will contain a; /// description of the error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h:493,Availability,error,error,493,"/// Parse a matcher expression.; ///; /// \param MatcherCode The matcher expression to parse.; ///; /// \param S The Sema instance that will help the parser; /// construct the matchers. If null, it uses the default registry.; ///; /// \param NamedValues A map of precomputed named values. This provides; /// the dictionary for the <NamedValue> rule of the grammar.; /// If null, it is ignored.; ///; /// \return The matcher object constructed by the processor, or an empty; /// Optional if an error occurred. In that case, \c Error will contain a; /// description of the error.; /// The caller takes ownership of the DynTypedMatcher object returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h:526,Availability,Error,Error,526,"/// Parse a matcher expression.; ///; /// \param MatcherCode The matcher expression to parse.; ///; /// \param S The Sema instance that will help the parser; /// construct the matchers. If null, it uses the default registry.; ///; /// \param NamedValues A map of precomputed named values. This provides; /// the dictionary for the <NamedValue> rule of the grammar.; /// If null, it is ignored.; ///; /// \return The matcher object constructed by the processor, or an empty; /// Optional if an error occurred. In that case, \c Error will contain a; /// description of the error.; /// The caller takes ownership of the DynTypedMatcher object returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h:571,Availability,error,error,571,"/// Parse a matcher expression.; ///; /// \param MatcherCode The matcher expression to parse.; ///; /// \param S The Sema instance that will help the parser; /// construct the matchers. If null, it uses the default registry.; ///; /// \param NamedValues A map of precomputed named values. This provides; /// the dictionary for the <NamedValue> rule of the grammar.; /// If null, it is ignored.; ///; /// \return The matcher object constructed by the processor, or an empty; /// Optional if an error occurred. In that case, \c Error will contain a; /// description of the error.; /// The caller takes ownership of the DynTypedMatcher object returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h:431,Availability,avail,available,431,"/// Complete an expression at the given offset.; ///; /// \param S The Sema instance that will help the parser; /// construct the matchers. If null, it uses the default registry.; ///; /// \param NamedValues A map of precomputed named values. This provides; /// the dictionary for the <NamedValue> rule of the grammar.; /// If null, it is ignored.; ///; /// \return The list of completions, which may be empty if there are no; /// available completions or if an error occurred.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h:462,Availability,error,error,462,"/// Complete an expression at the given offset.; ///; /// \param S The Sema instance that will help the parser; /// construct the matchers. If null, it uses the default registry.; ///; /// \param NamedValues A map of precomputed named values. This provides; /// the dictionary for the <NamedValue> rule of the grammar.; /// If null, it is ignored.; ///; /// \return The list of completions, which may be empty if there are no; /// available completions or if an error occurred.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Parser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Registry.h:469,Integrability,interface,interface,469,"//===- Registry.h - Matcher registry ----------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// Registry of all known matchers.; ///; /// The registry provides a generic interface to construct any matcher by name.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Registry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Registry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Registry.h:196,Availability,error,error,196,"/// Construct a matcher from the registry.; ///; /// \param Ctor The matcher constructor to instantiate.; ///; /// \param NameRange The location of the name in the matcher source.; /// Useful for error reporting.; ///; /// \param Args The argument list for the matcher. The number and types of the; /// values must be valid for the matcher requested. Otherwise, the function; /// will return an error.; ///; /// \return The matcher object constructed if no error was found.; /// A null matcher if the number of arguments or argument types do not match; /// the signature. In that case \c Error will contain the description of; /// the error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Registry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Registry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Registry.h:395,Availability,error,error,395,"/// Construct a matcher from the registry.; ///; /// \param Ctor The matcher constructor to instantiate.; ///; /// \param NameRange The location of the name in the matcher source.; /// Useful for error reporting.; ///; /// \param Args The argument list for the matcher. The number and types of the; /// values must be valid for the matcher requested. Otherwise, the function; /// will return an error.; ///; /// \return The matcher object constructed if no error was found.; /// A null matcher if the number of arguments or argument types do not match; /// the signature. In that case \c Error will contain the description of; /// the error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Registry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Registry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Registry.h:457,Availability,error,error,457,"/// Construct a matcher from the registry.; ///; /// \param Ctor The matcher constructor to instantiate.; ///; /// \param NameRange The location of the name in the matcher source.; /// Useful for error reporting.; ///; /// \param Args The argument list for the matcher. The number and types of the; /// values must be valid for the matcher requested. Otherwise, the function; /// will return an error.; ///; /// \return The matcher object constructed if no error was found.; /// A null matcher if the number of arguments or argument types do not match; /// the signature. In that case \c Error will contain the description of; /// the error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Registry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Registry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Registry.h:588,Availability,Error,Error,588,"/// Construct a matcher from the registry.; ///; /// \param Ctor The matcher constructor to instantiate.; ///; /// \param NameRange The location of the name in the matcher source.; /// Useful for error reporting.; ///; /// \param Args The argument list for the matcher. The number and types of the; /// values must be valid for the matcher requested. Otherwise, the function; /// will return an error.; ///; /// \return The matcher object constructed if no error was found.; /// A null matcher if the number of arguments or argument types do not match; /// the signature. In that case \c Error will contain the description of; /// the error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Registry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Registry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Registry.h:635,Availability,error,error,635,"/// Construct a matcher from the registry.; ///; /// \param Ctor The matcher constructor to instantiate.; ///; /// \param NameRange The location of the name in the matcher source.; /// Useful for error reporting.; ///; /// \param Args The argument list for the matcher. The number and types of the; /// values must be valid for the matcher requested. Otherwise, the function; /// will return an error.; ///; /// \return The matcher object constructed if no error was found.; /// A null matcher if the number of arguments or argument types do not match; /// the signature. In that case \c Error will contain the description of; /// the error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Registry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Registry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Registry.h:225,Availability,error,error,225,"/// Construct a matcher from the registry and bind it.; ///; /// Similar the \c constructMatcher() above, but it then tries to bind the; /// matcher to the specified \c BindID.; /// If the matcher is not bindable, it sets an error in \c Error and returns; /// a null matcher.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Registry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Registry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Registry.h:237,Availability,Error,Error,237,"/// Construct a matcher from the registry and bind it.; ///; /// Similar the \c constructMatcher() above, but it then tries to bind the; /// matcher to the specified \c BindID.; /// If the matcher is not bindable, it sets an error in \c Error and returns; /// a null matcher.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Registry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/Registry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h:26,Modifiability,Polymorphi,Polymorphic,26,"//===--- VariantValue.h - Polymorphic value type ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Polymorphic value type.; ///; /// Supports all the types required for dynamic Matcher construction.; /// Used by the registry to construct matchers in a generic way.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h:396,Modifiability,Polymorphi,Polymorphic,396,"//===--- VariantValue.h - Polymorphic value type ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Polymorphic value type.; ///; /// Supports all the types required for dynamic Matcher construction.; /// Used by the registry to construct matchers in a generic way.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h:93,Modifiability,polymorphi,polymorphic,93,"/// A variant matcher object.; ///; /// The purpose of this object is to abstract simple and polymorphic matchers; /// into a single object type.; /// Polymorphic matchers might be implemented as a list of all the possible; /// overloads of the matcher. \c VariantMatcher knows how to select the; /// appropriate overload when needed.; /// To get a real matcher object out of a \c VariantMatcher you can do:; /// - getSingleMatcher() which returns a matcher, only if it is not ambiguous; /// to decide which matcher to return. Eg. it contains only a single; /// matcher, or a polymorphic one with only one overload.; /// - hasTypedMatcher<T>()/getTypedMatcher<T>(): These calls will determine if; /// the underlying matcher(s) can unambiguously return a Matcher<T>.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h:151,Modifiability,Polymorphi,Polymorphic,151,"/// A variant matcher object.; ///; /// The purpose of this object is to abstract simple and polymorphic matchers; /// into a single object type.; /// Polymorphic matchers might be implemented as a list of all the possible; /// overloads of the matcher. \c VariantMatcher knows how to select the; /// appropriate overload when needed.; /// To get a real matcher object out of a \c VariantMatcher you can do:; /// - getSingleMatcher() which returns a matcher, only if it is not ambiguous; /// to decide which matcher to return. Eg. it contains only a single; /// matcher, or a polymorphic one with only one overload.; /// - hasTypedMatcher<T>()/getTypedMatcher<T>(): These calls will determine if; /// the underlying matcher(s) can unambiguously return a Matcher<T>.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h:576,Modifiability,polymorphi,polymorphic,576,"/// A variant matcher object.; ///; /// The purpose of this object is to abstract simple and polymorphic matchers; /// into a single object type.; /// Polymorphic matchers might be implemented as a list of all the possible; /// overloads of the matcher. \c VariantMatcher knows how to select the; /// appropriate overload when needed.; /// To get a real matcher object out of a \c VariantMatcher you can do:; /// - getSingleMatcher() which returns a matcher, only if it is not ambiguous; /// to decide which matcher to return. Eg. it contains only a single; /// matcher, or a polymorphic one with only one overload.; /// - hasTypedMatcher<T>()/getTypedMatcher<T>(): These calls will determine if; /// the underlying matcher(s) can unambiguously return a Matcher<T>.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h:82,Usability,simpl,simple,82,"/// A variant matcher object.; ///; /// The purpose of this object is to abstract simple and polymorphic matchers; /// into a single object type.; /// Polymorphic matchers might be implemented as a list of all the possible; /// overloads of the matcher. \c VariantMatcher knows how to select the; /// appropriate overload when needed.; /// To get a real matcher object out of a \c VariantMatcher you can do:; /// - getSingleMatcher() which returns a matcher, only if it is not ambiguous; /// to decide which matcher to return. Eg. it contains only a single; /// matcher, or a polymorphic one with only one overload.; /// - hasTypedMatcher<T>()/getTypedMatcher<T>(): These calls will determine if; /// the underlying matcher(s) can unambiguously return a Matcher<T>.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h:17,Integrability,depend,depend,17,/// Methods that depend on T from hasTypedMatcher/getTypedMatcher.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h:12,Integrability,interface,interface,12,/// Payload interface to be specialized by each matcher type.; ///; /// It follows a similar interface as VariantMatcher itself.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h:93,Integrability,interface,interface,93,/// Payload interface to be specialized by each matcher type.; ///; /// It follows a similar interface as VariantMatcher itself.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h:75,Modifiability,polymorphi,polymorphic,75,/// Clones the provided matchers.; ///; /// They should be the result of a polymorphic matcher.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h:172,Modifiability,polymorphi,polymorphic,172,"/// Return a single matcher, if there is no ambiguity.; ///; /// \returns the matcher, if there is only one matcher. An empty Optional, if; /// the underlying matcher is a polymorphic matcher with more than one; /// representation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h:186,Modifiability,Polymorphi,Polymorphic,186,"/// Determines if the contained matcher can be converted to; /// \c Matcher<T>.; ///; /// For the Single case, it returns true if it can be converted to; /// \c Matcher<T>.; /// For the Polymorphic case, it returns true if one, and only one, of the; /// overloads can be converted to \c Matcher<T>. If there are more than one; /// that can, the result would be ambiguous and false is returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h:91,Modifiability,Polymorphi,Polymorphic,91,"/// Return this matcher as a \c Matcher<T>.; ///; /// Handles the different types (Single, Polymorphic) accordingly.; /// Asserts that \c hasTypedMatcher<T>() is true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h:122,Testability,Assert,Asserts,122,"/// Return this matcher as a \c Matcher<T>.; ///; /// Handles the different types (Single, Polymorphic) accordingly.; /// Asserts that \c hasTypedMatcher<T>() is true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h:93,Modifiability,polymorphi,polymorphic,93,"/// String representation of the type of the value.; ///; /// If the underlying matcher is a polymorphic one, the string will show all; /// the types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/Dynamic/VariantValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/AttributeCommonInfo.h:17,Integrability,depend,depends,17,// Note TableGen depends on the order above. Do not add or change the order; // without adding related code to TableGen/ClangAttrEmitter.cpp.; /// Context-sensitive version of a keyword attribute.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/AttributeCommonInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/AttributeCommonInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/AttributeCommonInfo.h:53,Modifiability,variab,variable,53,"// FIXME: In the current state, the IsAlignas member variable is only true; // with the C++ `alignas` keyword but not `_Alignas`. The following; // expression works around the otherwise lost information so it will return; // true for `alignas` or `_Alignas` while still returning false for things; // like `__attribute__((aligned))`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/AttributeCommonInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/AttributeCommonInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/BitmaskEnum.h:25,Integrability,wrap,wrapper,25,"//===--- BitmaskEnum.h - wrapper of LLVM's bitmask enum facility-*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// Provides LLVM's BitmaskEnum facility to enumeration types declared in; /// namespace clang.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/BitmaskEnum.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/BitmaskEnum.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Builtins.h:4,Performance,Perform,Perform,4,/// Perform target-specific initialization; /// \param AuxTarget Target info to incorporate builtins from. May be nullptr.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Builtins.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Builtins.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Builtins.h:104,Modifiability,portab,portable,104,/// Mark the identifiers for all the builtins with their; /// appropriate builtin ID # and mark any non-portable builtin identifiers as; /// such.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Builtins.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Builtins.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Builtins.h:42,Performance,perform,perform,42,/// Returns true if this builtin does not perform the side-effects; /// of its arguments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Builtins.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Builtins.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CharInfo.h:88,Usability,simpl,simple,88,/// Return true if this is a valid ASCII identifier.; ///; /// Note that this is a very simple check; it does not accept UCNs as valid; /// identifier characters.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/CharInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CharInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h:420,Integrability,interface,interface,420,"//===--- CodeGenOptions.h ---------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the CodeGenOptions interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h:78,Performance,optimiz,optimized,78,/// CodeGenOptions - Track various options which control how the code; /// is optimized and passed to the backend.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h:51,Deployability,deploy,deployment,51,// Choose Swift async extended frame info based on deployment target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h:22,Modifiability,extend,extended,22,// Choose Swift async extended frame info based on deployment target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h:36,Modifiability,extend,extended,36,// Unconditionally emit Swift async extended frame info.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h:26,Modifiability,extend,extended,26,// Don't emit Swift async extended frame info.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h:164,Modifiability,variab,variables,164,/// The filename with path we use for coverage data files. The runtime; /// allows further manipulation with the GCOV_PREFIX and GCOV_PREFIX_STRIP; /// environment variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h:64,Performance,optimiz,optimizations,64,/// The files specified here are linked in to the module before optimizations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h:14,Integrability,depend,dependent,14,/// A list of dependent libraries.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h:63,Performance,optimiz,optimization,63,/// The name of the file to which the backend should save YAML optimization; /// records.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h:66,Performance,optimiz,optimization,66,/// The regex that filters the passes that should be saved to the optimization; /// records.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h:4,Performance,Optimiz,Optimization,4,/// Optimization remark with an optional regular expression pattern.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h:16,Performance,optimiz,optimization,16,"/// By default, optimization remark is missing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h:25,Performance,optimiz,optimization,25,/// Returns true iff the optimization remark holds a valid regular; /// expression.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h:13,Performance,optimiz,optimizations,13,"/// Selected optimizations for which we should enable optimization remarks.; /// Transformation passes whose name matches the contained (optional) regular; /// expression (and support this feature), will emit a diagnostic whenever; /// they perform a transformation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h:54,Performance,optimiz,optimization,54,"/// Selected optimizations for which we should enable optimization remarks.; /// Transformation passes whose name matches the contained (optional) regular; /// expression (and support this feature), will emit a diagnostic whenever; /// they perform a transformation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h:241,Performance,perform,perform,241,"/// Selected optimizations for which we should enable optimization remarks.; /// Transformation passes whose name matches the contained (optional) regular; /// expression (and support this feature), will emit a diagnostic whenever; /// they perform a transformation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h:13,Performance,optimiz,optimizations,13,"/// Selected optimizations for which we should enable missed optimization; /// remarks. Transformation passes whose name matches the contained (optional); /// regular expression (and support this feature), will emit a diagnostic; /// whenever they tried but failed to perform a transformation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h:61,Performance,optimiz,optimization,61,"/// Selected optimizations for which we should enable missed optimization; /// remarks. Transformation passes whose name matches the contained (optional); /// regular expression (and support this feature), will emit a diagnostic; /// whenever they tried but failed to perform a transformation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h:268,Performance,perform,perform,268,"/// Selected optimizations for which we should enable missed optimization; /// remarks. Transformation passes whose name matches the contained (optional); /// regular expression (and support this feature), will emit a diagnostic; /// whenever they tried but failed to perform a transformation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h:13,Performance,optimiz,optimizations,13,"/// Selected optimizations for which we should enable optimization analyses.; /// Transformation passes whose name matches the contained (optional) regular; /// expression (and support this feature), will emit a diagnostic whenever; /// they want to explain why they decided to apply or not apply a given; /// transformation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h:54,Performance,optimiz,optimization,54,"/// Selected optimizations for which we should enable optimization analyses.; /// Transformation passes whose name matches the contained (optional) regular; /// expression (and support this feature), will emit a diagnostic whenever; /// they want to explain why they decided to apply or not apply a given; /// transformation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h:11,Security,sanitiz,sanitizer,11,/// Set of sanitizer checks that are non-fatal (i.e. execution should be; /// continued when possible).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h:11,Security,sanitiz,sanitizer,11,/// Set of sanitizer checks that trap rather than diagnose.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h:61,Modifiability,plugin,plugins,61,/// List of dynamic shared object files to be loaded as pass plugins.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h:46,Performance,load,loaded,46,/// List of dynamic shared object files to be loaded as pass plugins.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h:119,Security,sanitiz,sanitizer,119,"/// Path to allowlist file specifying which objects; /// (files, functions) should exclusively be instrumented; /// by sanitizer coverage pass.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h:102,Deployability,canary,canary,102,"/// The TLS base register when StackProtectorGuard is ""tls"", or register used; /// to store the stack canary for ""sysreg"".; /// On x86 this can be ""fs"" or ""gs"".; /// On AArch64 this can only be ""sp_el0"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h:107,Security,sanitiz,sanitizer,107,"/// Path to ignorelist file specifying which objects; /// (files, functions) listed for instrumentation by sanitizer; /// coverage pass should actually not be instrumented.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h:107,Security,sanitiz,sanitizer,107,"/// Path to ignorelist file specifying which objects; /// (files, functions) listed for instrumentation by sanitizer; /// binary metadata pass should not be instrumented.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h:431,Availability,avail,available,431,"/// The minimum hotness value a diagnostic needs in order to be included in; /// optimization diagnostics.; ///; /// The threshold is an Optional value, which maps to one of the 3 states:; /// 1. 0 => threshold disabled. All remarks will be printed.; /// 2. positive int => manual threshold by user. Remarks with hotness exceed; /// threshold will be printed.; /// 3. None => 'auto' threshold by user. The actual value is not; /// available at command line, but will be synced with; /// hotness threshold from profile summary during; /// compilation.; ///; /// If threshold option is not specified, it is disabled by default.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h:81,Performance,optimiz,optimization,81,"/// The minimum hotness value a diagnostic needs in order to be included in; /// optimization diagnostics.; ///; /// The threshold is an Optional value, which maps to one of the 3 states:; /// 1. 0 => threshold disabled. All remarks will be printed.; /// 2. positive int => manual threshold by user. Remarks with hotness exceed; /// threshold will be printed.; /// 3. None => 'auto' threshold by user. The actual value is not; /// available at command line, but will be synced with; /// hotness threshold from profile summary during; /// compilation.; ///; /// If threshold option is not specified, it is disabled by default.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h:10,Security,access,accessors,10,// Define accessors/mutators for code generation options of enumeration type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h:22,Modifiability,variab,variable,22,/// Check if type and variable info should be emitted.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h:23,Security,Sanitiz,SanitizeCoverage,23,// Check if any one of SanitizeCoverage* is enabled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h:23,Security,Sanitiz,SanitizeBinaryMetadata,23,// Check if any one of SanitizeBinaryMetadata* is enabled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CommentOptions.h:429,Integrability,interface,interface,429,"//===- CommentOptions.h - Options for parsing comments ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// Defines the clang::CommentOptions interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/CommentOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CommentOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Cuda.h:34,Testability,test,testing,34,// Generic processor model is for testing only.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Cuda.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Cuda.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Cuda.h:15,Integrability,depend,dependent,15,// Various SDK-dependent features that affect CUDA compilation,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Cuda.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Cuda.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CustomizableOptional.h:127,Integrability,interface,interface,127,// namespace optional_detail; // Optional type which internal storage can be specialized by providing; // OptionalStorage. The interface follows std::optional.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/CustomizableOptional.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CustomizableOptional.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DarwinSDKInfo.h:491,Availability,error,error,491,"// Returns the optional, target-specific version mapping that maps from one; // target to another target.; //; // This mapping is constructed from an appropriate mapping in the SDKSettings,; // for instance, when building for Mac Catalyst, the mapping would contain the; // ""macOS_iOSMac"" mapping as it maps the macOS versions to the Mac Catalyst; // versions.; //; // This mapping does not exist when the target doesn't have an appropriate; // related version mapping, or when there was an error reading the mapping; // from the SDKSettings, or when it's missing in the SDKSettings.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/DarwinSDKInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DarwinSDKInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DarwinSDKInfo.h:11,Integrability,wrap,wrap,11,"// Need to wrap the value in an optional here as the value has to be default; // constructible, and std::unique_ptr doesn't like DarwinSDKInfo being; // Optional as Optional is trying to copy it in emplace.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/DarwinSDKInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DarwinSDKInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DarwinSDKInfo.h:84,Availability,error,error,84,"/// Parse the SDK information from the SDKSettings.json file.; ///; /// \returns an error if the SDKSettings.json file is invalid, std::nullopt if; /// the SDK has no SDKSettings.json, or a valid \c DarwinSDKInfo otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/DarwinSDKInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DarwinSDKInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:426,Integrability,interface,interfaces,426,"//===- Diagnostic.h - C Language Family Diagnostic Handling -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// Defines the Diagnostic-related interfaces.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:319,Availability,error,error,319,"// namespace tok; /// Annotates a diagnostic with some code that should be; /// inserted, removed, or replaced to fix the problem.; ///; /// This kind of hint should be used when we are certain that the; /// introduction, removal, or modification of a particular (small!); /// amount of code will correct a compilation error. The compiler; /// should also provide full recovery from such errors, such that; /// suppressing the diagnostic output can still result in successful; /// compilation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:369,Availability,recover,recovery,369,"// namespace tok; /// Annotates a diagnostic with some code that should be; /// inserted, removed, or replaced to fix the problem.; ///; /// This kind of hint should be used when we are certain that the; /// introduction, removal, or modification of a particular (small!); /// amount of code will correct a compilation error. The compiler; /// should also provide full recovery from such errors, such that; /// suppressing the diagnostic output can still result in successful; /// compilation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:388,Availability,error,errors,388,"// namespace tok; /// Annotates a diagnostic with some code that should be; /// inserted, removed, or replaced to fix the problem.; ///; /// This kind of hint should be used when we are certain that the; /// introduction, removal, or modification of a particular (small!); /// amount of code will correct a compilation error. The compiler; /// should also provide full recovery from such errors, such that; /// suppressing the diagnostic output can still result in successful; /// compilation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:369,Safety,recover,recovery,369,"// namespace tok; /// Annotates a diagnostic with some code that should be; /// inserted, removed, or replaced to fix the problem.; ///; /// This kind of hint should be used when we are certain that the; /// introduction, removal, or modification of a particular (small!); /// amount of code will correct a compilation error. The compiler; /// should also provide full recovery from such errors, such that; /// suppressing the diagnostic output can still result in successful; /// compilation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:48,Availability,error,error,48,/// Code that should be replaced to correct the error. Empty for an; /// insertion hint.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:190,Usability,simpl,simplified,190,/// The maximum number of arguments we can hold. We; /// currently only support up to 10 arguments (%0-%9).; ///; /// A single diagnostic with more than that almost certainly has to; /// be simplified anyway.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:194,Integrability,depend,depends,194,/// The values for the various substitution positions.; ///; /// This is used when the argument is not an std::string. The specific value; /// is mangled into an uint64_t and the interpretation depends on exactly; /// what sort of argument kind it is.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:164,Availability,error,errors,164,"/// Concrete class used by the front-end to report problems and issues.; ///; /// This massages the diagnostics (e.g. handling things like ""report warnings; /// as errors"" and passes them off to the DiagnosticConsumer for reporting to; /// the user. DiagnosticsEngine is tied to one translation unit and one; /// SourceManager.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:15,Availability,error,errors,15,// Treat fatal errors like errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:27,Availability,error,errors,27,// Treat fatal errors like errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:85,Availability,error,error,85,"// With Ovl_Best, the number of overload candidates to show when we encounter; // an error.; //; // The value here is the number of candidates to show in the first nontrivial; // error. Future errors may show a different number of candidates.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:179,Availability,error,error,179,"// With Ovl_Best, the number of overload candidates to show when we encounter; // an error.; //; // The value here is the number of candidates to show in the first nontrivial; // error. Future errors may show a different number of candidates.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:193,Availability,error,errors,193,"// With Ovl_Best, the number of overload candidates to show when we encounter; // an error.; //; // The value here is the number of candidates to show in the first nontrivial; // error. Future errors may show a different number of candidates.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:12,Availability,error,errors,12,"// Cap of # errors emitted, 0 -> no limit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:297,Usability,clear,clear,297,"/// Mapping information for diagnostics.; ///; /// Mapping info is packed into four bits per diagnostic. The low three; /// bits are the mapping (an instance of diag::Severity), or zero if unset.; /// The high bit is set when the mapping was established as a user mapping.; /// If the high bit is clear, then the low bits are set to the default; /// value, and should be mapped with -pedantic, -Werror, etc.; ///; /// A new DiagState is created and kept around when diagnostic pragmas modify; /// the state so that we know what is the diagnostic state at any given; /// source location.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:12,Deployability,configurat,configuration,12,"// ""Global"" configuration state that can actually vary between modules.; // Ignore all warnings: -w",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:12,Modifiability,config,configuration,12,"// ""Global"" configuration state that can actually vary between modules.; // Ignore all warnings: -w",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:23,Availability,error,errors,23,// Treat warnings like errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:9,Availability,error,errors,9,// Treat errors like fatal errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:27,Availability,error,errors,27,// Treat errors like fatal errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:33,Availability,error,errors,33,// Map extensions to warnings or errors?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:4,Usability,Clear,Clear,4,/// Clear out this map.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:63,Availability,redundant,redundant,63,"/// The diagnostic state for the parent file. This is strictly redundant,; /// as looking up the DecomposedIncludedLoc for the FileID in the Files; /// map would give us this, but we cache it here for performance.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:183,Performance,cache,cache,183,"/// The diagnostic state for the parent file. This is strictly redundant,; /// as looking up the DecomposedIncludedLoc for the FileID in the Files; /// map would give us this, but we cache it here for performance.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:201,Performance,perform,performance,201,"/// The diagnostic state for the parent file. This is strictly redundant,; /// as looking up the DecomposedIncludedLoc for the FileID in the Files; /// map would give us this, but we cache it here for performance.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:63,Safety,redund,redundant,63,"/// The diagnostic state for the parent file. This is strictly redundant,; /// as looking up the DecomposedIncludedLoc for the FileID in the Files; /// map would give us this, but we cache it here for performance.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:39,Availability,error,error,39,/// Sticky flag set to \c true when an error is emitted.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:53,Availability,error,error,53,"/// Sticky flag set to \c true when an ""uncompilable error"" occurs.; /// I.e. an error that was not upgraded from a warning by -Werror.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:81,Availability,error,error,81,"/// Sticky flag set to \c true when an ""uncompilable error"" occurs.; /// I.e. an error that was not upgraded from a warning by -Werror.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:100,Deployability,upgrade,upgraded,100,"/// Sticky flag set to \c true when an ""uncompilable error"" occurs.; /// I.e. an error that was not upgraded from a warning by -Werror.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:44,Availability,error,error,44,/// Sticky flag set to \c true when a fatal error is emitted.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:36,Availability,error,error,36,/// Indicates that an unrecoverable error has occurred.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:55,Availability,error,error,55,"/// Counts for DiagnosticErrorTrap to check whether an error occurred; /// during a parsing section, e.g. during parsing a function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:14,Availability,error,errors,14,/// Number of errors reported,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:334,Safety,avoid,avoid,334,/// A function pointer that converts an opaque diagnostic; /// argument to a strings.; ///; /// This takes the modifiers and argument that was present in the diagnostic.; ///; /// The PrevArgs array indicates the previous arguments formatted for this; /// diagnostic. Implementations of this function can use this information to; /// avoid redundancy across arguments.; ///; /// This is a hack to avoid a layering violation between libbasic and libsema.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:340,Safety,redund,redundancy,340,/// A function pointer that converts an opaque diagnostic; /// argument to a strings.; ///; /// This takes the modifiers and argument that was present in the diagnostic.; ///; /// The PrevArgs array indicates the previous arguments formatted for this; /// diagnostic. Implementations of this function can use this information to; /// avoid redundancy across arguments.; ///; /// This is a hack to avoid a layering violation between libbasic and libsema.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:397,Safety,avoid,avoid,397,/// A function pointer that converts an opaque diagnostic; /// argument to a strings.; ///; /// This takes the modifiers and argument that was present in the diagnostic.; ///; /// The PrevArgs array indicates the previous arguments formatted for this; /// diagnostic. Implementations of this function can use this information to; /// avoid redundancy across arguments.; ///; /// This is a hack to avoid a layering violation between libbasic and libsema.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:38,Availability,error,errors,38,/// Specify a limit for the number of errors we should; /// emit before giving up.; ///; /// Zero disables the limit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:58,Availability,error,errors,58,"/// When set to true, any warnings reported are issued as errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:26,Availability,error,error,26,"/// When set to true, any error reported is made a fatal error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:57,Availability,error,error,57,"/// When set to true, any error reported is made a fatal error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:39,Availability,error,error,39,"/// \brief When set to true, any fatal error reported is made an error.; ///; /// This setting takes precedence over the setErrorsAsFatal setting above.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:65,Availability,error,error,65,"/// \brief When set to true, any fatal error reported is made an error.; ///; /// This setting takes precedence over the setErrorsAsFatal setting above.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:21,Availability,mask,mask,21,/// When set to true mask warnings that come from system headers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:49,Integrability,inject,inject,49,"/// Set color printing, so the type diffing will inject color markers; /// into the output.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:49,Security,inject,inject,49,"/// Set color printing, so the type diffing will inject color markers; /// into the output.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:98,Availability,error,error,98,/// Controls whether otherwise-unmapped extension diagnostics are; /// mapped onto ignore/warning/error.; ///; /// This corresponds to the GCC -pedantic and -pedantic-errors option.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:167,Availability,error,errors,167,/// Controls whether otherwise-unmapped extension diagnostics are; /// mapped onto ignore/warning/error.; ///; /// This corresponds to the GCC -pedantic and -pedantic-errors option.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:115,Availability,error,errors,115,"/// This allows the client to specify that certain warnings are; /// ignored.; ///; /// Notes can never be mapped, errors can only be mapped to fatal, and; /// WARNINGs and EXTENSIONs can be mapped arbitrarily.; ///; /// \param Loc The source location that this change of diagnostic state should; /// take affect. It can be null if we are setting the latest state.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:23,Availability,error,error,23,"/// Set the warning-as-error flag for the given diagnostic group.; ///; /// This function always only operates on the current diagnostic state.; ///; /// \returns True if the given group is unknown, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:12,Availability,error,error-as-fatal,12,"/// Set the error-as-fatal flag for the given diagnostic group.; ///; /// This function always only operates on the current diagnostic state.; ///; /// \returns True if the given group is unknown, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:4,Availability,Error,Errors,4,"/// Errors that actually prevent compilation, not those that are; /// upgraded from a warning by -Werror.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:70,Deployability,upgrade,upgraded,70,"/// Errors that actually prevent compilation, not those that are; /// upgraded from a warning by -Werror.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:48,Availability,error,error,48,/// Determine whether any kind of unrecoverable error has occurred.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:293,Security,hash,hashed,293,"/// Return an ID for a diagnostic with the specified format string and; /// level.; ///; /// If this is the first request for this diagnostic, it is registered and; /// created, otherwise the existing ID is returned.; ///; /// \param FormatString A fixed diagnostic format string that will be hashed; /// and mapped to a unique DiagID.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:60,Deployability,configurat,configuration,60,"/// Reset the state of the diagnostic object to its initial configuration.; /// \param[in] soft - if true, doesn't reset the diagnostic mappings and state",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:60,Modifiability,config,configuration,60,"/// Reset the state of the diagnostic object to its initial configuration.; /// \param[in] soft - if true, doesn't reset the diagnostic mappings and state",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:130,Integrability,interface,interfaces,130,//===--------------------------------------------------------------------===//; // DiagnosticsEngine classification and reporting interfaces.; //; /// Determine whether the diagnostic is known to be ignored.; ///; /// This can be used to opportunistically avoid expensive checks when it's; /// known for certain that the diagnostic has been suppressed at the; /// specified location \p Loc.; ///; /// \param Loc The source location we are interested in finding out the; /// diagnostic state. Can be null in order to query the latest state.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:256,Safety,avoid,avoid,256,//===--------------------------------------------------------------------===//; // DiagnosticsEngine classification and reporting interfaces.; //; /// Determine whether the diagnostic is known to be ignored.; ///; /// This can be used to opportunistically avoid expensive checks when it's; /// known for certain that the diagnostic has been suppressed at the; /// specified location \p Loc.; ///; /// \param Loc The source location we are interested in finding out the; /// diagnostic state. Can be null in order to query the latest state.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:32,Modifiability,config,configured,32,"/// Based on the way the client configured the DiagnosticsEngine; /// object, classify the specified diagnostic ID into a Level, consumable by; /// the DiagnosticConsumer.; ///; /// To preserve invariant assumptions, this function should not be used to; /// influence parse or semantic analysis actions. Instead consider using; /// \c isIgnored().; ///; /// \param Loc The source location we are interested in finding out the; /// diagnostic state. Can be null in order to query the latest state.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:389,Availability,avail,available,389,"/// Issue the message to the client.; ///; /// This actually returns an instance of DiagnosticBuilder which emits the; /// diagnostics (through @c ProcessDiag) when it is destroyed.; ///; /// \param DiagID A member of the @c diag::kind enum.; /// \param Loc Represents the source location associated with the diagnostic,; /// which can be an invalid location if no position information is available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:14,Integrability,message,message,14,"/// Issue the message to the client.; ///; /// This actually returns an instance of DiagnosticBuilder which emits the; /// diagnostics (through @c ProcessDiag) when it is destroyed.; ///; /// \param DiagID A member of the @c diag::kind enum.; /// \param Loc Represents the source location associated with the diagnostic,; /// which can be an invalid location if no position information is available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:390,Availability,error,errors,390,"/// Set the ""delayed"" diagnostic that will be emitted once; /// the current diagnostic completes.; ///; /// If a diagnostic is already in-flight but the front end must; /// report a problem (e.g., with an inconsistent file system; /// state), this routine sets a ""delayed"" diagnostic that will be; /// emitted after the current diagnostic completes. This should; /// only be used for fatal errors detected at inconvenient; /// times. If emitting a delayed diagnostic causes a second delayed; /// diagnostic to be introduced, that second delayed diagnostic; /// will be ignored.; ///; /// \param DiagID The ID of the diagnostic being delayed.; ///; /// \param Arg1 A string argument that will be provided to the; /// diagnostic. A copy of this string will be stored in the; /// DiagnosticsEngine object itself.; ///; /// \param Arg2 A string argument that will be provided to the; /// diagnostic. A copy of this string will be stored in the; /// DiagnosticsEngine object itself.; ///; /// \param Arg3 A string argument that will be provided to the; /// diagnostic. A copy of this string will be stored in the; /// DiagnosticsEngine object itself.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:248,Integrability,rout,routine,248,"/// Set the ""delayed"" diagnostic that will be emitted once; /// the current diagnostic completes.; ///; /// If a diagnostic is already in-flight but the front end must; /// report a problem (e.g., with an inconsistent file system; /// state), this routine sets a ""delayed"" diagnostic that will be; /// emitted after the current diagnostic completes. This should; /// only be used for fatal errors detected at inconvenient; /// times. If emitting a delayed diagnostic causes a second delayed; /// diagnostic to be introduced, that second delayed diagnostic; /// will be ignored.; ///; /// \param DiagID The ID of the diagnostic being delayed.; ///; /// \param Arg1 A string argument that will be provided to the; /// diagnostic. A copy of this string will be stored in the; /// DiagnosticsEngine object itself.; ///; /// \param Arg2 A string argument that will be provided to the; /// diagnostic. A copy of this string will be stored in the; /// DiagnosticsEngine object itself.; ///; /// \param Arg3 A string argument that will be provided to the; /// diagnostic. A copy of this string will be stored in the; /// DiagnosticsEngine object itself.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:397,Safety,detect,detected,397,"/// Set the ""delayed"" diagnostic that will be emitted once; /// the current diagnostic completes.; ///; /// If a diagnostic is already in-flight but the front end must; /// report a problem (e.g., with an inconsistent file system; /// state), this routine sets a ""delayed"" diagnostic that will be; /// emitted after the current diagnostic completes. This should; /// only be used for fatal errors detected at inconvenient; /// times. If emitting a delayed diagnostic causes a second delayed; /// diagnostic to be introduced, that second delayed diagnostic; /// will be ignored.; ///; /// \param DiagID The ID of the diagnostic being delayed.; ///; /// \param Arg1 A string argument that will be provided to the; /// diagnostic. A copy of this string will be stored in the; /// DiagnosticsEngine object itself.; ///; /// \param Arg2 A string argument that will be provided to the; /// diagnostic. A copy of this string will be stored in the; /// DiagnosticsEngine object itself.; ///; /// \param Arg3 A string argument that will be provided to the; /// diagnostic. A copy of this string will be stored in the; /// DiagnosticsEngine object itself.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:4,Usability,Clear,Clear,4,/// Clear out the current diagnostic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:343,Testability,Assert,Assertions,343,"// This is private state used by DiagnosticBuilder. We put it here instead of; // in DiagnosticBuilder in order to keep DiagnosticBuilder a small lightweight; // object. This implementation choice means that we can only have one; // diagnostic ""in flight"" at a time, but this seems to be a reasonable; // tradeoff to keep these objects small. Assertions verify that only one; // diagnostic is in flight at a time.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:185,Usability,simpl,simplified,185,/// The maximum number of arguments we can hold.; ///; /// We currently only support up to 10 arguments (%0-%9). A single; /// diagnostic with more than that almost certainly has to be simplified; /// anyway.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:17,Security,access,access,17,"// Sema requires access to the following functions because the current design; // of SFINAE requires it to use its own SemaDiagnosticBuilder, which needs to; // access us directly to ensure we minimize the emitted code for the common; // Sema::Diag() patterns.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:161,Security,access,access,161,"// Sema requires access to the following functions because the current design; // of SFINAE requires it to use its own SemaDiagnosticBuilder, which needs to; // access us directly to ensure we minimize the emitted code for the common; // Sema::Diag() patterns.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:36,Usability,clear,clear,36,/// Emit the current diagnostic and clear the diagnostic state.; ///; /// \param Force Emit the diagnostic regardless of suppression settings.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:40,Availability,error,errors,40,"/// RAII class that determines when any errors have occurred; /// between the time the instance was created and the time it was; /// queried.; ///; /// Note that you almost certainly do not want to use this. It's usually; /// meaningless to ask whether a particular scope triggered an error message,; /// because error messages outside that scope can mark things invalid (or cause; /// us to reach an error limit), which can suppress errors within that scope.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:285,Availability,error,error,285,"/// RAII class that determines when any errors have occurred; /// between the time the instance was created and the time it was; /// queried.; ///; /// Note that you almost certainly do not want to use this. It's usually; /// meaningless to ask whether a particular scope triggered an error message,; /// because error messages outside that scope can mark things invalid (or cause; /// us to reach an error limit), which can suppress errors within that scope.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:313,Availability,error,error,313,"/// RAII class that determines when any errors have occurred; /// between the time the instance was created and the time it was; /// queried.; ///; /// Note that you almost certainly do not want to use this. It's usually; /// meaningless to ask whether a particular scope triggered an error message,; /// because error messages outside that scope can mark things invalid (or cause; /// us to reach an error limit), which can suppress errors within that scope.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:401,Availability,error,error,401,"/// RAII class that determines when any errors have occurred; /// between the time the instance was created and the time it was; /// queried.; ///; /// Note that you almost certainly do not want to use this. It's usually; /// meaningless to ask whether a particular scope triggered an error message,; /// because error messages outside that scope can mark things invalid (or cause; /// us to reach an error limit), which can suppress errors within that scope.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:434,Availability,error,errors,434,"/// RAII class that determines when any errors have occurred; /// between the time the instance was created and the time it was; /// queried.; ///; /// Note that you almost certainly do not want to use this. It's usually; /// meaningless to ask whether a particular scope triggered an error message,; /// because error messages outside that scope can mark things invalid (or cause; /// us to reach an error limit), which can suppress errors within that scope.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:291,Integrability,message,message,291,"/// RAII class that determines when any errors have occurred; /// between the time the instance was created and the time it was; /// queried.; ///; /// Note that you almost certainly do not want to use this. It's usually; /// meaningless to ask whether a particular scope triggered an error message,; /// because error messages outside that scope can mark things invalid (or cause; /// us to reach an error limit), which can suppress errors within that scope.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:319,Integrability,message,messages,319,"/// RAII class that determines when any errors have occurred; /// between the time the instance was created and the time it was; /// queried.; ///; /// Note that you almost certainly do not want to use this. It's usually; /// meaningless to ask whether a particular scope triggered an error message,; /// because error messages outside that scope can mark things invalid (or cause; /// us to reach an error limit), which can suppress errors within that scope.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:26,Availability,error,errors,26,/// Determine whether any errors have occurred since this; /// object instance was created.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:40,Availability,error,errors,40,/// Determine whether any unrecoverable errors have occurred since this; /// object instance was created.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:32,Availability,error,errors,32,"/// Set to initial state of ""no errors occurred"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:18,Integrability,interface,interface,18,"/// The streaming interface shared between DiagnosticBuilder and; /// PartialDiagnostic. This class is not intended to be constructed directly; /// but only as base class of DiagnosticBuilder and PartialDiagnostic builder.; ///; /// Any new type of argument accepted by DiagnosticBuilder and PartialDiagnostic; /// should be implemented as a '<<' operator of StreamingDiagnostic, e.g.; ///; /// const StreamingDiagnostic&; /// operator<<(const StreamingDiagnostic&, NewArgType);; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:98,Energy Efficiency,reduce,reduce,98,"/// An allocator for DiagnosticStorage objects, which uses a small cache to; /// objects, used to reduce malloc()/free() traffic for partial diagnostics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:67,Performance,cache,cache,67,"/// An allocator for DiagnosticStorage objects, which uses a small cache to; /// objects, used to reduce malloc()/free() traffic for partial diagnostics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:4,Energy Efficiency,Allocate,Allocate,4,/// Allocate new storage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:22,Energy Efficiency,allocate,allocate,22,/// Allocator used to allocate storage for this diagnostic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:65,Integrability,wrap,wrap,65,"// The hot path for PartialDiagnostic is when we just used it to wrap an ID; // (typically so we have the flexibility of passing a more complex; // diagnostic into the callee, but that does not commonly occur).; //; // Split this out into a slow function for silly compilers (*cough*) which; // can't do decent partial inlining.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:117,Availability,error,error,117,"/// Conversion of StreamingDiagnostic to bool always returns \c true.; ///; /// This allows is to be used in boolean error contexts (where \c true is; /// used to indicate that an error has occurred), like:; /// \code; /// return Diag(...);; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:180,Availability,error,error,180,"/// Conversion of StreamingDiagnostic to bool always returns \c true.; ///; /// This allows is to be used in boolean error contexts (where \c true is; /// used to indicate that an error has occurred), like:; /// \code; /// return Diag(...);; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:737,Performance,optimiz,optimizers,737,"//===----------------------------------------------------------------------===//; // DiagnosticBuilder; //===----------------------------------------------------------------------===//; /// A little helper class used to produce diagnostics.; ///; /// This is constructed by the DiagnosticsEngine::Report method, and; /// allows insertion of extra information (arguments and source ranges) into; /// the currently ""in flight"" diagnostic. When the temporary for the builder; /// is destroyed, the diagnostic is issued.; ///; /// Note that many of these will be created as temporary objects (many call; /// sites), so we want them to be small and we never want their address taken.; /// This ensures that compilers with somewhat reasonable optimizers will promote; /// the common fields to registers, eliminating increments of the NumArgs field,; /// for example.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:96,Availability,redundant,redundant,96,"/// Status variable indicating if this diagnostic is still active.; ///; // NOTE: This field is redundant with DiagObj (IsActive iff (DiagObj == 0)),; // but LLVM is not currently smart enough to eliminate the null check that; // Emit() would end up with if we used that as our status variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:11,Modifiability,variab,variable,11,"/// Status variable indicating if this diagnostic is still active.; ///; // NOTE: This field is redundant with DiagObj (IsActive iff (DiagObj == 0)),; // but LLVM is not currently smart enough to eliminate the null check that; // Emit() would end up with if we used that as our status variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:285,Modifiability,variab,variable,285,"/// Status variable indicating if this diagnostic is still active.; ///; // NOTE: This field is redundant with DiagObj (IsActive iff (DiagObj == 0)),; // but LLVM is not currently smart enough to eliminate the null check that; // Emit() would end up with if we used that as our status variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:96,Safety,redund,redundant,96,"/// Status variable indicating if this diagnostic is still active.; ///; // NOTE: This field is redundant with DiagObj (IsActive iff (DiagObj == 0)),; // but LLVM is not currently smart enough to eliminate the null check that; // Emit() would end up with if we used that as our status variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:4,Usability,Clear,Clear,4,/// Clear out the current diagnostic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:56,Safety,avoid,avoid,56,// It is necessary to limit this to rvalue reference to avoid calling this; // function with a bitfield lvalue argument since non-const reference to; // bitfield is not allowed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:89,Security,access,accessors,89,"/// Return the kind of the specified index.; ///; /// Based on the kind of argument, the accessors below can be used to get; /// the value.; ///; /// \pre Idx < getNumArgs()",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:3,Usability,Simpl,Simple,3,// Simple debug printing of StoredDiagnostic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:13,Integrability,interface,interface,13,"/// Abstract interface, implemented by clients of the front-end, which; /// formats and prints fully processed diagnostics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:15,Availability,error,errors,15,///< Number of errors reported,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:162,Availability,avail,available,162,/// Callback to inform the diagnostic client that processing; /// of a source file has ended.; ///; /// The diagnostic client should assume that any objects made available via; /// BeginSourceFile() are inaccessible.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:189,Availability,error,errors,189,"/// Handle this diagnostic, reporting it to the user or; /// capturing it to a log as needed.; ///; /// The default implementation just keeps track of the total number of; /// warnings and errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:79,Testability,log,log,79,"/// Handle this diagnostic, reporting it to the user or; /// capturing it to a log as needed.; ///; /// The default implementation just keeps track of the total number of; /// warnings and errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:25,Modifiability,variab,variable,25,// The printer sets this variable to true if the template diff was used.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:62,Deployability,toggle,toggle,62,/// Special character that the diagnostic printer will use to toggle the bold; /// attribute. The character itself will be not be printed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticError.h:58,Availability,Error,Error,58,"//===--- DiagnosticError.h - Diagnostic payload for llvm::Error -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/DiagnosticError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticError.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticError.h:43,Availability,Error,Error,43,/// Carries a Clang diagnostic in an llvm::Error.; ///; /// Users should emit the stored diagnostic using the DiagnosticsEngine.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/DiagnosticError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticError.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticError.h:66,Availability,Error,Error,66,/// Extracts and returns the diagnostic payload from the given \c Error if; /// the error is a \c DiagnosticError. Returns std::nullopt if the given error; /// is not a \c DiagnosticError.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/DiagnosticError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticError.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticError.h:84,Availability,error,error,84,/// Extracts and returns the diagnostic payload from the given \c Error if; /// the error is a \c DiagnosticError. Returns std::nullopt if the given error; /// is not a \c DiagnosticError.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/DiagnosticError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticError.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticError.h:149,Availability,error,error,149,/// Extracts and returns the diagnostic payload from the given \c Error if; /// the error is a \c DiagnosticError. Returns std::nullopt if the given error; /// is not a \c DiagnosticError.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/DiagnosticError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticError.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h:431,Integrability,interface,interfaces,431,"//===--- DiagnosticIDs.h - Diagnostic IDs Handling --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Defines the Diagnostic IDs-related interfaces.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h:167,Availability,Error,Error,167,"/// Enum values that allow the client to map NOTEs, WARNINGs, and EXTENSIONs; /// to either Ignore (nothing), Remark (emit a remark), Warning; /// (emit a warning) or Error (emit as an error). It allows clients to; /// map ERRORs to Error or Fatal (stop emitting diagnostics after this one).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h:185,Availability,error,error,185,"/// Enum values that allow the client to map NOTEs, WARNINGs, and EXTENSIONs; /// to either Ignore (nothing), Remark (emit a remark), Warning; /// (emit a warning) or Error (emit as an error). It allows clients to; /// map ERRORs to Error or Fatal (stop emitting diagnostics after this one).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h:223,Availability,ERROR,ERRORs,223,"/// Enum values that allow the client to map NOTEs, WARNINGs, and EXTENSIONs; /// to either Ignore (nothing), Remark (emit a remark), Warning; /// (emit a warning) or Error (emit as an error). It allows clients to; /// map ERRORs to Error or Fatal (stop emitting diagnostics after this one).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h:233,Availability,Error,Error,233,"/// Enum values that allow the client to map NOTEs, WARNINGs, and EXTENSIONs; /// to either Ignore (nothing), Remark (emit a remark), Warning; /// (emit a warning) or Error (emit as an error). It allows clients to; /// map ERRORs to Error or Fatal (stop emitting diagnostics after this one).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h:35,Availability,error,error,35,///< Present this diagnostic as an error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h:40,Availability,error,error,40,///< Present this diagnostic as a fatal error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h:142,Availability,error,error,142,"/// Whether this mapping attempted to map the diagnostic to a warning, but; /// was overruled because the diagnostic was already mapped to an error or; /// fatal error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h:162,Availability,error,error,162,"/// Whether this mapping attempted to map the diagnostic to a warning, but; /// was overruled because the diagnostic was already mapped to an error or; /// fatal error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h:334,Safety,safe,safe,334,"/// Return an ID for a diagnostic with the specified format string and; /// level.; ///; /// If this is the first request for this diagnostic, it is registered and; /// created, otherwise the existing ID is returned.; // FIXME: Replace this function with a create-only facilty like; // createCustomDiagIDFromFormatString() to enforce safe usage. At the time of; // writing, nearly all callers of this function were invalid.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h:123,Integrability,interface,interfaces,123,"//===--------------------------------------------------------------------===//; // Diagnostic classification and reporting interfaces.; //; /// Given a diagnostic ID, return a description of the issue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h:57,Availability,error,errors,57,/// Return true if the specified diagnostic is mapped to errors by; /// default.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h:319,Availability,error,error,319,"/// Determine whether the given built-in diagnostic ID is for an; /// extension of some sort, and whether it is enabled by default.; ///; /// This also returns EnabledByDefault, which is set to indicate whether the; /// diagnostic is ignored by default (in which case -pedantic enables it) or; /// treated as a warning/error by default.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h:44,Deployability,toggle,toggles,44,"/// Given a group ID, returns the flag that toggles the group.; /// For example, for Group::DeprecatedDeclarations, returns; /// ""deprecated-declarations"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h:44,Deployability,toggle,toggles,44,"/// Given a group ID, returns the flag that toggles the group.; /// For example, for ""deprecated-declarations"", returns; /// Group::DeprecatedDeclarations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h:136,Availability,error,errors,136,"/// The diagnostic should not be reported, but it should cause; /// template argument deduction to fail.; ///; /// The vast majority of errors that occur during template argument; /// deduction fall into this category.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h:98,Availability,error,errors,98,"/// The diagnostic should be reported.; ///; /// The diagnostic should be reported. Various fatal errors (e.g.,; /// template instantiation depth exceeded) fall into this category.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h:84,Availability,failure,failures,84,"/// The diagnostic is an access-control diagnostic, which will be; /// substitution failures in some contexts and reported in others.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h:25,Security,access,access-control,25,"/// The diagnostic is an access-control diagnostic, which will be; /// substitution failures in some contexts and reported in others.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h:71,Availability,error,error,71,"/// Determines whether the given built-in diagnostic ID is; /// for an error that is suppressed if it occurs during C++ template; /// argument deduction.; ///; /// When an error is suppressed due to SFINAE, the template argument; /// deduction fails but no diagnostic is emitted. Certain classes of; /// errors, such as those errors that involve C++ access control,; /// are not SFINAE errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h:172,Availability,error,error,172,"/// Determines whether the given built-in diagnostic ID is; /// for an error that is suppressed if it occurs during C++ template; /// argument deduction.; ///; /// When an error is suppressed due to SFINAE, the template argument; /// deduction fails but no diagnostic is emitted. Certain classes of; /// errors, such as those errors that involve C++ access control,; /// are not SFINAE errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h:304,Availability,error,errors,304,"/// Determines whether the given built-in diagnostic ID is; /// for an error that is suppressed if it occurs during C++ template; /// argument deduction.; ///; /// When an error is suppressed due to SFINAE, the template argument; /// deduction fails but no diagnostic is emitted. Certain classes of; /// errors, such as those errors that involve C++ access control,; /// are not SFINAE errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h:326,Availability,error,errors,326,"/// Determines whether the given built-in diagnostic ID is; /// for an error that is suppressed if it occurs during C++ template; /// argument deduction.; ///; /// When an error is suppressed due to SFINAE, the template argument; /// deduction fails but no diagnostic is emitted. Certain classes of; /// errors, such as those errors that involve C++ access control,; /// are not SFINAE errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h:386,Availability,error,errors,386,"/// Determines whether the given built-in diagnostic ID is; /// for an error that is suppressed if it occurs during C++ template; /// argument deduction.; ///; /// When an error is suppressed due to SFINAE, the template argument; /// deduction fails but no diagnostic is emitted. Certain classes of; /// errors, such as those errors that involve C++ access control,; /// are not SFINAE errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h:350,Security,access,access,350,"/// Determines whether the given built-in diagnostic ID is; /// for an error that is suppressed if it occurs during C++ template; /// argument deduction.; ///; /// When an error is suppressed due to SFINAE, the template argument; /// deduction fails but no diagnostic is emitted. Certain classes of; /// errors, such as those errors that involve C++ access control,; /// are not SFINAE errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h:27,Integrability,message,message,27,"/// Whether the diagnostic message can be deferred.; ///; /// For single source offloading languages, a diagnostic message occurred; /// in a device host function may be deferred until the function is sure; /// to be emitted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h:115,Integrability,message,message,115,"/// Whether the diagnostic message can be deferred.; ///; /// For single source offloading languages, a diagnostic message occurred; /// in a device host function may be deferred until the function is sure; /// to be emitted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h:156,Modifiability,config,configured,156,"/// Classify the specified diagnostic ID into a Level, consumable by; /// the DiagnosticClient.; ///; /// The classification is based on the way the client configured the; /// DiagnosticsEngine object.; ///; /// \param Loc The source location for which we are interested in finding out; /// the diagnostic state. Can be null in order to query the latest state.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticIDs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticOptions.h:45,Security,access,accessors,45,// Define simple diagnostic options (with no accessors).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/DiagnosticOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticOptions.h:10,Usability,simpl,simple,10,// Define simple diagnostic options (with no accessors).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/DiagnosticOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticOptions.h:87,Security,access,accessors,87,"// Define diagnostic options of enumeration type. These are private, and will; // have accessors (below).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/DiagnosticOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticOptions.h:16,Testability,log,log,16,/// The file to log diagnostic output to.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/DiagnosticOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticOptions.h:10,Security,access,accessors,10,// Define accessors/mutators for diagnostic options of enumeration type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/DiagnosticOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DiagnosticOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DirectoryEntry.h:404,Integrability,interface,interfaces,404,"//===- clang/Basic/DirectoryEntry.h - Directory references ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Defines interfaces for clang::DirectoryEntry and clang::DirectoryEntryRef.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/DirectoryEntry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DirectoryEntry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DirectoryEntry.h:30,Performance,Cache,Cached,30,// end namespace FileMgr; /// Cached information about one directory (either on disk or in; /// the virtual file system).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/DirectoryEntry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DirectoryEntry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DirectoryEntry.h:94,Security,access,accessed,94,/// A reference to a \c DirectoryEntry that includes the name of the directory; /// as it was accessed by the FileManager's client.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/DirectoryEntry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DirectoryEntry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DirectoryEntry.h:4,Security,Hash,Hash,4,"/// Hash code is based on the DirectoryEntry, not the specific named; /// reference.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/DirectoryEntry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DirectoryEntry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DirectoryEntry.h:284,Deployability,patch,patch,284,"/// Allow DirectoryEntryRef to degrade into 'const DirectoryEntry*' to; /// facilitate incremental adoption.; ///; /// The goal is to avoid code churn due to dances like the following:; /// \code; /// // Old code.; /// lvalue = rvalue;; ///; /// // Temporary code from an incremental patch.; /// lvalue = &rvalue.getDirectoryEntry();; ///; /// // Final code.; /// lvalue = rvalue;; /// \endcode; ///; /// FIXME: Once DirectoryEntryRef is ""everywhere"" and DirectoryEntry::getName; /// has been deleted, delete this implicit conversion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/DirectoryEntry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DirectoryEntry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DirectoryEntry.h:134,Safety,avoid,avoid,134,"/// Allow DirectoryEntryRef to degrade into 'const DirectoryEntry*' to; /// facilitate incremental adoption.; ///; /// The goal is to avoid code churn due to dances like the following:; /// \code; /// // Old code.; /// lvalue = rvalue;; ///; /// // Temporary code from an incremental patch.; /// lvalue = &rvalue.getDirectoryEntry();; ///; /// // Final code.; /// lvalue = rvalue;; /// \endcode; ///; /// FIXME: Once DirectoryEntryRef is ""everywhere"" and DirectoryEntry::getName; /// has been deleted, delete this implicit conversion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/DirectoryEntry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DirectoryEntry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DirectoryEntry.h:8,Safety,safe,safe,8,// It's safe to use operator==.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/DirectoryEntry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/DirectoryEntry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ExceptionSpecificationType.h:33,Integrability,depend,dependent,33,"///< noexcept(expression), value-dependent",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/ExceptionSpecificationType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ExceptionSpecificationType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileEntry.h:404,Integrability,interface,interfaces,404,"//===- clang/Basic/FileEntry.h - File references ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Defines interfaces for clang::FileEntry and clang::FileEntryRef.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileEntry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileEntry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileEntry.h:84,Security,access,accessed,84,/// A reference to a \c FileEntry that includes the name of the file as it was; /// accessed by the FileManager's client.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileEntry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileEntry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileEntry.h:4,Security,Hash,Hash,4,"/// Hash code is based on the FileEntry, not the specific named reference,; /// just like operator==.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileEntry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileEntry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileEntry.h:274,Deployability,patch,patch,274,"/// Allow FileEntryRef to degrade into 'const FileEntry*' to facilitate; /// incremental adoption.; ///; /// The goal is to avoid code churn due to dances like the following:; /// \code; /// // Old code.; /// lvalue = rvalue;; ///; /// // Temporary code from an incremental patch.; /// lvalue = &rvalue.getFileEntry();; ///; /// // Final code.; /// lvalue = rvalue;; /// \endcode; ///; /// FIXME: Once FileEntryRef is ""everywhere"" and FileEntry::LastRef and; /// FileEntry::getName have been deleted, delete this implicit conversion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileEntry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileEntry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileEntry.h:124,Safety,avoid,avoid,124,"/// Allow FileEntryRef to degrade into 'const FileEntry*' to facilitate; /// incremental adoption.; ///; /// The goal is to avoid code churn due to dances like the following:; /// \code; /// // Old code.; /// lvalue = rvalue;; ///; /// // Temporary code from an incremental patch.; /// lvalue = &rvalue.getFileEntry();; ///; /// // Final code.; /// lvalue = rvalue;; /// \endcode; ///; /// FIXME: Once FileEntryRef is ""everywhere"" and FileEntry::LastRef and; /// FileEntry::getName have been deleted, delete this implicit conversion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileEntry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileEntry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileEntry.h:4,Security,Expose,Expose,4,/// Expose the underlying MapEntry to simplify packing in a PointerIntPair or; /// PointerUnion and allow construction in Optional.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileEntry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileEntry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileEntry.h:38,Usability,simpl,simplify,38,/// Expose the underlying MapEntry to simplify packing in a PointerIntPair or; /// PointerUnion and allow construction in Optional.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileEntry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileEntry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileEntry.h:8,Safety,safe,safe,8,// It's safe to use operator==.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileEntry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileEntry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileEntry.h:4,Performance,Cache,Cached,4,"/// Cached information about one file (either on disk; /// or in the virtual file system).; ///; /// If the 'File' member is valid, then this FileEntry has an open file; /// descriptor for the file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileEntry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileEntry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:427,Integrability,interface,interface,427,"//===--- FileManager.h - File System Probing and Caching --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Defines the clang::FileManager interface and associated types.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:4,Performance,Cache,Cache,4,/// Cache for existing real directories.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:4,Performance,Cache,Cache,4,/// Cache for existing real files.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:41,Energy Efficiency,allocate,allocated,41,"/// The virtual directories that we have allocated.; ///; /// For each virtual file (e.g. foo/bar/baz.cpp), we add all of its parent; /// directories (foo/ and foo/bar/) here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:35,Energy Efficiency,allocate,allocated,35,/// The virtual files that we have allocated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:104,Availability,error,error,104,"/// A cache that maps paths to directory entries (either real or; /// virtual) we have looked up, or an error that occurred when we looked up; /// the directory.; ///; /// The actual Entries for real directories/files are; /// owned by UniqueRealDirs/UniqueRealFiles above, while the Entries; /// for virtual directories/files are owned by; /// VirtualDirectoryEntries/VirtualFileEntries above.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:6,Performance,cache,cache,6,"/// A cache that maps paths to directory entries (either real or; /// virtual) we have looked up, or an error that occurred when we looked up; /// the directory.; ///; /// The actual Entries for real directories/files are; /// owned by UniqueRealDirs/UniqueRealFiles above, while the Entries; /// for virtual directories/files are owned by; /// VirtualDirectoryEntries/VirtualFileEntries above.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:99,Availability,error,error,99,"/// A cache that maps paths to file entries (either real or; /// virtual) we have looked up, or an error that occurred when we looked up; /// the file.; ///; /// \see SeenDirEntries",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:6,Performance,cache,cache,6,"/// A cache that maps paths to file entries (either real or; /// virtual) we have looked up, or an error that occurred when we looked up; /// the file.; ///; /// \see SeenDirEntries",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:173,Availability,error,error,173,"/// A mirror of SeenFileEntries to give fake answers for getBypassFile().; ///; /// Don't bother hooking up a BumpPtrAllocator. This should be rarely used,; /// and only on error paths.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:45,Security,access,accessed,45,"/// The file entry for stdin, if it has been accessed through the FileManager.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:4,Deployability,Install,Installs,4,/// Installs the provided FileSystemStatCache object within; /// the FileManager.; ///; /// Ownership of this object is transferred to the FileManager.; ///; /// \param statCache the new stat cache to install. Ownership of this; /// object is transferred to the FileManager.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:201,Deployability,install,install,201,/// Installs the provided FileSystemStatCache object within; /// the FileManager.; ///; /// Ownership of this object is transferred to the FileManager.; ///; /// \param statCache the new stat cache to install. Ownership of this; /// object is transferred to the FileManager.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:192,Performance,cache,cache,192,/// Installs the provided FileSystemStatCache object within; /// the FileManager.; ///; /// Ownership of this object is transferred to the FileManager.; ///; /// \param statCache the new stat cache to install. Ownership of this; /// object is transferred to the FileManager.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:51,Performance,cache,cached,51,/// Returns the number of unique real file entries cached by the file manager.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:138,Availability,error,error,138,"/// Lookup, cache, and verify the specified directory (real or; /// virtual).; ///; /// This returns a \c std::error_code if there was an error reading the; /// directory. On success, returns the reference to the directory entry; /// together with the exact path that was used to access a file by a; /// particular call to getDirectoryRef.; ///; /// \param CacheFailure If true and the file does not exist, we'll cache; /// the failure to find this file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:428,Availability,failure,failure,428,"/// Lookup, cache, and verify the specified directory (real or; /// virtual).; ///; /// This returns a \c std::error_code if there was an error reading the; /// directory. On success, returns the reference to the directory entry; /// together with the exact path that was used to access a file by a; /// particular call to getDirectoryRef.; ///; /// \param CacheFailure If true and the file does not exist, we'll cache; /// the failure to find this file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:12,Performance,cache,cache,12,"/// Lookup, cache, and verify the specified directory (real or; /// virtual).; ///; /// This returns a \c std::error_code if there was an error reading the; /// directory. On success, returns the reference to the directory entry; /// together with the exact path that was used to access a file by a; /// particular call to getDirectoryRef.; ///; /// \param CacheFailure If true and the file does not exist, we'll cache; /// the failure to find this file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:357,Performance,Cache,CacheFailure,357,"/// Lookup, cache, and verify the specified directory (real or; /// virtual).; ///; /// This returns a \c std::error_code if there was an error reading the; /// directory. On success, returns the reference to the directory entry; /// together with the exact path that was used to access a file by a; /// particular call to getDirectoryRef.; ///; /// \param CacheFailure If true and the file does not exist, we'll cache; /// the failure to find this file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:413,Performance,cache,cache,413,"/// Lookup, cache, and verify the specified directory (real or; /// virtual).; ///; /// This returns a \c std::error_code if there was an error reading the; /// directory. On success, returns the reference to the directory entry; /// together with the exact path that was used to access a file by a; /// particular call to getDirectoryRef.; ///; /// \param CacheFailure If true and the file does not exist, we'll cache; /// the failure to find this file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:280,Security,access,access,280,"/// Lookup, cache, and verify the specified directory (real or; /// virtual).; ///; /// This returns a \c std::error_code if there was an error reading the; /// directory. On success, returns the reference to the directory entry; /// together with the exact path that was used to access a file by a; /// particular call to getDirectoryRef.; ///; /// \param CacheFailure If true and the file does not exist, we'll cache; /// the failure to find this file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:71,Availability,error,error,71,"/// Get a \c DirectoryEntryRef if it exists, without doing anything on error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:278,Availability,error,error,278,"/// Lookup, cache, and verify the specified directory (real or; /// virtual).; ///; /// This function is deprecated and will be removed at some point in the; /// future, new clients should use; /// \c getDirectoryRef.; ///; /// This returns a \c std::error_code if there was an error reading the; /// directory. If there is no error, the DirectoryEntry is guaranteed to be; /// non-NULL.; ///; /// \param CacheFailure If true and the file does not exist, we'll cache; /// the failure to find this file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:327,Availability,error,error,327,"/// Lookup, cache, and verify the specified directory (real or; /// virtual).; ///; /// This function is deprecated and will be removed at some point in the; /// future, new clients should use; /// \c getDirectoryRef.; ///; /// This returns a \c std::error_code if there was an error reading the; /// directory. If there is no error, the DirectoryEntry is guaranteed to be; /// non-NULL.; ///; /// \param CacheFailure If true and the file does not exist, we'll cache; /// the failure to find this file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:476,Availability,failure,failure,476,"/// Lookup, cache, and verify the specified directory (real or; /// virtual).; ///; /// This function is deprecated and will be removed at some point in the; /// future, new clients should use; /// \c getDirectoryRef.; ///; /// This returns a \c std::error_code if there was an error reading the; /// directory. If there is no error, the DirectoryEntry is guaranteed to be; /// non-NULL.; ///; /// \param CacheFailure If true and the file does not exist, we'll cache; /// the failure to find this file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:12,Performance,cache,cache,12,"/// Lookup, cache, and verify the specified directory (real or; /// virtual).; ///; /// This function is deprecated and will be removed at some point in the; /// future, new clients should use; /// \c getDirectoryRef.; ///; /// This returns a \c std::error_code if there was an error reading the; /// directory. If there is no error, the DirectoryEntry is guaranteed to be; /// non-NULL.; ///; /// \param CacheFailure If true and the file does not exist, we'll cache; /// the failure to find this file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:405,Performance,Cache,CacheFailure,405,"/// Lookup, cache, and verify the specified directory (real or; /// virtual).; ///; /// This function is deprecated and will be removed at some point in the; /// future, new clients should use; /// \c getDirectoryRef.; ///; /// This returns a \c std::error_code if there was an error reading the; /// directory. If there is no error, the DirectoryEntry is guaranteed to be; /// non-NULL.; ///; /// \param CacheFailure If true and the file does not exist, we'll cache; /// the failure to find this file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:461,Performance,cache,cache,461,"/// Lookup, cache, and verify the specified directory (real or; /// virtual).; ///; /// This function is deprecated and will be removed at some point in the; /// future, new clients should use; /// \c getDirectoryRef.; ///; /// This returns a \c std::error_code if there was an error reading the; /// directory. If there is no error, the DirectoryEntry is guaranteed to be; /// non-NULL.; ///; /// \param CacheFailure If true and the file does not exist, we'll cache; /// the failure to find this file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:268,Availability,error,error,268,"/// Lookup, cache, and verify the specified file (real or; /// virtual).; ///; /// This function is deprecated and will be removed at some point in the; /// future, new clients should use; /// \c getFileRef.; ///; /// This returns a \c std::error_code if there was an error loading the file.; /// If there is no error, the FileEntry is guaranteed to be non-NULL.; ///; /// \param OpenFile if true and the file exists, it will be opened.; ///; /// \param CacheFailure If true and the file does not exist, we'll cache; /// the failure to find this file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:312,Availability,error,error,312,"/// Lookup, cache, and verify the specified file (real or; /// virtual).; ///; /// This function is deprecated and will be removed at some point in the; /// future, new clients should use; /// \c getFileRef.; ///; /// This returns a \c std::error_code if there was an error loading the file.; /// If there is no error, the FileEntry is guaranteed to be non-NULL.; ///; /// \param OpenFile if true and the file exists, it will be opened.; ///; /// \param CacheFailure If true and the file does not exist, we'll cache; /// the failure to find this file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:525,Availability,failure,failure,525,"/// Lookup, cache, and verify the specified file (real or; /// virtual).; ///; /// This function is deprecated and will be removed at some point in the; /// future, new clients should use; /// \c getFileRef.; ///; /// This returns a \c std::error_code if there was an error loading the file.; /// If there is no error, the FileEntry is guaranteed to be non-NULL.; ///; /// \param OpenFile if true and the file exists, it will be opened.; ///; /// \param CacheFailure If true and the file does not exist, we'll cache; /// the failure to find this file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:12,Performance,cache,cache,12,"/// Lookup, cache, and verify the specified file (real or; /// virtual).; ///; /// This function is deprecated and will be removed at some point in the; /// future, new clients should use; /// \c getFileRef.; ///; /// This returns a \c std::error_code if there was an error loading the file.; /// If there is no error, the FileEntry is guaranteed to be non-NULL.; ///; /// \param OpenFile if true and the file exists, it will be opened.; ///; /// \param CacheFailure If true and the file does not exist, we'll cache; /// the failure to find this file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:274,Performance,load,loading,274,"/// Lookup, cache, and verify the specified file (real or; /// virtual).; ///; /// This function is deprecated and will be removed at some point in the; /// future, new clients should use; /// \c getFileRef.; ///; /// This returns a \c std::error_code if there was an error loading the file.; /// If there is no error, the FileEntry is guaranteed to be non-NULL.; ///; /// \param OpenFile if true and the file exists, it will be opened.; ///; /// \param CacheFailure If true and the file does not exist, we'll cache; /// the failure to find this file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:454,Performance,Cache,CacheFailure,454,"/// Lookup, cache, and verify the specified file (real or; /// virtual).; ///; /// This function is deprecated and will be removed at some point in the; /// future, new clients should use; /// \c getFileRef.; ///; /// This returns a \c std::error_code if there was an error loading the file.; /// If there is no error, the FileEntry is guaranteed to be non-NULL.; ///; /// \param OpenFile if true and the file exists, it will be opened.; ///; /// \param CacheFailure If true and the file does not exist, we'll cache; /// the failure to find this file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:510,Performance,cache,cache,510,"/// Lookup, cache, and verify the specified file (real or; /// virtual).; ///; /// This function is deprecated and will be removed at some point in the; /// future, new clients should use; /// \c getFileRef.; ///; /// This returns a \c std::error_code if there was an error loading the file.; /// If there is no error, the FileEntry is guaranteed to be non-NULL.; ///; /// \param OpenFile if true and the file exists, it will be opened.; ///; /// \param CacheFailure If true and the file does not exist, we'll cache; /// the failure to find this file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:471,Availability,error,error,471,"/// Lookup, cache, and verify the specified file (real or virtual). Return the; /// reference to the file entry together with the exact path that was used to; /// access a file by a particular call to getFileRef. If the underlying VFS is; /// a redirecting VFS that uses external file names, the returned FileEntryRef; /// will use the external name instead of the filename that was passed to this; /// method.; ///; /// This returns a \c std::error_code if there was an error loading the file,; /// or a \c FileEntryRef otherwise.; ///; /// \param OpenFile if true and the file exists, it will be opened.; ///; /// \param CacheFailure If true and the file does not exist, we'll cache; /// the failure to find this file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:694,Availability,failure,failure,694,"/// Lookup, cache, and verify the specified file (real or virtual). Return the; /// reference to the file entry together with the exact path that was used to; /// access a file by a particular call to getFileRef. If the underlying VFS is; /// a redirecting VFS that uses external file names, the returned FileEntryRef; /// will use the external name instead of the filename that was passed to this; /// method.; ///; /// This returns a \c std::error_code if there was an error loading the file,; /// or a \c FileEntryRef otherwise.; ///; /// \param OpenFile if true and the file exists, it will be opened.; ///; /// \param CacheFailure If true and the file does not exist, we'll cache; /// the failure to find this file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:12,Performance,cache,cache,12,"/// Lookup, cache, and verify the specified file (real or virtual). Return the; /// reference to the file entry together with the exact path that was used to; /// access a file by a particular call to getFileRef. If the underlying VFS is; /// a redirecting VFS that uses external file names, the returned FileEntryRef; /// will use the external name instead of the filename that was passed to this; /// method.; ///; /// This returns a \c std::error_code if there was an error loading the file,; /// or a \c FileEntryRef otherwise.; ///; /// \param OpenFile if true and the file exists, it will be opened.; ///; /// \param CacheFailure If true and the file does not exist, we'll cache; /// the failure to find this file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:477,Performance,load,loading,477,"/// Lookup, cache, and verify the specified file (real or virtual). Return the; /// reference to the file entry together with the exact path that was used to; /// access a file by a particular call to getFileRef. If the underlying VFS is; /// a redirecting VFS that uses external file names, the returned FileEntryRef; /// will use the external name instead of the filename that was passed to this; /// method.; ///; /// This returns a \c std::error_code if there was an error loading the file,; /// or a \c FileEntryRef otherwise.; ///; /// \param OpenFile if true and the file exists, it will be opened.; ///; /// \param CacheFailure If true and the file does not exist, we'll cache; /// the failure to find this file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:623,Performance,Cache,CacheFailure,623,"/// Lookup, cache, and verify the specified file (real or virtual). Return the; /// reference to the file entry together with the exact path that was used to; /// access a file by a particular call to getFileRef. If the underlying VFS is; /// a redirecting VFS that uses external file names, the returned FileEntryRef; /// will use the external name instead of the filename that was passed to this; /// method.; ///; /// This returns a \c std::error_code if there was an error loading the file,; /// or a \c FileEntryRef otherwise.; ///; /// \param OpenFile if true and the file exists, it will be opened.; ///; /// \param CacheFailure If true and the file does not exist, we'll cache; /// the failure to find this file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:679,Performance,cache,cache,679,"/// Lookup, cache, and verify the specified file (real or virtual). Return the; /// reference to the file entry together with the exact path that was used to; /// access a file by a particular call to getFileRef. If the underlying VFS is; /// a redirecting VFS that uses external file names, the returned FileEntryRef; /// will use the external name instead of the filename that was passed to this; /// method.; ///; /// This returns a \c std::error_code if there was an error loading the file,; /// or a \c FileEntryRef otherwise.; ///; /// \param OpenFile if true and the file exists, it will be opened.; ///; /// \param CacheFailure If true and the file does not exist, we'll cache; /// the failure to find this file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:163,Security,access,access,163,"/// Lookup, cache, and verify the specified file (real or virtual). Return the; /// reference to the file entry together with the exact path that was used to; /// access a file by a particular call to getFileRef. If the underlying VFS is; /// a redirecting VFS that uses external file names, the returned FileEntryRef; /// will use the external name instead of the filename that was passed to this; /// method.; ///; /// This returns a \c std::error_code if there was an error loading the file,; /// or a \c FileEntryRef otherwise.; ///; /// \param OpenFile if true and the file exists, it will be opened.; ///; /// \param CacheFailure If true and the file does not exist, we'll cache; /// the failure to find this file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:49,Availability,error,error,49,"/// Get the FileEntryRef for stdin, returning an error if stdin cannot be; /// read.; ///; /// This reads and caches stdin before returning. Subsequent calls return the; /// same file entry, and a reference to the cached input is returned by calls; /// to getBufferForFile.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:110,Performance,cache,caches,110,"/// Get the FileEntryRef for stdin, returning an error if stdin cannot be; /// read.; ///; /// This reads and caches stdin before returning. Subsequent calls return the; /// same file entry, and a reference to the cached input is returned by calls; /// to getBufferForFile.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:214,Performance,cache,cached,214,"/// Get the FileEntryRef for stdin, returning an error if stdin cannot be; /// read.; ///; /// This reads and caches stdin before returning. Subsequent calls return the; /// same file entry, and a reference to the cached input is returned by calls; /// to getBufferForFile.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:63,Availability,error,error,63,"/// Get a FileEntryRef if it exists, without doing anything on error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:148,Security,access,accessed,148,"/// Retrieve a file entry for a ""virtual"" file that acts as; /// if there were a file with the given name on disk.; ///; /// The file itself is not accessed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:269,Availability,error,error,269,"/// Retrieve a FileEntry that bypasses VFE, which is expected to be a virtual; /// file entry, to access the real file. The returned FileEntry will have; /// the same filename as FE but a different identity and its own stat.; ///; /// This should be used only for rare error recovery paths because it; /// bypasses all mapping and uniquing, blindly creating a new FileEntry.; /// There is no attempt to deduplicate these; if you bypass the same file; /// twice, you get two new file entries.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:275,Availability,recover,recovery,275,"/// Retrieve a FileEntry that bypasses VFE, which is expected to be a virtual; /// file entry, to access the real file. The returned FileEntry will have; /// the same filename as FE but a different identity and its own stat.; ///; /// This should be used only for rare error recovery paths because it; /// bypasses all mapping and uniquing, blindly creating a new FileEntry.; /// There is no attempt to deduplicate these; if you bypass the same file; /// twice, you get two new file entries.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:275,Safety,recover,recovery,275,"/// Retrieve a FileEntry that bypasses VFE, which is expected to be a virtual; /// file entry, to access the real file. The returned FileEntry will have; /// the same filename as FE but a different identity and its own stat.; ///; /// This should be used only for rare error recovery paths because it; /// bypasses all mapping and uniquing, blindly creating a new FileEntry.; /// There is no attempt to deduplicate these; if you bypass the same file; /// twice, you get two new file entries.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:98,Security,access,access,98,"/// Retrieve a FileEntry that bypasses VFE, which is expected to be a virtual; /// file entry, to access the real file. The returned FileEntry will have; /// the same filename as FE but a different identity and its own stat.; ///; /// This should be used only for rare error recovery paths because it; /// bypasses all mapping and uniquing, blindly creating a new FileEntry.; /// There is no attempt to deduplicate these; if you bypass the same file; /// twice, you get two new file entries.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:231,Availability,error,error,231,"/// Get the 'stat' information for the given \p Path.; ///; /// If the path is relative, it will be resolved against the WorkingDir of the; /// FileManager's FileSystemOptions.; ///; /// \returns a \c std::error_code describing an error, if there was one",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:43,Performance,cache,cache,43,/// Remove the real file \p Entry from the cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:127,Performance,cache,cached,127,"/// Retrieve the canonical name for a given directory.; ///; /// This is a very expensive operation, despite its results being cached,; /// and should only be used when the physical layout of the file system is; /// required, which is (almost) never.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h:122,Performance,cache,cached,122,"/// Retrieve the canonical name for a given file.; ///; /// This is a very expensive operation, despite its results being cached,; /// and should only be used when the physical layout of the file system is; /// required, which is (almost) never.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileSystemOptions.h:433,Integrability,interface,interface,433,"//===--- FileSystemOptions.h - File System Options --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Defines the clang::FileSystemOptions interface.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileSystemOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileSystemOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileSystemOptions.h:63,Performance,perform,performed,63,/// Keeps track of options that affect how file operations are performed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileSystemOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileSystemOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileSystemStatCache.h:427,Integrability,interface,interface,427,"//===- FileSystemStatCache.h - Caching for 'stat' calls ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// Defines the FileSystemStatCache interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileSystemStatCache.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileSystemStatCache.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileSystemStatCache.h:13,Integrability,interface,interface,13,"/// Abstract interface for introducing a FileManager cache for 'stat'; /// system calls, which is used by precompiled and pretokenized headers to; /// improve performance.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileSystemStatCache.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileSystemStatCache.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileSystemStatCache.h:53,Performance,cache,cache,53,"/// Abstract interface for introducing a FileManager cache for 'stat'; /// system calls, which is used by precompiled and pretokenized headers to; /// improve performance.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileSystemStatCache.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileSystemStatCache.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileSystemStatCache.h:159,Performance,perform,performance,159,"/// Abstract interface for introducing a FileManager cache for 'stat'; /// system calls, which is used by precompiled and pretokenized headers to; /// improve performance.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileSystemStatCache.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileSystemStatCache.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileSystemStatCache.h:65,Performance,cache,cache,65,"/// Get the 'stat' information for the specified path, using the cache; /// to accelerate it if possible.; ///; /// \returns \c true if the path does not exist or \c false if it exists.; ///; /// If isFile is true, then this lookup should only return success for files; /// (not directories). If it is false this lookup should only return; /// success for directories (not files). On a successful file lookup, the; /// implementation can optionally fill in \p F with a valid \p File object and; /// the client guarantees that it will close it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileSystemStatCache.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileSystemStatCache.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileSystemStatCache.h:12,Performance,cache,cache,12,"/// A stat ""cache"" that can be used by FileManager to keep; /// track of the results of stat() calls that occur throughout the; /// execution of the front end.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/FileSystemStatCache.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/FileSystemStatCache.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:479,Integrability,interface,interfaces,479,"//===- IdentifierTable.h - Hash table for identifier lookup -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// Defines the clang::IdentifierInfo, clang::IdentifierTable, and; /// clang::Selector interfaces.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:27,Security,Hash,Hash,27,"//===- IdentifierTable.h - Hash table for identifier lookup -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// Defines the clang::IdentifierInfo, clang::IdentifierTable, and; /// clang::Selector interfaces.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:163,Modifiability,variab,variables,163,/// Determine whether an identifier is reserved for use as a name at global; /// scope. Such identifiers might be implementation-specific global functions; /// or variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:6,Usability,simpl,simple,6,/// A simple pair of identifier info and location.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:223,Modifiability,variab,variable,223,"/// One of these records is kept for each identifier that; /// is lexed. This contains information about whether the token was \#define'd,; /// is a language keyword, or if it is a front-end token of some sort (e.g. a; /// variable or function name). The preprocessor keeps this information in a; /// set, and all tok::identifier tokens have a pointer to one of these.; /// It is aligned to 8 bytes because DeclarationName needs the lower 3 bits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:18,Integrability,protocol,protocol,18,"// ObjC keyword ('protocol' in '@protocol') or builtin (__builtin_inf).; // First NUM_OBJC_KEYWORDS values are for Objective-C,; // the remaining values are for builtins.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:33,Integrability,protocol,protocol,33,"// ObjC keyword ('protocol' in '@protocol') or builtin (__builtin_inf).; // First NUM_OBJC_KEYWORDS values are for Objective-C,; // the remaining values are for builtins.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:30,Performance,load,loaded,30,// True if the identifier was loaded (at least partially) from an AST file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:62,Performance,load,loaded,62,// True if the identifier has changed from the definition; // loaded from an AST file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:85,Performance,load,loaded,85,// True if the identifier's frontend information has changed from the; // definition loaded from an AST file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:25,Safety,unsafe,unsafe,25,// True if this macro is unsafe in headers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:4,Energy Efficiency,Efficient,Efficiently,4,/// Efficiently return the length of this identifier info.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:61,Safety,unsafe,unsafe,61,"// If this is a final macro, make the deprecation and header unsafe bits; // stick around after the undefinition so they apply to any redefinitions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:88,Safety,avoid,avoid,88,"// Because calling the setters of these calls recomputes, just set them; // manually to avoid recomputing a bunch of times.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:348,Usability,clear,cleared,348,"/// is/setIsFutureCompatKeyword - Initialize information about whether or not; /// this language token is a keyword in a newer or proposed Standard. This; /// controls compatibility warnings, and is only true when not parsing the; /// corresponding Standard. Once a compatibility problem has been diagnosed; /// with this keyword, the flag will be cleared.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:106,Availability,error,error,106,"/// setIsPoisoned - Mark this identifier as poisoned. After poisoning, the; /// Preprocessor will emit an error every time this token is used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:59,Performance,load,loaded,59,/// Return true if the identifier in its current state was loaded; /// from an AST file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:63,Performance,load,loaded,63,/// Determine whether this identifier has changed since it was loaded; /// from an AST file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:55,Performance,load,loaded,55,/// Note that this identifier has changed since it was loaded from; /// an AST file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:103,Performance,load,loaded,103,/// Determine whether the frontend token information for this; /// identifier has changed since it was loaded from an AST file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:95,Performance,load,loaded,95,/// Note that the frontend token information for this identifier has; /// changed since it was loaded from an AST file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:134,Integrability,interface,interface,134,"/// An iterator that walks over all of the known identifiers; /// in the lookup table.; ///; /// Since this iterator uses an abstract interface via virtual; /// functions, it uses an object-oriented interface rather than the; /// more standard C++ STL iterator interface. In this OO-style; /// iteration, the single function \c Next() provides dereference,; /// advance, and end-of-sequence checking in a single; /// operation. Subclasses of this iterator type will provide the; /// actual functionality.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:199,Integrability,interface,interface,199,"/// An iterator that walks over all of the known identifiers; /// in the lookup table.; ///; /// Since this iterator uses an abstract interface via virtual; /// functions, it uses an object-oriented interface rather than the; /// more standard C++ STL iterator interface. In this OO-style; /// iteration, the single function \c Next() provides dereference,; /// advance, and end-of-sequence checking in a single; /// operation. Subclasses of this iterator type will provide the; /// actual functionality.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:261,Integrability,interface,interface,261,"/// An iterator that walks over all of the known identifiers; /// in the lookup table.; ///; /// Since this iterator uses an abstract interface via virtual; /// functions, it uses an object-oriented interface rather than the; /// more standard C++ STL iterator interface. In this OO-style; /// iteration, the single function \c Next() provides dereference,; /// advance, and end-of-sequence checking in a single; /// operation. Subclasses of this iterator type will provide the; /// actual functionality.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:117,Integrability,rout,routine,117,"/// Retrieve an iterator into the set of all identifiers; /// known to this identifier lookup source.; ///; /// This routine provides access to all of the identifiers known to; /// the identifier lookup, allowing access to the contents of the; /// identifiers without introducing the overhead of constructing; /// IdentifierInfo objects for each.; ///; /// \returns A new iterator into the set of known identifiers. The; /// caller is responsible for deleting this iterator.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:134,Security,access,access,134,"/// Retrieve an iterator into the set of all identifiers; /// known to this identifier lookup source.; ///; /// This routine provides access to all of the identifiers known to; /// the identifier lookup, allowing access to the contents of the; /// identifiers without introducing the overhead of constructing; /// IdentifierInfo objects for each.; ///; /// \returns A new iterator into the set of known identifiers. The; /// caller is responsible for deleting this iterator.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:213,Security,access,access,213,"/// Retrieve an iterator into the set of all identifiers; /// known to this identifier lookup source.; ///; /// This routine provides access to all of the identifiers known to; /// the identifier lookup, allowing access to the contents of the; /// identifiers without introducing the overhead of constructing; /// IdentifierInfo objects for each.; ///; /// \returns A new iterator into the set of known identifiers. The; /// caller is responsible for deleting this iterator.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:18,Energy Efficiency,efficient,efficient,18,"/// Implements an efficient mapping from strings to IdentifierInfo nodes.; ///; /// This has no other purpose, but this is an extremely performance-critical; /// piece of the code, as each occurrence of every identifier goes through; /// here when lexed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:136,Performance,perform,performance-critical,136,"/// Implements an efficient mapping from strings to IdentifierInfo nodes.; ///; /// This has no other purpose, but this is an extremely performance-critical; /// piece of the code, as each occurrence of every identifier goes through; /// here when lexed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:68,Security,hash,hashing,68,/// Print some statistics to stderr that indicate how well the; /// hashing is doing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:3,Performance,perform,performSelector,3,// performSelector families,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:189,Integrability,depend,depends,189,"/// The kind of ""extra"" information stored in the DeclarationName. See; /// @c ExtraKindOrNumArgs for an explanation of how these enumerator values; /// are used. Note that DeclarationName depends on the numerical values; /// of the enumerators in this enum. See DeclarationName::StoredNameKind; /// for more info.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:38,Modifiability,variab,variable,38,// namespace detail; /// One of these variable length records is kept for each; /// selector containing more than one keyword. We use a folding set; /// to unique aggregate names (keyword selectors in ObjC parlance). Access to; /// this class is provided strictly through Selector.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:217,Security,Access,Access,217,// namespace detail; /// One of these variable length records is kept for each; /// selector containing more than one keyword. We use a folding set; /// to unique aggregate names (keyword selectors in ObjC parlance). Access to; /// this class is provided strictly through Selector.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:29,Energy Efficiency,efficient,efficiently,29,"/// Smart pointer class that efficiently represents Objective-C method; /// names.; ///; /// This class will either point to an IdentifierInfo or a; /// MultiKeywordSelector (which is private). This enables us to optimize; /// selectors that take no arguments and selectors that take 1 argument, which; /// accounts for 78% of all selectors in Cocoa.h.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:213,Performance,optimiz,optimize,213,"/// Smart pointer class that efficiently represents Objective-C method; /// names.; ///; /// This class will either point to an IdentifierInfo or a; /// MultiKeywordSelector (which is private). This enables us to optimize; /// selectors that take no arguments and selectors that take 1 argument, which; /// accounts for 78% of all selectors in Cocoa.h.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:424,Availability,mask,mask,424,"/// IMPORTANT NOTE: the order of the types in this PointerUnion are; /// important! The DeclarationName class has bidirectional conversion; /// to/from Selector through an opaque pointer (void *) which corresponds; /// to this PointerIntPair. The discriminator bit from the PointerUnion; /// corresponds to the high bit in the MultiArg enumerator. So while this; /// PointerIntPair only has two bits for the integer (and we mask off the; /// high bit in `MultiArg` when it is used), that discrimator bit is; /// still necessary for the opaque conversion. The discriminator bit; /// from the PointerUnion and the two integer bits from the; /// PointerIntPair are also exposed via the DeclarationName::StoredNameKind; /// enumeration; see the comments in DeclarationName.h for more details.; /// Do not reorder or add any arguments to this template; /// without thoroughly understanding how tightly coupled these classes are.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:667,Security,expose,exposed,667,"/// IMPORTANT NOTE: the order of the types in this PointerUnion are; /// important! The DeclarationName class has bidirectional conversion; /// to/from Selector through an opaque pointer (void *) which corresponds; /// to this PointerIntPair. The discriminator bit from the PointerUnion; /// corresponds to the high bit in the MultiArg enumerator. So while this; /// PointerIntPair only has two bits for the integer (and we mask off the; /// high bit in `MultiArg` when it is used), that discrimator bit is; /// still necessary for the opaque conversion. The discriminator bit; /// from the PointerUnion and the two integer bits from the; /// PointerIntPair are also exposed via the DeclarationName::StoredNameKind; /// enumeration; see the comments in DeclarationName.h for more details.; /// Do not reorder or add any arguments to this template; /// without thoroughly understanding how tightly coupled these classes are.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:22,Availability,mask,mask,22,// IMPORTANT NOTE: we mask off the upper bit of this value because we only; // reserve two bits for the integer in the PointerIntPair. See the comments; // in `InfoPtr` for more details.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:38,Energy Efficiency,allocate,allocated,38,/// Return the total amount of memory allocated for managing selectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Lambda.h:110,Modifiability,variab,variables,110,"/// The different capture forms in a lambda introducer; ///; /// C++11 allows capture of \c this, or of local variables by copy or; /// by reference. C++1y also allows ""init-capture"", where the initializer; /// is an expression.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Lambda.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Lambda.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Lambda.h:15,Modifiability,variab,variable-length,15,///< Capturing variable-length array type,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Lambda.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Lambda.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:426,Integrability,interface,interface,426,"//===- LangOptions.h - C Language Family Language Options -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// Defines the clang::LangOptions interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:43,Security,access,accessors,43,// Define simple language options (with no accessors).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:10,Usability,simpl,simple,10,// Define simple language options (with no accessors).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:85,Security,access,accessors,85,"// Define language options of enumeration type. These are private, and will; // have accessors (below).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:117,Modifiability,inherit,inheritance,117,"/// In the Microsoft ABI, this controls the placement of virtual displacement; /// members used to implement virtual inheritance.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:36,Deployability,pipeline,pipeline,36,"/// Shader programs run in specific pipeline stages.; /// The order of these values matters, and must be kept in sync with the; /// Triple Environment enum in llvm::Triple. The ordering is enforced in; /// static_asserts in Triple.cpp and in clang/Basic/HLSLRuntime.h.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:13,Modifiability,variab,variables,13,"// Automatic variables live on the stack, and when trivial they're usually; // uninitialized because it's undefined behavior to use them without; // initializing them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:27,Integrability,interface,interface,27,/// Not compiling a module interface at all.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:28,Integrability,interface,interface,28,/// Compiling a C++ modules interface unit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:162,Modifiability,variab,variables,162,/// Attempt to be ABI-compatible with code generated by Clang 12.0.x; /// (git 8e464dd76bef). This causes clang to mangle lambdas within; /// global-scope inline variables incorrectly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:111,Integrability,depend,dependent,111,/// Attempt to be ABI-compatible with code generated by Clang 14.0.x.; /// This causes clang to:; /// - mangle dependent nested names incorrectly.; /// - make trivial only those defaulted copy constructors with a; /// parameter-type-list equivalent to the parameter-type-list of an; /// implicit declaration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:7,Integrability,interoperab,interoperability,7,/// No interoperability ABI has been specified,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:46,Integrability,interoperab,interoperability,46,/// CoreFoundation does not have any language interoperability,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:4,Integrability,Interoperab,Interoperability,4,/// Interoperability with the ObjectiveC runtime,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:4,Integrability,Interoperab,Interoperability,4,/// Interoperability with the latest known version of the Swift runtime,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:4,Integrability,Interoperab,Interoperability,4,/// Interoperability with the Swift 5.0 runtime,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:4,Integrability,Interoperab,Interoperability,4,/// Interoperability with the Swift 4.2 runtime,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:4,Integrability,Interoperab,Interoperability,4,/// Interoperability with the Swift 4.1 runtime,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:46,Availability,mask,masked,46,/// Assume that floating-point exceptions are masked.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:8,Modifiability,extend,extended,8,/// Use extended type for fp arithmetic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:39,Modifiability,extend,extended,39,/// Integer arguments are sign or zero extended to 32/64 bits; /// during default argument promotions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:19,Security,sanitiz,sanitizers,19,/// Set of enabled sanitizers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:68,Modifiability,variab,variables,68,"/// Paths to files specifying which objects; /// (files, functions, variables) should not be instrumented.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:97,Modifiability,variab,variables,97,"/// Paths to the XRay ""always instrument"" files specifying which; /// objects (files, functions, variables) should be imbued with the XRay; /// ""always instrument"" attribute.; /// WARNING: This is a deprecated field and will go away in the future.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:96,Modifiability,variab,variables,96,"/// Paths to the XRay ""never instrument"" files specifying which; /// objects (files, functions, variables) should be imbued with the XRay; /// ""never instrument"" attribute.; /// WARNING: This is a deprecated field and will go away in the future.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:93,Modifiability,variab,variables,93,"/// Paths to the XRay attribute list files, specifying which objects; /// (files, functions, variables) should be imbued with the appropriate XRay; /// attribute(s).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:114,Safety,abort,abort,114,"/// The name of the handler function to be called when -ftrapv is; /// specified.; ///; /// If none is specified, abort (GCC-compatible behaviour).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:130,Integrability,interface,interface,130,"/// The name of the current module, of which the main source file; /// is a part. If CompilingModule is set, we are compiling the interface; /// of this module, otherwise we are compiling an implementation file of; /// it. This starts as ModuleName in case -fmodule-name is provided and; /// changes during compilation to reflect the current module.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:97,Modifiability,variab,variables,97,"/// The user provided compilation unit ID, if non-empty. This is used to; /// externalize static variables which is needed to support accessing static; /// device variables in host code for single source offloading languages; /// like CUDA/HIP.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:163,Modifiability,variab,variables,163,"/// The user provided compilation unit ID, if non-empty. This is used to; /// externalize static variables which is needed to support accessing static; /// device variables in host code for single source offloading languages; /// like CUDA/HIP.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:134,Security,access,accessing,134,"/// The user provided compilation unit ID, if non-empty. This is used to; /// externalize static variables which is needed to support accessing static; /// device variables in host code for single source offloading languages; /// like CUDA/HIP.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:138,Testability,test,test,138,"// In OpenACC mode, contains a user provided override for the _OPENACC macro.; // This exists so that we can override the macro value and test our incomplete; // implementation on real-world examples.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:10,Security,access,accessors,10,// Define accessors/mutators for language options of enumeration type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:43,Integrability,interface,interface,43,/// Are we compiling a standard c++ module interface?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:19,Integrability,contract,contract,19,"// The language fp contract option FPM_FastHonorPragmas has the same effect; // as FPM_Fast in frontend. For simplicity, use FPM_Fast uniformly in; // frontend.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:109,Usability,simpl,simplicity,109,"// The language fp contract option FPM_FastHonorPragmas has the same effect; // as FPM_Fast in frontend. For simplicity, use FPM_Fast uniformly in; // frontend.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:67,Security,access,access,67,"// If the FP settings are set to the ""strict"" model, then; // FENV access is set to true. (ffp-model=strict)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:29,Security,access,accessors,29,// We can define most of the accessors automatically:,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:622,Availability,mask,mask,622,"/// Represents difference between two FPOptions values.; ///; /// The effect of language constructs changing the set of floating point options; /// is usually a change of some FP properties while leaving others intact. This; /// class describes such changes by keeping information about what FP options; /// are overridden.; ///; /// The integral set of FP options, described by the class FPOptions, may be; /// represented as a default FP option set, defined by language standard and; /// command line options, with the overrides introduced by pragmas.; ///; /// The is implemented as a value of the new FPOptions plus a mask showing which; /// fields are actually set in it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:8,Availability,mask,mask,8,/// Bit mask selecting bits of OverrideMask in serialized representation of; /// FPOptionsOverride.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h:94,Modifiability,extend,extend,94,/// The translation unit is a is a complete translation unit that we might; /// incrementally extend later.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangStandard.h:51,Security,validat,validate,51,"/// The language for the input, used to select and validate the language; /// standard and possible actions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/LangStandard.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangStandard.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangStandard.h:51,Performance,optimiz,optimizer,51,"/// LLVM IR: we accept this so that we can run the optimizer on it,; /// and compile it to assembly or object code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/LangStandard.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangStandard.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangStandard.h:4,Security,hasH,hasHexFloats,4,/// hasHexFloats - Language supports hexadecimal float constants.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/LangStandard.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LangStandard.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Linkage.h:246,Integrability,interface,interface,246,"/// Module linkage, which indicates that the entity can be referred; /// to from other translation units within the same module, and indirectly; /// from arbitrary other translation units through inline functions and; /// templates in the module interface.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Linkage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Linkage.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Linkage.h:349,Usability,simpl,simple,349,"/// Compute the minimum linkage given two linkages.; ///; /// The linkage can be interpreted as a pair formed by the formal linkage and; /// a boolean for external visibility. This is just what getFormalLinkage and; /// isExternallyVisible return. We want the minimum of both components. The; /// Linkage enum is defined in an order that makes this simple, we just need; /// special cases for when VisibleNoLinkage would lose the visible bit and; /// become NoLinkage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Linkage.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Linkage.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LLVM.h:76,Integrability,depend,dependencies,76,"// Do not proliferate #includes here, require clients to #include their; // dependencies.; // Casting.h has complex templates that cannot be easily forward declared.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/LLVM.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LLVM.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LLVM.h:121,Availability,error,error,121,// Add this header as a workaround to prevent `too few template arguments for; // class template 'SmallVector'` building error with build compilers like XL.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/LLVM.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LLVM.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LLVM.h:3,Availability,Error,Error,3,// Error handling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/LLVM.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/LLVM.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/MakeSupport.h:49,Integrability,depend,dependency,49,"/// Quote target names for inclusion in GNU Make dependency files.; /// Only the characters '$', '#', ' ', '\t' are quoted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/MakeSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/MakeSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h:42,Security,hash,hash,42,"/// The signature of a module, which is a hash of the AST content.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h:165,Energy Efficiency,efficient,efficient,165,// FIXME: Consider if reducing the size of this enum (having Partition and; // Named modules only) then representing interface/implementation separately; // is more efficient.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h:117,Integrability,interface,interface,117,// FIXME: Consider if reducing the size of this enum (having Partition and; // Named modules only) then representing interface/implementation separately; // is more efficient.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h:27,Integrability,interface,interface,27,/// This is a C++20 module interface unit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h:38,Integrability,interface,interface,38,/// This is a C++ 20 module partition interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h:85,Security,expose,exposed,85,"/// The module through which entities defined in this module will; /// eventually be exposed, for use in ""private"" modules.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h:4,Performance,Cache,Cache,4,/// Cache of modules visible to lookup in this module.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h:109,Availability,avail,available,109,"/// The set of language features required to use this module.; ///; /// If any of these requirements are not available, the \c IsAvailable bit; /// will be false to indicate that this (sub)module is not available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h:203,Availability,avail,available,203,"/// The set of language features required to use this module.; ///; /// If any of these requirements are not available, the \c IsAvailable bit; /// will be false to indicate that this (sub)module is not available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h:35,Performance,load,load,35,/// Whether we tried and failed to load a module file for this module.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h:27,Availability,avail,available,27,/// Whether this module is available in the current translation unit.; ///; /// If the module is missing headers or does not meet all requirements then; /// this bit will be 0.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h:28,Performance,load,loaded,28,/// Whether this module was loaded from a module file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h:23,Deployability,configurat,configuration,23,"/// Whether the set of configuration macros is exhaustive.; ///; /// When the set of configuration macros is exhaustive, meaning; /// that no identifier not in this list should affect how the module is; /// built.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h:85,Deployability,configurat,configuration,85,"/// Whether the set of configuration macros is exhaustive.; ///; /// When the set of configuration macros is exhaustive, meaning; /// that no identifier not in this list should affect how the module is; /// built.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h:23,Modifiability,config,configuration,23,"/// Whether the set of configuration macros is exhaustive.; ///; /// When the set of configuration macros is exhaustive, meaning; /// that no identifier not in this list should affect how the module is; /// built.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h:85,Modifiability,config,configuration,85,"/// Whether the set of configuration macros is exhaustive.; ///; /// When the set of configuration macros is exhaustive, meaning; /// that no identifier not in this list should affect how the module is; /// built.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h:78,Integrability,depend,depends,78,"/// The set of modules imported by this module, and on which this; /// module depends.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h:127,Performance,load,loaded,127,/// Describes an exported module that has not yet been resolved; /// (perhaps because the module it refers to has not yet been loaded).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h:16,Deployability,configurat,configuration,16,"/// The set of ""configuration macros"", which are macros that; /// (intentionally) change how this module is built.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h:16,Modifiability,config,configuration,16,"/// The set of ""configuration macros"", which are macros that; /// (intentionally) change how this module is built.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h:8,Integrability,message,message,8,/// The message provided to the user when there is a conflict.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h:8,Integrability,message,message,8,/// The message provided to the user when there is a conflict.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h:37,Availability,avail,available,37,/// Determine whether this module is available for use within the; /// current translation unit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h:37,Availability,avail,available,37,"/// Determine whether this module is available for use within the; /// current translation unit.; ///; /// \param LangOpts The language options used for the current; /// translation unit.; ///; /// \param Target The target options used for the current translation unit.; ///; /// \param Req If this module is unavailable because of a missing requirement,; /// this parameter will be set to one of the requirements that is not met for; /// use of this module.; ///; /// \param MissingHeader If this module is unavailable because of a missing; /// header, this parameter will be set to one of the missing headers.; ///; /// \param ShadowingModule If this module is unavailable because it is; /// shadowed, this parameter will be set to the shadowing module.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h:26,Integrability,interface,interface,26,// Is this a C++20 module interface or a partition.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h:27,Integrability,interface,interface,27,/// Get the primary module interface name from a partition.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h:162,Integrability,interface,interface,162,"// Technically, global module fragment belongs to global module. And global; // module has no name: [module.unit]p6:; // The global module has no name, no module interface unit, and is not; // introduced by any module-declaration.; //; // <global> is the default name showed in module map.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h:113,Energy Efficiency,efficient,efficient,113,"/// Whether the full name of this module is equal to joining; /// \p nameParts with "".""s.; ///; /// This is more efficient than getFullModuleName().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h:415,Availability,avail,availability,415,"/// Add the given feature requirement to the list of features; /// required by this module.; ///; /// \param Feature The feature that is required by this module (and; /// its submodules).; ///; /// \param RequiredState The required state of this feature: \c true; /// if it must be present, \c false if it must be absent.; ///; /// \param LangOpts The set of language options that will be used to; /// evaluate the availability of this feature.; ///; /// \param Target The target options that will be used to evaluate the; /// availability of this feature.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h:527,Availability,avail,availability,527,"/// Add the given feature requirement to the list of features; /// required by this module.; ///; /// \param Feature The feature that is required by this module (and; /// its submodules).; ///; /// \param RequiredState The required state of this feature: \c true; /// if it must be present, \c false if it must be absent.; ///; /// \param LangOpts The set of language options that will be used to; /// evaluate the availability of this feature.; ///; /// \param Target The target options that will be used to evaluate the; /// availability of this feature.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Module.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Module.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/NoSanitizeList.h:57,Security,sanitiz,sanitizers,57,"//===--- NoSanitizeList.h - List of ignored entities for sanitizers --*- C++; //-*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // User-provided list of ignored entities used to disable/alter; // instrumentation done in sanitizers.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/NoSanitizeList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/NoSanitizeList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/NoSanitizeList.h:480,Security,sanitiz,sanitizers,480,"//===--- NoSanitizeList.h - List of ignored entities for sanitizers --*- C++; //-*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // User-provided list of ignored entities used to disable/alter; // instrumentation done in sanitizers.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/NoSanitizeList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/NoSanitizeList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h:43,Deployability,Configurat,Configuration,43,"//===- ObjCRuntime.h - Objective-C Runtime Configuration --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// Defines types useful for describing an Objective-C runtime.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h:43,Modifiability,Config,Configuration,43,"//===- ObjCRuntime.h - Objective-C Runtime Configuration --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// Defines types useful for describing an Objective-C runtime.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h:135,Deployability,release,release,135,/// 'macosx' is the Apple-provided NeXT-derived runtime on Mac OS; /// X platforms that use the non-fragile ABI; the version is a; /// release of that OS.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h:139,Deployability,release,release,139,/// 'macosx-fragile' is the Apple-provided NeXT-derived runtime on; /// Mac OS X platforms that use the fragile ABI; the version is a; /// release of that OS.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h:130,Deployability,release,release,130,/// 'ios' is the Apple-provided NeXT-derived runtime on iOS or the iOS; /// simulator; it is always non-fragile. The version is a release; /// version of iOS.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h:77,Deployability,release,release,77,/// 'watchos' is a variant of iOS for Apple's watchOS. The version; /// is a release version of watchOS.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h:14,Deployability,deploy,deployment,14,"// Except for deployment target of 10.5 or less,; // Mac runtimes use legacy dispatch everywhere now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h:6,Testability,stub,stub,6,// No stub library for the fragile runtime.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h:200,Testability,stub,stub,200,"/// Does this runtime natively provide the ARC entrypoints?; ///; /// ARC cannot be directly supported on a platform that does not provide; /// these entrypoints, although it may be supportable via a stub; /// library.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h:528,Deployability,release,release,528,"/// Does this runtime provide ARC entrypoints that are likely to be faster; /// than an ordinary message send of the appropriate selector?; ///; /// The ARC entrypoints are guaranteed to be equivalent to just sending the; /// corresponding message. If the entrypoint is implemented naively as just a; /// message send, using it is a trade-off: it sacrifices a few cycles of; /// overhead to save a small amount of code. However, it's possible for; /// runtimes to detect and special-case classes that use ""standard""; /// retain/release behavior; if that's dynamically a large proportion of all; /// retained objects, using the entrypoint will also be faster than using a; /// message send.; ///; /// When this method returns true, Clang will turn non-super message sends of; /// certain selectors into calls to the correspond entrypoint:; /// retain => objc_retain; /// release => objc_release; /// autorelease => objc_autorelease",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h:870,Deployability,release,release,870,"/// Does this runtime provide ARC entrypoints that are likely to be faster; /// than an ordinary message send of the appropriate selector?; ///; /// The ARC entrypoints are guaranteed to be equivalent to just sending the; /// corresponding message. If the entrypoint is implemented naively as just a; /// message send, using it is a trade-off: it sacrifices a few cycles of; /// overhead to save a small amount of code. However, it's possible for; /// runtimes to detect and special-case classes that use ""standard""; /// retain/release behavior; if that's dynamically a large proportion of all; /// retained objects, using the entrypoint will also be faster than using a; /// message send.; ///; /// When this method returns true, Clang will turn non-super message sends of; /// certain selectors into calls to the correspond entrypoint:; /// retain => objc_retain; /// release => objc_release; /// autorelease => objc_autorelease",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h:97,Integrability,message,message,97,"/// Does this runtime provide ARC entrypoints that are likely to be faster; /// than an ordinary message send of the appropriate selector?; ///; /// The ARC entrypoints are guaranteed to be equivalent to just sending the; /// corresponding message. If the entrypoint is implemented naively as just a; /// message send, using it is a trade-off: it sacrifices a few cycles of; /// overhead to save a small amount of code. However, it's possible for; /// runtimes to detect and special-case classes that use ""standard""; /// retain/release behavior; if that's dynamically a large proportion of all; /// retained objects, using the entrypoint will also be faster than using a; /// message send.; ///; /// When this method returns true, Clang will turn non-super message sends of; /// certain selectors into calls to the correspond entrypoint:; /// retain => objc_retain; /// release => objc_release; /// autorelease => objc_autorelease",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h:240,Integrability,message,message,240,"/// Does this runtime provide ARC entrypoints that are likely to be faster; /// than an ordinary message send of the appropriate selector?; ///; /// The ARC entrypoints are guaranteed to be equivalent to just sending the; /// corresponding message. If the entrypoint is implemented naively as just a; /// message send, using it is a trade-off: it sacrifices a few cycles of; /// overhead to save a small amount of code. However, it's possible for; /// runtimes to detect and special-case classes that use ""standard""; /// retain/release behavior; if that's dynamically a large proportion of all; /// retained objects, using the entrypoint will also be faster than using a; /// message send.; ///; /// When this method returns true, Clang will turn non-super message sends of; /// certain selectors into calls to the correspond entrypoint:; /// retain => objc_retain; /// release => objc_release; /// autorelease => objc_autorelease",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h:305,Integrability,message,message,305,"/// Does this runtime provide ARC entrypoints that are likely to be faster; /// than an ordinary message send of the appropriate selector?; ///; /// The ARC entrypoints are guaranteed to be equivalent to just sending the; /// corresponding message. If the entrypoint is implemented naively as just a; /// message send, using it is a trade-off: it sacrifices a few cycles of; /// overhead to save a small amount of code. However, it's possible for; /// runtimes to detect and special-case classes that use ""standard""; /// retain/release behavior; if that's dynamically a large proportion of all; /// retained objects, using the entrypoint will also be faster than using a; /// message send.; ///; /// When this method returns true, Clang will turn non-super message sends of; /// certain selectors into calls to the correspond entrypoint:; /// retain => objc_retain; /// release => objc_release; /// autorelease => objc_autorelease",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h:676,Integrability,message,message,676,"/// Does this runtime provide ARC entrypoints that are likely to be faster; /// than an ordinary message send of the appropriate selector?; ///; /// The ARC entrypoints are guaranteed to be equivalent to just sending the; /// corresponding message. If the entrypoint is implemented naively as just a; /// message send, using it is a trade-off: it sacrifices a few cycles of; /// overhead to save a small amount of code. However, it's possible for; /// runtimes to detect and special-case classes that use ""standard""; /// retain/release behavior; if that's dynamically a large proportion of all; /// retained objects, using the entrypoint will also be faster than using a; /// message send.; ///; /// When this method returns true, Clang will turn non-super message sends of; /// certain selectors into calls to the correspond entrypoint:; /// retain => objc_retain; /// release => objc_release; /// autorelease => objc_autorelease",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h:757,Integrability,message,message,757,"/// Does this runtime provide ARC entrypoints that are likely to be faster; /// than an ordinary message send of the appropriate selector?; ///; /// The ARC entrypoints are guaranteed to be equivalent to just sending the; /// corresponding message. If the entrypoint is implemented naively as just a; /// message send, using it is a trade-off: it sacrifices a few cycles of; /// overhead to save a small amount of code. However, it's possible for; /// runtimes to detect and special-case classes that use ""standard""; /// retain/release behavior; if that's dynamically a large proportion of all; /// retained objects, using the entrypoint will also be faster than using a; /// message send.; ///; /// When this method returns true, Clang will turn non-super message sends of; /// certain selectors into calls to the correspond entrypoint:; /// retain => objc_retain; /// release => objc_release; /// autorelease => objc_autorelease",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h:464,Safety,detect,detect,464,"/// Does this runtime provide ARC entrypoints that are likely to be faster; /// than an ordinary message send of the appropriate selector?; ///; /// The ARC entrypoints are guaranteed to be equivalent to just sending the; /// corresponding message. If the entrypoint is implemented naively as just a; /// message send, using it is a trade-off: it sacrifices a few cycles of; /// overhead to save a small amount of code. However, it's possible for; /// runtimes to detect and special-case classes that use ""standard""; /// retain/release behavior; if that's dynamically a large proportion of all; /// retained objects, using the entrypoint will also be faster than using a; /// message send.; ///; /// When this method returns true, Clang will turn non-super message sends of; /// certain selectors into calls to the correspond entrypoint:; /// retain => objc_retain; /// release => objc_release; /// autorelease => objc_autorelease",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h:93,Integrability,message,message,93,"/// Does this runtime provide entrypoints that are likely to be faster; /// than an ordinary message send of the ""alloc"" selector?; ///; /// The ""alloc"" entrypoint is guaranteed to be equivalent to just sending the; /// corresponding message. If the entrypoint is implemented naively as just a; /// message send, using it is a trade-off: it sacrifices a few cycles of; /// overhead to save a small amount of code. However, it's possible for; /// runtimes to detect and special-case classes that use ""standard""; /// alloc behavior; if that's dynamically a large proportion of all; /// objects, using the entrypoint will also be faster than using a message; /// send.; ///; /// When this method returns true, Clang will turn non-super message sends of; /// certain selectors into calls to the corresponding entrypoint:; /// alloc => objc_alloc; /// allocWithZone:nil => objc_allocWithZone",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h:234,Integrability,message,message,234,"/// Does this runtime provide entrypoints that are likely to be faster; /// than an ordinary message send of the ""alloc"" selector?; ///; /// The ""alloc"" entrypoint is guaranteed to be equivalent to just sending the; /// corresponding message. If the entrypoint is implemented naively as just a; /// message send, using it is a trade-off: it sacrifices a few cycles of; /// overhead to save a small amount of code. However, it's possible for; /// runtimes to detect and special-case classes that use ""standard""; /// alloc behavior; if that's dynamically a large proportion of all; /// objects, using the entrypoint will also be faster than using a message; /// send.; ///; /// When this method returns true, Clang will turn non-super message sends of; /// certain selectors into calls to the corresponding entrypoint:; /// alloc => objc_alloc; /// allocWithZone:nil => objc_allocWithZone",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h:299,Integrability,message,message,299,"/// Does this runtime provide entrypoints that are likely to be faster; /// than an ordinary message send of the ""alloc"" selector?; ///; /// The ""alloc"" entrypoint is guaranteed to be equivalent to just sending the; /// corresponding message. If the entrypoint is implemented naively as just a; /// message send, using it is a trade-off: it sacrifices a few cycles of; /// overhead to save a small amount of code. However, it's possible for; /// runtimes to detect and special-case classes that use ""standard""; /// alloc behavior; if that's dynamically a large proportion of all; /// objects, using the entrypoint will also be faster than using a message; /// send.; ///; /// When this method returns true, Clang will turn non-super message sends of; /// certain selectors into calls to the corresponding entrypoint:; /// alloc => objc_alloc; /// allocWithZone:nil => objc_allocWithZone",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h:647,Integrability,message,message,647,"/// Does this runtime provide entrypoints that are likely to be faster; /// than an ordinary message send of the ""alloc"" selector?; ///; /// The ""alloc"" entrypoint is guaranteed to be equivalent to just sending the; /// corresponding message. If the entrypoint is implemented naively as just a; /// message send, using it is a trade-off: it sacrifices a few cycles of; /// overhead to save a small amount of code. However, it's possible for; /// runtimes to detect and special-case classes that use ""standard""; /// alloc behavior; if that's dynamically a large proportion of all; /// objects, using the entrypoint will also be faster than using a message; /// send.; ///; /// When this method returns true, Clang will turn non-super message sends of; /// certain selectors into calls to the corresponding entrypoint:; /// alloc => objc_alloc; /// allocWithZone:nil => objc_allocWithZone",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h:733,Integrability,message,message,733,"/// Does this runtime provide entrypoints that are likely to be faster; /// than an ordinary message send of the ""alloc"" selector?; ///; /// The ""alloc"" entrypoint is guaranteed to be equivalent to just sending the; /// corresponding message. If the entrypoint is implemented naively as just a; /// message send, using it is a trade-off: it sacrifices a few cycles of; /// overhead to save a small amount of code. However, it's possible for; /// runtimes to detect and special-case classes that use ""standard""; /// alloc behavior; if that's dynamically a large proportion of all; /// objects, using the entrypoint will also be faster than using a message; /// send.; ///; /// When this method returns true, Clang will turn non-super message sends of; /// certain selectors into calls to the corresponding entrypoint:; /// alloc => objc_alloc; /// allocWithZone:nil => objc_allocWithZone",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h:458,Safety,detect,detect,458,"/// Does this runtime provide entrypoints that are likely to be faster; /// than an ordinary message send of the ""alloc"" selector?; ///; /// The ""alloc"" entrypoint is guaranteed to be equivalent to just sending the; /// corresponding message. If the entrypoint is implemented naively as just a; /// message send, using it is a trade-off: it sacrifices a few cycles of; /// overhead to save a small amount of code. However, it's possible for; /// runtimes to detect and special-case classes that use ""standard""; /// alloc behavior; if that's dynamically a large proportion of all; /// objects, using the entrypoint will also be faster than using a message; /// send.; ///; /// When this method returns true, Clang will turn non-super message sends of; /// certain selectors into calls to the corresponding entrypoint:; /// alloc => objc_alloc; /// allocWithZone:nil => objc_allocWithZone",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h:143,Integrability,message,message,143,"/// Does this runtime provide the objc_alloc_init entrypoint? This can apply; /// the same optimization as objc_alloc, but also sends an -init message,; /// reducing code size on the caller.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h:91,Performance,optimiz,optimization,91,"/// Does this runtime provide the objc_alloc_init entrypoint? This can apply; /// the same optimization as objc_alloc, but also sends an -init message,; /// reducing code size on the caller.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h:31,Performance,optimiz,optimized,31,/// Does this runtime supports optimized setter entrypoints?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h:152,Safety,abort,abort,152,"/// Does this runtime provide an objc_terminate function?; ///; /// This is used in handlers for exceptions during the unwind process;; /// without it, abort() must be used in pure ObjC files.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h:47,Availability,avail,available,47,/// Is objc_unsafeClaimAutoreleasedReturnValue available?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h:37,Availability,avail,available,37,/// Are the empty collection symbols available?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h:77,Testability,stub,stubs,77,/// Returns true if this Objective-C runtime supports Objective-C class; /// stubs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h:108,Availability,error,error,108,/// Try to parse an Objective-C runtime specification from the given; /// string.; ///; /// \return true on error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenACCKinds.h:108,Integrability,rout,routine,108,"// Executable Directives. ""wait"" is first referred to here, but ends up being; // in its own section after ""routine"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/OpenACCKinds.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenACCKinds.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenACCKinds.h:53,Deployability,update,update,53,"/// 'if_present' clause, allowed on 'host_data' and 'update' directives.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/OpenACCKinds.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenACCKinds.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenACCKinds.h:41,Integrability,rout,routine,41,"/// 'seq' clause, allowed on 'loop' and 'routine' directives.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/OpenACCKinds.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenACCKinds.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenACCKinds.h:55,Integrability,rout,routine,55,"/// 'worker' clause, allowed on 'loop', Combined, and 'routine' directives.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/OpenACCKinds.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenACCKinds.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenACCKinds.h:55,Integrability,rout,routine,55,"/// 'vector' clause, allowed on 'loop', Combined, and 'routine' directives.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/OpenACCKinds.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenACCKinds.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenACCKinds.h:33,Integrability,rout,routine,33,"/// 'nohost' clause, allowed on 'routine' directives.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/OpenACCKinds.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenACCKinds.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenACCKinds.h:69,Deployability,update,update,69,"/// 'self' clause, allowed on Compute and Combined Constructs, plus 'update'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/OpenACCKinds.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenACCKinds.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenACCKinds.h:37,Deployability,update,update,37,"/// 'device' clause, allowed on the 'update' construct.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/OpenACCKinds.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenACCKinds.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenACCKinds.h:31,Deployability,update,update,31,"/// 'host' clause, allowed on 'update' construct.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/OpenACCKinds.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenACCKinds.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenACCKinds.h:30,Integrability,rout,routine,30,"/// 'bind' clause, allowed on routine constructs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/OpenACCKinds.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenACCKinds.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenACCKinds.h:89,Deployability,update,update,89,"/// 'device_type' clause, allowed on Constructs, 'data', 'init', 'shutdown',; /// 'set', update', 'loop', 'routine', and Combined constructs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/OpenACCKinds.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenACCKinds.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenACCKinds.h:107,Integrability,rout,routine,107,"/// 'device_type' clause, allowed on Constructs, 'data', 'init', 'shutdown',; /// 'set', update', 'loop', 'routine', and Combined constructs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/OpenACCKinds.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenACCKinds.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenCLOptions.h:79,Availability,mask,mask,79,// This enum maps OpenCL version(s) into value. These values are used as; // a mask to indicate in which OpenCL version(s) extension is a core or; // optional core feature.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/OpenCLOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenCLOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenCLOptions.h:82,Availability,mask,mask,82,// Check if OpenCL C version is contained in a given encoded OpenCL C version; // mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/OpenCLOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenCLOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenCLOptions.h:42,Modifiability,variab,variables,42,// OpenCL C v1.2 s6.5 - All program scope variables must be declared in the; // __constant address space.; // OpenCL C v2.0 s6.5.1 - Variables defined at program scope and static; // variables inside a function can also be declared in the global; // address space.; // OpenCL C v3.0 s6.7.1 - Variables at program scope or static or extern; // variables inside functions can be declared in global address space if; // the __opencl_c_program_scope_global_variables feature is supported; // C++ for OpenCL inherits rule from OpenCL C v2.0.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/OpenCLOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenCLOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenCLOptions.h:133,Modifiability,Variab,Variables,133,// OpenCL C v1.2 s6.5 - All program scope variables must be declared in the; // __constant address space.; // OpenCL C v2.0 s6.5.1 - Variables defined at program scope and static; // variables inside a function can also be declared in the global; // address space.; // OpenCL C v3.0 s6.7.1 - Variables at program scope or static or extern; // variables inside functions can be declared in global address space if; // the __opencl_c_program_scope_global_variables feature is supported; // C++ for OpenCL inherits rule from OpenCL C v2.0.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/OpenCLOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenCLOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenCLOptions.h:183,Modifiability,variab,variables,183,// OpenCL C v1.2 s6.5 - All program scope variables must be declared in the; // __constant address space.; // OpenCL C v2.0 s6.5.1 - Variables defined at program scope and static; // variables inside a function can also be declared in the global; // address space.; // OpenCL C v3.0 s6.7.1 - Variables at program scope or static or extern; // variables inside functions can be declared in global address space if; // the __opencl_c_program_scope_global_variables feature is supported; // C++ for OpenCL inherits rule from OpenCL C v2.0.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/OpenCLOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenCLOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenCLOptions.h:292,Modifiability,Variab,Variables,292,// OpenCL C v1.2 s6.5 - All program scope variables must be declared in the; // __constant address space.; // OpenCL C v2.0 s6.5.1 - Variables defined at program scope and static; // variables inside a function can also be declared in the global; // address space.; // OpenCL C v3.0 s6.7.1 - Variables at program scope or static or extern; // variables inside functions can be declared in global address space if; // the __opencl_c_program_scope_global_variables feature is supported; // C++ for OpenCL inherits rule from OpenCL C v2.0.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/OpenCLOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenCLOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenCLOptions.h:343,Modifiability,variab,variables,343,// OpenCL C v1.2 s6.5 - All program scope variables must be declared in the; // __constant address space.; // OpenCL C v2.0 s6.5.1 - Variables defined at program scope and static; // variables inside a function can also be declared in the global; // address space.; // OpenCL C v3.0 s6.7.1 - Variables at program scope or static or extern; // variables inside functions can be declared in global address space if; // the __opencl_c_program_scope_global_variables feature is supported; // C++ for OpenCL inherits rule from OpenCL C v2.0.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/OpenCLOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenCLOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenCLOptions.h:503,Modifiability,inherit,inherits,503,// OpenCL C v1.2 s6.5 - All program scope variables must be declared in the; // __constant address space.; // OpenCL C v2.0 s6.5.1 - Variables defined at program scope and static; // variables inside a function can also be declared in the global; // address space.; // OpenCL C v3.0 s6.7.1 - Variables at program scope or static or extern; // variables inside functions can be declared in global address space if; // the __opencl_c_program_scope_global_variables feature is supported; // C++ for OpenCL inherits rule from OpenCL C v2.0.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/OpenCLOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenCLOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenCLOptions.h:23,Availability,avail,available,23,// Option starts to be available in this OpenCL version,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/OpenCLOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenCLOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenCLOptions.h:13,Availability,avail,available,13,// Is option available in OpenCL version \p LO.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/OpenCLOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenCLOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenCLOptions.h:20,Integrability,depend,dependencies,20,// Diagnose feature dependencies for OpenCL C 3.0. Return false if target; // doesn't follow these requirements.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/OpenCLOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenCLOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenMPKinds.h:27,Energy Efficiency,schedul,schedule,27,/// OpenMP attributes for 'schedule' clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/OpenMPKinds.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenMPKinds.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenMPKinds.h:26,Energy Efficiency,schedul,schedule,26,/// OpenMP modifiers for 'schedule' clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/OpenMPKinds.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenMPKinds.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenMPKinds.h:27,Integrability,depend,depend,27,/// OpenMP attributes for 'depend' clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/OpenMPKinds.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenMPKinds.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenMPKinds.h:4,Energy Efficiency,Schedul,Scheduling,4,/// Scheduling data for loop-based OpenMP directives.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/OpenMPKinds.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenMPKinds.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenMPKinds.h:11,Integrability,depend,dependence,11,/// OpenMP dependence types for 'doacross' clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/OpenMPKinds.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenMPKinds.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenMPKinds.h:223,Deployability,update,update,223,"/// Checks if the specified directive is a target data offload directive.; /// \param DKind Specified directive.; /// \return true - the directive is a target data offload directive like; /// 'omp target data', 'omp target update', 'omp target enter data',; /// 'omp target exit data'; /// otherwise - false.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/OpenMPKinds.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/OpenMPKinds.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ParsedAttrInfo.h:500,Modifiability,plugin,plugins,500,"//===- ParsedAttrInfo.h - Info needed to parse an attribute -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the ParsedAttrInfo class, which dictates how to; // parse an attribute. This class is the one that plugins derive to; // define a new attribute.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/ParsedAttrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ParsedAttrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ParsedAttrInfo.h:35,Availability,avail,available,35,/// True if this attribute is only available for certain targets.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/ParsedAttrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ParsedAttrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/PartialDiagnostic.h:105,Safety,safe,safely,105,// NOTE: Sema assumes that PartialDiagnostic is location-invariant; // in the sense that its bits can be safely memcpy'ed and destructed; // in the new location.; /// The diagnostic ID.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/PartialDiagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/PartialDiagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/PartialDiagnostic.h:56,Safety,avoid,avoid,56,// It is necessary to limit this to rvalue reference to avoid calling this; // function with a bitfield lvalue argument since non-const reference to; // bitfield is not allowed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/PartialDiagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/PartialDiagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/PartialDiagnostic.h:4,Usability,Clear,Clear,4,"/// Clear out this partial diagnostic, giving it a new diagnostic ID; /// and removing all of its arguments, ranges, and fix-it hints.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/PartialDiagnostic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/PartialDiagnostic.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/PragmaKinds.h:20,Integrability,contract,contract,20,// #pragma clang fp contract,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/PragmaKinds.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/PragmaKinds.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/PrettyStackTrace.h:64,Integrability,message,message,64,"/// If a crash happens while one of these objects are live, the message; /// is printed out along with the specified source location.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/PrettyStackTrace.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/PrettyStackTrace.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h:7,Security,Sanitiz,Sanitizers,7,"//===- Sanitizers.h - C Language Family Language Options --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// Defines the clang::SanitizerKind enum.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h:414,Security,Sanitiz,SanitizerKind,414,"//===- Sanitizers.h - C Language Family Language Options --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// Defines the clang::SanitizerKind enum.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h:191,Deployability,update,update,191,"// NOTE: this class assumes kNumElem == 2 in most of the constexpr functions,; // in order to work within the C++11 constexpr function constraints. If you; // change kNumElem, you'll need to update those member functions as well.; /// Number of array elements.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h:4,Availability,Mask,Mask,4,/// Mask value initialized to 0.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h:24,Availability,mask,mask,24,/// Number of bits in a mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h:24,Availability,mask,mask,24,/// Number of bits in a mask element.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h:13,Availability,mask,mask,13,/// Create a mask with a bit enabled at position Pos.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h:21,Security,sanitiz,sanitizer,21,"// Define the set of sanitizer kinds, as well as the set of sanitizers each; // sanitizer group expands into.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h:60,Security,sanitiz,sanitizers,60,"// Define the set of sanitizer kinds, as well as the set of sanitizers each; // sanitizer group expands into.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h:80,Security,sanitiz,sanitizer,80,"// Define the set of sanitizer kinds, as well as the set of sanitizers each; // sanitizer group expands into.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h:3,Security,Sanitiz,SanitizerKind,3,// SanitizerKind,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h:32,Security,sanitiz,sanitizer,32,/// Check if a certain (single) sanitizer is enabled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h:25,Security,sanitiz,sanitizers,25,/// Check if one or more sanitizers are enabled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h:41,Security,sanitiz,sanitizer,41,/// Enable or disable a certain (single) sanitizer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h:16,Security,sanitiz,sanitizers,16,/// Disable the sanitizers specified in \p K.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h:23,Security,sanitiz,sanitizers,23,/// Returns true if no sanitizers are enabled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h:23,Security,sanitiz,sanitizers,23,/// Bitmask of enabled sanitizers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h:52,Security,sanitiz,sanitize,52,"/// Parse a single value from a -fsanitize= or -fno-sanitize= value list.; /// Returns a non-zero SanitizerMask, or \c 0 if \p Value is not known.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h:98,Security,Sanitiz,SanitizerMask,98,"/// Parse a single value from a -fsanitize= or -fno-sanitize= value list.; /// Returns a non-zero SanitizerMask, or \c 0 if \p Value is not known.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h:16,Security,Sanitiz,SanitizerSet,16,/// Serialize a SanitizerSet into values for -fsanitize= or -fno-sanitize=.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h:65,Security,sanitiz,sanitize,65,/// Serialize a SanitizerSet into values for -fsanitize= or -fno-sanitize=.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h:13,Security,sanitiz,sanitizer,13,"/// For each sanitizer group bit set in \p Kinds, set the bits for sanitizers; /// this group enables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h:67,Security,sanitiz,sanitizers,67,"/// For each sanitizer group bit set in \p Kinds, set the bits for sanitizers; /// this group enables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h:15,Security,sanitiz,sanitizers,15,/// Return the sanitizers which do not affect preprocessing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sanitizers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SanitizerSpecialCaseList.h:9,Security,Sanitiz,SanitizerSpecialCaseList,9,"//===--- SanitizerSpecialCaseList.h - SCL for sanitizers --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // An extension of SpecialCaseList to allowing querying sections by; // SanitizerMask.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SanitizerSpecialCaseList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SanitizerSpecialCaseList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SanitizerSpecialCaseList.h:46,Security,sanitiz,sanitizers,46,"//===--- SanitizerSpecialCaseList.h - SCL for sanitizers --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // An extension of SpecialCaseList to allowing querying sections by; // SanitizerMask.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SanitizerSpecialCaseList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SanitizerSpecialCaseList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SanitizerSpecialCaseList.h:452,Security,Sanitiz,SanitizerMask,452,"//===--- SanitizerSpecialCaseList.h - SCL for sanitizers --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // An extension of SpecialCaseList to allowing querying sections by; // SanitizerMask.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SanitizerSpecialCaseList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SanitizerSpecialCaseList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SanitizerSpecialCaseList.h:44,Availability,Mask,Mask,44,// Query ignorelisted entries if any bit in Mask matches the entry's section.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SanitizerSpecialCaseList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SanitizerSpecialCaseList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SanitizerSpecialCaseList.h:14,Security,Sanitiz,SanitizerSections,14,// Initialize SanitizerSections.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SanitizerSpecialCaseList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SanitizerSpecialCaseList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sarif.h:501,Security,access,accessed,501,"//== clang/Basic/Sarif.h - SARIF Diagnostics Object Model -------*- C++ -*--==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// Defines clang::SarifDocumentWriter, clang::SarifRule, clang::SarifResult.; ///; /// The document built can be accessed as a JSON Object.; /// Several value semantic types are also introduced which represent properties; /// of the SARIF standard, such as 'artifact', 'result', 'rule'.; ///; /// A SARIF (Static Analysis Results Interchange Format) document is JSON; /// document that describes in detail the results of running static analysis; /// tools on a project. Each (non-trivial) document consists of at least one; /// ""run"", which are themselves composed of details such as:; /// * Tool: The tool that was run; /// * Rules: The rules applied during the tool run, represented by; /// \c reportingDescriptor objects in SARIF; /// * Results: The matches for the rules applied against the project(s) being; /// evaluated, represented by \c result objects in SARIF; ///; /// Reference:; /// 1. <a href=""https://docs.oasis-open.org/sarif/sarif/v2.1.0/os/sarif-v2.1.0-os.html"">The SARIF standard</a>; /// 2. <a href=""https://docs.oasis-open.org/sarif/sarif/v2.1.0/os/sarif-v2.1.0-os.html#_Toc34317836"">SARIF<pre>reportingDescriptor</pre></a>; /// 3. <a href=""https://docs.oasis-open.org/sarif/sarif/v2.1.0/os/sarif-v2.1.0-os.html#_Toc34317638"">SARIF<pre>result</pre></a>; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Sarif.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sarif.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sarif.h:601,Availability,avail,available,601,"/// \internal; /// An artifact location is SARIF's way of describing the complete location; /// of an artifact encountered during analysis. The \c artifactLocation object; /// typically consists of a URI, and/or an index to reference the artifact it; /// locates.; ///; /// This builder makes an additional assumption: that every artifact encountered; /// by \c clang will be a physical, top-level artifact. Which is why the static; /// creation method \ref SarifArtifactLocation::create takes a mandatory URI; /// parameter. The official standard states that either a \c URI or \c Index; /// must be available in the object, \c clang picks the \c URI as a reasonable; /// default, because it intends to deal in physical artifacts for now.; ///; /// Reference:; /// 1. <a href=""https://docs.oasis-open.org/sarif/sarif/v2.1.0/os/sarif-v2.1.0-os.html#_Toc34317427"">artifactLocation object</a>; /// 2. \ref SarifArtifact",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Sarif.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sarif.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sarif.h:150,Availability,failure,failure,150,"/// The level of severity associated with a \ref SarifResult.; ///; /// Of all the levels, \c None is the only one that is not associated with; /// a failure.; ///; /// A typical mapping for clang's DiagnosticKind to SarifResultLevel would look; /// like:; /// * \c None: \ref clang::DiagnosticsEngine::Level::Remark, \ref clang::DiagnosticsEngine::Level::Ignored; /// * \c Note: \ref clang::DiagnosticsEngine::Level::Note; /// * \c Warning: \ref clang::DiagnosticsEngine::Level::Warning; /// * \c Error could be generated from one of:; /// - \ref clang::DiagnosticsEngine::Level::Warning with \c -Werror; /// - \ref clang::DiagnosticsEngine::Level::Error; /// - \ref clang::DiagnosticsEngine::Level::Fatal when \ref clang::DiagnosticsEngine::ErrorsAsFatal is set.; ///; /// Reference:; /// 1. <a href=""https://docs.oasis-open.org/sarif/sarif/v2.1.0/os/sarif-v2.1.0-os.html#_Toc34317648"">level property</a>",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Sarif.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sarif.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sarif.h:498,Availability,Error,Error,498,"/// The level of severity associated with a \ref SarifResult.; ///; /// Of all the levels, \c None is the only one that is not associated with; /// a failure.; ///; /// A typical mapping for clang's DiagnosticKind to SarifResultLevel would look; /// like:; /// * \c None: \ref clang::DiagnosticsEngine::Level::Remark, \ref clang::DiagnosticsEngine::Level::Ignored; /// * \c Note: \ref clang::DiagnosticsEngine::Level::Note; /// * \c Warning: \ref clang::DiagnosticsEngine::Level::Warning; /// * \c Error could be generated from one of:; /// - \ref clang::DiagnosticsEngine::Level::Warning with \c -Werror; /// - \ref clang::DiagnosticsEngine::Level::Error; /// - \ref clang::DiagnosticsEngine::Level::Fatal when \ref clang::DiagnosticsEngine::ErrorsAsFatal is set.; ///; /// Reference:; /// 1. <a href=""https://docs.oasis-open.org/sarif/sarif/v2.1.0/os/sarif-v2.1.0-os.html#_Toc34317648"">level property</a>",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Sarif.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sarif.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sarif.h:650,Availability,Error,Error,650,"/// The level of severity associated with a \ref SarifResult.; ///; /// Of all the levels, \c None is the only one that is not associated with; /// a failure.; ///; /// A typical mapping for clang's DiagnosticKind to SarifResultLevel would look; /// like:; /// * \c None: \ref clang::DiagnosticsEngine::Level::Remark, \ref clang::DiagnosticsEngine::Level::Ignored; /// * \c Note: \ref clang::DiagnosticsEngine::Level::Note; /// * \c Warning: \ref clang::DiagnosticsEngine::Level::Warning; /// * \c Error could be generated from one of:; /// - \ref clang::DiagnosticsEngine::Level::Warning with \c -Werror; /// - \ref clang::DiagnosticsEngine::Level::Error; /// - \ref clang::DiagnosticsEngine::Level::Fatal when \ref clang::DiagnosticsEngine::ErrorsAsFatal is set.; ///; /// Reference:; /// 1. <a href=""https://docs.oasis-open.org/sarif/sarif/v2.1.0/os/sarif-v2.1.0-os.html#_Toc34317648"">level property</a>",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Sarif.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sarif.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sarif.h:743,Availability,Error,ErrorsAsFatal,743,"/// The level of severity associated with a \ref SarifResult.; ///; /// Of all the levels, \c None is the only one that is not associated with; /// a failure.; ///; /// A typical mapping for clang's DiagnosticKind to SarifResultLevel would look; /// like:; /// * \c None: \ref clang::DiagnosticsEngine::Level::Remark, \ref clang::DiagnosticsEngine::Level::Ignored; /// * \c Note: \ref clang::DiagnosticsEngine::Level::Note; /// * \c Warning: \ref clang::DiagnosticsEngine::Level::Warning; /// * \c Error could be generated from one of:; /// - \ref clang::DiagnosticsEngine::Level::Warning with \c -Werror; /// - \ref clang::DiagnosticsEngine::Level::Error; /// - \ref clang::DiagnosticsEngine::Level::Fatal when \ref clang::DiagnosticsEngine::ErrorsAsFatal is set.; ///; /// Reference:; /// 1. <a href=""https://docs.oasis-open.org/sarif/sarif/v2.1.0/os/sarif-v2.1.0-os.html#_Toc34317648"">level property</a>",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Sarif.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sarif.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sarif.h:22,Deployability,Configurat,Configuration,22,"/// A SARIF Reporting Configuration (\c reportingConfiguration) object contains; /// properties for a \ref SarifRule that can be configured at runtime before; /// analysis begins.; ///; /// Reference:; /// 1. <a href=""https://docs.oasis-open.org/sarif/sarif/v2.1.0/os/sarif-v2.1.0-os.html#_Toc34317852"">reportingConfiguration object</a>",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Sarif.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sarif.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sarif.h:22,Modifiability,Config,Configuration,22,"/// A SARIF Reporting Configuration (\c reportingConfiguration) object contains; /// properties for a \ref SarifRule that can be configured at runtime before; /// analysis begins.; ///; /// Reference:; /// 1. <a href=""https://docs.oasis-open.org/sarif/sarif/v2.1.0/os/sarif-v2.1.0-os.html#_Toc34317852"">reportingConfiguration object</a>",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Sarif.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sarif.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sarif.h:129,Modifiability,config,configured,129,"/// A SARIF Reporting Configuration (\c reportingConfiguration) object contains; /// properties for a \ref SarifRule that can be configured at runtime before; /// analysis begins.; ///; /// Reference:; /// 1. <a href=""https://docs.oasis-open.org/sarif/sarif/v2.1.0/os/sarif-v2.1.0-os.html#_Toc34317852"">reportingConfiguration object</a>",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Sarif.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sarif.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sarif.h:350,Integrability,interface,interface,350,"/// A SARIF rule (\c reportingDescriptor object) contains information that; /// describes a reporting item generated by a tool. A reporting item is; /// either a result of analysis or notification of a condition encountered by; /// the tool. Rules are arbitrary but are identifiable by a hierarchical; /// rule-id.; ///; /// This builder provides an interface to create SARIF \c reportingDescriptor; /// objects via the \ref SarifRule::create static method.; ///; /// Reference:; /// 1. <a href=""https://docs.oasis-open.org/sarif/sarif/v2.1.0/os/sarif-v2.1.0-os.html#_Toc34317836"">reportingDescriptor object</a>",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Sarif.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sarif.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sarif.h:148,Safety,safe,safely,148,"// NOTE:; // This type cannot fit all possible indexes representable by JSON, but is; // chosen because it is the largest unsigned type that can be safely; // converted to an \c int64_t.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Sarif.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sarif.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sarif.h:57,Testability,Assert,Asserts,57,/// \internal; /// Return a pointer to the current tool. Asserts that a run exists.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Sarif.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sarif.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sarif.h:72,Testability,assert,asserting,72,"/// \internal; /// Return a mutable reference to the current run, after asserting it exists.; ///; /// \note It is undefined behavior to call this if a run does not exist in; /// the SARIF document.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Sarif.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sarif.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sarif.h:4,Deployability,Release,Release,4,/// Release resources held by this SARIF document.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Sarif.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sarif.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sarif.h:180,Energy Efficiency,allocate,allocate,180,"/// If there is a current run, end it.; ///; /// This method collects various book-keeping required to clear and close; /// resources associated with the current run, but may also allocate some; /// for the next run.; ///; /// Calling \ref endRun before associating a run through \ref createRun leads; /// to undefined behaviour.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Sarif.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sarif.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sarif.h:103,Usability,clear,clear,103,"/// If there is a current run, end it.; ///; /// This method collects various book-keeping required to clear and close; /// resources associated with the current run, but may also allocate some; /// for the next run.; ///; /// Calling \ref endRun before associating a run through \ref createRun leads; /// to undefined behaviour.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Sarif.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sarif.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sarif.h:238,Availability,error,errors,238,"/// The list of rules associated with the most recent active run. These are; /// defined using the diagnostics passed to the SarifDocument. Each rule; /// need not be unique through the result set. E.g. there may be several; /// 'syntax' errors throughout code under analysis, each of which has its; /// own specific diagnostic message (and consequently, RuleId). Rules are; /// also known as ""reportingDescriptor"" objects in SARIF.; ///; /// Reference: <a href=""https://docs.oasis-open.org/sarif/sarif/v2.1.0/os/sarif-v2.1.0-os.html#_Toc34317556"">rules property</a>",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Sarif.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sarif.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sarif.h:328,Integrability,message,message,328,"/// The list of rules associated with the most recent active run. These are; /// defined using the diagnostics passed to the SarifDocument. Each rule; /// need not be unique through the result set. E.g. there may be several; /// 'syntax' errors throughout code under analysis, each of which has its; /// own specific diagnostic message (and consequently, RuleId). Rules are; /// also known as ""reportingDescriptor"" objects in SARIF.; ///; /// Reference: <a href=""https://docs.oasis-open.org/sarif/sarif/v2.1.0/os/sarif-v2.1.0-os.html#_Toc34317556"">rules property</a>",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Sarif.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Sarif.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceLocation.h:99,Performance,load,loaded,99,"/// A mostly-opaque identifier, where 0 is ""invalid"", >0 is; /// this module, and <-1 is something loaded from another module.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceLocation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceLocation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceLocation.h:584,Availability,down,downwards,584,"/// Encodes a location in the source. The SourceManager can decode this; /// to get at the full include stack, line and column information.; ///; /// Technically, a source location is simply an offset into the manager's view; /// of the input source, which is all input buffers (including macro; /// expansions) concatenated in an effectively arbitrary order. The manager; /// actually maintains two blocks of input buffers. One, starting at offset; /// 0 and growing upwards, contains all buffers from this module. The other,; /// starting at the highest possible offset and growing downwards, contains; /// buffers of loaded modules.; ///; /// In addition, one bit of SourceLocation is used for quick access to the; /// information whether the location is in a file or a macro expansion.; ///; /// It is important that this type remains small. It is currently 32 bits wide.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceLocation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceLocation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceLocation.h:620,Performance,load,loaded,620,"/// Encodes a location in the source. The SourceManager can decode this; /// to get at the full include stack, line and column information.; ///; /// Technically, a source location is simply an offset into the manager's view; /// of the input source, which is all input buffers (including macro; /// expansions) concatenated in an effectively arbitrary order. The manager; /// actually maintains two blocks of input buffers. One, starting at offset; /// 0 and growing upwards, contains all buffers from this module. The other,; /// starting at the highest possible offset and growing downwards, contains; /// buffers of loaded modules.; ///; /// In addition, one bit of SourceLocation is used for quick access to the; /// information whether the location is in a file or a macro expansion.; ///; /// It is important that this type remains small. It is currently 32 bits wide.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceLocation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceLocation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceLocation.h:703,Security,access,access,703,"/// Encodes a location in the source. The SourceManager can decode this; /// to get at the full include stack, line and column information.; ///; /// Technically, a source location is simply an offset into the manager's view; /// of the input source, which is all input buffers (including macro; /// expansions) concatenated in an effectively arbitrary order. The manager; /// actually maintains two blocks of input buffers. One, starting at offset; /// 0 and growing upwards, contains all buffers from this module. The other,; /// starting at the highest possible offset and growing downwards, contains; /// buffers of loaded modules.; ///; /// In addition, one bit of SourceLocation is used for quick access to the; /// information whether the location is in a file or a macro expansion.; ///; /// It is important that this type remains small. It is currently 32 bits wide.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceLocation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceLocation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceLocation.h:184,Usability,simpl,simply,184,"/// Encodes a location in the source. The SourceManager can decode this; /// to get at the full include stack, line and column information.; ///; /// Technically, a source location is simply an offset into the manager's view; /// of the input source, which is all input buffers (including macro; /// expansions) concatenated in an effectively arbitrary order. The manager; /// actually maintains two blocks of input buffers. One, starting at offset; /// 0 and growing upwards, contains all buffers from this module. The other,; /// starting at the highest possible offset and growing downwards, contains; /// buffers of loaded modules.; ///; /// In addition, one bit of SourceLocation is used for quick access to the; /// information whether the location is in a file or a macro expansion.; ///; /// It is important that this type remains small. It is currently 32 bits wide.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceLocation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceLocation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceLocation.h:18,Safety,avoid,avoid,18,"// Double cast to avoid a warning ""cast to pointer from integer of different; // size"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceLocation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceLocation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:421,Integrability,interface,interface,421,"//===- SourceManager.h - Track and cache source files -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// Defines the SourceManager interface.; ///; /// There are three different types of locations in a %file: a spelling; /// location, an expansion location, and a presumed location.; ///; /// Given an example of:; /// \code; /// #define min(x, y) x < y ? x : y; /// \endcode; ///; /// and then later on a use of min:; /// \code; /// #line 17; /// return min(a, b);; /// \endcode; ///; /// The expansion location is the line in the source code where the macro; /// was expanded (the return statement), the spelling location is the; /// location in the source where the macro was originally defined,; /// and the presumed location is where the line directive states that; /// the line is 17, or any other line.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:35,Performance,cache,cache,35,"//===- SourceManager.h - Track and cache source files -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// Defines the SourceManager interface.; ///; /// There are three different types of locations in a %file: a spelling; /// location, an expansion location, and a presumed location.; ///; /// Given an example of:; /// \code; /// #define min(x, y) x < y ? x : y; /// \endcode; ///; /// and then later on a use of min:; /// \code; /// #line 17; /// return min(a, b);; /// \endcode; ///; /// The expansion location is the line in the source code where the macro; /// was expanded (the return statement), the spelling location is the; /// location in the source where the macro was originally defined,; /// and the presumed location is where the line directive states that; /// the line is 17, or any other line.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:55,Performance,load,loaded,55,/// One instance of this struct is kept for every file loaded or used.; ///; /// This object owns the MemoryBuffer object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:57,Performance,load,loaded,57,/// References the file which the contents were actually loaded from.; ///; /// Can be different from 'Entry' if we overridden the contents of one file; /// with the contents of another file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:33,Security,access,access,33,/// The filename that is used to access OrigEntry.; ///; /// FIXME: Remove this once OrigEntry is a FileEntryRef with a stable name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:19,Energy Efficiency,allocate,allocated,19,/// A bump pointer allocated array of offsets for each source line.; ///; /// This is lazily computed. The lines are owned by the SourceManager; /// BumpPointerAllocator object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:25,Performance,cache,cache,25,/// True if this content cache was initially created for a source file; /// considered to be volatile (likely to change between stat and open).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:190,Availability,error,error,190,"/// The copy ctor does not allow copies where source object has either; /// a non-NULL Buffer or SourceLineCache. Ownership of allocated memory; /// is not transferred, so this is a logical error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:127,Energy Efficiency,allocate,allocated,127,"/// The copy ctor does not allow copies where source object has either; /// a non-NULL Buffer or SourceLineCache. Ownership of allocated memory; /// is not transferred, so this is a logical error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:182,Testability,log,logical,182,"/// The copy ctor does not allow copies where source object has either; /// a non-NULL Buffer or SourceLineCache. Ownership of allocated memory; /// is not transferred, so this is a logical error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:84,Performance,cache,cache,84,/// Returns the kind of memory used to back the memory buffer for; /// this content cache. This is used for performance analysis.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:108,Performance,perform,performance,108,/// Returns the kind of memory used to back the memory buffer for; /// this content cache. This is used for performance analysis.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:43,Performance,load,loaded,43,"/// Return the buffer, only if it has been loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:83,Performance,load,loaded,83,"/// Return a StringRef to the source buffer data, only if it has already; /// been loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:3,Testability,Assert,Assert,3,// Assert that the \c ContentCache objects will always be 8-byte aligned so; // that we can pack 3 bits of integer into pointers to such objects.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:51,Testability,log,logical,51,"/// Information about a FileID, basically just the logical file; /// that it represents and include stack information.; ///; /// Each FileInfo has include stack information, indicating where it came; /// from. This information encodes the \#include chain that a token was; /// expanded from. The main include file has an invalid IncludeLoc.; ///; /// FileInfo should not grow larger than ExpansionInfo. Doing so will; /// cause memory to bloat in compilations with many unloaded macro; /// expansions, since the two data structurs are stored in a union in; /// SLocEntry. Extra fields should instead go in ""ContentCache *"", which; /// stores file contents and other bits on the side.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:16,Performance,cache,cache,16,/// The content cache and the characteristic of the file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:65,Performance,load,loaded,65,/// Returns the name of the file that was used when the file was loaded from; /// the underlying file system.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:3,Testability,Assert,Assert,3,"// Assert that the \c FileInfo objects are no bigger than \c ExpansionInfo; // objects. This controls the size of \c SLocEntry, of which we have one for; // each macro expansion. The number of (unloaded) macro expansions can be; // very large. Any other fields needed in FileInfo should go in ContentCache.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:120,Availability,error,error,120,"/// Read the source location entry with index ID, which will always be; /// less than -1.; ///; /// \returns true if an error occurred that prevented the source-location; /// entry from being loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:192,Performance,load,loaded,192,"/// Read the source location entry with index ID, which will always be; /// less than -1.; ///; /// \returns true if an error occurred that prevented the source-location; /// entry from being loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:105,Availability,error,error,105,/// Get the index ID for the loaded SourceLocation offset.; ///; /// \returns Invalid index ID (0) if an error occurred that prevented the; /// SLocEntry from being loaded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:29,Performance,load,loaded,29,/// Get the index ID for the loaded SourceLocation offset.; ///; /// \returns Invalid index ID (0) if an error occurred that prevented the; /// SLocEntry from being loaded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:165,Performance,load,loaded,165,/// Get the index ID for the loaded SourceLocation offset.; ///; /// \returns Invalid index ID (0) if an error occurred that prevented the; /// SLocEntry from being loaded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:90,Performance,load,loaded,90,"/// Retrieve the module import location and name for the given ID, if; /// in fact it was loaded from a module (rather than, say, a precompiled; /// header).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:14,Performance,cache,cache,14,/// Holds the cache used by isBeforeInTranslationUnit.; ///; /// The cache structure is complex enough to be worth breaking out of; /// SourceManager.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:69,Performance,cache,cache,69,/// Holds the cache used by isBeforeInTranslationUnit.; ///; /// The cache structure is complex enough to be worth breaking out of; /// SourceManager.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:24,Performance,cache,cached,24,"/// The FileID's of the cached query.; ///; /// If these match up with a subsequent query, the result can be reused.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:33,Performance,cache,cached,33,"/// Return true if the currently cached values match up with; /// the specified LHS/RHS query.; ///; /// If not, we can't use the cache.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:130,Performance,cache,cache,130,"/// Return true if the currently cached values match up with; /// the specified LHS/RHS query.; ///; /// If not, we can't use the cache.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:11,Performance,cache,cache,11,"/// If the cache is valid, compute the result given the; /// specified offsets in the LHS/RHS FileID's.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:74,Performance,cache,cached,74,"/// Set up a new query.; /// If it matches the old query, we can keep the cached answer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:23,Performance,load,loading,23,"/// This class handles loading and caching of source files into memory.; ///; /// This object owns the MemoryBuffer objects for all of the loaded; /// files and assigns unique FileID's for each unique \#include chain.; ///; /// The SourceManager can be queried for information about SourceLocation; /// objects, turning them into either spelling or expansion locations. Spelling; /// locations represent where the bytes corresponding to a token came from and; /// expansion locations represent where the location is in the user's view. In; /// the case of a macro expansion, for example, the spelling location indicates; /// where the expanded token came from and the expansion location specifies; /// where it was expanded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:139,Performance,load,loaded,139,"/// This class handles loading and caching of source files into memory.; ///; /// This object owns the MemoryBuffer objects for all of the loaded; /// files and assigns unique FileID's for each unique \#include chain.; ///; /// The SourceManager can be queried for information about SourceLocation; /// objects, turning them into either spelling or expansion locations. Spelling; /// locations represent where the bytes corresponding to a token came from and; /// expansion locations represent where the location is in the user's view. In; /// the case of a macro expansion, for example, the spelling location indicates; /// where the expanded token came from and the expansion location specifies; /// where it was expanded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:38,Performance,load,loaded,38,"/// The table of SLocEntries that are loaded from other modules.; ///; /// Negative FileIDs are indexes into this table. To get from ID to an index,; /// use (-ID - 2).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:27,Performance,Load,LoadedSLocEntryTable,27,"/// For each allocation in LoadedSLocEntryTable, we keep the first FileID.; /// We assume exactly one allocation per AST file, and use that to determine; /// whether two FileIDs come from the same AST file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:47,Performance,load,loaded,47,"/// The starting offset of the latest batch of loaded SLocEntries.; ///; /// This is LoadedSLocEntryTable.back().Offset, except that that entry might; /// not have been loaded, so that value would be unknown.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:85,Performance,Load,LoadedSLocEntryTable,85,"/// The starting offset of the latest batch of loaded SLocEntries.; ///; /// This is LoadedSLocEntryTable.back().Offset, except that that entry might; /// not have been loaded, so that value would be unknown.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:169,Performance,load,loaded,169,"/// The starting offset of the latest batch of loaded SLocEntries.; ///; /// This is LoadedSLocEntryTable.back().Offset, except that that entry might; /// not have been loaded, so that value would be unknown.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:51,Performance,Load,LoadedSLocEntryTable,51,/// A bitmap that indicates whether the entries of LoadedSLocEntryTable; /// have already been loaded from the external source.; ///; /// Same indexing as LoadedSLocEntryTable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:95,Performance,load,loaded,95,/// A bitmap that indicates whether the entries of LoadedSLocEntryTable; /// have already been loaded from the external source.; ///; /// Same indexing as LoadedSLocEntryTable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:155,Performance,Load,LoadedSLocEntryTable,155,/// A bitmap that indicates whether the entries of LoadedSLocEntryTable; /// have already been loaded from the external source.; ///; /// Same indexing as LoadedSLocEntryTable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:51,Performance,Load,LoadedSLocEntryTable,51,/// A bitmap that indicates whether the entries of LoadedSLocEntryTable; /// have already had their offset loaded from the external source.; ///; /// Superset of SLocEntryLoaded. Same indexing as SLocEntryLoaded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:107,Performance,load,loaded,107,/// A bitmap that indicates whether the entries of LoadedSLocEntryTable; /// have already had their offset loaded from the external source.; ///; /// Superset of SLocEntryLoaded. Same indexing as SLocEntryLoaded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:16,Performance,cache,cache,16,"/// A one-entry cache to speed up getFileID.; ///; /// LastFileIDLookup records the last FileID looked up or created, because it; /// is very common to look up many tokens from the same file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:27,Performance,cache,cache,27,/// These ivars serve as a cache used in the getLineNumber; /// method which is used to speedup getLineNumber calls to nearby locations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:100,Performance,cache,cache,100,"/// Associates a FileID with its ""included/expanded in"" decomposed; /// location.; ///; /// Used to cache results from and speed-up \c getDecomposedIncludedLoc; /// function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:78,Performance,cache,cache,78,/// The IsBeforeInTranslationUnitCache is a mapping from FileID pairs; /// to cache results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:4,Performance,Cache,Cache,4,/// Cache results for the isBeforeInTranslationUnit method.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:15,Performance,cache,cache,15,/// Return the cache entry for comparing the given file IDs; /// for isBeforeInTranslationUnit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:40,Availability,error,error-recovery,40,"// Cache for the ""fake"" buffer used for error-recovery purposes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:3,Performance,Cache,Cache,3,"// Cache for the ""fake"" buffer used for error-recovery purposes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:46,Safety,recover,recovery,46,"// Cache for the ""fake"" buffer used for error-recovery purposes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:88,Integrability,depend,dependency,88,"/// The stack of modules being built, which is used to detect; /// cycles in the module dependency graph as modules are being built, as; /// well as to describe why we're rebuilding a particular module.; ///; /// There is no way to set this value from the command line. If we ever need; /// to do so (e.g., if on-demand module construction moves out-of-process),; /// we can add a cc1-level option to do so.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:55,Safety,detect,detect,55,"/// The stack of modules being built, which is used to detect; /// cycles in the module dependency graph as modules are being built, as; /// well as to describe why we're rebuilding a particular module.; ///; /// There is no way to set this value from the command line. If we ever need; /// to do so (e.g., if on-demand module construction moves out-of-process),; /// we can add a cc1-level option to do so.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:80,Energy Efficiency,allocate,allocated,80,/// Override the contents of the given source file by providing an; /// already-allocated buffer.; ///; /// \param SourceFile the source file whose contents will be overridden.; ///; /// \param Buffer the memory buffer whose contents will be used as the; /// data in the given source file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:80,Energy Efficiency,allocate,allocated,80,/// Override the contents of the given source file by providing an; /// already-allocated buffer.; ///; /// \param SourceFile the source file whose contents will be overridden.; ///; /// \param Buffer the memory buffer whose contents will be used as the; /// data in the given source file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:108,Performance,cache,cache,108,/// Bypass the overridden contents of a file. This creates a new FileEntry; /// and initializes the content cache for it. Returns std::nullopt if there; /// is no such file in the filesystem.; ///; /// This should be called before parsing has begun.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:266,Availability,error,error,266,"//===--------------------------------------------------------------------===//; // FileID manipulation methods.; //===--------------------------------------------------------------------===//; /// Return the buffer for the specified FileID.; ///; /// If there is an error opening this buffer the first time, return; /// std::nullopt.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:73,Availability,error,error,73,"/// Return the buffer for the specified FileID.; ///; /// If there is an error opening this buffer the first time, this; /// manufactures a temporary buffer and returns it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:202,Availability,error,error,202,"/// Return a StringRef to the source buffer data for the; /// specified FileID.; ///; /// \param FID The file ID whose contents will be returned.; /// \param Invalid If non-NULL, will be set true if an error occurred.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:119,Performance,load,loaded,119,"/// Return a StringRef to the source buffer data for the; /// specified FileID, returning std::nullopt if it's not yet loaded.; ///; /// \param FID The file ID whose contents will be returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:105,Integrability,depend,depending,105,"/// Given \p Loc, if it is a macro location return the expansion; /// location or the spelling location, depending on if it comes from a; /// macro argument or not.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:125,Availability,down,down,125,"/// Given a SourceLocation object, return the spelling location; /// referenced by the ID.; ///; /// This is the first level down towards the place where the characters; /// that make up the lexed token can be found. This should not generally; /// be used by clients.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:4,Testability,Test,Tests,4,"/// Tests whether the given source location represents a macro; /// argument's expansion into the function-like macro definition.; ///; /// \param StartLoc If non-null and function returns true, it is set to the; /// start location of the macro argument expansion.; ///; /// Such source locations only appear inside of the expansion; /// locations representing where a particular function-like macro was; /// expanded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:4,Testability,Test,Tests,4,/// Tests whether the given source location represents the expansion of; /// a macro body.; ///; /// This is equivalent to testing whether the location is part of a macro; /// expansion but not the expansion of an argument to a function-like macro.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:123,Testability,test,testing,123,/// Tests whether the given source location represents the expansion of; /// a macro body.; ///; /// This is equivalent to testing whether the location is part of a macro; /// expansion but not the expansion of an argument to a function-like macro.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:101,Performance,load,loaded,101,"/// Return true if both \p LHS and \p RHS are in the local source; /// location address space or the loaded one.; ///; /// If it's true and \p RelativeOffset is non-null, it will be set to the; /// offset of \p RHS relative to \p LHS.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:379,Availability,error,error,379,"//===--------------------------------------------------------------------===//; // Queries about the code at a SourceLocation.; //===--------------------------------------------------------------------===//; /// Return a pointer to the start of the specified location; /// in the appropriate spelling MemoryBuffer.; ///; /// \param Invalid If non-NULL, will be set \c true if an error occurs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:107,Integrability,Rout,Routines,107,//===--------------------------------------------------------------------===//; // Line Table Manipulation Routines; //===--------------------------------------------------------------------===//; /// Return the uniqued ID for the specified filename.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:245,Energy Efficiency,allocate,allocated,245,//===--------------------------------------------------------------------===//; // Queries for performance analysis.; //===--------------------------------------------------------------------===//; /// Return the total amount of physical memory allocated by the; /// ContentCache allocator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:95,Performance,perform,performance,95,//===--------------------------------------------------------------------===//; // Queries for performance analysis.; //===--------------------------------------------------------------------===//; /// Return the total amount of physical memory allocated by the; /// ContentCache allocator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:65,Availability,down,down,65,"/// Return the amount of memory used by memory buffers, breaking down; /// by heap-backed versus mmap'ed memory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:176,Performance,load,loaded,176,"/// Determines the order of a source location and a source location; /// offset in the ""source location address space"".; ///; /// Note that we always consider source locations loaded from",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:35,Security,expose,exposed,35,/// Get a local SLocEntry. This is exposed for indexing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:22,Performance,load,loaded,22,/// Get the number of loaded SLocEntries we have.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:10,Performance,load,loaded,10,/// Get a loaded SLocEntry. This is exposed for indexing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:36,Security,expose,exposed,36,/// Get a loaded SLocEntry. This is exposed for indexing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:4,Energy Efficiency,Allocate,Allocate,4,"/// Allocate a number of loaded SLocEntries, which will be actually; /// loaded on demand from the external source.; ///; /// NumSLocEntries will be allocated, which occupy a total of TotalSize space; /// in the global source view. The lowest ID and the base offset of the; /// entries will be returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:149,Energy Efficiency,allocate,allocated,149,"/// Allocate a number of loaded SLocEntries, which will be actually; /// loaded on demand from the external source.; ///; /// NumSLocEntries will be allocated, which occupy a total of TotalSize space; /// in the global source view. The lowest ID and the base offset of the; /// entries will be returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:25,Performance,load,loaded,25,"/// Allocate a number of loaded SLocEntries, which will be actually; /// loaded on demand from the external source.; ///; /// NumSLocEntries will be allocated, which occupy a total of TotalSize space; /// in the global source view. The lowest ID and the base offset of the; /// entries will be returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:73,Performance,load,loaded,73,"/// Allocate a number of loaded SLocEntries, which will be actually; /// loaded on demand from the external source.; ///; /// NumSLocEntries will be allocated, which occupy a total of TotalSize space; /// in the global source view. The lowest ID and the base offset of the; /// entries will be returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:20,Performance,cache,cache,20,"// If our one-entry cache covers this offset, just return it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:90,Performance,load,loaded,90,"// Otherwise, the entry after it has to not include it. This works for both; // local and loaded entries.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:32,Integrability,depend,dependencies,32,"/// SourceManager and necessary dependencies (e.g. VFS, FileManager) for a; /// single in-memorty file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h:40,Integrability,depend,dependencies,40,"/// Creates SourceManager and necessary dependencies (e.g. VFS, FileManager).; /// The main file in the SourceManager will be \p FileName with \p Content.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManagerInternals.h:13,Security,access,access,13,// Low-level access,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceManagerInternals.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceManagerInternals.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceMgrAdapter.h:54,Energy Efficiency,Adapt,Adapter,54,"//=== SourceMgrAdapter.h - SourceMgr to SourceManager Adapter ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides an adapter that maps diagnostics from llvm::SourceMgr; // to Clang's SourceManager.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceMgrAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceMgrAdapter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceMgrAdapter.h:405,Energy Efficiency,adapt,adapter,405,"//=== SourceMgrAdapter.h - SourceMgr to SourceManager Adapter ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides an adapter that maps diagnostics from llvm::SourceMgr; // to Clang's SourceManager.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceMgrAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceMgrAdapter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceMgrAdapter.h:54,Integrability,Adapter,Adapter,54,"//=== SourceMgrAdapter.h - SourceMgr to SourceManager Adapter ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides an adapter that maps diagnostics from llvm::SourceMgr; // to Clang's SourceManager.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceMgrAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceMgrAdapter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceMgrAdapter.h:405,Integrability,adapter,adapter,405,"//=== SourceMgrAdapter.h - SourceMgr to SourceManager Adapter ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides an adapter that maps diagnostics from llvm::SourceMgr; // to Clang's SourceManager.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceMgrAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceMgrAdapter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceMgrAdapter.h:54,Modifiability,Adapt,Adapter,54,"//=== SourceMgrAdapter.h - SourceMgr to SourceManager Adapter ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides an adapter that maps diagnostics from llvm::SourceMgr; // to Clang's SourceManager.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceMgrAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceMgrAdapter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceMgrAdapter.h:405,Modifiability,adapt,adapter,405,"//=== SourceMgrAdapter.h - SourceMgr to SourceManager Adapter ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides an adapter that maps diagnostics from llvm::SourceMgr; // to Clang's SourceManager.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceMgrAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceMgrAdapter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceMgrAdapter.h:7,Energy Efficiency,adapt,adapter,7,"/// An adapter that can be used to translate diagnostics from one or more; /// llvm::SourceMgr instances to a ,",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceMgrAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceMgrAdapter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceMgrAdapter.h:7,Integrability,adapter,adapter,7,"/// An adapter that can be used to translate diagnostics from one or more; /// llvm::SourceMgr instances to a ,",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceMgrAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceMgrAdapter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceMgrAdapter.h:7,Modifiability,adapt,adapter,7,"/// An adapter that can be used to translate diagnostics from one or more; /// llvm::SourceMgr instances to a ,",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceMgrAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceMgrAdapter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceMgrAdapter.h:23,Availability,error,errors,23,"/// Diagnostic IDs for errors, warnings, and notes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceMgrAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceMgrAdapter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceMgrAdapter.h:30,Energy Efficiency,adapt,adaptor,30,/// Create a new \c SourceMgr adaptor that maps to the given source; /// manager and diagnostics engine.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceMgrAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceMgrAdapter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceMgrAdapter.h:30,Modifiability,adapt,adaptor,30,/// Create a new \c SourceMgr adaptor that maps to the given source; /// manager and diagnostics engine.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SourceMgrAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SourceMgrAdapter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Specifiers.h:10,Security,access,access,10,"/// A C++ access specifier (public, private, protected), plus the; /// special value ""none"" which means different things in different contexts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Specifiers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Specifiers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Specifiers.h:120,Energy Efficiency,efficient,efficiently,120,"/// An x-value expression is a reference to an object with; /// independent storage but which can be ""moved"", i.e.; /// efficiently cannibalized for its resources.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Specifiers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Specifiers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Specifiers.h:33,Testability,log,logical,33,/// An Objective-C property is a logical field of an Objective-C; /// object which is read and written via Objective-C method calls.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Specifiers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Specifiers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Specifiers.h:41,Modifiability,variab,variables,41,// These are legal on both functions and variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Specifiers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Specifiers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Specifiers.h:27,Modifiability,variab,variables,27,// These are only legal on variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Specifiers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Specifiers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Specifiers.h:56,Modifiability,variab,variables,56,/// Checks whether the given storage class is legal for variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Specifiers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Specifiers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Specifiers.h:44,Modifiability,variab,variables,44,///< Automatic storage duration (most local variables).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Specifiers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Specifiers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Specifiers.h:195,Availability,error,error,195,"// Generally behaves like Nullable, except when used in a block parameter; // that was imported into a swift async method. There, swift will assume; // that the parameter can get null even if no error occurred. _Nullable; // parameters are assumed to only get null on error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Specifiers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Specifiers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Specifiers.h:268,Availability,error,error,268,"// Generally behaves like Nullable, except when used in a block parameter; // that was imported into a swift async method. There, swift will assume; // that the parameter can get null even if no error occurred. _Nullable; // parameters are assumed to only get null on error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Specifiers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Specifiers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Specifiers.h:89,Availability,error,error-result,89,/// This parameter (which must have pointer-to-pointer type) uses; /// the special Swift error-result ABI treatment. There can be at; /// most one parameter on a given function that uses this treatment.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Specifiers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Specifiers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Specifiers.h:13,Modifiability,inherit,inheritance,13,/// Assigned inheritance model for a class in the MS C++ ABI. Must match order; /// of spellings in MSInheritanceAttr.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Specifiers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Specifiers.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Stack.h:104,Availability,avail,available,104,"/// The amount of stack space that Clang would like to be provided with.; /// If less than this much is available, we may be unable to reach our; /// template instantiation depth limit and other similar limits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/Stack.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Stack.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SyncScope.h:30,Integrability,synchroniz,synchronization,30,"//===--- SyncScope.h - Atomic synchronization scopes ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Provides definitions for the atomic synchronization scopes.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SyncScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SyncScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SyncScope.h:432,Integrability,synchroniz,synchronization,432,"//===--- SyncScope.h - Atomic synchronization scopes ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Provides definitions for the atomic synchronization scopes.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SyncScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SyncScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SyncScope.h:838,Deployability,Update,Update,838,"/// Defines synch scope values used internally by clang.; ///; /// The enum values start from 0 and are contiguous. They are mainly used for; /// enumerating all supported synch scope values and mapping them to LLVM; /// synch scopes. Their numerical values may be different from the corresponding; /// synch scope enums used in source languages.; ///; /// In atomic builtin and expressions, language-specific synch scope enums are; /// used. Currently only OpenCL memory scope enums are supported and assumed; /// to be used by all languages. However, in the future, other languages may; /// define their own set of synch scope enums. The language-specific synch scope; /// values are represented by class AtomicScopeModel and its derived classes.; ///; /// To add a new enum value:; /// Add the enum value to enum class SyncScope.; /// Update enum value Last if necessary.; /// Update getAsString.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SyncScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SyncScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SyncScope.h:880,Deployability,Update,Update,880,"/// Defines synch scope values used internally by clang.; ///; /// The enum values start from 0 and are contiguous. They are mainly used for; /// enumerating all supported synch scope values and mapping them to LLVM; /// synch scopes. Their numerical values may be different from the corresponding; /// synch scope enums used in source languages.; ///; /// In atomic builtin and expressions, language-specific synch scope enums are; /// used. Currently only OpenCL memory scope enums are supported and assumed; /// to be used by all languages. However, in the future, other languages may; /// define their own set of synch scope enums. The language-specific synch scope; /// values are represented by class AtomicScopeModel and its derived classes.; ///; /// To add a new enum value:; /// Add the enum value to enum class SyncScope.; /// Update enum value Last if necessary.; /// Update getAsString.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SyncScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SyncScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SyncScope.h:16,Integrability,interface,interface,16,/// Defines the interface for synch scope model.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/SyncScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/SyncScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetCXXABI.h:41,Deployability,Configurat,Configuration,41,"//===--- TargetCXXABI.h - C++ ABI Target Configuration ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Defines the TargetCXXABI class, which abstracts details of the; /// C++ ABI that we're targeting.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetCXXABI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetCXXABI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetCXXABI.h:41,Modifiability,Config,Configuration,41,"//===--- TargetCXXABI.h - C++ ABI Target Configuration ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Defines the TargetCXXABI class, which abstracts details of the; /// C++ ABI that we're targeting.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetCXXABI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetCXXABI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetCXXABI.h:133,Security,audit,audit,133,"// Right now, this class is passed around as a cheap value type.; // If you add more members, especially non-POD members, please; // audit the users to pass it by reference instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetCXXABI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetCXXABI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetCXXABI.h:374,Security,access,access,374,"/// Are arguments to a call destroyed left to right in the callee?; /// This is a fundamental language change, since it implies that objects; /// passed by value do *not* live to the end of the full expression.; /// Temporaries passed to a function taking a const reference live to the end; /// of the full expression as usual. Both the caller and the callee must; /// have access to the destructor, while only the caller needs the; /// destructor if this is false.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetCXXABI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetCXXABI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetCXXABI.h:471,Availability,redundant,redundantly,471,"/// Can an out-of-line inline function serve as a key function?; ///; /// This flag is only useful in ABIs where type data (for example,; /// vtables and type_info objects) are emitted only after processing; /// the definition of a special ""key"" virtual function. (This is safe; /// because the ODR requires that every virtual function be defined; /// somewhere in a program.) This usually permits such data to be; /// emitted in only a single object file, as opposed to redundantly; /// in every object file that requires it.; ///; /// One simple and common definition of ""key function"" is the first; /// virtual function in the class definition which is not defined there.; /// This rule works very well when that function has a non-inline; /// definition in some non-header file. Unfortunately, when that; /// function is defined inline, this rule requires the type data; /// to be emitted weakly, as if there were no key function.; ///; /// The ARM ABI observes that the ODR provides an additional guarantee:; /// a virtual function is always ODR-used, so if it is defined inline,; /// that definition must appear in every translation unit that defines; /// the class. Therefore, there is no reason to allow such functions; /// to serve as key functions.; ///; /// Because this changes the rules for emitting type data,; /// it can cause type data to be emitted with both weak and strong; /// linkage, which is not allowed on all platforms. Therefore,; /// exploiting this observation requires an ABI break and cannot be; /// done on a generic Itanium platform.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetCXXABI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetCXXABI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetCXXABI.h:273,Safety,safe,safe,273,"/// Can an out-of-line inline function serve as a key function?; ///; /// This flag is only useful in ABIs where type data (for example,; /// vtables and type_info objects) are emitted only after processing; /// the definition of a special ""key"" virtual function. (This is safe; /// because the ODR requires that every virtual function be defined; /// somewhere in a program.) This usually permits such data to be; /// emitted in only a single object file, as opposed to redundantly; /// in every object file that requires it.; ///; /// One simple and common definition of ""key function"" is the first; /// virtual function in the class definition which is not defined there.; /// This rule works very well when that function has a non-inline; /// definition in some non-header file. Unfortunately, when that; /// function is defined inline, this rule requires the type data; /// to be emitted weakly, as if there were no key function.; ///; /// The ARM ABI observes that the ODR provides an additional guarantee:; /// a virtual function is always ODR-used, so if it is defined inline,; /// that definition must appear in every translation unit that defines; /// the class. Therefore, there is no reason to allow such functions; /// to serve as key functions.; ///; /// Because this changes the rules for emitting type data,; /// it can cause type data to be emitted with both weak and strong; /// linkage, which is not allowed on all platforms. Therefore,; /// exploiting this observation requires an ABI break and cannot be; /// done on a generic Itanium platform.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetCXXABI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetCXXABI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetCXXABI.h:471,Safety,redund,redundantly,471,"/// Can an out-of-line inline function serve as a key function?; ///; /// This flag is only useful in ABIs where type data (for example,; /// vtables and type_info objects) are emitted only after processing; /// the definition of a special ""key"" virtual function. (This is safe; /// because the ODR requires that every virtual function be defined; /// somewhere in a program.) This usually permits such data to be; /// emitted in only a single object file, as opposed to redundantly; /// in every object file that requires it.; ///; /// One simple and common definition of ""key function"" is the first; /// virtual function in the class definition which is not defined there.; /// This rule works very well when that function has a non-inline; /// definition in some non-header file. Unfortunately, when that; /// function is defined inline, this rule requires the type data; /// to be emitted weakly, as if there were no key function.; ///; /// The ARM ABI observes that the ODR provides an additional guarantee:; /// a virtual function is always ODR-used, so if it is defined inline,; /// that definition must appear in every translation unit that defines; /// the class. Therefore, there is no reason to allow such functions; /// to serve as key functions.; ///; /// Because this changes the rules for emitting type data,; /// it can cause type data to be emitted with both weak and strong; /// linkage, which is not allowed on all platforms. Therefore,; /// exploiting this observation requires an ABI break and cannot be; /// done on a generic Itanium platform.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetCXXABI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetCXXABI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetCXXABI.h:541,Usability,simpl,simple,541,"/// Can an out-of-line inline function serve as a key function?; ///; /// This flag is only useful in ABIs where type data (for example,; /// vtables and type_info objects) are emitted only after processing; /// the definition of a special ""key"" virtual function. (This is safe; /// because the ODR requires that every virtual function be defined; /// somewhere in a program.) This usually permits such data to be; /// emitted in only a single object file, as opposed to redundantly; /// in every object file that requires it.; ///; /// One simple and common definition of ""key function"" is the first; /// virtual function in the class definition which is not defined there.; /// This rule works very well when that function has a non-inline; /// definition in some non-header file. Unfortunately, when that; /// function is defined inline, this rule requires the type data; /// to be emitted weakly, as if there were no key function.; ///; /// The ARM ABI observes that the ODR provides an additional guarantee:; /// a virtual function is always ODR-used, so if it is defined inline,; /// that definition must appear in every translation unit that defines; /// the class. Therefore, there is no reason to allow such functions; /// to serve as key functions.; ///; /// Because this changes the rules for emitting type data,; /// it can cause type data to be emitted with both weak and strong; /// linkage, which is not allowed on all platforms. Therefore,; /// exploiting this observation requires an ABI break and cannot be; /// done on a generic Itanium platform.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetCXXABI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetCXXABI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetCXXABI.h:37,Energy Efficiency,allocate,allocate,37,"/// When is record layout allowed to allocate objects in the tail; /// padding of a base class?; ///; /// This decision cannot be changed without breaking platform ABI; /// compatibility. In ISO C++98, tail padding reuse was only permitted for; /// non-POD base classes, but that restriction was removed retroactively by; /// DR 43, and tail padding reuse is always permitted in all de facto C++; /// language modes. However, many platforms use a variant of the old C++98; /// rule for compatibility.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetCXXABI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetCXXABI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetCXXABI.h:66,Availability,avail,available,66,"/// The tail-padding of a base class is always theoretically; /// available, even if it's POD.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetCXXABI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetCXXABI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetCXXABI.h:9,Energy Efficiency,allocate,allocate,9,/// Only allocate objects in the tail padding of a base class if; /// the base class is not POD according to the rules of C++ TR1.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetCXXABI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetCXXABI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetCXXABI.h:9,Energy Efficiency,allocate,allocate,9,/// Only allocate objects in the tail padding of a base class if; /// the base class is not POD according to the rules of C++11.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetCXXABI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetCXXABI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetCXXABI.h:157,Availability,down,down,157,"// To preserve binary compatibility, the generic Itanium ABI has; // permanently locked the definition of POD to the rules of C++ TR1,; // and that trickles down to derived ABIs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetCXXABI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetCXXABI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetCXXABI.h:15,Energy Efficiency,allocate,allocates,15,"// MSVC always allocates fields in the tail-padding of a base class; // subobject, even if they're POD.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetCXXABI.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetCXXABI.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:426,Integrability,interface,interface,426,"//===--- TargetInfo.h - Expose information about the target -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Defines the clang::TargetInfo interface.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:24,Security,Expose,Expose,24,"//===--- TargetInfo.h - Expose information about the target -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// Defines the clang::TargetInfo interface.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:163,Usability,simpl,simplicity,163,"// Fixed point integral and fractional bit sizes; // Saturated types share the same integral/fractional bits as their; // corresponding unsaturated types.; // For simplicity, the fractional bits in a _Fract type will be one less the; // width of that _Fract type. This leaves all signed _Fract types having no; // padding and unsigned _Fract types will only have 1 bit of padding after the; // sign if PaddingOnUnsignedFixedPoint is set.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:121,Modifiability,variab,variable,121,"/// If non-zero, specifies a maximum alignment to truncate alignment; /// specified in the aligned attribute of a static variable to this value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:4,Security,Expose,Exposes,4,/// Exposes information about the current target.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:167,Availability,avail,availability,167,// Target features that are read-only and should not be disabled/enabled; // by command line options. Such features are for emitting predefined; // macros or checking availability of builtin functions and can be omitted; // in function attributes in IR.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:94,Availability,down,downloads,94,/// __builtin_va_list as defined by the Power ABI:; /// https://www.power.org; /// /resources/downloads/Power-Arch-32-bit-ABI-supp-1.0-Embedded.pdf,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:40,Energy Efficiency,Power,Power,40,/// __builtin_va_list as defined by the Power ABI:; /// https://www.power.org; /// /resources/downloads/Power-Arch-32-bit-ABI-supp-1.0-Embedded.pdf,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:68,Energy Efficiency,power,power,68,/// __builtin_va_list as defined by the Power ABI:; /// https://www.power.org; /// /resources/downloads/Power-Arch-32-bit-ABI-supp-1.0-Embedded.pdf,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:104,Energy Efficiency,Power,Power-Arch-,104,/// __builtin_va_list as defined by the Power ABI:; /// https://www.power.org; /// /resources/downloads/Power-Arch-32-bit-ABI-supp-1.0-Embedded.pdf,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:85,Integrability,depend,depending,85,"// Different targets may support a different maximum width for the _BitInt; // type, depending on what operations are supported.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:174,Modifiability,extend,extended,174,/// Return the alignment that is the largest alignment ever used for any; /// scalar/SIMD data type on the target machine you are compiling for; /// (including types with an extended alignment requirement).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:115,Energy Efficiency,reduce,reduced,115,"/// getMinGlobalAlign - Return the minimum alignment of a global variable,; /// unless its alignment is explicitly reduced via attributes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:65,Modifiability,variab,variable,65,"/// getMinGlobalAlign - Return the minimum alignment of a global variable,; /// unless its alignment is explicitly reduced via attributes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:113,Energy Efficiency,allocate,allocate,113,"/// Return the alignment (in bits) of the thrown exception object. This is; /// only meaningful for targets that allocate C++ exceptions in a system; /// runtime, such as those using the Itanium C++ ABI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:110,Modifiability,variab,variable,110,"// Currently we assume the register width on the target matches the pointer; // width, we can introduce a new variable for this if/when some target wants; // it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:51,Modifiability,variab,variable,51,/// Get the maximum alignment in bits for a static variable with; /// aligned attribute.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:88,Integrability,message,message,88,"/// Check whether the given real type should use the ""fpret"" flavor of; /// Objective-C message passing on this target.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:90,Integrability,message,message,90,"/// Check whether _Complex long double should use the ""fp2ret"" flavor; /// of Objective-C message passing on this target.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:129,Modifiability,portab,portable,129,"/// Return information about target-specific builtins for; /// the current primary target, and info about which builtins are non-portable; /// across the current set of primary and secondary targets.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:247,Performance,perform,performance,247,"/// The __builtin_clz* and __builtin_ctz* built-in; /// functions are specified to have undefined results for zero inputs, but; /// on targets that support these operations in a way that provides; /// well-defined results for zero without loss of performance, it is a good; /// idea to avoid optimizing based on that undef behavior.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:292,Performance,optimiz,optimizing,292,"/// The __builtin_clz* and __builtin_ctz* built-in; /// functions are specified to have undefined results for zero inputs, but; /// on targets that support these operations in a way that provides; /// well-defined results for zero without loss of performance, it is a good; /// idea to avoid optimizing based on that undef behavior.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:286,Safety,avoid,avoid,286,"/// The __builtin_clz* and __builtin_ctz* built-in; /// functions are specified to have undefined results for zero inputs, but; /// on targets that support these operations in a way that provides; /// well-defined results for zero without loss of performance, it is a good; /// idea to avoid optimizing based on that undef behavior.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:69,Availability,avail,available,69,/// Returns whether or not type \c __builtin_ms_va_list type is; /// available on this target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:67,Availability,avail,available,67,/// Returns whether or not the AArch64 SVE built-in types are; /// available on this target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:64,Availability,avail,available,64,/// Returns whether or not the RISC-V V built-in types are; /// available on this target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:38,Safety,unsafe,unsafe,38,/// Returns whether or not the AMDGPU unsafe floating point atomics are; /// allowed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:30,Availability,mask,mask,30,/// For ARM targets returns a mask defining which coprocessors are configured; /// as Custom Datapath.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:67,Modifiability,config,configured,67,/// For ARM targets returns a mask defining which coprocessors are configured; /// as Custom Datapath.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:143,Modifiability,variab,variable,143,/// Extracts a register from the passed constraint (if it is a; /// single-register constraint) and the asm label expression related to a; /// variable in the input or output list of an inline asm statement.; ///; /// This function is used by Sema in order to diagnose conflicts between; /// the clobber list and the input/output lists.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:52,Modifiability,variab,variables,52,"/// Validate register name used for global register variables.; ///; /// This function returns true if the register passed in RegName can be used; /// for global register variables on this target. In addition, it returns; /// true in HasSizeMismatch if the size of the register doesn't match the; /// variable size passed in RegSize.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:171,Modifiability,variab,variables,171,"/// Validate register name used for global register variables.; ///; /// This function returns true if the register passed in RegName can be used; /// for global register variables on this target. In addition, it returns; /// true in HasSizeMismatch if the size of the register doesn't match the; /// variable size passed in RegSize.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:301,Modifiability,variab,variable,301,"/// Validate register name used for global register variables.; ///; /// This function returns true if the register passed in RegName can be used; /// for global register variables on this target. In addition, it returns; /// true in HasSizeMismatch if the size of the register doesn't match the; /// variable size passed in RegSize.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:4,Security,Validat,Validate,4,"/// Validate register name used for global register variables.; ///; /// This function returns true if the register passed in RegName can be used; /// for global register variables on this target. In addition, it returns; /// true in HasSizeMismatch if the size of the register doesn't match the; /// variable size passed in RegSize.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:166,Availability,error,error,166,"// validateOutputConstraint, validateInputConstraint - Checks that; // a constraint is valid and provides information about it.; // FIXME: These should return a real error instead of just true/false.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:3,Security,validat,validateOutputConstraint,3,"// validateOutputConstraint, validateInputConstraint - Checks that; // a constraint is valid and provides information about it.; // FIXME: These should return a real error instead of just true/false.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:29,Security,validat,validateInputConstraint,29,"// validateOutputConstraint, validateInputConstraint - Checks that; // a constraint is valid and provides information about it.; // FIXME: These should return a real error instead of just true/false.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:38,Testability,test,testing,38,// Windows Itanium support allows for testing the SCEI flavour of; // dllimport/export handling on a Windows system.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:153,Deployability,configurat,configuration,153,/// Set forced language options.; ///; /// Apply changes to the target information with respect to certain; /// language options which change the target configuration and adjust; /// the language based on the target options where applicable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:153,Modifiability,config,configuration,153,/// Set forced language options.; ///; /// Apply changes to the target information with respect to certain; /// language options which change the target configuration and adjust; /// the language based on the target options where applicable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:168,Availability,error,error,168,/// Initialize the map with the default set of target features for the; /// CPU this should include all legal feature strings on the target.; ///; /// \return False on error (invalid features).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:57,Availability,error,error,57,/// Target the specified CPU.; ///; /// \return False on error (invalid CPU name).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:47,Performance,tune,tune,47,/// Determine whether this TargetInfo supports tune in target attribute.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:54,Availability,error,error,54,/// Use the specified ABI.; ///; /// \return False on error (invalid ABI name).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:67,Availability,error,error,67,/// Use the specified unit for FP math.; ///; /// \return False on error (invalid unit name).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:29,Integrability,depend,dependent,29,/// For given feature return dependent ones.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:439,Availability,error,error,439,"/// Perform initialization based on the user configured; /// set of features (e.g., +sse4).; ///; /// The list is guaranteed to have at most one entry per feature.; ///; /// The target may modify the features list, to change which options are; /// passed onwards to the backend.; /// FIXME: This part should be fixed so that we can change handleTargetFeatures; /// to merely a TargetInfo initialization routine.; ///; /// \return False on error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:403,Integrability,rout,routine,403,"/// Perform initialization based on the user configured; /// set of features (e.g., +sse4).; ///; /// The list is guaranteed to have at most one entry per feature.; ///; /// The target may modify the features list, to change which options are; /// passed onwards to the backend.; /// FIXME: This part should be fixed so that we can change handleTargetFeatures; /// to merely a TargetInfo initialization routine.; ///; /// \return False on error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:45,Modifiability,config,configured,45,"/// Perform initialization based on the user configured; /// set of features (e.g., +sse4).; ///; /// The list is guaranteed to have at most one entry per feature.; ///; /// The target may modify the features list, to change which options are; /// passed onwards to the backend.; /// FIXME: This part should be fixed so that we can change handleTargetFeatures; /// to merely a TargetInfo initialization routine.; ///; /// \return False on error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:4,Performance,Perform,Perform,4,"/// Perform initialization based on the user configured; /// set of features (e.g., +sse4).; ///; /// The list is guaranteed to have at most one entry per feature.; ///; /// The target may modify the features list, to change which options are; /// passed onwards to the backend.; /// FIXME: This part should be fixed so that we can change handleTargetFeatures; /// to merely a TargetInfo initialization routine.; ///; /// \return False on error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:3,Security,Validat,Validate,3,// Validate the contents of the __builtin_cpu_supports(const char*); // argument.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:3,Security,Validat,Validate,3,// Validate the contents of the __builtin_cpu_is(const char*); // argument.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:3,Security,Validat,Validate,3,"// Validate a cpu_dispatch/cpu_specific CPU option, which is a different list; // from cpu_is, since it checks via features rather than CPUs directly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:26,Performance,tune,tune-cpu,26,// Get the value for the 'tune-cpu' flag for a cpu_specific variant with the; // programmer-specified 'Name'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:128,Performance,optimiz,optimization,128,// Get a list of the features that make up the CPU option for; // cpu_specific/cpu_dispatch so that it can be passed to llvm as optimization; // options.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:11,Performance,cache,cache,11,"// Get the cache line size of a given cpu. This method switches over; // the given cpu and returns ""std::nullopt"" if the CPU is not found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:52,Modifiability,variab,variable,52,/// Return the maximum alignment (in bits) of a TLS variable; ///; /// Gets the maximum alignment (in bits) of a TLS variable on this target.; /// Returns zero if there is no such constraint.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:117,Modifiability,variab,variable,117,/// Return the maximum alignment (in bits) of a TLS variable; ///; /// Gets the maximum alignment (in bits) of a TLS variable on this target.; /// Returns zero if there is no such constraint.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:28,Modifiability,variab,variable-length,28,/// Whether target supports variable-length arrays.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:267,Performance,optimiz,optimizations,267,"/// Return an AST address space which can be used opportunistically; /// for constant global memory. It must be possible to convert pointers into; /// this address space to LangAS::Default. If no such address space exists,; /// this may return std::nullopt, and such optimizations will be disabled.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:88,Modifiability,plugin,plugin,88,"// access target-specific GPU grid values that must be consistent between; // host RTL (plugin), deviceRTL and clang.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:3,Security,access,access,3,"// access target-specific GPU grid values that must be consistent between; // host RTL (plugin), deviceRTL and clang.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:64,Availability,avail,availability,64,/// Retrieve the name of the platform as it is used in the; /// availability attribute.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:233,Availability,error,error,233,"/// Determines whether a given calling convention is valid for the; /// target. A calling convention can either be accepted, produce a warning; /// and be substituted with the default calling convention, or (someday); /// produce an error (such as using thiscall on a non-instance function).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:36,Energy Efficiency,power,power,36,/// Whether target defaults to the `power` alignment rules of AIX.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:56,Modifiability,variab,variables,56,/// Whether target allows debuginfo types for decl only variables/functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:65,Deployability,deploy,deployment,65,"/// Returns the darwin target variant triple, the variant of the deployment; /// target for which the code is being compiled.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:3,Testability,Assert,Assert,3,// Assert the values for the fractional and integral bits for each fixed point; // type follow the restrictions given in clause 6.2.6.3 of N1169.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetOptions.h:44,Performance,tune,tune,44,"/// If given, the name of the target CPU to tune code for.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetOptions.h:47,Security,access,accessing,47,"/// \brief If enabled, use 32-bit pointers for accessing const/local/shared; /// address space.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetOptions.h:36,Safety,unsafe,unsafe,36,"/// \brief If enabled, allow AMDGPU unsafe floating point atomics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetOptions.h:324,Integrability,depend,depend,324,/// The version of the SDK which was used during the compilation.; /// The option is used for two different purposes:; /// * on darwin the version is propagated to LLVM where it's used; /// to support SDK Version metadata (See D55673).; /// * CUDA compilation uses it to control parts of CUDA compilation; /// in clang that depend on specific version of the CUDA SDK.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetOptions.h:8,Security,validat,validator,8,/// The validator version for dxil.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TargetOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TemplateKinds.h:25,Modifiability,variab,variable,25,/// The name refers to a variable template whose specialization produces a; /// variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TemplateKinds.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TemplateKinds.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TemplateKinds.h:80,Modifiability,variab,variable,80,/// The name refers to a variable template whose specialization produces a; /// variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TemplateKinds.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TemplateKinds.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TemplateKinds.h:25,Integrability,depend,dependent,25,"/// The name refers to a dependent template name:; /// \code; /// template<typename MetaFun, typename T1, typename T2> struct apply2 {; /// typedef typename MetaFun::template apply<T1, T2>::type type;; /// };; /// \endcode; ///; /// Here, ""apply"" is a dependent template name within the typename; /// specifier in the typedef. ""apply"" is a nested template, and; /// whether the template name is assumed to refer to a type template or a; /// function template depends on the context in which the template; /// name occurs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TemplateKinds.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TemplateKinds.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TemplateKinds.h:252,Integrability,depend,dependent,252,"/// The name refers to a dependent template name:; /// \code; /// template<typename MetaFun, typename T1, typename T2> struct apply2 {; /// typedef typename MetaFun::template apply<T1, T2>::type type;; /// };; /// \endcode; ///; /// Here, ""apply"" is a dependent template name within the typename; /// specifier in the typedef. ""apply"" is a nested template, and; /// whether the template name is assumed to refer to a type template or a; /// function template depends on the context in which the template; /// name occurs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TemplateKinds.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TemplateKinds.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TemplateKinds.h:459,Integrability,depend,depends,459,"/// The name refers to a dependent template name:; /// \code; /// template<typename MetaFun, typename T1, typename T2> struct apply2 {; /// typedef typename MetaFun::template apply<T1, T2>::type type;; /// };; /// \endcode; ///; /// Here, ""apply"" is a dependent template name within the typename; /// specifier in the typedef. ""apply"" is a nested template, and; /// whether the template name is assumed to refer to a type template or a; /// function template depends on the context in which the template; /// name occurs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TemplateKinds.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TemplateKinds.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TokenKinds.h:15,Usability,simpl,simple,15,/// Provides a simple uniform namespace for tokens from all C languages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TokenKinds.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TokenKinds.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TokenKinds.h:191,Integrability,message,messages,191,"/// Determines the name of a token as used within the front end.; ///; /// The name of a token will be an internal name (such as ""l_square""); /// and should not be used as part of diagnostic messages.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TokenKinds.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TokenKinds.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TokenKinds.h:146,Integrability,rout,routine,146,"/// Determines the spelling of simple punctuation tokens like; /// '!' or '%', and returns NULL for literal and annotation tokens.; ///; /// This routine only retrieves the ""simple"" spelling of the token,; /// and will not produce any alternative spellings (e.g., a; /// digraph). For the actual spelling of a given Token, use; /// Preprocessor::getSpelling().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TokenKinds.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TokenKinds.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TokenKinds.h:31,Usability,simpl,simple,31,"/// Determines the spelling of simple punctuation tokens like; /// '!' or '%', and returns NULL for literal and annotation tokens.; ///; /// This routine only retrieves the ""simple"" spelling of the token,; /// and will not produce any alternative spellings (e.g., a; /// digraph). For the actual spelling of a given Token, use; /// Preprocessor::getSpelling().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TokenKinds.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TokenKinds.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TokenKinds.h:174,Usability,simpl,simple,174,"/// Determines the spelling of simple punctuation tokens like; /// '!' or '%', and returns NULL for literal and annotation tokens.; ///; /// This routine only retrieves the ""simple"" spelling of the token,; /// and will not produce any alternative spellings (e.g., a; /// digraph). For the actual spelling of a given Token, use; /// Preprocessor::getSpelling().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TokenKinds.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TokenKinds.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TokenKinds.h:31,Usability,simpl,simple,31,/// Determines the spelling of simple keyword and contextual keyword; /// tokens like 'int' and 'dynamic_cast'. Returns NULL for other token kinds.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/TokenKinds.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TokenKinds.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/XRayInstr.h:42,Availability,mask,mask,42,/// Parses a command line argument into a mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/Basic/XRayInstr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/XRayInstr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/BackendUtil.h:26,Testability,benchmark,benchmarking,26,///< Don't emit anything (benchmarking mode),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/BackendUtil.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/BackendUtil.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h:4,Modifiability,Extend,Extend,4,/// Extend - Valid only for integer argument types. Same as 'direct'; /// but also emit a zero/sign extension attribute.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h:304,Modifiability,variab,variables,304,"/// IndirectAliased - Similar to Indirect, but the pointer may be to an; /// object that is otherwise referenced. The object is known to not be; /// modified through any other references for the duration of the call, and; /// the callee must not itself modify the object. Because C allows; /// parameter variables to be modified and guarantees that they have unique; /// addresses, the callee must defensively copy the object into a local; /// variable if it might be modified or its address might be compared.; /// Since those are uncommon, in principle this convention allows programs; /// to avoid copies in more situations. However, it may introduce *extra*; /// copies if the callee fails to prove that a copy is unnecessary and the; /// caller naturally produces an unaliased object for the argument.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h:444,Modifiability,variab,variable,444,"/// IndirectAliased - Similar to Indirect, but the pointer may be to an; /// object that is otherwise referenced. The object is known to not be; /// modified through any other references for the duration of the call, and; /// the callee must not itself modify the object. Because C allows; /// parameter variables to be modified and guarantees that they have unique; /// addresses, the callee must defensively copy the object into a local; /// variable if it might be modified or its address might be compared.; /// Since those are uncommon, in principle this convention allows programs; /// to avoid copies in more situations. However, it may introduce *extra*; /// copies if the callee fails to prove that a copy is unnecessary and the; /// caller naturally produces an unaliased object for the argument.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h:595,Safety,avoid,avoid,595,"/// IndirectAliased - Similar to Indirect, but the pointer may be to an; /// object that is otherwise referenced. The object is known to not be; /// modified through any other references for the duration of the call, and; /// the callee must not itself modify the object. Because C allows; /// parameter variables to be modified and guarantees that they have unique; /// addresses, the callee must defensively copy the object into a local; /// variable if it might be modified or its address might be compared.; /// Since those are uncommon, in principle this convention allows programs; /// to avoid copies in more situations. However, it may introduce *extra*; /// copies if the callee fails to prove that a copy is unnecessary and the; /// caller naturally produces an unaliased object for the argument.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h:48,Modifiability,extend,extended,48,// ABIArgInfo will record the argument as being extended based on the sign; // of its type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h:68,Testability,Assert,Assert,68,// Check that unpaddedCoerceToType has roughly the right shape.; // Assert that we only have a struct type if there are multiple elements.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h:3,Testability,Assert,Assert,3,// Assert that all the non-padding elements have a corresponding element; // in the unpadded type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h:3,Testability,Assert,Assert,3,// Assert that there aren't extra elements in the unpadded type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h:10,Modifiability,Extend,Extend,10,// Direct/Extend accessors,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h:17,Security,access,accessors,17,// Direct/Extend accessors,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h:12,Security,access,accessors,12,// Indirect accessors,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h:76,Integrability,depend,depend,76,"/// The LLVM::CallingConv to actually use for this function, which may; /// depend on the ABI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h:4,Testability,Log,Log,4,/// Log 2 of the maximum vector width.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h:84,Availability,reliab,reliable,84,"/// In ARC, whether this function retains its return value. This; /// is not always reliable for call sites.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h:96,Integrability,depend,depend,96,"/// getEffectiveCallingConvention - Return the actual calling convention to; /// use, which may depend on the ABI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CGFunctionInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h:411,Integrability,interface,interface,411,"//==---- CodeGenABITypes.h - Convert Clang types to LLVM types for ABI -----==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // CodeGenABITypes is a simple interface for getting LLVM types for; // the parameters and the return value of a function given the Clang; // types.; //; // The class is implemented as a public wrapper around the private; // CodeGenTypes class in lib/CodeGen.; //; // It allows other clients, like LLDB, to determine the LLVM types that are; // actually used in function calls, which makes it possible to then determine; // the actual ABI locations (e.g. registers, stack locations, etc.) that; // these parameters are stored in.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h:574,Integrability,wrap,wrapper,574,"//==---- CodeGenABITypes.h - Convert Clang types to LLVM types for ABI -----==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // CodeGenABITypes is a simple interface for getting LLVM types for; // the parameters and the return value of a function given the Clang; // types.; //; // The class is implemented as a public wrapper around the private; // CodeGenTypes class in lib/CodeGen.; //; // It allows other clients, like LLDB, to determine the LLVM types that are; // actually used in function calls, which makes it possible to then determine; // the actual ABI locations (e.g. registers, stack locations, etc.) that; // these parameters are stored in.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h:404,Usability,simpl,simple,404,"//==---- CodeGenABITypes.h - Convert Clang types to LLVM types for ABI -----==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // CodeGenABITypes is a simple interface for getting LLVM types for; // the parameters and the return value of a function given the Clang; // types.; //; // The class is implemented as a public wrapper around the private; // CodeGenTypes class in lib/CodeGen.; //; // It allows other clients, like LLDB, to determine the LLVM types that are; // actually used in function calls, which makes it possible to then determine; // the actual ABI locations (e.g. registers, stack locations, etc.) that; // these parameters are stored in.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h:285,Modifiability,inherit,inherited,285,"/// Given a non-bitfield struct field, return its index within the elements of; /// the struct's converted type. The returned index refers to a field number in; /// the complete object type which is returned by convertTypeForMemory. FD must; /// be a field in RD directly (i.e. not an inherited field).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h:204,Deployability,configurat,configuration,204,"/// Given the language and code-generation options that Clang was configured; /// with, set the default LLVM IR attributes for a function definition.; /// The attributes set here are mostly global target-configuration and; /// pipeline-configuration options like the target CPU, variant stack; /// rules, whether to optimize for size, and so on. This is useful for; /// frontends (such as Swift) that generally intend to interoperate with; /// C code and rely on Clang's target configuration logic.; ///; /// As a general rule, this function assumes that meaningful attributes; /// haven't already been added to the builder. It won't intentionally; /// displace any existing attributes, but it also won't check to avoid; /// overwriting them. Callers should generally apply customizations after; /// making this call.; ///; /// This function assumes that the caller is not defining a function that; /// requires special no-builtin treatment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h:227,Deployability,pipeline,pipeline-configuration,227,"/// Given the language and code-generation options that Clang was configured; /// with, set the default LLVM IR attributes for a function definition.; /// The attributes set here are mostly global target-configuration and; /// pipeline-configuration options like the target CPU, variant stack; /// rules, whether to optimize for size, and so on. This is useful for; /// frontends (such as Swift) that generally intend to interoperate with; /// C code and rely on Clang's target configuration logic.; ///; /// As a general rule, this function assumes that meaningful attributes; /// haven't already been added to the builder. It won't intentionally; /// displace any existing attributes, but it also won't check to avoid; /// overwriting them. Callers should generally apply customizations after; /// making this call.; ///; /// This function assumes that the caller is not defining a function that; /// requires special no-builtin treatment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h:478,Deployability,configurat,configuration,478,"/// Given the language and code-generation options that Clang was configured; /// with, set the default LLVM IR attributes for a function definition.; /// The attributes set here are mostly global target-configuration and; /// pipeline-configuration options like the target CPU, variant stack; /// rules, whether to optimize for size, and so on. This is useful for; /// frontends (such as Swift) that generally intend to interoperate with; /// C code and rely on Clang's target configuration logic.; ///; /// As a general rule, this function assumes that meaningful attributes; /// haven't already been added to the builder. It won't intentionally; /// displace any existing attributes, but it also won't check to avoid; /// overwriting them. Callers should generally apply customizations after; /// making this call.; ///; /// This function assumes that the caller is not defining a function that; /// requires special no-builtin treatment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h:66,Modifiability,config,configured,66,"/// Given the language and code-generation options that Clang was configured; /// with, set the default LLVM IR attributes for a function definition.; /// The attributes set here are mostly global target-configuration and; /// pipeline-configuration options like the target CPU, variant stack; /// rules, whether to optimize for size, and so on. This is useful for; /// frontends (such as Swift) that generally intend to interoperate with; /// C code and rely on Clang's target configuration logic.; ///; /// As a general rule, this function assumes that meaningful attributes; /// haven't already been added to the builder. It won't intentionally; /// displace any existing attributes, but it also won't check to avoid; /// overwriting them. Callers should generally apply customizations after; /// making this call.; ///; /// This function assumes that the caller is not defining a function that; /// requires special no-builtin treatment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h:204,Modifiability,config,configuration,204,"/// Given the language and code-generation options that Clang was configured; /// with, set the default LLVM IR attributes for a function definition.; /// The attributes set here are mostly global target-configuration and; /// pipeline-configuration options like the target CPU, variant stack; /// rules, whether to optimize for size, and so on. This is useful for; /// frontends (such as Swift) that generally intend to interoperate with; /// C code and rely on Clang's target configuration logic.; ///; /// As a general rule, this function assumes that meaningful attributes; /// haven't already been added to the builder. It won't intentionally; /// displace any existing attributes, but it also won't check to avoid; /// overwriting them. Callers should generally apply customizations after; /// making this call.; ///; /// This function assumes that the caller is not defining a function that; /// requires special no-builtin treatment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h:236,Modifiability,config,configuration,236,"/// Given the language and code-generation options that Clang was configured; /// with, set the default LLVM IR attributes for a function definition.; /// The attributes set here are mostly global target-configuration and; /// pipeline-configuration options like the target CPU, variant stack; /// rules, whether to optimize for size, and so on. This is useful for; /// frontends (such as Swift) that generally intend to interoperate with; /// C code and rely on Clang's target configuration logic.; ///; /// As a general rule, this function assumes that meaningful attributes; /// haven't already been added to the builder. It won't intentionally; /// displace any existing attributes, but it also won't check to avoid; /// overwriting them. Callers should generally apply customizations after; /// making this call.; ///; /// This function assumes that the caller is not defining a function that; /// requires special no-builtin treatment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h:478,Modifiability,config,configuration,478,"/// Given the language and code-generation options that Clang was configured; /// with, set the default LLVM IR attributes for a function definition.; /// The attributes set here are mostly global target-configuration and; /// pipeline-configuration options like the target CPU, variant stack; /// rules, whether to optimize for size, and so on. This is useful for; /// frontends (such as Swift) that generally intend to interoperate with; /// C code and rely on Clang's target configuration logic.; ///; /// As a general rule, this function assumes that meaningful attributes; /// haven't already been added to the builder. It won't intentionally; /// displace any existing attributes, but it also won't check to avoid; /// overwriting them. Callers should generally apply customizations after; /// making this call.; ///; /// This function assumes that the caller is not defining a function that; /// requires special no-builtin treatment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h:316,Performance,optimiz,optimize,316,"/// Given the language and code-generation options that Clang was configured; /// with, set the default LLVM IR attributes for a function definition.; /// The attributes set here are mostly global target-configuration and; /// pipeline-configuration options like the target CPU, variant stack; /// rules, whether to optimize for size, and so on. This is useful for; /// frontends (such as Swift) that generally intend to interoperate with; /// C code and rely on Clang's target configuration logic.; ///; /// As a general rule, this function assumes that meaningful attributes; /// haven't already been added to the builder. It won't intentionally; /// displace any existing attributes, but it also won't check to avoid; /// overwriting them. Callers should generally apply customizations after; /// making this call.; ///; /// This function assumes that the caller is not defining a function that; /// requires special no-builtin treatment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h:714,Safety,avoid,avoid,714,"/// Given the language and code-generation options that Clang was configured; /// with, set the default LLVM IR attributes for a function definition.; /// The attributes set here are mostly global target-configuration and; /// pipeline-configuration options like the target CPU, variant stack; /// rules, whether to optimize for size, and so on. This is useful for; /// frontends (such as Swift) that generally intend to interoperate with; /// C code and rely on Clang's target configuration logic.; ///; /// As a general rule, this function assumes that meaningful attributes; /// haven't already been added to the builder. It won't intentionally; /// displace any existing attributes, but it also won't check to avoid; /// overwriting them. Callers should generally apply customizations after; /// making this call.; ///; /// This function assumes that the caller is not defining a function that; /// requires special no-builtin treatment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h:492,Testability,log,logic,492,"/// Given the language and code-generation options that Clang was configured; /// with, set the default LLVM IR attributes for a function definition.; /// The attributes set here are mostly global target-configuration and; /// pipeline-configuration options like the target CPU, variant stack; /// rules, whether to optimize for size, and so on. This is useful for; /// frontends (such as Swift) that generally intend to interoperate with; /// C code and rely on Clang's target configuration logic.; ///; /// As a general rule, this function assumes that meaningful attributes; /// haven't already been added to the builder. It won't intentionally; /// displace any existing attributes, but it also won't check to avoid; /// overwriting them. Callers should generally apply customizations after; /// making this call.; ///; /// This function assumes that the caller is not defining a function that; /// requires special no-builtin treatment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h:23,Integrability,protocol,protocol,23,"/// Get a pointer to a protocol object for the given declaration, emitting it if; /// it hasn't already been emitted in this translation unit. Note that the ABI; /// for emitting a protocol reference in code (e.g. for a protocol expression); /// in most runtimes is not as simple as just materializing a pointer to this; /// object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h:181,Integrability,protocol,protocol,181,"/// Get a pointer to a protocol object for the given declaration, emitting it if; /// it hasn't already been emitted in this translation unit. Note that the ABI; /// for emitting a protocol reference in code (e.g. for a protocol expression); /// in most runtimes is not as simple as just materializing a pointer to this; /// object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h:220,Integrability,protocol,protocol,220,"/// Get a pointer to a protocol object for the given declaration, emitting it if; /// it hasn't already been emitted in this translation unit. Note that the ABI; /// for emitting a protocol reference in code (e.g. for a protocol expression); /// in most runtimes is not as simple as just materializing a pointer to this; /// object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h:273,Usability,simpl,simple,273,"/// Get a pointer to a protocol object for the given declaration, emitting it if; /// it hasn't already been emitted in this translation unit. Note that the ABI; /// for emitting a protocol reference in code (e.g. for a protocol expression); /// in most runtimes is not as simple as just materializing a pointer to this; /// object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenABITypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenAction.h:23,Security,access,access,23,// Let BackendConsumer access LinkModule.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenAction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenAction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenAction.h:4,Performance,Load,Load,4,/// Load bitcode modules to link into our module from the options.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenAction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenAction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenAction.h:106,Availability,failure,failure,106,"/// Take the generated LLVM module, for use after the action has been run.; /// The result may be null on failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenAction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/CodeGenAction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitBuilder.h:416,Integrability,interface,interface,416,"//===- ConstantInitBuilder.h - Builder for LLVM IR constants ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This class provides a convenient interface for building complex; // global initializers of the sort that are frequently required for; // language ABIs.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitBuilder.h:97,Testability,assert,assert,97,"// Movable, mostly to allow returning. But we have to write this out; // properly to satisfy the assert in the destructor.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitBuilder.h:281,Availability,redundant,redundant,281,"/// Given that this builder was created by beginning an array or struct; /// component on the given parent builder, finish the array/struct; /// component and add it to the parent.; ///; /// It is an intentional choice that the parent is passed in explicitly; /// despite it being redundant with information already kept in the; /// builder. This aids in readability by making it easier to find the; /// places that add components to a builder, as well as ""bookending""; /// the sub-builder more explicitly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitBuilder.h:281,Safety,redund,redundant,281,"/// Given that this builder was created by beginning an array or struct; /// component on the given parent builder, finish the array/struct; /// component and add it to the parent.; ///; /// It is an intentional choice that the parent is passed in explicitly; /// despite it being redundant with information already kept in the; /// builder. This aids in readability by making it easier to find the; /// places that add components to a builder, as well as ""bookending""; /// the sub-builder more explicitly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitBuilder.h:161,Modifiability,variab,variable,161,"/// Given that this builder was created by beginning an array or struct; /// directly on a ConstantInitBuilder, finish the array/struct and; /// create a global variable with it as the initializer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitBuilder.h:191,Modifiability,variab,variable,191,"/// Given that this builder was created by beginning an array or struct; /// directly on a ConstantInitBuilder, finish the array/struct and; /// set it as the initializer of the given global variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitBuilder.h:429,Availability,error,error,429,"/// Given that this builder was created by beginning an array or struct; /// directly on a ConstantInitBuilder, finish the array/struct and; /// return a future which can be used to install the initializer in; /// a global later.; ///; /// This is useful for allowing a finished initializer to passed to; /// an API which will build the global. However, the ""future"" preserves; /// a dependency on the original builder; it is an error to pass it aside.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitBuilder.h:182,Deployability,install,install,182,"/// Given that this builder was created by beginning an array or struct; /// directly on a ConstantInitBuilder, finish the array/struct and; /// return a future which can be used to install the initializer in; /// a global later.; ///; /// This is useful for allowing a finished initializer to passed to; /// an API which will build the global. However, the ""future"" preserves; /// a dependency on the original builder; it is an error to pass it aside.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitBuilder.h:384,Integrability,depend,dependency,384,"/// Given that this builder was created by beginning an array or struct; /// directly on a ConstantInitBuilder, finish the array/struct and; /// return a future which can be used to install the initializer in; /// a global later.; ///; /// This is useful for allowing a finished initializer to passed to; /// an API which will build the global. However, the ""future"" preserves; /// a dependency on the original builder; it is an error to pass it aside.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitBuilder.h:146,Modifiability,extend,extend,146,"/// A template class designed to allow other frontends to; /// easily customize the builder classes used by ConstantInitBuilder,; /// and thus to extend the API to work with the abstractions they; /// prefer. This would probably not be necessary if C++ just; /// supported extension methods.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitBuilder.h:146,Modifiability,extend,extend,146,"/// A template class designed to allow other frontends to; /// easily customize the builder classes used by ConstantInitBuilder,; /// and thus to extend the API to work with the abstractions they; /// prefer. This would probably not be necessary if C++ just; /// supported extension methods.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitFuture.h:113,Safety,safe,safely,113,// Forward-declare ConstantInitBuilderBase and give it a; // PointerLikeTypeTraits specialization so that we can safely use it; // in a PointerUnion below.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitFuture.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitFuture.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitFuture.h:4,Deployability,Install,Install,4,/// Install the initializer into a global variable. This cannot; /// be called multiple times.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitFuture.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitFuture.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitFuture.h:42,Modifiability,variab,variable,42,/// Install the initializer into a global variable. This cannot; /// be called multiple times.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitFuture.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitFuture.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ModuleBuilder.h:419,Integrability,interface,interface,419,"//===--- CodeGen/ModuleBuilder.h - Build LLVM from ASTs ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the ModuleBuilder interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/ModuleBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ModuleBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ModuleBuilder.h:23,Integrability,interface,interface,23,/// The primary public interface to the Clang code generator.; ///; /// This is not really an abstract interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/ModuleBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ModuleBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ModuleBuilder.h:103,Integrability,interface,interface,103,/// The primary public interface to the Clang code generator.; ///; /// This is not really an abstract interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/ModuleBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ModuleBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ModuleBuilder.h:173,Availability,error,error,173,"/// Return the module that this code generator is building into.; ///; /// This may return null after HandleTranslationUnit is called;; /// this signifies that there was an error generating code. A; /// diagnostic will have been generated in this case, and the module; /// will be deleted.; ///; /// It will also return null if the module is released.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/ModuleBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ModuleBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ModuleBuilder.h:342,Deployability,release,released,342,"/// Return the module that this code generator is building into.; ///; /// This may return null after HandleTranslationUnit is called;; /// this signifies that there was an error generating code. A; /// diagnostic will have been generated in this case, and the module; /// will be deleted.; ///; /// It will also return null if the module is released.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/ModuleBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ModuleBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ModuleBuilder.h:4,Deployability,Release,Release,4,/// Release ownership of the module to the caller.; ///; /// It is illegal to call methods other than GetModule on the; /// CodeGenerator after releasing its module.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/ModuleBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ModuleBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ModuleBuilder.h:358,Energy Efficiency,schedul,schedule,358,"/// Return the LLVM address of the given global entity.; ///; /// \param isForDefinition If true, the caller intends to define the; /// entity; the object returned will be an llvm::GlobalValue of; /// some sort. If false, the caller just intends to use the entity;; /// the object returned may be any sort of constant value, and the; /// code generator will schedule the entity for emission if a; /// definition has been registered with this code generator.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/ModuleBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ModuleBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ModuleBuilder.h:128,Energy Efficiency,allocate,allocated,128,/// CreateLLVMCodeGen - Create a CodeGenerator instance.; /// It is the responsibility of the caller to call delete on; /// the allocated CodeGenerator instance.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/ModuleBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ModuleBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ObjectFilePCHContainerOperations.h:63,Integrability,wrap,wraps,63,"/// A PCHContainerWriter implementation that uses LLVM to; /// wraps Clang modules inside a COFF, ELF, or Mach-O container.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/ObjectFilePCHContainerOperations.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ObjectFilePCHContainerOperations.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ObjectFilePCHContainerOperations.h:87,Integrability,wrap,wrapper,87,/// Return an ASTConsumer that can be chained with a; /// PCHGenerator that produces a wrapper file format; /// that also contains full debug info for the module.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/ObjectFilePCHContainerOperations.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ObjectFilePCHContainerOperations.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ObjectFilePCHContainerOperations.h:63,Integrability,wrap,wraps,63,"/// A PCHContainerReader implementation that uses LLVM to; /// wraps Clang modules inside a COFF, ELF, or Mach-O container.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/ObjectFilePCHContainerOperations.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ObjectFilePCHContainerOperations.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/SwiftCallingConv.h:332,Usability,simpl,simply,332,"/// Return the types for a coerce-and-expand operation.; ///; /// The first type matches the memory layout of the data that's been; /// added to this structure, including explicit [N x i8] arrays for any; /// internal padding.; ///; /// The second type removes any internal padding members and, if only; /// one element remains, is simply that element type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/SwiftCallingConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/SwiftCallingConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/SwiftCallingConv.h:80,Integrability,interface,interface,80,/// Compute the ABI information of a swiftcall function. This is a; /// private interface for Clang.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CodeGen/SwiftCallingConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/SwiftCallingConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:405,Integrability,interface,interface,405,"//===--- CrossTranslationUnit.h - -------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides an interface to load binary AST dumps on demand. This; // feature can be utilized for tools that require cross translation unit; // support.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:418,Performance,load,load,418,"//===--- CrossTranslationUnit.h - -------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides an interface to load binary AST dumps on demand. This; // feature can be utilized for tools that require cross translation unit; // support.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:433,Availability,error,error,433,"/// This function parses an index file that determines which; /// translation unit contains which definition. The IndexPath is not prefixed; /// with CTUDir, so an absolute path is expected for consistent results.; ///; /// The index file format is the following:; /// each line consists of an USR and a filepath separated by a space.; ///; /// \return Returns a map where the USR is the key and the filepath is the value; /// or an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:55,Modifiability,variab,variable,55,"/// Returns true if it makes sense to import a foreign variable definition.; /// For instance, we don't want to import variables that have non-trivial types; /// because the constructor might have side-effects.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:119,Modifiability,variab,variables,119,"/// Returns true if it makes sense to import a foreign variable definition.; /// For instance, we don't want to import variables that have non-trivial types; /// because the constructor might have side-effects.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:112,Performance,load,load,112,"/// This class is used for tools that requires cross translation; /// unit capability.; ///; /// This class can load definitions from external AST sources.; /// The loaded definition will be merged back to the original AST using the; /// AST Importer.; /// In order to use this class, an index file is required that describes; /// the locations of the AST files for each definition.; ///; /// Note that this class also implements caching.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:165,Performance,load,loaded,165,"/// This class is used for tools that requires cross translation; /// unit capability.; ///; /// This class can load definitions from external AST sources.; /// The loaded definition will be merged back to the original AST using the; /// AST Importer.; /// In order to use this class, an index file is required that describes; /// the locations of the AST files for each definition.; ///; /// Note that this class also implements caching.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:788,Availability,error,error,788,"/// This function loads a function or variable definition from an; /// external AST file and merges it into the original AST.; ///; /// This method should only be used on functions that have no definitions or; /// variables that have no initializer in; /// the current translation unit. A function definition with the same; /// declaration will be looked up in the index file which should be in the; /// \p CrossTUDir directory, called \p IndexName. In case the declaration is; /// found in the index the corresponding AST will be loaded and the; /// definition will be merged into the original AST using the AST Importer.; ///; /// \return The declaration with the definition will be returned.; /// If no suitable definition is found in the index file or multiple; /// definitions found error will be returned.; ///; /// Note that the AST files should also be in the \p CrossTUDir.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:38,Modifiability,variab,variable,38,"/// This function loads a function or variable definition from an; /// external AST file and merges it into the original AST.; ///; /// This method should only be used on functions that have no definitions or; /// variables that have no initializer in; /// the current translation unit. A function definition with the same; /// declaration will be looked up in the index file which should be in the; /// \p CrossTUDir directory, called \p IndexName. In case the declaration is; /// found in the index the corresponding AST will be loaded and the; /// definition will be merged into the original AST using the AST Importer.; ///; /// \return The declaration with the definition will be returned.; /// If no suitable definition is found in the index file or multiple; /// definitions found error will be returned.; ///; /// Note that the AST files should also be in the \p CrossTUDir.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:214,Modifiability,variab,variables,214,"/// This function loads a function or variable definition from an; /// external AST file and merges it into the original AST.; ///; /// This method should only be used on functions that have no definitions or; /// variables that have no initializer in; /// the current translation unit. A function definition with the same; /// declaration will be looked up in the index file which should be in the; /// \p CrossTUDir directory, called \p IndexName. In case the declaration is; /// found in the index the corresponding AST will be loaded and the; /// definition will be merged into the original AST using the AST Importer.; ///; /// \return The declaration with the definition will be returned.; /// If no suitable definition is found in the index file or multiple; /// definitions found error will be returned.; ///; /// Note that the AST files should also be in the \p CrossTUDir.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:18,Performance,load,loads,18,"/// This function loads a function or variable definition from an; /// external AST file and merges it into the original AST.; ///; /// This method should only be used on functions that have no definitions or; /// variables that have no initializer in; /// the current translation unit. A function definition with the same; /// declaration will be looked up in the index file which should be in the; /// \p CrossTUDir directory, called \p IndexName. In case the declaration is; /// found in the index the corresponding AST will be loaded and the; /// definition will be merged into the original AST using the AST Importer.; ///; /// \return The declaration with the definition will be returned.; /// If no suitable definition is found in the index file or multiple; /// definitions found error will be returned.; ///; /// Note that the AST files should also be in the \p CrossTUDir.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:531,Performance,load,loaded,531,"/// This function loads a function or variable definition from an; /// external AST file and merges it into the original AST.; ///; /// This method should only be used on functions that have no definitions or; /// variables that have no initializer in; /// the current translation unit. A function definition with the same; /// declaration will be looked up in the index file which should be in the; /// \p CrossTUDir directory, called \p IndexName. In case the declaration is; /// found in the index the corresponding AST will be loaded and the; /// definition will be merged into the original AST using the AST Importer.; ///; /// \return The declaration with the definition will be returned.; /// If no suitable definition is found in the index file or multiple; /// definitions found error will be returned.; ///; /// Note that the AST files should also be in the \p CrossTUDir.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:518,Availability,Error,Error,518,"/// This function loads a definition from an external AST file.; ///; /// A definition with the same declaration will be looked up in the; /// index file which should be in the \p CrossTUDir directory, called; /// \p IndexName. In case the declaration is found in the index the; /// corresponding AST will be loaded. If the number of TUs imported; /// reaches \p CTULoadTreshold, no loading is performed.; ///; /// \return Returns a pointer to the ASTUnit that contains the definition of; /// the looked up name or an Error.; /// The returned pointer is never a nullptr.; ///; /// Note that the AST files should also be in the \p CrossTUDir.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:18,Performance,load,loads,18,"/// This function loads a definition from an external AST file.; ///; /// A definition with the same declaration will be looked up in the; /// index file which should be in the \p CrossTUDir directory, called; /// \p IndexName. In case the declaration is found in the index the; /// corresponding AST will be loaded. If the number of TUs imported; /// reaches \p CTULoadTreshold, no loading is performed.; ///; /// \return Returns a pointer to the ASTUnit that contains the definition of; /// the looked up name or an Error.; /// The returned pointer is never a nullptr.; ///; /// Note that the AST files should also be in the \p CrossTUDir.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:309,Performance,load,loaded,309,"/// This function loads a definition from an external AST file.; ///; /// A definition with the same declaration will be looked up in the; /// index file which should be in the \p CrossTUDir directory, called; /// \p IndexName. In case the declaration is found in the index the; /// corresponding AST will be loaded. If the number of TUs imported; /// reaches \p CTULoadTreshold, no loading is performed.; ///; /// \return Returns a pointer to the ASTUnit that contains the definition of; /// the looked up name or an Error.; /// The returned pointer is never a nullptr.; ///; /// Note that the AST files should also be in the \p CrossTUDir.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:383,Performance,load,loading,383,"/// This function loads a definition from an external AST file.; ///; /// A definition with the same declaration will be looked up in the; /// index file which should be in the \p CrossTUDir directory, called; /// \p IndexName. In case the declaration is found in the index the; /// corresponding AST will be loaded. If the number of TUs imported; /// reaches \p CTULoadTreshold, no loading is performed.; ///; /// \return Returns a pointer to the ASTUnit that contains the definition of; /// the looked up name or an Error.; /// The returned pointer is never a nullptr.; ///; /// Note that the AST files should also be in the \p CrossTUDir.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:394,Performance,perform,performed,394,"/// This function loads a definition from an external AST file.; ///; /// A definition with the same declaration will be looked up in the; /// index file which should be in the \p CrossTUDir directory, called; /// \p IndexName. In case the declaration is found in the index the; /// corresponding AST will be loaded. If the number of TUs imported; /// reaches \p CTULoadTreshold, no loading is performed.; ///; /// \return Returns a pointer to the ASTUnit that contains the definition of; /// the looked up name or an Error.; /// The returned pointer is never a nullptr.; ///; /// Note that the AST files should also be in the \p CrossTUDir.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:230,Availability,error,error,230,/// This function merges a definition from a separate AST Unit into; /// the current one which was created by the compiler instance that; /// was passed to the constructor.; ///; /// \return Returns the resulting definition or an error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:62,Availability,error,errors,62,/// Emit diagnostics for the user for potential configuration errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:48,Deployability,configurat,configuration,48,/// Emit diagnostics for the user for potential configuration errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:48,Modifiability,config,configuration,48,/// Emit diagnostics for the user for potential configuration errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:183,Availability,error,error,183,"/// Returns the MacroExpansionContext for the imported TU to which the given; /// source-location corresponds.; /// \p ToLoc Source location in the imported-to AST.; /// \note If any error happens such as \p ToLoc is a non-imported; /// source-location, empty is returned.; /// \note Macro expansion tracking for imported TUs is not implemented yet.; /// It returns empty unconditionally.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:111,Availability,error,error,111,"/// Returns true if the given Decl is mapped (or created) during an import; /// but there was an unrecoverable error (the AST node cannot be erased, it; /// is marked with an Error object in this case).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:175,Availability,Error,Error,175,"/// Returns true if the given Decl is mapped (or created) during an import; /// but there was an unrecoverable error (the AST node cannot be erased, it; /// is marked with an Error object in this case).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:4,Performance,Load,Loads,4,/// Loads ASTUnits from AST-dumps or source-files.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:4,Performance,Load,Load,4,"/// Load the ASTUnit by its identifier found in the index file. If the; /// identifier is suffixed with '.ast' it is considered a dump. Otherwise; /// it is treated as source-file, and on-demand parsed. Relative paths are; /// prefixed with CTUDir.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:4,Performance,Load,Loads,4,/// Loads an AST from a pch-dump.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:4,Performance,Load,Loads,4,/// Loads an AST from a source-file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:27,Performance,load,loads,27,/// Maintain number of AST loads and check for reaching the load limit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:60,Performance,load,load,60,/// Maintain number of AST loads and check for reaching the load limit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:29,Performance,load,load,29,"/// Indicates, whether a new load operation is permitted, it is within the; /// threshold.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h:28,Performance,load,loaded,28,/// Tell that a new AST was loaded successfully.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CrossTU/CrossTranslationUnit.h
