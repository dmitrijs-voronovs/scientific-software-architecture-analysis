id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_p_mul_t_v-members.html:262,Modifiability,inherit,inherited,262,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::BaseMatrixLinearOpPMulTV Member List . This is the complete list of members for sofa::linearalgebra::BaseMatrixLinearOpPMulTV, including all inherited members. Index typedefsofa::linearalgebra::BaseMatrixLinearOpMV< true, true >; opDiagonal(const M *mat, V1 &result, const V2 &v)sofa::linearalgebra::BaseMatrixLinearOpMV< true, true >inlinestatic; opDynamic(const M *mat, V1 &result, const V2 &v)sofa::linearalgebra::BaseMatrixLinearOpMV< true, true >inlinestatic; opDynamicReal(const M *mat, V1 &result, const V2 &v, Index NL, Index NC, BaseMatrix::MatrixCategory category)sofa::linearalgebra::BaseMatrixLinearOpMV< true, true >inlinestatic; opDynamicRealDefault(const M *mat, V1 &result, const V2 &v, Index NL, Index NC, BaseMatrix::MatrixCategory)sofa::linearalgebra::BaseMatrixLinearOpMV< true, true >inlinestatic; opDynamicRealNL(const M *mat, V1 &result, const V2 &v, Index NC, BaseMatrix::MatrixCategory category)sofa::linearalgebra::BaseMatrixLinearOpMV< true, true >inlinestatic; opDynamicRealNLNC(const M *mat, V1 &result, const V2 &v, BaseMatrix::MatrixCategory category)sofa::linearalgebra::BaseMatrixLinearOpMV< true, true >inlinestatic; opFull(const M *mat, V1 &result, const V2 &v)sofa::linearalgebra::BaseMatrixLinearOpMV< true, true >inlinestatic; opIdentity(const M *mat, V1 &result, const V2 &v)sofa::linearalgebra::BaseMatrixLinearOpMV< true, true >inlinestatic. Generated on Mon Nov 11 2024 03:31:05 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_p_mul_t_v-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_p_mul_t_v-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_p_mul_t_v.html:380,Modifiability,inherit,inherited,380,"﻿. SOFA API: sofa::linearalgebra::BaseMatrixLinearOpPMulTV Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. List of all members . sofa::linearalgebra::BaseMatrixLinearOpPMulTV Class Reference . Inheritance diagram for sofa::linearalgebra::BaseMatrixLinearOpPMulTV:. [legend]. Additional Inherited Members;  Static Public Member Functions inherited from sofa::linearalgebra::BaseMatrixLinearOpMV< true, true >; static void opFull (const M *mat, V1 &result, const V2 &v);  ; static void opIdentity (const M *mat, V1 &result, const V2 &v);  ; static void opDiagonal (const M *mat, V1 &result, const V2 &v);  ; static void opDynamicRealDefault (const M *mat, V1 &result, const V2 &v, Index NL, Index NC, BaseMatrix::MatrixCategory);  ; static void opDynamicRealNLNC (const M *mat, V1 &result, const V2 &v, BaseMatrix::MatrixCategory category);  ; static void opDynamicRealNL (const M *mat, V1 &result, const V2 &v, Index NC, BaseMatrix::MatrixCategory category);  ; static void opDynamicReal (const M *mat, V1 &result, const V2 &v, Index NL, Index NC, BaseMatrix::MatrixCategory category);  ; static void opDynamic (const M *mat, V1 &result, const V2 &v);  . sofalinearalgebraBaseMatrixLinearOpPMulTV; Generated on Mon Nov 11 2024 03:31:05 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_p_mul_t_v.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_p_mul_t_v.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_p_mul_v-members.html:260,Modifiability,inherit,inherited,260,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::BaseMatrixLinearOpPMulV Member List . This is the complete list of members for sofa::linearalgebra::BaseMatrixLinearOpPMulV, including all inherited members. Index typedefsofa::linearalgebra::BaseMatrixLinearOpMV< true, false >; opDiagonal(const M *mat, V1 &result, const V2 &v)sofa::linearalgebra::BaseMatrixLinearOpMV< true, false >inlinestatic; opDynamic(const M *mat, V1 &result, const V2 &v)sofa::linearalgebra::BaseMatrixLinearOpMV< true, false >inlinestatic; opDynamicReal(const M *mat, V1 &result, const V2 &v, Index NL, Index NC, BaseMatrix::MatrixCategory category)sofa::linearalgebra::BaseMatrixLinearOpMV< true, false >inlinestatic; opDynamicRealDefault(const M *mat, V1 &result, const V2 &v, Index NL, Index NC, BaseMatrix::MatrixCategory)sofa::linearalgebra::BaseMatrixLinearOpMV< true, false >inlinestatic; opDynamicRealNL(const M *mat, V1 &result, const V2 &v, Index NC, BaseMatrix::MatrixCategory category)sofa::linearalgebra::BaseMatrixLinearOpMV< true, false >inlinestatic; opDynamicRealNLNC(const M *mat, V1 &result, const V2 &v, BaseMatrix::MatrixCategory category)sofa::linearalgebra::BaseMatrixLinearOpMV< true, false >inlinestatic; opFull(const M *mat, V1 &result, const V2 &v)sofa::linearalgebra::BaseMatrixLinearOpMV< true, false >inlinestatic; opIdentity(const M *mat, V1 &result, const V2 &v)sofa::linearalgebra::BaseMatrixLinearOpMV< true, false >inlinestatic. Generated on Mon Nov 11 2024 03:31:04 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_p_mul_v-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_p_mul_v-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_p_mul_v.html:377,Modifiability,inherit,inherited,377,"﻿. SOFA API: sofa::linearalgebra::BaseMatrixLinearOpPMulV Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. List of all members . sofa::linearalgebra::BaseMatrixLinearOpPMulV Class Reference . Inheritance diagram for sofa::linearalgebra::BaseMatrixLinearOpPMulV:. [legend]. Additional Inherited Members;  Static Public Member Functions inherited from sofa::linearalgebra::BaseMatrixLinearOpMV< true, false >; static void opFull (const M *mat, V1 &result, const V2 &v);  ; static void opIdentity (const M *mat, V1 &result, const V2 &v);  ; static void opDiagonal (const M *mat, V1 &result, const V2 &v);  ; static void opDynamicRealDefault (const M *mat, V1 &result, const V2 &v, Index NL, Index NC, BaseMatrix::MatrixCategory);  ; static void opDynamicRealNLNC (const M *mat, V1 &result, const V2 &v, BaseMatrix::MatrixCategory category);  ; static void opDynamicRealNL (const M *mat, V1 &result, const V2 &v, Index NC, BaseMatrix::MatrixCategory category);  ; static void opDynamicReal (const M *mat, V1 &result, const V2 &v, Index NL, Index NC, BaseMatrix::MatrixCategory category);  ; static void opDynamic (const M *mat, V1 &result, const V2 &v);  . sofalinearalgebraBaseMatrixLinearOpPMulV; Generated on Mon Nov 11 2024 03:31:04 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_p_mul_v.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix_linear_op_p_mul_v.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector-members.html:234,Modifiability,inherit,inherited,234,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::BaseVector Member List . This is the complete list of members for sofa::linearalgebra::BaseVector, including all inherited members. add(Index i, SReal v)=0sofa::linearalgebra::BaseVectorpure virtual; add(Index i0, Index n, const float *src)sofa::linearalgebra::BaseVectorinlinevirtual; add(Index i0, Index n, const double *src)sofa::linearalgebra::BaseVectorinlinevirtual; add(Index i0, Index n, const int *src)sofa::linearalgebra::BaseVectorinlinevirtual; addDefaultImpl(Index i0, Index n, const T *src)sofa::linearalgebra::BaseVectorinlineprotected; clear()=0sofa::linearalgebra::BaseVectorpure virtual; clear(Index i)sofa::linearalgebra::BaseVectorinlinevirtual; element(Index i) const =0sofa::linearalgebra::BaseVectorpure virtual; ELEMENT_FLOAT enum valuesofa::linearalgebra::BaseVector; ELEMENT_INT enum valuesofa::linearalgebra::BaseVector; ELEMENT_UNKNOWN enum valuesofa::linearalgebra::BaseVector; elements(Index i0, Index n, float *src) constsofa::linearalgebra::BaseVectorinlinevirtual; elements(Index i0, Index n, double *src) constsofa::linearalgebra::BaseVectorinlinevirtual; elements(Index i0, Index n, int *src) constsofa::linearalgebra::BaseVectorinlinevirtual; elementsDefaultImpl(Index i0, Index n, T *buffer) constsofa::linearalgebra::BaseVectorinlineprotected; ElementType enum namesofa::linearalgebra::BaseVector; getElementSize() constsofa::linearalgebra::BaseVectorinlinevirtual; getElementType() constsofa::linearalgebra::BaseVectorinlinevirtual; Index typedefsofa::linearalgebra::BaseVector; isFull() constsofa::linearalgebra::BaseVectorinlinevirtual; isSparse() constsofa::linearalgebra::BaseVectorinline; operator<<(std::ostream &out, const BaseVector &v)sofa::linearalgebra::BaseVectorfriend; resize(Index dim)=0sofa::linearalgebra::BaseVectorpure virtual; set(Index i, SReal v)=0sofa::linearalgebra::BaseVectorpure virtual; set(Index i0, Index n, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector-members.html:673,Usability,clear,clear,673," add(Index i, SReal v)=0sofa::linearalgebra::BaseVectorpure virtual; add(Index i0, Index n, const float *src)sofa::linearalgebra::BaseVectorinlinevirtual; add(Index i0, Index n, const double *src)sofa::linearalgebra::BaseVectorinlinevirtual; add(Index i0, Index n, const int *src)sofa::linearalgebra::BaseVectorinlinevirtual; addDefaultImpl(Index i0, Index n, const T *src)sofa::linearalgebra::BaseVectorinlineprotected; clear()=0sofa::linearalgebra::BaseVectorpure virtual; clear(Index i)sofa::linearalgebra::BaseVectorinlinevirtual; element(Index i) const =0sofa::linearalgebra::BaseVectorpure virtual; ELEMENT_FLOAT enum valuesofa::linearalgebra::BaseVector; ELEMENT_INT enum valuesofa::linearalgebra::BaseVector; ELEMENT_UNKNOWN enum valuesofa::linearalgebra::BaseVector; elements(Index i0, Index n, float *src) constsofa::linearalgebra::BaseVectorinlinevirtual; elements(Index i0, Index n, double *src) constsofa::linearalgebra::BaseVectorinlinevirtual; elements(Index i0, Index n, int *src) constsofa::linearalgebra::BaseVectorinlinevirtual; elementsDefaultImpl(Index i0, Index n, T *buffer) constsofa::linearalgebra::BaseVectorinlineprotected; ElementType enum namesofa::linearalgebra::BaseVector; getElementSize() constsofa::linearalgebra::BaseVectorinlinevirtual; getElementType() constsofa::linearalgebra::BaseVectorinlinevirtual; Index typedefsofa::linearalgebra::BaseVector; isFull() constsofa::linearalgebra::BaseVectorinlinevirtual; isSparse() constsofa::linearalgebra::BaseVectorinline; operator<<(std::ostream &out, const BaseVector &v)sofa::linearalgebra::BaseVectorfriend; resize(Index dim)=0sofa::linearalgebra::BaseVectorpure virtual; set(Index i, SReal v)=0sofa::linearalgebra::BaseVectorpure virtual; set(Index i0, Index n, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector-members.html:727,Usability,clear,clear,727," add(Index i, SReal v)=0sofa::linearalgebra::BaseVectorpure virtual; add(Index i0, Index n, const float *src)sofa::linearalgebra::BaseVectorinlinevirtual; add(Index i0, Index n, const double *src)sofa::linearalgebra::BaseVectorinlinevirtual; add(Index i0, Index n, const int *src)sofa::linearalgebra::BaseVectorinlinevirtual; addDefaultImpl(Index i0, Index n, const T *src)sofa::linearalgebra::BaseVectorinlineprotected; clear()=0sofa::linearalgebra::BaseVectorpure virtual; clear(Index i)sofa::linearalgebra::BaseVectorinlinevirtual; element(Index i) const =0sofa::linearalgebra::BaseVectorpure virtual; ELEMENT_FLOAT enum valuesofa::linearalgebra::BaseVector; ELEMENT_INT enum valuesofa::linearalgebra::BaseVector; ELEMENT_UNKNOWN enum valuesofa::linearalgebra::BaseVector; elements(Index i0, Index n, float *src) constsofa::linearalgebra::BaseVectorinlinevirtual; elements(Index i0, Index n, double *src) constsofa::linearalgebra::BaseVectorinlinevirtual; elements(Index i0, Index n, int *src) constsofa::linearalgebra::BaseVectorinlinevirtual; elementsDefaultImpl(Index i0, Index n, T *buffer) constsofa::linearalgebra::BaseVectorinlineprotected; ElementType enum namesofa::linearalgebra::BaseVector; getElementSize() constsofa::linearalgebra::BaseVectorinlinevirtual; getElementType() constsofa::linearalgebra::BaseVectorinlinevirtual; Index typedefsofa::linearalgebra::BaseVector; isFull() constsofa::linearalgebra::BaseVectorinlinevirtual; isSparse() constsofa::linearalgebra::BaseVectorinline; operator<<(std::ostream &out, const BaseVector &v)sofa::linearalgebra::BaseVectorfriend; resize(Index dim)=0sofa::linearalgebra::BaseVectorpure virtual; set(Index i, SReal v)=0sofa::linearalgebra::BaseVectorpure virtual; set(Index i0, Index n, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector.html:516,Security,access,accessing,516,"﻿. SOFA API: sofa::linearalgebra::BaseVector Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; Friends |; List of all members . sofa::linearalgebra::BaseVector Class Referenceabstract . #include <BaseVector.h>. Inheritance diagram for sofa::linearalgebra::BaseVector:. [legend]; Detailed Description; Generic vector API, allowing to fill and use a vector independently of the linear algebra library in use.; Note that accessing values using this class is rather slow and should only be used in codes where the provided genericity is necessary. . Public Member Functions; virtual ~BaseVector ();  ; virtual Index size (void) const =0;  Number of elements. More...;  ; virtual SReal element (Index i) const =0;  Read the value of element i. More...;  ; virtual void resize (Index dim)=0;  Resize the vector, and reset all values to 0. More...;  ; virtual void clear ()=0;  Reset all values to 0. More...;  ; virtual void set (Index i, SReal v)=0;  Write the value of element i. More...;  ; virtual void add (Index i, SReal v)=0;  Add v to the existing value of element i. More...;  ; virtual const float * elements (Index i0, Index n, float *src) const;  Get the values of n elements, starting at element i0, into given float buffer, or return the pointer to the data if the in-memory format is compatible. More...;  ; virtual const double * elements (Index i0, Index n, double *src) const;  Get the values of n elements, starting at element i0, into given double buffer, or return the pointer to the data if the in-memory format is compatible. More...;  ; virtual const int * elements (Index i0, Index n, int *src) const;  Get the values of n elements, starting at element i0, into given int buffer, or return the pointer to the data if the in-memory format is compatible. More...;  ; virtual void set (Index i0, Index n, const float *src);  Write the values of n float elements, starting at element i0. ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector.html:956,Usability,clear,clear,956,"﻿. SOFA API: sofa::linearalgebra::BaseVector Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; Friends |; List of all members . sofa::linearalgebra::BaseVector Class Referenceabstract . #include <BaseVector.h>. Inheritance diagram for sofa::linearalgebra::BaseVector:. [legend]; Detailed Description; Generic vector API, allowing to fill and use a vector independently of the linear algebra library in use.; Note that accessing values using this class is rather slow and should only be used in codes where the provided genericity is necessary. . Public Member Functions; virtual ~BaseVector ();  ; virtual Index size (void) const =0;  Number of elements. More...;  ; virtual SReal element (Index i) const =0;  Read the value of element i. More...;  ; virtual void resize (Index dim)=0;  Resize the vector, and reset all values to 0. More...;  ; virtual void clear ()=0;  Reset all values to 0. More...;  ; virtual void set (Index i, SReal v)=0;  Write the value of element i. More...;  ; virtual void add (Index i, SReal v)=0;  Add v to the existing value of element i. More...;  ; virtual const float * elements (Index i0, Index n, float *src) const;  Get the values of n elements, starting at element i0, into given float buffer, or return the pointer to the data if the in-memory format is compatible. More...;  ; virtual const double * elements (Index i0, Index n, double *src) const;  Get the values of n elements, starting at element i0, into given double buffer, or return the pointer to the data if the in-memory format is compatible. More...;  ; virtual const int * elements (Index i0, Index n, int *src) const;  Get the values of n elements, starting at element i0, into given int buffer, or return the pointer to the data if the in-memory format is compatible. More...;  ; virtual void set (Index i0, Index n, const float *src);  Write the values of n float elements, starting at element i0. ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector.html:2680,Usability,clear,clear,2680,"x n, int *src) const;  Get the values of n elements, starting at element i0, into given int buffer, or return the pointer to the data if the in-memory format is compatible. More...;  ; virtual void set (Index i0, Index n, const float *src);  Write the values of n float elements, starting at element i0. More...;  ; virtual void set (Index i0, Index n, const double *src);  Write the values of n double elements, starting at element i0. More...;  ; virtual void set (Index i0, Index n, const int *src);  Write the values of n int elements, starting at element i0. More...;  ; virtual void add (Index i0, Index n, const float *src);  Add to the values of n float elements, starting at element i0. More...;  ; virtual void add (Index i0, Index n, const double *src);  Add to the values of n double elements, starting at element i0. More...;  ; virtual void add (Index i0, Index n, const int *src);  Add to the values of n int elements, starting at element i0. More...;  ; virtual void clear (Index i);  Reset the value of element i to 0. More...;  . Protected Member Functions; template<class T > ; const T * elementsDefaultImpl (Index i0, Index n, T *buffer) const;  ; template<class T > ; void setDefaultImpl (Index i0, Index n, const T *src);  ; template<class T > ; void addDefaultImpl (Index i0, Index n, const T *src);  . Friends; SOFA_LINEARALGEBRA_API std::ostream & operator<< (std::ostream &out, const BaseVector &v);  Declare that the operator << exists but is defined in BaseVector.cpp. More...;  . Get information about the content and structure of this vector; enum  ElementType { ELEMENT_UNKNOWN = 0; , ELEMENT_FLOAT; , ELEMENT_INT; };  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual bool isFull () const;  Return true if this vector is full, i.a. all elements are stored in memory. More...;  ; bool isSparse () const;  . Constructor details. ◆ ~BaseVector(). virtual sofa::linearalgebra::BaseVector::~BaseVector ; (; ). inlinev",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector.html:4850,Usability,clear,clear,4850,"ing value of element i. ; Implemented in sofa::linearalgebra::FullVector< T >, sofa::linearalgebra::FullVector< Real >, sofa::linearalgebra::FullVector< SReal >, and sofa::linearalgebra::EigenVector< TReal, TBlockSize >. ◆ add() [2/4]. virtual void sofa::linearalgebra::BaseVector::add ; (; Index ; i0, . Index ; n, . const double * ; src . ). inlinevirtual . Add to the values of n double elements, starting at element i0. . ◆ add() [3/4]. virtual void sofa::linearalgebra::BaseVector::add ; (; Index ; i0, . Index ; n, . const float * ; src . ). inlinevirtual . Add to the values of n float elements, starting at element i0. . ◆ add() [4/4]. virtual void sofa::linearalgebra::BaseVector::add ; (; Index ; i0, . Index ; n, . const int * ; src . ). inlinevirtual . Add to the values of n int elements, starting at element i0. . ◆ addDefaultImpl(). template<class T > . void sofa::linearalgebra::BaseVector::addDefaultImpl ; (; Index ; i0, . Index ; n, . const T * ; src . ). inlineprotected . ◆ clear() [1/2]. virtual void sofa::linearalgebra::BaseVector::clear ; (; ). pure virtual . Reset all values to 0. ; Implemented in sofa::linearalgebra::FullVector< T >, sofa::linearalgebra::FullVector< Real >, sofa::linearalgebra::FullVector< SReal >, and sofa::linearalgebra::EigenVector< TReal, TBlockSize >. ◆ clear() [2/2]. virtual void sofa::linearalgebra::BaseVector::clear ; (; Index ; i). inlinevirtual . Reset the value of element i to 0. ; Reimplemented in sofa::linearalgebra::EigenVector< TReal, TBlockSize >, sofa::linearalgebra::FullVector< T >, sofa::linearalgebra::FullVector< Real >, and sofa::linearalgebra::FullVector< SReal >. ◆ element(). virtual SReal sofa::linearalgebra::BaseVector::element ; (; Index ; i); const. pure virtual . Read the value of element i. ; Implemented in sofa::linearalgebra::FullVector< T >, sofa::linearalgebra::FullVector< Real >, sofa::linearalgebra::FullVector< SReal >, and sofa::linearalgebra::EigenVector< TReal, TBlockSize >. ◆ elements() [1/3]. virtual",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector.html:4911,Usability,clear,clear,4911,"n sofa::linearalgebra::FullVector< T >, sofa::linearalgebra::FullVector< Real >, sofa::linearalgebra::FullVector< SReal >, and sofa::linearalgebra::EigenVector< TReal, TBlockSize >. ◆ add() [2/4]. virtual void sofa::linearalgebra::BaseVector::add ; (; Index ; i0, . Index ; n, . const double * ; src . ). inlinevirtual . Add to the values of n double elements, starting at element i0. . ◆ add() [3/4]. virtual void sofa::linearalgebra::BaseVector::add ; (; Index ; i0, . Index ; n, . const float * ; src . ). inlinevirtual . Add to the values of n float elements, starting at element i0. . ◆ add() [4/4]. virtual void sofa::linearalgebra::BaseVector::add ; (; Index ; i0, . Index ; n, . const int * ; src . ). inlinevirtual . Add to the values of n int elements, starting at element i0. . ◆ addDefaultImpl(). template<class T > . void sofa::linearalgebra::BaseVector::addDefaultImpl ; (; Index ; i0, . Index ; n, . const T * ; src . ). inlineprotected . ◆ clear() [1/2]. virtual void sofa::linearalgebra::BaseVector::clear ; (; ). pure virtual . Reset all values to 0. ; Implemented in sofa::linearalgebra::FullVector< T >, sofa::linearalgebra::FullVector< Real >, sofa::linearalgebra::FullVector< SReal >, and sofa::linearalgebra::EigenVector< TReal, TBlockSize >. ◆ clear() [2/2]. virtual void sofa::linearalgebra::BaseVector::clear ; (; Index ; i). inlinevirtual . Reset the value of element i to 0. ; Reimplemented in sofa::linearalgebra::EigenVector< TReal, TBlockSize >, sofa::linearalgebra::FullVector< T >, sofa::linearalgebra::FullVector< Real >, and sofa::linearalgebra::FullVector< SReal >. ◆ element(). virtual SReal sofa::linearalgebra::BaseVector::element ; (; Index ; i); const. pure virtual . Read the value of element i. ; Implemented in sofa::linearalgebra::FullVector< T >, sofa::linearalgebra::FullVector< Real >, sofa::linearalgebra::FullVector< SReal >, and sofa::linearalgebra::EigenVector< TReal, TBlockSize >. ◆ elements() [1/3]. virtual const double* sofa::linearalgebra::Ba",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector.html:5162,Usability,clear,clear,5162," n, . const double * ; src . ). inlinevirtual . Add to the values of n double elements, starting at element i0. . ◆ add() [3/4]. virtual void sofa::linearalgebra::BaseVector::add ; (; Index ; i0, . Index ; n, . const float * ; src . ). inlinevirtual . Add to the values of n float elements, starting at element i0. . ◆ add() [4/4]. virtual void sofa::linearalgebra::BaseVector::add ; (; Index ; i0, . Index ; n, . const int * ; src . ). inlinevirtual . Add to the values of n int elements, starting at element i0. . ◆ addDefaultImpl(). template<class T > . void sofa::linearalgebra::BaseVector::addDefaultImpl ; (; Index ; i0, . Index ; n, . const T * ; src . ). inlineprotected . ◆ clear() [1/2]. virtual void sofa::linearalgebra::BaseVector::clear ; (; ). pure virtual . Reset all values to 0. ; Implemented in sofa::linearalgebra::FullVector< T >, sofa::linearalgebra::FullVector< Real >, sofa::linearalgebra::FullVector< SReal >, and sofa::linearalgebra::EigenVector< TReal, TBlockSize >. ◆ clear() [2/2]. virtual void sofa::linearalgebra::BaseVector::clear ; (; Index ; i). inlinevirtual . Reset the value of element i to 0. ; Reimplemented in sofa::linearalgebra::EigenVector< TReal, TBlockSize >, sofa::linearalgebra::FullVector< T >, sofa::linearalgebra::FullVector< Real >, and sofa::linearalgebra::FullVector< SReal >. ◆ element(). virtual SReal sofa::linearalgebra::BaseVector::element ; (; Index ; i); const. pure virtual . Read the value of element i. ; Implemented in sofa::linearalgebra::FullVector< T >, sofa::linearalgebra::FullVector< Real >, sofa::linearalgebra::FullVector< SReal >, and sofa::linearalgebra::EigenVector< TReal, TBlockSize >. ◆ elements() [1/3]. virtual const double* sofa::linearalgebra::BaseVector::elements ; (; Index ; i0, . Index ; n, . double * ; src . ); const. inlinevirtual . Get the values of n elements, starting at element i0, into given double buffer, or return the pointer to the data if the in-memory format is compatible. . ◆ elements() [2/3]. virtu",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector.html:5223,Usability,clear,clear,5223,"al . Add to the values of n double elements, starting at element i0. . ◆ add() [3/4]. virtual void sofa::linearalgebra::BaseVector::add ; (; Index ; i0, . Index ; n, . const float * ; src . ). inlinevirtual . Add to the values of n float elements, starting at element i0. . ◆ add() [4/4]. virtual void sofa::linearalgebra::BaseVector::add ; (; Index ; i0, . Index ; n, . const int * ; src . ). inlinevirtual . Add to the values of n int elements, starting at element i0. . ◆ addDefaultImpl(). template<class T > . void sofa::linearalgebra::BaseVector::addDefaultImpl ; (; Index ; i0, . Index ; n, . const T * ; src . ). inlineprotected . ◆ clear() [1/2]. virtual void sofa::linearalgebra::BaseVector::clear ; (; ). pure virtual . Reset all values to 0. ; Implemented in sofa::linearalgebra::FullVector< T >, sofa::linearalgebra::FullVector< Real >, sofa::linearalgebra::FullVector< SReal >, and sofa::linearalgebra::EigenVector< TReal, TBlockSize >. ◆ clear() [2/2]. virtual void sofa::linearalgebra::BaseVector::clear ; (; Index ; i). inlinevirtual . Reset the value of element i to 0. ; Reimplemented in sofa::linearalgebra::EigenVector< TReal, TBlockSize >, sofa::linearalgebra::FullVector< T >, sofa::linearalgebra::FullVector< Real >, and sofa::linearalgebra::FullVector< SReal >. ◆ element(). virtual SReal sofa::linearalgebra::BaseVector::element ; (; Index ; i); const. pure virtual . Read the value of element i. ; Implemented in sofa::linearalgebra::FullVector< T >, sofa::linearalgebra::FullVector< Real >, sofa::linearalgebra::FullVector< SReal >, and sofa::linearalgebra::EigenVector< TReal, TBlockSize >. ◆ elements() [1/3]. virtual const double* sofa::linearalgebra::BaseVector::elements ; (; Index ; i0, . Index ; n, . double * ; src . ); const. inlinevirtual . Get the values of n elements, starting at element i0, into given double buffer, or return the pointer to the data if the in-memory format is compatible. . ◆ elements() [2/3]. virtual const float* sofa::linearalgebra::BaseVe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html:270,Modifiability,inherit,inherited,270,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::BlockDiagonalMatrix< LC, T > Member List . This is the complete list of members for sofa::linearalgebra::BlockDiagonalMatrix< LC, T >, including all inherited members. add(Index i, Index j, double v) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; add(Index row, Index col, double v)=0sofa::linearalgebra::BlockDiagonalMatrix< LC, T >; add(Index row, Index col, const type::Mat3x3d &_M)sofa::linearalgebra::BlockDiagonalMatrix< LC, T >; add(Index row, Index col, const type::Mat3x3f &_M)sofa::linearalgebra::BlockDiagonalMatrix< LC, T >; add(Index row, Index col, const type::Mat2x2d &_M)sofa::linearalgebra::BlockDiagonalMatrix< LC, T >; add(Index row, Index col, const type::Mat2x2f &_M)sofa::linearalgebra::BlockDiagonalMatrix< LC, T >; add(Index row, Index col, const type::Mat6x6d &_M)sofa::linearalgebra::BlockDiagonalMatrix< LC, T >; add(Index row, Index col, const type::Mat6x6f &_M)sofa::linearalgebra::BlockDiagonalMatrix< LC, T >; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat3x3d &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat3x3f &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat2x2d &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat2x2f &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat6x6d &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat6x6f &_M)sofa::linearalgebra::BaseMatrixvirtual; addB(Index i, const Block &b)sofa::linearalgebra::BlockDiagonalMatrix< LC, T >inline; addB(Index i, Index j, const Block &b)sofa::linearalgebra::BlockDiagonalMatrix< LC, T >inl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html:6288,Usability,clear,clear,6288,"gebra::BaseMatrixinline; blocGet(Index i, Index j) constsofa::linearalgebra::BaseMatrixinlinevirtual; blocGetW(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; Block typedefsofa::linearalgebra::BlockDiagonalMatrix< LC, T >; BlockDiagonalMatrix()sofa::linearalgebra::BlockDiagonalMatrix< LC, T >inline; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; BSIZE enum valuesofa::linearalgebra::BlockDiagonalMatrix< LC, T >; category enum valuesofa::linearalgebra::BlockDiagonalMatrix< LC, T >; clear(Index i, Index j) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clear() overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearCol(Index j) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearRowCol(Index i) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; colBSize(void) constsofa::linearalgebra::BlockDiagonalMatrix< LC, T >inline; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html:6384,Usability,clear,clear,6384,"tual; blocGetW(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; Block typedefsofa::linearalgebra::BlockDiagonalMatrix< LC, T >; BlockDiagonalMatrix()sofa::linearalgebra::BlockDiagonalMatrix< LC, T >inline; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; BSIZE enum valuesofa::linearalgebra::BlockDiagonalMatrix< LC, T >; category enum valuesofa::linearalgebra::BlockDiagonalMatrix< LC, T >; clear(Index i, Index j) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clear() overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearCol(Index j) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearRowCol(Index i) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; colBSize(void) constsofa::linearalgebra::BlockDiagonalMatrix< LC, T >inline; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html:6464,Usability,clear,clearCol,6464,"ck typedefsofa::linearalgebra::BlockDiagonalMatrix< LC, T >; BlockDiagonalMatrix()sofa::linearalgebra::BlockDiagonalMatrix< LC, T >inline; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; BSIZE enum valuesofa::linearalgebra::BlockDiagonalMatrix< LC, T >; category enum valuesofa::linearalgebra::BlockDiagonalMatrix< LC, T >; clear(Index i, Index j) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clear() overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearCol(Index j) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearRowCol(Index i) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; colBSize(void) constsofa::linearalgebra::BlockDiagonalMatrix< LC, T >inline; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlinepro",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html:6554,Usability,clear,clearCols,6554,"earalgebra::BlockDiagonalMatrix< LC, T >inline; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; BSIZE enum valuesofa::linearalgebra::BlockDiagonalMatrix< LC, T >; category enum valuesofa::linearalgebra::BlockDiagonalMatrix< LC, T >; clear(Index i, Index j) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clear() overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearCol(Index j) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearRowCol(Index i) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; colBSize(void) constsofa::linearalgebra::BlockDiagonalMatrix< LC, T >inline; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsof",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html:6633,Usability,clear,clearRow,6633,"t T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; BSIZE enum valuesofa::linearalgebra::BlockDiagonalMatrix< LC, T >; category enum valuesofa::linearalgebra::BlockDiagonalMatrix< LC, T >; clear(Index i, Index j) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clear() overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearCol(Index j) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearRowCol(Index i) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; colBSize(void) constsofa::linearalgebra::BlockDiagonalMatrix< LC, T >inline; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html:6723,Usability,clear,clearRowCol,6723,"bra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; BSIZE enum valuesofa::linearalgebra::BlockDiagonalMatrix< LC, T >; category enum valuesofa::linearalgebra::BlockDiagonalMatrix< LC, T >; clear(Index i, Index j) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clear() overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearCol(Index j) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearRowCol(Index i) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; colBSize(void) constsofa::linearalgebra::BlockDiagonalMatrix< LC, T >inline; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; creat",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html:6816,Usability,clear,clearRows,6816,"rtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; BSIZE enum valuesofa::linearalgebra::BlockDiagonalMatrix< LC, T >; category enum valuesofa::linearalgebra::BlockDiagonalMatrix< LC, T >; clear(Index i, Index j) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clear() overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearCol(Index j) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearRowCol(Index i) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; colBSize(void) constsofa::linearalgebra::BlockDiagonalMatrix< LC, T >inline; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, void *internalPtr) constsofa::linearalgebra::BaseMatrixinl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html:6895,Usability,clear,clearRowsCols,6895,"wsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; BSIZE enum valuesofa::linearalgebra::BlockDiagonalMatrix< LC, T >; category enum valuesofa::linearalgebra::BlockDiagonalMatrix< LC, T >; clear(Index i, Index j) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clear() overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearCol(Index j) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearRowCol(Index i) overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; colBSize(void) constsofa::linearalgebra::BlockDiagonalMatrix< LC, T >inline; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::BlockDiagonalMatrix< LC, T >inlinevirtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, void *internalPtr) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, Index internalData) constsof",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:3693,Modifiability,inherit,inherited,3693,"btain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain bet",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:10272,Modifiability,inherit,inherited,10272,,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:14695,Modifiability,inherit,inherited,14695,"tor *it, const InternalColBlockIterator *it2) const;  ; ColBlockConstIterator createColBlockConstIterator (Index row, void *internalPtr) const;  ; ColBlockConstIterator createColBlockConstIterator (Index row, Index internalData) const;  ; virtual void itCopyRowBlock (InternalRowBlockIterator *) const;  ; virtual void itDeleteRowBlock (const InternalRowBlockIterator *) const;  ; virtual Index itAccessRowBlock (InternalRowBlockIterator *it) const;  ; virtual ColBlockConstIterator itBeginRowBlock (InternalRowBlockIterator *it) const;  ; virtual ColBlockConstIterator itEndRowBlock (InternalRowBlockIterator *it) const;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > itRangeRowBlock (InternalRowBlockIterator *it) const;  ; virtual void itIncRowBlock (InternalRowBlockIterator *it) const;  ; virtual void itDecRowBlock (InternalRowBlockIterator *it) const;  ; virtual bool itEqRowBlock (const InternalRowBlockIterator *it, const InternalRowBlockIterator *it2) const;  ; virtual bool itLessRowBlock (const InternalRowBlockIterator *it, const InternalRowBlockIterator *it2) const;  ; RowBlockConstIterator createRowBlockConstIterator (void *internalPtr) const;  ; RowBlockConstIterator createRowBlockConstIterator (Index internalData0, Index internalData1) const;  ;  Static Protected Member Functions inherited from sofa::linearalgebra::BaseMatrix; static InternalBlockAccessor * getInternal (BlockConstAccessor *b);  ; static const InternalBlockAccessor * getInternal (const BlockConstAccessor *b);  ; static InternalBlockAccessor * getInternal (BlockAccessor *b);  ; static const InternalBlockAccessor * getInternal (const BlockAccessor *b);  ; static InternalColBlockIterator * getInternal (ColBlockConstIterator *b);  ; static const InternalColBlockIterator * getInternal (const ColBlockConstIterator *b);  ; static InternalRowBlockIterator * getInternal (RowBlockConstIterator *b);  ; static const InternalRowBlockIterator * getInternal (const RowBlockConstIterator *b);  .",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:2772,Performance,perform,performances,2772,"olumn j (using 0-based indices) More...;  ; void addB (Index i, const Block &b);  ; void addB (Index i, Index j, const Block &b);  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; void invert ();  ; template<class Real2 > ; void mul (FullVector< Real2 > &res, const FullVector< Real2 > &v) const;  ; template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ()",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:2946,Performance,perform,performances,2946,"; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; void invert ();  ; template<class Real2 > ; void mul (FullVector< Real2 > &res, const FullVector< Real2 > &v) const;  ; template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API)",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:3120,Performance,perform,performances,3120,"d clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; void invert ();  ; template<class Real2 > ; void mul (FullVector< Real2 > &res, const FullVector< Real2 > &v) const;  ; template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:3294,Performance,perform,performances,3294,"emplate<class Real2 > ; void mul (FullVector< Real2 > &res, const FullVector< Real2 > &v) const;  ; template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:3468,Performance,perform,performances,3468,"Real2 > &v) const;  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:3642,Performance,perform,performances,3642,"virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:4242,Performance,perform,performances,4242,"es from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:4416,Performance,perform,performances,4416,"es from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index i",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:4590,Performance,perform,performances,4590,"es from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *resul",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:4764,Performance,perform,performances,4764,"Matrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const floa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:4938,Performance,perform,performances,4938,"ible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply th",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:5112,Performance,perform,performances,5112,"virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) cons",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:16559,Performance,perform,performances,16559,"plate<std::size_t LC, typename T = SReal> . std::vector< Block > sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::data. protected . Constructor details. ◆ BlockDiagonalMatrix(). template<std::size_t LC, typename T = SReal> . sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::BlockDiagonalMatrix ; (; ). inline . ◆ ~BlockDiagonalMatrix(). template<std::size_t LC, typename T = SReal> . sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::~BlockDiagonalMatrix ; (; ). inlineoverride . Function details. ◆ add() [1/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::add ; (; Index ; row, . Index ; col, . double ; v . ). inlineoverridevirtual . Add v to the existing value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ add() [2/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [3/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [4/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:16655,Performance,perform,performances,16655,"gebra::BlockDiagonalMatrix< LC, T >::data. protected . Constructor details. ◆ BlockDiagonalMatrix(). template<std::size_t LC, typename T = SReal> . sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::BlockDiagonalMatrix ; (; ). inline . ◆ ~BlockDiagonalMatrix(). template<std::size_t LC, typename T = SReal> . sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::~BlockDiagonalMatrix ; (; ). inlineoverride . Function details. ◆ add() [1/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::add ; (; Index ; row, . Index ; col, . double ; v . ). inlineoverridevirtual . Add v to the existing value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ add() [2/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [3/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [4/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [6/8]. template<std::size_t LC, typename T = SR",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:16857,Performance,perform,performances,16857,"; (; ). inline . ◆ ~BlockDiagonalMatrix(). template<std::size_t LC, typename T = SReal> . sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::~BlockDiagonalMatrix ; (; ). inlineoverride . Function details. ◆ add() [1/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::add ; (; Index ; row, . Index ; col, . double ; v . ). inlineoverridevirtual . Add v to the existing value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ add() [2/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [3/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [4/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [6/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [7/8]. template<std::size_t LC, typename T = SReal> . void sofa::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:16953,Performance,perform,performances,16953,"= SReal> . sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::~BlockDiagonalMatrix ; (; ). inlineoverride . Function details. ◆ add() [1/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::add ; (; Index ; row, . Index ; col, . double ; v . ). inlineoverridevirtual . Add v to the existing value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ add() [2/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [3/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [4/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [6/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [7/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This functio",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:17155,Performance,perform,performances,17155,"DiagonalMatrix< LC, T >::add ; (; Index ; row, . Index ; col, . double ; v . ). inlineoverridevirtual . Add v to the existing value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ add() [2/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [3/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [4/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [6/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [7/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [8/8]. template<std::size_t LC, typename T = SReal> . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, col",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:17251,Performance,perform,performances,17251," inlineoverridevirtual . Add v to the existing value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ add() [2/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [3/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [4/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [6/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [7/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [8/8]. template<std::size_t LC, typename T = SReal> . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ addB() [1/2]. template<std::size_t LC, typen",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:17453,Performance,perform,performances,17453,"void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [3/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [4/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [6/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [7/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [8/8]. template<std::size_t LC, typename T = SReal> . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ addB() [1/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::addB ; (; Index ; i, . const Block & ; b . ). inline . ◆ addB() [2/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::Blo",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:17549,Performance,perform,performances,17549,"is function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [3/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [4/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [6/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [7/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [8/8]. template<std::size_t LC, typename T = SReal> . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ addB() [1/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::addB ; (; Index ; i, . const Block & ; b . ). inline . ◆ addB() [2/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::addB ; (; Index ; i, . Index ; j, . const Block & ;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:17751,Performance,perform,performances,17751,"void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [4/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [6/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [7/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [8/8]. template<std::size_t LC, typename T = SReal> . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ addB() [1/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::addB ; (; Index ; i, . const Block & ; b . ). inline . ◆ addB() [2/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::addB ; (; Index ; i, . Index ; j, . const Block & ; b . ). inline . ◆ bloc() [1/2]. template<std::size_t LC, typename T = SReal> . const Block& sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::bloc ; (; Index ; i); const. inline . ◆ bloc() [2/2]. template<std::size_t L",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:17953,Performance,perform,performances,17953," to obtain better performances. . ◆ add() [4/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [6/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [7/8]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [8/8]. template<std::size_t LC, typename T = SReal> . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ addB() [1/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::addB ; (; Index ; i, . const Block & ; b . ). inline . ◆ addB() [2/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::addB ; (; Index ; i, . Index ; j, . const Block & ; b . ). inline . ◆ bloc() [1/2]. template<std::size_t LC, typename T = SReal> . const Block& sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::bloc ; (; Index ; i); const. inline . ◆ bloc() [2/2]. template<std::size_t LC, typename T = SReal> . const Block& sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::bloc ; (; Index ; i, . Index ; j . ); const. inline . ◆ clear() [1/2]. template<std::size_t LC, typename T = SRea",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:8499,Security,access,access,8499,"st;  Multiply the transposed matrix by float vector v and add the result in vector result. More...;  ; virtual void opPMulTV (double *result, const double *v) const;  Multiply the transposed matrix by double vector v and add the result in vector result. More...;  ; virtual void opMulTM (BaseMatrix *result, BaseMatrix *m) const;  Multiply the transposed matrix by matrix m and store the result in matrix result. More...;  ; virtual void opAddM (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the matrix to the m matrix and strore the result in m. More...;  ; virtual void opAddMT (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the transposed matrix to the m matrix and strore the result in m. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual MatrixCategory getCategory () const;  ; virtual Index getBlockRows () const;  ; virtual Index getBlockCols () const;  ; virtual Index bRowSize () const;  ; virtual Index bColSize () const;  ; virtual Index getBandWidth () const;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  ; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the give",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:8592,Security,access,access,8592,"const;  Multiply the transposed matrix by matrix m and store the result in matrix result. More...;  ; virtual void opAddM (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the matrix to the m matrix and strore the result in m. More...;  ; virtual void opAddMT (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the transposed matrix to the m matrix and strore the result in m. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual MatrixCategory getCategory () const;  ; virtual Index getBlockRows () const;  ; virtual Index getBlockCols () const;  ; virtual Index bRowSize () const;  ; virtual Index bColSize () const;  ; virtual Index getBandWidth () const;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  ; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the given row of blocks. More...;  ; virtual ColBlockConstIterator bRowEnd (Index ib) const;  Get the iterator corresponding to the end of the given row of blocks. More...;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > bRowRange (Index ib) const;  Get the iterators corresponding to the beginning and end of ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:8687,Security,access,access,8687,"tual void opAddM (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the matrix to the m matrix and strore the result in m. More...;  ; virtual void opAddMT (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the transposed matrix to the m matrix and strore the result in m. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual MatrixCategory getCategory () const;  ; virtual Index getBlockRows () const;  ; virtual Index getBlockCols () const;  ; virtual Index bRowSize () const;  ; virtual Index bColSize () const;  ; virtual Index getBandWidth () const;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  ; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the given row of blocks. More...;  ; virtual ColBlockConstIterator bRowEnd (Index ib) const;  Get the iterator corresponding to the end of the given row of blocks. More...;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > bRowRange (Index ib) const;  Get the iterators corresponding to the beginning and end of the given row of blocks. More...;  ; virtual RowBlockConstIterator bRowsBegin () const;  Get the iterator",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:1892,Usability,clear,clear,1892,"atrix and reset all values to 0. More...;  ; Index rowSize (void) const override;  Number of rows. More...;  ; Index colSize (void) const override;  Number of columns. More...;  ; Index rowBSize (void) const;  ; Index colBSize (void) const;  ; const Block & bloc (Index i) const;  ; const Block & bloc (Index i, Index j) const;  ; Block * wbloc (Index i);  ; Block * wbloc (Index i, Index j);  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void setB (Index i, const Block &b);  ; void setB (Index i, Index j, const Block &b);  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void addB (Index i, const Block &b);  ; void addB (Index i, Index j, const Block &b);  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; void invert ();  ; template<class Real2 > ; void mul (FullVector< Real2 > &res, const FullVector< Real2 > &v) const;  ; template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:1935,Usability,clear,clearRow,1935,"atrix and reset all values to 0. More...;  ; Index rowSize (void) const override;  Number of rows. More...;  ; Index colSize (void) const override;  Number of columns. More...;  ; Index rowBSize (void) const;  ; Index colBSize (void) const;  ; const Block & bloc (Index i) const;  ; const Block & bloc (Index i, Index j) const;  ; Block * wbloc (Index i);  ; Block * wbloc (Index i, Index j);  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void setB (Index i, const Block &b);  ; void setB (Index i, Index j, const Block &b);  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void addB (Index i, const Block &b);  ; void addB (Index i, Index j, const Block &b);  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; void invert ();  ; template<class Real2 > ; void mul (FullVector< Real2 > &res, const FullVector< Real2 > &v) const;  ; template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:2018,Usability,clear,clearCol,2018,"mber of columns. More...;  ; Index rowBSize (void) const;  ; Index colBSize (void) const;  ; const Block & bloc (Index i) const;  ; const Block & bloc (Index i, Index j) const;  ; Block * wbloc (Index i);  ; Block * wbloc (Index i, Index j);  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void setB (Index i, const Block &b);  ; void setB (Index i, Index j, const Block &b);  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void addB (Index i, const Block &b);  ; void addB (Index i, Index j, const Block &b);  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; void invert ();  ; template<class Real2 > ; void mul (FullVector< Real2 > &res, const FullVector< Real2 > &v) const;  ; template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:2104,Usability,clear,clearRowCol,2104,"; const Block & bloc (Index i) const;  ; const Block & bloc (Index i, Index j) const;  ; Block * wbloc (Index i);  ; Block * wbloc (Index i, Index j);  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void setB (Index i, const Block &b);  ; void setB (Index i, Index j, const Block &b);  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void addB (Index i, const Block &b);  ; void addB (Index i, Index j, const Block &b);  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; void invert ();  ; template<class Real2 > ; void mul (FullVector< Real2 > &res, const FullVector< Real2 > &v) const;  ; template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:2201,Usability,clear,clear,2201,"const;  ; Block * wbloc (Index i);  ; Block * wbloc (Index i, Index j);  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void setB (Index i, const Block &b);  ; void setB (Index i, Index j, const Block &b);  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void addB (Index i, const Block &b);  ; void addB (Index i, Index j, const Block &b);  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; void invert ();  ; template<class Real2 > ; void mul (FullVector< Real2 > &res, const FullVector< Real2 > &v) const;  ; template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Addi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:5151,Usability,clear,clearRows,5151,"a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:5254,Usability,clear,clearCols,5254,"ndex row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; virtual void opPMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and add t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:5365,Usability,clear,clearRowsCols,5365,"ter performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; virtual void opPMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and add the result in vector result. More...;  ; virtual void opPMulV (double *result, const double *v) const;  Multiply the matrix by",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:18879,Usability,clear,clear,18879,"s from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [8/8]. template<std::size_t LC, typename T = SReal> . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ addB() [1/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::addB ; (; Index ; i, . const Block & ; b . ). inline . ◆ addB() [2/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::addB ; (; Index ; i, . Index ; j, . const Block & ; b . ). inline . ◆ bloc() [1/2]. template<std::size_t LC, typename T = SReal> . const Block& sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::bloc ; (; Index ; i); const. inline . ◆ bloc() [2/2]. template<std::size_t LC, typename T = SReal> . const Block& sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::bloc ; (; Index ; i, . Index ; j . ); const. inline . ◆ clear() [1/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clear ; (; ). inlineoverridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clear ; (; Index ; i, . Index ; j . ). inlineoverridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearCol ; (; Index ; j). inlineoverridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearRow ; (; Index ; i). inlineoverridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:18997,Usability,clear,clear,18997,") [8/8]. template<std::size_t LC, typename T = SReal> . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ addB() [1/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::addB ; (; Index ; i, . const Block & ; b . ). inline . ◆ addB() [2/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::addB ; (; Index ; i, . Index ; j, . const Block & ; b . ). inline . ◆ bloc() [1/2]. template<std::size_t LC, typename T = SReal> . const Block& sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::bloc ; (; Index ; i); const. inline . ◆ bloc() [2/2]. template<std::size_t LC, typename T = SReal> . const Block& sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::bloc ; (; Index ; i, . Index ; j . ); const. inline . ◆ clear() [1/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clear ; (; ). inlineoverridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clear ; (; Index ; i, . Index ; j . ). inlineoverridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearCol ; (; Index ; j). inlineoverridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearRow ; (; Index ; i). inlineoverridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:19106,Usability,clear,clear,19106,"f the element at row i, column j (using 0-based indices) . ◆ addB() [1/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::addB ; (; Index ; i, . const Block & ; b . ). inline . ◆ addB() [2/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::addB ; (; Index ; i, . Index ; j, . const Block & ; b . ). inline . ◆ bloc() [1/2]. template<std::size_t LC, typename T = SReal> . const Block& sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::bloc ; (; Index ; i); const. inline . ◆ bloc() [2/2]. template<std::size_t LC, typename T = SReal> . const Block& sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::bloc ; (; Index ; i, . Index ; j . ); const. inline . ◆ clear() [1/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clear ; (; ). inlineoverridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clear ; (; Index ; i, . Index ; j . ). inlineoverridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearCol ; (; Index ; j). inlineoverridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearRow ; (; Index ; i). inlineoverridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalg",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:19224,Usability,clear,clear,19224,"LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::addB ; (; Index ; i, . const Block & ; b . ). inline . ◆ addB() [2/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::addB ; (; Index ; i, . Index ; j, . const Block & ; b . ). inline . ◆ bloc() [1/2]. template<std::size_t LC, typename T = SReal> . const Block& sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::bloc ; (; Index ; i); const. inline . ◆ bloc() [2/2]. template<std::size_t LC, typename T = SReal> . const Block& sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::bloc ; (; Index ; i, . Index ; j . ); const. inline . ◆ clear() [1/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clear ; (; ). inlineoverridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clear ; (; Index ; i, . Index ; j . ). inlineoverridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearCol ; (; Index ; j). inlineoverridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearRow ; (; Index ; i). inlineoverridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colBSize(). template<std::size_t LC, typename T = SReal> . Index sofa::line",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:19341,Usability,clear,clearCol,19341," addB() [2/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::addB ; (; Index ; i, . Index ; j, . const Block & ; b . ). inline . ◆ bloc() [1/2]. template<std::size_t LC, typename T = SReal> . const Block& sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::bloc ; (; Index ; i); const. inline . ◆ bloc() [2/2]. template<std::size_t LC, typename T = SReal> . const Block& sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::bloc ; (; Index ; i, . Index ; j . ); const. inline . ◆ clear() [1/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clear ; (; ). inlineoverridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clear ; (; Index ; i, . Index ; j . ). inlineoverridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearCol ; (; Index ; j). inlineoverridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearRow ; (; Index ; i). inlineoverridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colBSize(). template<std::size_t LC, typename T = SReal> . Index sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::colBSize ; (; void ; ); const. inline . ◆ colSize(). template<std::size_t LC, typename T = SReal>",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:19456,Usability,clear,clearCol,19456,"agonalMatrix< LC, T >::addB ; (; Index ; i, . Index ; j, . const Block & ; b . ). inline . ◆ bloc() [1/2]. template<std::size_t LC, typename T = SReal> . const Block& sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::bloc ; (; Index ; i); const. inline . ◆ bloc() [2/2]. template<std::size_t LC, typename T = SReal> . const Block& sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::bloc ; (; Index ; i, . Index ; j . ); const. inline . ◆ clear() [1/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clear ; (; ). inlineoverridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clear ; (; Index ; i, . Index ; j . ). inlineoverridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearCol ; (; Index ; j). inlineoverridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearRow ; (; Index ; i). inlineoverridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colBSize(). template<std::size_t LC, typename T = SReal> . Index sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::colBSize ; (; void ; ); const. inline . ◆ colSize(). template<std::size_t LC, typename T = SReal> . Index sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::colSize ; (; void ; ); const. inlin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:19601,Usability,clear,clearRow,19601,"& sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::bloc ; (; Index ; i); const. inline . ◆ bloc() [2/2]. template<std::size_t LC, typename T = SReal> . const Block& sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::bloc ; (; Index ; i, . Index ; j . ); const. inline . ◆ clear() [1/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clear ; (; ). inlineoverridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clear ; (; Index ; i, . Index ; j . ). inlineoverridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearCol ; (; Index ; j). inlineoverridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearRow ; (; Index ; i). inlineoverridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colBSize(). template<std::size_t LC, typename T = SReal> . Index sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::colBSize ; (; void ; ); const. inline . ◆ colSize(). template<std::size_t LC, typename T = SReal> . Index sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::colSize ; (; void ; ); const. inlineoverridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ element(). template<std::size_t LC, typename T = SReal> . SReal sofa::linearalg",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:19716,Usability,clear,clearRow,19716,"oc() [2/2]. template<std::size_t LC, typename T = SReal> . const Block& sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::bloc ; (; Index ; i, . Index ; j . ); const. inline . ◆ clear() [1/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clear ; (; ). inlineoverridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clear ; (; Index ; i, . Index ; j . ). inlineoverridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearCol ; (; Index ; j). inlineoverridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearRow ; (; Index ; i). inlineoverridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colBSize(). template<std::size_t LC, typename T = SReal> . Index sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::colBSize ; (; void ; ); const. inline . ◆ colSize(). template<std::size_t LC, typename T = SReal> . Index sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::colSize ; (; void ; ); const. inlineoverridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ element(). template<std::size_t LC, typename T = SReal> . SReal sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::element ; (; Index ; i, . Index ; j . ); const. inlineoverr",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:19858,Usability,clear,clearRowCol,19858,"nst. inline . ◆ clear() [1/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clear ; (; ). inlineoverridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clear ; (; Index ; i, . Index ; j . ). inlineoverridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearCol ; (; Index ; j). inlineoverridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearRow ; (; Index ; i). inlineoverridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colBSize(). template<std::size_t LC, typename T = SReal> . Index sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::colBSize ; (; void ; ); const. inline . ◆ colSize(). template<std::size_t LC, typename T = SReal> . Index sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::colSize ; (; void ; ); const. inlineoverridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ element(). template<std::size_t LC, typename T = SReal> . SReal sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::element ; (; Index ; i, . Index ; j . ); const. inlineoverridevirtual . Read the value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ invert(). template<std::size_t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html:19976,Usability,clear,clearRowCol,19976,"ebra::BlockDiagonalMatrix< LC, T >::clear ; (; ). inlineoverridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clear ; (; Index ; i, . Index ; j . ). inlineoverridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearCol ; (; Index ; j). inlineoverridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearRow ; (; Index ; i). inlineoverridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colBSize(). template<std::size_t LC, typename T = SReal> . Index sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::colBSize ; (; void ; ); const. inline . ◆ colSize(). template<std::size_t LC, typename T = SReal> . Index sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::colSize ; (; void ; ); const. inlineoverridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ element(). template<std::size_t LC, typename T = SReal> . SReal sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::element ; (; Index ; i, . Index ; j . ); const. inlineoverridevirtual . Read the value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ invert(). template<std::size_t LC, typename T = SReal> . void sofa::linearalgebra::BlockDiagonalMatrix< LC, T >::invert ; (; ). ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html:260,Modifiability,inherit,inherited,260,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::BlockFullMatrix< N, T > Member List . This is the complete list of members for sofa::linearalgebra::BlockFullMatrix< N, T >, including all inherited members. add(Index i, Index j, double v) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat3x3d &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat3x3f &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat2x2d &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat2x2f &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat6x6d &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat6x6f &_M)sofa::linearalgebra::BaseMatrixvirtual; allocsizesofa::linearalgebra::BlockFullMatrix< N, T >protected; asub(Index bi, Index bj, Index, Index) constsofa::linearalgebra::BlockFullMatrix< N, T >; asub(Index bi, Index bj, Index, Index)sofa::linearalgebra::BlockFullMatrix< N, T >; bAccessorAdd(InternalBlockAccessor *b, Index i, Index j, double v)sofa::linearalgebra::BaseMatrixinlineprotectedvirtual; bAccessorAdd(InternalBlockAccessor *b, const float *buffer)sofa::linearalgebra::BaseMatrixinlineprotectedvirtual; bAccessorAdd(InternalBlockAccessor *b, const double *buffer)sofa::linearalgebra::BaseMatrixinlineprotectedvirtual; bAccessorAdd(InternalBlockAccessor *b, const int *buffer)sofa::linearalgebra::BaseMatrixinlineprotectedvirtual; bAccessorAddDefaultImpl(InternalBlockAccessor *b, const T *buffer)sofa::linearalgebra::BaseMatrixinlineprotected; bAccessorCopy(InternalBlockAccessor *) constsofa::linearalgebra::BaseMatrixin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html:5548,Usability,clear,clear,5548,"tual; blocElements(Index i, Index j, T *buffer) constsofa::linearalgebra::BaseMatrixinline; blocGet(Index i, Index j) constsofa::linearalgebra::BaseMatrixinlinevirtual; blocGetW(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; BlockFullMatrix()sofa::linearalgebra::BlockFullMatrix< N, T >; BlockFullMatrix(Index nbRow, Index nbCol)sofa::linearalgebra::BlockFullMatrix< N, T >; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; BSIZE enum valuesofa::linearalgebra::BlockFullMatrix< N, T >; clear(Index i, Index j) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clear() overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearCol(Index j) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearRowCol(Index i) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html:5633,Usability,clear,clear,5633,"nline; blocGet(Index i, Index j) constsofa::linearalgebra::BaseMatrixinlinevirtual; blocGetW(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; BlockFullMatrix()sofa::linearalgebra::BlockFullMatrix< N, T >; BlockFullMatrix(Index nbRow, Index nbCol)sofa::linearalgebra::BlockFullMatrix< N, T >; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; BSIZE enum valuesofa::linearalgebra::BlockFullMatrix< N, T >; clear(Index i, Index j) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clear() overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearCol(Index j) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearRowCol(Index i) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html:5702,Usability,clear,clearCol,5702,"nlinevirtual; blocGetW(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; BlockFullMatrix()sofa::linearalgebra::BlockFullMatrix< N, T >; BlockFullMatrix(Index nbRow, Index nbCol)sofa::linearalgebra::BlockFullMatrix< N, T >; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; BSIZE enum valuesofa::linearalgebra::BlockFullMatrix< N, T >; clear(Index i, Index j) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clear() overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearCol(Index j) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearRowCol(Index i) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html:5781,Usability,clear,clearCols,5781,"tual; BlockFullMatrix()sofa::linearalgebra::BlockFullMatrix< N, T >; BlockFullMatrix(Index nbRow, Index nbCol)sofa::linearalgebra::BlockFullMatrix< N, T >; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; BSIZE enum valuesofa::linearalgebra::BlockFullMatrix< N, T >; clear(Index i, Index j) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clear() overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearCol(Index j) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearRowCol(Index i) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html:5860,Usability,clear,clearRow,5860,"Matrix(Index nbRow, Index nbCol)sofa::linearalgebra::BlockFullMatrix< N, T >; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; BSIZE enum valuesofa::linearalgebra::BlockFullMatrix< N, T >; clear(Index i, Index j) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clear() overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearCol(Index j) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearRowCol(Index i) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstItera",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html:5939,Usability,clear,clearRowCol,5939,"cSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; BSIZE enum valuesofa::linearalgebra::BlockFullMatrix< N, T >; clear(Index i, Index j) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clear() overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearCol(Index j) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearRowCol(Index i) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, void *internalPtr) constsofa::linearalgebra::BaseMatrixinlineprot",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html:6021,Usability,clear,clearRows,6021,"wBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; BSIZE enum valuesofa::linearalgebra::BlockFullMatrix< N, T >; clear(Index i, Index j) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clear() overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearCol(Index j) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearRowCol(Index i) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, void *internalPtr) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, Index internalData) constsofa::line",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html:6100,Usability,clear,clearRowsCols,6100," ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; BSIZE enum valuesofa::linearalgebra::BlockFullMatrix< N, T >; clear(Index i, Index j) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clear() overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearCol(Index j) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearRowCol(Index i) overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::BlockFullMatrix< N, T >virtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, void *internalPtr) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; createRowBlockConstIterator(void *internalP",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:2920,Modifiability,inherit,inherited,2920,";  ; template<class B > ; void setSubMatrix (Index i, Index j, Index nrow, Index ncol, const B &m);  ; template<class B > ; void setAlignedSubMatrix (Index bi, Index bj, Index nrow, Index ncol, const B &m);  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f mat",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:9498,Modifiability,inherit,inherited,9498,,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:13921,Modifiability,inherit,inherited,13921,"tor *it, const InternalColBlockIterator *it2) const;  ; ColBlockConstIterator createColBlockConstIterator (Index row, void *internalPtr) const;  ; ColBlockConstIterator createColBlockConstIterator (Index row, Index internalData) const;  ; virtual void itCopyRowBlock (InternalRowBlockIterator *) const;  ; virtual void itDeleteRowBlock (const InternalRowBlockIterator *) const;  ; virtual Index itAccessRowBlock (InternalRowBlockIterator *it) const;  ; virtual ColBlockConstIterator itBeginRowBlock (InternalRowBlockIterator *it) const;  ; virtual ColBlockConstIterator itEndRowBlock (InternalRowBlockIterator *it) const;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > itRangeRowBlock (InternalRowBlockIterator *it) const;  ; virtual void itIncRowBlock (InternalRowBlockIterator *it) const;  ; virtual void itDecRowBlock (InternalRowBlockIterator *it) const;  ; virtual bool itEqRowBlock (const InternalRowBlockIterator *it, const InternalRowBlockIterator *it2) const;  ; virtual bool itLessRowBlock (const InternalRowBlockIterator *it, const InternalRowBlockIterator *it2) const;  ; RowBlockConstIterator createRowBlockConstIterator (void *internalPtr) const;  ; RowBlockConstIterator createRowBlockConstIterator (Index internalData0, Index internalData1) const;  ;  Static Protected Member Functions inherited from sofa::linearalgebra::BaseMatrix; static InternalBlockAccessor * getInternal (BlockConstAccessor *b);  ; static const InternalBlockAccessor * getInternal (const BlockConstAccessor *b);  ; static InternalBlockAccessor * getInternal (BlockAccessor *b);  ; static const InternalBlockAccessor * getInternal (const BlockAccessor *b);  ; static InternalColBlockIterator * getInternal (ColBlockConstIterator *b);  ; static const InternalColBlockIterator * getInternal (const ColBlockConstIterator *b);  ; static InternalRowBlockIterator * getInternal (RowBlockConstIterator *b);  ; static const InternalRowBlockIterator * getInternal (const RowBlockConstIterator *b);  .",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:3469,Performance,perform,performances,3469,"Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:3643,Performance,perform,performances,3643,"o 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index i",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:3817,Performance,perform,performances,3817,"template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *resul",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:3991,Performance,perform,performances,3991,"Matrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const floa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:4165,Performance,perform,performances,4165,"ible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply th",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:4339,Performance,perform,performances,4339,"virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) cons",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:7726,Security,access,access,7726,"st;  Multiply the transposed matrix by float vector v and add the result in vector result. More...;  ; virtual void opPMulTV (double *result, const double *v) const;  Multiply the transposed matrix by double vector v and add the result in vector result. More...;  ; virtual void opMulTM (BaseMatrix *result, BaseMatrix *m) const;  Multiply the transposed matrix by matrix m and store the result in matrix result. More...;  ; virtual void opAddM (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the matrix to the m matrix and strore the result in m. More...;  ; virtual void opAddMT (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the transposed matrix to the m matrix and strore the result in m. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual MatrixCategory getCategory () const;  ; virtual Index getBlockRows () const;  ; virtual Index getBlockCols () const;  ; virtual Index bRowSize () const;  ; virtual Index bColSize () const;  ; virtual Index getBandWidth () const;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  ; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the give",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:7819,Security,access,access,7819,"const;  Multiply the transposed matrix by matrix m and store the result in matrix result. More...;  ; virtual void opAddM (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the matrix to the m matrix and strore the result in m. More...;  ; virtual void opAddMT (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the transposed matrix to the m matrix and strore the result in m. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual MatrixCategory getCategory () const;  ; virtual Index getBlockRows () const;  ; virtual Index getBlockCols () const;  ; virtual Index bRowSize () const;  ; virtual Index bColSize () const;  ; virtual Index getBandWidth () const;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  ; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the given row of blocks. More...;  ; virtual ColBlockConstIterator bRowEnd (Index ib) const;  Get the iterator corresponding to the end of the given row of blocks. More...;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > bRowRange (Index ib) const;  Get the iterators corresponding to the beginning and end of ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:7914,Security,access,access,7914,"tual void opAddM (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the matrix to the m matrix and strore the result in m. More...;  ; virtual void opAddMT (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the transposed matrix to the m matrix and strore the result in m. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual MatrixCategory getCategory () const;  ; virtual Index getBlockRows () const;  ; virtual Index getBlockCols () const;  ; virtual Index bRowSize () const;  ; virtual Index bColSize () const;  ; virtual Index getBandWidth () const;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  ; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the given row of blocks. More...;  ; virtual ColBlockConstIterator bRowEnd (Index ib) const;  Get the iterator corresponding to the end of the given row of blocks. More...;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > bRowRange (Index ib) const;  Get the iterators corresponding to the beginning and end of the given row of blocks. More...;  ; virtual RowBlockConstIterator bRowsBegin () const;  Get the iterator",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:2435,Usability,clear,clear,2435,"n j (using 0-based indices) More...;  ; const Block & asub (Index bi, Index bj, Index, Index) const;  ; const Block & sub (Index i, Index j, Index, Index) const;  ; Block & asub (Index bi, Index bj, Index, Index);  ; Block & sub (Index i, Index j, Index, Index);  ; template<class B > ; void getSubMatrix (Index i, Index j, Index nrow, Index ncol, B &m);  ; template<class B > ; void getAlignedSubMatrix (Index bi, Index bj, Index nrow, Index ncol, B &m);  ; template<class B > ; void setSubMatrix (Index i, Index j, Index nrow, Index ncol, const B &m);  ; template<class B > ; void setAlignedSubMatrix (Index bi, Index bj, Index nrow, Index ncol, const B &m);  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. M",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:2478,Usability,clear,clearRow,2478,"n j (using 0-based indices) More...;  ; const Block & asub (Index bi, Index bj, Index, Index) const;  ; const Block & sub (Index i, Index j, Index, Index) const;  ; Block & asub (Index bi, Index bj, Index, Index);  ; Block & sub (Index i, Index j, Index, Index);  ; template<class B > ; void getSubMatrix (Index i, Index j, Index nrow, Index ncol, B &m);  ; template<class B > ; void getAlignedSubMatrix (Index bi, Index bj, Index nrow, Index ncol, B &m);  ; template<class B > ; void setSubMatrix (Index i, Index j, Index nrow, Index ncol, const B &m);  ; template<class B > ; void setAlignedSubMatrix (Index bi, Index bj, Index nrow, Index ncol, const B &m);  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. M",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:2561,Usability,clear,clearCol,2561,"nst Block & sub (Index i, Index j, Index, Index) const;  ; Block & asub (Index bi, Index bj, Index, Index);  ; Block & sub (Index i, Index j, Index, Index);  ; template<class B > ; void getSubMatrix (Index i, Index j, Index nrow, Index ncol, B &m);  ; template<class B > ; void getAlignedSubMatrix (Index bi, Index bj, Index nrow, Index ncol, B &m);  ; template<class B > ; void setSubMatrix (Index i, Index j, Index nrow, Index ncol, const B &m);  ; template<class B > ; void setAlignedSubMatrix (Index bi, Index bj, Index nrow, Index ncol, const B &m);  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f ma",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:2647,Usability,clear,clearRowCol,2647,", Index, Index);  ; Block & sub (Index i, Index j, Index, Index);  ; template<class B > ; void getSubMatrix (Index i, Index j, Index nrow, Index ncol, B &m);  ; template<class B > ; void getAlignedSubMatrix (Index bi, Index bj, Index nrow, Index ncol, B &m);  ; template<class B > ; void setSubMatrix (Index i, Index j, Index nrow, Index ncol, const B &m);  ; template<class B > ; void setAlignedSubMatrix (Index bi, Index bj, Index nrow, Index ncol, const B &m);  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:2744,Usability,clear,clear,2744,"lass B > ; void getSubMatrix (Index i, Index j, Index nrow, Index ncol, B &m);  ; template<class B > ; void getAlignedSubMatrix (Index bi, Index bj, Index nrow, Index ncol, B &m);  ; template<class B > ; void setSubMatrix (Index i, Index j, Index nrow, Index ncol, const B &m);  ; template<class B > ; void setAlignedSubMatrix (Index bi, Index bj, Index nrow, Index ncol, const B &m);  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:4378,Usability,clear,clearRows,4378,"a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:4481,Usability,clear,clearCols,4481,"ndex row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; virtual void opPMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and add t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:4592,Usability,clear,clearRowsCols,4592,"ter performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; virtual void opPMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and add the result in vector result. More...;  ; virtual void opPMulV (double *result, const double *v) const;  Multiply the matrix by",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:16888,Usability,clear,clear,16888,"llMatrix< N, T >::add ; (; Index ; row, . Index ; col, . double ; v . ). overridevirtual . Add v to the existing value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ asub() [1/2]. template<std::size_t N, typename T > . BlockFullMatrix< N, T >::Block & sofa::linearalgebra::BlockFullMatrix< N, T >::asub ; (; Index ; bi, . Index ; bj, . Index ; , . Index ;  . ). ◆ asub() [2/2]. template<std::size_t N, typename T > . const BlockFullMatrix< N, T >::Block & sofa::linearalgebra::BlockFullMatrix< N, T >::asub ; (; Index ; bi, . Index ; bj, . Index ; , . Index ;  . ); const. ◆ bloc() [1/2]. template<std::size_t N, typename T > . BlockFullMatrix< N, T >::Block & sofa::linearalgebra::BlockFullMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ). ◆ bloc() [2/2]. template<std::size_t N, typename T > . const BlockFullMatrix< N, T >::Block & sofa::linearalgebra::BlockFullMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ); const. ◆ clear() [1/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clear ; (; ). overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clear ; (; Index ; i, . Index ; j . ). overridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearCol ; (; Index ; j). overridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearRow ; (; Index ; i). overridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:16993,Usability,clear,clear,16993,"evirtual . Add v to the existing value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ asub() [1/2]. template<std::size_t N, typename T > . BlockFullMatrix< N, T >::Block & sofa::linearalgebra::BlockFullMatrix< N, T >::asub ; (; Index ; bi, . Index ; bj, . Index ; , . Index ;  . ). ◆ asub() [2/2]. template<std::size_t N, typename T > . const BlockFullMatrix< N, T >::Block & sofa::linearalgebra::BlockFullMatrix< N, T >::asub ; (; Index ; bi, . Index ; bj, . Index ; , . Index ;  . ); const. ◆ bloc() [1/2]. template<std::size_t N, typename T > . BlockFullMatrix< N, T >::Block & sofa::linearalgebra::BlockFullMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ). ◆ bloc() [2/2]. template<std::size_t N, typename T > . const BlockFullMatrix< N, T >::Block & sofa::linearalgebra::BlockFullMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ); const. ◆ clear() [1/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clear ; (; ). overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clear ; (; Index ; i, . Index ; j . ). overridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearCol ; (; Index ; j). overridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearRow ; (; Index ; i). overridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearRowCol ; (; Index ; i). overridevirtual . Reset the value of both row and",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:17096,Usability,clear,clear,17096,"a::BaseMatrix. ◆ asub() [1/2]. template<std::size_t N, typename T > . BlockFullMatrix< N, T >::Block & sofa::linearalgebra::BlockFullMatrix< N, T >::asub ; (; Index ; bi, . Index ; bj, . Index ; , . Index ;  . ). ◆ asub() [2/2]. template<std::size_t N, typename T > . const BlockFullMatrix< N, T >::Block & sofa::linearalgebra::BlockFullMatrix< N, T >::asub ; (; Index ; bi, . Index ; bj, . Index ; , . Index ;  . ); const. ◆ bloc() [1/2]. template<std::size_t N, typename T > . BlockFullMatrix< N, T >::Block & sofa::linearalgebra::BlockFullMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ). ◆ bloc() [2/2]. template<std::size_t N, typename T > . const BlockFullMatrix< N, T >::Block & sofa::linearalgebra::BlockFullMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ); const. ◆ clear() [1/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clear ; (; ). overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clear ; (; Index ; i, . Index ; j . ). overridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearCol ; (; Index ; j). overridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearRow ; (; Index ; i). overridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearRowCol ; (; Index ; i). overridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<std::size_t N, typename T > . BlockF",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:17201,Usability,clear,clear,17201,"< N, T >::Block & sofa::linearalgebra::BlockFullMatrix< N, T >::asub ; (; Index ; bi, . Index ; bj, . Index ; , . Index ;  . ). ◆ asub() [2/2]. template<std::size_t N, typename T > . const BlockFullMatrix< N, T >::Block & sofa::linearalgebra::BlockFullMatrix< N, T >::asub ; (; Index ; bi, . Index ; bj, . Index ; , . Index ;  . ); const. ◆ bloc() [1/2]. template<std::size_t N, typename T > . BlockFullMatrix< N, T >::Block & sofa::linearalgebra::BlockFullMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ). ◆ bloc() [2/2]. template<std::size_t N, typename T > . const BlockFullMatrix< N, T >::Block & sofa::linearalgebra::BlockFullMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ); const. ◆ clear() [1/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clear ; (; ). overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clear ; (; Index ; i, . Index ; j . ). overridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearCol ; (; Index ; j). overridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearRow ; (; Index ; i). overridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearRowCol ; (; Index ; i). overridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<std::size_t N, typename T > . BlockFullMatrix< N, T >::Index sofa::linearalgebra::BlockFullMatrix< N, T >::colSize ; (; v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:17312,Usability,clear,clearCol,17312,"asub() [2/2]. template<std::size_t N, typename T > . const BlockFullMatrix< N, T >::Block & sofa::linearalgebra::BlockFullMatrix< N, T >::asub ; (; Index ; bi, . Index ; bj, . Index ; , . Index ;  . ); const. ◆ bloc() [1/2]. template<std::size_t N, typename T > . BlockFullMatrix< N, T >::Block & sofa::linearalgebra::BlockFullMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ). ◆ bloc() [2/2]. template<std::size_t N, typename T > . const BlockFullMatrix< N, T >::Block & sofa::linearalgebra::BlockFullMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ); const. ◆ clear() [1/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clear ; (; ). overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clear ; (; Index ; i, . Index ; j . ). overridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearCol ; (; Index ; j). overridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearRow ; (; Index ; i). overridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearRowCol ; (; Index ; i). overridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<std::size_t N, typename T > . BlockFullMatrix< N, T >::Index sofa::linearalgebra::BlockFullMatrix< N, T >::colSize ; (; void ; ); const. overridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ element(). template<std::siz",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:17414,Usability,clear,clearCol,17414,"Block & sofa::linearalgebra::BlockFullMatrix< N, T >::asub ; (; Index ; bi, . Index ; bj, . Index ; , . Index ;  . ); const. ◆ bloc() [1/2]. template<std::size_t N, typename T > . BlockFullMatrix< N, T >::Block & sofa::linearalgebra::BlockFullMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ). ◆ bloc() [2/2]. template<std::size_t N, typename T > . const BlockFullMatrix< N, T >::Block & sofa::linearalgebra::BlockFullMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ); const. ◆ clear() [1/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clear ; (; ). overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clear ; (; Index ; i, . Index ; j . ). overridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearCol ; (; Index ; j). overridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearRow ; (; Index ; i). overridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearRowCol ; (; Index ; i). overridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<std::size_t N, typename T > . BlockFullMatrix< N, T >::Index sofa::linearalgebra::BlockFullMatrix< N, T >::colSize ; (; void ; ); const. overridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ element(). template<std::size_t N, typename T > . SReal sofa::linearalgebra::BlockFullMatrix< N, T >::element ; (",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:17553,Usability,clear,clearRow,17553,"ze_t N, typename T > . BlockFullMatrix< N, T >::Block & sofa::linearalgebra::BlockFullMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ). ◆ bloc() [2/2]. template<std::size_t N, typename T > . const BlockFullMatrix< N, T >::Block & sofa::linearalgebra::BlockFullMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ); const. ◆ clear() [1/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clear ; (; ). overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clear ; (; Index ; i, . Index ; j . ). overridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearCol ; (; Index ; j). overridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearRow ; (; Index ; i). overridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearRowCol ; (; Index ; i). overridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<std::size_t N, typename T > . BlockFullMatrix< N, T >::Index sofa::linearalgebra::BlockFullMatrix< N, T >::colSize ; (; void ; ); const. overridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ element(). template<std::size_t N, typename T > . SReal sofa::linearalgebra::BlockFullMatrix< N, T >::element ; (; Index ; i, . Index ; j . ); const. overridevirtual . Read the value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalg",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:17655,Usability,clear,clearRow,17655,"llMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ). ◆ bloc() [2/2]. template<std::size_t N, typename T > . const BlockFullMatrix< N, T >::Block & sofa::linearalgebra::BlockFullMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ); const. ◆ clear() [1/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clear ; (; ). overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clear ; (; Index ; i, . Index ; j . ). overridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearCol ; (; Index ; j). overridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearRow ; (; Index ; i). overridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearRowCol ; (; Index ; i). overridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<std::size_t N, typename T > . BlockFullMatrix< N, T >::Index sofa::linearalgebra::BlockFullMatrix< N, T >::colSize ; (; void ; ); const. overridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ element(). template<std::size_t N, typename T > . SReal sofa::linearalgebra::BlockFullMatrix< N, T >::element ; (; Index ; i, . Index ; j . ); const. overridevirtual . Read the value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ getAlignedSubMatrix(). template<std::size_t N, typename T > . tem",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:17791,Usability,clear,clearRowCol,17791,"a::linearalgebra::BlockFullMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ); const. ◆ clear() [1/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clear ; (; ). overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clear ; (; Index ; i, . Index ; j . ). overridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearCol ; (; Index ; j). overridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearRow ; (; Index ; i). overridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearRowCol ; (; Index ; i). overridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<std::size_t N, typename T > . BlockFullMatrix< N, T >::Index sofa::linearalgebra::BlockFullMatrix< N, T >::colSize ; (; void ; ); const. overridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ element(). template<std::size_t N, typename T > . SReal sofa::linearalgebra::BlockFullMatrix< N, T >::element ; (; Index ; i, . Index ; j . ); const. overridevirtual . Read the value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ getAlignedSubMatrix(). template<std::size_t N, typename T > . template<class B > . void sofa::linearalgebra::BlockFullMatrix< N, T >::getAlignedSubMatrix ; (; Index ; bi, . Index ; bj, . Index ; nrow, . Index ; ncol, . B",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html:17896,Usability,clear,clearRowCol,17896,". ◆ clear() [1/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clear ; (; ). overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clear ; (; Index ; i, . Index ; j . ). overridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearCol ; (; Index ; j). overridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearRow ; (; Index ; i). overridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::clearRowCol ; (; Index ; i). overridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<std::size_t N, typename T > . BlockFullMatrix< N, T >::Index sofa::linearalgebra::BlockFullMatrix< N, T >::colSize ; (; void ; ); const. overridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ element(). template<std::size_t N, typename T > . SReal sofa::linearalgebra::BlockFullMatrix< N, T >::element ; (; Index ; i, . Index ; j . ); const. overridevirtual . Read the value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ getAlignedSubMatrix(). template<std::size_t N, typename T > . template<class B > . void sofa::linearalgebra::BlockFullMatrix< N, T >::getAlignedSubMatrix ; (; Index ; bi, . Index ; bj, . Index ; nrow, . Index ; ncol, . B & ; m . ). ◆ getSubMatrix(). template<std::size_t N, typename T > . template<class B >",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block-members.html:274,Modifiability,inherit,inherited,274,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::BlockFullMatrix< N, T >::Block Member List . This is the complete list of members for sofa::linearalgebra::BlockFullMatrix< N, T >::Block, including all inherited members. add(Index i, Index j, const T &v)sofa::linearalgebra::BlockFullMatrix< N, T >::Block; addTransposed(const Mat< C, L, Real > &m) noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; ArrayLineType typedefsofa::type::Mat< BSIZE, BSIZE, Real >; back()sofa::type::Mat< BSIZE, BSIZE, Real >inline; back() constsofa::type::Mat< BSIZE, BSIZE, Real >inline; begin() noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; begin() const noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; canSelfTranspose(const Mat< S, S, Real > &lhs, const Mat< S, S, Real > &rhs) noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inlinestatic; canSelfTranspose(const Mat< I, J, Real > &, const Mat< J, I, Real > &) noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inlinestatic; clear() noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; Col typedefsofa::type::Mat< BSIZE, BSIZE, Real >; col(Size j) const noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; const_iterator typedefsofa::type::Mat< BSIZE, BSIZE, Real >; const_reference typedefsofa::type::Mat< BSIZE, BSIZE, Real >; data() const noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; difference_type typedefsofa::type::Mat< BSIZE, BSIZE, Real >; element(Index i, Index j) constsofa::linearalgebra::BlockFullMatrix< N, T >::Block; elemssofa::type::Mat< BSIZE, BSIZE, Real >; end() noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; end() const noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; fill(Real r) noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; front()sofa::type::Mat< BSIZE, BSIZE, Real >inline; front() constsofa::type::Mat< BSIZE, BSIZE, Real >inline; getNbCols() constsofa::type::Mat< BSIZE, BSIZE, Real >inline; getNbLines() constsofa::type::Mat< BSIZE, ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block-members.html:1036,Usability,clear,clear,1036," add(Index i, Index j, const T &v)sofa::linearalgebra::BlockFullMatrix< N, T >::Block; addTransposed(const Mat< C, L, Real > &m) noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; ArrayLineType typedefsofa::type::Mat< BSIZE, BSIZE, Real >; back()sofa::type::Mat< BSIZE, BSIZE, Real >inline; back() constsofa::type::Mat< BSIZE, BSIZE, Real >inline; begin() noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; begin() const noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; canSelfTranspose(const Mat< S, S, Real > &lhs, const Mat< S, S, Real > &rhs) noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inlinestatic; canSelfTranspose(const Mat< I, J, Real > &, const Mat< J, I, Real > &) noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inlinestatic; clear() noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; Col typedefsofa::type::Mat< BSIZE, BSIZE, Real >; col(Size j) const noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; const_iterator typedefsofa::type::Mat< BSIZE, BSIZE, Real >; const_reference typedefsofa::type::Mat< BSIZE, BSIZE, Real >; data() const noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; difference_type typedefsofa::type::Mat< BSIZE, BSIZE, Real >; element(Index i, Index j) constsofa::linearalgebra::BlockFullMatrix< N, T >::Block; elemssofa::type::Mat< BSIZE, BSIZE, Real >; end() noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; end() const noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; fill(Real r) noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; front()sofa::type::Mat< BSIZE, BSIZE, Real >inline; front() constsofa::type::Mat< BSIZE, BSIZE, Real >inline; getNbCols() constsofa::type::Mat< BSIZE, BSIZE, Real >inline; getNbLines() constsofa::type::Mat< BSIZE, ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:1224,Modifiability,inherit,inherited,1224,"﻿. SOFA API: sofa::linearalgebra::BlockFullMatrix< N, T >::Block Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::linearalgebra::BlockFullMatrix< N, T >::Block Class Reference . #include <BlockFullMatrix.h>. Inheritance diagram for sofa::linearalgebra::BlockFullMatrix< N, T >::Block:. [legend]. Public Member Functions; Index Nrows () const;  ; Index Ncols () const;  ; void resize (Index, Index);  ; const T & element (Index i, Index j) const;  ; void set (Index i, Index j, const T &v);  ; void add (Index i, Index j, const T &v);  ; void operator= (const type::Mat< BSIZE, BSIZE, Real > &v);  ; type::Mat< BSIZE, BSIZE, Real > operator- () const;  ; type::Mat< BSIZE, BSIZE, Real > operator- (const type::Mat< BSIZE, BSIZE, Real > &m) const;  ; type::Vec< BSIZE, Real > operator* (const type::Vec< BSIZE, Real > &v);  ; type::Mat< BSIZE, BSIZE, Real > operator* (const type::Mat< BSIZE, BSIZE, Real > &m);  ; type::Mat< BSIZE, BSIZE, Real > operator* (const Block &m);  ; type::Mat< BSIZE, BSIZE, Real > operator* (const TransposedBlock &mt);  ; TransposedBlock t () const;  ; Block i () const;  ;  Public Member Functions inherited from sofa::type::Mat< BSIZE, BSIZE, Real >; constexpr Mat () noexcept=default;  ; constexpr Mat (NoInit) noexcept;  ; constexpr Mat (std::initializer_list< Real > &&scalars) noexcept;  ; constexpr Mat (std::initializer_list< std::initializer_list< Real >> &&rows) noexcept;  ; constexpr Mat (ArgsT &&... r) noexcept;  ; constexpr Mat (const Real &v) noexcept;  Constructor from an element. More...;  ; constexpr Mat (const Mat< L, C, real2 > &m) noexcept;  Constructor from another matrix. More...;  ; constexpr Mat (const Mat< L2, C2, real2 > &m) noexcept;  Constructor from another matrix with different size (with null default entries and ignoring outside entries) More...;  ; constexpr Mat (const real2 *p) noexcept;  Constructor from an array of elements (stored",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:8805,Modifiability,inherit,inherited,8805,"r void symmetrize () noexcept;  ; constexpr const Real * data () const noexcept;  ; constexpr ArrayLineType::iterator begin () noexcept;  ; constexpr ArrayLineType::const_iterator begin () const noexcept;  ; constexpr ArrayLineType::iterator end () noexcept;  ; constexpr ArrayLineType::const_iterator end () const noexcept;  ; constexpr reference front ();  ; constexpr const_reference front () const;  ; constexpr reference back ();  ; constexpr const_reference back () const;  ; constexpr bool operator== (const Mat< L, C, Real > &b) const noexcept;  ; constexpr bool operator!= (const Mat< L, C, Real > &b) const noexcept;  ; bool isSymmetric () const;  ; bool isDiagonal () const noexcept;  . Additional Inherited Members;  Public Attributes inherited from sofa::type::Mat< BSIZE, BSIZE, Real >; ArrayLineType elems;  ;  Static Public Attributes inherited from sofa::type::Mat< BSIZE, BSIZE, Real >; static constexpr sofa::Size N;  ; static constexpr Size nbLines;  ; static constexpr Size nbCols;  ; static constexpr sofa::Size static_size;  ; static constexpr sofa::Size total_size;  ;  Static Public Member Functions inherited from sofa::type::Mat< BSIZE, BSIZE, Real >; static constexpr sofa::Size size ();  ; static const Mat< L, L, Real > & Identity () noexcept;  Returns the identity matrix. More...;  ; static bool canSelfTranspose (const Mat< S, S, Real > &lhs, const Mat< S, S, Real > &rhs) noexcept;  ; static bool canSelfTranspose (const Mat< I, J, Real > &, const Mat< J, I, Real > &) noexcept;  ; static Mat< L, C, Real > transformTranslation (const Vec< C-1, Real > &t) noexcept;  ; static Mat< L, C, Real > transformScale (Real s) noexcept;  ; static Mat< L, C, Real > transformScale (const Vec< C-1, Real > &s) noexcept;  ; static Mat< L, C, Real > transformRotation (const Quat &q) noexcept;  . Function details. ◆ add(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::Block::add ; (; Index ; i, . Index ; j, . const T & ; v . ). ◆ el",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:8909,Modifiability,inherit,inherited,8909,"r void symmetrize () noexcept;  ; constexpr const Real * data () const noexcept;  ; constexpr ArrayLineType::iterator begin () noexcept;  ; constexpr ArrayLineType::const_iterator begin () const noexcept;  ; constexpr ArrayLineType::iterator end () noexcept;  ; constexpr ArrayLineType::const_iterator end () const noexcept;  ; constexpr reference front ();  ; constexpr const_reference front () const;  ; constexpr reference back ();  ; constexpr const_reference back () const;  ; constexpr bool operator== (const Mat< L, C, Real > &b) const noexcept;  ; constexpr bool operator!= (const Mat< L, C, Real > &b) const noexcept;  ; bool isSymmetric () const;  ; bool isDiagonal () const noexcept;  . Additional Inherited Members;  Public Attributes inherited from sofa::type::Mat< BSIZE, BSIZE, Real >; ArrayLineType elems;  ;  Static Public Attributes inherited from sofa::type::Mat< BSIZE, BSIZE, Real >; static constexpr sofa::Size N;  ; static constexpr Size nbLines;  ; static constexpr Size nbCols;  ; static constexpr sofa::Size static_size;  ; static constexpr sofa::Size total_size;  ;  Static Public Member Functions inherited from sofa::type::Mat< BSIZE, BSIZE, Real >; static constexpr sofa::Size size ();  ; static const Mat< L, L, Real > & Identity () noexcept;  Returns the identity matrix. More...;  ; static bool canSelfTranspose (const Mat< S, S, Real > &lhs, const Mat< S, S, Real > &rhs) noexcept;  ; static bool canSelfTranspose (const Mat< I, J, Real > &, const Mat< J, I, Real > &) noexcept;  ; static Mat< L, C, Real > transformTranslation (const Vec< C-1, Real > &t) noexcept;  ; static Mat< L, C, Real > transformScale (Real s) noexcept;  ; static Mat< L, C, Real > transformScale (const Vec< C-1, Real > &s) noexcept;  ; static Mat< L, C, Real > transformRotation (const Quat &q) noexcept;  . Function details. ◆ add(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::Block::add ; (; Index ; i, . Index ; j, . const T & ; v . ). ◆ el",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:9183,Modifiability,inherit,inherited,9183,"r void symmetrize () noexcept;  ; constexpr const Real * data () const noexcept;  ; constexpr ArrayLineType::iterator begin () noexcept;  ; constexpr ArrayLineType::const_iterator begin () const noexcept;  ; constexpr ArrayLineType::iterator end () noexcept;  ; constexpr ArrayLineType::const_iterator end () const noexcept;  ; constexpr reference front ();  ; constexpr const_reference front () const;  ; constexpr reference back ();  ; constexpr const_reference back () const;  ; constexpr bool operator== (const Mat< L, C, Real > &b) const noexcept;  ; constexpr bool operator!= (const Mat< L, C, Real > &b) const noexcept;  ; bool isSymmetric () const;  ; bool isDiagonal () const noexcept;  . Additional Inherited Members;  Public Attributes inherited from sofa::type::Mat< BSIZE, BSIZE, Real >; ArrayLineType elems;  ;  Static Public Attributes inherited from sofa::type::Mat< BSIZE, BSIZE, Real >; static constexpr sofa::Size N;  ; static constexpr Size nbLines;  ; static constexpr Size nbCols;  ; static constexpr sofa::Size static_size;  ; static constexpr sofa::Size total_size;  ;  Static Public Member Functions inherited from sofa::type::Mat< BSIZE, BSIZE, Real >; static constexpr sofa::Size size ();  ; static const Mat< L, L, Real > & Identity () noexcept;  Returns the identity matrix. More...;  ; static bool canSelfTranspose (const Mat< S, S, Real > &lhs, const Mat< S, S, Real > &rhs) noexcept;  ; static bool canSelfTranspose (const Mat< I, J, Real > &, const Mat< J, I, Real > &) noexcept;  ; static Mat< L, C, Real > transformTranslation (const Vec< C-1, Real > &t) noexcept;  ; static Mat< L, C, Real > transformScale (Real s) noexcept;  ; static Mat< L, C, Real > transformScale (const Vec< C-1, Real > &s) noexcept;  ; static Mat< L, C, Real > transformRotation (const Quat &q) noexcept;  . Function details. ◆ add(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockFullMatrix< N, T >::Block::add ; (; Index ; i, . Index ; j, . const T & ; v . ). ◆ el",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:3129,Security,access,access,3129,"e getNbCols () const;  number of columns More...;  ; constexpr void operator= (const Real *p) noexcept;  Assignment from an array of elements (stored per line). More...;  ; constexpr void operator= (const Mat< L, C, real2 > &m) noexcept;  Assignment from another matrix. More...;  ; constexpr void operator= (const Mat< L2, C2, Real > &m) noexcept;  Assignment from a matrix of different size. More...;  ; constexpr void getsub (Size L0, Size C0, Mat< L2, C2, Real > &m) const noexcept;  ; constexpr void getsub (const Size L0, const Size C0, Vec< C2, Real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, Real &m) const noexcept;  ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, Real > &m) noexcept;  ; constexpr void setsub (Size L0, Size C0, const Vec< L2, Real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (Real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standar",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:3293,Security,access,access,3293,"..;  ; constexpr void operator= (const Mat< L, C, real2 > &m) noexcept;  Assignment from another matrix. More...;  ; constexpr void operator= (const Mat< L2, C2, Real > &m) noexcept;  Assignment from a matrix of different size. More...;  ; constexpr void getsub (Size L0, Size C0, Mat< L2, C2, Real > &m) const noexcept;  ; constexpr void getsub (const Size L0, const Size C0, Vec< C2, Real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, Real &m) const noexcept;  ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, Real > &m) noexcept;  ; constexpr void setsub (Size L0, Size C0, const Vec< L2, Real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (Real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:3399,Security,access,access,3399,"atrix. More...;  ; constexpr void operator= (const Mat< L2, C2, Real > &m) noexcept;  Assignment from a matrix of different size. More...;  ; constexpr void getsub (Size L0, Size C0, Mat< L2, C2, Real > &m) const noexcept;  ; constexpr void getsub (const Size L0, const Size C0, Vec< C2, Real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, Real &m) const noexcept;  ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, Real > &m) noexcept;  ; constexpr void setsub (Size L0, Size C0, const Vec< L2, Real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (Real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const L",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:3489,Security,access,access,3489,"rom a matrix of different size. More...;  ; constexpr void getsub (Size L0, Size C0, Mat< L2, C2, Real > &m) const noexcept;  ; constexpr void getsub (const Size L0, const Size C0, Vec< C2, Real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, Real &m) const noexcept;  ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, Real > &m) noexcept;  ; constexpr void setsub (Size L0, Size C0, const Vec< L2, Real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (Real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; constexpr Line &",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:3595,Security,access,access,3595,"Real > &m) const noexcept;  ; constexpr void getsub (const Size L0, const Size C0, Vec< C2, Real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, Real &m) const noexcept;  ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, Real > &m) noexcept;  ; constexpr void setsub (Size L0, Size C0, const Vec< L2, Real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (Real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; constexpr const Line & y () const noex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:3687,Security,access,access,3687," const noexcept;  ; constexpr void getsub (Size L0, Size C0, Real &m) const noexcept;  ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, Real > &m) noexcept;  ; constexpr void setsub (Size L0, Size C0, const Vec< L2, Real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (Real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; constexpr Line & z () noexcept;  Special ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:3802,Security,access,access,3802,"sub (Size L0, Size C0, const Mat< L2, C2, Real > &m) noexcept;  ; constexpr void setsub (Size L0, Size C0, const Vec< L2, Real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (Real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; constexpr const Line & z () const noexcept;  Special access to third line",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:4316,Security,access,access,4316,"line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; constexpr Real toReal () const;  ; constexpr operator Real () const;  ; constexpr void identity () noexcept;  Set matrix to identity. More...;  ; constexpr void transpose (const Mat< C, L, Real > &m) noexcept;  Set matrix as the transpose of m. More...;  ; constexpr void transpose () noexcept;  Transpose the square matrix. More",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:4403,Security,access,access,4403,"ead-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; constexpr Real toReal () const;  ; constexpr operator Real () const;  ; constexpr void identity () noexcept;  Set matrix to identity. More...;  ; constexpr void transpose (const Mat< C, L, Real > &m) noexcept;  Set matrix as the transpose of m. More...;  ; constexpr void transpose () noexcept;  Transpose the square matrix. More...;  ; constexpr Mat< C, L, Real > transposed () const noexcept;  Return the transpose",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:4490,Security,access,access,4490,"pt;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; constexpr Real toReal () const;  ; constexpr operator Real () const;  ; constexpr void identity () noexcept;  Set matrix to identity. More...;  ; constexpr void transpose (const Mat< C, L, Real > &m) noexcept;  Set matrix as the transpose of m. More...;  ; constexpr void transpose () noexcept;  Transpose the square matrix. More...;  ; constexpr Mat< C, L, Real > transposed () const noexcept;  Return the transpose of m. More...;  ; constexpr Mat< L, C, Real > operator+ (const Mat< L, C, Real > &m) c",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:4578,Security,access,access,4578,") const noexcept;  Read-only access to line i. More...;  ; constexpr Real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; constexpr Real toReal () const;  ; constexpr operator Real () const;  ; constexpr void identity () noexcept;  Set matrix to identity. More...;  ; constexpr void transpose (const Mat< C, L, Real > &m) noexcept;  Set matrix as the transpose of m. More...;  ; constexpr void transpose () noexcept;  Transpose the square matrix. More...;  ; constexpr Mat< C, L, Real > transposed () const noexcept;  Return the transpose of m. More...;  ; constexpr Mat< L, C, Real > operator+ (const Mat< L, C, Real > &m) const noexcept;  Matrix addition operator. More...;  ; constexpr Mat< L, C, Real > operat",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:4666,Security,access,access,4666,"(Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; constexpr Real toReal () const;  ; constexpr operator Real () const;  ; constexpr void identity () noexcept;  Set matrix to identity. More...;  ; constexpr void transpose (const Mat< C, L, Real > &m) noexcept;  Set matrix as the transpose of m. More...;  ; constexpr void transpose () noexcept;  Transpose the square matrix. More...;  ; constexpr Mat< C, L, Real > transposed () const noexcept;  Return the transpose of m. More...;  ; constexpr Mat< L, C, Real > operator+ (const Mat< L, C, Real > &m) const noexcept;  Matrix addition operator. More...;  ; constexpr Mat< L, C, Real > operator- (const Mat< L, C, Real > &m) const noexcept;  Matrix subtraction operator. More...; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:4753,Security,access,access,4753,"Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; constexpr Real toReal () const;  ; constexpr operator Real () const;  ; constexpr void identity () noexcept;  Set matrix to identity. More...;  ; constexpr void transpose (const Mat< C, L, Real > &m) noexcept;  Set matrix as the transpose of m. More...;  ; constexpr void transpose () noexcept;  Transpose the square matrix. More...;  ; constexpr Mat< C, L, Real > transposed () const noexcept;  Return the transpose of m. More...;  ; constexpr Mat< L, C, Real > operator+ (const Mat< L, C, Real > &m) const noexcept;  Matrix addition operator. More...;  ; constexpr Mat< L, C, Real > operator- (const Mat< L, C, Real > &m) const noexcept;  Matrix subtraction operator. More...;  ; constexpr Mat< L, C, Real > operator- () const noexcept;  Matrix negation operator. ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:4840,Security,access,access,4840,"ore...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; constexpr Real toReal () const;  ; constexpr operator Real () const;  ; constexpr void identity () noexcept;  Set matrix to identity. More...;  ; constexpr void transpose (const Mat< C, L, Real > &m) noexcept;  Set matrix as the transpose of m. More...;  ; constexpr void transpose () noexcept;  Transpose the square matrix. More...;  ; constexpr Mat< C, L, Real > transposed () const noexcept;  Return the transpose of m. More...;  ; constexpr Mat< L, C, Real > operator+ (const Mat< L, C, Real > &m) const noexcept;  Matrix addition operator. More...;  ; constexpr Mat< L, C, Real > operator- (const Mat< L, C, Real > &m) const noexcept;  Matrix subtraction operator. More...;  ; constexpr Mat< L, C, Real > operator- () const noexcept;  Matrix negation operator. More...;  ; constexpr Col operator* (const Line &v) const noexcept;  Multiplication ope",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:4928,Security,access,access,4928,"of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; constexpr Real toReal () const;  ; constexpr operator Real () const;  ; constexpr void identity () noexcept;  Set matrix to identity. More...;  ; constexpr void transpose (const Mat< C, L, Real > &m) noexcept;  Set matrix as the transpose of m. More...;  ; constexpr void transpose () noexcept;  Transpose the square matrix. More...;  ; constexpr Mat< C, L, Real > transposed () const noexcept;  Return the transpose of m. More...;  ; constexpr Mat< L, C, Real > operator+ (const Mat< L, C, Real > &m) const noexcept;  Matrix addition operator. More...;  ; constexpr Mat< L, C, Real > operator- (const Mat< L, C, Real > &m) const noexcept;  Matrix subtraction operator. More...;  ; constexpr Mat< L, C, Real > operator- () const noexcept;  Matrix negation operator. More...;  ; constexpr Col operator* (const Line &v) const noexcept;  Multiplication operator Matrix * Line. More...;  ; constexpr Mat< L, C, Real > operator* (Real f) const no",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:2933,Usability,clear,clear,2933,"texpr Mat (const Mat< L2, C2, real2 > &m) noexcept;  Constructor from another matrix with different size (with null default entries and ignoring outside entries) More...;  ; constexpr Mat (const real2 *p) noexcept;  Constructor from an array of elements (stored per line). More...;  ; constexpr Size getNbLines () const;  number of lines More...;  ; constexpr Size getNbCols () const;  number of columns More...;  ; constexpr void operator= (const Real *p) noexcept;  Assignment from an array of elements (stored per line). More...;  ; constexpr void operator= (const Mat< L, C, real2 > &m) noexcept;  Assignment from another matrix. More...;  ; constexpr void operator= (const Mat< L2, C2, Real > &m) noexcept;  Assignment from a matrix of different size. More...;  ; constexpr void getsub (Size L0, Size C0, Mat< L2, C2, Real > &m) const noexcept;  ; constexpr void getsub (const Size L0, const Size C0, Vec< C2, Real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, Real &m) const noexcept;  ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, Real > &m) noexcept;  ; constexpr void setsub (Size L0, Size C0, const Vec< L2, Real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (Real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_transposed_block-members.html:294,Modifiability,inherit,inherited,294,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::BlockFullMatrix< N, T >::TransposedBlock Member List . This is the complete list of members for sofa::linearalgebra::BlockFullMatrix< N, T >::TransposedBlock, including all inherited members. msofa::linearalgebra::BlockFullMatrix< N, T >::TransposedBlock; operator*(const type::Vec< BSIZE, Real > &v)sofa::linearalgebra::BlockFullMatrix< N, T >::TransposedBlockinline; operator-() constsofa::linearalgebra::BlockFullMatrix< N, T >::TransposedBlockinline; TransposedBlock(const sofa::type::Mat< BSIZE, BSIZE, Real > &m_a)sofa::linearalgebra::BlockFullMatrix< N, T >::TransposedBlockinline. Generated on Mon Nov 11 2024 03:31:08 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_transposed_block-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_transposed_block-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector-members.html:252,Modifiability,inherit,inherited,252,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::BlockVector< N, T > Member List . This is the complete list of members for sofa::linearalgebra::BlockVector< N, T >, including all inherited members. add(Index i, SReal v) overridesofa::linearalgebra::FullVector< T >inlinevirtual; sofa::linearalgebra::BaseVector::add(Index i0, Index n, const float *src)sofa::linearalgebra::BaseVectorinlinevirtual; sofa::linearalgebra::BaseVector::add(Index i0, Index n, const double *src)sofa::linearalgebra::BaseVectorinlinevirtual; sofa::linearalgebra::BaseVector::add(Index i0, Index n, const int *src)sofa::linearalgebra::BaseVectorinlinevirtual; addDefaultImpl(Index i0, Index n, const T *src)sofa::linearalgebra::BaseVectorinlineprotected; allocsizesofa::linearalgebra::FullVector< T >protected; asub(Index bi, Index) constsofa::linearalgebra::BlockVector< N, T >; asub(Index bi, Index)sofa::linearalgebra::BlockVector< N, T >; begin()sofa::linearalgebra::FullVector< T >inline; begin() constsofa::linearalgebra::FullVector< T >inline; BlockVector()sofa::linearalgebra::BlockVector< N, T >; BlockVector(Index n)sofa::linearalgebra::BlockVector< N, T >explicit; capacity() constsofa::linearalgebra::FullVector< T >inline; checkIndex(Index n) constsofa::linearalgebra::FullVector< T >protected; clear() overridesofa::linearalgebra::FullVector< T >virtual; clear(Index dim) overridesofa::linearalgebra::FullVector< T >virtual; const_iterator typedefsofa::linearalgebra::BlockVector< N, T >; ConstIterator typedefsofa::linearalgebra::FullVector< T >; cursizesofa::linearalgebra::FullVector< T >protected; datasofa::linearalgebra::FullVector< T >protected; dot(const FullVector< Real > &a) constsofa::linearalgebra::FullVector< T >; element(Index i) const overridesofa::linearalgebra::FullVector< T >inlinevirtual; ELEMENT_FLOAT enum valuesofa::linearalgebra::BaseVector; ELEMENT_INT enum valuesofa::linearalgebra::BaseVector; ELEMENT_UNKNOWN ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector-members.html:1356,Usability,clear,clear,1356,"inearalgebra::BaseVector::add(Index i0, Index n, const float *src)sofa::linearalgebra::BaseVectorinlinevirtual; sofa::linearalgebra::BaseVector::add(Index i0, Index n, const double *src)sofa::linearalgebra::BaseVectorinlinevirtual; sofa::linearalgebra::BaseVector::add(Index i0, Index n, const int *src)sofa::linearalgebra::BaseVectorinlinevirtual; addDefaultImpl(Index i0, Index n, const T *src)sofa::linearalgebra::BaseVectorinlineprotected; allocsizesofa::linearalgebra::FullVector< T >protected; asub(Index bi, Index) constsofa::linearalgebra::BlockVector< N, T >; asub(Index bi, Index)sofa::linearalgebra::BlockVector< N, T >; begin()sofa::linearalgebra::FullVector< T >inline; begin() constsofa::linearalgebra::FullVector< T >inline; BlockVector()sofa::linearalgebra::BlockVector< N, T >; BlockVector(Index n)sofa::linearalgebra::BlockVector< N, T >explicit; capacity() constsofa::linearalgebra::FullVector< T >inline; checkIndex(Index n) constsofa::linearalgebra::FullVector< T >protected; clear() overridesofa::linearalgebra::FullVector< T >virtual; clear(Index dim) overridesofa::linearalgebra::FullVector< T >virtual; const_iterator typedefsofa::linearalgebra::BlockVector< N, T >; ConstIterator typedefsofa::linearalgebra::FullVector< T >; cursizesofa::linearalgebra::FullVector< T >protected; datasofa::linearalgebra::FullVector< T >protected; dot(const FullVector< Real > &a) constsofa::linearalgebra::FullVector< T >; element(Index i) const overridesofa::linearalgebra::FullVector< T >inlinevirtual; ELEMENT_FLOAT enum valuesofa::linearalgebra::BaseVector; ELEMENT_INT enum valuesofa::linearalgebra::BaseVector; ELEMENT_UNKNOWN enum valuesofa::linearalgebra::BaseVector; elements(Index i0, Index n, float *src) constsofa::linearalgebra::BaseVectorinlinevirtual; elements(Index i0, Index n, double *src) constsofa::linearalgebra::BaseVectorinlinevirtual; elements(Index i0, Index n, int *src) constsofa::linearalgebra::BaseVectorinlinevirtual; elementsDefaultImpl(Index i0, Index n, T *b",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector-members.html:1417,Usability,clear,clear,1417,"*src)sofa::linearalgebra::BaseVectorinlinevirtual; sofa::linearalgebra::BaseVector::add(Index i0, Index n, const double *src)sofa::linearalgebra::BaseVectorinlinevirtual; sofa::linearalgebra::BaseVector::add(Index i0, Index n, const int *src)sofa::linearalgebra::BaseVectorinlinevirtual; addDefaultImpl(Index i0, Index n, const T *src)sofa::linearalgebra::BaseVectorinlineprotected; allocsizesofa::linearalgebra::FullVector< T >protected; asub(Index bi, Index) constsofa::linearalgebra::BlockVector< N, T >; asub(Index bi, Index)sofa::linearalgebra::BlockVector< N, T >; begin()sofa::linearalgebra::FullVector< T >inline; begin() constsofa::linearalgebra::FullVector< T >inline; BlockVector()sofa::linearalgebra::BlockVector< N, T >; BlockVector(Index n)sofa::linearalgebra::BlockVector< N, T >explicit; capacity() constsofa::linearalgebra::FullVector< T >inline; checkIndex(Index n) constsofa::linearalgebra::FullVector< T >protected; clear() overridesofa::linearalgebra::FullVector< T >virtual; clear(Index dim) overridesofa::linearalgebra::FullVector< T >virtual; const_iterator typedefsofa::linearalgebra::BlockVector< N, T >; ConstIterator typedefsofa::linearalgebra::FullVector< T >; cursizesofa::linearalgebra::FullVector< T >protected; datasofa::linearalgebra::FullVector< T >protected; dot(const FullVector< Real > &a) constsofa::linearalgebra::FullVector< T >; element(Index i) const overridesofa::linearalgebra::FullVector< T >inlinevirtual; ELEMENT_FLOAT enum valuesofa::linearalgebra::BaseVector; ELEMENT_INT enum valuesofa::linearalgebra::BaseVector; ELEMENT_UNKNOWN enum valuesofa::linearalgebra::BaseVector; elements(Index i0, Index n, float *src) constsofa::linearalgebra::BaseVectorinlinevirtual; elements(Index i0, Index n, double *src) constsofa::linearalgebra::BaseVectorinlinevirtual; elements(Index i0, Index n, int *src) constsofa::linearalgebra::BaseVectorinlinevirtual; elementsDefaultImpl(Index i0, Index n, T *buffer) constsofa::linearalgebra::BaseVectorinlineprotected; E",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html:696,Modifiability,inherit,inherited,696,"﻿. SOFA API: sofa::linearalgebra::BlockVector< N, T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Member Functions |; List of all members . sofa::linearalgebra::BlockVector< N, T > Class Template Reference . #include <BlockVector.h>. Inheritance diagram for sofa::linearalgebra::BlockVector< N, T >:. [legend]. Classes; class  Block;  . Public Member Functions;  BlockVector ();  ;  BlockVector (Index n);  ; virtual ~BlockVector ();  ; const Block & sub (Index i, Index) const;  ; Block & sub (Index i, Index);  ; const Block & asub (Index bi, Index) const;  ; Block & asub (Index bi, Index);  ;  Public Member Functions inherited from sofa::linearalgebra::FullVector< T >;  FullVector ();  ;  FullVector (const FullVector &vect);  ;  FullVector (Index n);  ;  FullVector (T *ptr, Index n);  ;  FullVector (T *ptr, Index n, Index nmax);  ;  ~FullVector () override;  ; T * ptr ();  ; const T * ptr () const;  ; void setptr (T *p);  ; Index capacity () const;  ; Iterator begin ();  ; Iterator end ();  ; ConstIterator begin () const;  ; ConstIterator end () const;  ; void fastResize (Index dim);  ; void resize (Index dim) override;  Resize the vector, and reset all values to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; void swap (FullVector< T > &v);  ; void clear (Index dim) override;  Reset the value of element i to 0. More...;  ; T & operator[] (Index i);  ; const T & operator[] (Index i) const;  ; SReal element (Index i) const override;  Read the value of element i. More...;  ; void set (Index i, SReal v) override;  Write the value of element i. More...;  ; void add (Index i, SReal v) override;  Add v to the existing value of element i. More...;  ; Index size () const override;  Number of elements. More...;  ; FullVector< T > sub (Index i, Index n);  ; template<class TV > ; void getsub (Index i, Index n, TV &v);  ; template<class TV > ; void setsub (Index i, Index n, const TV",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html:2624,Modifiability,inherit,inherited,2624,"v to the existing value of element i. More...;  ; Index size () const override;  Number of elements. More...;  ; FullVector< T > sub (Index i, Index n);  ; template<class TV > ; void getsub (Index i, Index n, TV &v);  ; template<class TV > ; void setsub (Index i, Index n, const TV &v);  ; void operator= (const FullVector< T > &a);  v = a More...;  ; void operator= (const T &a);  ; void operator+= (const FullVector< Real > &a);  v += a More...;  ; void operator-= (const FullVector< Real > &a);  v -= a More...;  ; void eq (const FullVector< Real > &a, Real f);  v = a*f More...;  ; void eq (const FullVector< Real > &a, const FullVector< Real > &b, Real f=1.0);  v = a+b*f More...;  ; void peq (const FullVector< Real > &a, Real f);  v += a*f More...;  ; void operator*= (Real f);  v *= f More...;  ; Real dot (const FullVector< Real > &a) const;  ; double norm () const;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseVector; virtual ~BaseVector ();  ; virtual const float * elements (Index i0, Index n, float *src) const;  Get the values of n elements, starting at element i0, into given float buffer, or return the pointer to the data if the in-memory format is compatible. More...;  ; virtual const double * elements (Index i0, Index n, double *src) const;  Get the values of n elements, starting at element i0, into given double buffer, or return the pointer to the data if the in-memory format is compatible. More...;  ; virtual const int * elements (Index i0, Index n, int *src) const;  Get the values of n elements, starting at element i0, into given int buffer, or return the pointer to the data if the in-memory format is compatible. More...;  ; virtual void set (Index i0, Index n, const float *src);  Write the values of n float elements, starting at element i0. More...;  ; virtual void set (Index i0, Index n, const double *src);  Write the values of n double elements, starting at element i0. More...;  ; virtual void set (Index i0, Index n, const int *src);  W",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html:4480,Modifiability,inherit,inherited,4480,"..;  ; virtual void add (Index i0, Index n, const float *src);  Add to the values of n float elements, starting at element i0. More...;  ; virtual void add (Index i0, Index n, const double *src);  Add to the values of n double elements, starting at element i0. More...;  ; virtual void add (Index i0, Index n, const int *src);  Add to the values of n int elements, starting at element i0. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual bool isFull () const;  Return true if this vector is full, i.a. all elements are stored in memory. More...;  ; bool isSparse () const;  . Additional Inherited Members;  Protected Attributes inherited from sofa::linearalgebra::FullVector< T >; T * data;  ; Index cursize;  ; Index allocsize;  ;  Static Public Member Functions inherited from sofa::linearalgebra::FullVector< T >; static const char * Name ();  ;  Protected Member Functions inherited from sofa::linearalgebra::FullVector< T >; void checkIndex (Index n) const;  ;  Protected Member Functions inherited from sofa::linearalgebra::BaseVector; template<class T > ; const T * elementsDefaultImpl (Index i0, Index n, T *buffer) const;  ; template<class T > ; void setDefaultImpl (Index i0, Index n, const T *src);  ; template<class T > ; void addDefaultImpl (Index i0, Index n, const T *src);  . Constructor details. ◆ BlockVector() [1/2]. template<std::size_t N, typename T > . sofa::linearalgebra::BlockVector< N, T >::BlockVector. ◆ BlockVector() [2/2]. template<std::size_t N, typename T > . sofa::linearalgebra::BlockVector< N, T >::BlockVector ; (; Index ; n). explicit . ◆ ~BlockVector(). template<std::size_t N, typename T > . sofa::linearalgebra::BlockVector< N, T >::~BlockVector. virtual . Function details. ◆ asub() [1/2]. template<std::size_t N, typename T > . BlockVector< N, T >::Block & sofa::linearalgebra::BlockVector< N, T >::asub ; (; Index ; bi, . Index ;  . ). ◆ asub() [2/2]. template<std::size_t N, typename T > .",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html:4616,Modifiability,inherit,inherited,4616,"..;  ; virtual void add (Index i0, Index n, const float *src);  Add to the values of n float elements, starting at element i0. More...;  ; virtual void add (Index i0, Index n, const double *src);  Add to the values of n double elements, starting at element i0. More...;  ; virtual void add (Index i0, Index n, const int *src);  Add to the values of n int elements, starting at element i0. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual bool isFull () const;  Return true if this vector is full, i.a. all elements are stored in memory. More...;  ; bool isSparse () const;  . Additional Inherited Members;  Protected Attributes inherited from sofa::linearalgebra::FullVector< T >; T * data;  ; Index cursize;  ; Index allocsize;  ;  Static Public Member Functions inherited from sofa::linearalgebra::FullVector< T >; static const char * Name ();  ;  Protected Member Functions inherited from sofa::linearalgebra::FullVector< T >; void checkIndex (Index n) const;  ;  Protected Member Functions inherited from sofa::linearalgebra::BaseVector; template<class T > ; const T * elementsDefaultImpl (Index i0, Index n, T *buffer) const;  ; template<class T > ; void setDefaultImpl (Index i0, Index n, const T *src);  ; template<class T > ; void addDefaultImpl (Index i0, Index n, const T *src);  . Constructor details. ◆ BlockVector() [1/2]. template<std::size_t N, typename T > . sofa::linearalgebra::BlockVector< N, T >::BlockVector. ◆ BlockVector() [2/2]. template<std::size_t N, typename T > . sofa::linearalgebra::BlockVector< N, T >::BlockVector ; (; Index ; n). explicit . ◆ ~BlockVector(). template<std::size_t N, typename T > . sofa::linearalgebra::BlockVector< N, T >::~BlockVector. virtual . Function details. ◆ asub() [1/2]. template<std::size_t N, typename T > . BlockVector< N, T >::Block & sofa::linearalgebra::BlockVector< N, T >::asub ; (; Index ; bi, . Index ;  . ). ◆ asub() [2/2]. template<std::size_t N, typename T > .",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html:4729,Modifiability,inherit,inherited,4729,"..;  ; virtual void add (Index i0, Index n, const float *src);  Add to the values of n float elements, starting at element i0. More...;  ; virtual void add (Index i0, Index n, const double *src);  Add to the values of n double elements, starting at element i0. More...;  ; virtual void add (Index i0, Index n, const int *src);  Add to the values of n int elements, starting at element i0. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual bool isFull () const;  Return true if this vector is full, i.a. all elements are stored in memory. More...;  ; bool isSparse () const;  . Additional Inherited Members;  Protected Attributes inherited from sofa::linearalgebra::FullVector< T >; T * data;  ; Index cursize;  ; Index allocsize;  ;  Static Public Member Functions inherited from sofa::linearalgebra::FullVector< T >; static const char * Name ();  ;  Protected Member Functions inherited from sofa::linearalgebra::FullVector< T >; void checkIndex (Index n) const;  ;  Protected Member Functions inherited from sofa::linearalgebra::BaseVector; template<class T > ; const T * elementsDefaultImpl (Index i0, Index n, T *buffer) const;  ; template<class T > ; void setDefaultImpl (Index i0, Index n, const T *src);  ; template<class T > ; void addDefaultImpl (Index i0, Index n, const T *src);  . Constructor details. ◆ BlockVector() [1/2]. template<std::size_t N, typename T > . sofa::linearalgebra::BlockVector< N, T >::BlockVector. ◆ BlockVector() [2/2]. template<std::size_t N, typename T > . sofa::linearalgebra::BlockVector< N, T >::BlockVector ; (; Index ; n). explicit . ◆ ~BlockVector(). template<std::size_t N, typename T > . sofa::linearalgebra::BlockVector< N, T >::~BlockVector. virtual . Function details. ◆ asub() [1/2]. template<std::size_t N, typename T > . BlockVector< N, T >::Block & sofa::linearalgebra::BlockVector< N, T >::asub ; (; Index ; bi, . Index ;  . ). ◆ asub() [2/2]. template<std::size_t N, typename T > .",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html:4846,Modifiability,inherit,inherited,4846,"..;  ; virtual void add (Index i0, Index n, const float *src);  Add to the values of n float elements, starting at element i0. More...;  ; virtual void add (Index i0, Index n, const double *src);  Add to the values of n double elements, starting at element i0. More...;  ; virtual void add (Index i0, Index n, const int *src);  Add to the values of n int elements, starting at element i0. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual bool isFull () const;  Return true if this vector is full, i.a. all elements are stored in memory. More...;  ; bool isSparse () const;  . Additional Inherited Members;  Protected Attributes inherited from sofa::linearalgebra::FullVector< T >; T * data;  ; Index cursize;  ; Index allocsize;  ;  Static Public Member Functions inherited from sofa::linearalgebra::FullVector< T >; static const char * Name ();  ;  Protected Member Functions inherited from sofa::linearalgebra::FullVector< T >; void checkIndex (Index n) const;  ;  Protected Member Functions inherited from sofa::linearalgebra::BaseVector; template<class T > ; const T * elementsDefaultImpl (Index i0, Index n, T *buffer) const;  ; template<class T > ; void setDefaultImpl (Index i0, Index n, const T *src);  ; template<class T > ; void addDefaultImpl (Index i0, Index n, const T *src);  . Constructor details. ◆ BlockVector() [1/2]. template<std::size_t N, typename T > . sofa::linearalgebra::BlockVector< N, T >::BlockVector. ◆ BlockVector() [2/2]. template<std::size_t N, typename T > . sofa::linearalgebra::BlockVector< N, T >::BlockVector ; (; Index ; n). explicit . ◆ ~BlockVector(). template<std::size_t N, typename T > . sofa::linearalgebra::BlockVector< N, T >::~BlockVector. virtual . Function details. ◆ asub() [1/2]. template<std::size_t N, typename T > . BlockVector< N, T >::Block & sofa::linearalgebra::BlockVector< N, T >::asub ; (; Index ; bi, . Index ;  . ). ◆ asub() [2/2]. template<std::size_t N, typename T > .",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html:1273,Usability,clear,clear,1273,"e <BlockVector.h>. Inheritance diagram for sofa::linearalgebra::BlockVector< N, T >:. [legend]. Classes; class  Block;  . Public Member Functions;  BlockVector ();  ;  BlockVector (Index n);  ; virtual ~BlockVector ();  ; const Block & sub (Index i, Index) const;  ; Block & sub (Index i, Index);  ; const Block & asub (Index bi, Index) const;  ; Block & asub (Index bi, Index);  ;  Public Member Functions inherited from sofa::linearalgebra::FullVector< T >;  FullVector ();  ;  FullVector (const FullVector &vect);  ;  FullVector (Index n);  ;  FullVector (T *ptr, Index n);  ;  FullVector (T *ptr, Index n, Index nmax);  ;  ~FullVector () override;  ; T * ptr ();  ; const T * ptr () const;  ; void setptr (T *p);  ; Index capacity () const;  ; Iterator begin ();  ; Iterator end ();  ; ConstIterator begin () const;  ; ConstIterator end () const;  ; void fastResize (Index dim);  ; void resize (Index dim) override;  Resize the vector, and reset all values to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; void swap (FullVector< T > &v);  ; void clear (Index dim) override;  Reset the value of element i to 0. More...;  ; T & operator[] (Index i);  ; const T & operator[] (Index i) const;  ; SReal element (Index i) const override;  Read the value of element i. More...;  ; void set (Index i, SReal v) override;  Write the value of element i. More...;  ; void add (Index i, SReal v) override;  Add v to the existing value of element i. More...;  ; Index size () const override;  Number of elements. More...;  ; FullVector< T > sub (Index i, Index n);  ; template<class TV > ; void getsub (Index i, Index n, TV &v);  ; template<class TV > ; void setsub (Index i, Index n, const TV &v);  ; void operator= (const FullVector< T > &a);  v = a More...;  ; void operator= (const T &a);  ; void operator+= (const FullVector< Real > &a);  v += a More...;  ; void operator-= (const FullVector< Real > &a);  v -= a More...;  ; void eq (const FullVector< Real > &a, Real f);  v =",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html:1368,Usability,clear,clear,1368,"egend]. Classes; class  Block;  . Public Member Functions;  BlockVector ();  ;  BlockVector (Index n);  ; virtual ~BlockVector ();  ; const Block & sub (Index i, Index) const;  ; Block & sub (Index i, Index);  ; const Block & asub (Index bi, Index) const;  ; Block & asub (Index bi, Index);  ;  Public Member Functions inherited from sofa::linearalgebra::FullVector< T >;  FullVector ();  ;  FullVector (const FullVector &vect);  ;  FullVector (Index n);  ;  FullVector (T *ptr, Index n);  ;  FullVector (T *ptr, Index n, Index nmax);  ;  ~FullVector () override;  ; T * ptr ();  ; const T * ptr () const;  ; void setptr (T *p);  ; Index capacity () const;  ; Iterator begin ();  ; Iterator end ();  ; ConstIterator begin () const;  ; ConstIterator end () const;  ; void fastResize (Index dim);  ; void resize (Index dim) override;  Resize the vector, and reset all values to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; void swap (FullVector< T > &v);  ; void clear (Index dim) override;  Reset the value of element i to 0. More...;  ; T & operator[] (Index i);  ; const T & operator[] (Index i) const;  ; SReal element (Index i) const override;  Read the value of element i. More...;  ; void set (Index i, SReal v) override;  Write the value of element i. More...;  ; void add (Index i, SReal v) override;  Add v to the existing value of element i. More...;  ; Index size () const override;  Number of elements. More...;  ; FullVector< T > sub (Index i, Index n);  ; template<class TV > ; void getsub (Index i, Index n, TV &v);  ; template<class TV > ; void setsub (Index i, Index n, const TV &v);  ; void operator= (const FullVector< T > &a);  v = a More...;  ; void operator= (const T &a);  ; void operator+= (const FullVector< Real > &a);  v += a More...;  ; void operator-= (const FullVector< Real > &a);  v -= a More...;  ; void eq (const FullVector< Real > &a, Real f);  v = a*f More...;  ; void eq (const FullVector< Real > &a, const FullVector< Real > &b, Real",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block-members.html:266,Modifiability,inherit,inherited,266,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::BlockVector< N, T >::Block Member List . This is the complete list of members for sofa::linearalgebra::BlockVector< N, T >::Block, including all inherited members. ArrayType typedefsofa::type::Vec< N, T >; assign(const T &value) noexceptsofa::type::Vec< N, T >inline; back()sofa::type::Vec< N, T >inline; back() constsofa::type::Vec< N, T >inline; begin() noexceptsofa::type::Vec< N, T >inline; begin() const noexceptsofa::type::Vec< N, T >inline; clear() noexceptsofa::type::Vec< N, T >inline; const_iterator typedefsofa::type::Vec< N, T >; const_reference typedefsofa::type::Vec< N, T >; cross(const Vec< 3, R > &b) const noexceptsofa::type::Vec< N, T >inline; data() const noexceptsofa::type::Vec< N, T >inline; difference_type typedefsofa::type::Vec< N, T >; divscalar(const T f) const noexceptsofa::type::Vec< N, T >inline; divscalar(const real2 f) const noexceptsofa::type::Vec< N, T >inline; elemssofa::type::Vec< N, T >; end() noexceptsofa::type::Vec< N, T >inline; end() const noexceptsofa::type::Vec< N, T >inline; eqdivscalar(const T f) noexceptsofa::type::Vec< N, T >inline; eqdivscalar(const real2 f) noexceptsofa::type::Vec< N, T >inline; eqmulscalar(const T f) noexceptsofa::type::Vec< N, T >inline; eqmulscalar(const real2 f) noexceptsofa::type::Vec< N, T >inline; fill(T r) noexceptsofa::type::Vec< N, T >inline; front()sofa::type::Vec< N, T >inline; front() constsofa::type::Vec< N, T >inline; getsub(const Size i, Vec< N2, T > &m) const noexceptsofa::type::Vec< N, T >inline; getsub(const Size i, T &m) const noexceptsofa::type::Vec< N, T >inline; isNormalized(T threshold=std::numeric_limits< T >::epsilon() *(T) 10) constsofa::type::Vec< N, T >inline; iterator typedefsofa::type::Vec< N, T >; linearDivision(const Vec< N, real2 > &v) const noexceptsofa::type::Vec< N, T >inline; linearProduct(const Vec< N, real2 > &v) const noexceptsofa::type::Vec< N, T >inl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block-members.html:569,Usability,clear,clear,569," ArrayType typedefsofa::type::Vec< N, T >; assign(const T &value) noexceptsofa::type::Vec< N, T >inline; back()sofa::type::Vec< N, T >inline; back() constsofa::type::Vec< N, T >inline; begin() noexceptsofa::type::Vec< N, T >inline; begin() const noexceptsofa::type::Vec< N, T >inline; clear() noexceptsofa::type::Vec< N, T >inline; const_iterator typedefsofa::type::Vec< N, T >; const_reference typedefsofa::type::Vec< N, T >; cross(const Vec< 3, R > &b) const noexceptsofa::type::Vec< N, T >inline; data() const noexceptsofa::type::Vec< N, T >inline; difference_type typedefsofa::type::Vec< N, T >; divscalar(const T f) const noexceptsofa::type::Vec< N, T >inline; divscalar(const real2 f) const noexceptsofa::type::Vec< N, T >inline; elemssofa::type::Vec< N, T >; end() noexceptsofa::type::Vec< N, T >inline; end() const noexceptsofa::type::Vec< N, T >inline; eqdivscalar(const T f) noexceptsofa::type::Vec< N, T >inline; eqdivscalar(const real2 f) noexceptsofa::type::Vec< N, T >inline; eqmulscalar(const T f) noexceptsofa::type::Vec< N, T >inline; eqmulscalar(const real2 f) noexceptsofa::type::Vec< N, T >inline; fill(T r) noexceptsofa::type::Vec< N, T >inline; front()sofa::type::Vec< N, T >inline; front() constsofa::type::Vec< N, T >inline; getsub(const Size i, Vec< N2, T > &m) const noexceptsofa::type::Vec< N, T >inline; getsub(const Size i, T &m) const noexceptsofa::type::Vec< N, T >inline; isNormalized(T threshold=std::numeric_limits< T >::epsilon() *(T) 10) constsofa::type::Vec< N, T >inline; iterator typedefsofa::type::Vec< N, T >; linearDivision(const Vec< N, real2 > &v) const noexceptsofa::type::Vec< N, T >inline; linearProduct(const Vec< N, real2 > &v) const noexceptsofa::type::Vec< N, T >inl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html:610,Modifiability,inherit,inherited,610,"﻿. SOFA API: sofa::linearalgebra::BlockVector< N, T >::Block Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::linearalgebra::BlockVector< N, T >::Block Class Reference . #include <BlockVector.h>. Inheritance diagram for sofa::linearalgebra::BlockVector< N, T >::Block:. [legend]. Public Member Functions; Index Nrows () const;  ; void resize (Index);  ; void operator= (const type::Vec< N, T > &v);  ; void operator= (int v);  ; void operator= (float v);  ; void operator= (double v);  ;  Public Member Functions inherited from sofa::type::Vec< N, T >; constexpr Vec ()=default;  Default constructor: sets all values to 0. More...;  ; constexpr Vec (NoInit);  Fast constructor: no initialization. More...;  ; constexpr Vec (const T r1) noexcept;  Specific constructor for 1-element vectors. More...;  ; constexpr Vec (ArgsT &&... r) noexcept;  ;  Vec (const Vec< 3, R > &a, const Vec< 3, T > &b);  Specific constructor for 6-elements vectors, taking two 3-elements vectors. More...;  ; constexpr Vec (const Vec< N-1, T > &v, T r1) noexcept;  Constructor from an N-1 elements vector and an additional value (added at the end). More...;  ; constexpr Vec (const sofa::type::fixed_array< T, N > &p) noexcept;  ; constexpr Vec (const Vec< N2, real2 > &v) noexcept;  Constructor from a different size vector (null default value and ignoring outside entries) More...;  ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; constexpr void set (const T r1) noexcept;  Specific set function for 1-element vectors. More...;  ; constexpr void set (const ArgsT... r) noexcept;  ; constexpr void set (const Vec< N2, real2 > &v, T defaultvalue=0) noexcept;  Specific set from a different size vector (given default value and ignored outside entries) More...;  ; constexpr T & x () noexcept;  Special access to first element. M",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html:6738,Modifiability,inherit,inherited,6738,"T) 10) const;  return true if norm()==1 More...;  ; constexpr Vec cross (const Vec< 3, R > &b) const noexcept;  ; constexpr T sum () const noexcept;  sum of all elements of the vector More...;  ; constexpr bool operator== (const Vec &b) const noexcept;  ; constexpr bool operator!= (const Vec &b) const noexcept;  ; constexpr reference operator[] (size_type i);  ; constexpr const_reference operator[] (size_type i) const;  ; constexpr const T * data () const noexcept;  ; constexpr iterator begin () noexcept;  ; constexpr const_iterator begin () const noexcept;  ; constexpr iterator end () noexcept;  ; constexpr const_iterator end () const noexcept;  ; constexpr reference front ();  ; constexpr const_reference front () const;  ; constexpr reference back ();  ; constexpr const_reference back () const;  . Additional Inherited Members;  Public Attributes inherited from sofa::type::Vec< N, T >; ArrayType elems;  ;  Static Public Attributes inherited from sofa::type::Vec< N, T >; static constexpr sofa::Size static_size;  ; static constexpr Size total_size;  Compile-time constant specifying the number of scalars within this vector (equivalent to static_size and size() method) More...;  ; static constexpr Size spatial_dimensions;  Compile-time constant specifying the number of dimensions of space (equivalent to total_size here) More...;  ;  Static Public Member Functions inherited from sofa::type::Vec< N, T >; static constexpr sofa::Size size ();  . Function details. ◆ Nrows(). template<std::size_t N, typename T > . Index sofa::linearalgebra::BlockVector< N, T >::Block::Nrows ; (; ); const. inline . ◆ operator=() [1/4]. template<std::size_t N, typename T > . void sofa::linearalgebra::BlockVector< N, T >::Block::operator= ; (; const type::Vec< N, T > & ; v). inline . ◆ operator=() [2/4]. template<std::size_t N, typename T > . void sofa::linearalgebra::BlockVector< N, T >::Block::operator= ; (; double ; v). inline . ◆ operator=() [3/4]. template<std::size_t N, typename T > . voi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html:6824,Modifiability,inherit,inherited,6824,"T) 10) const;  return true if norm()==1 More...;  ; constexpr Vec cross (const Vec< 3, R > &b) const noexcept;  ; constexpr T sum () const noexcept;  sum of all elements of the vector More...;  ; constexpr bool operator== (const Vec &b) const noexcept;  ; constexpr bool operator!= (const Vec &b) const noexcept;  ; constexpr reference operator[] (size_type i);  ; constexpr const_reference operator[] (size_type i) const;  ; constexpr const T * data () const noexcept;  ; constexpr iterator begin () noexcept;  ; constexpr const_iterator begin () const noexcept;  ; constexpr iterator end () noexcept;  ; constexpr const_iterator end () const noexcept;  ; constexpr reference front ();  ; constexpr const_reference front () const;  ; constexpr reference back ();  ; constexpr const_reference back () const;  . Additional Inherited Members;  Public Attributes inherited from sofa::type::Vec< N, T >; ArrayType elems;  ;  Static Public Attributes inherited from sofa::type::Vec< N, T >; static constexpr sofa::Size static_size;  ; static constexpr Size total_size;  Compile-time constant specifying the number of scalars within this vector (equivalent to static_size and size() method) More...;  ; static constexpr Size spatial_dimensions;  Compile-time constant specifying the number of dimensions of space (equivalent to total_size here) More...;  ;  Static Public Member Functions inherited from sofa::type::Vec< N, T >; static constexpr sofa::Size size ();  . Function details. ◆ Nrows(). template<std::size_t N, typename T > . Index sofa::linearalgebra::BlockVector< N, T >::Block::Nrows ; (; ); const. inline . ◆ operator=() [1/4]. template<std::size_t N, typename T > . void sofa::linearalgebra::BlockVector< N, T >::Block::operator= ; (; const type::Vec< N, T > & ; v). inline . ◆ operator=() [2/4]. template<std::size_t N, typename T > . void sofa::linearalgebra::BlockVector< N, T >::Block::operator= ; (; double ; v). inline . ◆ operator=() [3/4]. template<std::size_t N, typename T > . voi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html:7261,Modifiability,inherit,inherited,7261,"ize_type i) const;  ; constexpr const T * data () const noexcept;  ; constexpr iterator begin () noexcept;  ; constexpr const_iterator begin () const noexcept;  ; constexpr iterator end () noexcept;  ; constexpr const_iterator end () const noexcept;  ; constexpr reference front ();  ; constexpr const_reference front () const;  ; constexpr reference back ();  ; constexpr const_reference back () const;  . Additional Inherited Members;  Public Attributes inherited from sofa::type::Vec< N, T >; ArrayType elems;  ;  Static Public Attributes inherited from sofa::type::Vec< N, T >; static constexpr sofa::Size static_size;  ; static constexpr Size total_size;  Compile-time constant specifying the number of scalars within this vector (equivalent to static_size and size() method) More...;  ; static constexpr Size spatial_dimensions;  Compile-time constant specifying the number of dimensions of space (equivalent to total_size here) More...;  ;  Static Public Member Functions inherited from sofa::type::Vec< N, T >; static constexpr sofa::Size size ();  . Function details. ◆ Nrows(). template<std::size_t N, typename T > . Index sofa::linearalgebra::BlockVector< N, T >::Block::Nrows ; (; ); const. inline . ◆ operator=() [1/4]. template<std::size_t N, typename T > . void sofa::linearalgebra::BlockVector< N, T >::Block::operator= ; (; const type::Vec< N, T > & ; v). inline . ◆ operator=() [2/4]. template<std::size_t N, typename T > . void sofa::linearalgebra::BlockVector< N, T >::Block::operator= ; (; double ; v). inline . ◆ operator=() [3/4]. template<std::size_t N, typename T > . void sofa::linearalgebra::BlockVector< N, T >::Block::operator= ; (; float ; v). inline . ◆ operator=() [4/4]. template<std::size_t N, typename T > . void sofa::linearalgebra::BlockVector< N, T >::Block::operator= ; (; int ; v). inline . ◆ resize(). template<std::size_t N, typename T > . void sofa::linearalgebra::BlockVector< N, T >::Block::resize ; (; Index ; ). inline . sofalinearalgebraBlockVectorBloc",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html:1975,Security,access,access,1975,"> &a, const Vec< 3, T > &b);  Specific constructor for 6-elements vectors, taking two 3-elements vectors. More...;  ; constexpr Vec (const Vec< N-1, T > &v, T r1) noexcept;  Constructor from an N-1 elements vector and an additional value (added at the end). More...;  ; constexpr Vec (const sofa::type::fixed_array< T, N > &p) noexcept;  ; constexpr Vec (const Vec< N2, real2 > &v) noexcept;  Constructor from a different size vector (null default value and ignoring outside entries) More...;  ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; constexpr void set (const T r1) noexcept;  Specific set function for 1-element vectors. More...;  ; constexpr void set (const ArgsT... r) noexcept;  ; constexpr void set (const Vec< N2, real2 > &v, T defaultvalue=0) noexcept;  Specific set from a different size vector (given default value and ignored outside entries) More...;  ; constexpr T & x () noexcept;  Special access to first element. More...;  ; constexpr const T & x () const noexcept;  Special const access to first element. More...;  ; constexpr T & y () noexcept;  Special access to second element. More...;  ; constexpr const T & y () const noexcept;  Special const access to second element. More...;  ; constexpr T & z () noexcept;  Special access to third element. More...;  ; constexpr const T & z () const noexcept;  Special const access to third element. More...;  ; constexpr T & w () noexcept;  Special access to fourth element. More...;  ; constexpr const T & w () const noexcept;  Special const access to fourth element. More...;  ; constexpr void operator= (const T r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html:2068,Security,access,access,2068,"o 3-elements vectors. More...;  ; constexpr Vec (const Vec< N-1, T > &v, T r1) noexcept;  Constructor from an N-1 elements vector and an additional value (added at the end). More...;  ; constexpr Vec (const sofa::type::fixed_array< T, N > &p) noexcept;  ; constexpr Vec (const Vec< N2, real2 > &v) noexcept;  Constructor from a different size vector (null default value and ignoring outside entries) More...;  ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; constexpr void set (const T r1) noexcept;  Specific set function for 1-element vectors. More...;  ; constexpr void set (const ArgsT... r) noexcept;  ; constexpr void set (const Vec< N2, real2 > &v, T defaultvalue=0) noexcept;  Specific set from a different size vector (given default value and ignored outside entries) More...;  ; constexpr T & x () noexcept;  Special access to first element. More...;  ; constexpr const T & x () const noexcept;  Special const access to first element. More...;  ; constexpr T & y () noexcept;  Special access to second element. More...;  ; constexpr const T & y () const noexcept;  Special const access to second element. More...;  ; constexpr T & z () noexcept;  Special access to third element. More...;  ; constexpr const T & z () const noexcept;  Special const access to third element. More...;  ; constexpr T & w () noexcept;  Special access to fourth element. More...;  ; constexpr const T & w () const noexcept;  Special const access to fourth element. More...;  ; constexpr void operator= (const T r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const T &value) noexcept;  ; constexpr void clear () noexcept;  ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html:2143,Security,access,access,2143,"pt;  Constructor from an N-1 elements vector and an additional value (added at the end). More...;  ; constexpr Vec (const sofa::type::fixed_array< T, N > &p) noexcept;  ; constexpr Vec (const Vec< N2, real2 > &v) noexcept;  Constructor from a different size vector (null default value and ignoring outside entries) More...;  ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; constexpr void set (const T r1) noexcept;  Specific set function for 1-element vectors. More...;  ; constexpr void set (const ArgsT... r) noexcept;  ; constexpr void set (const Vec< N2, real2 > &v, T defaultvalue=0) noexcept;  Specific set from a different size vector (given default value and ignored outside entries) More...;  ; constexpr T & x () noexcept;  Special access to first element. More...;  ; constexpr const T & x () const noexcept;  Special const access to first element. More...;  ; constexpr T & y () noexcept;  Special access to second element. More...;  ; constexpr const T & y () const noexcept;  Special const access to second element. More...;  ; constexpr T & z () noexcept;  Special access to third element. More...;  ; constexpr const T & z () const noexcept;  Special const access to third element. More...;  ; constexpr T & w () noexcept;  Special access to fourth element. More...;  ; constexpr const T & w () const noexcept;  Special const access to fourth element. More...;  ; constexpr void operator= (const T r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const T &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (T r) noexcept;  Sets every",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html:2237,Security,access,access,2237,"d). More...;  ; constexpr Vec (const sofa::type::fixed_array< T, N > &p) noexcept;  ; constexpr Vec (const Vec< N2, real2 > &v) noexcept;  Constructor from a different size vector (null default value and ignoring outside entries) More...;  ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; constexpr void set (const T r1) noexcept;  Specific set function for 1-element vectors. More...;  ; constexpr void set (const ArgsT... r) noexcept;  ; constexpr void set (const Vec< N2, real2 > &v, T defaultvalue=0) noexcept;  Specific set from a different size vector (given default value and ignored outside entries) More...;  ; constexpr T & x () noexcept;  Special access to first element. More...;  ; constexpr const T & x () const noexcept;  Special const access to first element. More...;  ; constexpr T & y () noexcept;  Special access to second element. More...;  ; constexpr const T & y () const noexcept;  Special const access to second element. More...;  ; constexpr T & z () noexcept;  Special access to third element. More...;  ; constexpr const T & z () const noexcept;  Special const access to third element. More...;  ; constexpr T & w () noexcept;  Special access to fourth element. More...;  ; constexpr const T & w () const noexcept;  Special const access to fourth element. More...;  ; constexpr void operator= (const T r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const T &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (T r) noexcept;  Sets every element to r. More...;  ; constexpr T & operator() (Size i) noexcept;  Access to i-t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html:2313,Security,access,access,2313,"; constexpr Vec (const Vec< N2, real2 > &v) noexcept;  Constructor from a different size vector (null default value and ignoring outside entries) More...;  ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; constexpr void set (const T r1) noexcept;  Specific set function for 1-element vectors. More...;  ; constexpr void set (const ArgsT... r) noexcept;  ; constexpr void set (const Vec< N2, real2 > &v, T defaultvalue=0) noexcept;  Specific set from a different size vector (given default value and ignored outside entries) More...;  ; constexpr T & x () noexcept;  Special access to first element. More...;  ; constexpr const T & x () const noexcept;  Special const access to first element. More...;  ; constexpr T & y () noexcept;  Special access to second element. More...;  ; constexpr const T & y () const noexcept;  Special const access to second element. More...;  ; constexpr T & z () noexcept;  Special access to third element. More...;  ; constexpr const T & z () const noexcept;  Special const access to third element. More...;  ; constexpr T & w () noexcept;  Special access to fourth element. More...;  ; constexpr const T & w () const noexcept;  Special const access to fourth element. More...;  ; constexpr void operator= (const T r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const T &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (T r) noexcept;  Sets every element to r. More...;  ; constexpr T & operator() (Size i) noexcept;  Access to i-th element. More...;  ; constexpr const T & operator() (Size i) const noexcept;  Const",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html:2406,Security,access,access,2406,"size vector (null default value and ignoring outside entries) More...;  ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; constexpr void set (const T r1) noexcept;  Specific set function for 1-element vectors. More...;  ; constexpr void set (const ArgsT... r) noexcept;  ; constexpr void set (const Vec< N2, real2 > &v, T defaultvalue=0) noexcept;  Specific set from a different size vector (given default value and ignored outside entries) More...;  ; constexpr T & x () noexcept;  Special access to first element. More...;  ; constexpr const T & x () const noexcept;  Special const access to first element. More...;  ; constexpr T & y () noexcept;  Special access to second element. More...;  ; constexpr const T & y () const noexcept;  Special const access to second element. More...;  ; constexpr T & z () noexcept;  Special access to third element. More...;  ; constexpr const T & z () const noexcept;  Special const access to third element. More...;  ; constexpr T & w () noexcept;  Special access to fourth element. More...;  ; constexpr const T & w () const noexcept;  Special const access to fourth element. More...;  ; constexpr void operator= (const T r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const T &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (T r) noexcept;  Sets every element to r. More...;  ; constexpr T & operator() (Size i) noexcept;  Access to i-th element. More...;  ; constexpr const T & operator() (Size i) const noexcept;  Const access to i-th element. More...;  ; constexpr const T * ptr () const noexcept;  Cas",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html:2481,Security,access,access,2481,"ec (const Vec< N, real2 > &p) noexcept;  ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; constexpr void set (const T r1) noexcept;  Specific set function for 1-element vectors. More...;  ; constexpr void set (const ArgsT... r) noexcept;  ; constexpr void set (const Vec< N2, real2 > &v, T defaultvalue=0) noexcept;  Specific set from a different size vector (given default value and ignored outside entries) More...;  ; constexpr T & x () noexcept;  Special access to first element. More...;  ; constexpr const T & x () const noexcept;  Special const access to first element. More...;  ; constexpr T & y () noexcept;  Special access to second element. More...;  ; constexpr const T & y () const noexcept;  Special const access to second element. More...;  ; constexpr T & z () noexcept;  Special access to third element. More...;  ; constexpr const T & z () const noexcept;  Special const access to third element. More...;  ; constexpr T & w () noexcept;  Special access to fourth element. More...;  ; constexpr const T & w () const noexcept;  Special const access to fourth element. More...;  ; constexpr void operator= (const T r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const T &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (T r) noexcept;  Sets every element to r. More...;  ; constexpr T & operator() (Size i) noexcept;  Access to i-th element. More...;  ; constexpr const T & operator() (Size i) const noexcept;  Const access to i-th element. More...;  ; constexpr const T * ptr () const noexcept;  Cast into a const array of values. More...;  ; constexpr T * ptr () noexcept;  Cast int",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html:2575,Security,access,access,2575,"Constructor from an array of values. More...;  ; constexpr void set (const T r1) noexcept;  Specific set function for 1-element vectors. More...;  ; constexpr void set (const ArgsT... r) noexcept;  ; constexpr void set (const Vec< N2, real2 > &v, T defaultvalue=0) noexcept;  Specific set from a different size vector (given default value and ignored outside entries) More...;  ; constexpr T & x () noexcept;  Special access to first element. More...;  ; constexpr const T & x () const noexcept;  Special const access to first element. More...;  ; constexpr T & y () noexcept;  Special access to second element. More...;  ; constexpr const T & y () const noexcept;  Special const access to second element. More...;  ; constexpr T & z () noexcept;  Special access to third element. More...;  ; constexpr const T & z () const noexcept;  Special const access to third element. More...;  ; constexpr T & w () noexcept;  Special access to fourth element. More...;  ; constexpr const T & w () const noexcept;  Special const access to fourth element. More...;  ; constexpr void operator= (const T r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const T &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (T r) noexcept;  Sets every element to r. More...;  ; constexpr T & operator() (Size i) noexcept;  Access to i-th element. More...;  ; constexpr const T & operator() (Size i) const noexcept;  Const access to i-th element. More...;  ; constexpr const T * ptr () const noexcept;  Cast into a const array of values. More...;  ; constexpr T * ptr () noexcept;  Cast into an array of values. More...;  ; constexpr void getsub (const Size i, Vec< N2, T > &",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html:3305,Security,access,access,3305,"pr T & z () noexcept;  Special access to third element. More...;  ; constexpr const T & z () const noexcept;  Special const access to third element. More...;  ; constexpr T & w () noexcept;  Special access to fourth element. More...;  ; constexpr const T & w () const noexcept;  Special const access to fourth element. More...;  ; constexpr void operator= (const T r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const T &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (T r) noexcept;  Sets every element to r. More...;  ; constexpr T & operator() (Size i) noexcept;  Access to i-th element. More...;  ; constexpr const T & operator() (Size i) const noexcept;  Const access to i-th element. More...;  ; constexpr const T * ptr () const noexcept;  Cast into a const array of values. More...;  ; constexpr T * ptr () noexcept;  Cast into an array of values. More...;  ; constexpr void getsub (const Size i, Vec< N2, T > &m) const noexcept;  ; constexpr void getsub (const Size i, T &m) const noexcept;  ; constexpr Vec< N, T > mulscalar (const T f) const noexcept;  ; constexpr Vec< N, T > mulscalar (const real2 f) const noexcept;  Multiplication by a scalar f. More...;  ; constexpr Vec< N, T > operator* (const real2 f) const noexcept;  ; constexpr T operator* (const Vec< N, real2 > &v) const noexcept;  Dot product. More...;  ; constexpr void eqmulscalar (const T f) noexcept;  In-place multiplication by a scalar f. More...;  ; constexpr void eqmulscalar (const real2 f) noexcept;  ; constexpr void operator*= (const real2 f) noexcept;  ; constexpr Vec< N, T > divscalar (const T f) const noexcept;  Division by a scalar f. More...;  ; const",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html:3030,Usability,clear,clear,3030,"texpr const T & x () const noexcept;  Special const access to first element. More...;  ; constexpr T & y () noexcept;  Special access to second element. More...;  ; constexpr const T & y () const noexcept;  Special const access to second element. More...;  ; constexpr T & z () noexcept;  Special access to third element. More...;  ; constexpr const T & z () const noexcept;  Special const access to third element. More...;  ; constexpr T & w () noexcept;  Special access to fourth element. More...;  ; constexpr const T & w () const noexcept;  Special const access to fourth element. More...;  ; constexpr void operator= (const T r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const T &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (T r) noexcept;  Sets every element to r. More...;  ; constexpr T & operator() (Size i) noexcept;  Access to i-th element. More...;  ; constexpr const T & operator() (Size i) const noexcept;  Const access to i-th element. More...;  ; constexpr const T * ptr () const noexcept;  Cast into a const array of values. More...;  ; constexpr T * ptr () noexcept;  Cast into an array of values. More...;  ; constexpr void getsub (const Size i, Vec< N2, T > &m) const noexcept;  ; constexpr void getsub (const Size i, T &m) const noexcept;  ; constexpr Vec< N, T > mulscalar (const T f) const noexcept;  ; constexpr Vec< N, T > mulscalar (const real2 f) const noexcept;  Multiplication by a scalar f. More...;  ; constexpr Vec< N, T > operator* (const real2 f) const noexcept;  ; constexpr T operator* (const Vec< N, real2 > &v) const noexcept;  Dot product. More...;  ; constexpr void eqmulscalar (const T f) noexcept",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix-members.html:248,Modifiability,inherit,inherited,248,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::BTDMatrix< N, T > Member List . This is the complete list of members for sofa::linearalgebra::BTDMatrix< N, T >, including all inherited members. add(Index i, Index j, double v) overridesofa::linearalgebra::BTDMatrix< N, T >virtual; add(Index row, Index col, const type::Mat< BSIZE, BSIZE, Real > &v)sofa::linearalgebra::BTDMatrix< N, T >; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat3x3d &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat3x3f &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat2x2d &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat2x2f &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat6x6d &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat6x6f &_M)sofa::linearalgebra::BaseMatrixvirtual; allocsizesofa::linearalgebra::BTDMatrix< N, T >protected; asub(Index bi, Index bj, Index, Index) constsofa::linearalgebra::BTDMatrix< N, T >; asub(Index bi, Index bj, Index, Index)sofa::linearalgebra::BTDMatrix< N, T >; bAccessorAdd(InternalBlockAccessor *b, Index i, Index j, double v)sofa::linearalgebra::BaseMatrixinlineprotectedvirtual; bAccessorAdd(InternalBlockAccessor *b, const float *buffer)sofa::linearalgebra::BaseMatrixinlineprotectedvirtual; bAccessorAdd(InternalBlockAccessor *b, const double *buffer)sofa::linearalgebra::BaseMatrixinlineprotectedvirtual; bAccessorAdd(InternalBlockAccessor *b, const int *buffer)sofa::linearalgebra::BaseMatrixinlineprotectedvirtual; bAccessorAddDefaultImpl(InternalBlockAccessor *b, const T *buffer)sofa::linearalgebra::BaseMatrixinlineprotected; bAcces",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix-members.html:5634,Usability,clear,clear,5634," Index j, T *buffer) constsofa::linearalgebra::BaseMatrixinline; blocGet(Index i, Index j) constsofa::linearalgebra::BaseMatrixinlinevirtual; blocGetW(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; BlockType typedefsofa::linearalgebra::BTDMatrix< N, T >; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; BSIZE enum valuesofa::linearalgebra::BTDMatrix< N, T >; BTDMatrix()sofa::linearalgebra::BTDMatrix< N, T >; BTDMatrix(Index nbRow, Index nbCol)sofa::linearalgebra::BTDMatrix< N, T >; clear(Index i, Index j) overridesofa::linearalgebra::BTDMatrix< N, T >virtual; clear() overridesofa::linearalgebra::BTDMatrix< N, T >virtual; clearCol(Index j) overridesofa::linearalgebra::BTDMatrix< N, T >virtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::BTDMatrix< N, T >virtual; clearRowCol(Index i) overridesofa::linearalgebra::BTDMatrix< N, T >virtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::BTDMatrix< N, T >virtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprot",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix-members.html:5713,Usability,clear,clear,5713,"i, Index j) constsofa::linearalgebra::BaseMatrixinlinevirtual; blocGetW(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; BlockType typedefsofa::linearalgebra::BTDMatrix< N, T >; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; BSIZE enum valuesofa::linearalgebra::BTDMatrix< N, T >; BTDMatrix()sofa::linearalgebra::BTDMatrix< N, T >; BTDMatrix(Index nbRow, Index nbCol)sofa::linearalgebra::BTDMatrix< N, T >; clear(Index i, Index j) overridesofa::linearalgebra::BTDMatrix< N, T >virtual; clear() overridesofa::linearalgebra::BTDMatrix< N, T >virtual; clearCol(Index j) overridesofa::linearalgebra::BTDMatrix< N, T >virtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::BTDMatrix< N, T >virtual; clearRowCol(Index i) overridesofa::linearalgebra::BTDMatrix< N, T >virtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::BTDMatrix< N, T >virtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix-members.html:5776,Usability,clear,clearCol,5776,"locGetW(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; BlockType typedefsofa::linearalgebra::BTDMatrix< N, T >; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; BSIZE enum valuesofa::linearalgebra::BTDMatrix< N, T >; BTDMatrix()sofa::linearalgebra::BTDMatrix< N, T >; BTDMatrix(Index nbRow, Index nbCol)sofa::linearalgebra::BTDMatrix< N, T >; clear(Index i, Index j) overridesofa::linearalgebra::BTDMatrix< N, T >virtual; clear() overridesofa::linearalgebra::BTDMatrix< N, T >virtual; clearCol(Index j) overridesofa::linearalgebra::BTDMatrix< N, T >virtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::BTDMatrix< N, T >virtual; clearRowCol(Index i) overridesofa::linearalgebra::BTDMatrix< N, T >virtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::BTDMatrix< N, T >virtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBloc",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix-members.html:5849,Usability,clear,clearCols,5849,"ckType typedefsofa::linearalgebra::BTDMatrix< N, T >; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; BSIZE enum valuesofa::linearalgebra::BTDMatrix< N, T >; BTDMatrix()sofa::linearalgebra::BTDMatrix< N, T >; BTDMatrix(Index nbRow, Index nbCol)sofa::linearalgebra::BTDMatrix< N, T >; clear(Index i, Index j) overridesofa::linearalgebra::BTDMatrix< N, T >virtual; clear() overridesofa::linearalgebra::BTDMatrix< N, T >virtual; clearCol(Index j) overridesofa::linearalgebra::BTDMatrix< N, T >virtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::BTDMatrix< N, T >virtual; clearRowCol(Index i) overridesofa::linearalgebra::BTDMatrix< N, T >virtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::BTDMatrix< N, T >virtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData) constsofa::linea",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix-members.html:5928,Usability,clear,clearRow,5928,", const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; BSIZE enum valuesofa::linearalgebra::BTDMatrix< N, T >; BTDMatrix()sofa::linearalgebra::BTDMatrix< N, T >; BTDMatrix(Index nbRow, Index nbCol)sofa::linearalgebra::BTDMatrix< N, T >; clear(Index i, Index j) overridesofa::linearalgebra::BTDMatrix< N, T >virtual; clear() overridesofa::linearalgebra::BTDMatrix< N, T >virtual; clearCol(Index j) overridesofa::linearalgebra::BTDMatrix< N, T >virtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::BTDMatrix< N, T >virtual; clearRowCol(Index i) overridesofa::linearalgebra::BTDMatrix< N, T >virtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::BTDMatrix< N, T >virtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, voi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix-members.html:6001,Usability,clear,clearRowCol,6001,") constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; BSIZE enum valuesofa::linearalgebra::BTDMatrix< N, T >; BTDMatrix()sofa::linearalgebra::BTDMatrix< N, T >; BTDMatrix(Index nbRow, Index nbCol)sofa::linearalgebra::BTDMatrix< N, T >; clear(Index i, Index j) overridesofa::linearalgebra::BTDMatrix< N, T >virtual; clear() overridesofa::linearalgebra::BTDMatrix< N, T >virtual; clearCol(Index j) overridesofa::linearalgebra::BTDMatrix< N, T >virtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::BTDMatrix< N, T >virtual; clearRowCol(Index i) overridesofa::linearalgebra::BTDMatrix< N, T >virtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::BTDMatrix< N, T >virtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, void *internalPtr) constsofa::linearalgebra::BaseMatrixinlineprotected; creat",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix-members.html:6077,Usability,clear,clearRows,6077,"tsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; BSIZE enum valuesofa::linearalgebra::BTDMatrix< N, T >; BTDMatrix()sofa::linearalgebra::BTDMatrix< N, T >; BTDMatrix(Index nbRow, Index nbCol)sofa::linearalgebra::BTDMatrix< N, T >; clear(Index i, Index j) overridesofa::linearalgebra::BTDMatrix< N, T >virtual; clear() overridesofa::linearalgebra::BTDMatrix< N, T >virtual; clearCol(Index j) overridesofa::linearalgebra::BTDMatrix< N, T >virtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::BTDMatrix< N, T >virtual; clearRowCol(Index i) overridesofa::linearalgebra::BTDMatrix< N, T >virtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::BTDMatrix< N, T >virtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, void *internalPtr) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, Index internalData) constsofa::linearalge",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix-members.html:6156,Usability,clear,clearRowsCols,6156,"earalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; BSIZE enum valuesofa::linearalgebra::BTDMatrix< N, T >; BTDMatrix()sofa::linearalgebra::BTDMatrix< N, T >; BTDMatrix(Index nbRow, Index nbCol)sofa::linearalgebra::BTDMatrix< N, T >; clear(Index i, Index j) overridesofa::linearalgebra::BTDMatrix< N, T >virtual; clear() overridesofa::linearalgebra::BTDMatrix< N, T >virtual; clearCol(Index j) overridesofa::linearalgebra::BTDMatrix< N, T >virtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::BTDMatrix< N, T >virtual; clearRowCol(Index i) overridesofa::linearalgebra::BTDMatrix< N, T >virtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::BTDMatrix< N, T >virtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, void *internalPtr) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; createRowBlockConstIterator(void *internalPtr) co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html:2955,Modifiability,inherit,inherited,2955,"rix (Index bi, Index bj, Index nrow, Index ncol, const B &m);  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; template<std::size_t M = N, std::enable_if_t<(M > 3), int > = 0> ; void add (Index row, Index col, const type::Mat< BSIZE, BSIZE, Real > &v);  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f mat",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html:9523,Modifiability,inherit,inherited,9523,,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html:13946,Modifiability,inherit,inherited,13946,"tor *it, const InternalColBlockIterator *it2) const;  ; ColBlockConstIterator createColBlockConstIterator (Index row, void *internalPtr) const;  ; ColBlockConstIterator createColBlockConstIterator (Index row, Index internalData) const;  ; virtual void itCopyRowBlock (InternalRowBlockIterator *) const;  ; virtual void itDeleteRowBlock (const InternalRowBlockIterator *) const;  ; virtual Index itAccessRowBlock (InternalRowBlockIterator *it) const;  ; virtual ColBlockConstIterator itBeginRowBlock (InternalRowBlockIterator *it) const;  ; virtual ColBlockConstIterator itEndRowBlock (InternalRowBlockIterator *it) const;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > itRangeRowBlock (InternalRowBlockIterator *it) const;  ; virtual void itIncRowBlock (InternalRowBlockIterator *it) const;  ; virtual void itDecRowBlock (InternalRowBlockIterator *it) const;  ; virtual bool itEqRowBlock (const InternalRowBlockIterator *it, const InternalRowBlockIterator *it2) const;  ; virtual bool itLessRowBlock (const InternalRowBlockIterator *it, const InternalRowBlockIterator *it2) const;  ; RowBlockConstIterator createRowBlockConstIterator (void *internalPtr) const;  ; RowBlockConstIterator createRowBlockConstIterator (Index internalData0, Index internalData1) const;  ;  Static Protected Member Functions inherited from sofa::linearalgebra::BaseMatrix; static InternalBlockAccessor * getInternal (BlockConstAccessor *b);  ; static const InternalBlockAccessor * getInternal (const BlockConstAccessor *b);  ; static InternalBlockAccessor * getInternal (BlockAccessor *b);  ; static const InternalBlockAccessor * getInternal (const BlockAccessor *b);  ; static InternalColBlockIterator * getInternal (ColBlockConstIterator *b);  ; static const InternalColBlockIterator * getInternal (const ColBlockConstIterator *b);  ; static InternalRowBlockIterator * getInternal (RowBlockConstIterator *b);  ; static const InternalRowBlockIterator * getInternal (const RowBlockConstIterator *b);  .",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html:3504,Performance,perform,performances,3504,"Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html:3678,Performance,perform,performances,3678,"o 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index i",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html:3852,Performance,perform,performances,3852,"template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *resul",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html:4026,Performance,perform,performances,4026,"Matrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const floa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html:4200,Performance,perform,performances,4200,"ible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply th",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html:4374,Performance,perform,performances,4374,"virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) cons",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html:7761,Security,access,access,7761,"st;  Multiply the transposed matrix by float vector v and add the result in vector result. More...;  ; virtual void opPMulTV (double *result, const double *v) const;  Multiply the transposed matrix by double vector v and add the result in vector result. More...;  ; virtual void opMulTM (BaseMatrix *result, BaseMatrix *m) const;  Multiply the transposed matrix by matrix m and store the result in matrix result. More...;  ; virtual void opAddM (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the matrix to the m matrix and strore the result in m. More...;  ; virtual void opAddMT (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the transposed matrix to the m matrix and strore the result in m. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual MatrixCategory getCategory () const;  ; virtual Index getBlockRows () const;  ; virtual Index getBlockCols () const;  ; virtual Index bRowSize () const;  ; virtual Index bColSize () const;  ; virtual Index getBandWidth () const;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  ; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the give",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html:7854,Security,access,access,7854,"const;  Multiply the transposed matrix by matrix m and store the result in matrix result. More...;  ; virtual void opAddM (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the matrix to the m matrix and strore the result in m. More...;  ; virtual void opAddMT (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the transposed matrix to the m matrix and strore the result in m. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual MatrixCategory getCategory () const;  ; virtual Index getBlockRows () const;  ; virtual Index getBlockCols () const;  ; virtual Index bRowSize () const;  ; virtual Index bColSize () const;  ; virtual Index getBandWidth () const;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  ; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the given row of blocks. More...;  ; virtual ColBlockConstIterator bRowEnd (Index ib) const;  Get the iterator corresponding to the end of the given row of blocks. More...;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > bRowRange (Index ib) const;  Get the iterators corresponding to the beginning and end of ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html:7949,Security,access,access,7949,"tual void opAddM (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the matrix to the m matrix and strore the result in m. More...;  ; virtual void opAddMT (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the transposed matrix to the m matrix and strore the result in m. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual MatrixCategory getCategory () const;  ; virtual Index getBlockRows () const;  ; virtual Index getBlockCols () const;  ; virtual Index bRowSize () const;  ; virtual Index bColSize () const;  ; virtual Index getBandWidth () const;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  ; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the given row of blocks. More...;  ; virtual ColBlockConstIterator bRowEnd (Index ib) const;  Get the iterator corresponding to the end of the given row of blocks. More...;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > bRowRange (Index ib) const;  Get the iterators corresponding to the beginning and end of the given row of blocks. More...;  ; virtual RowBlockConstIterator bRowsBegin () const;  Get the iterator",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html:2470,Usability,clear,clear,2470,"dex bj, Index, Index) const;  ; const Block & sub (Index i, Index j, Index, Index) const;  ; Block & asub (Index bi, Index bj, Index, Index);  ; Block & sub (Index i, Index j, Index, Index);  ; template<class B > ; void getSubMatrix (Index i, Index j, Index nrow, Index ncol, B &m);  ; template<class B > ; void getAlignedSubMatrix (Index bi, Index bj, Index nrow, Index ncol, B &m);  ; template<class B > ; void setSubMatrix (Index i, Index j, Index nrow, Index ncol, const B &m);  ; template<class B > ; void setAlignedSubMatrix (Index bi, Index bj, Index nrow, Index ncol, const B &m);  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; template<std::size_t M = N, std::enable_if_t<(M > 3), int > = 0> ; void add (Index row, Index col, const type::Mat< BSIZE, BSIZE, Real > &v);  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html:2513,Usability,clear,clearRow,2513,"dex bj, Index, Index) const;  ; const Block & sub (Index i, Index j, Index, Index) const;  ; Block & asub (Index bi, Index bj, Index, Index);  ; Block & sub (Index i, Index j, Index, Index);  ; template<class B > ; void getSubMatrix (Index i, Index j, Index nrow, Index ncol, B &m);  ; template<class B > ; void getAlignedSubMatrix (Index bi, Index bj, Index nrow, Index ncol, B &m);  ; template<class B > ; void setSubMatrix (Index i, Index j, Index nrow, Index ncol, const B &m);  ; template<class B > ; void setAlignedSubMatrix (Index bi, Index bj, Index nrow, Index ncol, const B &m);  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; template<std::size_t M = N, std::enable_if_t<(M > 3), int > = 0> ; void add (Index row, Index col, const type::Mat< BSIZE, BSIZE, Real > &v);  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html:2596,Usability,clear,clearCol,2596,"ex, Index);  ; template<class B > ; void getSubMatrix (Index i, Index j, Index nrow, Index ncol, B &m);  ; template<class B > ; void getAlignedSubMatrix (Index bi, Index bj, Index nrow, Index ncol, B &m);  ; template<class B > ; void setSubMatrix (Index i, Index j, Index nrow, Index ncol, const B &m);  ; template<class B > ; void setAlignedSubMatrix (Index bi, Index bj, Index nrow, Index ncol, const B &m);  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; template<std::size_t M = N, std::enable_if_t<(M > 3), int > = 0> ; void add (Index row, Index col, const type::Mat< BSIZE, BSIZE, Real > &v);  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f ma",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html:2682,Usability,clear,clearRowCol,2682,"ncol, B &m);  ; template<class B > ; void getAlignedSubMatrix (Index bi, Index bj, Index nrow, Index ncol, B &m);  ; template<class B > ; void setSubMatrix (Index i, Index j, Index nrow, Index ncol, const B &m);  ; template<class B > ; void setAlignedSubMatrix (Index bi, Index bj, Index nrow, Index ncol, const B &m);  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; template<std::size_t M = N, std::enable_if_t<(M > 3), int > = 0> ; void add (Index row, Index col, const type::Mat< BSIZE, BSIZE, Real > &v);  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html:2779,Usability,clear,clear,2779,"bj, Index nrow, Index ncol, B &m);  ; template<class B > ; void setSubMatrix (Index i, Index j, Index nrow, Index ncol, const B &m);  ; template<class B > ; void setAlignedSubMatrix (Index bi, Index bj, Index nrow, Index ncol, const B &m);  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; template<std::size_t M = N, std::enable_if_t<(M > 3), int > = 0> ; void add (Index row, Index col, const type::Mat< BSIZE, BSIZE, Real > &v);  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html:4413,Usability,clear,clearRows,4413,"a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html:4516,Usability,clear,clearCols,4516,"ndex row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; virtual void opPMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and add t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html:4627,Usability,clear,clearRowsCols,4627,"ter performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; virtual void opPMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and add the result in vector result. More...;  ; virtual void opPMulV (double *result, const double *v) const;  Multiply the matrix by",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html:17100,Usability,clear,clear,17100,"template<std::size_t M, std::enable_if_t<(M > 3), int > > . void sofa::linearalgebra::BTDMatrix< N, T >::add ; (; Index ; row, . Index ; col, . const type::Mat< BSIZE, BSIZE, Real > & ; v . ). Accumulation specialized on contributions of the same size than the blocks. . ◆ asub() [1/2]. template<std::size_t N, typename T > . BTDMatrix< N, T >::Block & sofa::linearalgebra::BTDMatrix< N, T >::asub ; (; Index ; bi, . Index ; bj, . Index ; , . Index ;  . ). ◆ asub() [2/2]. template<std::size_t N, typename T > . const BTDMatrix< N, T >::Block & sofa::linearalgebra::BTDMatrix< N, T >::asub ; (; Index ; bi, . Index ; bj, . Index ; , . Index ;  . ); const. ◆ bloc() [1/2]. template<std::size_t N, typename T > . BTDMatrix< N, T >::Block & sofa::linearalgebra::BTDMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ). ◆ bloc() [2/2]. template<std::size_t N, typename T > . const BTDMatrix< N, T >::Block & sofa::linearalgebra::BTDMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ); const. ◆ clear() [1/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clear ; (; ). overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clear ; (; Index ; i, . Index ; j . ). overridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clearCol ; (; Index ; j). overridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clearRow ; (; Index ; i). overridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clearRowCol ; (; Index ; i).",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html:17199,Usability,clear,clear,17199,"algebra::BTDMatrix< N, T >::add ; (; Index ; row, . Index ; col, . const type::Mat< BSIZE, BSIZE, Real > & ; v . ). Accumulation specialized on contributions of the same size than the blocks. . ◆ asub() [1/2]. template<std::size_t N, typename T > . BTDMatrix< N, T >::Block & sofa::linearalgebra::BTDMatrix< N, T >::asub ; (; Index ; bi, . Index ; bj, . Index ; , . Index ;  . ). ◆ asub() [2/2]. template<std::size_t N, typename T > . const BTDMatrix< N, T >::Block & sofa::linearalgebra::BTDMatrix< N, T >::asub ; (; Index ; bi, . Index ; bj, . Index ; , . Index ;  . ); const. ◆ bloc() [1/2]. template<std::size_t N, typename T > . BTDMatrix< N, T >::Block & sofa::linearalgebra::BTDMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ). ◆ bloc() [2/2]. template<std::size_t N, typename T > . const BTDMatrix< N, T >::Block & sofa::linearalgebra::BTDMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ); const. ◆ clear() [1/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clear ; (; ). overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clear ; (; Index ; i, . Index ; j . ). overridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clearCol ; (; Index ; j). overridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clearRow ; (; Index ; i). overridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clearRowCol ; (; Index ; i). overridevirtual . Reset the value of both row and column i to 0. ; Reimpleme",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html:17302,Usability,clear,clear,17302,"ion specialized on contributions of the same size than the blocks. . ◆ asub() [1/2]. template<std::size_t N, typename T > . BTDMatrix< N, T >::Block & sofa::linearalgebra::BTDMatrix< N, T >::asub ; (; Index ; bi, . Index ; bj, . Index ; , . Index ;  . ). ◆ asub() [2/2]. template<std::size_t N, typename T > . const BTDMatrix< N, T >::Block & sofa::linearalgebra::BTDMatrix< N, T >::asub ; (; Index ; bi, . Index ; bj, . Index ; , . Index ;  . ); const. ◆ bloc() [1/2]. template<std::size_t N, typename T > . BTDMatrix< N, T >::Block & sofa::linearalgebra::BTDMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ). ◆ bloc() [2/2]. template<std::size_t N, typename T > . const BTDMatrix< N, T >::Block & sofa::linearalgebra::BTDMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ); const. ◆ clear() [1/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clear ; (; ). overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clear ; (; Index ; i, . Index ; j . ). overridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clearCol ; (; Index ; j). overridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clearRow ; (; Index ; i). overridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clearRowCol ; (; Index ; i). overridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<std::size_t N, typename T > . BTDMatrix< N, T >::Index sofa:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html:17401,Usability,clear,clear,17401,"]. template<std::size_t N, typename T > . BTDMatrix< N, T >::Block & sofa::linearalgebra::BTDMatrix< N, T >::asub ; (; Index ; bi, . Index ; bj, . Index ; , . Index ;  . ). ◆ asub() [2/2]. template<std::size_t N, typename T > . const BTDMatrix< N, T >::Block & sofa::linearalgebra::BTDMatrix< N, T >::asub ; (; Index ; bi, . Index ; bj, . Index ; , . Index ;  . ); const. ◆ bloc() [1/2]. template<std::size_t N, typename T > . BTDMatrix< N, T >::Block & sofa::linearalgebra::BTDMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ). ◆ bloc() [2/2]. template<std::size_t N, typename T > . const BTDMatrix< N, T >::Block & sofa::linearalgebra::BTDMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ); const. ◆ clear() [1/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clear ; (; ). overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clear ; (; Index ; i, . Index ; j . ). overridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clearCol ; (; Index ; j). overridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clearRow ; (; Index ; i). overridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clearRowCol ; (; Index ; i). overridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<std::size_t N, typename T > . BTDMatrix< N, T >::Index sofa::linearalgebra::BTDMatrix< N, T >::colSize ; (; void ; ); const. overridevirtual .",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html:17512,Usability,clear,clearCol,17512,"bi, . Index ; bj, . Index ; , . Index ;  . ). ◆ asub() [2/2]. template<std::size_t N, typename T > . const BTDMatrix< N, T >::Block & sofa::linearalgebra::BTDMatrix< N, T >::asub ; (; Index ; bi, . Index ; bj, . Index ; , . Index ;  . ); const. ◆ bloc() [1/2]. template<std::size_t N, typename T > . BTDMatrix< N, T >::Block & sofa::linearalgebra::BTDMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ). ◆ bloc() [2/2]. template<std::size_t N, typename T > . const BTDMatrix< N, T >::Block & sofa::linearalgebra::BTDMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ); const. ◆ clear() [1/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clear ; (; ). overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clear ; (; Index ; i, . Index ; j . ). overridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clearCol ; (; Index ; j). overridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clearRow ; (; Index ; i). overridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clearRowCol ; (; Index ; i). overridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<std::size_t N, typename T > . BTDMatrix< N, T >::Index sofa::linearalgebra::BTDMatrix< N, T >::colSize ; (; void ; ); const. overridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ element(). template<std::size_t N, typename T > . SReal so",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html:17608,Usability,clear,clearCol,17608,"t N, typename T > . const BTDMatrix< N, T >::Block & sofa::linearalgebra::BTDMatrix< N, T >::asub ; (; Index ; bi, . Index ; bj, . Index ; , . Index ;  . ); const. ◆ bloc() [1/2]. template<std::size_t N, typename T > . BTDMatrix< N, T >::Block & sofa::linearalgebra::BTDMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ). ◆ bloc() [2/2]. template<std::size_t N, typename T > . const BTDMatrix< N, T >::Block & sofa::linearalgebra::BTDMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ); const. ◆ clear() [1/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clear ; (; ). overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clear ; (; Index ; i, . Index ; j . ). overridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clearCol ; (; Index ; j). overridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clearRow ; (; Index ; i). overridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clearRowCol ; (; Index ; i). overridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<std::size_t N, typename T > . BTDMatrix< N, T >::Index sofa::linearalgebra::BTDMatrix< N, T >::colSize ; (; void ; ); const. overridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ element(). template<std::size_t N, typename T > . SReal sofa::linearalgebra::BTDMatrix< N, T >::element ; (; Index ; i, . Index ; j . ); con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html:17747,Usability,clear,clearRow,17747,"); const. ◆ bloc() [1/2]. template<std::size_t N, typename T > . BTDMatrix< N, T >::Block & sofa::linearalgebra::BTDMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ). ◆ bloc() [2/2]. template<std::size_t N, typename T > . const BTDMatrix< N, T >::Block & sofa::linearalgebra::BTDMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ); const. ◆ clear() [1/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clear ; (; ). overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clear ; (; Index ; i, . Index ; j . ). overridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clearCol ; (; Index ; j). overridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clearRow ; (; Index ; i). overridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clearRowCol ; (; Index ; i). overridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<std::size_t N, typename T > . BTDMatrix< N, T >::Index sofa::linearalgebra::BTDMatrix< N, T >::colSize ; (; void ; ); const. overridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ element(). template<std::size_t N, typename T > . SReal sofa::linearalgebra::BTDMatrix< N, T >::element ; (; Index ; i, . Index ; j . ); const. overridevirtual . Read the value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ getAligned",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html:17843,Usability,clear,clearRow,17843,">::Block & sofa::linearalgebra::BTDMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ). ◆ bloc() [2/2]. template<std::size_t N, typename T > . const BTDMatrix< N, T >::Block & sofa::linearalgebra::BTDMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ); const. ◆ clear() [1/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clear ; (; ). overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clear ; (; Index ; i, . Index ; j . ). overridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clearCol ; (; Index ; j). overridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clearRow ; (; Index ; i). overridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clearRowCol ; (; Index ; i). overridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<std::size_t N, typename T > . BTDMatrix< N, T >::Index sofa::linearalgebra::BTDMatrix< N, T >::colSize ; (; void ; ); const. overridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ element(). template<std::size_t N, typename T > . SReal sofa::linearalgebra::BTDMatrix< N, T >::element ; (; Index ; i, . Index ; j . ); const. overridevirtual . Read the value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ getAlignedSubMatrix(). template<std::size_t N, typename T > . template<class B > . void sofa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html:17979,Usability,clear,clearRowCol,17979,"BTDMatrix< N, T >::Block & sofa::linearalgebra::BTDMatrix< N, T >::bloc ; (; Index ; bi, . Index ; bj . ); const. ◆ clear() [1/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clear ; (; ). overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clear ; (; Index ; i, . Index ; j . ). overridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clearCol ; (; Index ; j). overridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clearRow ; (; Index ; i). overridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clearRowCol ; (; Index ; i). overridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<std::size_t N, typename T > . BTDMatrix< N, T >::Index sofa::linearalgebra::BTDMatrix< N, T >::colSize ; (; void ; ); const. overridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ element(). template<std::size_t N, typename T > . SReal sofa::linearalgebra::BTDMatrix< N, T >::element ; (; Index ; i, . Index ; j . ); const. overridevirtual . Read the value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ getAlignedSubMatrix(). template<std::size_t N, typename T > . template<class B > . void sofa::linearalgebra::BTDMatrix< N, T >::getAlignedSubMatrix ; (; Index ; bi, . Index ; bj, . Index ; nrow, . Index ; ncol, . B & ; m . ). ◆ getSubMatrix(). ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html:18078,Usability,clear,clearRowCol,18078,"bi, . Index ; bj . ); const. ◆ clear() [1/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clear ; (; ). overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clear ; (; Index ; i, . Index ; j . ). overridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clearCol ; (; Index ; j). overridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clearRow ; (; Index ; i). overridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::clearRowCol ; (; Index ; i). overridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<std::size_t N, typename T > . BTDMatrix< N, T >::Index sofa::linearalgebra::BTDMatrix< N, T >::colSize ; (; void ; ); const. overridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ element(). template<std::size_t N, typename T > . SReal sofa::linearalgebra::BTDMatrix< N, T >::element ; (; Index ; i, . Index ; j . ); const. overridevirtual . Read the value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ getAlignedSubMatrix(). template<std::size_t N, typename T > . template<class B > . void sofa::linearalgebra::BTDMatrix< N, T >::getAlignedSubMatrix ; (; Index ; bi, . Index ; bj, . Index ; nrow, . Index ; ncol, . B & ; m . ). ◆ getSubMatrix(). template<std::size_t N, typename T > . template<class B > . void sofa::linearalgebra",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block-members.html:262,Modifiability,inherit,inherited,262,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::BTDMatrix< N, T >::Block Member List . This is the complete list of members for sofa::linearalgebra::BTDMatrix< N, T >::Block, including all inherited members. add(Index i, Index j, const T &v)sofa::linearalgebra::BTDMatrix< N, T >::Blockinline; addTransposed(const Mat< C, L, Real > &m) noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; ArrayLineType typedefsofa::type::Mat< BSIZE, BSIZE, Real >; back()sofa::type::Mat< BSIZE, BSIZE, Real >inline; back() constsofa::type::Mat< BSIZE, BSIZE, Real >inline; begin() noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; begin() const noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; canSelfTranspose(const Mat< S, S, Real > &lhs, const Mat< S, S, Real > &rhs) noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inlinestatic; canSelfTranspose(const Mat< I, J, Real > &, const Mat< J, I, Real > &) noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inlinestatic; clear() noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; Col typedefsofa::type::Mat< BSIZE, BSIZE, Real >; col(Size j) const noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; const_iterator typedefsofa::type::Mat< BSIZE, BSIZE, Real >; const_reference typedefsofa::type::Mat< BSIZE, BSIZE, Real >; data() const noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; difference_type typedefsofa::type::Mat< BSIZE, BSIZE, Real >; element(Index i, Index j) constsofa::linearalgebra::BTDMatrix< N, T >::Blockinline; elemssofa::type::Mat< BSIZE, BSIZE, Real >; end() noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; end() const noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; fill(Real r) noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; front()sofa::type::Mat< BSIZE, BSIZE, Real >inline; front() constsofa::type::Mat< BSIZE, BSIZE, Real >inline; getNbCols() constsofa::type::Mat< BSIZE, BSIZE, Real >inline; getNbLines() constsofa::type::Mat< BSIZE, BSIZE, Real ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block-members.html:1024,Usability,clear,clear,1024," add(Index i, Index j, const T &v)sofa::linearalgebra::BTDMatrix< N, T >::Blockinline; addTransposed(const Mat< C, L, Real > &m) noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; ArrayLineType typedefsofa::type::Mat< BSIZE, BSIZE, Real >; back()sofa::type::Mat< BSIZE, BSIZE, Real >inline; back() constsofa::type::Mat< BSIZE, BSIZE, Real >inline; begin() noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; begin() const noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; canSelfTranspose(const Mat< S, S, Real > &lhs, const Mat< S, S, Real > &rhs) noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inlinestatic; canSelfTranspose(const Mat< I, J, Real > &, const Mat< J, I, Real > &) noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inlinestatic; clear() noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; Col typedefsofa::type::Mat< BSIZE, BSIZE, Real >; col(Size j) const noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; const_iterator typedefsofa::type::Mat< BSIZE, BSIZE, Real >; const_reference typedefsofa::type::Mat< BSIZE, BSIZE, Real >; data() const noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; difference_type typedefsofa::type::Mat< BSIZE, BSIZE, Real >; element(Index i, Index j) constsofa::linearalgebra::BTDMatrix< N, T >::Blockinline; elemssofa::type::Mat< BSIZE, BSIZE, Real >; end() noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; end() const noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; fill(Real r) noexceptsofa::type::Mat< BSIZE, BSIZE, Real >inline; front()sofa::type::Mat< BSIZE, BSIZE, Real >inline; front() constsofa::type::Mat< BSIZE, BSIZE, Real >inline; getNbCols() constsofa::type::Mat< BSIZE, BSIZE, Real >inline; getNbLines() constsofa::type::Mat< BSIZE, BSIZE, Real ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html:1137,Modifiability,inherit,inherited,1137,"﻿. SOFA API: sofa::linearalgebra::BTDMatrix< N, T >::Block Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::linearalgebra::BTDMatrix< N, T >::Block Class Reference . #include <BTDMatrix.h>. Inheritance diagram for sofa::linearalgebra::BTDMatrix< N, T >::Block:. [legend]. Public Member Functions; Index Nrows () const;  ; Index Ncols () const;  ; void resize (Index, Index);  ; const T & element (Index i, Index j) const;  ; void set (Index i, Index j, const T &v);  ; void add (Index i, Index j, const T &v);  ; void operator= (const type::Mat< BSIZE, BSIZE, Real > &v);  ; type::Mat< BSIZE, BSIZE, Real > operator- () const;  ; type::Mat< BSIZE, BSIZE, Real > operator- (const type::Mat< BSIZE, BSIZE, Real > &m) const;  ; type::Vec< BSIZE, Real > operator* (const type::Vec< BSIZE, Real > &v);  ; type::Mat< BSIZE, BSIZE, Real > operator* (const type::Mat< BSIZE, BSIZE, Real > &m);  ; type::Mat< BSIZE, BSIZE, Real > operator* (const TransposedBlock &mt);  ; TransposedBlock t () const;  ; Block i () const;  ;  Public Member Functions inherited from sofa::type::Mat< BSIZE, BSIZE, Real >; constexpr Mat () noexcept=default;  ; constexpr Mat (NoInit) noexcept;  ; constexpr Mat (std::initializer_list< Real > &&scalars) noexcept;  ; constexpr Mat (std::initializer_list< std::initializer_list< Real >> &&rows) noexcept;  ; constexpr Mat (ArgsT &&... r) noexcept;  ; constexpr Mat (const Real &v) noexcept;  Constructor from an element. More...;  ; constexpr Mat (const Mat< L, C, real2 > &m) noexcept;  Constructor from another matrix. More...;  ; constexpr Mat (const Mat< L2, C2, real2 > &m) noexcept;  Constructor from another matrix with different size (with null default entries and ignoring outside entries) More...;  ; constexpr Mat (const real2 *p) noexcept;  Constructor from an array of elements (stored per line). More...;  ; constexpr Size getNbLines () const;  number of lines More...;  ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html:8718,Modifiability,inherit,inherited,8718,"r void symmetrize () noexcept;  ; constexpr const Real * data () const noexcept;  ; constexpr ArrayLineType::iterator begin () noexcept;  ; constexpr ArrayLineType::const_iterator begin () const noexcept;  ; constexpr ArrayLineType::iterator end () noexcept;  ; constexpr ArrayLineType::const_iterator end () const noexcept;  ; constexpr reference front ();  ; constexpr const_reference front () const;  ; constexpr reference back ();  ; constexpr const_reference back () const;  ; constexpr bool operator== (const Mat< L, C, Real > &b) const noexcept;  ; constexpr bool operator!= (const Mat< L, C, Real > &b) const noexcept;  ; bool isSymmetric () const;  ; bool isDiagonal () const noexcept;  . Additional Inherited Members;  Public Attributes inherited from sofa::type::Mat< BSIZE, BSIZE, Real >; ArrayLineType elems;  ;  Static Public Attributes inherited from sofa::type::Mat< BSIZE, BSIZE, Real >; static constexpr sofa::Size N;  ; static constexpr Size nbLines;  ; static constexpr Size nbCols;  ; static constexpr sofa::Size static_size;  ; static constexpr sofa::Size total_size;  ;  Static Public Member Functions inherited from sofa::type::Mat< BSIZE, BSIZE, Real >; static constexpr sofa::Size size ();  ; static const Mat< L, L, Real > & Identity () noexcept;  Returns the identity matrix. More...;  ; static bool canSelfTranspose (const Mat< S, S, Real > &lhs, const Mat< S, S, Real > &rhs) noexcept;  ; static bool canSelfTranspose (const Mat< I, J, Real > &, const Mat< J, I, Real > &) noexcept;  ; static Mat< L, C, Real > transformTranslation (const Vec< C-1, Real > &t) noexcept;  ; static Mat< L, C, Real > transformScale (Real s) noexcept;  ; static Mat< L, C, Real > transformScale (const Vec< C-1, Real > &s) noexcept;  ; static Mat< L, C, Real > transformRotation (const Quat &q) noexcept;  . Function details. ◆ add(). template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::Block::add ; (; Index ; i, . Index ; j, . const T & ; v . ). inline . ◆",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html:8822,Modifiability,inherit,inherited,8822,"r void symmetrize () noexcept;  ; constexpr const Real * data () const noexcept;  ; constexpr ArrayLineType::iterator begin () noexcept;  ; constexpr ArrayLineType::const_iterator begin () const noexcept;  ; constexpr ArrayLineType::iterator end () noexcept;  ; constexpr ArrayLineType::const_iterator end () const noexcept;  ; constexpr reference front ();  ; constexpr const_reference front () const;  ; constexpr reference back ();  ; constexpr const_reference back () const;  ; constexpr bool operator== (const Mat< L, C, Real > &b) const noexcept;  ; constexpr bool operator!= (const Mat< L, C, Real > &b) const noexcept;  ; bool isSymmetric () const;  ; bool isDiagonal () const noexcept;  . Additional Inherited Members;  Public Attributes inherited from sofa::type::Mat< BSIZE, BSIZE, Real >; ArrayLineType elems;  ;  Static Public Attributes inherited from sofa::type::Mat< BSIZE, BSIZE, Real >; static constexpr sofa::Size N;  ; static constexpr Size nbLines;  ; static constexpr Size nbCols;  ; static constexpr sofa::Size static_size;  ; static constexpr sofa::Size total_size;  ;  Static Public Member Functions inherited from sofa::type::Mat< BSIZE, BSIZE, Real >; static constexpr sofa::Size size ();  ; static const Mat< L, L, Real > & Identity () noexcept;  Returns the identity matrix. More...;  ; static bool canSelfTranspose (const Mat< S, S, Real > &lhs, const Mat< S, S, Real > &rhs) noexcept;  ; static bool canSelfTranspose (const Mat< I, J, Real > &, const Mat< J, I, Real > &) noexcept;  ; static Mat< L, C, Real > transformTranslation (const Vec< C-1, Real > &t) noexcept;  ; static Mat< L, C, Real > transformScale (Real s) noexcept;  ; static Mat< L, C, Real > transformScale (const Vec< C-1, Real > &s) noexcept;  ; static Mat< L, C, Real > transformRotation (const Quat &q) noexcept;  . Function details. ◆ add(). template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::Block::add ; (; Index ; i, . Index ; j, . const T & ; v . ). inline . ◆",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html:9096,Modifiability,inherit,inherited,9096,"r void symmetrize () noexcept;  ; constexpr const Real * data () const noexcept;  ; constexpr ArrayLineType::iterator begin () noexcept;  ; constexpr ArrayLineType::const_iterator begin () const noexcept;  ; constexpr ArrayLineType::iterator end () noexcept;  ; constexpr ArrayLineType::const_iterator end () const noexcept;  ; constexpr reference front ();  ; constexpr const_reference front () const;  ; constexpr reference back ();  ; constexpr const_reference back () const;  ; constexpr bool operator== (const Mat< L, C, Real > &b) const noexcept;  ; constexpr bool operator!= (const Mat< L, C, Real > &b) const noexcept;  ; bool isSymmetric () const;  ; bool isDiagonal () const noexcept;  . Additional Inherited Members;  Public Attributes inherited from sofa::type::Mat< BSIZE, BSIZE, Real >; ArrayLineType elems;  ;  Static Public Attributes inherited from sofa::type::Mat< BSIZE, BSIZE, Real >; static constexpr sofa::Size N;  ; static constexpr Size nbLines;  ; static constexpr Size nbCols;  ; static constexpr sofa::Size static_size;  ; static constexpr sofa::Size total_size;  ;  Static Public Member Functions inherited from sofa::type::Mat< BSIZE, BSIZE, Real >; static constexpr sofa::Size size ();  ; static const Mat< L, L, Real > & Identity () noexcept;  Returns the identity matrix. More...;  ; static bool canSelfTranspose (const Mat< S, S, Real > &lhs, const Mat< S, S, Real > &rhs) noexcept;  ; static bool canSelfTranspose (const Mat< I, J, Real > &, const Mat< J, I, Real > &) noexcept;  ; static Mat< L, C, Real > transformTranslation (const Vec< C-1, Real > &t) noexcept;  ; static Mat< L, C, Real > transformScale (Real s) noexcept;  ; static Mat< L, C, Real > transformScale (const Vec< C-1, Real > &s) noexcept;  ; static Mat< L, C, Real > transformRotation (const Quat &q) noexcept;  . Function details. ◆ add(). template<std::size_t N, typename T > . void sofa::linearalgebra::BTDMatrix< N, T >::Block::add ; (; Index ; i, . Index ; j, . const T & ; v . ). inline . ◆",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html:3042,Security,access,access,3042,"e getNbCols () const;  number of columns More...;  ; constexpr void operator= (const Real *p) noexcept;  Assignment from an array of elements (stored per line). More...;  ; constexpr void operator= (const Mat< L, C, real2 > &m) noexcept;  Assignment from another matrix. More...;  ; constexpr void operator= (const Mat< L2, C2, Real > &m) noexcept;  Assignment from a matrix of different size. More...;  ; constexpr void getsub (Size L0, Size C0, Mat< L2, C2, Real > &m) const noexcept;  ; constexpr void getsub (const Size L0, const Size C0, Vec< C2, Real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, Real &m) const noexcept;  ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, Real > &m) noexcept;  ; constexpr void setsub (Size L0, Size C0, const Vec< L2, Real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (Real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standar",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html:3206,Security,access,access,3206,"..;  ; constexpr void operator= (const Mat< L, C, real2 > &m) noexcept;  Assignment from another matrix. More...;  ; constexpr void operator= (const Mat< L2, C2, Real > &m) noexcept;  Assignment from a matrix of different size. More...;  ; constexpr void getsub (Size L0, Size C0, Mat< L2, C2, Real > &m) const noexcept;  ; constexpr void getsub (const Size L0, const Size C0, Vec< C2, Real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, Real &m) const noexcept;  ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, Real > &m) noexcept;  ; constexpr void setsub (Size L0, Size C0, const Vec< L2, Real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (Real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html:3312,Security,access,access,3312,"atrix. More...;  ; constexpr void operator= (const Mat< L2, C2, Real > &m) noexcept;  Assignment from a matrix of different size. More...;  ; constexpr void getsub (Size L0, Size C0, Mat< L2, C2, Real > &m) const noexcept;  ; constexpr void getsub (const Size L0, const Size C0, Vec< C2, Real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, Real &m) const noexcept;  ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, Real > &m) noexcept;  ; constexpr void setsub (Size L0, Size C0, const Vec< L2, Real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (Real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const L",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html:3402,Security,access,access,3402,"rom a matrix of different size. More...;  ; constexpr void getsub (Size L0, Size C0, Mat< L2, C2, Real > &m) const noexcept;  ; constexpr void getsub (const Size L0, const Size C0, Vec< C2, Real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, Real &m) const noexcept;  ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, Real > &m) noexcept;  ; constexpr void setsub (Size L0, Size C0, const Vec< L2, Real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (Real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; constexpr Line &",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html:3508,Security,access,access,3508,"Real > &m) const noexcept;  ; constexpr void getsub (const Size L0, const Size C0, Vec< C2, Real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, Real &m) const noexcept;  ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, Real > &m) noexcept;  ; constexpr void setsub (Size L0, Size C0, const Vec< L2, Real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (Real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; constexpr const Line & y () const noex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html:3600,Security,access,access,3600," const noexcept;  ; constexpr void getsub (Size L0, Size C0, Real &m) const noexcept;  ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, Real > &m) noexcept;  ; constexpr void setsub (Size L0, Size C0, const Vec< L2, Real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (Real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; constexpr Line & z () noexcept;  Special ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html:3715,Security,access,access,3715,"sub (Size L0, Size C0, const Mat< L2, C2, Real > &m) noexcept;  ; constexpr void setsub (Size L0, Size C0, const Vec< L2, Real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (Real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; constexpr const Line & z () const noexcept;  Special access to third line",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html:4229,Security,access,access,4229,"line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; constexpr Real toReal () const;  ; constexpr operator Real () const;  ; constexpr void identity () noexcept;  Set matrix to identity. More...;  ; constexpr void transpose (const Mat< C, L, Real > &m) noexcept;  Set matrix as the transpose of m. More...;  ; constexpr void transpose () noexcept;  Transpose the square matrix. More",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html:4316,Security,access,access,4316,"ead-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; constexpr Real toReal () const;  ; constexpr operator Real () const;  ; constexpr void identity () noexcept;  Set matrix to identity. More...;  ; constexpr void transpose (const Mat< C, L, Real > &m) noexcept;  Set matrix as the transpose of m. More...;  ; constexpr void transpose () noexcept;  Transpose the square matrix. More...;  ; constexpr Mat< C, L, Real > transposed () const noexcept;  Return the transpose",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html:4403,Security,access,access,4403,"pt;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; constexpr Real toReal () const;  ; constexpr operator Real () const;  ; constexpr void identity () noexcept;  Set matrix to identity. More...;  ; constexpr void transpose (const Mat< C, L, Real > &m) noexcept;  Set matrix as the transpose of m. More...;  ; constexpr void transpose () noexcept;  Transpose the square matrix. More...;  ; constexpr Mat< C, L, Real > transposed () const noexcept;  Return the transpose of m. More...;  ; constexpr Mat< L, C, Real > operator+ (const Mat< L, C, Real > &m) c",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html:4491,Security,access,access,4491,") const noexcept;  Read-only access to line i. More...;  ; constexpr Real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; constexpr Real toReal () const;  ; constexpr operator Real () const;  ; constexpr void identity () noexcept;  Set matrix to identity. More...;  ; constexpr void transpose (const Mat< C, L, Real > &m) noexcept;  Set matrix as the transpose of m. More...;  ; constexpr void transpose () noexcept;  Transpose the square matrix. More...;  ; constexpr Mat< C, L, Real > transposed () const noexcept;  Return the transpose of m. More...;  ; constexpr Mat< L, C, Real > operator+ (const Mat< L, C, Real > &m) const noexcept;  Matrix addition operator. More...;  ; constexpr Mat< L, C, Real > operat",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html:4579,Security,access,access,4579,"(Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; constexpr Real toReal () const;  ; constexpr operator Real () const;  ; constexpr void identity () noexcept;  Set matrix to identity. More...;  ; constexpr void transpose (const Mat< C, L, Real > &m) noexcept;  Set matrix as the transpose of m. More...;  ; constexpr void transpose () noexcept;  Transpose the square matrix. More...;  ; constexpr Mat< C, L, Real > transposed () const noexcept;  Return the transpose of m. More...;  ; constexpr Mat< L, C, Real > operator+ (const Mat< L, C, Real > &m) const noexcept;  Matrix addition operator. More...;  ; constexpr Mat< L, C, Real > operator- (const Mat< L, C, Real > &m) const noexcept;  Matrix subtraction operator. More...; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html:4666,Security,access,access,4666,"Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; constexpr Real toReal () const;  ; constexpr operator Real () const;  ; constexpr void identity () noexcept;  Set matrix to identity. More...;  ; constexpr void transpose (const Mat< C, L, Real > &m) noexcept;  Set matrix as the transpose of m. More...;  ; constexpr void transpose () noexcept;  Transpose the square matrix. More...;  ; constexpr Mat< C, L, Real > transposed () const noexcept;  Return the transpose of m. More...;  ; constexpr Mat< L, C, Real > operator+ (const Mat< L, C, Real > &m) const noexcept;  Matrix addition operator. More...;  ; constexpr Mat< L, C, Real > operator- (const Mat< L, C, Real > &m) const noexcept;  Matrix subtraction operator. More...;  ; constexpr Mat< L, C, Real > operator- () const noexcept;  Matrix negation operator. ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html:4753,Security,access,access,4753,"ore...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; constexpr Real toReal () const;  ; constexpr operator Real () const;  ; constexpr void identity () noexcept;  Set matrix to identity. More...;  ; constexpr void transpose (const Mat< C, L, Real > &m) noexcept;  Set matrix as the transpose of m. More...;  ; constexpr void transpose () noexcept;  Transpose the square matrix. More...;  ; constexpr Mat< C, L, Real > transposed () const noexcept;  Return the transpose of m. More...;  ; constexpr Mat< L, C, Real > operator+ (const Mat< L, C, Real > &m) const noexcept;  Matrix addition operator. More...;  ; constexpr Mat< L, C, Real > operator- (const Mat< L, C, Real > &m) const noexcept;  Matrix subtraction operator. More...;  ; constexpr Mat< L, C, Real > operator- () const noexcept;  Matrix negation operator. More...;  ; constexpr Col operator* (const Line &v) const noexcept;  Multiplication ope",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html:4841,Security,access,access,4841,"of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; constexpr Real toReal () const;  ; constexpr operator Real () const;  ; constexpr void identity () noexcept;  Set matrix to identity. More...;  ; constexpr void transpose (const Mat< C, L, Real > &m) noexcept;  Set matrix as the transpose of m. More...;  ; constexpr void transpose () noexcept;  Transpose the square matrix. More...;  ; constexpr Mat< C, L, Real > transposed () const noexcept;  Return the transpose of m. More...;  ; constexpr Mat< L, C, Real > operator+ (const Mat< L, C, Real > &m) const noexcept;  Matrix addition operator. More...;  ; constexpr Mat< L, C, Real > operator- (const Mat< L, C, Real > &m) const noexcept;  Matrix subtraction operator. More...;  ; constexpr Mat< L, C, Real > operator- () const noexcept;  Matrix negation operator. More...;  ; constexpr Col operator* (const Line &v) const noexcept;  Multiplication operator Matrix * Line. More...;  ; constexpr Mat< L, C, Real > operator* (Real f) const no",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html:2846,Usability,clear,clear,2846,"texpr Mat (const Mat< L2, C2, real2 > &m) noexcept;  Constructor from another matrix with different size (with null default entries and ignoring outside entries) More...;  ; constexpr Mat (const real2 *p) noexcept;  Constructor from an array of elements (stored per line). More...;  ; constexpr Size getNbLines () const;  number of lines More...;  ; constexpr Size getNbCols () const;  number of columns More...;  ; constexpr void operator= (const Real *p) noexcept;  Assignment from an array of elements (stored per line). More...;  ; constexpr void operator= (const Mat< L, C, real2 > &m) noexcept;  Assignment from another matrix. More...;  ; constexpr void operator= (const Mat< L2, C2, Real > &m) noexcept;  Assignment from a matrix of different size. More...;  ; constexpr void getsub (Size L0, Size C0, Mat< L2, C2, Real > &m) const noexcept;  ; constexpr void getsub (const Size L0, const Size C0, Vec< C2, Real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, Real &m) const noexcept;  ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, Real > &m) noexcept;  ; constexpr void setsub (Size L0, Size C0, const Vec< L2, Real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (Real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_block.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_transposed_block-members.html:282,Modifiability,inherit,inherited,282,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::BTDMatrix< N, T >::TransposedBlock Member List . This is the complete list of members for sofa::linearalgebra::BTDMatrix< N, T >::TransposedBlock, including all inherited members. msofa::linearalgebra::BTDMatrix< N, T >::TransposedBlock; operator*(const type::Vec< BSIZE, Real > &v)sofa::linearalgebra::BTDMatrix< N, T >::TransposedBlockinline; operator-() constsofa::linearalgebra::BTDMatrix< N, T >::TransposedBlockinline; TransposedBlock(const type::Mat< BSIZE, BSIZE, Real > &m)sofa::linearalgebra::BTDMatrix< N, T >::TransposedBlockinline. Generated on Mon Nov 11 2024 03:31:10 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_transposed_block-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_b_t_d_matrix_1_1_transposed_block-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint-members.html:322,Modifiability,inherit,inherited,322,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy > Member List . This is the complete list of members for sofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >, including all inherited members. add(unsigned int bi, unsigned int bj, const Block &b)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >inline; add(unsigned int bi, unsigned int bj, int &rowId, int &colId, const Block &b)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >inline; addBlock(Index i, Index j, const Block &v)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >inline; addBlock(Index i, Index j, Index &rowId, Index &colId, const Block &v)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >inline; addDBlock(unsigned int bi, unsigned int bj, const DBlock &b)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >inline; addDiag(unsigned int bi, const Block &b)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >inline; addDiag(unsigned int bi, int &rowId, int &colId, const Block &b)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >inline; addDiagDBlock(unsigned int bi, const DBlock &b)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >inline; addDiagDValue(unsigned int bi, const Real b)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >inline; addDiagDValue(unsigned int bi, int &rowId, int &colId, const Real b)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >inline; addDValue(unsigned int bi, unsigned int bj, const Real b)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >inline; addDValue(unsigned int bi,",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint-members.html:4596,Usability,clear,clear,4596,"SparseMatrixGeneric< TBlock, CRSConstraintPolicy >inline; blockMultTranspose(const TBlock &blockA, const TBlock &blockB)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >inlinestatic; BlockTranspose typedefsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >; btempsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >; category enum valuesofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >; cbegin() constsofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >inline; cend() constsofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >inline; check_matrix()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >inline; check_matrix(Index nzmax, Index m, Index n, Index *a_p, Index *a_i, Block *a_x)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >inlinestatic; clear()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >inline; ClearByZerossofa::linearalgebra::CRSConstraintPolicystatic; clearColBlock(Index j)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >inline; clearRowBlock(Index i)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >inline; clearRowColBlock(Index i)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >inline; colBSize() constsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >inline; ColIterator typedefsofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >; colsIndexsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >; colsValuesofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >; compress()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >inline; com",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint-members.html:4755,Usability,clear,clearColBlock,4755,"rixGeneric< TBlock, CRSConstraintPolicy >inlinestatic; BlockTranspose typedefsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >; btempsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >; category enum valuesofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >; cbegin() constsofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >inline; cend() constsofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >inline; check_matrix()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >inline; check_matrix(Index nzmax, Index m, Index n, Index *a_p, Index *a_i, Block *a_x)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >inlinestatic; clear()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >inline; ClearByZerossofa::linearalgebra::CRSConstraintPolicystatic; clearColBlock(Index j)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >inline; clearRowBlock(Index i)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >inline; clearRowColBlock(Index i)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >inline; colBSize() constsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >inline; ColIterator typedefsofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >; colsIndexsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >; colsValuesofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >; compress()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >inline; compressBtemp()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >inlineprotected; compressCSR()sofa::linearalgebra::CompressedRowSpa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint-members.html:4869,Usability,clear,clearRowBlock,4869,"rseMatrixGeneric< TBlock, CRSConstraintPolicy >; btempsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >; category enum valuesofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >; cbegin() constsofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >inline; cend() constsofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >inline; check_matrix()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >inline; check_matrix(Index nzmax, Index m, Index n, Index *a_p, Index *a_i, Block *a_x)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >inlinestatic; clear()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >inline; ClearByZerossofa::linearalgebra::CRSConstraintPolicystatic; clearColBlock(Index j)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >inline; clearRowBlock(Index i)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >inline; clearRowColBlock(Index i)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >inline; colBSize() constsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >inline; ColIterator typedefsofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >; colsIndexsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >; colsValuesofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >; compress()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >inline; compressBtemp()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >inlineprotected; compressCSR()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >inlineprotected; CompressedRowSparseMatrixConstraint()sofa::lineara",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint-members.html:4983,Usability,clear,clearRowColBlock,4983,", CRSConstraintPolicy >; category enum valuesofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >; cbegin() constsofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >inline; cend() constsofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >inline; check_matrix()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >inline; check_matrix(Index nzmax, Index m, Index n, Index *a_p, Index *a_i, Block *a_x)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >inlinestatic; clear()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >inline; ClearByZerossofa::linearalgebra::CRSConstraintPolicystatic; clearColBlock(Index j)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >inline; clearRowBlock(Index i)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >inline; clearRowColBlock(Index i)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >inline; colBSize() constsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >inline; ColIterator typedefsofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >; colsIndexsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >; colsValuesofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >; compress()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >inline; compressBtemp()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >inlineprotected; compressCSR()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >inlineprotected; CompressedRowSparseMatrixConstraint()sofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >inline; CompressedRowSparseMatrixConstraint(Index nbRo",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html:10131,Energy Efficiency,efficient,efficient,10131,"eMatrixConstraint< TBlock, Policy > &sc);  read from an input stream More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >; Index nBlockRow;  Size. More...;  ; Index nBlockCol;  Mathematical size of the matrix, in blocks. More...;  ; VecIndex rowIndex;  Compressed sparse data structure. More...;  ; VecIndex rowBegin;  column indices of non-empty blocks in each row. The column indices of the non-empty block within the i-th non-empty row are all the colsIndex[j], j in [rowBegin[i],rowBegin[i+1]) More...;  ; VecIndex colsIndex;  column indices of all the non-empty blocks, sorted by increasing row index and column index More...;  ; VecBlock colsValue;  values of the non-empty blocks, in the same order as in colsIndex More...;  ; VecFlag touchedBlock;  boolean vector, i-th value is true if block has been touched since last compression. More...;  ; VecIndexedBlock btemp;  Additional storage to make block insertion more efficient. More...;  ; bool skipCompressZero;  ; VecIndex oldRowIndex;  Temporary vectors used during compression. More...;  ; VecIndex oldRowBegin;  ; VecIndex oldColsIndex;  ; VecBlock oldColsValue;  ;  Protected Member Functions inherited from sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >; bool registerNewCol (Index &colId, TBlock &bvalue);  Add a new col into matrix. More...;  ; std::pair< Index, Index > registerBtempLine (typename VecIndexedBlock::const_iterator &itbtemp);  Add a complete new line from btemp into matrix. More...;  ; void fullyCompressBtemp ();  Clear matrix and just add btemp array. More...;  ; Block * insertBtemp (const Index i, const Index j);  Method to easy insert new block into btemp. More...;  ; Index getMaxColIndex ();  Method to easy have the max colIndex. Could only be used if AutoSize policy is activated. More...;  ; void deleteRow (Index rowId);  Method to easy delete row given posi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html:1175,Modifiability,inherit,inherited,1175,"r Functions |; Static Public Member Functions |; Friends |; List of all members . sofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy > Class Template Reference . #include <CompressedRowSparseMatrixConstraint.h>. Inheritance diagram for sofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >:. [legend]. Classes; class  ColConstIterator;  Row Sparse Matrix columns constant Iterator to match with constraint matrix manipulation. More...;  ; class  RowConstIterator;  ; class  RowType;  ; class  RowWriteAccessor;  . Static Public Attributes; static constexpr Index s_invalidIndex = std::is_signed_v<Index> ? std::numeric_limits<Index>::lowest() : std::numeric_limits<Index>::max();  ; static constexpr sofa::Index NL = CRSMatrix::NL;  Number of rows of a block. More...;  ; static constexpr sofa::Index NC = CRSMatrix::NC;  Number of columns of a block. More...;  ;  Static Public Attributes inherited from sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >; static constexpr sofa::Index NL;  Number of rows of a block. More...;  ; static constexpr sofa::Index NC;  Number of columns of a block. More...;  ; static constexpr Index s_invalidIndex;  ;  Static Public Attributes inherited from sofa::linearalgebra::CRSConstraintPolicy; static constexpr bool AutoSize = true;  ; static constexpr bool AutoCompress = true;  ; static constexpr bool CompressZeros = false;  ; static constexpr bool ClearByZeros = false;  ; static constexpr bool OrderedInsertion = false;  ; static constexpr int matrixType = 2;  ;  Static Public Attributes inherited from sofa::linearalgebra::CRSDefaultPolicy; static constexpr bool IsAlwaysSquare = false;  Set to true if this matrix is always square (must be true for symmetric) More...;  ; static constexpr bool IsAlwaysSymmetric = false;  Set to true if this matrix is always symmetric (IsAlwaysSquare should be true) More...;  ; static constexpr bool AutoSize = false;  Set to true if the siz",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html:1493,Modifiability,inherit,inherited,1493,"class  RowConstIterator;  ; class  RowType;  ; class  RowWriteAccessor;  . Static Public Attributes; static constexpr Index s_invalidIndex = std::is_signed_v<Index> ? std::numeric_limits<Index>::lowest() : std::numeric_limits<Index>::max();  ; static constexpr sofa::Index NL = CRSMatrix::NL;  Number of rows of a block. More...;  ; static constexpr sofa::Index NC = CRSMatrix::NC;  Number of columns of a block. More...;  ;  Static Public Attributes inherited from sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >; static constexpr sofa::Index NL;  Number of rows of a block. More...;  ; static constexpr sofa::Index NC;  Number of columns of a block. More...;  ; static constexpr Index s_invalidIndex;  ;  Static Public Attributes inherited from sofa::linearalgebra::CRSConstraintPolicy; static constexpr bool AutoSize = true;  ; static constexpr bool AutoCompress = true;  ; static constexpr bool CompressZeros = false;  ; static constexpr bool ClearByZeros = false;  ; static constexpr bool OrderedInsertion = false;  ; static constexpr int matrixType = 2;  ;  Static Public Attributes inherited from sofa::linearalgebra::CRSDefaultPolicy; static constexpr bool IsAlwaysSquare = false;  Set to true if this matrix is always square (must be true for symmetric) More...;  ; static constexpr bool IsAlwaysSymmetric = false;  Set to true if this matrix is always symmetric (IsAlwaysSquare should be true) More...;  ; static constexpr bool AutoSize = false;  Set to true if the size of the matrix should be automatically increased when new blocks are added. More...;  ; static constexpr bool AutoCompress = true;  Set to true if the matrix should be automatically compressed (easier to use, but might cause issues in multithreading) More...;  ; static constexpr bool CompressZeros = true;  Set to true if the blocks that are all zeros should be removed from the matrix when compressing (expensive) More...;  ; static constexpr bool ClearByZeros = true;  Set to true ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html:1850,Modifiability,inherit,inherited,1850,"class  RowConstIterator;  ; class  RowType;  ; class  RowWriteAccessor;  . Static Public Attributes; static constexpr Index s_invalidIndex = std::is_signed_v<Index> ? std::numeric_limits<Index>::lowest() : std::numeric_limits<Index>::max();  ; static constexpr sofa::Index NL = CRSMatrix::NL;  Number of rows of a block. More...;  ; static constexpr sofa::Index NC = CRSMatrix::NC;  Number of columns of a block. More...;  ;  Static Public Attributes inherited from sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >; static constexpr sofa::Index NL;  Number of rows of a block. More...;  ; static constexpr sofa::Index NC;  Number of columns of a block. More...;  ; static constexpr Index s_invalidIndex;  ;  Static Public Attributes inherited from sofa::linearalgebra::CRSConstraintPolicy; static constexpr bool AutoSize = true;  ; static constexpr bool AutoCompress = true;  ; static constexpr bool CompressZeros = false;  ; static constexpr bool ClearByZeros = false;  ; static constexpr bool OrderedInsertion = false;  ; static constexpr int matrixType = 2;  ;  Static Public Attributes inherited from sofa::linearalgebra::CRSDefaultPolicy; static constexpr bool IsAlwaysSquare = false;  Set to true if this matrix is always square (must be true for symmetric) More...;  ; static constexpr bool IsAlwaysSymmetric = false;  Set to true if this matrix is always symmetric (IsAlwaysSquare should be true) More...;  ; static constexpr bool AutoSize = false;  Set to true if the size of the matrix should be automatically increased when new blocks are added. More...;  ; static constexpr bool AutoCompress = true;  Set to true if the matrix should be automatically compressed (easier to use, but might cause issues in multithreading) More...;  ; static constexpr bool CompressZeros = true;  Set to true if the blocks that are all zeros should be removed from the matrix when compressing (expensive) More...;  ; static constexpr bool ClearByZeros = true;  Set to true ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html:4317,Modifiability,inherit,inherited,4317,"ow, Index nbCol);  ; bool empty () const;  ; RowConstIterator begin () const;  Get the iterator corresponding to the beginning of the rows of blocks. More...;  ; RowConstIterator end () const;  Get the iterator corresponding to the end of the rows of blocks. More...;  ; RowConstIterator cbegin () const;  Get the iterator corresponding to the beginning of the rows of blocks. More...;  ; RowConstIterator cend () const;  Get the iterator corresponding to the end of the rows of blocks. More...;  ; size_t size () const;  Get the number of constraint. More...;  ; RowConstIterator readLine (Index lIndex) const;  ; RowWriteAccessor writeLine (Index lIndex);  ; void setLine (Index lIndex, RowType row);  ; void addLine (Index lIndex, RowType row);  ; template<class VecDeriv > ; void multTransposeBaseVector (VecDeriv &res, const sofa::linearalgebra::BaseVector *lambda) const;  ;  Public Member Functions inherited from sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >;  CompressedRowSparseMatrixGeneric ();  ;  CompressedRowSparseMatrixGeneric (Index nbBlockRow, Index nbBlockCol);  ; virtual ~CompressedRowSparseMatrixGeneric ()=default;  ; Index rowBSize () const;  ; Index colBSize () const;  ; const VecIndex & getRowIndex () const;  ; const VecIndex & getRowBegin () const;  ; Range getRowRange (Index id) const;  Returns the range of indices from the column indices corresponding to the id-th row. More...;  ; const VecIndex & getColsIndex () const;  ; const VecBlock & getColsValue () const;  ; virtual void resizeBlock (Index nbBRow, Index nbBCol);  ; void resizeBloc (Index nbBRow, Index nbBCol);  ; void compress ();  ; void swap (Matrix &m);  ; void fullRows ();  Make sure all rows have an entry even if they are empty. More...;  ; void shiftIndices (Index base);  ; const Block & block (Index i, Index j) const;  Get block method. More...;  ; const Block & bloc (Index i, Index j) const;  ; Block * wblock (Index i, Index j, bool create=false);  Wri",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html:8408,Modifiability,inherit,inherited,8408,");  ; void addSymDValue (unsigned int bi, unsigned int bj, const Real b);  ; void addSymDValue (unsigned int bi, unsigned int bj, int &rowId, int &colId, int &rowIdT, int &colIdT, Real b);  ; void transposeFullRows (CompressedRowSparseMatrixGeneric< TBlock2, TPolicy2 > &res) const;  Transpose the matrix into res, works only for 3 array variant (""full rows"") matrices, ie which can be expressed using the rowBegin, colsIndex and colsValue arrays solely. More...;  ; void mul (CompressedRowSparseMatrixGeneric< RB, RP > &res, const CompressedRowSparseMatrixGeneric< MB, MP > &m) const;  ; void mulTranspose (CompressedRowSparseMatrixGeneric< RB, RP > &res, const CompressedRowSparseMatrixGeneric< MB, MP > &m) const;  . Static Public Member Functions; static const char * Name ();  ;  Static Public Member Functions inherited from sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >; static bool sortedFind (const VecIndex &v, Range in, Index val, Index &result);  ; static bool sortedFind (const VecIndex &v, Index val, Index &result);  ; static const char * Name ();  ; static bool check_matrix (Index nzmax, Index m, Index n, Index *a_p, Index *a_i, Block *a_x);  ; static auto blockMultTranspose (const TBlock &blockA, const TBlock &blockB);  . Friends; std::ostream & operator<< (std::ostream &out, const CompressedRowSparseMatrixConstraint< TBlock, Policy > &sc);  write to an output stream More...;  ; std::istream & operator>> (std::istream &in, CompressedRowSparseMatrixConstraint< TBlock, Policy > &sc);  read from an input stream More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >; Index nBlockRow;  Size. More...;  ; Index nBlockCol;  Mathematical size of the matrix, in blocks. More...;  ; VecIndex rowIndex;  Compressed sparse data structure. More...;  ; VecIndex rowBegin;  column indices of non-empty blocks in each row. The column indices o",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html:9227,Modifiability,inherit,inherited,9227,"dRowSparseMatrixGeneric< MB, MP > &m) const;  . Static Public Member Functions; static const char * Name ();  ;  Static Public Member Functions inherited from sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >; static bool sortedFind (const VecIndex &v, Range in, Index val, Index &result);  ; static bool sortedFind (const VecIndex &v, Index val, Index &result);  ; static const char * Name ();  ; static bool check_matrix (Index nzmax, Index m, Index n, Index *a_p, Index *a_i, Block *a_x);  ; static auto blockMultTranspose (const TBlock &blockA, const TBlock &blockB);  . Friends; std::ostream & operator<< (std::ostream &out, const CompressedRowSparseMatrixConstraint< TBlock, Policy > &sc);  write to an output stream More...;  ; std::istream & operator>> (std::istream &in, CompressedRowSparseMatrixConstraint< TBlock, Policy > &sc);  read from an input stream More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >; Index nBlockRow;  Size. More...;  ; Index nBlockCol;  Mathematical size of the matrix, in blocks. More...;  ; VecIndex rowIndex;  Compressed sparse data structure. More...;  ; VecIndex rowBegin;  column indices of non-empty blocks in each row. The column indices of the non-empty block within the i-th non-empty row are all the colsIndex[j], j in [rowBegin[i],rowBegin[i+1]) More...;  ; VecIndex colsIndex;  column indices of all the non-empty blocks, sorted by increasing row index and column index More...;  ; VecBlock colsValue;  values of the non-empty blocks, in the same order as in colsIndex More...;  ; VecFlag touchedBlock;  boolean vector, i-th value is true if block has been touched since last compression. More...;  ; VecIndexedBlock btemp;  Additional storage to make block insertion more efficient. More...;  ; bool skipCompressZero;  ; VecIndex oldRowIndex;  Temporary vectors used during compression. More...;  ; VecInd",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html:10363,Modifiability,inherit,inherited,10363,"e of the matrix, in blocks. More...;  ; VecIndex rowIndex;  Compressed sparse data structure. More...;  ; VecIndex rowBegin;  column indices of non-empty blocks in each row. The column indices of the non-empty block within the i-th non-empty row are all the colsIndex[j], j in [rowBegin[i],rowBegin[i+1]) More...;  ; VecIndex colsIndex;  column indices of all the non-empty blocks, sorted by increasing row index and column index More...;  ; VecBlock colsValue;  values of the non-empty blocks, in the same order as in colsIndex More...;  ; VecFlag touchedBlock;  boolean vector, i-th value is true if block has been touched since last compression. More...;  ; VecIndexedBlock btemp;  Additional storage to make block insertion more efficient. More...;  ; bool skipCompressZero;  ; VecIndex oldRowIndex;  Temporary vectors used during compression. More...;  ; VecIndex oldRowBegin;  ; VecIndex oldColsIndex;  ; VecBlock oldColsValue;  ;  Protected Member Functions inherited from sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSConstraintPolicy >; bool registerNewCol (Index &colId, TBlock &bvalue);  Add a new col into matrix. More...;  ; std::pair< Index, Index > registerBtempLine (typename VecIndexedBlock::const_iterator &itbtemp);  Add a complete new line from btemp into matrix. More...;  ; void fullyCompressBtemp ();  Clear matrix and just add btemp array. More...;  ; Block * insertBtemp (const Index i, const Index j);  Method to easy insert new block into btemp. More...;  ; Index getMaxColIndex ();  Method to easy have the max colIndex. Could only be used if AutoSize policy is activated. More...;  ; void deleteRow (Index rowId);  Method to easy delete row given position in rowIndex. More...;  ; void compressBtemp ();  Clear matrix and compute new triplet's arrays by combining old ones and btemp(VecIndexedBlock) array. More...;  ; void compressCSR ();  ; void writeVector (const TVec &vec, std::ostream &os);  ; void readVector (TVec &vec, std::istream &in);  . A",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html:5585,Performance,optimiz,optimized,5585,"Col);  ; virtual ~CompressedRowSparseMatrixGeneric ()=default;  ; Index rowBSize () const;  ; Index colBSize () const;  ; const VecIndex & getRowIndex () const;  ; const VecIndex & getRowBegin () const;  ; Range getRowRange (Index id) const;  Returns the range of indices from the column indices corresponding to the id-th row. More...;  ; const VecIndex & getColsIndex () const;  ; const VecBlock & getColsValue () const;  ; virtual void resizeBlock (Index nbBRow, Index nbBCol);  ; void resizeBloc (Index nbBRow, Index nbBCol);  ; void compress ();  ; void swap (Matrix &m);  ; void fullRows ();  Make sure all rows have an entry even if they are empty. More...;  ; void shiftIndices (Index base);  ; const Block & block (Index i, Index j) const;  Get block method. More...;  ; const Block & bloc (Index i, Index j) const;  ; Block * wblock (Index i, Index j, bool create=false);  Write block method. More...;  ; Block * wblock (Index i, Index j, Index &rowId, Index &colId, bool create=false);  Write block method when rowId and colId are known, this is an optimized wblock specification. More...;  ; Block * wbloc (Index i, Index j, bool create=false);  ; const Block & getBlock (Index i, Index j) const;  ; const BlockTranspose getSymBlock (Index i, Index j) const;  ; void setBlock (Index i, Index j, const Block &v);  ; void setBlock (Index i, Index j, Index &rowId, Index &colId, const Block &v);  ; void addBlock (Index i, Index j, const Block &v);  ; void addBlock (Index i, Index j, Index &rowId, Index &colId, const Block &v);  ; Block * getWBlock (Index i, Index j, bool create=false);  ; void clearRowBlock (Index i);  Clear row block method. Clear all col of this line. More...;  ; void clearColBlock (Index j);  Clear col block method. Clear this col in all row of matrix. More...;  ; std::size_t countEmptyBlocks () const;  ; void clearRowColBlock (Index i);  Clear both row i and column i in a square matrix. More...;  ; void clear ();  Completely clear the matrix. More...;  ; bool ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html:2728,Usability,clear,clear,2728,"l OrderedInsertion = false;  ; static constexpr int matrixType = 2;  ;  Static Public Attributes inherited from sofa::linearalgebra::CRSDefaultPolicy; static constexpr bool IsAlwaysSquare = false;  Set to true if this matrix is always square (must be true for symmetric) More...;  ; static constexpr bool IsAlwaysSymmetric = false;  Set to true if this matrix is always symmetric (IsAlwaysSquare should be true) More...;  ; static constexpr bool AutoSize = false;  Set to true if the size of the matrix should be automatically increased when new blocks are added. More...;  ; static constexpr bool AutoCompress = true;  Set to true if the matrix should be automatically compressed (easier to use, but might cause issues in multithreading) More...;  ; static constexpr bool CompressZeros = true;  Set to true if the blocks that are all zeros should be removed from the matrix when compressing (expensive) More...;  ; static constexpr bool ClearByZeros = true;  Set to true if clear methods will put all concerned value to zero instead of clearing vectors (CompressZeros should be true) More...;  ; static constexpr bool OrderedInsertion = false;  Set to true if insertion in matrix are in most case at last line index or last col index. More...;  ; static constexpr bool StoreLowerTriangularBlock = true;  Set to false to disable storage of blocks on the lower triangular part (IsAlwaysSymmetric must be true) More...;  ; static constexpr int matrixType = 0;  Do not change this value, has to be overrided for all derivated class. More...;  . Public Member Functions;  CompressedRowSparseMatrixConstraint ();  ;  CompressedRowSparseMatrixConstraint (Index nbRow, Index nbCol);  ; bool empty () const;  ; RowConstIterator begin () const;  Get the iterator corresponding to the beginning of the rows of blocks. More...;  ; RowConstIterator end () const;  Get the iterator corresponding to the end of the rows of blocks. More...;  ; RowConstIterator cbegin () const;  Get the iterator corresponding to the",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html:2790,Usability,clear,clearing,2790,"l OrderedInsertion = false;  ; static constexpr int matrixType = 2;  ;  Static Public Attributes inherited from sofa::linearalgebra::CRSDefaultPolicy; static constexpr bool IsAlwaysSquare = false;  Set to true if this matrix is always square (must be true for symmetric) More...;  ; static constexpr bool IsAlwaysSymmetric = false;  Set to true if this matrix is always symmetric (IsAlwaysSquare should be true) More...;  ; static constexpr bool AutoSize = false;  Set to true if the size of the matrix should be automatically increased when new blocks are added. More...;  ; static constexpr bool AutoCompress = true;  Set to true if the matrix should be automatically compressed (easier to use, but might cause issues in multithreading) More...;  ; static constexpr bool CompressZeros = true;  Set to true if the blocks that are all zeros should be removed from the matrix when compressing (expensive) More...;  ; static constexpr bool ClearByZeros = true;  Set to true if clear methods will put all concerned value to zero instead of clearing vectors (CompressZeros should be true) More...;  ; static constexpr bool OrderedInsertion = false;  Set to true if insertion in matrix are in most case at last line index or last col index. More...;  ; static constexpr bool StoreLowerTriangularBlock = true;  Set to false to disable storage of blocks on the lower triangular part (IsAlwaysSymmetric must be true) More...;  ; static constexpr int matrixType = 0;  Do not change this value, has to be overrided for all derivated class. More...;  . Public Member Functions;  CompressedRowSparseMatrixConstraint ();  ;  CompressedRowSparseMatrixConstraint (Index nbRow, Index nbCol);  ; bool empty () const;  ; RowConstIterator begin () const;  Get the iterator corresponding to the beginning of the rows of blocks. More...;  ; RowConstIterator end () const;  Get the iterator corresponding to the end of the rows of blocks. More...;  ; RowConstIterator cbegin () const;  Get the iterator corresponding to the",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html:6132,Usability,clear,clearRowBlock,6132,"t;  ; const VecBlock & getColsValue () const;  ; virtual void resizeBlock (Index nbBRow, Index nbBCol);  ; void resizeBloc (Index nbBRow, Index nbBCol);  ; void compress ();  ; void swap (Matrix &m);  ; void fullRows ();  Make sure all rows have an entry even if they are empty. More...;  ; void shiftIndices (Index base);  ; const Block & block (Index i, Index j) const;  Get block method. More...;  ; const Block & bloc (Index i, Index j) const;  ; Block * wblock (Index i, Index j, bool create=false);  Write block method. More...;  ; Block * wblock (Index i, Index j, Index &rowId, Index &colId, bool create=false);  Write block method when rowId and colId are known, this is an optimized wblock specification. More...;  ; Block * wbloc (Index i, Index j, bool create=false);  ; const Block & getBlock (Index i, Index j) const;  ; const BlockTranspose getSymBlock (Index i, Index j) const;  ; void setBlock (Index i, Index j, const Block &v);  ; void setBlock (Index i, Index j, Index &rowId, Index &colId, const Block &v);  ; void addBlock (Index i, Index j, const Block &v);  ; void addBlock (Index i, Index j, Index &rowId, Index &colId, const Block &v);  ; Block * getWBlock (Index i, Index j, bool create=false);  ; void clearRowBlock (Index i);  Clear row block method. Clear all col of this line. More...;  ; void clearColBlock (Index j);  Clear col block method. Clear this col in all row of matrix. More...;  ; std::size_t countEmptyBlocks () const;  ; void clearRowColBlock (Index i);  Clear both row i and column i in a square matrix. More...;  ; void clear ();  Completely clear the matrix. More...;  ; bool check_matrix ();  ; std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &is);  ; void add (unsigned int bi, unsigned int bj, const Block &b);  ; void add (unsigned int bi, unsigned int bj, int &rowId, int &colId, const Block &b);  ; void addDBlock (unsigned int bi, unsigned int bj, const DBlock &b);  ; void addDValue (unsigned int bi, unsigned",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html:6227,Usability,clear,clearColBlock,6227,"k (Index i, Index j) const;  Get block method. More...;  ; const Block & bloc (Index i, Index j) const;  ; Block * wblock (Index i, Index j, bool create=false);  Write block method. More...;  ; Block * wblock (Index i, Index j, Index &rowId, Index &colId, bool create=false);  Write block method when rowId and colId are known, this is an optimized wblock specification. More...;  ; Block * wbloc (Index i, Index j, bool create=false);  ; const Block & getBlock (Index i, Index j) const;  ; const BlockTranspose getSymBlock (Index i, Index j) const;  ; void setBlock (Index i, Index j, const Block &v);  ; void setBlock (Index i, Index j, Index &rowId, Index &colId, const Block &v);  ; void addBlock (Index i, Index j, const Block &v);  ; void addBlock (Index i, Index j, Index &rowId, Index &colId, const Block &v);  ; Block * getWBlock (Index i, Index j, bool create=false);  ; void clearRowBlock (Index i);  Clear row block method. Clear all col of this line. More...;  ; void clearColBlock (Index j);  Clear col block method. Clear this col in all row of matrix. More...;  ; std::size_t countEmptyBlocks () const;  ; void clearRowColBlock (Index i);  Clear both row i and column i in a square matrix. More...;  ; void clear ();  Completely clear the matrix. More...;  ; bool check_matrix ();  ; std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &is);  ; void add (unsigned int bi, unsigned int bj, const Block &b);  ; void add (unsigned int bi, unsigned int bj, int &rowId, int &colId, const Block &b);  ; void addDBlock (unsigned int bi, unsigned int bj, const DBlock &b);  ; void addDValue (unsigned int bi, unsigned int bj, const Real b);  ; void addDValue (unsigned int bi, unsigned int bj, int &rowId, int &colId, const Real b);  ; void addDiag (unsigned int bi, const Block &b);  ; void addDiag (unsigned int bi, int &rowId, int &colId, const Block &b);  ; void addDiagDBlock (unsigned int bi, const DBlock &b);  ; void addDiagDValue (unsigned int bi, cons",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html:6373,Usability,clear,clearRowColBlock,6373," bool create=false);  Write block method. More...;  ; Block * wblock (Index i, Index j, Index &rowId, Index &colId, bool create=false);  Write block method when rowId and colId are known, this is an optimized wblock specification. More...;  ; Block * wbloc (Index i, Index j, bool create=false);  ; const Block & getBlock (Index i, Index j) const;  ; const BlockTranspose getSymBlock (Index i, Index j) const;  ; void setBlock (Index i, Index j, const Block &v);  ; void setBlock (Index i, Index j, Index &rowId, Index &colId, const Block &v);  ; void addBlock (Index i, Index j, const Block &v);  ; void addBlock (Index i, Index j, Index &rowId, Index &colId, const Block &v);  ; Block * getWBlock (Index i, Index j, bool create=false);  ; void clearRowBlock (Index i);  Clear row block method. Clear all col of this line. More...;  ; void clearColBlock (Index j);  Clear col block method. Clear this col in all row of matrix. More...;  ; std::size_t countEmptyBlocks () const;  ; void clearRowColBlock (Index i);  Clear both row i and column i in a square matrix. More...;  ; void clear ();  Completely clear the matrix. More...;  ; bool check_matrix ();  ; std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &is);  ; void add (unsigned int bi, unsigned int bj, const Block &b);  ; void add (unsigned int bi, unsigned int bj, int &rowId, int &colId, const Block &b);  ; void addDBlock (unsigned int bi, unsigned int bj, const DBlock &b);  ; void addDValue (unsigned int bi, unsigned int bj, const Real b);  ; void addDValue (unsigned int bi, unsigned int bj, int &rowId, int &colId, const Real b);  ; void addDiag (unsigned int bi, const Block &b);  ; void addDiag (unsigned int bi, int &rowId, int &colId, const Block &b);  ; void addDiagDBlock (unsigned int bi, const DBlock &b);  ; void addDiagDValue (unsigned int bi, const Real b);  ; void addDiagDValue (unsigned int bi, int &rowId, int &colId, const Real b);  ; void addSym (unsigned int bi, unsigned int bj,",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html:6469,Usability,clear,clear,6469,"wId, Index &colId, bool create=false);  Write block method when rowId and colId are known, this is an optimized wblock specification. More...;  ; Block * wbloc (Index i, Index j, bool create=false);  ; const Block & getBlock (Index i, Index j) const;  ; const BlockTranspose getSymBlock (Index i, Index j) const;  ; void setBlock (Index i, Index j, const Block &v);  ; void setBlock (Index i, Index j, Index &rowId, Index &colId, const Block &v);  ; void addBlock (Index i, Index j, const Block &v);  ; void addBlock (Index i, Index j, Index &rowId, Index &colId, const Block &v);  ; Block * getWBlock (Index i, Index j, bool create=false);  ; void clearRowBlock (Index i);  Clear row block method. Clear all col of this line. More...;  ; void clearColBlock (Index j);  Clear col block method. Clear this col in all row of matrix. More...;  ; std::size_t countEmptyBlocks () const;  ; void clearRowColBlock (Index i);  Clear both row i and column i in a square matrix. More...;  ; void clear ();  Completely clear the matrix. More...;  ; bool check_matrix ();  ; std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &is);  ; void add (unsigned int bi, unsigned int bj, const Block &b);  ; void add (unsigned int bi, unsigned int bj, int &rowId, int &colId, const Block &b);  ; void addDBlock (unsigned int bi, unsigned int bj, const DBlock &b);  ; void addDValue (unsigned int bi, unsigned int bj, const Real b);  ; void addDValue (unsigned int bi, unsigned int bj, int &rowId, int &colId, const Real b);  ; void addDiag (unsigned int bi, const Block &b);  ; void addDiag (unsigned int bi, int &rowId, int &colId, const Block &b);  ; void addDiagDBlock (unsigned int bi, const DBlock &b);  ; void addDiagDValue (unsigned int bi, const Real b);  ; void addDiagDValue (unsigned int bi, int &rowId, int &colId, const Real b);  ; void addSym (unsigned int bi, unsigned int bj, const Block &b);  ; void addSym (unsigned int bi, unsigned int bj, int &rowId, int &colId, int &r",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html:6491,Usability,clear,clear,6491,"wId, Index &colId, bool create=false);  Write block method when rowId and colId are known, this is an optimized wblock specification. More...;  ; Block * wbloc (Index i, Index j, bool create=false);  ; const Block & getBlock (Index i, Index j) const;  ; const BlockTranspose getSymBlock (Index i, Index j) const;  ; void setBlock (Index i, Index j, const Block &v);  ; void setBlock (Index i, Index j, Index &rowId, Index &colId, const Block &v);  ; void addBlock (Index i, Index j, const Block &v);  ; void addBlock (Index i, Index j, Index &rowId, Index &colId, const Block &v);  ; Block * getWBlock (Index i, Index j, bool create=false);  ; void clearRowBlock (Index i);  Clear row block method. Clear all col of this line. More...;  ; void clearColBlock (Index j);  Clear col block method. Clear this col in all row of matrix. More...;  ; std::size_t countEmptyBlocks () const;  ; void clearRowColBlock (Index i);  Clear both row i and column i in a square matrix. More...;  ; void clear ();  Completely clear the matrix. More...;  ; bool check_matrix ();  ; std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &is);  ; void add (unsigned int bi, unsigned int bj, const Block &b);  ; void add (unsigned int bi, unsigned int bj, int &rowId, int &colId, const Block &b);  ; void addDBlock (unsigned int bi, unsigned int bj, const DBlock &b);  ; void addDValue (unsigned int bi, unsigned int bj, const Real b);  ; void addDValue (unsigned int bi, unsigned int bj, int &rowId, int &colId, const Real b);  ; void addDiag (unsigned int bi, const Block &b);  ; void addDiag (unsigned int bi, int &rowId, int &colId, const Block &b);  ; void addDiagDBlock (unsigned int bi, const DBlock &b);  ; void addDiagDValue (unsigned int bi, const Real b);  ; void addDiagDValue (unsigned int bi, int &rowId, int &colId, const Real b);  ; void addSym (unsigned int bi, unsigned int bj, const Block &b);  ; void addSym (unsigned int bi, unsigned int bj, int &rowId, int &colId, int &r",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint_1_1_col_const_iterator-members.html:358,Modifiability,inherit,inherited,358,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::ColConstIterator Member List . This is the complete list of members for sofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::ColConstIterator, including all inherited members. ColConstIterator(const Index _rowIt, int _internal, const CompressedRowSparseMatrixConstraint *_matrix)sofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::ColConstIteratorinlineprotected; ColConstIterator(const ColConstIterator &it2)sofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::ColConstIteratorinline; difference_type typedefsofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::ColConstIterator; getInternal() constsofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::ColConstIteratorinline; index() constsofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::ColConstIteratorinline; isInvalid() constsofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::ColConstIteratorinline; iterator_category typedefsofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::ColConstIterator; operator!=(const ColConstIterator &other) constsofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::ColConstIteratorinline; operator++()sofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::ColConstIteratorinline; operator++(difference_type)sofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::ColConstIteratorinline; operator+=(difference_type i)sofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::ColConstIteratorinline; operator--()sofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::ColConstIteratorinline; operator--(difference_type)sofa::linearalge",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint_1_1_col_const_iterator-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint_1_1_col_const_iterator-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint_1_1_row_const_iterator-members.html:358,Modifiability,inherit,inherited,358,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::RowConstIterator Member List . This is the complete list of members for sofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::RowConstIterator, including all inherited members. begin() constsofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::RowConstIteratorinline; CompressedRowSparseMatrixConstraint classsofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::RowConstIteratorfriend; difference_type typedefsofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::RowConstIterator; empty() constsofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::RowConstIteratorinline; end() constsofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::RowConstIteratorinline; getInternal() constsofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::RowConstIteratorinline; index() constsofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::RowConstIteratorinline; isInvalid() constsofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::RowConstIteratorinline; iterator_category typedefsofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::RowConstIterator; operator!=(const RowConstIterator &other) constsofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::RowConstIteratorinline; operator*(const VecDeriv &v) constsofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::RowConstIteratorinline; operator+(difference_type i) constsofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::RowConstIteratorinline; operator++()sofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::RowConstIteratorinline; operator++(difference",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint_1_1_row_const_iterator-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint_1_1_row_const_iterator-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint_1_1_row_type-members.html:340,Modifiability,inherit,inherited,340,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::RowType Member List . This is the complete list of members for sofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::RowType, including all inherited members. begin() constsofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::RowTypeinline; cbegin() constsofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::RowTypeinline; cend() constsofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::RowTypeinline; empty() constsofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::RowTypeinline; end() constsofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::RowTypeinline; find(Index col) constsofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::RowTypeinline; operator++()sofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::RowTypeinline; operator++(int)sofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::RowTypeinline; RowType(ColConstIterator begin, ColConstIterator end)sofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::RowTypeinline; setBegin(ColConstIterator i)sofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::RowTypeinline; setEnd(ColConstIterator i)sofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::RowTypeinline; size() constsofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::RowTypeinline. Generated on Mon Nov 11 2024 03:31:22 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint_1_1_row_type-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint_1_1_row_type-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint_1_1_row_write_accessor-members.html:358,Modifiability,inherit,inherited,358,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::RowWriteAccessor Member List . This is the complete list of members for sofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::RowWriteAccessor, including all inherited members. addCol(Index id, const Block &value)sofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::RowWriteAccessorinline; CompressedRowSparseMatrixConstraint classsofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::RowWriteAccessorfriend; operator!=(const RowWriteAccessor &it2) constsofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::RowWriteAccessorinline; operator==(const RowWriteAccessor &it2) constsofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::RowWriteAccessorinline; RowWriteAccessor(CompressedRowSparseMatrixConstraint *_matrix, int _rowIndex)sofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::RowWriteAccessorinlineprotected; setCol(Index id, const Block &value)sofa::linearalgebra::CompressedRowSparseMatrixConstraint< TBlock, TPolicy >::RowWriteAccessorinline. Generated on Mon Nov 11 2024 03:31:22 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint_1_1_row_write_accessor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_constraint_1_1_row_write_accessor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic-members.html:316,Modifiability,inherit,inherited,316,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy > Member List . This is the complete list of members for sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >, including all inherited members. add(unsigned int bi, unsigned int bj, const Block &b)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inline; add(unsigned int bi, unsigned int bj, int &rowId, int &colId, const Block &b)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inline; addBlock(Index i, Index j, const Block &v)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inline; addBlock(Index i, Index j, Index &rowId, Index &colId, const Block &v)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inline; addDBlock(unsigned int bi, unsigned int bj, const DBlock &b)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inline; addDiag(unsigned int bi, const Block &b)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inline; addDiag(unsigned int bi, int &rowId, int &colId, const Block &b)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inline; addDiagDBlock(unsigned int bi, const DBlock &b)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inline; addDiagDValue(unsigned int bi, const Real b)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inline; addDiagDValue(unsigned int bi, int &rowId, int &colId, const Real b)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inline; addDValue(unsigned int bi, unsigned int bj, const Real b)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inline; addDValue(unsigned int bi, unsigned int bj, int &rowId, int &colId, const Real b)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inline; add",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic-members.html:3876,Usability,clear,clear,3876,"aultPolicystatic; bloc(Index i, Index j) constsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inline; Block typedefsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >; block(Index i, Index j) constsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inline; blockMultTranspose(const TBlock &blockA, const TBlock &blockB)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inlinestatic; BlockTranspose typedefsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >; btempsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >; category enum valuesofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >; check_matrix()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inline; check_matrix(Index nzmax, Index m, Index n, Index *a_p, Index *a_i, Block *a_x)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inlinestatic; clear()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inline; ClearByZerossofa::linearalgebra::CRSDefaultPolicystatic; clearColBlock(Index j)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inline; clearRowBlock(Index i)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inline; clearRowColBlock(Index i)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inline; colBSize() constsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inline; colsIndexsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >; colsValuesofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >; compress()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inline; compressBtemp()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inlineprotected; compressCSR()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inlinepro",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic-members.html:4020,Usability,clear,clearColBlock,4020,"earalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >; block(Index i, Index j) constsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inline; blockMultTranspose(const TBlock &blockA, const TBlock &blockB)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inlinestatic; BlockTranspose typedefsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >; btempsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >; category enum valuesofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >; check_matrix()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inline; check_matrix(Index nzmax, Index m, Index n, Index *a_p, Index *a_i, Block *a_x)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inlinestatic; clear()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inline; ClearByZerossofa::linearalgebra::CRSDefaultPolicystatic; clearColBlock(Index j)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inline; clearRowBlock(Index i)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inline; clearRowColBlock(Index i)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inline; colBSize() constsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inline; colsIndexsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >; colsValuesofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >; compress()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inline; compressBtemp()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inlineprotected; compressCSR()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inlineprotected; CompressedRowSparseMatrixGeneric()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inline; CompressedRowSparseMatrixG",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic-members.html:4122,Usability,clear,clearRowBlock,4122,"nearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inline; blockMultTranspose(const TBlock &blockA, const TBlock &blockB)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inlinestatic; BlockTranspose typedefsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >; btempsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >; category enum valuesofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >; check_matrix()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inline; check_matrix(Index nzmax, Index m, Index n, Index *a_p, Index *a_i, Block *a_x)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inlinestatic; clear()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inline; ClearByZerossofa::linearalgebra::CRSDefaultPolicystatic; clearColBlock(Index j)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inline; clearRowBlock(Index i)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inline; clearRowColBlock(Index i)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inline; colBSize() constsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inline; colsIndexsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >; colsValuesofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >; compress()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inline; compressBtemp()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inlineprotected; compressCSR()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inlineprotected; CompressedRowSparseMatrixGeneric()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inline; CompressedRowSparseMatrixGeneric(Index nbBlockRow, Index nbBlockCol)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBloc",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic-members.html:4224,Usability,clear,clearRowColBlock,4224," &blockA, const TBlock &blockB)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inlinestatic; BlockTranspose typedefsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >; btempsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >; category enum valuesofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >; check_matrix()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inline; check_matrix(Index nzmax, Index m, Index n, Index *a_p, Index *a_i, Block *a_x)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inlinestatic; clear()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inline; ClearByZerossofa::linearalgebra::CRSDefaultPolicystatic; clearColBlock(Index j)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inline; clearRowBlock(Index i)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inline; clearRowColBlock(Index i)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inline; colBSize() constsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inline; colsIndexsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >; colsValuesofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >; compress()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inline; compressBtemp()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inlineprotected; compressCSR()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inlineprotected; CompressedRowSparseMatrixGeneric()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inline; CompressedRowSparseMatrixGeneric(Index nbBlockRow, Index nbBlockCol)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >inline; CompressZerossofa::linearalgebra::CRSDefaultPolicystatic; countEmptyBlocks() constso",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html:1488,Energy Efficiency,efficient,efficient,1488,"ce . #include <CompressedRowSparseMatrixGeneric.h>. Inheritance diagram for sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >:. [legend]. Classes; struct  IndexedBlock;  ; class  Range;  . Public Attributes; Index nBlockRow;  Size. More...;  ; Index nBlockCol;  Mathematical size of the matrix, in blocks. More...;  ; VecIndex rowIndex;  Compressed sparse data structure. More...;  ; VecIndex rowBegin;  column indices of non-empty blocks in each row. The column indices of the non-empty block within the i-th non-empty row are all the colsIndex[j], j in [rowBegin[i],rowBegin[i+1]) More...;  ; VecIndex colsIndex;  column indices of all the non-empty blocks, sorted by increasing row index and column index More...;  ; VecBlock colsValue;  values of the non-empty blocks, in the same order as in colsIndex More...;  ; VecFlag touchedBlock;  boolean vector, i-th value is true if block has been touched since last compression. More...;  ; VecIndexedBlock btemp;  Additional storage to make block insertion more efficient. More...;  ; bool skipCompressZero;  ; VecIndex oldRowIndex;  Temporary vectors used during compression. More...;  ; VecIndex oldRowBegin;  ; VecIndex oldColsIndex;  ; VecBlock oldColsValue;  . Static Public Attributes; static constexpr sofa::Index NL = traits::NL;  Number of rows of a block. More...;  ; static constexpr sofa::Index NC = traits::NC;  Number of columns of a block. More...;  ; static constexpr Index s_invalidIndex = std::is_signed_v<Index> ? std::numeric_limits<Index>::lowest() : std::numeric_limits<Index>::max();  ;  Static Public Attributes inherited from sofa::linearalgebra::CRSDefaultPolicy; static constexpr bool IsAlwaysSquare = false;  Set to true if this matrix is always square (must be true for symmetric) More...;  ; static constexpr bool IsAlwaysSymmetric = false;  Set to true if this matrix is always symmetric (IsAlwaysSquare should be true) More...;  ; static constexpr bool AutoSize = false;  Set to true if the size o",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html:10181,Energy Efficiency,efficient,efficient,10181," blockMultTranspose (const TBlock &blockA, const TBlock &blockB);  ; template<typename TBlock2 , typename TPolicy2 > ; void transposeFullRows (CompressedRowSparseMatrixGeneric< TBlock2, TPolicy2 > &res) const;  Transpose the matrix into res, works only for 3 array variant (""full rows"") matrices, ie which can be expressed using the rowBegin, colsIndex and colsValue arrays solely. More...;  ; template<typename RB , typename RP , typename MB , typename MP > ; void mul (CompressedRowSparseMatrixGeneric< RB, RP > &res, const CompressedRowSparseMatrixGeneric< MB, MP > &m) const;  ; template<typename RB , typename RP , typename MB , typename MP > ; void mulTranspose (CompressedRowSparseMatrixGeneric< RB, RP > &res, const CompressedRowSparseMatrixGeneric< MB, MP > &m) const;  . Attribute details. ◆ btemp. template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . VecIndexedBlock sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::btemp. Additional storage to make block insertion more efficient. ; unsorted blocks and their indices . ◆ colsIndex. template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . VecIndex sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::colsIndex. column indices of all the non-empty blocks, sorted by increasing row index and column index . ◆ colsValue. template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . VecBlock sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::colsValue. values of the non-empty blocks, in the same order as in colsIndex . ◆ nBlockCol. template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . Index sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::nBlockCol. Mathematical size of the matrix, in blocks. . ◆ nBlockRow. template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . Index sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::nBlockRow. Size. . ◆ NC. template<typename TBlock",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html:2062,Modifiability,inherit,inherited,2062,"...;  ; VecIndex colsIndex;  column indices of all the non-empty blocks, sorted by increasing row index and column index More...;  ; VecBlock colsValue;  values of the non-empty blocks, in the same order as in colsIndex More...;  ; VecFlag touchedBlock;  boolean vector, i-th value is true if block has been touched since last compression. More...;  ; VecIndexedBlock btemp;  Additional storage to make block insertion more efficient. More...;  ; bool skipCompressZero;  ; VecIndex oldRowIndex;  Temporary vectors used during compression. More...;  ; VecIndex oldRowBegin;  ; VecIndex oldColsIndex;  ; VecBlock oldColsValue;  . Static Public Attributes; static constexpr sofa::Index NL = traits::NL;  Number of rows of a block. More...;  ; static constexpr sofa::Index NC = traits::NC;  Number of columns of a block. More...;  ; static constexpr Index s_invalidIndex = std::is_signed_v<Index> ? std::numeric_limits<Index>::lowest() : std::numeric_limits<Index>::max();  ;  Static Public Attributes inherited from sofa::linearalgebra::CRSDefaultPolicy; static constexpr bool IsAlwaysSquare = false;  Set to true if this matrix is always square (must be true for symmetric) More...;  ; static constexpr bool IsAlwaysSymmetric = false;  Set to true if this matrix is always symmetric (IsAlwaysSquare should be true) More...;  ; static constexpr bool AutoSize = false;  Set to true if the size of the matrix should be automatically increased when new blocks are added. More...;  ; static constexpr bool AutoCompress = true;  Set to true if the matrix should be automatically compressed (easier to use, but might cause issues in multithreading) More...;  ; static constexpr bool CompressZeros = true;  Set to true if the blocks that are all zeros should be removed from the matrix when compressing (expensive) More...;  ; static constexpr bool ClearByZeros = true;  Set to true if clear methods will put all concerned value to zero instead of clearing vectors (CompressZeros should be true) More...;  ; sta",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html:4755,Performance,optimiz,optimized,4755,"RowSparseMatrixGeneric ()=default;  ; Index rowBSize () const;  ; Index colBSize () const;  ; const VecIndex & getRowIndex () const;  ; const VecIndex & getRowBegin () const;  ; Range getRowRange (Index id) const;  Returns the range of indices from the column indices corresponding to the id-th row. More...;  ; const VecIndex & getColsIndex () const;  ; const VecBlock & getColsValue () const;  ; virtual void resizeBlock (Index nbBRow, Index nbBCol);  ; void resizeBloc (Index nbBRow, Index nbBCol);  ; void compress ();  ; void swap (Matrix &m);  ; void fullRows ();  Make sure all rows have an entry even if they are empty. More...;  ; void shiftIndices (Index base);  ; const Block & block (Index i, Index j) const;  Get block method. More...;  ; const Block & bloc (Index i, Index j) const;  ; Block * wblock (Index i, Index j, bool create=false);  Write block method. More...;  ; Block * wbloc (Index i, Index j, bool create=false);  ; Block * wblock (Index i, Index j, Index &rowId, Index &colId, bool create=false);  Write block method when rowId and colId are known, this is an optimized wblock specification. More...;  ; const Block & getBlock (Index i, Index j) const;  ; const BlockTranspose getSymBlock (Index i, Index j) const;  ; void setBlock (Index i, Index j, const Block &v);  ; void addBlock (Index i, Index j, const Block &v);  ; void setBlock (Index i, Index j, Index &rowId, Index &colId, const Block &v);  ; void addBlock (Index i, Index j, Index &rowId, Index &colId, const Block &v);  ; Block * getWBlock (Index i, Index j, bool create=false);  ; void clearRowBlock (Index i);  Clear row block method. Clear all col of this line. More...;  ; void clearColBlock (Index j);  Clear col block method. Clear this col in all row of matrix. More...;  ; std::size_t countEmptyBlocks () const;  ; template<typename = typename std::enable_if< Policy::IsAlwaysSquare>> ; void clearRowColBlock (Index i);  Clear both row i and column i in a square matrix. More...;  ; void clear ();  Co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html:34215,Performance,optimiz,optimized,34215,"oc(). template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . Block* sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::wbloc ; (; Index ; i, . Index ; j, . bool ; create = false . ). inline . ◆ wblock() [1/2]. template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . Block* sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::wblock ; (; Index ; i, . Index ; j, . bool ; create = false . ). inline . Write block method. ; Parameters. Lineindex i and column index j ; create,booleanto decide if wblock could add new value into not existing line/column . Returnspointer on Block value if exist or nullptr if not . ◆ wblock() [2/2]. template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . Block* sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::wblock ; (; Index ; i, . Index ; j, . Index & ; rowId, . Index & ; colId, . bool ; create = false . ). inline . Write block method when rowId and colId are known, this is an optimized wblock specification. ; Parameters. Lineindex i and column index j ; rowId: Index of value i into rowIndex internal vector ; colId: Index of value j into colIndex internal vector ; create,booleanto decide if wblock could add new value into not existing line/column . Returnspointer on Block value if exist or nullptr if not . ◆ write(). template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . std::ostream& sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::write ; (; std::ostream & ; os); const. inline . ◆ writeVector(). template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . template<typename TVec > . void sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::writeVector ; (; const TVec & ; vec, . std::ostream & ; os . ). inlineprotected . Enum details. ◆ anonymous enum. template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . anonymous enum. Enumeratorcategory . ◆ anonymous enum. template<t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html:13492,Safety,avoid,avoid,13492,"ock, TPolicy >::rowBegin. column indices of non-empty blocks in each row. The column indices of the non-empty block within the i-th non-empty row are all the colsIndex[j], j in [rowBegin[i],rowBegin[i+1]) . ◆ rowIndex. template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . VecIndex sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::rowIndex. Compressed sparse data structure. ; indices of non-empty block rows . ◆ s_invalidIndex. template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . constexpr Index sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::s_invalidIndex = std::is_signed_v<Index> ? std::numeric_limits<Index>::lowest() : std::numeric_limits<Index>::max(). staticconstexpr . ◆ skipCompressZero. template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . bool sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::skipCompressZero. When true, only compressBtemp if needed This is to avoid compressCRS costly method when no change into matrix size occurs. . ◆ touchedBlock. template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . VecFlag sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::touchedBlock. boolean vector, i-th value is true if block has been touched since last compression. . Constructor details. ◆ CompressedRowSparseMatrixGeneric() [1/2]. template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::CompressedRowSparseMatrixGeneric ; (; ). inline . ◆ CompressedRowSparseMatrixGeneric() [2/2]. template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::CompressedRowSparseMatrixGeneric ; (; Index ; nbBlockRow, . Index ; nbBlockCol . ). inline . ◆ ~CompressedRowSparseMatrixGeneric(). template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . virtual sofa::linearalgebra::Compr",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html:2940,Usability,clear,clear,2940,"umeric_limits<Index>::lowest() : std::numeric_limits<Index>::max();  ;  Static Public Attributes inherited from sofa::linearalgebra::CRSDefaultPolicy; static constexpr bool IsAlwaysSquare = false;  Set to true if this matrix is always square (must be true for symmetric) More...;  ; static constexpr bool IsAlwaysSymmetric = false;  Set to true if this matrix is always symmetric (IsAlwaysSquare should be true) More...;  ; static constexpr bool AutoSize = false;  Set to true if the size of the matrix should be automatically increased when new blocks are added. More...;  ; static constexpr bool AutoCompress = true;  Set to true if the matrix should be automatically compressed (easier to use, but might cause issues in multithreading) More...;  ; static constexpr bool CompressZeros = true;  Set to true if the blocks that are all zeros should be removed from the matrix when compressing (expensive) More...;  ; static constexpr bool ClearByZeros = true;  Set to true if clear methods will put all concerned value to zero instead of clearing vectors (CompressZeros should be true) More...;  ; static constexpr bool OrderedInsertion = false;  Set to true if insertion in matrix are in most case at last line index or last col index. More...;  ; static constexpr bool StoreLowerTriangularBlock = true;  Set to false to disable storage of blocks on the lower triangular part (IsAlwaysSymmetric must be true) More...;  ; static constexpr int matrixType = 0;  Do not change this value, has to be overrided for all derivated class. More...;  . Public Member Functions;  CompressedRowSparseMatrixGeneric ();  ;  CompressedRowSparseMatrixGeneric (Index nbBlockRow, Index nbBlockCol);  ; virtual ~CompressedRowSparseMatrixGeneric ()=default;  ; Index rowBSize () const;  ; Index colBSize () const;  ; const VecIndex & getRowIndex () const;  ; const VecIndex & getRowBegin () const;  ; Range getRowRange (Index id) const;  Returns the range of indices from the column indices corresponding to the id-th row.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html:3002,Usability,clear,clearing,3002,"umeric_limits<Index>::lowest() : std::numeric_limits<Index>::max();  ;  Static Public Attributes inherited from sofa::linearalgebra::CRSDefaultPolicy; static constexpr bool IsAlwaysSquare = false;  Set to true if this matrix is always square (must be true for symmetric) More...;  ; static constexpr bool IsAlwaysSymmetric = false;  Set to true if this matrix is always symmetric (IsAlwaysSquare should be true) More...;  ; static constexpr bool AutoSize = false;  Set to true if the size of the matrix should be automatically increased when new blocks are added. More...;  ; static constexpr bool AutoCompress = true;  Set to true if the matrix should be automatically compressed (easier to use, but might cause issues in multithreading) More...;  ; static constexpr bool CompressZeros = true;  Set to true if the blocks that are all zeros should be removed from the matrix when compressing (expensive) More...;  ; static constexpr bool ClearByZeros = true;  Set to true if clear methods will put all concerned value to zero instead of clearing vectors (CompressZeros should be true) More...;  ; static constexpr bool OrderedInsertion = false;  Set to true if insertion in matrix are in most case at last line index or last col index. More...;  ; static constexpr bool StoreLowerTriangularBlock = true;  Set to false to disable storage of blocks on the lower triangular part (IsAlwaysSymmetric must be true) More...;  ; static constexpr int matrixType = 0;  Do not change this value, has to be overrided for all derivated class. More...;  . Public Member Functions;  CompressedRowSparseMatrixGeneric ();  ;  CompressedRowSparseMatrixGeneric (Index nbBlockRow, Index nbBlockCol);  ; virtual ~CompressedRowSparseMatrixGeneric ()=default;  ; Index rowBSize () const;  ; Index colBSize () const;  ; const VecIndex & getRowIndex () const;  ; const VecIndex & getRowBegin () const;  ; Range getRowRange (Index id) const;  Returns the range of indices from the column indices corresponding to the id-th row.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html:5246,Usability,clear,clearRowBlock,5246,"lsValue () const;  ; virtual void resizeBlock (Index nbBRow, Index nbBCol);  ; void resizeBloc (Index nbBRow, Index nbBCol);  ; void compress ();  ; void swap (Matrix &m);  ; void fullRows ();  Make sure all rows have an entry even if they are empty. More...;  ; void shiftIndices (Index base);  ; const Block & block (Index i, Index j) const;  Get block method. More...;  ; const Block & bloc (Index i, Index j) const;  ; Block * wblock (Index i, Index j, bool create=false);  Write block method. More...;  ; Block * wbloc (Index i, Index j, bool create=false);  ; Block * wblock (Index i, Index j, Index &rowId, Index &colId, bool create=false);  Write block method when rowId and colId are known, this is an optimized wblock specification. More...;  ; const Block & getBlock (Index i, Index j) const;  ; const BlockTranspose getSymBlock (Index i, Index j) const;  ; void setBlock (Index i, Index j, const Block &v);  ; void addBlock (Index i, Index j, const Block &v);  ; void setBlock (Index i, Index j, Index &rowId, Index &colId, const Block &v);  ; void addBlock (Index i, Index j, Index &rowId, Index &colId, const Block &v);  ; Block * getWBlock (Index i, Index j, bool create=false);  ; void clearRowBlock (Index i);  Clear row block method. Clear all col of this line. More...;  ; void clearColBlock (Index j);  Clear col block method. Clear this col in all row of matrix. More...;  ; std::size_t countEmptyBlocks () const;  ; template<typename = typename std::enable_if< Policy::IsAlwaysSquare>> ; void clearRowColBlock (Index i);  Clear both row i and column i in a square matrix. More...;  ; void clear ();  Completely clear the matrix. More...;  ; bool check_matrix ();  ; std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &is);  ; BlockMatrixWriter operators; void add (unsigned int bi, unsigned int bj, const Block &b);  ; void add (unsigned int bi, unsigned int bj, int &rowId, int &colId, const Block &b);  ; void addDBlock (unsigned int bi, unsign",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html:5341,Usability,clear,clearColBlock,5341,"k (Index i, Index j) const;  Get block method. More...;  ; const Block & bloc (Index i, Index j) const;  ; Block * wblock (Index i, Index j, bool create=false);  Write block method. More...;  ; Block * wbloc (Index i, Index j, bool create=false);  ; Block * wblock (Index i, Index j, Index &rowId, Index &colId, bool create=false);  Write block method when rowId and colId are known, this is an optimized wblock specification. More...;  ; const Block & getBlock (Index i, Index j) const;  ; const BlockTranspose getSymBlock (Index i, Index j) const;  ; void setBlock (Index i, Index j, const Block &v);  ; void addBlock (Index i, Index j, const Block &v);  ; void setBlock (Index i, Index j, Index &rowId, Index &colId, const Block &v);  ; void addBlock (Index i, Index j, Index &rowId, Index &colId, const Block &v);  ; Block * getWBlock (Index i, Index j, bool create=false);  ; void clearRowBlock (Index i);  Clear row block method. Clear all col of this line. More...;  ; void clearColBlock (Index j);  Clear col block method. Clear this col in all row of matrix. More...;  ; std::size_t countEmptyBlocks () const;  ; template<typename = typename std::enable_if< Policy::IsAlwaysSquare>> ; void clearRowColBlock (Index i);  Clear both row i and column i in a square matrix. More...;  ; void clear ();  Completely clear the matrix. More...;  ; bool check_matrix ();  ; std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &is);  ; BlockMatrixWriter operators; void add (unsigned int bi, unsigned int bj, const Block &b);  ; void add (unsigned int bi, unsigned int bj, int &rowId, int &colId, const Block &b);  ; void addDBlock (unsigned int bi, unsigned int bj, const DBlock &b);  ; void addDValue (unsigned int bi, unsigned int bj, const Real b);  ; void addDValue (unsigned int bi, unsigned int bj, int &rowId, int &colId, const Real b);  ; template<typename = typename std::enable_if< Policy::IsAlwaysSquare>> ; void addDiag (unsigned int bi, const Block &b);  ; t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html:5559,Usability,clear,clearRowColBlock,5559,"thod. More...;  ; Block * wbloc (Index i, Index j, bool create=false);  ; Block * wblock (Index i, Index j, Index &rowId, Index &colId, bool create=false);  Write block method when rowId and colId are known, this is an optimized wblock specification. More...;  ; const Block & getBlock (Index i, Index j) const;  ; const BlockTranspose getSymBlock (Index i, Index j) const;  ; void setBlock (Index i, Index j, const Block &v);  ; void addBlock (Index i, Index j, const Block &v);  ; void setBlock (Index i, Index j, Index &rowId, Index &colId, const Block &v);  ; void addBlock (Index i, Index j, Index &rowId, Index &colId, const Block &v);  ; Block * getWBlock (Index i, Index j, bool create=false);  ; void clearRowBlock (Index i);  Clear row block method. Clear all col of this line. More...;  ; void clearColBlock (Index j);  Clear col block method. Clear this col in all row of matrix. More...;  ; std::size_t countEmptyBlocks () const;  ; template<typename = typename std::enable_if< Policy::IsAlwaysSquare>> ; void clearRowColBlock (Index i);  Clear both row i and column i in a square matrix. More...;  ; void clear ();  Completely clear the matrix. More...;  ; bool check_matrix ();  ; std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &is);  ; BlockMatrixWriter operators; void add (unsigned int bi, unsigned int bj, const Block &b);  ; void add (unsigned int bi, unsigned int bj, int &rowId, int &colId, const Block &b);  ; void addDBlock (unsigned int bi, unsigned int bj, const DBlock &b);  ; void addDValue (unsigned int bi, unsigned int bj, const Real b);  ; void addDValue (unsigned int bi, unsigned int bj, int &rowId, int &colId, const Real b);  ; template<typename = typename std::enable_if< Policy::IsAlwaysSquare>> ; void addDiag (unsigned int bi, const Block &b);  ; template<typename = typename std::enable_if< Policy::IsAlwaysSquare>> ; void addDiag (unsigned int bi, int &rowId, int &colId, const Block &b);  ; template<typename = typename ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html:5655,Usability,clear,clear,5655,"d, bool create=false);  Write block method when rowId and colId are known, this is an optimized wblock specification. More...;  ; const Block & getBlock (Index i, Index j) const;  ; const BlockTranspose getSymBlock (Index i, Index j) const;  ; void setBlock (Index i, Index j, const Block &v);  ; void addBlock (Index i, Index j, const Block &v);  ; void setBlock (Index i, Index j, Index &rowId, Index &colId, const Block &v);  ; void addBlock (Index i, Index j, Index &rowId, Index &colId, const Block &v);  ; Block * getWBlock (Index i, Index j, bool create=false);  ; void clearRowBlock (Index i);  Clear row block method. Clear all col of this line. More...;  ; void clearColBlock (Index j);  Clear col block method. Clear this col in all row of matrix. More...;  ; std::size_t countEmptyBlocks () const;  ; template<typename = typename std::enable_if< Policy::IsAlwaysSquare>> ; void clearRowColBlock (Index i);  Clear both row i and column i in a square matrix. More...;  ; void clear ();  Completely clear the matrix. More...;  ; bool check_matrix ();  ; std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &is);  ; BlockMatrixWriter operators; void add (unsigned int bi, unsigned int bj, const Block &b);  ; void add (unsigned int bi, unsigned int bj, int &rowId, int &colId, const Block &b);  ; void addDBlock (unsigned int bi, unsigned int bj, const DBlock &b);  ; void addDValue (unsigned int bi, unsigned int bj, const Real b);  ; void addDValue (unsigned int bi, unsigned int bj, int &rowId, int &colId, const Real b);  ; template<typename = typename std::enable_if< Policy::IsAlwaysSquare>> ; void addDiag (unsigned int bi, const Block &b);  ; template<typename = typename std::enable_if< Policy::IsAlwaysSquare>> ; void addDiag (unsigned int bi, int &rowId, int &colId, const Block &b);  ; template<typename = typename std::enable_if< Policy::IsAlwaysSquare>> ; void addDiagDBlock (unsigned int bi, const DBlock &b);  ; template<typename = typename std:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html:5677,Usability,clear,clear,5677,"d, bool create=false);  Write block method when rowId and colId are known, this is an optimized wblock specification. More...;  ; const Block & getBlock (Index i, Index j) const;  ; const BlockTranspose getSymBlock (Index i, Index j) const;  ; void setBlock (Index i, Index j, const Block &v);  ; void addBlock (Index i, Index j, const Block &v);  ; void setBlock (Index i, Index j, Index &rowId, Index &colId, const Block &v);  ; void addBlock (Index i, Index j, Index &rowId, Index &colId, const Block &v);  ; Block * getWBlock (Index i, Index j, bool create=false);  ; void clearRowBlock (Index i);  Clear row block method. Clear all col of this line. More...;  ; void clearColBlock (Index j);  Clear col block method. Clear this col in all row of matrix. More...;  ; std::size_t countEmptyBlocks () const;  ; template<typename = typename std::enable_if< Policy::IsAlwaysSquare>> ; void clearRowColBlock (Index i);  Clear both row i and column i in a square matrix. More...;  ; void clear ();  Completely clear the matrix. More...;  ; bool check_matrix ();  ; std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &is);  ; BlockMatrixWriter operators; void add (unsigned int bi, unsigned int bj, const Block &b);  ; void add (unsigned int bi, unsigned int bj, int &rowId, int &colId, const Block &b);  ; void addDBlock (unsigned int bi, unsigned int bj, const DBlock &b);  ; void addDValue (unsigned int bi, unsigned int bj, const Real b);  ; void addDValue (unsigned int bi, unsigned int bj, int &rowId, int &colId, const Real b);  ; template<typename = typename std::enable_if< Policy::IsAlwaysSquare>> ; void addDiag (unsigned int bi, const Block &b);  ; template<typename = typename std::enable_if< Policy::IsAlwaysSquare>> ; void addDiag (unsigned int bi, int &rowId, int &colId, const Block &b);  ; template<typename = typename std::enable_if< Policy::IsAlwaysSquare>> ; void addDiagDBlock (unsigned int bi, const DBlock &b);  ; template<typename = typename std:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html:21159,Usability,clear,clear,21159,"ressedRowSparseMatrixGeneric< TBlock, TPolicy >::block ; (; Index ; i, . Index ; j . ); const. inline . Get block method. ; Parameters. Lineindex i and column index j . ReturnsBlock value if exist or empty Block if not . ◆ blockMultTranspose(). template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . static auto sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::blockMultTranspose ; (; const TBlock & ; blockA, . const TBlock & ; blockB . ). inlinestatic . ◆ check_matrix() [1/2]. template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . bool sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::check_matrix ; (; ). inline . ◆ check_matrix() [2/2]. template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . static bool sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::check_matrix ; (; Index ; nzmax, . Index ; m, . Index ; n, . Index * ; a_p, . Index * ; a_i, . Block * ; a_x . ). inlinestatic . ◆ clear(). template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::clear ; (; ). inline . Completely clear the matrix. ; Warningif ClearByZeros Policy is activated all value in colsValue will be set to zero using default constructor . ◆ clearColBlock(). template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::clearColBlock ; (; Index ; j). inline . Clear col block method. Clear this col in all row of matrix. ; Parameters. j: Col index considering size of matrix in block. . Warningif ClearByZeros Policy is activated all col j of each line will be set to zero using default constructor . ◆ clearRowBlock(). template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::clearRowBlock ; (; Index ; i). inline . Clear row block method. Clear al",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html:21313,Usability,clear,clear,21313,"od. ; Parameters. Lineindex i and column index j . ReturnsBlock value if exist or empty Block if not . ◆ blockMultTranspose(). template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . static auto sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::blockMultTranspose ; (; const TBlock & ; blockA, . const TBlock & ; blockB . ). inlinestatic . ◆ check_matrix() [1/2]. template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . bool sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::check_matrix ; (; ). inline . ◆ check_matrix() [2/2]. template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . static bool sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::check_matrix ; (; Index ; nzmax, . Index ; m, . Index ; n, . Index * ; a_p, . Index * ; a_i, . Block * ; a_x . ). inlinestatic . ◆ clear(). template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::clear ; (; ). inline . Completely clear the matrix. ; Warningif ClearByZeros Policy is activated all value in colsValue will be set to zero using default constructor . ◆ clearColBlock(). template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::clearColBlock ; (; Index ; j). inline . Clear col block method. Clear this col in all row of matrix. ; Parameters. j: Col index considering size of matrix in block. . Warningif ClearByZeros Policy is activated all col j of each line will be set to zero using default constructor . ◆ clearRowBlock(). template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::clearRowBlock ; (; Index ; i). inline . Clear row block method. Clear all col of this line. ; Parameters. i: Line index considering size of matrix in block. . Warningif ClearByZeros Policy i",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html:21347,Usability,clear,clear,21347,"if exist or empty Block if not . ◆ blockMultTranspose(). template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . static auto sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::blockMultTranspose ; (; const TBlock & ; blockA, . const TBlock & ; blockB . ). inlinestatic . ◆ check_matrix() [1/2]. template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . bool sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::check_matrix ; (; ). inline . ◆ check_matrix() [2/2]. template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . static bool sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::check_matrix ; (; Index ; nzmax, . Index ; m, . Index ; n, . Index * ; a_p, . Index * ; a_i, . Block * ; a_x . ). inlinestatic . ◆ clear(). template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::clear ; (; ). inline . Completely clear the matrix. ; Warningif ClearByZeros Policy is activated all value in colsValue will be set to zero using default constructor . ◆ clearColBlock(). template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::clearColBlock ; (; Index ; j). inline . Clear col block method. Clear this col in all row of matrix. ; Parameters. j: Col index considering size of matrix in block. . Warningif ClearByZeros Policy is activated all col j of each line will be set to zero using default constructor . ◆ clearRowBlock(). template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::clearRowBlock ; (; Index ; i). inline . Clear row block method. Clear all col of this line. ; Parameters. i: Line index considering size of matrix in block. . Warningif ClearByZeros Policy is activated all col value of line will be set to zero using default co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html:21483,Usability,clear,clearColBlock,21483,":linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::blockMultTranspose ; (; const TBlock & ; blockA, . const TBlock & ; blockB . ). inlinestatic . ◆ check_matrix() [1/2]. template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . bool sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::check_matrix ; (; ). inline . ◆ check_matrix() [2/2]. template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . static bool sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::check_matrix ; (; Index ; nzmax, . Index ; m, . Index ; n, . Index * ; a_p, . Index * ; a_i, . Block * ; a_x . ). inlinestatic . ◆ clear(). template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::clear ; (; ). inline . Completely clear the matrix. ; Warningif ClearByZeros Policy is activated all value in colsValue will be set to zero using default constructor . ◆ clearColBlock(). template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::clearColBlock ; (; Index ; j). inline . Clear col block method. Clear this col in all row of matrix. ; Parameters. j: Col index considering size of matrix in block. . Warningif ClearByZeros Policy is activated all col j of each line will be set to zero using default constructor . ◆ clearRowBlock(). template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::clearRowBlock ; (; Index ; i). inline . Clear row block method. Clear all col of this line. ; Parameters. i: Line index considering size of matrix in block. . Warningif ClearByZeros Policy is activated all col value of line will be set to zero using default constructor . ◆ clearRowColBlock(). template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . template<typename = typename std::enable",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html:21645,Usability,clear,clearColBlock,21645,"k & ; blockB . ). inlinestatic . ◆ check_matrix() [1/2]. template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . bool sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::check_matrix ; (; ). inline . ◆ check_matrix() [2/2]. template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . static bool sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::check_matrix ; (; Index ; nzmax, . Index ; m, . Index ; n, . Index * ; a_p, . Index * ; a_i, . Block * ; a_x . ). inlinestatic . ◆ clear(). template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::clear ; (; ). inline . Completely clear the matrix. ; Warningif ClearByZeros Policy is activated all value in colsValue will be set to zero using default constructor . ◆ clearColBlock(). template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::clearColBlock ; (; Index ; j). inline . Clear col block method. Clear this col in all row of matrix. ; Parameters. j: Col index considering size of matrix in block. . Warningif ClearByZeros Policy is activated all col j of each line will be set to zero using default constructor . ◆ clearRowBlock(). template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::clearRowBlock ; (; Index ; i). inline . Clear row block method. Clear all col of this line. ; Parameters. i: Line index considering size of matrix in block. . Warningif ClearByZeros Policy is activated all col value of line will be set to zero using default constructor . ◆ clearRowColBlock(). template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . template<typename = typename std::enable_if< Policy::IsAlwaysSquare>> . void sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::clearRowColBlock ; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html:21928,Usability,clear,clearRowBlock,21928,"licy> . static bool sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::check_matrix ; (; Index ; nzmax, . Index ; m, . Index ; n, . Index * ; a_p, . Index * ; a_i, . Block * ; a_x . ). inlinestatic . ◆ clear(). template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::clear ; (; ). inline . Completely clear the matrix. ; Warningif ClearByZeros Policy is activated all value in colsValue will be set to zero using default constructor . ◆ clearColBlock(). template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::clearColBlock ; (; Index ; j). inline . Clear col block method. Clear this col in all row of matrix. ; Parameters. j: Col index considering size of matrix in block. . Warningif ClearByZeros Policy is activated all col j of each line will be set to zero using default constructor . ◆ clearRowBlock(). template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::clearRowBlock ; (; Index ; i). inline . Clear row block method. Clear all col of this line. ; Parameters. i: Line index considering size of matrix in block. . Warningif ClearByZeros Policy is activated all col value of line will be set to zero using default constructor . ◆ clearRowColBlock(). template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . template<typename = typename std::enable_if< Policy::IsAlwaysSquare>> . void sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::clearRowColBlock ; (; Index ; i). inline . Clear both row i and column i in a square matrix. ; Parameters. i: Row and Col index considering size of matrix in block. . Warningif ClearByZeros Policy is activated all col i and line i values of will be set to zero using default constructor . ◆ colBSize(). template<typename TBlock , type",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html:22090,Usability,clear,clearRowBlock,22090,"dex ; m, . Index ; n, . Index * ; a_p, . Index * ; a_i, . Block * ; a_x . ). inlinestatic . ◆ clear(). template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::clear ; (; ). inline . Completely clear the matrix. ; Warningif ClearByZeros Policy is activated all value in colsValue will be set to zero using default constructor . ◆ clearColBlock(). template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::clearColBlock ; (; Index ; j). inline . Clear col block method. Clear this col in all row of matrix. ; Parameters. j: Col index considering size of matrix in block. . Warningif ClearByZeros Policy is activated all col j of each line will be set to zero using default constructor . ◆ clearRowBlock(). template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::clearRowBlock ; (; Index ; i). inline . Clear row block method. Clear all col of this line. ; Parameters. i: Line index considering size of matrix in block. . Warningif ClearByZeros Policy is activated all col value of line will be set to zero using default constructor . ◆ clearRowColBlock(). template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . template<typename = typename std::enable_if< Policy::IsAlwaysSquare>> . void sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::clearRowColBlock ; (; Index ; i). inline . Clear both row i and column i in a square matrix. ; Parameters. i: Row and Col index considering size of matrix in block. . Warningif ClearByZeros Policy is activated all col i and line i values of will be set to zero using default constructor . ◆ colBSize(). template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . Index sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::colBSize ; (; )",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html:22364,Usability,clear,clearRowColBlock,22364,"ngif ClearByZeros Policy is activated all value in colsValue will be set to zero using default constructor . ◆ clearColBlock(). template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::clearColBlock ; (; Index ; j). inline . Clear col block method. Clear this col in all row of matrix. ; Parameters. j: Col index considering size of matrix in block. . Warningif ClearByZeros Policy is activated all col j of each line will be set to zero using default constructor . ◆ clearRowBlock(). template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::clearRowBlock ; (; Index ; i). inline . Clear row block method. Clear all col of this line. ; Parameters. i: Line index considering size of matrix in block. . Warningif ClearByZeros Policy is activated all col value of line will be set to zero using default constructor . ◆ clearRowColBlock(). template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . template<typename = typename std::enable_if< Policy::IsAlwaysSquare>> . void sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::clearRowColBlock ; (; Index ; i). inline . Clear both row i and column i in a square matrix. ; Parameters. i: Row and Col index considering size of matrix in block. . Warningif ClearByZeros Policy is activated all col i and line i values of will be set to zero using default constructor . ◆ colBSize(). template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . Index sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::colBSize ; (; ); const. inline . Returnsthe number of col blocks . ◆ compress(). template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::compress ; (; ). inline . ◆ compressBtemp(). template<typename TBlock , typename TPolicy = CRSDe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html:22601,Usability,clear,clearRowColBlock,22601,"linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::clearColBlock ; (; Index ; j). inline . Clear col block method. Clear this col in all row of matrix. ; Parameters. j: Col index considering size of matrix in block. . Warningif ClearByZeros Policy is activated all col j of each line will be set to zero using default constructor . ◆ clearRowBlock(). template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::clearRowBlock ; (; Index ; i). inline . Clear row block method. Clear all col of this line. ; Parameters. i: Line index considering size of matrix in block. . Warningif ClearByZeros Policy is activated all col value of line will be set to zero using default constructor . ◆ clearRowColBlock(). template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . template<typename = typename std::enable_if< Policy::IsAlwaysSquare>> . void sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::clearRowColBlock ; (; Index ; i). inline . Clear both row i and column i in a square matrix. ; Parameters. i: Row and Col index considering size of matrix in block. . Warningif ClearByZeros Policy is activated all col i and line i values of will be set to zero using default constructor . ◆ colBSize(). template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . Index sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::colBSize ; (; ); const. inline . Returnsthe number of col blocks . ◆ compress(). template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::compress ; (; ). inline . ◆ compressBtemp(). template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::compressBtemp ; (; ). inlineprotected . Clear matrix and compute new triplet's arrays by combining old ones and ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html:31954,Usability,undo,undo,31954,"eneric< TBlock, TPolicy >::rowBSize ; (; ); const. inline . Returnsthe number of row blocks . ◆ setBlock() [1/2]. template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::setBlock ; (; Index ; i, . Index ; j, . const Block & ; v . ). inline . ◆ setBlock() [2/2]. template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::setBlock ; (; Index ; i, . Index ; j, . Index & ; rowId, . Index & ; colId, . const Block & ; v . ). inline . ◆ shiftIndices(). template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::shiftIndices ; (; Index ; base). inline . Add the given base to all indices. Use 1 to convert do Fortran 1-based notation. Note that the matrix will no longer be valid from the point of view of C/C++ codes. You need to call again with -1 as base to undo it. . ◆ sortedFind() [1/2]. template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . static bool sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::sortedFind ; (; const VecIndex & ; v, . Index ; val, . Index & ; result . ). inlinestatic . ◆ sortedFind() [2/2]. template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . static bool sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::sortedFind ; (; const VecIndex & ; v, . Range ; in, . Index ; val, . Index & ; result . ). inlinestatic . ◆ swap(). template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::swap ; (; Matrix & ; m). inline . ◆ transposeFullRows(). template<typename TBlock , typename TPolicy = CRSDefaultPolicy> . template<typename TBlock2 , typename TPolicy2 > . void sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::transposeFullRows ;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic_1_1_range-members.html:330,Modifiability,inherit,inherited,330,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::Range Member List . This is the complete list of members for sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::Range, including all inherited members. begin() constsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::Rangeinline; begin(VecBlock &b) constsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::Rangeinline; begin(const VecBlock &b) constsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::Rangeinline; begin(VecIndex &b) constsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::Rangeinline; begin(const VecIndex &b) constsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::Rangeinline; empty() constsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::Rangeinline; end() constsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::Rangeinline; end(VecBlock &b) constsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::Rangeinline; end(const VecBlock &b) constsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::Rangeinline; end(VecIndex &b) constsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::Rangeinline; end(const VecIndex &b) constsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::Rangeinline; isInvalid() constsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::Rangeinline; operator++()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::Rangeinline; operator++(int)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::Rangeinline; Range()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, TPolicy >::Rangeinline; Range(Index begin, Index end)sofa::linearalgebra::C",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic_1_1_range-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_generic_1_1_range-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html:322,Modifiability,inherit,inherited,322,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy > Member List . This is the complete list of members for sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >, including all inherited members. add(Index i, Index j, double v) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; add(Index i, Index j, int &rowId, int &colId, double v)sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; add(Index i, Index j, const type::Mat3x3d &_M) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; add(Index i, Index j, const type::Mat3x3f &_M) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; add(unsigned int bi, unsigned int bj, const Block &b)sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; add(Index row, Index col, const type::Mat3x3d &_M)sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >; add(Index row, Index col, const type::Mat3x3f &_M)sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >; add(Index row, Index col, const type::Mat3x3d &_M)sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >; add(Index row, Index col, const type::Mat3x3f &_M)sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >; add(Index row, Index col, const type::Mat3x3d &_M)sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >; add(Index row, Index col, const type::Mat3x3f &_M)sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >; add(Index row, Index col, const type::Mat3x3d &_M)sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >; add(Index row, Index col, const type::Mat3x3f &_M)sofa::linearalgebra::CompressedRowSparseMatrixMe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html:20323,Modifiability,extend,extend,20323,"y >; DBlock typedefsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >; deleteRow(Index rowId)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inlineprotected; element(Index i, Index j) const overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; sofa::linearalgebra::BaseMatrix::element(Index i, Index j) const =0sofa::linearalgebra::BaseMatrixpure virtual; ELEMENT_FLOAT enum valuesofa::linearalgebra::BaseMatrix; ELEMENT_INT enum valuesofa::linearalgebra::BaseMatrix; ELEMENT_UNKNOWN enum valuesofa::linearalgebra::BaseMatrix; ElementType enum namesofa::linearalgebra::BaseMatrix; equal(const M &m, bool add=false)sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inlineprotected; Expr typedefsofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >; expr() constsofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; extend(Index nbRow, Index nbCol)sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; filter_fn typedefsofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >; filterValues(TMatrix &srcMatrix, filter_fn *filter=&nonzeros, const Real ref=Real(), bool keepEmptyRows=false)sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; fullDiagonal()sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; fullRows()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; fullyCompressBtemp()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inlineprotected; getBandWidth() const overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inlinevirtual; getBlock(Index i, Index j) constsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; getBlockCols() const overridesofa::line",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html:13988,Usability,clear,clear,13988,"e(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() const overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inlinevirtual; bRowsEnd() const overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inlinevirtual; bRowSize() const overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inlinevirtual; bRowsRange() const overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inlinevirtual; btempsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >; category enum valuesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >; check_matrix()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; check_matrix(Index nzmax, Index m, Index n, Index *a_p, Index *a_i, Block *a_x)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inlinestatic; clear(Index i, Index j) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; clear() overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inlinevirtual; sofa::linearalgebra::BaseMatrix::clear(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; ClearByZerossofa::linearalgebra::CRSDefaultPolicystatic; clearCol(Index j) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; sofa::linearalgebra::BaseMatrix::clearCol(Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearColBlock(Index j)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; sofa::linearalgebra::BaseMatrix::clearRow(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowBlock(Index ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html:14103,Usability,clear,clear,14103,"ressedRowSparseMatrixMechanical< TBlock, TPolicy >inlinevirtual; bRowsEnd() const overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inlinevirtual; bRowSize() const overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inlinevirtual; bRowsRange() const overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inlinevirtual; btempsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >; category enum valuesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >; check_matrix()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; check_matrix(Index nzmax, Index m, Index n, Index *a_p, Index *a_i, Block *a_x)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inlinestatic; clear(Index i, Index j) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; clear() overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inlinevirtual; sofa::linearalgebra::BaseMatrix::clear(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; ClearByZerossofa::linearalgebra::CRSDefaultPolicystatic; clearCol(Index j) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; sofa::linearalgebra::BaseMatrix::clearCol(Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearColBlock(Index j)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; sofa::linearalgebra::BaseMatrix::clearRow(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowBlock(Index i)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; clearRowCol(Index i) ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html:14242,Usability,clear,clear,14242,"hanical< TBlock, TPolicy >inlinevirtual; bRowSize() const overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inlinevirtual; bRowsRange() const overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inlinevirtual; btempsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >; category enum valuesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >; check_matrix()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; check_matrix(Index nzmax, Index m, Index n, Index *a_p, Index *a_i, Block *a_x)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inlinestatic; clear(Index i, Index j) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; clear() overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inlinevirtual; sofa::linearalgebra::BaseMatrix::clear(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; ClearByZerossofa::linearalgebra::CRSDefaultPolicystatic; clearCol(Index j) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; sofa::linearalgebra::BaseMatrix::clearCol(Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearColBlock(Index j)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; sofa::linearalgebra::BaseMatrix::clearRow(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowBlock(Index i)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; clearRowCol(Index i) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; sofa::linearalgebra::BaseMatrix::clearRowCol(Ind",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html:14368,Usability,clear,clearCol,14368,"ock, TPolicy >inlinevirtual; bRowsRange() const overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inlinevirtual; btempsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >; category enum valuesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >; check_matrix()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; check_matrix(Index nzmax, Index m, Index n, Index *a_p, Index *a_i, Block *a_x)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inlinestatic; clear(Index i, Index j) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; clear() overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inlinevirtual; sofa::linearalgebra::BaseMatrix::clear(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; ClearByZerossofa::linearalgebra::CRSDefaultPolicystatic; clearCol(Index j) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; sofa::linearalgebra::BaseMatrix::clearCol(Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearColBlock(Index j)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; sofa::linearalgebra::BaseMatrix::clearRow(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowBlock(Index i)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; clearRowCol(Index i) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; sofa::linearalgebra::BaseMatrix::clearRowCol(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowColBlock(Index i)sofa::linearalgebra::CompressedRowSparseMatrixGeneri",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html:14510,Usability,clear,clearCol,14510,"al; btempsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >; category enum valuesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >; check_matrix()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; check_matrix(Index nzmax, Index m, Index n, Index *a_p, Index *a_i, Block *a_x)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inlinestatic; clear(Index i, Index j) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; clear() overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inlinevirtual; sofa::linearalgebra::BaseMatrix::clear(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; ClearByZerossofa::linearalgebra::CRSDefaultPolicystatic; clearCol(Index j) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; sofa::linearalgebra::BaseMatrix::clearCol(Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearColBlock(Index j)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; sofa::linearalgebra::BaseMatrix::clearRow(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowBlock(Index i)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; clearRowCol(Index i) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; sofa::linearalgebra::BaseMatrix::clearRowCol(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowColBlock(Index i)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html:14573,Usability,clear,clearColBlock,14573,"lock, CRSMechanicalPolicy >; category enum valuesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >; check_matrix()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; check_matrix(Index nzmax, Index m, Index n, Index *a_p, Index *a_i, Block *a_x)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inlinestatic; clear(Index i, Index j) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; clear() overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inlinevirtual; sofa::linearalgebra::BaseMatrix::clear(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; ClearByZerossofa::linearalgebra::CRSDefaultPolicystatic; clearCol(Index j) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; sofa::linearalgebra::BaseMatrix::clearCol(Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearColBlock(Index j)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; sofa::linearalgebra::BaseMatrix::clearRow(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowBlock(Index i)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; clearRowCol(Index i) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; sofa::linearalgebra::BaseMatrix::clearRowCol(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowColBlock(Index i)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; colBS",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html:14687,Usability,clear,clearCols,14687,", TPolicy >; check_matrix()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; check_matrix(Index nzmax, Index m, Index n, Index *a_p, Index *a_i, Block *a_x)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inlinestatic; clear(Index i, Index j) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; clear() overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inlinevirtual; sofa::linearalgebra::BaseMatrix::clear(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; ClearByZerossofa::linearalgebra::CRSDefaultPolicystatic; clearCol(Index j) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; sofa::linearalgebra::BaseMatrix::clearCol(Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearColBlock(Index j)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; sofa::linearalgebra::BaseMatrix::clearRow(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowBlock(Index i)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; clearRowCol(Index i) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; sofa::linearalgebra::BaseMatrix::clearRowCol(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowColBlock(Index i)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; colBSize() constsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; cols(void",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html:14766,Usability,clear,clearRow,14766,"ic< TBlock, CRSMechanicalPolicy >inline; check_matrix(Index nzmax, Index m, Index n, Index *a_p, Index *a_i, Block *a_x)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inlinestatic; clear(Index i, Index j) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; clear() overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inlinevirtual; sofa::linearalgebra::BaseMatrix::clear(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; ClearByZerossofa::linearalgebra::CRSDefaultPolicystatic; clearCol(Index j) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; sofa::linearalgebra::BaseMatrix::clearCol(Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearColBlock(Index j)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; sofa::linearalgebra::BaseMatrix::clearRow(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowBlock(Index i)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; clearRowCol(Index i) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; sofa::linearalgebra::BaseMatrix::clearRowCol(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowColBlock(Index i)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; colBSize() constsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; cols(void) constsofa::linearalgebra::BaseMatrixinline; colsIndexsofa::linearalgebra::Com",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html:14908,Usability,clear,clearRow,14908,"ompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inlinestatic; clear(Index i, Index j) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; clear() overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inlinevirtual; sofa::linearalgebra::BaseMatrix::clear(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; ClearByZerossofa::linearalgebra::CRSDefaultPolicystatic; clearCol(Index j) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; sofa::linearalgebra::BaseMatrix::clearCol(Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearColBlock(Index j)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; sofa::linearalgebra::BaseMatrix::clearRow(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowBlock(Index i)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; clearRowCol(Index i) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; sofa::linearalgebra::BaseMatrix::clearRowCol(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowColBlock(Index i)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; colBSize() constsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; cols(void) constsofa::linearalgebra::BaseMatrixinline; colsIndexsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >; colSize() const overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html:14971,Usability,clear,clearRowBlock,14971,"nestatic; clear(Index i, Index j) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; clear() overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inlinevirtual; sofa::linearalgebra::BaseMatrix::clear(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; ClearByZerossofa::linearalgebra::CRSDefaultPolicystatic; clearCol(Index j) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; sofa::linearalgebra::BaseMatrix::clearCol(Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearColBlock(Index j)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; sofa::linearalgebra::BaseMatrix::clearRow(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowBlock(Index i)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; clearRowCol(Index i) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; sofa::linearalgebra::BaseMatrix::clearRowCol(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowColBlock(Index i)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; colBSize() constsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; cols(void) constsofa::linearalgebra::BaseMatrixinline; colsIndexsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >; colSize() const overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inlinevirtual; colsValuesofa::linearalgebra::C",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html:15085,Usability,clear,clearRowCol,15085,"cy >inline; clear() overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inlinevirtual; sofa::linearalgebra::BaseMatrix::clear(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; ClearByZerossofa::linearalgebra::CRSDefaultPolicystatic; clearCol(Index j) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; sofa::linearalgebra::BaseMatrix::clearCol(Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearColBlock(Index j)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; sofa::linearalgebra::BaseMatrix::clearRow(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowBlock(Index i)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; clearRowCol(Index i) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; sofa::linearalgebra::BaseMatrix::clearRowCol(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowColBlock(Index i)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; colBSize() constsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; cols(void) constsofa::linearalgebra::BaseMatrixinline; colsIndexsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >; colSize() const overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inlinevirtual; colsValuesofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >; compress() overridesofa::linearalgebra::Compresse",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html:15230,Usability,clear,clearRowCol,15230,"trix::clear(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; ClearByZerossofa::linearalgebra::CRSDefaultPolicystatic; clearCol(Index j) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; sofa::linearalgebra::BaseMatrix::clearCol(Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearColBlock(Index j)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; sofa::linearalgebra::BaseMatrix::clearRow(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowBlock(Index i)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; clearRowCol(Index i) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; sofa::linearalgebra::BaseMatrix::clearRowCol(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowColBlock(Index i)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; colBSize() constsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; cols(void) constsofa::linearalgebra::BaseMatrixinline; colsIndexsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >; colSize() const overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inlinevirtual; colsValuesofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >; compress() overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inlinevirtual; compressBtemp()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMech",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html:15296,Usability,clear,clearRowColBlock,15296,"rtual; ClearByZerossofa::linearalgebra::CRSDefaultPolicystatic; clearCol(Index j) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; sofa::linearalgebra::BaseMatrix::clearCol(Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearColBlock(Index j)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; sofa::linearalgebra::BaseMatrix::clearRow(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowBlock(Index i)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; clearRowCol(Index i) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; sofa::linearalgebra::BaseMatrix::clearRowCol(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowColBlock(Index i)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; colBSize() constsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; cols(void) constsofa::linearalgebra::BaseMatrixinline; colsIndexsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >; colSize() const overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inlinevirtual; colsValuesofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >; compress() overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inlinevirtual; compressBtemp()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inlineprotected; compressCSR()sofa::linearalgebra::Comp",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html:15413,Usability,clear,clearRows,15413,"pressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; sofa::linearalgebra::BaseMatrix::clearCol(Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearColBlock(Index j)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; sofa::linearalgebra::BaseMatrix::clearRow(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowBlock(Index i)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; clearRowCol(Index i) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; sofa::linearalgebra::BaseMatrix::clearRowCol(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowColBlock(Index i)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; colBSize() constsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; cols(void) constsofa::linearalgebra::BaseMatrixinline; colsIndexsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >; colSize() const overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inlinevirtual; colsValuesofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >; compress() overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inlinevirtual; compressBtemp()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inlineprotected; compressCSR()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inlineprotected; CompressedRowSparseMatrixGeneric()sof",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html:15492,Usability,clear,clearRowsCols,15492,"aseMatrix::clearCol(Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearColBlock(Index j)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; sofa::linearalgebra::BaseMatrix::clearRow(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowBlock(Index i)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; clearRowCol(Index i) overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inline; sofa::linearalgebra::BaseMatrix::clearRowCol(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowColBlock(Index i)sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; colBSize() constsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inline; cols(void) constsofa::linearalgebra::BaseMatrixinline; colsIndexsofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >; colSize() const overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inlinevirtual; colsValuesofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >; compress() overridesofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >inlinevirtual; compressBtemp()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inlineprotected; compressCSR()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >inlineprotected; CompressedRowSparseMatrixGeneric()sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:1664,Energy Efficiency,efficient,efficient,1664,"tributes; Index nRow;  Size. More...;  ; Index nCol;  Mathematical size of the matrix, in scalars. More...;  ;  Public Attributes inherited from sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >; Index nBlockRow;  Size. More...;  ; Index nBlockCol;  Mathematical size of the matrix, in blocks. More...;  ; VecIndex rowIndex;  Compressed sparse data structure. More...;  ; VecIndex rowBegin;  column indices of non-empty blocks in each row. The column indices of the non-empty block within the i-th non-empty row are all the colsIndex[j], j in [rowBegin[i],rowBegin[i+1]) More...;  ; VecIndex colsIndex;  column indices of all the non-empty blocks, sorted by increasing row index and column index More...;  ; VecBlock colsValue;  values of the non-empty blocks, in the same order as in colsIndex More...;  ; VecFlag touchedBlock;  boolean vector, i-th value is true if block has been touched since last compression. More...;  ; VecIndexedBlock btemp;  Additional storage to make block insertion more efficient. More...;  ; bool skipCompressZero;  ; VecIndex oldRowIndex;  Temporary vectors used during compression. More...;  ; VecIndex oldRowBegin;  ; VecIndex oldColsIndex;  ; VecBlock oldColsValue;  . Static Public Attributes; static constexpr sofa::Index NL = traits::NL;  Number of rows of a block. More...;  ; static constexpr sofa::Index NC = traits::NC;  Number of columns of a block. More...;  ;  Static Public Attributes inherited from sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >; static constexpr sofa::Index NL;  Number of rows of a block. More...;  ; static constexpr sofa::Index NC;  Number of columns of a block. More...;  ; static constexpr Index s_invalidIndex;  ;  Static Public Attributes inherited from sofa::linearalgebra::CRSMechanicalPolicy; static constexpr bool CompressZeros = false;  ; static constexpr bool IsAlwaysSquare = true;  ; static constexpr bool IsAlwaysSymmetric = true;  ; static constex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:760,Modifiability,inherit,inherited,760,"﻿. SOFA API: sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Static Public Attributes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members . sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy > Class Template Referencefinal . #include <CompressedRowSparseMatrixMechanical.h>. Inheritance diagram for sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >:. [legend]. Public Attributes; Index nRow;  Size. More...;  ; Index nCol;  Mathematical size of the matrix, in scalars. More...;  ;  Public Attributes inherited from sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >; Index nBlockRow;  Size. More...;  ; Index nBlockCol;  Mathematical size of the matrix, in blocks. More...;  ; VecIndex rowIndex;  Compressed sparse data structure. More...;  ; VecIndex rowBegin;  column indices of non-empty blocks in each row. The column indices of the non-empty block within the i-th non-empty row are all the colsIndex[j], j in [rowBegin[i],rowBegin[i+1]) More...;  ; VecIndex colsIndex;  column indices of all the non-empty blocks, sorted by increasing row index and column index More...;  ; VecBlock colsValue;  values of the non-empty blocks, in the same order as in colsIndex More...;  ; VecFlag touchedBlock;  boolean vector, i-th value is true if block has been touched since last compression. More...;  ; VecIndexedBlock btemp;  Additional storage to make block insertion more efficient. More...;  ; bool skipCompressZero;  ; VecIndex oldRowIndex;  Temporary vectors used during compression. More...;  ; VecIndex oldRowBegin;  ; VecIndex oldColsIndex;  ; VecBlock oldColsValue;  . Static Public Attributes; static constexpr sofa::Index NL = traits::NL;  Number of rows of a block. More...;  ; static constexpr sofa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:2095,Modifiability,inherit,inherited,2095,"th non-empty row are all the colsIndex[j], j in [rowBegin[i],rowBegin[i+1]) More...;  ; VecIndex colsIndex;  column indices of all the non-empty blocks, sorted by increasing row index and column index More...;  ; VecBlock colsValue;  values of the non-empty blocks, in the same order as in colsIndex More...;  ; VecFlag touchedBlock;  boolean vector, i-th value is true if block has been touched since last compression. More...;  ; VecIndexedBlock btemp;  Additional storage to make block insertion more efficient. More...;  ; bool skipCompressZero;  ; VecIndex oldRowIndex;  Temporary vectors used during compression. More...;  ; VecIndex oldRowBegin;  ; VecIndex oldColsIndex;  ; VecBlock oldColsValue;  . Static Public Attributes; static constexpr sofa::Index NL = traits::NL;  Number of rows of a block. More...;  ; static constexpr sofa::Index NC = traits::NC;  Number of columns of a block. More...;  ;  Static Public Attributes inherited from sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >; static constexpr sofa::Index NL;  Number of rows of a block. More...;  ; static constexpr sofa::Index NC;  Number of columns of a block. More...;  ; static constexpr Index s_invalidIndex;  ;  Static Public Attributes inherited from sofa::linearalgebra::CRSMechanicalPolicy; static constexpr bool CompressZeros = false;  ; static constexpr bool IsAlwaysSquare = true;  ; static constexpr bool IsAlwaysSymmetric = true;  ; static constexpr bool OrderedInsertion = false;  ; static constexpr bool StoreLowerTriangularBlock = true;  ; static constexpr int matrixType = 1;  ;  Static Public Attributes inherited from sofa::linearalgebra::CRSDefaultPolicy; static constexpr bool IsAlwaysSquare = false;  Set to true if this matrix is always square (must be true for symmetric) More...;  ; static constexpr bool IsAlwaysSymmetric = false;  Set to true if this matrix is always symmetric (IsAlwaysSquare should be true) More...;  ; static constexpr bool AutoSize = false; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:2413,Modifiability,inherit,inherited,2413,"on more efficient. More...;  ; bool skipCompressZero;  ; VecIndex oldRowIndex;  Temporary vectors used during compression. More...;  ; VecIndex oldRowBegin;  ; VecIndex oldColsIndex;  ; VecBlock oldColsValue;  . Static Public Attributes; static constexpr sofa::Index NL = traits::NL;  Number of rows of a block. More...;  ; static constexpr sofa::Index NC = traits::NC;  Number of columns of a block. More...;  ;  Static Public Attributes inherited from sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >; static constexpr sofa::Index NL;  Number of rows of a block. More...;  ; static constexpr sofa::Index NC;  Number of columns of a block. More...;  ; static constexpr Index s_invalidIndex;  ;  Static Public Attributes inherited from sofa::linearalgebra::CRSMechanicalPolicy; static constexpr bool CompressZeros = false;  ; static constexpr bool IsAlwaysSquare = true;  ; static constexpr bool IsAlwaysSymmetric = true;  ; static constexpr bool OrderedInsertion = false;  ; static constexpr bool StoreLowerTriangularBlock = true;  ; static constexpr int matrixType = 1;  ;  Static Public Attributes inherited from sofa::linearalgebra::CRSDefaultPolicy; static constexpr bool IsAlwaysSquare = false;  Set to true if this matrix is always square (must be true for symmetric) More...;  ; static constexpr bool IsAlwaysSymmetric = false;  Set to true if this matrix is always symmetric (IsAlwaysSquare should be true) More...;  ; static constexpr bool AutoSize = false;  Set to true if the size of the matrix should be automatically increased when new blocks are added. More...;  ; static constexpr bool AutoCompress = true;  Set to true if the matrix should be automatically compressed (easier to use, but might cause issues in multithreading) More...;  ; static constexpr bool CompressZeros = true;  Set to true if the blocks that are all zeros should be removed from the matrix when compressing (expensive) More...;  ; static constexpr bool ClearByZeros = true;  ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:2793,Modifiability,inherit,inherited,2793,"on more efficient. More...;  ; bool skipCompressZero;  ; VecIndex oldRowIndex;  Temporary vectors used during compression. More...;  ; VecIndex oldRowBegin;  ; VecIndex oldColsIndex;  ; VecBlock oldColsValue;  . Static Public Attributes; static constexpr sofa::Index NL = traits::NL;  Number of rows of a block. More...;  ; static constexpr sofa::Index NC = traits::NC;  Number of columns of a block. More...;  ;  Static Public Attributes inherited from sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >; static constexpr sofa::Index NL;  Number of rows of a block. More...;  ; static constexpr sofa::Index NC;  Number of columns of a block. More...;  ; static constexpr Index s_invalidIndex;  ;  Static Public Attributes inherited from sofa::linearalgebra::CRSMechanicalPolicy; static constexpr bool CompressZeros = false;  ; static constexpr bool IsAlwaysSquare = true;  ; static constexpr bool IsAlwaysSymmetric = true;  ; static constexpr bool OrderedInsertion = false;  ; static constexpr bool StoreLowerTriangularBlock = true;  ; static constexpr int matrixType = 1;  ;  Static Public Attributes inherited from sofa::linearalgebra::CRSDefaultPolicy; static constexpr bool IsAlwaysSquare = false;  Set to true if this matrix is always square (must be true for symmetric) More...;  ; static constexpr bool IsAlwaysSymmetric = false;  Set to true if this matrix is always symmetric (IsAlwaysSquare should be true) More...;  ; static constexpr bool AutoSize = false;  Set to true if the size of the matrix should be automatically increased when new blocks are added. More...;  ; static constexpr bool AutoCompress = true;  Set to true if the matrix should be automatically compressed (easier to use, but might cause issues in multithreading) More...;  ; static constexpr bool CompressZeros = true;  Set to true if the blocks that are all zeros should be removed from the matrix when compressing (expensive) More...;  ; static constexpr bool ClearByZeros = true;  ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:4938,Modifiability,extend,extend,4938,"eLowerTriangularBlock = true;  Set to false to disable storage of blocks on the lower triangular part (IsAlwaysSymmetric must be true) More...;  ; static constexpr int matrixType = 0;  Do not change this value, has to be overrided for all derivated class. More...;  . Public Member Functions;  CompressedRowSparseMatrixMechanical ();  ;  CompressedRowSparseMatrixMechanical (Index nbRow, Index nbCol);  ; void compress () override;  ; void swap (Matrix &m);  ; template<typename = typename std::enable_if< Policy::IsAlwaysSquare>> ; void fullDiagonal ();  Make sure all diagonal entries are present even if they are zero. More...;  ; Index rowSize () const override;  Mathematical size of the matrix. More...;  ; Index colSize () const override;  Number of columns. More...;  ; void resizeBlock (Index nbBRow, Index nbBCol) override;  This override classic resizeBlock to fill nRow and nCol values. More...;  ; void resize (Index nbRow, Index nbCol) override;  ; void extend (Index nbRow, Index nbCol);  ; SReal element (Index i, Index j) const override;  get scalar element i, j of matrix More...;  ; void set (Index i, Index j, double v) override;  set scalar element i, j of matrix More...;  ; void add (Index i, Index j, double v) override;  add scalar v at element i, j of matrix More...;  ; void set (Index i, Index j, int &rowId, int &colId, double v);  set scalar element i, j of matrix when rowId and colId are known More...;  ; template<typename T = Block, typename std::enable_if_t<!std::is_same_v< T, double > &&!std::is_same_v< T, float >, int > = 0> ; void add (Index i, Index j, int &rowId, int &colId, double v);  add scalar v at element i, j when rowId and colId are known More...;  ; void clear (Index i, Index j) override;  clear scalar at element i, j of matrix More...;  ; void add (Index i, Index j, const type::Mat3x3d &_M) override;  ; void add (Index i, Index j, const type::Mat3x3f &_M) override;  ; void clearRow (Index i) override;  Clear row scalar method. Clear all col o",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:9582,Modifiability,inherit,inherited,9582,"TBlock, TPolicy > &m) const;  ; template<typename V1 , typename V2 , std::enable_if_t< sofa::type::trait::is_vector< V1 >::value &&sofa::type::trait::is_vector< V2 >::value, int > = 0> ; void mul (V2 &result, const V1 &v) const;  ; template<typename V1 , typename V2 > ; void addMultTranspose (V1 &result, const V2 &v) const;  ; template<class Vec > ; Vec operator* (const Vec &v) const;  ; template<typename V , typename Real2 > ; void addMul_by_line (V &res, const type::Vec< NC, Real2 > &v) const;  ; template<typename Real , typename V , typename V2 > ; void addMul_by_line (V &res, const V2 &v) const;  ; template<typename V1 , typename V2 > ; void addMul (V1 &res, const V2 &v) const;  result += this * v More...;  ;  Public Member Functions inherited from sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >;  CompressedRowSparseMatrixGeneric ();  ;  CompressedRowSparseMatrixGeneric (Index nbBlockRow, Index nbBlockCol);  ; virtual ~CompressedRowSparseMatrixGeneric ()=default;  ; Index rowBSize () const;  ; Index colBSize () const;  ; const VecIndex & getRowIndex () const;  ; const VecIndex & getRowBegin () const;  ; Range getRowRange (Index id) const;  Returns the range of indices from the column indices corresponding to the id-th row. More...;  ; const VecIndex & getColsIndex () const;  ; const VecBlock & getColsValue () const;  ; void resizeBloc (Index nbBRow, Index nbBCol);  ; void compress ();  ; void swap (Matrix &m);  ; void fullRows ();  Make sure all rows have an entry even if they are empty. More...;  ; void shiftIndices (Index base);  ; const Block & block (Index i, Index j) const;  Get block method. More...;  ; const Block & bloc (Index i, Index j) const;  ; Block * wblock (Index i, Index j, bool create=false);  Write block method. More...;  ; Block * wblock (Index i, Index j, Index &rowId, Index &colId, bool create=false);  Write block method when rowId and colId are known, this is an optimized wblock specification. More...;  ;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:13544,Modifiability,inherit,inherited,13544,"ue (unsigned int bi, int &rowId, int &colId, const Real b);  ; void addSym (unsigned int bi, unsigned int bj, const Block &b);  ; void addSym (unsigned int bi, unsigned int bj, int &rowId, int &colId, int &rowIdT, int &colIdT, const Block &b);  ; void addSymDBlock (unsigned int bi, unsigned int bj, const DBlock &b);  ; void addSymDValue (unsigned int bi, unsigned int bj, const Real b);  ; void addSymDValue (unsigned int bi, unsigned int bj, int &rowId, int &colId, int &rowIdT, int &colIdT, Real b);  ; void transposeFullRows (CompressedRowSparseMatrixGeneric< TBlock2, TPolicy2 > &res) const;  Transpose the matrix into res, works only for 3 array variant (""full rows"") matrices, ie which can be expressed using the rowBegin, colsIndex and colsValue arrays solely. More...;  ; void mul (CompressedRowSparseMatrixGeneric< RB, RP > &res, const CompressedRowSparseMatrixGeneric< MB, MP > &m) const;  ; void mulTranspose (CompressedRowSparseMatrixGeneric< RB, RP > &res, const CompressedRowSparseMatrixGeneric< MB, MP > &m) const;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; virtual SReal element (Index i, Index j) const =0;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void resize (Index nbRow, Index nbCol)=0;  Resize the matrix and reset all values to 0. More...;  ; virtual void set (Index i, Index j, double v)=0;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtua",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:20149,Modifiability,inherit,inherited,20149,"  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the given row of blocks. More...;  ; virtual ColBlockConstIterator bRowEnd (Index ib) const;  Get the iterator corresponding to the end of the given row of blocks. More...;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > bRowRange (Index ib) const;  Get the iterators corresponding to the beginning and end of the given row of blocks. More...;  . Static Public Member Functions; static void split_row_index (Index &index, Index &modulo);  ; static void split_col_index (Index &index, Index &modulo);  ; static const char * Name ();  ;  Static Public Member Functions inherited from sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >; static bool sortedFind (const VecIndex &v, Range in, Index val, Index &result);  ; static bool sortedFind (const VecIndex &v, Index val, Index &result);  ; static const char * Name ();  ; static bool check_matrix (Index nzmax, Index m, Index n, Index *a_p, Index *a_i, Block *a_x);  ; static auto blockMultTranspose (const TBlock &blockA, const TBlock &blockB);  . Protected Member Functions; template<class M > ; void equal (const M &m, bool add=false);  ; template<class M > ; void addEqual (const M &m);  this += m More...;  ;  Protected Member Functions inherited from sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >; bool registerNewCol (Index &colId, TBlock &bvalue);  Add a new col into matrix. More...;  ; std::pair< Index, Index > registerBtempLine (typename VecIndexedBlock::const_iterator &itbtemp);  Add a complete new line from btemp into matrix. More...;  ; void fullyCompressBtemp ();  Clear matrix and just add btemp array. More...;  ; Block * insertBtemp (const Index",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:20808,Modifiability,inherit,inherited,20808,"and end of the given row of blocks. More...;  . Static Public Member Functions; static void split_row_index (Index &index, Index &modulo);  ; static void split_col_index (Index &index, Index &modulo);  ; static const char * Name ();  ;  Static Public Member Functions inherited from sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >; static bool sortedFind (const VecIndex &v, Range in, Index val, Index &result);  ; static bool sortedFind (const VecIndex &v, Index val, Index &result);  ; static const char * Name ();  ; static bool check_matrix (Index nzmax, Index m, Index n, Index *a_p, Index *a_i, Block *a_x);  ; static auto blockMultTranspose (const TBlock &blockA, const TBlock &blockB);  . Protected Member Functions; template<class M > ; void equal (const M &m, bool add=false);  ; template<class M > ; void addEqual (const M &m);  this += m More...;  ;  Protected Member Functions inherited from sofa::linearalgebra::CompressedRowSparseMatrixGeneric< TBlock, CRSMechanicalPolicy >; bool registerNewCol (Index &colId, TBlock &bvalue);  Add a new col into matrix. More...;  ; std::pair< Index, Index > registerBtempLine (typename VecIndexedBlock::const_iterator &itbtemp);  Add a complete new line from btemp into matrix. More...;  ; void fullyCompressBtemp ();  Clear matrix and just add btemp array. More...;  ; Block * insertBtemp (const Index i, const Index j);  Method to easy insert new block into btemp. More...;  ; Index getMaxColIndex ();  Method to easy have the max colIndex. Could only be used if AutoSize policy is activated. More...;  ; void deleteRow (Index rowId);  Method to easy delete row given position in rowIndex. More...;  ; void compressBtemp ();  Clear matrix and compute new triplet's arrays by combining old ones and btemp(VecIndexedBlock) array. More...;  ; void compressCSR ();  ; void writeVector (const TVec &vec, std::ostream &os);  ; void readVector (TVec &vec, std::istream &in);  ;  Protected Member Functions inherited fr",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:21870,Modifiability,inherit,inherited,21870,,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:31622,Modifiability,inherit,inherited,31622,"ex i, Real v);  ; template<class Real2 > ; static void vset (FullVector< Real2 > &vec, Index i, Real2 v);  ; template<class Vec > ; static void vadd (Vec &vec, Index i, Index j, Index k, Real v);  ; template<class Vec > ; static void vadd (type::vector< Vec > &vec, Index i, Index, Index k, Real v);  ; static void vadd (BaseVector &vec, Index i, Real v);  ; template<class Real2 > ; static void vadd (FullVector< Real2 > &vec, Index i, Real2 v);  ; template<class Vec > ; static void vresize (Vec &vec, Index, Index totalSize);  ; template<class Vec > ; static void vresize (type::vector< Vec > &vec, Index blockSize, Index);  . Additional Inherited Members;  Static Protected Member Functions inherited from sofa::linearalgebra::BaseMatrix; static InternalBlockAccessor * getInternal (BlockConstAccessor *b);  ; static const InternalBlockAccessor * getInternal (const BlockConstAccessor *b);  ; static InternalBlockAccessor * getInternal (BlockAccessor *b);  ; static const InternalBlockAccessor * getInternal (const BlockAccessor *b);  ; static InternalColBlockIterator * getInternal (ColBlockConstIterator *b);  ; static const InternalColBlockIterator * getInternal (const ColBlockConstIterator *b);  ; static InternalRowBlockIterator * getInternal (RowBlockConstIterator *b);  ; static const InternalRowBlockIterator * getInternal (const RowBlockConstIterator *b);  . Attribute details. ◆ NC. template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . constexpr sofa::Index sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::NC = traits::NC. staticconstexpr . Number of columns of a block. . ◆ nCol. template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . Index sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::nCol. Mathematical size of the matrix, in scalars. . ◆ NL. template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . constexpr sofa::Index sofa::linearalgebra::CompressedRowSparseMatrixMechanical< ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:53467,Modifiability,extend,extend,53467,"Policy = CRSMechanicalPolicy> . template<class TMatrix > . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::copyUpperNonZeros ; (; TMatrix & ; M, . bool ; keepEmptyRows = false . ). inline . ◆ element(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . SReal sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::element ; (; Index ; i, . Index ; j . ); const. inlineoverride . get scalar element i, j of matrix . ◆ equal(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . template<class M > . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::equal ; (; const M & ; m, . bool ; add = false . ). inlineprotected . add ? this += m : this = m m can be the same as this . ◆ expr(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . std::string sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::expr ; (; ); const. inline . ◆ extend(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::extend ; (; Index ; nbRow, . Index ; nbCol . ). inline . ◆ filterValues(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . template<class TMatrix > . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::filterValues ; (; TMatrix & ; srcMatrix, . filter_fn * ; filter = &nonzeros, . const Real ; ref = Real(), . bool ; keepEmptyRows = false . ). inline . ◆ fullDiagonal(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . template<typename = typename std::enable_if< Policy::IsAlwaysSquare>> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::fullDiagonal ; (; ). inline . Make sure all diagonal entries are present even if they are zero. ; Mathematical size of the matrix . ◆ getBandWidth(). template<typename TBlock , typename TPolicy = C",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:53628,Modifiability,extend,extend,53628,"TPolicy >::copyUpperNonZeros ; (; TMatrix & ; M, . bool ; keepEmptyRows = false . ). inline . ◆ element(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . SReal sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::element ; (; Index ; i, . Index ; j . ); const. inlineoverride . get scalar element i, j of matrix . ◆ equal(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . template<class M > . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::equal ; (; const M & ; m, . bool ; add = false . ). inlineprotected . add ? this += m : this = m m can be the same as this . ◆ expr(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . std::string sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::expr ; (; ); const. inline . ◆ extend(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::extend ; (; Index ; nbRow, . Index ; nbCol . ). inline . ◆ filterValues(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . template<class TMatrix > . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::filterValues ; (; TMatrix & ; srcMatrix, . filter_fn * ; filter = &nonzeros, . const Real ; ref = Real(), . bool ; keepEmptyRows = false . ). inline . ◆ fullDiagonal(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . template<typename = typename std::enable_if< Policy::IsAlwaysSquare>> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::fullDiagonal ; (; ). inline . Make sure all diagonal entries are present even if they are zero. ; Mathematical size of the matrix . ◆ getBandWidth(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . virtual Index sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::getBandWidth ; (; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:10792,Performance,optimiz,optimized,10792,"sedRowSparseMatrixGeneric (Index nbBlockRow, Index nbBlockCol);  ; virtual ~CompressedRowSparseMatrixGeneric ()=default;  ; Index rowBSize () const;  ; Index colBSize () const;  ; const VecIndex & getRowIndex () const;  ; const VecIndex & getRowBegin () const;  ; Range getRowRange (Index id) const;  Returns the range of indices from the column indices corresponding to the id-th row. More...;  ; const VecIndex & getColsIndex () const;  ; const VecBlock & getColsValue () const;  ; void resizeBloc (Index nbBRow, Index nbBCol);  ; void compress ();  ; void swap (Matrix &m);  ; void fullRows ();  Make sure all rows have an entry even if they are empty. More...;  ; void shiftIndices (Index base);  ; const Block & block (Index i, Index j) const;  Get block method. More...;  ; const Block & bloc (Index i, Index j) const;  ; Block * wblock (Index i, Index j, bool create=false);  Write block method. More...;  ; Block * wblock (Index i, Index j, Index &rowId, Index &colId, bool create=false);  Write block method when rowId and colId are known, this is an optimized wblock specification. More...;  ; Block * wbloc (Index i, Index j, bool create=false);  ; const Block & getBlock (Index i, Index j) const;  ; const BlockTranspose getSymBlock (Index i, Index j) const;  ; void setBlock (Index i, Index j, const Block &v);  ; void setBlock (Index i, Index j, Index &rowId, Index &colId, const Block &v);  ; void addBlock (Index i, Index j, const Block &v);  ; void addBlock (Index i, Index j, Index &rowId, Index &colId, const Block &v);  ; Block * getWBlock (Index i, Index j, bool create=false);  ; void clearRowBlock (Index i);  Clear row block method. Clear all col of this line. More...;  ; void clearColBlock (Index j);  Clear col block method. Clear this col in all row of matrix. More...;  ; std::size_t countEmptyBlocks () const;  ; void clearRowColBlock (Index i);  Clear both row i and column i in a square matrix. More...;  ; void clear ();  Completely clear the matrix. More...;  ; bool ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:14626,Performance,perform,performances,14626," ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; virtual SReal element (Index i, Index j) const =0;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void resize (Index nbRow, Index nbCol)=0;  Resize the matrix and reset all values to 0. More...;  ; virtual void set (Index i, Index j, double v)=0;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void clearRow (Index i);  Reset all t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:14800,Performance,perform,performances,14800,"ore...;  ; virtual SReal element (Index i, Index j) const =0;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void resize (Index nbRow, Index nbCol)=0;  Resize the matrix and reset all values to 0. More...;  ; virtual void set (Index i, Index j, double v)=0;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void clearRow (Index i);  Reset all the values in row i to 0. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCol (Index j);  ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:14974,Performance,perform,performances,14974," Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void resize (Index nbRow, Index nbCol)=0;  Resize the matrix and reset all values to 0. More...;  ; virtual void set (Index i, Index j, double v)=0;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void clearRow (Index i);  Reset all the values in row i to 0. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCol (Index j);  Reset the all values in column j to 0. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:15148,Performance,perform,performances,15148,";  Resize the matrix and reset all values to 0. More...;  ; virtual void set (Index i, Index j, double v)=0;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void clearRow (Index i);  Reset all the values in row i to 0. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCol (Index j);  Reset the all values in column j to 0. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowCol (Index i);  Reset the value of both row and column i to 0. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:15322,Performance,perform,performances,15322," indices) More...;  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void clearRow (Index i);  Reset all the values in row i to 0. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCol (Index j);  Reset the all values in column j to 0. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowCol (Index i);  Reset the value of both row and column i to 0. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by ve",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:15496,Performance,perform,performances,15496,"virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void clearRow (Index i);  Reset all the values in row i to 0. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCol (Index j);  Reset the all values in column j to 0. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowCol (Index i);  Reset the value of both row and column i to 0. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result i",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:8094,Safety,avoid,avoid,8094,"verride;  Completely clear the matrix. More...;  ; template<class M2 > ; bool hasRef (const M2 *m) const;  ; std::string expr () const;  ; bool valid () const;  ; template<class Dest > ; void addTo (Dest *dest) const;  ; template<class TBlock2 , class TPolicy2 > ; void operator= (const CompressedRowSparseMatrixMechanical< TBlock2, TPolicy2 > &m);  ; template<class TBlock2 , class TPolicy2 > ; void operator+= (const CompressedRowSparseMatrixMechanical< TBlock2, TPolicy2 > &m);  ; template<class TBlock2 , class TPolicy2 > ; void operator-= (const CompressedRowSparseMatrixMechanical< TBlock2, TPolicy2 > &m);  ; template<class Expr2 > ; void operator= (const MatrixExpr< Expr2 > &m);  ; template<class Expr2 > ; void operator+= (const MatrixExpr< Expr2 > &m);  ; template<class Expr2 > ; void operator-= (const MatrixExpr< Expr2 > &m);  ; MatrixExpr< MatrixTranspose< Matrix > > t () const;  ; MatrixExpr< MatrixNegative< Matrix > > operator- () const;  ; MatrixExpr< MatrixScale< Matrix, double > > operator* (const double &r) const;  ; void add (Index row, Index col, const type::Mat3x3d &_M);  ; void add (Index row, Index col, const type::Mat3x3f &_M);  ; void add (Index row, Index col, const type::Mat3x3d &_M);  ; void add (Index row, Index col, const type::Mat3x3f &_M);  ; void SOFA_LINEARALGEBRA_API add (Index row, Index col, const type::Mat3x3d &_M);  ; void SOFA_LINEARALGEBRA_API add (Index row, Index col, const type::Mat3x3f &_M);  ; void SOFA_LINEARALGEBRA_API add (Index row, Index col, const type::Mat3x3d &_M);  ; void SOFA_LINEARALGEBRA_API add (Index row, Index col, const type::Mat3x3f &_M);  ; BlockMatrixWriter operators; template<typename T = Block, typename std::enable_if_t<!std::is_same_v< T, double > &&!std::is_same_v< T, float >, int > = 0> ; void add (unsigned int bi, unsigned int bj, const Block &b);  Override CRSMatrix add method to avoid mis-understanding by compiler with other add method overriding BaseMatrix. More...;  ; Get information about the content",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:36867,Safety,avoid,avoid,36867," ). ◆ add() [10/13]. void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< type::Mat< 3, 3, float > >::add ; (; Index ; row, . Index ; col, . const type::Mat3x3f & ; _M . ). ◆ add() [11/13]. void SOFA_LINEARALGEBRA_API sofa::linearalgebra::CompressedRowSparseMatrixMechanical< type::Mat3x3d >::add ; (; Index ; row, . Index ; col, . const type::Mat3x3f & ; _M . ). ◆ add() [12/13]. void SOFA_LINEARALGEBRA_API sofa::linearalgebra::CompressedRowSparseMatrixMechanical< type::Mat3x3f >::add ; (; Index ; row, . Index ; col, . const type::Mat3x3f & ; _M . ). ◆ add() [13/13]. template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . template<typename T = Block, typename std::enable_if_t<!std::is_same_v< T, double > &&!std::is_same_v< T, float >, int > = 0> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::add ; (; unsigned int ; bi, . unsigned int ; bj, . const Block & ; b . ). inline . Override CRSMatrix add method to avoid mis-understanding by compiler with other add method overriding BaseMatrix. . ◆ addEqual(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . template<class M > . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::addEqual ; (; const M & ; m). inlineprotected . this += m . ◆ addMul(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . template<typename V1 , typename V2 > . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::addMul ; (; V1 & ; res, . const V2 & ; v . ); const. inline . result += this * v . ◆ addMul_by_line() [1/2]. template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . template<typename V , typename Real2 > . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::addMul_by_line ; (; V & ; res, . const type::Vec< NC, Real2 > & ; v . ); const. inline . result += this * (v,...,v)^T v has the size of one block . ◆ addMul_by_line() [2/2]. template<typename",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:18823,Security,access,access,18823,"Vector *v) const;  Multiply the transposed matrix by vector v and add the result in vector result. More...;  ; virtual void opPMulTV (float *result, const float *v) const;  Multiply the transposed matrix by float vector v and add the result in vector result. More...;  ; virtual void opPMulTV (double *result, const double *v) const;  Multiply the transposed matrix by double vector v and add the result in vector result. More...;  ; virtual void opMulTM (BaseMatrix *result, BaseMatrix *m) const;  Multiply the transposed matrix by matrix m and store the result in matrix result. More...;  ; virtual void opAddM (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the matrix to the m matrix and strore the result in m. More...;  ; virtual void opAddMT (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the transposed matrix to the m matrix and strore the result in m. More...;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  ; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the given row of blocks. More...;  ; virtual ColBlockConstIterator bRowEnd (Index ib) const;  Get the iterator corresponding to the end of the given row of blocks. More...;  ; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:18916,Security,access,access,18916,"float *v) const;  Multiply the transposed matrix by float vector v and add the result in vector result. More...;  ; virtual void opPMulTV (double *result, const double *v) const;  Multiply the transposed matrix by double vector v and add the result in vector result. More...;  ; virtual void opMulTM (BaseMatrix *result, BaseMatrix *m) const;  Multiply the transposed matrix by matrix m and store the result in matrix result. More...;  ; virtual void opAddM (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the matrix to the m matrix and strore the result in m. More...;  ; virtual void opAddMT (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the transposed matrix to the m matrix and strore the result in m. More...;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  ; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the given row of blocks. More...;  ; virtual ColBlockConstIterator bRowEnd (Index ib) const;  Get the iterator corresponding to the end of the given row of blocks. More...;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > bRowRange (Index ib) const;  Get the iterators corresponding to the beginning and end of ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:19011,Security,access,access,19011,"ore...;  ; virtual void opPMulTV (double *result, const double *v) const;  Multiply the transposed matrix by double vector v and add the result in vector result. More...;  ; virtual void opMulTM (BaseMatrix *result, BaseMatrix *m) const;  Multiply the transposed matrix by matrix m and store the result in matrix result. More...;  ; virtual void opAddM (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the matrix to the m matrix and strore the result in m. More...;  ; virtual void opAddMT (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the transposed matrix to the m matrix and strore the result in m. More...;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  ; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the given row of blocks. More...;  ; virtual ColBlockConstIterator bRowEnd (Index ib) const;  Get the iterator corresponding to the end of the given row of blocks. More...;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > bRowRange (Index ib) const;  Get the iterators corresponding to the beginning and end of the given row of blocks. More...;  . Static Public Member Functions; static void split_row_index (Index &",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:25496,Security,access,access,25496,"ows=false);  ; template<class TMatrix > ; void copyUpperNonZeros (TMatrix &M, bool keepEmptyRows=false);  ; template<class TMatrix > ; void copyLowerNonZeros (TMatrix &M, bool keepEmptyRows=false);  ; void copyUpperNonSmall (Matrix &M, const Real ref, bool keepEmptyRows=false);  ; void copyLowerNonSmall (Matrix &M, const Real ref, bool keepEmptyRows=false);  ; static bool nonzeros (Index, Index, Block &val, const Real);  ; static bool nonsmall (Index, Index, Block &val, const Real ref);  ; static bool upper (Index i, Index j, Block &val, const Real);  ; static bool lower (Index i, Index j, Block &val, const Real);  ; static bool upper_nonzeros (Index i, Index j, Block &val, const Real ref);  ; static bool lower_nonzeros (Index i, Index j, Block &val, const Real ref);  ; static bool upper_nonsmall (Index i, Index j, Block &val, const Real ref);  ; static bool lower_nonsmall (Index i, Index j, Block &val, const Real ref);  . Virtual iterator classes and methods; virtual BlockConstAccessor blockGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blockGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blockCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const override;  Get the iterator corresponding to the beginning of the given row of blocks. More...;  ; virtual ColBlockConstIterator bRowEnd (Index ib) const override;  Get the iterator corresponding to the end of the given row of blocks. More...;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > bRowRange (Index ib) const override;  Get the iterators corresponding to the beginning and end of the given row of blocks. More...;  ; virtual RowBlockConstIterator bRowsBegin () const override;  Get the iterator corresponding to the beginning of the rows of blocks. More...;  ; virtual RowBlockConstIterator bRowsEnd () const override;  Get",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:25590,Security,access,access,25590,"<class TMatrix > ; void copyLowerNonZeros (TMatrix &M, bool keepEmptyRows=false);  ; void copyUpperNonSmall (Matrix &M, const Real ref, bool keepEmptyRows=false);  ; void copyLowerNonSmall (Matrix &M, const Real ref, bool keepEmptyRows=false);  ; static bool nonzeros (Index, Index, Block &val, const Real);  ; static bool nonsmall (Index, Index, Block &val, const Real ref);  ; static bool upper (Index i, Index j, Block &val, const Real);  ; static bool lower (Index i, Index j, Block &val, const Real);  ; static bool upper_nonzeros (Index i, Index j, Block &val, const Real ref);  ; static bool lower_nonzeros (Index i, Index j, Block &val, const Real ref);  ; static bool upper_nonsmall (Index i, Index j, Block &val, const Real ref);  ; static bool lower_nonsmall (Index i, Index j, Block &val, const Real ref);  . Virtual iterator classes and methods; virtual BlockConstAccessor blockGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blockGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blockCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const override;  Get the iterator corresponding to the beginning of the given row of blocks. More...;  ; virtual ColBlockConstIterator bRowEnd (Index ib) const override;  Get the iterator corresponding to the end of the given row of blocks. More...;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > bRowRange (Index ib) const override;  Get the iterators corresponding to the beginning and end of the given row of blocks. More...;  ; virtual RowBlockConstIterator bRowsBegin () const override;  Get the iterator corresponding to the beginning of the rows of blocks. More...;  ; virtual RowBlockConstIterator bRowsEnd () const override;  Get the iterator corresponding to the end of the rows of blocks. More...;  ; virtual std::pair< RowBlockConstIterator,",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:25686,Security,access,access,25686,"l (Matrix &M, const Real ref, bool keepEmptyRows=false);  ; void copyLowerNonSmall (Matrix &M, const Real ref, bool keepEmptyRows=false);  ; static bool nonzeros (Index, Index, Block &val, const Real);  ; static bool nonsmall (Index, Index, Block &val, const Real ref);  ; static bool upper (Index i, Index j, Block &val, const Real);  ; static bool lower (Index i, Index j, Block &val, const Real);  ; static bool upper_nonzeros (Index i, Index j, Block &val, const Real ref);  ; static bool lower_nonzeros (Index i, Index j, Block &val, const Real ref);  ; static bool upper_nonsmall (Index i, Index j, Block &val, const Real ref);  ; static bool lower_nonsmall (Index i, Index j, Block &val, const Real ref);  . Virtual iterator classes and methods; virtual BlockConstAccessor blockGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blockGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blockCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const override;  Get the iterator corresponding to the beginning of the given row of blocks. More...;  ; virtual ColBlockConstIterator bRowEnd (Index ib) const override;  Get the iterator corresponding to the end of the given row of blocks. More...;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > bRowRange (Index ib) const override;  Get the iterators corresponding to the beginning and end of the given row of blocks. More...;  ; virtual RowBlockConstIterator bRowsBegin () const override;  Get the iterator corresponding to the beginning of the rows of blocks. More...;  ; virtual RowBlockConstIterator bRowsEnd () const override;  Get the iterator corresponding to the end of the rows of blocks. More...;  ; virtual std::pair< RowBlockConstIterator, RowBlockConstIterator > bRowsRange () const override;  Get the iterators corresponding to the beginning a",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:45048,Security,access,access,45048,"essorSet ; (; InternalBlockAccessor * ; b, . Index ; i, . Index ; j, . double ; v . ). inlineoverrideprotectedvirtual . ◆ bAccessorSetCSRImpl(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . template<class T > . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::bAccessorSetCSRImpl ; (; InternalBlockAccessor * ; b, . const T * ; buffer . ). inlineprotected . ◆ bColSize(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . virtual Index sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::bColSize ; (; ); const. inlineoverridevirtual . Returnsthe number of columns of blocks ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ blockCreate(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . virtual BlockAccessor sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::blockCreate ; (; Index ; i, . Index ; j . ). inlinevirtual . Get write access to a block, possibly creating it. . ◆ blockGet(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . virtual BlockConstAccessor sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::blockGet ; (; Index ; i, . Index ; j . ); const. inlinevirtual . Get read access to a block. . ◆ blockGetW(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . virtual BlockAccessor sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::blockGetW ; (; Index ; i, . Index ; j . ). inlinevirtual . Get write access to a block. . ◆ bRowBegin(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . virtual ColBlockConstIterator sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::bRowBegin ; (; Index ; ib); const. inlineoverridevirtual . Get the iterator corresponding to the beginning of the given row of blocks. . ◆ bRowEnd(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . virtual",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:45352,Security,access,access,45352,"al< TBlock, TPolicy >::bAccessorSetCSRImpl ; (; InternalBlockAccessor * ; b, . const T * ; buffer . ). inlineprotected . ◆ bColSize(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . virtual Index sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::bColSize ; (; ); const. inlineoverridevirtual . Returnsthe number of columns of blocks ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ blockCreate(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . virtual BlockAccessor sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::blockCreate ; (; Index ; i, . Index ; j . ). inlinevirtual . Get write access to a block, possibly creating it. . ◆ blockGet(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . virtual BlockConstAccessor sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::blockGet ; (; Index ; i, . Index ; j . ); const. inlinevirtual . Get read access to a block. . ◆ blockGetW(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . virtual BlockAccessor sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::blockGetW ; (; Index ; i, . Index ; j . ). inlinevirtual . Get write access to a block. . ◆ bRowBegin(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . virtual ColBlockConstIterator sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::bRowBegin ; (; Index ; ib); const. inlineoverridevirtual . Get the iterator corresponding to the beginning of the given row of blocks. . ◆ bRowEnd(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . virtual ColBlockConstIterator sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::bRowEnd ; (; Index ; ib); const. inlineoverridevirtual . Get the iterator corresponding to the end of the given row of blocks. . ◆ bRowRange(). template<typename TBlock , typename TPolicy = CRS",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:45625,Security,access,access,45625,"al< TBlock, TPolicy >::bColSize ; (; ); const. inlineoverridevirtual . Returnsthe number of columns of blocks ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ blockCreate(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . virtual BlockAccessor sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::blockCreate ; (; Index ; i, . Index ; j . ). inlinevirtual . Get write access to a block, possibly creating it. . ◆ blockGet(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . virtual BlockConstAccessor sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::blockGet ; (; Index ; i, . Index ; j . ); const. inlinevirtual . Get read access to a block. . ◆ blockGetW(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . virtual BlockAccessor sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::blockGetW ; (; Index ; i, . Index ; j . ). inlinevirtual . Get write access to a block. . ◆ bRowBegin(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . virtual ColBlockConstIterator sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::bRowBegin ; (; Index ; ib); const. inlineoverridevirtual . Get the iterator corresponding to the beginning of the given row of blocks. . ◆ bRowEnd(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . virtual ColBlockConstIterator sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::bRowEnd ; (; Index ; ib); const. inlineoverridevirtual . Get the iterator corresponding to the end of the given row of blocks. . ◆ bRowRange(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . virtual std::pair<ColBlockConstIterator, ColBlockConstIterator> sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::bRowRange ; (; Index ; ib); const. inlineoverridevirtual . Get the iterators corresponding to the beginning and ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:3671,Usability,clear,clear,3671,"owerTriangularBlock = true;  ; static constexpr int matrixType = 1;  ;  Static Public Attributes inherited from sofa::linearalgebra::CRSDefaultPolicy; static constexpr bool IsAlwaysSquare = false;  Set to true if this matrix is always square (must be true for symmetric) More...;  ; static constexpr bool IsAlwaysSymmetric = false;  Set to true if this matrix is always symmetric (IsAlwaysSquare should be true) More...;  ; static constexpr bool AutoSize = false;  Set to true if the size of the matrix should be automatically increased when new blocks are added. More...;  ; static constexpr bool AutoCompress = true;  Set to true if the matrix should be automatically compressed (easier to use, but might cause issues in multithreading) More...;  ; static constexpr bool CompressZeros = true;  Set to true if the blocks that are all zeros should be removed from the matrix when compressing (expensive) More...;  ; static constexpr bool ClearByZeros = true;  Set to true if clear methods will put all concerned value to zero instead of clearing vectors (CompressZeros should be true) More...;  ; static constexpr bool OrderedInsertion = false;  Set to true if insertion in matrix are in most case at last line index or last col index. More...;  ; static constexpr bool StoreLowerTriangularBlock = true;  Set to false to disable storage of blocks on the lower triangular part (IsAlwaysSymmetric must be true) More...;  ; static constexpr int matrixType = 0;  Do not change this value, has to be overrided for all derivated class. More...;  . Public Member Functions;  CompressedRowSparseMatrixMechanical ();  ;  CompressedRowSparseMatrixMechanical (Index nbRow, Index nbCol);  ; void compress () override;  ; void swap (Matrix &m);  ; template<typename = typename std::enable_if< Policy::IsAlwaysSquare>> ; void fullDiagonal ();  Make sure all diagonal entries are present even if they are zero. More...;  ; Index rowSize () const override;  Mathematical size of the matrix. More...;  ; Index colSize ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:3733,Usability,clear,clearing,3733,"owerTriangularBlock = true;  ; static constexpr int matrixType = 1;  ;  Static Public Attributes inherited from sofa::linearalgebra::CRSDefaultPolicy; static constexpr bool IsAlwaysSquare = false;  Set to true if this matrix is always square (must be true for symmetric) More...;  ; static constexpr bool IsAlwaysSymmetric = false;  Set to true if this matrix is always symmetric (IsAlwaysSquare should be true) More...;  ; static constexpr bool AutoSize = false;  Set to true if the size of the matrix should be automatically increased when new blocks are added. More...;  ; static constexpr bool AutoCompress = true;  Set to true if the matrix should be automatically compressed (easier to use, but might cause issues in multithreading) More...;  ; static constexpr bool CompressZeros = true;  Set to true if the blocks that are all zeros should be removed from the matrix when compressing (expensive) More...;  ; static constexpr bool ClearByZeros = true;  Set to true if clear methods will put all concerned value to zero instead of clearing vectors (CompressZeros should be true) More...;  ; static constexpr bool OrderedInsertion = false;  Set to true if insertion in matrix are in most case at last line index or last col index. More...;  ; static constexpr bool StoreLowerTriangularBlock = true;  Set to false to disable storage of blocks on the lower triangular part (IsAlwaysSymmetric must be true) More...;  ; static constexpr int matrixType = 0;  Do not change this value, has to be overrided for all derivated class. More...;  . Public Member Functions;  CompressedRowSparseMatrixMechanical ();  ;  CompressedRowSparseMatrixMechanical (Index nbRow, Index nbCol);  ; void compress () override;  ; void swap (Matrix &m);  ; template<typename = typename std::enable_if< Policy::IsAlwaysSquare>> ; void fullDiagonal ();  Make sure all diagonal entries are present even if they are zero. More...;  ; Index rowSize () const override;  Mathematical size of the matrix. More...;  ; Index colSize ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:5677,Usability,clear,clear,5677,"de;  Number of columns. More...;  ; void resizeBlock (Index nbBRow, Index nbBCol) override;  This override classic resizeBlock to fill nRow and nCol values. More...;  ; void resize (Index nbRow, Index nbCol) override;  ; void extend (Index nbRow, Index nbCol);  ; SReal element (Index i, Index j) const override;  get scalar element i, j of matrix More...;  ; void set (Index i, Index j, double v) override;  set scalar element i, j of matrix More...;  ; void add (Index i, Index j, double v) override;  add scalar v at element i, j of matrix More...;  ; void set (Index i, Index j, int &rowId, int &colId, double v);  set scalar element i, j of matrix when rowId and colId are known More...;  ; template<typename T = Block, typename std::enable_if_t<!std::is_same_v< T, double > &&!std::is_same_v< T, float >, int > = 0> ; void add (Index i, Index j, int &rowId, int &colId, double v);  add scalar v at element i, j when rowId and colId are known More...;  ; void clear (Index i, Index j) override;  clear scalar at element i, j of matrix More...;  ; void add (Index i, Index j, const type::Mat3x3d &_M) override;  ; void add (Index i, Index j, const type::Mat3x3f &_M) override;  ; void clearRow (Index i) override;  Clear row scalar method. Clear all col of this line. More...;  ; void clearCol (Index j) override;  Clear col scalar method. Clear this col in all row of matrix. More...;  ; void clearRowCol (Index i) override;  Clear both row i and column i in a square matrix. More...;  ; void clear () override;  Completely clear the matrix. More...;  ; template<class M2 > ; bool hasRef (const M2 *m) const;  ; std::string expr () const;  ; bool valid () const;  ; template<class Dest > ; void addTo (Dest *dest) const;  ; template<class TBlock2 , class TPolicy2 > ; void operator= (const CompressedRowSparseMatrixMechanical< TBlock2, TPolicy2 > &m);  ; template<class TBlock2 , class TPolicy2 > ; void operator+= (const CompressedRowSparseMatrixMechanical< TBlock2, TPolicy2 > &m);  ; template",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:5713,Usability,clear,clear,5713,"de;  Number of columns. More...;  ; void resizeBlock (Index nbBRow, Index nbBCol) override;  This override classic resizeBlock to fill nRow and nCol values. More...;  ; void resize (Index nbRow, Index nbCol) override;  ; void extend (Index nbRow, Index nbCol);  ; SReal element (Index i, Index j) const override;  get scalar element i, j of matrix More...;  ; void set (Index i, Index j, double v) override;  set scalar element i, j of matrix More...;  ; void add (Index i, Index j, double v) override;  add scalar v at element i, j of matrix More...;  ; void set (Index i, Index j, int &rowId, int &colId, double v);  set scalar element i, j of matrix when rowId and colId are known More...;  ; template<typename T = Block, typename std::enable_if_t<!std::is_same_v< T, double > &&!std::is_same_v< T, float >, int > = 0> ; void add (Index i, Index j, int &rowId, int &colId, double v);  add scalar v at element i, j when rowId and colId are known More...;  ; void clear (Index i, Index j) override;  clear scalar at element i, j of matrix More...;  ; void add (Index i, Index j, const type::Mat3x3d &_M) override;  ; void add (Index i, Index j, const type::Mat3x3f &_M) override;  ; void clearRow (Index i) override;  Clear row scalar method. Clear all col of this line. More...;  ; void clearCol (Index j) override;  Clear col scalar method. Clear this col in all row of matrix. More...;  ; void clearRowCol (Index i) override;  Clear both row i and column i in a square matrix. More...;  ; void clear () override;  Completely clear the matrix. More...;  ; template<class M2 > ; bool hasRef (const M2 *m) const;  ; std::string expr () const;  ; bool valid () const;  ; template<class Dest > ; void addTo (Dest *dest) const;  ; template<class TBlock2 , class TPolicy2 > ; void operator= (const CompressedRowSparseMatrixMechanical< TBlock2, TPolicy2 > &m);  ; template<class TBlock2 , class TPolicy2 > ; void operator+= (const CompressedRowSparseMatrixMechanical< TBlock2, TPolicy2 > &m);  ; template",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:5901,Usability,clear,clearRow,5901,"Col values. More...;  ; void resize (Index nbRow, Index nbCol) override;  ; void extend (Index nbRow, Index nbCol);  ; SReal element (Index i, Index j) const override;  get scalar element i, j of matrix More...;  ; void set (Index i, Index j, double v) override;  set scalar element i, j of matrix More...;  ; void add (Index i, Index j, double v) override;  add scalar v at element i, j of matrix More...;  ; void set (Index i, Index j, int &rowId, int &colId, double v);  set scalar element i, j of matrix when rowId and colId are known More...;  ; template<typename T = Block, typename std::enable_if_t<!std::is_same_v< T, double > &&!std::is_same_v< T, float >, int > = 0> ; void add (Index i, Index j, int &rowId, int &colId, double v);  add scalar v at element i, j when rowId and colId are known More...;  ; void clear (Index i, Index j) override;  clear scalar at element i, j of matrix More...;  ; void add (Index i, Index j, const type::Mat3x3d &_M) override;  ; void add (Index i, Index j, const type::Mat3x3f &_M) override;  ; void clearRow (Index i) override;  Clear row scalar method. Clear all col of this line. More...;  ; void clearCol (Index j) override;  Clear col scalar method. Clear this col in all row of matrix. More...;  ; void clearRowCol (Index i) override;  Clear both row i and column i in a square matrix. More...;  ; void clear () override;  Completely clear the matrix. More...;  ; template<class M2 > ; bool hasRef (const M2 *m) const;  ; std::string expr () const;  ; bool valid () const;  ; template<class Dest > ; void addTo (Dest *dest) const;  ; template<class TBlock2 , class TPolicy2 > ; void operator= (const CompressedRowSparseMatrixMechanical< TBlock2, TPolicy2 > &m);  ; template<class TBlock2 , class TPolicy2 > ; void operator+= (const CompressedRowSparseMatrixMechanical< TBlock2, TPolicy2 > &m);  ; template<class TBlock2 , class TPolicy2 > ; void operator-= (const CompressedRowSparseMatrixMechanical< TBlock2, TPolicy2 > &m);  ; template<class Expr2 ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:6001,Usability,clear,clearCol,6001,";  get scalar element i, j of matrix More...;  ; void set (Index i, Index j, double v) override;  set scalar element i, j of matrix More...;  ; void add (Index i, Index j, double v) override;  add scalar v at element i, j of matrix More...;  ; void set (Index i, Index j, int &rowId, int &colId, double v);  set scalar element i, j of matrix when rowId and colId are known More...;  ; template<typename T = Block, typename std::enable_if_t<!std::is_same_v< T, double > &&!std::is_same_v< T, float >, int > = 0> ; void add (Index i, Index j, int &rowId, int &colId, double v);  add scalar v at element i, j when rowId and colId are known More...;  ; void clear (Index i, Index j) override;  clear scalar at element i, j of matrix More...;  ; void add (Index i, Index j, const type::Mat3x3d &_M) override;  ; void add (Index i, Index j, const type::Mat3x3f &_M) override;  ; void clearRow (Index i) override;  Clear row scalar method. Clear all col of this line. More...;  ; void clearCol (Index j) override;  Clear col scalar method. Clear this col in all row of matrix. More...;  ; void clearRowCol (Index i) override;  Clear both row i and column i in a square matrix. More...;  ; void clear () override;  Completely clear the matrix. More...;  ; template<class M2 > ; bool hasRef (const M2 *m) const;  ; std::string expr () const;  ; bool valid () const;  ; template<class Dest > ; void addTo (Dest *dest) const;  ; template<class TBlock2 , class TPolicy2 > ; void operator= (const CompressedRowSparseMatrixMechanical< TBlock2, TPolicy2 > &m);  ; template<class TBlock2 , class TPolicy2 > ; void operator+= (const CompressedRowSparseMatrixMechanical< TBlock2, TPolicy2 > &m);  ; template<class TBlock2 , class TPolicy2 > ; void operator-= (const CompressedRowSparseMatrixMechanical< TBlock2, TPolicy2 > &m);  ; template<class Expr2 > ; void operator= (const MatrixExpr< Expr2 > &m);  ; template<class Expr2 > ; void operator+= (const MatrixExpr< Expr2 > &m);  ; template<class Expr2 > ; void operat",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:6110,Usability,clear,clearRowCol,6110,"f matrix More...;  ; void add (Index i, Index j, double v) override;  add scalar v at element i, j of matrix More...;  ; void set (Index i, Index j, int &rowId, int &colId, double v);  set scalar element i, j of matrix when rowId and colId are known More...;  ; template<typename T = Block, typename std::enable_if_t<!std::is_same_v< T, double > &&!std::is_same_v< T, float >, int > = 0> ; void add (Index i, Index j, int &rowId, int &colId, double v);  add scalar v at element i, j when rowId and colId are known More...;  ; void clear (Index i, Index j) override;  clear scalar at element i, j of matrix More...;  ; void add (Index i, Index j, const type::Mat3x3d &_M) override;  ; void add (Index i, Index j, const type::Mat3x3f &_M) override;  ; void clearRow (Index i) override;  Clear row scalar method. Clear all col of this line. More...;  ; void clearCol (Index j) override;  Clear col scalar method. Clear this col in all row of matrix. More...;  ; void clearRowCol (Index i) override;  Clear both row i and column i in a square matrix. More...;  ; void clear () override;  Completely clear the matrix. More...;  ; template<class M2 > ; bool hasRef (const M2 *m) const;  ; std::string expr () const;  ; bool valid () const;  ; template<class Dest > ; void addTo (Dest *dest) const;  ; template<class TBlock2 , class TPolicy2 > ; void operator= (const CompressedRowSparseMatrixMechanical< TBlock2, TPolicy2 > &m);  ; template<class TBlock2 , class TPolicy2 > ; void operator+= (const CompressedRowSparseMatrixMechanical< TBlock2, TPolicy2 > &m);  ; template<class TBlock2 , class TPolicy2 > ; void operator-= (const CompressedRowSparseMatrixMechanical< TBlock2, TPolicy2 > &m);  ; template<class Expr2 > ; void operator= (const MatrixExpr< Expr2 > &m);  ; template<class Expr2 > ; void operator+= (const MatrixExpr< Expr2 > &m);  ; template<class Expr2 > ; void operator-= (const MatrixExpr< Expr2 > &m);  ; MatrixExpr< MatrixTranspose< Matrix > > t () const;  ; MatrixExpr< MatrixNegative< ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:6210,Usability,clear,clear,6210,"at element i, j of matrix More...;  ; void set (Index i, Index j, int &rowId, int &colId, double v);  set scalar element i, j of matrix when rowId and colId are known More...;  ; template<typename T = Block, typename std::enable_if_t<!std::is_same_v< T, double > &&!std::is_same_v< T, float >, int > = 0> ; void add (Index i, Index j, int &rowId, int &colId, double v);  add scalar v at element i, j when rowId and colId are known More...;  ; void clear (Index i, Index j) override;  clear scalar at element i, j of matrix More...;  ; void add (Index i, Index j, const type::Mat3x3d &_M) override;  ; void add (Index i, Index j, const type::Mat3x3f &_M) override;  ; void clearRow (Index i) override;  Clear row scalar method. Clear all col of this line. More...;  ; void clearCol (Index j) override;  Clear col scalar method. Clear this col in all row of matrix. More...;  ; void clearRowCol (Index i) override;  Clear both row i and column i in a square matrix. More...;  ; void clear () override;  Completely clear the matrix. More...;  ; template<class M2 > ; bool hasRef (const M2 *m) const;  ; std::string expr () const;  ; bool valid () const;  ; template<class Dest > ; void addTo (Dest *dest) const;  ; template<class TBlock2 , class TPolicy2 > ; void operator= (const CompressedRowSparseMatrixMechanical< TBlock2, TPolicy2 > &m);  ; template<class TBlock2 , class TPolicy2 > ; void operator+= (const CompressedRowSparseMatrixMechanical< TBlock2, TPolicy2 > &m);  ; template<class TBlock2 , class TPolicy2 > ; void operator-= (const CompressedRowSparseMatrixMechanical< TBlock2, TPolicy2 > &m);  ; template<class Expr2 > ; void operator= (const MatrixExpr< Expr2 > &m);  ; template<class Expr2 > ; void operator+= (const MatrixExpr< Expr2 > &m);  ; template<class Expr2 > ; void operator-= (const MatrixExpr< Expr2 > &m);  ; MatrixExpr< MatrixTranspose< Matrix > > t () const;  ; MatrixExpr< MatrixNegative< Matrix > > operator- () const;  ; MatrixExpr< MatrixScale< Matrix, double > > opera",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:6241,Usability,clear,clear,6241,"at element i, j of matrix More...;  ; void set (Index i, Index j, int &rowId, int &colId, double v);  set scalar element i, j of matrix when rowId and colId are known More...;  ; template<typename T = Block, typename std::enable_if_t<!std::is_same_v< T, double > &&!std::is_same_v< T, float >, int > = 0> ; void add (Index i, Index j, int &rowId, int &colId, double v);  add scalar v at element i, j when rowId and colId are known More...;  ; void clear (Index i, Index j) override;  clear scalar at element i, j of matrix More...;  ; void add (Index i, Index j, const type::Mat3x3d &_M) override;  ; void add (Index i, Index j, const type::Mat3x3f &_M) override;  ; void clearRow (Index i) override;  Clear row scalar method. Clear all col of this line. More...;  ; void clearCol (Index j) override;  Clear col scalar method. Clear this col in all row of matrix. More...;  ; void clearRowCol (Index i) override;  Clear both row i and column i in a square matrix. More...;  ; void clear () override;  Completely clear the matrix. More...;  ; template<class M2 > ; bool hasRef (const M2 *m) const;  ; std::string expr () const;  ; bool valid () const;  ; template<class Dest > ; void addTo (Dest *dest) const;  ; template<class TBlock2 , class TPolicy2 > ; void operator= (const CompressedRowSparseMatrixMechanical< TBlock2, TPolicy2 > &m);  ; template<class TBlock2 , class TPolicy2 > ; void operator+= (const CompressedRowSparseMatrixMechanical< TBlock2, TPolicy2 > &m);  ; template<class TBlock2 , class TPolicy2 > ; void operator-= (const CompressedRowSparseMatrixMechanical< TBlock2, TPolicy2 > &m);  ; template<class Expr2 > ; void operator= (const MatrixExpr< Expr2 > &m);  ; template<class Expr2 > ; void operator+= (const MatrixExpr< Expr2 > &m);  ; template<class Expr2 > ; void operator-= (const MatrixExpr< Expr2 > &m);  ; MatrixExpr< MatrixTranspose< Matrix > > t () const;  ; MatrixExpr< MatrixNegative< Matrix > > operator- () const;  ; MatrixExpr< MatrixScale< Matrix, double > > opera",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:11339,Usability,clear,clearRowBlock,11339,"-th row. More...;  ; const VecIndex & getColsIndex () const;  ; const VecBlock & getColsValue () const;  ; void resizeBloc (Index nbBRow, Index nbBCol);  ; void compress ();  ; void swap (Matrix &m);  ; void fullRows ();  Make sure all rows have an entry even if they are empty. More...;  ; void shiftIndices (Index base);  ; const Block & block (Index i, Index j) const;  Get block method. More...;  ; const Block & bloc (Index i, Index j) const;  ; Block * wblock (Index i, Index j, bool create=false);  Write block method. More...;  ; Block * wblock (Index i, Index j, Index &rowId, Index &colId, bool create=false);  Write block method when rowId and colId are known, this is an optimized wblock specification. More...;  ; Block * wbloc (Index i, Index j, bool create=false);  ; const Block & getBlock (Index i, Index j) const;  ; const BlockTranspose getSymBlock (Index i, Index j) const;  ; void setBlock (Index i, Index j, const Block &v);  ; void setBlock (Index i, Index j, Index &rowId, Index &colId, const Block &v);  ; void addBlock (Index i, Index j, const Block &v);  ; void addBlock (Index i, Index j, Index &rowId, Index &colId, const Block &v);  ; Block * getWBlock (Index i, Index j, bool create=false);  ; void clearRowBlock (Index i);  Clear row block method. Clear all col of this line. More...;  ; void clearColBlock (Index j);  Clear col block method. Clear this col in all row of matrix. More...;  ; std::size_t countEmptyBlocks () const;  ; void clearRowColBlock (Index i);  Clear both row i and column i in a square matrix. More...;  ; void clear ();  Completely clear the matrix. More...;  ; bool check_matrix ();  ; std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &is);  ; void add (unsigned int bi, unsigned int bj, const Block &b);  ; void add (unsigned int bi, unsigned int bj, int &rowId, int &colId, const Block &b);  ; void addDBlock (unsigned int bi, unsigned int bj, const DBlock &b);  ; void addDValue (unsigned int bi, unsigned",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:11434,Usability,clear,clearColBlock,11434,"k (Index i, Index j) const;  Get block method. More...;  ; const Block & bloc (Index i, Index j) const;  ; Block * wblock (Index i, Index j, bool create=false);  Write block method. More...;  ; Block * wblock (Index i, Index j, Index &rowId, Index &colId, bool create=false);  Write block method when rowId and colId are known, this is an optimized wblock specification. More...;  ; Block * wbloc (Index i, Index j, bool create=false);  ; const Block & getBlock (Index i, Index j) const;  ; const BlockTranspose getSymBlock (Index i, Index j) const;  ; void setBlock (Index i, Index j, const Block &v);  ; void setBlock (Index i, Index j, Index &rowId, Index &colId, const Block &v);  ; void addBlock (Index i, Index j, const Block &v);  ; void addBlock (Index i, Index j, Index &rowId, Index &colId, const Block &v);  ; Block * getWBlock (Index i, Index j, bool create=false);  ; void clearRowBlock (Index i);  Clear row block method. Clear all col of this line. More...;  ; void clearColBlock (Index j);  Clear col block method. Clear this col in all row of matrix. More...;  ; std::size_t countEmptyBlocks () const;  ; void clearRowColBlock (Index i);  Clear both row i and column i in a square matrix. More...;  ; void clear ();  Completely clear the matrix. More...;  ; bool check_matrix ();  ; std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &is);  ; void add (unsigned int bi, unsigned int bj, const Block &b);  ; void add (unsigned int bi, unsigned int bj, int &rowId, int &colId, const Block &b);  ; void addDBlock (unsigned int bi, unsigned int bj, const DBlock &b);  ; void addDValue (unsigned int bi, unsigned int bj, const Real b);  ; void addDValue (unsigned int bi, unsigned int bj, int &rowId, int &colId, const Real b);  ; void addDiag (unsigned int bi, const Block &b);  ; void addDiag (unsigned int bi, int &rowId, int &colId, const Block &b);  ; void addDiagDBlock (unsigned int bi, const DBlock &b);  ; void addDiagDValue (unsigned int bi, cons",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:11580,Usability,clear,clearRowColBlock,11580," bool create=false);  Write block method. More...;  ; Block * wblock (Index i, Index j, Index &rowId, Index &colId, bool create=false);  Write block method when rowId and colId are known, this is an optimized wblock specification. More...;  ; Block * wbloc (Index i, Index j, bool create=false);  ; const Block & getBlock (Index i, Index j) const;  ; const BlockTranspose getSymBlock (Index i, Index j) const;  ; void setBlock (Index i, Index j, const Block &v);  ; void setBlock (Index i, Index j, Index &rowId, Index &colId, const Block &v);  ; void addBlock (Index i, Index j, const Block &v);  ; void addBlock (Index i, Index j, Index &rowId, Index &colId, const Block &v);  ; Block * getWBlock (Index i, Index j, bool create=false);  ; void clearRowBlock (Index i);  Clear row block method. Clear all col of this line. More...;  ; void clearColBlock (Index j);  Clear col block method. Clear this col in all row of matrix. More...;  ; std::size_t countEmptyBlocks () const;  ; void clearRowColBlock (Index i);  Clear both row i and column i in a square matrix. More...;  ; void clear ();  Completely clear the matrix. More...;  ; bool check_matrix ();  ; std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &is);  ; void add (unsigned int bi, unsigned int bj, const Block &b);  ; void add (unsigned int bi, unsigned int bj, int &rowId, int &colId, const Block &b);  ; void addDBlock (unsigned int bi, unsigned int bj, const DBlock &b);  ; void addDValue (unsigned int bi, unsigned int bj, const Real b);  ; void addDValue (unsigned int bi, unsigned int bj, int &rowId, int &colId, const Real b);  ; void addDiag (unsigned int bi, const Block &b);  ; void addDiag (unsigned int bi, int &rowId, int &colId, const Block &b);  ; void addDiagDBlock (unsigned int bi, const DBlock &b);  ; void addDiagDValue (unsigned int bi, const Real b);  ; void addDiagDValue (unsigned int bi, int &rowId, int &colId, const Real b);  ; void addSym (unsigned int bi, unsigned int bj,",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:11676,Usability,clear,clear,11676,"wId, Index &colId, bool create=false);  Write block method when rowId and colId are known, this is an optimized wblock specification. More...;  ; Block * wbloc (Index i, Index j, bool create=false);  ; const Block & getBlock (Index i, Index j) const;  ; const BlockTranspose getSymBlock (Index i, Index j) const;  ; void setBlock (Index i, Index j, const Block &v);  ; void setBlock (Index i, Index j, Index &rowId, Index &colId, const Block &v);  ; void addBlock (Index i, Index j, const Block &v);  ; void addBlock (Index i, Index j, Index &rowId, Index &colId, const Block &v);  ; Block * getWBlock (Index i, Index j, bool create=false);  ; void clearRowBlock (Index i);  Clear row block method. Clear all col of this line. More...;  ; void clearColBlock (Index j);  Clear col block method. Clear this col in all row of matrix. More...;  ; std::size_t countEmptyBlocks () const;  ; void clearRowColBlock (Index i);  Clear both row i and column i in a square matrix. More...;  ; void clear ();  Completely clear the matrix. More...;  ; bool check_matrix ();  ; std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &is);  ; void add (unsigned int bi, unsigned int bj, const Block &b);  ; void add (unsigned int bi, unsigned int bj, int &rowId, int &colId, const Block &b);  ; void addDBlock (unsigned int bi, unsigned int bj, const DBlock &b);  ; void addDValue (unsigned int bi, unsigned int bj, const Real b);  ; void addDValue (unsigned int bi, unsigned int bj, int &rowId, int &colId, const Real b);  ; void addDiag (unsigned int bi, const Block &b);  ; void addDiag (unsigned int bi, int &rowId, int &colId, const Block &b);  ; void addDiagDBlock (unsigned int bi, const DBlock &b);  ; void addDiagDValue (unsigned int bi, const Real b);  ; void addDiagDValue (unsigned int bi, int &rowId, int &colId, const Real b);  ; void addSym (unsigned int bi, unsigned int bj, const Block &b);  ; void addSym (unsigned int bi, unsigned int bj, int &rowId, int &colId, int &r",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:11698,Usability,clear,clear,11698,"wId, Index &colId, bool create=false);  Write block method when rowId and colId are known, this is an optimized wblock specification. More...;  ; Block * wbloc (Index i, Index j, bool create=false);  ; const Block & getBlock (Index i, Index j) const;  ; const BlockTranspose getSymBlock (Index i, Index j) const;  ; void setBlock (Index i, Index j, const Block &v);  ; void setBlock (Index i, Index j, Index &rowId, Index &colId, const Block &v);  ; void addBlock (Index i, Index j, const Block &v);  ; void addBlock (Index i, Index j, Index &rowId, Index &colId, const Block &v);  ; Block * getWBlock (Index i, Index j, bool create=false);  ; void clearRowBlock (Index i);  Clear row block method. Clear all col of this line. More...;  ; void clearColBlock (Index j);  Clear col block method. Clear this col in all row of matrix. More...;  ; std::size_t countEmptyBlocks () const;  ; void clearRowColBlock (Index i);  Clear both row i and column i in a square matrix. More...;  ; void clear ();  Completely clear the matrix. More...;  ; bool check_matrix ();  ; std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &is);  ; void add (unsigned int bi, unsigned int bj, const Block &b);  ; void add (unsigned int bi, unsigned int bj, int &rowId, int &colId, const Block &b);  ; void addDBlock (unsigned int bi, unsigned int bj, const DBlock &b);  ; void addDValue (unsigned int bi, unsigned int bj, const Real b);  ; void addDValue (unsigned int bi, unsigned int bj, int &rowId, int &colId, const Real b);  ; void addDiag (unsigned int bi, const Block &b);  ; void addDiag (unsigned int bi, int &rowId, int &colId, const Block &b);  ; void addDiagDBlock (unsigned int bi, const DBlock &b);  ; void addDiagDValue (unsigned int bi, const Real b);  ; void addDiagDValue (unsigned int bi, int &rowId, int &colId, const Real b);  ; void addSym (unsigned int bi, unsigned int bj, const Block &b);  ; void addSym (unsigned int bi, unsigned int bj, int &rowId, int &colId, int &r",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:15535,Usability,clear,clear,15535,"ix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void clearRow (Index i);  Reset all the values in row i to 0. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCol (Index j);  Reset the all values in column j to 0. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowCol (Index i);  Reset the value of both row and column i to 0. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:15577,Usability,clear,clearRow,15577,"ix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void clearRow (Index i);  Reset all the values in row i to 0. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCol (Index j);  Reset the all values in column j to 0. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowCol (Index i);  Reset the value of both row and column i to 0. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:15659,Usability,clear,clearRows,15659,"ol, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void clearRow (Index i);  Reset all the values in row i to 0. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCol (Index j);  Reset the all values in column j to 0. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowCol (Index i);  Reset the value of both row and column i to 0. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalg",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:15762,Usability,clear,clearCol,15762," to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void clearRow (Index i);  Reset all the values in row i to 0. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCol (Index j);  Reset the all values in column j to 0. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowCol (Index i);  Reset the value of both row and column i to 0. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:15847,Usability,clear,clearCols,15847,"t2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void clearRow (Index i);  Reset all the values in row i to 0. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCol (Index j);  Reset the all values in column j to 0. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowCol (Index i);  Reset the value of both row and column i to 0. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; virtual void opPMulV (float *result, cons",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:15958,Usability,clear,clearRowCol,15958,"es. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void clearRow (Index i);  Reset all the values in row i to 0. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCol (Index j);  Reset the all values in column j to 0. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowCol (Index i);  Reset the value of both row and column i to 0. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; virtual void opPMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and add the result in vector result. More...;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:16054,Usability,clear,clearRowsCols,16054,"This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void clearRow (Index i);  Reset all the values in row i to 0. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCol (Index j);  Reset the all values in column j to 0. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowCol (Index i);  Reset the value of both row and column i to 0. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; virtual void opPMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and add the result in vector result. More...;  ; virtual void opPMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and add the ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:48116,Usability,clear,clear,48116,"RowBlockConstIterator sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::bRowsEnd ; (; ); const. inlineoverridevirtual . Get the iterator corresponding to the end of the rows of blocks. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ bRowSize(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . virtual Index sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::bRowSize ; (; ); const. inlineoverridevirtual . Returnsthe number of rows of blocks ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ bRowsRange(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . virtual std::pair<RowBlockConstIterator, RowBlockConstIterator> sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::bRowsRange ; (; ); const. inlineoverridevirtual . Get the iterators corresponding to the beginning and end of the given row of blocks. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clear() [1/2]. template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clear ; (; ). inlineoverridevirtual . Completely clear the matrix. ; Need implement clear to override BaseMatrix one. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clear ; (; Index ; i, . Index ; j . ). inlineoverride . clear scalar at element i, j of matrix . ◆ clearCol(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clearCol ; (; Index ; j). inlineoverride . Clear col scalar method. Clear this col in all row of matrix. ; Parameters. j: Col index considering size of matrix in scalar. . WarningIf you want to clear all value of a block, it is better to call cle",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:48282,Usability,clear,clear,48282,"ineoverridevirtual . Get the iterator corresponding to the end of the rows of blocks. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ bRowSize(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . virtual Index sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::bRowSize ; (; ); const. inlineoverridevirtual . Returnsthe number of rows of blocks ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ bRowsRange(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . virtual std::pair<RowBlockConstIterator, RowBlockConstIterator> sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::bRowsRange ; (; ); const. inlineoverridevirtual . Get the iterators corresponding to the beginning and end of the given row of blocks. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clear() [1/2]. template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clear ; (; ). inlineoverridevirtual . Completely clear the matrix. ; Need implement clear to override BaseMatrix one. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clear ; (; Index ; i, . Index ; j . ). inlineoverride . clear scalar at element i, j of matrix . ◆ clearCol(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clearCol ; (; Index ; j). inlineoverride . Clear col scalar method. Clear this col in all row of matrix. ; Parameters. j: Col index considering size of matrix in scalar. . WarningIf you want to clear all value of a block, it is better to call clearColBlock . ◆ clearRow(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::Com",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:48331,Usability,clear,clear,48331,"; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ bRowSize(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . virtual Index sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::bRowSize ; (; ); const. inlineoverridevirtual . Returnsthe number of rows of blocks ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ bRowsRange(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . virtual std::pair<RowBlockConstIterator, RowBlockConstIterator> sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::bRowsRange ; (; ); const. inlineoverridevirtual . Get the iterators corresponding to the beginning and end of the given row of blocks. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clear() [1/2]. template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clear ; (; ). inlineoverridevirtual . Completely clear the matrix. ; Need implement clear to override BaseMatrix one. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clear ; (; Index ; i, . Index ; j . ). inlineoverride . clear scalar at element i, j of matrix . ◆ clearCol(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clearCol ; (; Index ; j). inlineoverride . Clear col scalar method. Clear this col in all row of matrix. ; Parameters. j: Col index considering size of matrix in scalar. . WarningIf you want to clear all value of a block, it is better to call clearColBlock . ◆ clearRow(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clearRow ; (; Index ; i). inlineov",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:48366,Usability,clear,clear,48366,"::BaseMatrix. ◆ bRowSize(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . virtual Index sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::bRowSize ; (; ); const. inlineoverridevirtual . Returnsthe number of rows of blocks ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ bRowsRange(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . virtual std::pair<RowBlockConstIterator, RowBlockConstIterator> sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::bRowsRange ; (; ); const. inlineoverridevirtual . Get the iterators corresponding to the beginning and end of the given row of blocks. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clear() [1/2]. template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clear ; (; ). inlineoverridevirtual . Completely clear the matrix. ; Need implement clear to override BaseMatrix one. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clear ; (; Index ; i, . Index ; j . ). inlineoverride . clear scalar at element i, j of matrix . ◆ clearCol(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clearCol ; (; Index ; j). inlineoverride . Clear col scalar method. Clear this col in all row of matrix. ; Parameters. j: Col index considering size of matrix in scalar. . WarningIf you want to clear all value of a block, it is better to call clearColBlock . ◆ clearRow(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clearRow ; (; Index ; i). inlineoverride . Clear row scalar method. Clear ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:48448,Usability,clear,clear,48448,"hanicalPolicy> . virtual Index sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::bRowSize ; (; ); const. inlineoverridevirtual . Returnsthe number of rows of blocks ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ bRowsRange(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . virtual std::pair<RowBlockConstIterator, RowBlockConstIterator> sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::bRowsRange ; (; ); const. inlineoverridevirtual . Get the iterators corresponding to the beginning and end of the given row of blocks. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clear() [1/2]. template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clear ; (; ). inlineoverridevirtual . Completely clear the matrix. ; Need implement clear to override BaseMatrix one. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clear ; (; Index ; i, . Index ; j . ). inlineoverride . clear scalar at element i, j of matrix . ◆ clearCol(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clearCol ; (; Index ; j). inlineoverride . Clear col scalar method. Clear this col in all row of matrix. ; Parameters. j: Col index considering size of matrix in scalar. . WarningIf you want to clear all value of a block, it is better to call clearColBlock . ◆ clearRow(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clearRow ; (; Index ; i). inlineoverride . Clear row scalar method. Clear all col of this line. ; Parameters. i: Line index considering size of matrix in ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:48614,Usability,clear,clear,48614," inlineoverridevirtual . Returnsthe number of rows of blocks ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ bRowsRange(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . virtual std::pair<RowBlockConstIterator, RowBlockConstIterator> sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::bRowsRange ; (; ); const. inlineoverridevirtual . Get the iterators corresponding to the beginning and end of the given row of blocks. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clear() [1/2]. template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clear ; (; ). inlineoverridevirtual . Completely clear the matrix. ; Need implement clear to override BaseMatrix one. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clear ; (; Index ; i, . Index ; j . ). inlineoverride . clear scalar at element i, j of matrix . ◆ clearCol(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clearCol ; (; Index ; j). inlineoverride . Clear col scalar method. Clear this col in all row of matrix. ; Parameters. j: Col index considering size of matrix in scalar. . WarningIf you want to clear all value of a block, it is better to call clearColBlock . ◆ clearRow(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clearRow ; (; Index ; i). inlineoverride . Clear row scalar method. Clear all col of this line. ; Parameters. i: Line index considering size of matrix in scalar. . WarningIf you want to clear all value of a block, it is better to call clearRowBlock . ◆ clearRowCol(). template<typenam",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:48670,Usability,clear,clear,48670,"seMatrix. ◆ bRowsRange(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . virtual std::pair<RowBlockConstIterator, RowBlockConstIterator> sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::bRowsRange ; (; ); const. inlineoverridevirtual . Get the iterators corresponding to the beginning and end of the given row of blocks. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clear() [1/2]. template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clear ; (; ). inlineoverridevirtual . Completely clear the matrix. ; Need implement clear to override BaseMatrix one. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clear ; (; Index ; i, . Index ; j . ). inlineoverride . clear scalar at element i, j of matrix . ◆ clearCol(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clearCol ; (; Index ; j). inlineoverride . Clear col scalar method. Clear this col in all row of matrix. ; Parameters. j: Col index considering size of matrix in scalar. . WarningIf you want to clear all value of a block, it is better to call clearColBlock . ◆ clearRow(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clearRow ; (; Index ; i). inlineoverride . Clear row scalar method. Clear all col of this line. ; Parameters. i: Line index considering size of matrix in scalar. . WarningIf you want to clear all value of a block, it is better to call clearRowBlock . ◆ clearRowCol(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:48713,Usability,clear,clearCol,48713,"mplate<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . virtual std::pair<RowBlockConstIterator, RowBlockConstIterator> sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::bRowsRange ; (; ); const. inlineoverridevirtual . Get the iterators corresponding to the beginning and end of the given row of blocks. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clear() [1/2]. template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clear ; (; ). inlineoverridevirtual . Completely clear the matrix. ; Need implement clear to override BaseMatrix one. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clear ; (; Index ; i, . Index ; j . ). inlineoverride . clear scalar at element i, j of matrix . ◆ clearCol(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clearCol ; (; Index ; j). inlineoverride . Clear col scalar method. Clear this col in all row of matrix. ; Parameters. j: Col index considering size of matrix in scalar. . WarningIf you want to clear all value of a block, it is better to call clearColBlock . ◆ clearRow(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clearRow ; (; Index ; i). inlineoverride . Clear row scalar method. Clear all col of this line. ; Parameters. i: Line index considering size of matrix in scalar. . WarningIf you want to clear all value of a block, it is better to call clearRowBlock . ◆ clearRowCol(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:48876,Usability,clear,clearCol,48876," sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::bRowsRange ; (; ); const. inlineoverridevirtual . Get the iterators corresponding to the beginning and end of the given row of blocks. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clear() [1/2]. template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clear ; (; ). inlineoverridevirtual . Completely clear the matrix. ; Need implement clear to override BaseMatrix one. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clear ; (; Index ; i, . Index ; j . ). inlineoverride . clear scalar at element i, j of matrix . ◆ clearCol(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clearCol ; (; Index ; j). inlineoverride . Clear col scalar method. Clear this col in all row of matrix. ; Parameters. j: Col index considering size of matrix in scalar. . WarningIf you want to clear all value of a block, it is better to call clearColBlock . ◆ clearRow(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clearRow ; (; Index ; i). inlineoverride . Clear row scalar method. Clear all col of this line. ; Parameters. i: Line index considering size of matrix in scalar. . WarningIf you want to clear all value of a block, it is better to call clearRowBlock . ◆ clearRowCol(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clearRowCol ; (; Index ; i). inlineoverride . Clear both row i and column i in a square matrix. ; Parameters. i: Row and Col ind",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:49070,Usability,clear,clear,49070,"earalgebra::BaseMatrix. ◆ clear() [1/2]. template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clear ; (; ). inlineoverridevirtual . Completely clear the matrix. ; Need implement clear to override BaseMatrix one. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clear ; (; Index ; i, . Index ; j . ). inlineoverride . clear scalar at element i, j of matrix . ◆ clearCol(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clearCol ; (; Index ; j). inlineoverride . Clear col scalar method. Clear this col in all row of matrix. ; Parameters. j: Col index considering size of matrix in scalar. . WarningIf you want to clear all value of a block, it is better to call clearColBlock . ◆ clearRow(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clearRow ; (; Index ; i). inlineoverride . Clear row scalar method. Clear all col of this line. ; Parameters. i: Line index considering size of matrix in scalar. . WarningIf you want to clear all value of a block, it is better to call clearRowBlock . ◆ clearRowCol(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clearRowCol ; (; Index ; i). inlineoverride . Clear both row i and column i in a square matrix. ; Parameters. i: Row and Col index considering size of matrix in scalar. . ◆ colSize(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . Index sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::colSize ; (; ); const. inlineoverrid",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:49119,Usability,clear,clearColBlock,49119,"earalgebra::BaseMatrix. ◆ clear() [1/2]. template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clear ; (; ). inlineoverridevirtual . Completely clear the matrix. ; Need implement clear to override BaseMatrix one. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clear ; (; Index ; i, . Index ; j . ). inlineoverride . clear scalar at element i, j of matrix . ◆ clearCol(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clearCol ; (; Index ; j). inlineoverride . Clear col scalar method. Clear this col in all row of matrix. ; Parameters. j: Col index considering size of matrix in scalar. . WarningIf you want to clear all value of a block, it is better to call clearColBlock . ◆ clearRow(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clearRow ; (; Index ; i). inlineoverride . Clear row scalar method. Clear all col of this line. ; Parameters. i: Line index considering size of matrix in scalar. . WarningIf you want to clear all value of a block, it is better to call clearRowBlock . ◆ clearRowCol(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clearRowCol ; (; Index ; i). inlineoverride . Clear both row i and column i in a square matrix. ; Parameters. i: Row and Col index considering size of matrix in scalar. . ◆ colSize(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . Index sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::colSize ; (; ); const. inlineoverrid",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:49137,Usability,clear,clearRow,49137,"ypename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clear ; (; ). inlineoverridevirtual . Completely clear the matrix. ; Need implement clear to override BaseMatrix one. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clear ; (; Index ; i, . Index ; j . ). inlineoverride . clear scalar at element i, j of matrix . ◆ clearCol(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clearCol ; (; Index ; j). inlineoverride . Clear col scalar method. Clear this col in all row of matrix. ; Parameters. j: Col index considering size of matrix in scalar. . WarningIf you want to clear all value of a block, it is better to call clearColBlock . ◆ clearRow(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clearRow ; (; Index ; i). inlineoverride . Clear row scalar method. Clear all col of this line. ; Parameters. i: Line index considering size of matrix in scalar. . WarningIf you want to clear all value of a block, it is better to call clearRowBlock . ◆ clearRowCol(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clearRowCol ; (; Index ; i). inlineoverride . Clear both row i and column i in a square matrix. ; Parameters. i: Row and Col index considering size of matrix in scalar. . ◆ colSize(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . Index sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::colSize ; (; ); const. inlineoverridevirtual . Number of columns. ; Implements sofa::l",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:49300,Usability,clear,clearRow,49300,"TPolicy >::clear ; (; ). inlineoverridevirtual . Completely clear the matrix. ; Need implement clear to override BaseMatrix one. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clear ; (; Index ; i, . Index ; j . ). inlineoverride . clear scalar at element i, j of matrix . ◆ clearCol(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clearCol ; (; Index ; j). inlineoverride . Clear col scalar method. Clear this col in all row of matrix. ; Parameters. j: Col index considering size of matrix in scalar. . WarningIf you want to clear all value of a block, it is better to call clearColBlock . ◆ clearRow(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clearRow ; (; Index ; i). inlineoverride . Clear row scalar method. Clear all col of this line. ; Parameters. i: Line index considering size of matrix in scalar. . WarningIf you want to clear all value of a block, it is better to call clearRowBlock . ◆ clearRowCol(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clearRowCol ; (; Index ; i). inlineoverride . Clear both row i and column i in a square matrix. ; Parameters. i: Row and Col index considering size of matrix in scalar. . ◆ colSize(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . Index sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::colSize ; (; ); const. inlineoverridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ compress(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalge",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:49486,Usability,clear,clear,49486," = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clear ; (; Index ; i, . Index ; j . ). inlineoverride . clear scalar at element i, j of matrix . ◆ clearCol(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clearCol ; (; Index ; j). inlineoverride . Clear col scalar method. Clear this col in all row of matrix. ; Parameters. j: Col index considering size of matrix in scalar. . WarningIf you want to clear all value of a block, it is better to call clearColBlock . ◆ clearRow(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clearRow ; (; Index ; i). inlineoverride . Clear row scalar method. Clear all col of this line. ; Parameters. i: Line index considering size of matrix in scalar. . WarningIf you want to clear all value of a block, it is better to call clearRowBlock . ◆ clearRowCol(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clearRowCol ; (; Index ; i). inlineoverride . Clear both row i and column i in a square matrix. ; Parameters. i: Row and Col index considering size of matrix in scalar. . ◆ colSize(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . Index sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::colSize ; (; ); const. inlineoverridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ compress(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::compress ; (; ). inlineoverridevirtual . Make the final data setup after adding entries. For most concrete types, this method does nothing. ; Reimplemented from sofa::linearal",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:49535,Usability,clear,clearRowBlock,49535," = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clear ; (; Index ; i, . Index ; j . ). inlineoverride . clear scalar at element i, j of matrix . ◆ clearCol(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clearCol ; (; Index ; j). inlineoverride . Clear col scalar method. Clear this col in all row of matrix. ; Parameters. j: Col index considering size of matrix in scalar. . WarningIf you want to clear all value of a block, it is better to call clearColBlock . ◆ clearRow(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clearRow ; (; Index ; i). inlineoverride . Clear row scalar method. Clear all col of this line. ; Parameters. i: Line index considering size of matrix in scalar. . WarningIf you want to clear all value of a block, it is better to call clearRowBlock . ◆ clearRowCol(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clearRowCol ; (; Index ; i). inlineoverride . Clear both row i and column i in a square matrix. ; Parameters. i: Row and Col index considering size of matrix in scalar. . ◆ colSize(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . Index sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::colSize ; (; ); const. inlineoverridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ compress(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::compress ; (; ). inlineoverridevirtual . Make the final data setup after adding entries. For most concrete types, this method does nothing. ; Reimplemented from sofa::linearal",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:49553,Usability,clear,clearRowCol,49553,"CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clear ; (; Index ; i, . Index ; j . ). inlineoverride . clear scalar at element i, j of matrix . ◆ clearCol(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clearCol ; (; Index ; j). inlineoverride . Clear col scalar method. Clear this col in all row of matrix. ; Parameters. j: Col index considering size of matrix in scalar. . WarningIf you want to clear all value of a block, it is better to call clearColBlock . ◆ clearRow(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clearRow ; (; Index ; i). inlineoverride . Clear row scalar method. Clear all col of this line. ; Parameters. i: Line index considering size of matrix in scalar. . WarningIf you want to clear all value of a block, it is better to call clearRowBlock . ◆ clearRowCol(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clearRowCol ; (; Index ; i). inlineoverride . Clear both row i and column i in a square matrix. ; Parameters. i: Row and Col index considering size of matrix in scalar. . ◆ colSize(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . Index sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::colSize ; (; ); const. inlineoverridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ compress(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::compress ; (; ). inlineoverridevirtual . Make the final data setup after adding entries. For most concrete types, this method does nothing. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ copyLower(). template<typename ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:49719,Usability,clear,clearRowCol,49719,"nt i, j of matrix . ◆ clearCol(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clearCol ; (; Index ; j). inlineoverride . Clear col scalar method. Clear this col in all row of matrix. ; Parameters. j: Col index considering size of matrix in scalar. . WarningIf you want to clear all value of a block, it is better to call clearColBlock . ◆ clearRow(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clearRow ; (; Index ; i). inlineoverride . Clear row scalar method. Clear all col of this line. ; Parameters. i: Line index considering size of matrix in scalar. . WarningIf you want to clear all value of a block, it is better to call clearRowBlock . ◆ clearRowCol(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::clearRowCol ; (; Index ; i). inlineoverride . Clear both row i and column i in a square matrix. ; Parameters. i: Row and Col index considering size of matrix in scalar. . ◆ colSize(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . Index sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::colSize ; (; ); const. inlineoverridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ compress(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::compress ; (; ). inlineoverridevirtual . Make the final data setup after adding entries. For most concrete types, this method does nothing. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ copyLower(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_c_r_s_constraint_policy-members.html:252,Modifiability,inherit,inherited,252,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::CRSConstraintPolicy Member List . This is the complete list of members for sofa::linearalgebra::CRSConstraintPolicy, including all inherited members. AutoCompresssofa::linearalgebra::CRSConstraintPolicystatic; AutoSizesofa::linearalgebra::CRSConstraintPolicystatic; ClearByZerossofa::linearalgebra::CRSConstraintPolicystatic; CompressZerossofa::linearalgebra::CRSConstraintPolicystatic; IsAlwaysSquaresofa::linearalgebra::CRSDefaultPolicystatic; IsAlwaysSymmetricsofa::linearalgebra::CRSDefaultPolicystatic; matrixTypesofa::linearalgebra::CRSConstraintPolicystatic; OrderedInsertionsofa::linearalgebra::CRSConstraintPolicystatic; StoreLowerTriangularBlocksofa::linearalgebra::CRSDefaultPolicystatic. Generated on Mon Nov 11 2024 03:31:10 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_c_r_s_constraint_policy-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_c_r_s_constraint_policy-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_c_r_s_constraint_policy.html:912,Modifiability,inherit,inherited,912,"﻿. SOFA API: sofa::linearalgebra::CRSConstraintPolicy Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; List of all members . sofa::linearalgebra::CRSConstraintPolicy Class Reference . #include <CompressedRowSparseMatrixConstraint.h>. Inheritance diagram for sofa::linearalgebra::CRSConstraintPolicy:. [legend]; Detailed Description; Constraint policy type, showing the types and flags to give to CompressedRowSparseMatrix for its second template type. The default values correspond to the original implementation. . Static Public Attributes; static constexpr bool AutoSize = true;  ; static constexpr bool AutoCompress = true;  ; static constexpr bool CompressZeros = false;  ; static constexpr bool ClearByZeros = false;  ; static constexpr bool OrderedInsertion = false;  ; static constexpr int matrixType = 2;  ;  Static Public Attributes inherited from sofa::linearalgebra::CRSDefaultPolicy; static constexpr bool IsAlwaysSquare = false;  Set to true if this matrix is always square (must be true for symmetric) More...;  ; static constexpr bool IsAlwaysSymmetric = false;  Set to true if this matrix is always symmetric (IsAlwaysSquare should be true) More...;  ; static constexpr bool AutoSize = false;  Set to true if the size of the matrix should be automatically increased when new blocks are added. More...;  ; static constexpr bool AutoCompress = true;  Set to true if the matrix should be automatically compressed (easier to use, but might cause issues in multithreading) More...;  ; static constexpr bool CompressZeros = true;  Set to true if the blocks that are all zeros should be removed from the matrix when compressing (expensive) More...;  ; static constexpr bool ClearByZeros = true;  Set to true if clear methods will put all concerned value to zero instead of clearing vectors (CompressZeros should be true) More...;  ; static constexpr bool OrderedInsertion = false;  Set to true if insertion in matrix are i",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_c_r_s_constraint_policy.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_c_r_s_constraint_policy.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_c_r_s_constraint_policy.html:1790,Usability,clear,clear,1790,"l OrderedInsertion = false;  ; static constexpr int matrixType = 2;  ;  Static Public Attributes inherited from sofa::linearalgebra::CRSDefaultPolicy; static constexpr bool IsAlwaysSquare = false;  Set to true if this matrix is always square (must be true for symmetric) More...;  ; static constexpr bool IsAlwaysSymmetric = false;  Set to true if this matrix is always symmetric (IsAlwaysSquare should be true) More...;  ; static constexpr bool AutoSize = false;  Set to true if the size of the matrix should be automatically increased when new blocks are added. More...;  ; static constexpr bool AutoCompress = true;  Set to true if the matrix should be automatically compressed (easier to use, but might cause issues in multithreading) More...;  ; static constexpr bool CompressZeros = true;  Set to true if the blocks that are all zeros should be removed from the matrix when compressing (expensive) More...;  ; static constexpr bool ClearByZeros = true;  Set to true if clear methods will put all concerned value to zero instead of clearing vectors (CompressZeros should be true) More...;  ; static constexpr bool OrderedInsertion = false;  Set to true if insertion in matrix are in most case at last line index or last col index. More...;  ; static constexpr bool StoreLowerTriangularBlock = true;  Set to false to disable storage of blocks on the lower triangular part (IsAlwaysSymmetric must be true) More...;  ; static constexpr int matrixType = 0;  Do not change this value, has to be overrided for all derivated class. More...;  . Attribute details. ◆ AutoCompress. constexpr bool sofa::linearalgebra::CRSConstraintPolicy::AutoCompress = true. staticconstexpr . ◆ AutoSize. constexpr bool sofa::linearalgebra::CRSConstraintPolicy::AutoSize = true. staticconstexpr . ◆ ClearByZeros. constexpr bool sofa::linearalgebra::CRSConstraintPolicy::ClearByZeros = false. staticconstexpr . ◆ CompressZeros. constexpr bool sofa::linearalgebra::CRSConstraintPolicy::CompressZeros = false. staticconstexp",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_c_r_s_constraint_policy.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_c_r_s_constraint_policy.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_c_r_s_constraint_policy.html:1852,Usability,clear,clearing,1852,"l OrderedInsertion = false;  ; static constexpr int matrixType = 2;  ;  Static Public Attributes inherited from sofa::linearalgebra::CRSDefaultPolicy; static constexpr bool IsAlwaysSquare = false;  Set to true if this matrix is always square (must be true for symmetric) More...;  ; static constexpr bool IsAlwaysSymmetric = false;  Set to true if this matrix is always symmetric (IsAlwaysSquare should be true) More...;  ; static constexpr bool AutoSize = false;  Set to true if the size of the matrix should be automatically increased when new blocks are added. More...;  ; static constexpr bool AutoCompress = true;  Set to true if the matrix should be automatically compressed (easier to use, but might cause issues in multithreading) More...;  ; static constexpr bool CompressZeros = true;  Set to true if the blocks that are all zeros should be removed from the matrix when compressing (expensive) More...;  ; static constexpr bool ClearByZeros = true;  Set to true if clear methods will put all concerned value to zero instead of clearing vectors (CompressZeros should be true) More...;  ; static constexpr bool OrderedInsertion = false;  Set to true if insertion in matrix are in most case at last line index or last col index. More...;  ; static constexpr bool StoreLowerTriangularBlock = true;  Set to false to disable storage of blocks on the lower triangular part (IsAlwaysSymmetric must be true) More...;  ; static constexpr int matrixType = 0;  Do not change this value, has to be overrided for all derivated class. More...;  . Attribute details. ◆ AutoCompress. constexpr bool sofa::linearalgebra::CRSConstraintPolicy::AutoCompress = true. staticconstexpr . ◆ AutoSize. constexpr bool sofa::linearalgebra::CRSConstraintPolicy::AutoSize = true. staticconstexpr . ◆ ClearByZeros. constexpr bool sofa::linearalgebra::CRSConstraintPolicy::ClearByZeros = false. staticconstexpr . ◆ CompressZeros. constexpr bool sofa::linearalgebra::CRSConstraintPolicy::CompressZeros = false. staticconstexp",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_c_r_s_constraint_policy.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_c_r_s_constraint_policy.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_c_r_s_mechanical_policy-members.html:252,Modifiability,inherit,inherited,252,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::CRSMechanicalPolicy Member List . This is the complete list of members for sofa::linearalgebra::CRSMechanicalPolicy, including all inherited members. AutoCompresssofa::linearalgebra::CRSDefaultPolicystatic; AutoSizesofa::linearalgebra::CRSDefaultPolicystatic; ClearByZerossofa::linearalgebra::CRSDefaultPolicystatic; CompressZerossofa::linearalgebra::CRSMechanicalPolicystatic; IsAlwaysSquaresofa::linearalgebra::CRSMechanicalPolicystatic; IsAlwaysSymmetricsofa::linearalgebra::CRSMechanicalPolicystatic; matrixTypesofa::linearalgebra::CRSMechanicalPolicystatic; OrderedInsertionsofa::linearalgebra::CRSMechanicalPolicystatic; StoreLowerTriangularBlocksofa::linearalgebra::CRSMechanicalPolicystatic. Generated on Mon Nov 11 2024 03:31:27 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_c_r_s_mechanical_policy-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_c_r_s_mechanical_policy-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_c_r_s_mechanical_policy.html:883,Modifiability,inherit,inherited,883,"﻿. SOFA API: sofa::linearalgebra::CRSMechanicalPolicy Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; List of all members . sofa::linearalgebra::CRSMechanicalPolicy Class Reference . #include <CompressedRowSparseMatrixMechanical.h>. Inheritance diagram for sofa::linearalgebra::CRSMechanicalPolicy:. [legend]; Detailed Description; Mechanical policy type, showing the types and flags to give to CompressedRowSparseMatrixMechanical for its second template type. . Static Public Attributes; static constexpr bool CompressZeros = false;  ; static constexpr bool IsAlwaysSquare = true;  ; static constexpr bool IsAlwaysSymmetric = true;  ; static constexpr bool OrderedInsertion = false;  ; static constexpr bool StoreLowerTriangularBlock = true;  ; static constexpr int matrixType = 1;  ;  Static Public Attributes inherited from sofa::linearalgebra::CRSDefaultPolicy; static constexpr bool IsAlwaysSquare = false;  Set to true if this matrix is always square (must be true for symmetric) More...;  ; static constexpr bool IsAlwaysSymmetric = false;  Set to true if this matrix is always symmetric (IsAlwaysSquare should be true) More...;  ; static constexpr bool AutoSize = false;  Set to true if the size of the matrix should be automatically increased when new blocks are added. More...;  ; static constexpr bool AutoCompress = true;  Set to true if the matrix should be automatically compressed (easier to use, but might cause issues in multithreading) More...;  ; static constexpr bool CompressZeros = true;  Set to true if the blocks that are all zeros should be removed from the matrix when compressing (expensive) More...;  ; static constexpr bool ClearByZeros = true;  Set to true if clear methods will put all concerned value to zero instead of clearing vectors (CompressZeros should be true) More...;  ; static constexpr bool OrderedInsertion = false;  Set to true if insertion in matrix are in most case at last line inde",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_c_r_s_mechanical_policy.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_c_r_s_mechanical_policy.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_c_r_s_mechanical_policy.html:1761,Usability,clear,clear,1761,"owerTriangularBlock = true;  ; static constexpr int matrixType = 1;  ;  Static Public Attributes inherited from sofa::linearalgebra::CRSDefaultPolicy; static constexpr bool IsAlwaysSquare = false;  Set to true if this matrix is always square (must be true for symmetric) More...;  ; static constexpr bool IsAlwaysSymmetric = false;  Set to true if this matrix is always symmetric (IsAlwaysSquare should be true) More...;  ; static constexpr bool AutoSize = false;  Set to true if the size of the matrix should be automatically increased when new blocks are added. More...;  ; static constexpr bool AutoCompress = true;  Set to true if the matrix should be automatically compressed (easier to use, but might cause issues in multithreading) More...;  ; static constexpr bool CompressZeros = true;  Set to true if the blocks that are all zeros should be removed from the matrix when compressing (expensive) More...;  ; static constexpr bool ClearByZeros = true;  Set to true if clear methods will put all concerned value to zero instead of clearing vectors (CompressZeros should be true) More...;  ; static constexpr bool OrderedInsertion = false;  Set to true if insertion in matrix are in most case at last line index or last col index. More...;  ; static constexpr bool StoreLowerTriangularBlock = true;  Set to false to disable storage of blocks on the lower triangular part (IsAlwaysSymmetric must be true) More...;  ; static constexpr int matrixType = 0;  Do not change this value, has to be overrided for all derivated class. More...;  . Attribute details. ◆ CompressZeros. constexpr bool sofa::linearalgebra::CRSMechanicalPolicy::CompressZeros = false. staticconstexpr . ◆ IsAlwaysSquare. constexpr bool sofa::linearalgebra::CRSMechanicalPolicy::IsAlwaysSquare = true. staticconstexpr . ◆ IsAlwaysSymmetric. constexpr bool sofa::linearalgebra::CRSMechanicalPolicy::IsAlwaysSymmetric = true. staticconstexpr . ◆ matrixType. constexpr int sofa::linearalgebra::CRSMechanicalPolicy::matrixType = 1. s",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_c_r_s_mechanical_policy.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_c_r_s_mechanical_policy.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_c_r_s_mechanical_policy.html:1823,Usability,clear,clearing,1823,"owerTriangularBlock = true;  ; static constexpr int matrixType = 1;  ;  Static Public Attributes inherited from sofa::linearalgebra::CRSDefaultPolicy; static constexpr bool IsAlwaysSquare = false;  Set to true if this matrix is always square (must be true for symmetric) More...;  ; static constexpr bool IsAlwaysSymmetric = false;  Set to true if this matrix is always symmetric (IsAlwaysSquare should be true) More...;  ; static constexpr bool AutoSize = false;  Set to true if the size of the matrix should be automatically increased when new blocks are added. More...;  ; static constexpr bool AutoCompress = true;  Set to true if the matrix should be automatically compressed (easier to use, but might cause issues in multithreading) More...;  ; static constexpr bool CompressZeros = true;  Set to true if the blocks that are all zeros should be removed from the matrix when compressing (expensive) More...;  ; static constexpr bool ClearByZeros = true;  Set to true if clear methods will put all concerned value to zero instead of clearing vectors (CompressZeros should be true) More...;  ; static constexpr bool OrderedInsertion = false;  Set to true if insertion in matrix are in most case at last line index or last col index. More...;  ; static constexpr bool StoreLowerTriangularBlock = true;  Set to false to disable storage of blocks on the lower triangular part (IsAlwaysSymmetric must be true) More...;  ; static constexpr int matrixType = 0;  Do not change this value, has to be overrided for all derivated class. More...;  . Attribute details. ◆ CompressZeros. constexpr bool sofa::linearalgebra::CRSMechanicalPolicy::CompressZeros = false. staticconstexpr . ◆ IsAlwaysSquare. constexpr bool sofa::linearalgebra::CRSMechanicalPolicy::IsAlwaysSquare = true. staticconstexpr . ◆ IsAlwaysSymmetric. constexpr bool sofa::linearalgebra::CRSMechanicalPolicy::IsAlwaysSymmetric = true. staticconstexpr . ◆ matrixType. constexpr int sofa::linearalgebra::CRSMechanicalPolicy::matrixType = 1. s",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_c_r_s_mechanical_policy.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_c_r_s_mechanical_policy.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_default_matrix_invert_op_3_010_00_01_m1_01_4-members.html:274,Modifiability,inherit,inherited,274,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::DefaultMatrixInvertOp< 0, M1 > Member List . This is the complete list of members for sofa::linearalgebra::DefaultMatrixInvertOp< 0, M1 >, including all inherited members. category enum valuesofa::linearalgebra::DefaultMatrixInvertOp< 0, M1 >; final_op typedefsofa::linearalgebra::DefaultMatrixInvertOp< 0, M1 >; matrix1_type typedefsofa::linearalgebra::DefaultMatrixInvertOp< 0, M1 >; matrix_type typedefsofa::linearalgebra::DefaultMatrixInvertOp< 0, M1 >; operator()(const M1 &m1, Dest *d)sofa::linearalgebra::DefaultMatrixInvertOp< 0, M1 >inline. Generated on Mon Nov 11 2024 03:32:16 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_default_matrix_invert_op_3_010_00_01_m1_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_default_matrix_invert_op_3_010_00_01_m1_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_default_matrix_product_op_3_010_00_010_00_01_m1_00_01_m2_01_4-members.html:290,Modifiability,inherit,inherited,290,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::DefaultMatrixProductOp< 0, 0, M1, M2 > Member List . This is the complete list of members for sofa::linearalgebra::DefaultMatrixProductOp< 0, 0, M1, M2 >, including all inherited members. category enum valuesofa::linearalgebra::DefaultMatrixProductOp< 0, 0, M1, M2 >; final_op typedefsofa::linearalgebra::DefaultMatrixProductOp< 0, 0, M1, M2 >; matrix1_type typedefsofa::linearalgebra::DefaultMatrixProductOp< 0, 0, M1, M2 >; matrix2_type typedefsofa::linearalgebra::DefaultMatrixProductOp< 0, 0, M1, M2 >; matrix_type typedefsofa::linearalgebra::DefaultMatrixProductOp< 0, 0, M1, M2 >; operator()(const M1 &m1, const M2 &m2, Dest *d)sofa::linearalgebra::DefaultMatrixProductOp< 0, 0, M1, M2 >inline. Generated on Mon Nov 11 2024 03:32:16 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_default_matrix_product_op_3_010_00_010_00_01_m1_00_01_m2_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_default_matrix_product_op_3_010_00_010_00_01_m1_00_01_m2_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_default_matrix_product_op_3_010_00_011_00_01_m1_00_01_m2_01_4-members.html:290,Modifiability,inherit,inherited,290,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::DefaultMatrixProductOp< 0, 1, M1, M2 > Member List . This is the complete list of members for sofa::linearalgebra::DefaultMatrixProductOp< 0, 1, M1, M2 >, including all inherited members. category enum valuesofa::linearalgebra::DefaultMatrixProductOp< 0, 1, M1, M2 >; final_op typedefsofa::linearalgebra::DefaultMatrixProductOp< 0, 1, M1, M2 >; matrix1_type typedefsofa::linearalgebra::DefaultMatrixProductOp< 0, 1, M1, M2 >; matrix_type typedefsofa::linearalgebra::DefaultMatrixProductOp< 0, 1, M1, M2 >; operator()(const M1 &m1, const M2 &m2, Dest *d)sofa::linearalgebra::DefaultMatrixProductOp< 0, 1, M1, M2 >inline. Generated on Mon Nov 11 2024 03:32:16 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_default_matrix_product_op_3_010_00_011_00_01_m1_00_01_m2_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_default_matrix_product_op_3_010_00_011_00_01_m1_00_01_m2_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_default_matrix_product_op_3_011_00_010_00_01_m1_00_01_m2_01_4-members.html:290,Modifiability,inherit,inherited,290,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::DefaultMatrixProductOp< 1, 0, M1, M2 > Member List . This is the complete list of members for sofa::linearalgebra::DefaultMatrixProductOp< 1, 0, M1, M2 >, including all inherited members. category enum valuesofa::linearalgebra::DefaultMatrixProductOp< 1, 0, M1, M2 >; final_op typedefsofa::linearalgebra::DefaultMatrixProductOp< 1, 0, M1, M2 >; matrix2_type typedefsofa::linearalgebra::DefaultMatrixProductOp< 1, 0, M1, M2 >; matrix_type typedefsofa::linearalgebra::DefaultMatrixProductOp< 1, 0, M1, M2 >; operator()(const M1 &m1, const M2 &m2, Dest *d)sofa::linearalgebra::DefaultMatrixProductOp< 1, 0, M1, M2 >inline. Generated on Mon Nov 11 2024 03:32:16 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_default_matrix_product_op_3_011_00_010_00_01_m1_00_01_m2_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_default_matrix_product_op_3_011_00_010_00_01_m1_00_01_m2_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix-members.html:252,Modifiability,inherit,inherited,252,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::DiagonalMatrix< T > Member List . This is the complete list of members for sofa::linearalgebra::DiagonalMatrix< T >, including all inherited members. add(Index i, Index j, double v) overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; add(Index i, double v)sofa::linearalgebra::DiagonalMatrix< T >inline; add(Index row, Index col, double v)=0sofa::linearalgebra::DiagonalMatrix< T >; add(Index row, Index col, const type::Mat3x3d &_M)sofa::linearalgebra::DiagonalMatrix< T >; add(Index row, Index col, const type::Mat3x3f &_M)sofa::linearalgebra::DiagonalMatrix< T >; add(Index row, Index col, const type::Mat2x2d &_M)sofa::linearalgebra::DiagonalMatrix< T >; add(Index row, Index col, const type::Mat2x2f &_M)sofa::linearalgebra::DiagonalMatrix< T >; add(Index row, Index col, const type::Mat6x6d &_M)sofa::linearalgebra::DiagonalMatrix< T >; add(Index row, Index col, const type::Mat6x6f &_M)sofa::linearalgebra::DiagonalMatrix< T >; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat3x3d &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat3x3f &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat2x2d &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat2x2f &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat6x6d &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat6x6f &_M)sofa::linearalgebra::BaseMatrixvirtual; addEqual(const M &m)sofa::linearalgebra::DiagonalMatrix< T >inlineprotected; addTo(Dest *dest) constsofa::linearalgebra::DiagonalMatrix< T >inline; bAccessorAdd(InternalBlockAccessor *b, Index i, ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix-members.html:5856,Usability,clear,clear,5856,"; blocAdd(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; blocCreate(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocElements(Index i, Index j, T *buffer) constsofa::linearalgebra::BaseMatrixinline; blocGet(Index i, Index j) constsofa::linearalgebra::BaseMatrixinlinevirtual; blocGetW(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; category enum valuesofa::linearalgebra::DiagonalMatrix< T >; clear(Index i, Index j) overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; clear() overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; clear(Index i)sofa::linearalgebra::DiagonalMatrix< T >inline; clearCol(Index j) overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; clearRowCol(Index i) overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlinepro",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix-members.html:5943,Usability,clear,clear,5943,"Create(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocElements(Index i, Index j, T *buffer) constsofa::linearalgebra::BaseMatrixinline; blocGet(Index i, Index j) constsofa::linearalgebra::BaseMatrixinlinevirtual; blocGetW(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; category enum valuesofa::linearalgebra::DiagonalMatrix< T >; clear(Index i, Index j) overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; clear() overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; clear(Index i)sofa::linearalgebra::DiagonalMatrix< T >inline; clearCol(Index j) overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; clearRowCol(Index i) overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebr",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix-members.html:6014,Usability,clear,clear,6014,"locElements(Index i, Index j, T *buffer) constsofa::linearalgebra::BaseMatrixinline; blocGet(Index i, Index j) constsofa::linearalgebra::BaseMatrixinlinevirtual; blocGetW(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; category enum valuesofa::linearalgebra::DiagonalMatrix< T >; clear(Index i, Index j) overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; clear() overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; clear(Index i)sofa::linearalgebra::DiagonalMatrix< T >inline; clearCol(Index j) overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; clearRowCol(Index i) overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix-members.html:6076,Usability,clear,clearCol,6076,"ra::BaseMatrixinline; blocGet(Index i, Index j) constsofa::linearalgebra::BaseMatrixinlinevirtual; blocGetW(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; category enum valuesofa::linearalgebra::DiagonalMatrix< T >; clear(Index i, Index j) overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; clear() overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; clear(Index i)sofa::linearalgebra::DiagonalMatrix< T >inline; clearCol(Index j) overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; clearRowCol(Index i) overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseM",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix-members.html:6157,Usability,clear,clearCols,6157,"ixinlinevirtual; blocGetW(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; category enum valuesofa::linearalgebra::DiagonalMatrix< T >; clear(Index i, Index j) overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; clear() overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; clear(Index i)sofa::linearalgebra::DiagonalMatrix< T >inline; clearCol(Index j) overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; clearRowCol(Index i) overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index intern",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix-members.html:6236,Usability,clear,clearRow,6236,"nevirtual; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; category enum valuesofa::linearalgebra::DiagonalMatrix< T >; clear(Index i, Index j) overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; clear() overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; clear(Index i)sofa::linearalgebra::DiagonalMatrix< T >inline; clearCol(Index j) overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; clearRowCol(Index i) overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockCons",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix-members.html:6317,Usability,clear,clearRowCol,6317,"xinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; category enum valuesofa::linearalgebra::DiagonalMatrix< T >; clear(Index i, Index j) overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; clear() overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; clear(Index i)sofa::linearalgebra::DiagonalMatrix< T >inline; clearCol(Index j) overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; clearRowCol(Index i) overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, void *internalPtr) constsofa::linearalgebra::BaseMatrixinline",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix-members.html:6401,Usability,clear,clearRows,6401,"wEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; category enum valuesofa::linearalgebra::DiagonalMatrix< T >; clear(Index i, Index j) overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; clear() overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; clear(Index i)sofa::linearalgebra::DiagonalMatrix< T >inline; clearCol(Index j) overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; clearRowCol(Index i) overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, void *internalPtr) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, Index internalData) constsofa::li",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix-members.html:6480,Usability,clear,clearRowsCols,6480," ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; category enum valuesofa::linearalgebra::DiagonalMatrix< T >; clear(Index i, Index j) overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; clear() overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; clear(Index i)sofa::linearalgebra::DiagonalMatrix< T >inline; clearCol(Index j) overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; clearRowCol(Index i) overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::DiagonalMatrix< T >inlinevirtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, void *internalPtr) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; createRowBlockConstIterator(void *interna",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html:4593,Modifiability,inherit,inherited,4593,"btain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain bet",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html:11209,Modifiability,inherit,inherited,11209,,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html:15751,Modifiability,inherit,inherited,15751,"virtual void itIncRowBlock (InternalRowBlockIterator *it) const;  ; virtual void itDecRowBlock (InternalRowBlockIterator *it) const;  ; virtual bool itEqRowBlock (const InternalRowBlockIterator *it, const InternalRowBlockIterator *it2) const;  ; virtual bool itLessRowBlock (const InternalRowBlockIterator *it, const InternalRowBlockIterator *it2) const;  ; RowBlockConstIterator createRowBlockConstIterator (void *internalPtr) const;  ; RowBlockConstIterator createRowBlockConstIterator (Index internalData0, Index internalData1) const;  . Friends; std::ostream & operator<< (std::ostream &out, const DiagonalMatrix< T > &v);  . Additional Inherited Members;  Static Protected Member Functions inherited from sofa::linearalgebra::BaseMatrix; static InternalBlockAccessor * getInternal (BlockConstAccessor *b);  ; static const InternalBlockAccessor * getInternal (const BlockConstAccessor *b);  ; static InternalBlockAccessor * getInternal (BlockAccessor *b);  ; static const InternalBlockAccessor * getInternal (const BlockAccessor *b);  ; static InternalColBlockIterator * getInternal (ColBlockConstIterator *b);  ; static const InternalColBlockIterator * getInternal (const ColBlockConstIterator *b);  ; static InternalRowBlockIterator * getInternal (RowBlockConstIterator *b);  ; static const InternalRowBlockIterator * getInternal (const RowBlockConstIterator *b);  . Attribute details. ◆ data. template<typename T > . FullVector<T> sofa::linearalgebra::DiagonalMatrix< T >::data. protected . Constructor details. ◆ DiagonalMatrix() [1/3]. template<typename T > . sofa::linearalgebra::DiagonalMatrix< T >::DiagonalMatrix ; (; ). inline . ◆ DiagonalMatrix() [2/3]. template<typename T > . sofa::linearalgebra::DiagonalMatrix< T >::DiagonalMatrix ; (; Index ; nbRow, . Index ;  . ). inline . ◆ DiagonalMatrix() [3/3]. template<typename T > . sofa::linearalgebra::DiagonalMatrix< T >::DiagonalMatrix ; (; Real * ; p, . Index ; , . Index ;  . ). inline . ◆ ~DiagonalMatrix(). template<typename T > . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html:3672,Performance,perform,performances,3672,"nalMatrix< Real2 > &m);  ; template<class Real2 > ; void operator+= (const DiagonalMatrix< Real2 > &m);  ; template<class Real2 > ; void operator-= (const DiagonalMatrix< Real2 > &m);  ; template<class Expr2 > ; void operator= (const MatrixExpr< Expr2 > &m);  ; template<class Expr2 > ; void operator+= (const MatrixExpr< Expr2 > &m);  ; template<class Expr2 > ; void operator-= (const MatrixExpr< Expr2 > &m);  ; MatrixExpr< MatrixTranspose< DiagonalMatrix< T > > > t () const;  ; MatrixExpr< MatrixInverse< DiagonalMatrix< T > > > i () const;  ; MatrixExpr< MatrixNegative< DiagonalMatrix< T > > > operator- () const;  ; MatrixExpr< MatrixScale< DiagonalMatrix< T >, double > > operator* (const double &r) const;  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ()",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html:3846,Performance,perform,performances,3846,"l2 > &m);  ; template<class Expr2 > ; void operator= (const MatrixExpr< Expr2 > &m);  ; template<class Expr2 > ; void operator+= (const MatrixExpr< Expr2 > &m);  ; template<class Expr2 > ; void operator-= (const MatrixExpr< Expr2 > &m);  ; MatrixExpr< MatrixTranspose< DiagonalMatrix< T > > > t () const;  ; MatrixExpr< MatrixInverse< DiagonalMatrix< T > > > i () const;  ; MatrixExpr< MatrixNegative< DiagonalMatrix< T > > > operator- () const;  ; MatrixExpr< MatrixScale< DiagonalMatrix< T >, double > > operator* (const double &r) const;  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API)",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html:4020,Performance,perform,performances,4020,"lass Expr2 > ; void operator-= (const MatrixExpr< Expr2 > &m);  ; MatrixExpr< MatrixTranspose< DiagonalMatrix< T > > > t () const;  ; MatrixExpr< MatrixInverse< DiagonalMatrix< T > > > i () const;  ; MatrixExpr< MatrixNegative< DiagonalMatrix< T > > > operator- () const;  ; MatrixExpr< MatrixScale< DiagonalMatrix< T >, double > > operator* (const double &r) const;  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html:4194,Performance,perform,performances,4194,"x< T > > > i () const;  ; MatrixExpr< MatrixNegative< DiagonalMatrix< T > > > operator- () const;  ; MatrixExpr< MatrixScale< DiagonalMatrix< T >, double > > operator* (const double &r) const;  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html:4368,Performance,perform,performances,4368," double &r) const;  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html:4542,Performance,perform,performances,4542,"virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html:5142,Performance,perform,performances,5142,"es from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html:5316,Performance,perform,performances,5316,"es from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index i",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html:5490,Performance,perform,performances,5490,"es from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *resul",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html:5664,Performance,perform,performances,5664,"Matrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const floa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html:5838,Performance,perform,performances,5838,"ible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply th",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html:6012,Performance,perform,performances,6012,"virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) cons",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html:17751,Performance,perform,performances,17751,"<typename T > . sofa::linearalgebra::DiagonalMatrix< T >::DiagonalMatrix ; (; Index ; nbRow, . Index ;  . ). inline . ◆ DiagonalMatrix() [3/3]. template<typename T > . sofa::linearalgebra::DiagonalMatrix< T >::DiagonalMatrix ; (; Real * ; p, . Index ; , . Index ;  . ). inline . ◆ ~DiagonalMatrix(). template<typename T > . sofa::linearalgebra::DiagonalMatrix< T >::~DiagonalMatrix ; (; ). inlineoverride . Function details. ◆ add() [1/9]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::add ; (; Index ; i, . double ; v . ). inline . ◆ add() [2/9]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::add ; (; Index ; row, . Index ; col, . double ; v . ). inlineoverridevirtual . Add v to the existing value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ add() [3/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [4/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [5/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [6/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [7/9]. template<typename T > . void so",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html:17847,Performance,perform,performances,17847,"ndex ; nbRow, . Index ;  . ). inline . ◆ DiagonalMatrix() [3/3]. template<typename T > . sofa::linearalgebra::DiagonalMatrix< T >::DiagonalMatrix ; (; Real * ; p, . Index ; , . Index ;  . ). inline . ◆ ~DiagonalMatrix(). template<typename T > . sofa::linearalgebra::DiagonalMatrix< T >::~DiagonalMatrix ; (; ). inlineoverride . Function details. ◆ add() [1/9]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::add ; (; Index ; i, . double ; v . ). inline . ◆ add() [2/9]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::add ; (; Index ; row, . Index ; col, . double ; v . ). inlineoverridevirtual . Add v to the existing value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ add() [3/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [4/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [5/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [6/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [7/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This fun",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html:18026,Performance,perform,performances,18026,"e . ◆ ~DiagonalMatrix(). template<typename T > . sofa::linearalgebra::DiagonalMatrix< T >::~DiagonalMatrix ; (; ). inlineoverride . Function details. ◆ add() [1/9]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::add ; (; Index ; i, . double ; v . ). inline . ◆ add() [2/9]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::add ; (; Index ; row, . Index ; col, . double ; v . ). inlineoverridevirtual . Add v to the existing value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ add() [3/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [4/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [5/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [6/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [7/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [8/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html:18122,Performance,perform,performances,18122,"atrix< T >::~DiagonalMatrix ; (; ). inlineoverride . Function details. ◆ add() [1/9]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::add ; (; Index ; i, . double ; v . ). inline . ◆ add() [2/9]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::add ; (; Index ; row, . Index ; col, . double ; v . ). inlineoverridevirtual . Add v to the existing value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ add() [3/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [4/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [5/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [6/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [7/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [8/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [9/9]. template<typename T > . vi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html:18301,Performance,perform,performances,18301,"nline . ◆ add() [2/9]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::add ; (; Index ; row, . Index ; col, . double ; v . ). inlineoverridevirtual . Add v to the existing value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ add() [3/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [4/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [5/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [6/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [7/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [8/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [9/9]. template<typename T > . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ addEqual(). template<typename T > . template<class M > . v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html:18397,Performance,perform,performances,18397,"alMatrix< T >::add ; (; Index ; row, . Index ; col, . double ; v . ). inlineoverridevirtual . Add v to the existing value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ add() [3/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [4/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [5/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [6/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [7/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [8/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [9/9]. template<typename T > . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ addEqual(). template<typename T > . template<class M > . void sofa::linearalgebra::DiagonalMatrix< T >::addEqual ; (; const M & ; m). in",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html:18576,Performance,perform,performances,18576,"a::linearalgebra::BaseMatrix. ◆ add() [3/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [4/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [5/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [6/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [7/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [8/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [9/9]. template<typename T > . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ addEqual(). template<typename T > . template<class M > . void sofa::linearalgebra::DiagonalMatrix< T >::addEqual ; (; const M & ; m). inlineprotected . this += m . ◆ addTo(). template<typename T > . template<class Dest > . void sofa::linearalgebra::DiagonalMatrix< T >::addTo ; (; Dest * ; dest); const. inline . ◆ clear() [1/3]. tem",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html:18672,Performance,perform,performances,18672,":linearalgebra::BaseMatrix::add. Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [4/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [5/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [6/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [7/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [8/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [9/9]. template<typename T > . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ addEqual(). template<typename T > . template<class M > . void sofa::linearalgebra::DiagonalMatrix< T >::addEqual ; (; const M & ; m). inlineprotected . this += m . ◆ addTo(). template<typename T > . template<class Dest > . void sofa::linearalgebra::DiagonalMatrix< T >::addTo ; (; Dest * ; dest); const. inline . ◆ clear() [1/3]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clear ; (;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html:18851,Performance,perform,performances,18851,"obtain better performances. . ◆ add() [4/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [5/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [6/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [7/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [8/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [9/9]. template<typename T > . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ addEqual(). template<typename T > . template<class M > . void sofa::linearalgebra::DiagonalMatrix< T >::addEqual ; (; const M & ; m). inlineprotected . this += m . ◆ addTo(). template<typename T > . template<class Dest > . void sofa::linearalgebra::DiagonalMatrix< T >::addTo ; (; Dest * ; dest); const. inline . ◆ clear() [1/3]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clear ; (; ). inlineoverridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/3]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clear ; (; I",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html:19030,Performance,perform,performances,19030,"obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [5/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [6/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [7/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [8/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [9/9]. template<typename T > . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ addEqual(). template<typename T > . template<class M > . void sofa::linearalgebra::DiagonalMatrix< T >::addEqual ; (; const M & ; m). inlineprotected . this += m . ◆ addTo(). template<typename T > . template<class Dest > . void sofa::linearalgebra::DiagonalMatrix< T >::addTo ; (; Dest * ; dest); const. inline . ◆ clear() [1/3]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clear ; (; ). inlineoverridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/3]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clear ; (; Index ; i). inline . ◆ clear() [3/3]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clear ; (; Index ; i, . Index ; j . ). inlineoverridevirtual . Reimplem",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html:9399,Security,access,access,9399,"st;  Multiply the transposed matrix by float vector v and add the result in vector result. More...;  ; virtual void opPMulTV (double *result, const double *v) const;  Multiply the transposed matrix by double vector v and add the result in vector result. More...;  ; virtual void opMulTM (BaseMatrix *result, BaseMatrix *m) const;  Multiply the transposed matrix by matrix m and store the result in matrix result. More...;  ; virtual void opAddM (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the matrix to the m matrix and strore the result in m. More...;  ; virtual void opAddMT (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the transposed matrix to the m matrix and strore the result in m. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual MatrixCategory getCategory () const;  ; virtual Index getBlockRows () const;  ; virtual Index getBlockCols () const;  ; virtual Index bRowSize () const;  ; virtual Index bColSize () const;  ; virtual Index getBandWidth () const;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  ; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the give",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html:9492,Security,access,access,9492,"const;  Multiply the transposed matrix by matrix m and store the result in matrix result. More...;  ; virtual void opAddM (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the matrix to the m matrix and strore the result in m. More...;  ; virtual void opAddMT (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the transposed matrix to the m matrix and strore the result in m. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual MatrixCategory getCategory () const;  ; virtual Index getBlockRows () const;  ; virtual Index getBlockCols () const;  ; virtual Index bRowSize () const;  ; virtual Index bColSize () const;  ; virtual Index getBandWidth () const;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  ; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the given row of blocks. More...;  ; virtual ColBlockConstIterator bRowEnd (Index ib) const;  Get the iterator corresponding to the end of the given row of blocks. More...;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > bRowRange (Index ib) const;  Get the iterators corresponding to the beginning and end of ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html:9587,Security,access,access,9587,"tual void opAddM (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the matrix to the m matrix and strore the result in m. More...;  ; virtual void opAddMT (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the transposed matrix to the m matrix and strore the result in m. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual MatrixCategory getCategory () const;  ; virtual Index getBlockRows () const;  ; virtual Index getBlockCols () const;  ; virtual Index bRowSize () const;  ; virtual Index bColSize () const;  ; virtual Index getBandWidth () const;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  ; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the given row of blocks. More...;  ; virtual ColBlockConstIterator bRowEnd (Index ib) const;  Get the iterator corresponding to the end of the given row of blocks. More...;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > bRowRange (Index ib) const;  Get the iterators corresponding to the beginning and end of the given row of blocks. More...;  ; virtual RowBlockConstIterator bRowsBegin () const;  Get the iterator",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html:1635,Usability,clear,clear,1635," . Public Member Functions;  DiagonalMatrix ();  ;  DiagonalMatrix (Index nbRow, Index);  ;  DiagonalMatrix (Real *p, Index, Index);  ;  ~DiagonalMatrix () override;  ; Real * ptr ();  ; const Real * ptr () const;  ; Real * operator[] (Index i);  ; const Real * operator[] (Index i) const;  ; void resize (Index nbRow, Index) override;  Resize the matrix and reset all values to 0. More...;  ; Index rowSize (void) const override;  Number of rows. More...;  ; Index colSize (void) const override;  Number of columns. More...;  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; void resize (Index nbRow);  ; Index size () const;  ; void swap (DiagonalMatrix< T > &v);  ; SReal element (Index i) const;  ; void set (Index i, double v);  ; void add (Index i, double v);  ; void clear (Index i);  ; template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ; void invert ();  ; template<class Real2 > ; void mult (FullVector< Real2 > &z, const FullVector< Real2 > &v) const;  ; template<class M2 > ; bool hasRef (const M2 *m) const;  ; std::string expr () const;  ; bool valid () const;  ; template<class Dest > ; void addTo (Dest *dest) const;  ; template<class Real2 > ; void operator= (const DiagonalMatrix< Real2 > &m);  ; tem",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html:1678,Usability,clear,clearRow,1678," . Public Member Functions;  DiagonalMatrix ();  ;  DiagonalMatrix (Index nbRow, Index);  ;  DiagonalMatrix (Real *p, Index, Index);  ;  ~DiagonalMatrix () override;  ; Real * ptr ();  ; const Real * ptr () const;  ; Real * operator[] (Index i);  ; const Real * operator[] (Index i) const;  ; void resize (Index nbRow, Index) override;  Resize the matrix and reset all values to 0. More...;  ; Index rowSize (void) const override;  Number of rows. More...;  ; Index colSize (void) const override;  Number of columns. More...;  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; void resize (Index nbRow);  ; Index size () const;  ; void swap (DiagonalMatrix< T > &v);  ; SReal element (Index i) const;  ; void set (Index i, double v);  ; void add (Index i, double v);  ; void clear (Index i);  ; template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ; void invert ();  ; template<class Real2 > ; void mult (FullVector< Real2 > &z, const FullVector< Real2 > &v) const;  ; template<class M2 > ; bool hasRef (const M2 *m) const;  ; std::string expr () const;  ; bool valid () const;  ; template<class Dest > ; void addTo (Dest *dest) const;  ; template<class Real2 > ; void operator= (const DiagonalMatrix< Real2 > &m);  ; tem",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html:1761,Usability,clear,clearCol,1761,"x (Real *p, Index, Index);  ;  ~DiagonalMatrix () override;  ; Real * ptr ();  ; const Real * ptr () const;  ; Real * operator[] (Index i);  ; const Real * operator[] (Index i) const;  ; void resize (Index nbRow, Index) override;  Resize the matrix and reset all values to 0. More...;  ; Index rowSize (void) const override;  Number of rows. More...;  ; Index colSize (void) const override;  Number of columns. More...;  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; void resize (Index nbRow);  ; Index size () const;  ; void swap (DiagonalMatrix< T > &v);  ; SReal element (Index i) const;  ; void set (Index i, double v);  ; void add (Index i, double v);  ; void clear (Index i);  ; template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ; void invert ();  ; template<class Real2 > ; void mult (FullVector< Real2 > &z, const FullVector< Real2 > &v) const;  ; template<class M2 > ; bool hasRef (const M2 *m) const;  ; std::string expr () const;  ; bool valid () const;  ; template<class Dest > ; void addTo (Dest *dest) const;  ; template<class Real2 > ; void operator= (const DiagonalMatrix< Real2 > &m);  ; template<class Real2 > ; void operator+= (const DiagonalMatrix< Real2 > &m);  ; template<class Real2 > ; void",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html:1847,Usability,clear,clearRowCol,1847," * ptr () const;  ; Real * operator[] (Index i);  ; const Real * operator[] (Index i) const;  ; void resize (Index nbRow, Index) override;  Resize the matrix and reset all values to 0. More...;  ; Index rowSize (void) const override;  Number of rows. More...;  ; Index colSize (void) const override;  Number of columns. More...;  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; void resize (Index nbRow);  ; Index size () const;  ; void swap (DiagonalMatrix< T > &v);  ; SReal element (Index i) const;  ; void set (Index i, double v);  ; void add (Index i, double v);  ; void clear (Index i);  ; template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ; void invert ();  ; template<class Real2 > ; void mult (FullVector< Real2 > &z, const FullVector< Real2 > &v) const;  ; template<class M2 > ; bool hasRef (const M2 *m) const;  ; std::string expr () const;  ; bool valid () const;  ; template<class Dest > ; void addTo (Dest *dest) const;  ; template<class Real2 > ; void operator= (const DiagonalMatrix< Real2 > &m);  ; template<class Real2 > ; void operator+= (const DiagonalMatrix< Real2 > &m);  ; template<class Real2 > ; void operator-= (const DiagonalMatrix< Real2 > &m);  ; template<class Expr2 > ; void operator= (",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html:1944,Usability,clear,clear,1944,"dex i) const;  ; void resize (Index nbRow, Index) override;  Resize the matrix and reset all values to 0. More...;  ; Index rowSize (void) const override;  Number of rows. More...;  ; Index colSize (void) const override;  Number of columns. More...;  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; void resize (Index nbRow);  ; Index size () const;  ; void swap (DiagonalMatrix< T > &v);  ; SReal element (Index i) const;  ; void set (Index i, double v);  ; void add (Index i, double v);  ; void clear (Index i);  ; template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ; void invert ();  ; template<class Real2 > ; void mult (FullVector< Real2 > &z, const FullVector< Real2 > &v) const;  ; template<class M2 > ; bool hasRef (const M2 *m) const;  ; std::string expr () const;  ; bool valid () const;  ; template<class Dest > ; void addTo (Dest *dest) const;  ; template<class Real2 > ; void operator= (const DiagonalMatrix< Real2 > &m);  ; template<class Real2 > ; void operator+= (const DiagonalMatrix< Real2 > &m);  ; template<class Real2 > ; void operator-= (const DiagonalMatrix< Real2 > &m);  ; template<class Expr2 > ; void operator= (const MatrixExpr< Expr2 > &m);  ; template<class Expr2 > ; void operator+= (co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html:2197,Usability,clear,clear,2197," void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; void resize (Index nbRow);  ; Index size () const;  ; void swap (DiagonalMatrix< T > &v);  ; SReal element (Index i) const;  ; void set (Index i, double v);  ; void add (Index i, double v);  ; void clear (Index i);  ; template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ; void invert ();  ; template<class Real2 > ; void mult (FullVector< Real2 > &z, const FullVector< Real2 > &v) const;  ; template<class M2 > ; bool hasRef (const M2 *m) const;  ; std::string expr () const;  ; bool valid () const;  ; template<class Dest > ; void addTo (Dest *dest) const;  ; template<class Real2 > ; void operator= (const DiagonalMatrix< Real2 > &m);  ; template<class Real2 > ; void operator+= (const DiagonalMatrix< Real2 > &m);  ; template<class Real2 > ; void operator-= (const DiagonalMatrix< Real2 > &m);  ; template<class Expr2 > ; void operator= (const MatrixExpr< Expr2 > &m);  ; template<class Expr2 > ; void operator+= (const MatrixExpr< Expr2 > &m);  ; template<class Expr2 > ; void operator-= (const MatrixExpr< Expr2 > &m);  ; MatrixExpr< MatrixTranspose< DiagonalMatrix< T > > > t () const;  ; MatrixExpr< MatrixInverse< DiagonalMatrix< T > > > i () const;  ; MatrixExpr< MatrixNegative< DiagonalMatrix< T > > > operator- () const;  ; MatrixExpr< MatrixScale< DiagonalMatrix< T >, double > > operator* (const double &r) const;  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html:6051,Usability,clear,clearRows,6051,"a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html:6154,Usability,clear,clearCols,6154,"ndex row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; virtual void opPMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and add t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html:6265,Usability,clear,clearRowsCols,6265,"ter performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; virtual void opPMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and add the result in vector result. More...;  ; virtual void opPMulV (double *result, const double *v) const;  Multiply the matrix by",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html:19541,Usability,clear,clear,19541," be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [7/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [8/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [9/9]. template<typename T > . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ addEqual(). template<typename T > . template<class M > . void sofa::linearalgebra::DiagonalMatrix< T >::addEqual ; (; const M & ; m). inlineprotected . this += m . ◆ addTo(). template<typename T > . template<class Dest > . void sofa::linearalgebra::DiagonalMatrix< T >::addTo ; (; Dest * ; dest); const. inline . ◆ clear() [1/3]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clear ; (; ). inlineoverridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/3]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clear ; (; Index ; i). inline . ◆ clear() [3/3]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clear ; (; Index ; i, . Index ; j . ). inlineoverridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clearCol ; (; Index ; j). inlineoverridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clearRow ; (; Index ; i). inlineoverridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<typename T ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html:19627,Usability,clear,clear,19627,"m a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [7/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [8/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [9/9]. template<typename T > . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ addEqual(). template<typename T > . template<class M > . void sofa::linearalgebra::DiagonalMatrix< T >::addEqual ; (; const M & ; m). inlineprotected . this += m . ◆ addTo(). template<typename T > . template<class Dest > . void sofa::linearalgebra::DiagonalMatrix< T >::addTo ; (; Dest * ; dest); const. inline . ◆ clear() [1/3]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clear ; (; ). inlineoverridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/3]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clear ; (; Index ; i). inline . ◆ clear() [3/3]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clear ; (; Index ; i, . Index ; j . ). inlineoverridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clearCol ; (; Index ; j). inlineoverridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clearRow ; (; Index ; i). inlineoverridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clearRowCol ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html:19736,Usability,clear,clear,19736,"earalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [8/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [9/9]. template<typename T > . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ addEqual(). template<typename T > . template<class M > . void sofa::linearalgebra::DiagonalMatrix< T >::addEqual ; (; const M & ; m). inlineprotected . this += m . ◆ addTo(). template<typename T > . template<class Dest > . void sofa::linearalgebra::DiagonalMatrix< T >::addTo ; (; Dest * ; dest); const. inline . ◆ clear() [1/3]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clear ; (; ). inlineoverridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/3]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clear ; (; Index ; i). inline . ◆ clear() [3/3]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clear ; (; Index ; i, . Index ; j . ). inlineoverridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clearCol ; (; Index ; j). inlineoverridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clearRow ; (; Index ; i). inlineoverridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::Ba",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html:19822,Usability,clear,clear,19822,"function may be overload to obtain better performances. . ◆ add() [8/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [9/9]. template<typename T > . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ addEqual(). template<typename T > . template<class M > . void sofa::linearalgebra::DiagonalMatrix< T >::addEqual ; (; const M & ; m). inlineprotected . this += m . ◆ addTo(). template<typename T > . template<class Dest > . void sofa::linearalgebra::DiagonalMatrix< T >::addTo ; (; Dest * ; dest); const. inline . ◆ clear() [1/3]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clear ; (; ). inlineoverridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/3]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clear ; (; Index ; i). inline . ◆ clear() [3/3]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clear ; (; Index ; i, . Index ; j . ). inlineoverridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clearCol ; (; Index ; j). inlineoverridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clearRow ; (; Index ; i). inlineoverridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<typename T > . Index sofa::linearal",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html:19856,Usability,clear,clear,19856,"es. . ◆ add() [8/9]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [9/9]. template<typename T > . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ addEqual(). template<typename T > . template<class M > . void sofa::linearalgebra::DiagonalMatrix< T >::addEqual ; (; const M & ; m). inlineprotected . this += m . ◆ addTo(). template<typename T > . template<class Dest > . void sofa::linearalgebra::DiagonalMatrix< T >::addTo ; (; Dest * ; dest); const. inline . ◆ clear() [1/3]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clear ; (; ). inlineoverridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/3]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clear ; (; Index ; i). inline . ◆ clear() [3/3]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clear ; (; Index ; i, . Index ; j . ). inlineoverridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clearCol ; (; Index ; j). inlineoverridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clearRow ; (; Index ; i). inlineoverridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<typename T > . Index sofa::linearalgebra::DiagonalMatrix< T >::colSize ; (; void ; ); co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html:19942,Usability,clear,clear,19942,"a::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [9/9]. template<typename T > . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ addEqual(). template<typename T > . template<class M > . void sofa::linearalgebra::DiagonalMatrix< T >::addEqual ; (; const M & ; m). inlineprotected . this += m . ◆ addTo(). template<typename T > . template<class Dest > . void sofa::linearalgebra::DiagonalMatrix< T >::addTo ; (; Dest * ; dest); const. inline . ◆ clear() [1/3]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clear ; (; ). inlineoverridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/3]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clear ; (; Index ; i). inline . ◆ clear() [3/3]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clear ; (; Index ; i, . Index ; j . ). inlineoverridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clearCol ; (; Index ; j). inlineoverridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clearRow ; (; Index ; i). inlineoverridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<typename T > . Index sofa::linearalgebra::DiagonalMatrix< T >::colSize ; (; void ; ); const. inlineoverridevirtual . Number of columns. ; Implements sofa::l",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html:20059,Usability,clear,clearCol,20059,"mplate<typename T > . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ addEqual(). template<typename T > . template<class M > . void sofa::linearalgebra::DiagonalMatrix< T >::addEqual ; (; const M & ; m). inlineprotected . this += m . ◆ addTo(). template<typename T > . template<class Dest > . void sofa::linearalgebra::DiagonalMatrix< T >::addTo ; (; Dest * ; dest); const. inline . ◆ clear() [1/3]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clear ; (; ). inlineoverridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/3]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clear ; (; Index ; i). inline . ◆ clear() [3/3]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clear ; (; Index ; i, . Index ; j . ). inlineoverridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clearCol ; (; Index ; j). inlineoverridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clearRow ; (; Index ; i). inlineoverridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<typename T > . Index sofa::linearalgebra::DiagonalMatrix< T >::colSize ; (; void ; ); const. inlineoverridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ element() [1/2]. template<typename T > . SReal sofa::linearalgebra::DiagonalMatrix< T >::element ; (; Ind",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html:20142,Usability,clear,clearCol,20142,":add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ addEqual(). template<typename T > . template<class M > . void sofa::linearalgebra::DiagonalMatrix< T >::addEqual ; (; const M & ; m). inlineprotected . this += m . ◆ addTo(). template<typename T > . template<class Dest > . void sofa::linearalgebra::DiagonalMatrix< T >::addTo ; (; Dest * ; dest); const. inline . ◆ clear() [1/3]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clear ; (; ). inlineoverridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/3]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clear ; (; Index ; i). inline . ◆ clear() [3/3]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clear ; (; Index ; i, . Index ; j . ). inlineoverridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clearCol ; (; Index ; j). inlineoverridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clearRow ; (; Index ; i). inlineoverridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<typename T > . Index sofa::linearalgebra::DiagonalMatrix< T >::colSize ; (; void ; ); const. inlineoverridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ element() [1/2]. template<typename T > . SReal sofa::linearalgebra::DiagonalMatrix< T >::element ; (; Index ; i); const. inline . ◆ element() [2/2]. template<typename T > . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html:20287,Usability,clear,clearRow,20287,"a::linearalgebra::DiagonalMatrix< T >::addEqual ; (; const M & ; m). inlineprotected . this += m . ◆ addTo(). template<typename T > . template<class Dest > . void sofa::linearalgebra::DiagonalMatrix< T >::addTo ; (; Dest * ; dest); const. inline . ◆ clear() [1/3]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clear ; (; ). inlineoverridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/3]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clear ; (; Index ; i). inline . ◆ clear() [3/3]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clear ; (; Index ; i, . Index ; j . ). inlineoverridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clearCol ; (; Index ; j). inlineoverridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clearRow ; (; Index ; i). inlineoverridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<typename T > . Index sofa::linearalgebra::DiagonalMatrix< T >::colSize ; (; void ; ); const. inlineoverridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ element() [1/2]. template<typename T > . SReal sofa::linearalgebra::DiagonalMatrix< T >::element ; (; Index ; i); const. inline . ◆ element() [2/2]. template<typename T > . SReal sofa::linearalgebra::DiagonalMatrix< T >::element ; (; Index ; i, . Index ; j . ); const. inlineoverridevirtual . Read the value of the element at row i, ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html:20370,Usability,clear,clearRow,20370,". inlineprotected . this += m . ◆ addTo(). template<typename T > . template<class Dest > . void sofa::linearalgebra::DiagonalMatrix< T >::addTo ; (; Dest * ; dest); const. inline . ◆ clear() [1/3]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clear ; (; ). inlineoverridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/3]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clear ; (; Index ; i). inline . ◆ clear() [3/3]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clear ; (; Index ; i, . Index ; j . ). inlineoverridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clearCol ; (; Index ; j). inlineoverridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clearRow ; (; Index ; i). inlineoverridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<typename T > . Index sofa::linearalgebra::DiagonalMatrix< T >::colSize ; (; void ; ); const. inlineoverridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ element() [1/2]. template<typename T > . SReal sofa::linearalgebra::DiagonalMatrix< T >::element ; (; Index ; i); const. inline . ◆ element() [2/2]. template<typename T > . SReal sofa::linearalgebra::DiagonalMatrix< T >::element ; (; Index ; i, . Index ; j . ); const. inlineoverridevirtual . Read the value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::B",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html:20512,Usability,clear,clearRowCol,20512,"est); const. inline . ◆ clear() [1/3]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clear ; (; ). inlineoverridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/3]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clear ; (; Index ; i). inline . ◆ clear() [3/3]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clear ; (; Index ; i, . Index ; j . ). inlineoverridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clearCol ; (; Index ; j). inlineoverridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clearRow ; (; Index ; i). inlineoverridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<typename T > . Index sofa::linearalgebra::DiagonalMatrix< T >::colSize ; (; void ; ); const. inlineoverridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ element() [1/2]. template<typename T > . SReal sofa::linearalgebra::DiagonalMatrix< T >::element ; (; Index ; i); const. inline . ◆ element() [2/2]. template<typename T > . SReal sofa::linearalgebra::DiagonalMatrix< T >::element ; (; Index ; i, . Index ; j . ); const. inlineoverridevirtual . Read the value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ equal(). template<typename T > . template<class M > . void sofa::linearalgebra::DiagonalMatrix< T >::equal ; (; const M & ; m, . bool ; add = fals",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html:20598,Usability,clear,clearRowCol,20598,"a::linearalgebra::DiagonalMatrix< T >::clear ; (; ). inlineoverridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/3]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clear ; (; Index ; i). inline . ◆ clear() [3/3]. template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clear ; (; Index ; i, . Index ; j . ). inlineoverridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clearCol ; (; Index ; j). inlineoverridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clearRow ; (; Index ; i). inlineoverridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<typename T > . void sofa::linearalgebra::DiagonalMatrix< T >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<typename T > . Index sofa::linearalgebra::DiagonalMatrix< T >::colSize ; (; void ; ); const. inlineoverridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ element() [1/2]. template<typename T > . SReal sofa::linearalgebra::DiagonalMatrix< T >::element ; (; Index ; i); const. inline . ◆ element() [2/2]. template<typename T > . SReal sofa::linearalgebra::DiagonalMatrix< T >::element ; (; Index ; i, . Index ; j . ); const. inlineoverridevirtual . Read the value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ equal(). template<typename T > . template<class M > . void sofa::linearalgebra::DiagonalMatrix< T >::equal ; (; const M & ; m, . bool ; add = false . ). inlineprotected . ◆ expr(). template<typename T > . std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_diagonal_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix-members.html:274,Modifiability,inherit,inherited,274,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::EigenBaseSparseMatrix< TReal > Member List . This is the complete list of members for sofa::linearalgebra::EigenBaseSparseMatrix< TReal >, including all inherited members. add(Index row, Index col, double value) overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat3x3d &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat3x3f &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat2x2d &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat2x2f &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat6x6d &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat6x6f &_M)sofa::linearalgebra::BaseMatrixvirtual; addToBaseMatrix(BaseMatrix *matrix, SReal factor, Index offset) constsofa::linearalgebra::EigenBaseSparseMatrix< TReal >inline; bAccessorAdd(InternalBlockAccessor *b, Index i, Index j, double v)sofa::linearalgebra::BaseMatrixinlineprotectedvirtual; bAccessorAdd(InternalBlockAccessor *b, const float *buffer)sofa::linearalgebra::BaseMatrixinlineprotectedvirtual; bAccessorAdd(InternalBlockAccessor *b, const double *buffer)sofa::linearalgebra::BaseMatrixinlineprotectedvirtual; bAccessorAdd(InternalBlockAccessor *b, const int *buffer)sofa::linearalgebra::BaseMatrixinlineprotectedvirtual; bAccessorAddDefaultImpl(InternalBlockAccessor *b, const T *buffer)sofa::linearalgebra::BaseMatrixinlineprotected; bAccessorCopy(InternalBlockAccessor *) constsofa::linearalgebra::BaseMatrixinlineprotectedvirtual; bAccessorDelete(const InternalBlockAccessor *) consts",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix-members.html:5459,Usability,clear,clear,5459,"tsofa::linearalgebra::BaseMatrixinline; blocGet(Index i, Index j) constsofa::linearalgebra::BaseMatrixinlinevirtual; blocGetW(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; choleskysofa::linearalgebra::EigenBaseSparseMatrix< TReal >protected; choleskyDecompose()sofa::linearalgebra::EigenBaseSparseMatrix< TReal >inline; choleskySolve(VectorEigen &x, const VectorEigen &b) constsofa::linearalgebra::EigenBaseSparseMatrix< TReal >inline; clear() overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; sofa::linearalgebra::BaseMatrix::clear(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearCol(Index col) overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; clearCols(Index imin, Index imax) overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; clearRow(Index i) overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; clearRowCol(Index i) overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; clearRows(Index imin, Index imax) overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; clearRowsCols(Index imin, Index imax) overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; coeffRef(Index i, Index j)sofa::linearalgebra::EigenBaseSparseMatrix< TReal >inline; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::EigenBaseSparseMatrix",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix-members.html:5574,Usability,clear,clear,5574,"; blocGetW(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; choleskysofa::linearalgebra::EigenBaseSparseMatrix< TReal >protected; choleskyDecompose()sofa::linearalgebra::EigenBaseSparseMatrix< TReal >inline; choleskySolve(VectorEigen &x, const VectorEigen &b) constsofa::linearalgebra::EigenBaseSparseMatrix< TReal >inline; clear() overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; sofa::linearalgebra::BaseMatrix::clear(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearCol(Index col) overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; clearCols(Index imin, Index imax) overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; clearRow(Index i) overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; clearRowCol(Index i) overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; clearRows(Index imin, Index imax) overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; clearRowsCols(Index imin, Index imax) overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; coeffRef(Index i, Index j)sofa::linearalgebra::EigenBaseSparseMatrix< TReal >inline; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; compress() overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; Compre",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix-members.html:5643,Usability,clear,clearCol,5643,"al; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; choleskysofa::linearalgebra::EigenBaseSparseMatrix< TReal >protected; choleskyDecompose()sofa::linearalgebra::EigenBaseSparseMatrix< TReal >inline; choleskySolve(VectorEigen &x, const VectorEigen &b) constsofa::linearalgebra::EigenBaseSparseMatrix< TReal >inline; clear() overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; sofa::linearalgebra::BaseMatrix::clear(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearCol(Index col) overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; clearCols(Index imin, Index imax) overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; clearRow(Index i) overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; clearRowCol(Index i) overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; clearRows(Index imin, Index imax) overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; clearRowsCols(Index imin, Index imax) overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; coeffRef(Index i, Index j)sofa::linearalgebra::EigenBaseSparseMatrix< TReal >inline; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; compress() overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; CompressedMatrix typedefsofa::linearalgebra::EigenBaseSparseMatrix< TReal >; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix-members.html:5737,Usability,clear,clearCols,5737,"Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; choleskysofa::linearalgebra::EigenBaseSparseMatrix< TReal >protected; choleskyDecompose()sofa::linearalgebra::EigenBaseSparseMatrix< TReal >inline; choleskySolve(VectorEigen &x, const VectorEigen &b) constsofa::linearalgebra::EigenBaseSparseMatrix< TReal >inline; clear() overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; sofa::linearalgebra::BaseMatrix::clear(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearCol(Index col) overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; clearCols(Index imin, Index imax) overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; clearRow(Index i) overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; clearRowCol(Index i) overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; clearRows(Index imin, Index imax) overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; clearRowsCols(Index imin, Index imax) overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; coeffRef(Index i, Index j)sofa::linearalgebra::EigenBaseSparseMatrix< TReal >inline; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; compress() overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; CompressedMatrix typedefsofa::linearalgebra::EigenBaseSparseMatrix< TReal >; compressedMatrixsofa::linearalgebra::EigenBaseSparseMatrix< TReal >; copy(const EigenBaseSpars",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix-members.html:5845,Usability,clear,clearRow,5845,"seMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; choleskysofa::linearalgebra::EigenBaseSparseMatrix< TReal >protected; choleskyDecompose()sofa::linearalgebra::EigenBaseSparseMatrix< TReal >inline; choleskySolve(VectorEigen &x, const VectorEigen &b) constsofa::linearalgebra::EigenBaseSparseMatrix< TReal >inline; clear() overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; sofa::linearalgebra::BaseMatrix::clear(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearCol(Index col) overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; clearCols(Index imin, Index imax) overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; clearRow(Index i) overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; clearRowCol(Index i) overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; clearRows(Index imin, Index imax) overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; clearRowsCols(Index imin, Index imax) overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; coeffRef(Index i, Index j)sofa::linearalgebra::EigenBaseSparseMatrix< TReal >inline; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; compress() overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; CompressedMatrix typedefsofa::linearalgebra::EigenBaseSparseMatrix< TReal >; compressedMatrixsofa::linearalgebra::EigenBaseSparseMatrix< TReal >; copy(const EigenBaseSparseMatrix &m, unsigned nbCol, unsigned shift)sofa::linearalgebra::EigenBaseSparseMatrix< TReal >inline; create",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix-members.html:5937,Usability,clear,clearRowCol,5937,"bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; choleskysofa::linearalgebra::EigenBaseSparseMatrix< TReal >protected; choleskyDecompose()sofa::linearalgebra::EigenBaseSparseMatrix< TReal >inline; choleskySolve(VectorEigen &x, const VectorEigen &b) constsofa::linearalgebra::EigenBaseSparseMatrix< TReal >inline; clear() overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; sofa::linearalgebra::BaseMatrix::clear(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearCol(Index col) overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; clearCols(Index imin, Index imax) overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; clearRow(Index i) overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; clearRowCol(Index i) overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; clearRows(Index imin, Index imax) overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; clearRowsCols(Index imin, Index imax) overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; coeffRef(Index i, Index j)sofa::linearalgebra::EigenBaseSparseMatrix< TReal >inline; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; compress() overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; CompressedMatrix typedefsofa::linearalgebra::EigenBaseSparseMatrix< TReal >; compressedMatrixsofa::linearalgebra::EigenBaseSparseMatrix< TReal >; copy(const EigenBaseSparseMatrix &m, unsigned nbCol, unsigned shift)sofa::linearalgebra::EigenBaseSparseMatrix< TReal >inline; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrix",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix-members.html:6032,Usability,clear,clearRows,6032,"gebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; choleskysofa::linearalgebra::EigenBaseSparseMatrix< TReal >protected; choleskyDecompose()sofa::linearalgebra::EigenBaseSparseMatrix< TReal >inline; choleskySolve(VectorEigen &x, const VectorEigen &b) constsofa::linearalgebra::EigenBaseSparseMatrix< TReal >inline; clear() overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; sofa::linearalgebra::BaseMatrix::clear(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearCol(Index col) overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; clearCols(Index imin, Index imax) overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; clearRow(Index i) overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; clearRowCol(Index i) overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; clearRows(Index imin, Index imax) overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; clearRowsCols(Index imin, Index imax) overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; coeffRef(Index i, Index j)sofa::linearalgebra::EigenBaseSparseMatrix< TReal >inline; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; compress() overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; CompressedMatrix typedefsofa::linearalgebra::EigenBaseSparseMatrix< TReal >; compressedMatrixsofa::linearalgebra::EigenBaseSparseMatrix< TReal >; copy(const EigenBaseSparseMatrix &m, unsigned nbCol, unsigned shift)sofa::linearalgebra::EigenBaseSparseMatrix< TReal >inline; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalge",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix-members.html:6140,Usability,clear,clearRowsCols,6140,"stsofa::linearalgebra::BaseMatrixinlinevirtual; choleskysofa::linearalgebra::EigenBaseSparseMatrix< TReal >protected; choleskyDecompose()sofa::linearalgebra::EigenBaseSparseMatrix< TReal >inline; choleskySolve(VectorEigen &x, const VectorEigen &b) constsofa::linearalgebra::EigenBaseSparseMatrix< TReal >inline; clear() overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; sofa::linearalgebra::BaseMatrix::clear(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearCol(Index col) overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; clearCols(Index imin, Index imax) overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; clearRow(Index i) overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; clearRowCol(Index i) overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; clearRows(Index imin, Index imax) overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; clearRowsCols(Index imin, Index imax) overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; coeffRef(Index i, Index j)sofa::linearalgebra::EigenBaseSparseMatrix< TReal >inline; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; compress() overridesofa::linearalgebra::EigenBaseSparseMatrix< TReal >inlinevirtual; CompressedMatrix typedefsofa::linearalgebra::EigenBaseSparseMatrix< TReal >; compressedMatrixsofa::linearalgebra::EigenBaseSparseMatrix< TReal >; copy(const EigenBaseSparseMatrix &m, unsigned nbCol, unsigned shift)sofa::linearalgebra::EigenBaseSparseMatrix< TReal >inline; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) cons",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:1260,Energy Efficiency,efficient,efficient,1260,"tions |; List of all members . sofa::linearalgebra::EigenBaseSparseMatrix< TReal > Class Template Reference . #include <EigenBaseSparseMatrix.h>. Inheritance diagram for sofa::linearalgebra::EigenBaseSparseMatrix< TReal >:. [legend]; Detailed Description; template<class TReal>; class sofa::linearalgebra::EigenBaseSparseMatrix< TReal >; Sparse matrix based on the Eigen library.; An Eigen::SparseMatrix<Real, RowMajor> matrix is used to store the data in Compressed Row Storage mode. This matrix can not be accessed randomly. Two access modes are implemented.; The first access mode consists in inserting entries in increasing row, increasing column order. Method beginRow(Index index) must be called before any entry can be appended to row i. WarningbeginRow must be called even for empty rows Then insertBack(i,j,value) must be used in for increasing j. There is no need to explicitly end a row. Finally, method compress() must be called after the last entry has been inserted. This is the most efficient access mode.; The second access mode is randow access, but you access an auxiliary matrix. Method add is used to add a value at a given location. Method compress() is then used to transfer this data to the compressed matrix. There is no way to replace an entry, you can only add.; Rows, columns, or the full matrix can be set to zero using the clear* methods. . Public Attributes; CompressedMatrix compressedMatrix;  the compressed matrix More...;  . Protected Attributes; SimplicialCholesky cholesky;  used to factorize the matrix and solve systems using Cholesky method, for symmetric positive definite matrices only. More...;  . Public Member Functions;  EigenBaseSparseMatrix (Index nbRow=0, Index nbCol=0);  ;  EigenBaseSparseMatrix (const ThisMatrix &m);  copy constructor More...;  ; void operator= (const ThisMatrix &m);  copy operator More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:3397,Energy Efficiency,schedul,scheduled,3397,"lace. Scheduled additions must be finalized using function compress(). More...;  ; void beginRow (Index index);  ; void insertBack (Index row, Index col, Real value);  ; Real & coeffRef (Index i, Index j);  Return a reference to the given entry in the compressed matrix.There can (must ?) be a value at this place already. Efficient only if the it is at the last place of the compressed matrix. More...;  ; void copy (const EigenBaseSparseMatrix &m, unsigned nbCol, unsigned shift);  ; void resize (Index nbRow, Index nbCol) override;  Resize the matrix without preserving the data (the matrix is set to zero) More...;  ; Index rowSize (void) const override;  number of rows More...;  ; Index colSize (void) const override;  number of columns More...;  ; void reserve (typename CompressedMatrix::Index reserveSize);  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void compress () override;  Add the values from the scheduled list, and clears the schedule list. More...;  ; Index * getRowBegin ();  ; Index * getColsIndex ();  ; Real * getColsValue ();  ; void clearRow (Index i) override;  Set all the entries of a row to 0. More...;  ; void clearRows (Index imin, Index imax) override;  Set all the entries of rows imin to imax-1 to 0. More...;  ; void clearCol (Index col) override;  Clears the all the entries of column imin to column imax-1. Not efficient ! More...;  ; void clearCols (Index imin, Index imax) override;  Set all the entries of column i and of row i to 0. Not efficient ! More...;  ; void clearRowCol (Index i) override;  Clears all the entries of rows imin to imax-1 and columns imin to imax-1. More...;  ; void clearRowsCols (Index imin, Index imax) override;  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; void clear () override;  Set all values to 0, by resizing to the same size. More...;  ; void mult (VectorEigen &result, const VectorEigen &da",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:3428,Energy Efficiency,schedul,schedule,3428,"lace. Scheduled additions must be finalized using function compress(). More...;  ; void beginRow (Index index);  ; void insertBack (Index row, Index col, Real value);  ; Real & coeffRef (Index i, Index j);  Return a reference to the given entry in the compressed matrix.There can (must ?) be a value at this place already. Efficient only if the it is at the last place of the compressed matrix. More...;  ; void copy (const EigenBaseSparseMatrix &m, unsigned nbCol, unsigned shift);  ; void resize (Index nbRow, Index nbCol) override;  Resize the matrix without preserving the data (the matrix is set to zero) More...;  ; Index rowSize (void) const override;  number of rows More...;  ; Index colSize (void) const override;  number of columns More...;  ; void reserve (typename CompressedMatrix::Index reserveSize);  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void compress () override;  Add the values from the scheduled list, and clears the schedule list. More...;  ; Index * getRowBegin ();  ; Index * getColsIndex ();  ; Real * getColsValue ();  ; void clearRow (Index i) override;  Set all the entries of a row to 0. More...;  ; void clearRows (Index imin, Index imax) override;  Set all the entries of rows imin to imax-1 to 0. More...;  ; void clearCol (Index col) override;  Clears the all the entries of column imin to column imax-1. Not efficient ! More...;  ; void clearCols (Index imin, Index imax) override;  Set all the entries of column i and of row i to 0. Not efficient ! More...;  ; void clearRowCol (Index i) override;  Clears all the entries of rows imin to imax-1 and columns imin to imax-1. More...;  ; void clearRowsCols (Index imin, Index imax) override;  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; void clear () override;  Set all values to 0, by resizing to the same size. More...;  ; void mult (VectorEigen &result, const VectorEigen &da",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:3832,Energy Efficiency,efficient,efficient,3832,"m, unsigned nbCol, unsigned shift);  ; void resize (Index nbRow, Index nbCol) override;  Resize the matrix without preserving the data (the matrix is set to zero) More...;  ; Index rowSize (void) const override;  number of rows More...;  ; Index colSize (void) const override;  number of columns More...;  ; void reserve (typename CompressedMatrix::Index reserveSize);  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void compress () override;  Add the values from the scheduled list, and clears the schedule list. More...;  ; Index * getRowBegin ();  ; Index * getColsIndex ();  ; Real * getColsValue ();  ; void clearRow (Index i) override;  Set all the entries of a row to 0. More...;  ; void clearRows (Index imin, Index imax) override;  Set all the entries of rows imin to imax-1 to 0. More...;  ; void clearCol (Index col) override;  Clears the all the entries of column imin to column imax-1. Not efficient ! More...;  ; void clearCols (Index imin, Index imax) override;  Set all the entries of column i and of row i to 0. Not efficient ! More...;  ; void clearRowCol (Index i) override;  Clears all the entries of rows imin to imax-1 and columns imin to imax-1. More...;  ; void clearRowsCols (Index imin, Index imax) override;  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; void clear () override;  Set all values to 0, by resizing to the same size. More...;  ; void mult (VectorEigen &result, const VectorEigen &data);  Matrix-vector product. More...;  ; void mult_MT (VectorEigen &result, const VectorEigen &data);  Matrix-vector product openmp multithreaded. More...;  ; template<class V1 , class V2 > ; void multVector (V1 &output, const V2 &input);  Matrix-Vector product (dense vector with contiguous memory layout) More...;  ; template<class V > ; V operator* (const V &input);  Matrix-Vector product (dense vector with contiguous memory layout) More...; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:3962,Energy Efficiency,efficient,efficient,3962,"data (the matrix is set to zero) More...;  ; Index rowSize (void) const override;  number of rows More...;  ; Index colSize (void) const override;  number of columns More...;  ; void reserve (typename CompressedMatrix::Index reserveSize);  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void compress () override;  Add the values from the scheduled list, and clears the schedule list. More...;  ; Index * getRowBegin ();  ; Index * getColsIndex ();  ; Real * getColsValue ();  ; void clearRow (Index i) override;  Set all the entries of a row to 0. More...;  ; void clearRows (Index imin, Index imax) override;  Set all the entries of rows imin to imax-1 to 0. More...;  ; void clearCol (Index col) override;  Clears the all the entries of column imin to column imax-1. Not efficient ! More...;  ; void clearCols (Index imin, Index imax) override;  Set all the entries of column i and of row i to 0. Not efficient ! More...;  ; void clearRowCol (Index i) override;  Clears all the entries of rows imin to imax-1 and columns imin to imax-1. More...;  ; void clearRowsCols (Index imin, Index imax) override;  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; void clear () override;  Set all values to 0, by resizing to the same size. More...;  ; void mult (VectorEigen &result, const VectorEigen &data);  Matrix-vector product. More...;  ; void mult_MT (VectorEigen &result, const VectorEigen &data);  Matrix-vector product openmp multithreaded. More...;  ; template<class V1 , class V2 > ; void multVector (V1 &output, const V2 &input);  Matrix-Vector product (dense vector with contiguous memory layout) More...;  ; template<class V > ; V operator* (const V &input);  Matrix-Vector product (dense vector with contiguous memory layout) More...;  ; bool choleskyDecompose ();  Try to compute the LDLT decomposition, and return true if success. The matrix is unchanged. More...",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:19841,Energy Efficiency,efficient,efficient,19841,"ecompose(). template<class TReal > . bool sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::choleskyDecompose ; (; ). inline . Try to compute the LDLT decomposition, and return true if success. The matrix is unchanged. . ◆ choleskySolve(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::choleskySolve ; (; VectorEigen & ; x, . const VectorEigen & ; b . ); const. inline . Solve Ax=b, where A is this matrix. WARNING: ldltDecompose() must be called first. x and b can be the same vector. . ◆ clear(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clear ; (; ). inlineoverridevirtual . Set all values to 0, by resizing to the same size. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearCol ; (; Index ; col). inlineoverridevirtual . Clears the all the entries of column imin to column imax-1. Not efficient ! ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCols(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearCols ; (; Index ; imin, . Index ; imax . ). inlineoverridevirtual . Set all the entries of column i and of row i to 0. Not efficient ! ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRow ; (; Index ; i). inlineoverridevirtual . Set all the entries of a row to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Clears all the entries of rows imin to imax-1 and columns imin to imax-1. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRows(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRows ; (; Index ; imin, . Index ; imax . ). inlineov",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:20133,Energy Efficiency,efficient,efficient,20133,"::EigenBaseSparseMatrix< TReal >::choleskySolve ; (; VectorEigen & ; x, . const VectorEigen & ; b . ); const. inline . Solve Ax=b, where A is this matrix. WARNING: ldltDecompose() must be called first. x and b can be the same vector. . ◆ clear(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clear ; (; ). inlineoverridevirtual . Set all values to 0, by resizing to the same size. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearCol ; (; Index ; col). inlineoverridevirtual . Clears the all the entries of column imin to column imax-1. Not efficient ! ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCols(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearCols ; (; Index ; imin, . Index ; imax . ). inlineoverridevirtual . Set all the entries of column i and of row i to 0. Not efficient ! ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRow ; (; Index ; i). inlineoverridevirtual . Set all the entries of a row to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Clears all the entries of rows imin to imax-1 and columns imin to imax-1. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRows(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRows ; (; Index ; imin, . Index ; imax . ). inlineoverridevirtual . Set all the entries of rows imin to imax-1 to 0. ; Set all the entries of a column to 0. Not efficient ! ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowsCols(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRowsCols ;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:20980,Energy Efficiency,efficient,efficient,20980,"Cols ; (; Index ; imin, . Index ; imax . ). inlineoverridevirtual . Set all the entries of column i and of row i to 0. Not efficient ! ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRow ; (; Index ; i). inlineoverridevirtual . Set all the entries of a row to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Clears all the entries of rows imin to imax-1 and columns imin to imax-1. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRows(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRows ; (; Index ; imin, . Index ; imax . ). inlineoverridevirtual . Set all the entries of rows imin to imax-1 to 0. ; Set all the entries of a column to 0. Not efficient ! ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowsCols(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRowsCols ; (; Index ; imin, . Index ; imax . ). inlineoverridevirtual . Clears all the values in rows imin to imax-1 and columns imin to imax-1. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ coeffRef(). template<class TReal > . Real& sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::coeffRef ; (; Index ; i, . Index ; j . ). inline . Return a reference to the given entry in the compressed matrix.There can (must ?) be a value at this place already. Efficient only if the it is at the last place of the compressed matrix. . ◆ colSize(). template<class TReal > . Index sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::colSize ; (; void ; ); const. inlineoverridevirtual . number of columns ; Implements sofa::linearalgebra::BaseMatrix. ◆ compress(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::compres",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:22068,Energy Efficiency,schedul,scheduled,22068,"s TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRowsCols ; (; Index ; imin, . Index ; imax . ). inlineoverridevirtual . Clears all the values in rows imin to imax-1 and columns imin to imax-1. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ coeffRef(). template<class TReal > . Real& sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::coeffRef ; (; Index ; i, . Index ; j . ). inline . Return a reference to the given entry in the compressed matrix.There can (must ?) be a value at this place already. Efficient only if the it is at the last place of the compressed matrix. . ◆ colSize(). template<class TReal > . Index sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::colSize ; (; void ; ); const. inlineoverridevirtual . number of columns ; Implements sofa::linearalgebra::BaseMatrix. ◆ compress(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::compress ; (; ). inlineoverridevirtual . Add the values from the scheduled list, and clears the schedule list. ; See alsoset(Index i, Index j, double v). ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ copy(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::copy ; (; const EigenBaseSparseMatrix< TReal > & ; m, . unsigned ; nbCol, . unsigned ; shift . ). inline . Clear and resize this to (m.rows,nbCol) and initialize it with the given matrix, columns shifted of the given value: this(i,j+shift) = m(i,j). @precond nbCol >= m.cols + shift . ◆ element(). template<class TReal > . SReal sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::element ; (; Index ; i, . Index ; j . ); const. inlineoverridevirtual . Read the value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ getColsIndex(). template<class TReal > . Index* sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::getColsIndex ; (; ). inline . ◆ getColsValue(). template<class TReal > . Real* sofa::linearalgebra",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:22099,Energy Efficiency,schedul,schedule,22099,"s TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRowsCols ; (; Index ; imin, . Index ; imax . ). inlineoverridevirtual . Clears all the values in rows imin to imax-1 and columns imin to imax-1. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ coeffRef(). template<class TReal > . Real& sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::coeffRef ; (; Index ; i, . Index ; j . ). inline . Return a reference to the given entry in the compressed matrix.There can (must ?) be a value at this place already. Efficient only if the it is at the last place of the compressed matrix. . ◆ colSize(). template<class TReal > . Index sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::colSize ; (; void ; ); const. inlineoverridevirtual . number of columns ; Implements sofa::linearalgebra::BaseMatrix. ◆ compress(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::compress ; (; ). inlineoverridevirtual . Add the values from the scheduled list, and clears the schedule list. ; See alsoset(Index i, Index j, double v). ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ copy(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::copy ; (; const EigenBaseSparseMatrix< TReal > & ; m, . unsigned ; nbCol, . unsigned ; shift . ). inline . Clear and resize this to (m.rows,nbCol) and initialize it with the given matrix, columns shifted of the given value: this(i,j+shift) = m(i,j). @precond nbCol >= m.cols + shift . ◆ element(). template<class TReal > . SReal sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::element ; (; Index ; i, . Index ; j . ); const. inlineoverridevirtual . Read the value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ getColsIndex(). template<class TReal > . Index* sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::getColsIndex ; (; ). inline . ◆ getColsValue(). template<class TReal > . Real* sofa::linearalgebra",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:6002,Modifiability,inherit,inherited,6002,"e Ax=b, where A is this matrix. WARNING: ldltDecompose() must be called first. x and b can be the same vector. More...;  ; void addToBaseMatrix (BaseMatrix *matrix, SReal factor, Index offset) const;  add this EigenBaseSparseMatrix to a BaseMatrix at the offset and multiplied by factor More...;  ; void mul (EigenBaseSparseMatrix< Real > &res, const EigenBaseSparseMatrix< Real > &rhs) const;  ; void mul_MT (EigenBaseSparseMatrix< Real > &res, const EigenBaseSparseMatrix< Real > &rhs) const;  ; void mul (Eigen::Matrix< Real, Eigen::Dynamic, Eigen::Dynamic > &res, const Eigen::Matrix< Real, Eigen::Dynamic, Eigen::Dynamic > &rhs);  Sparse x Dense Matrix product. More...;  ; void mul_MT (Eigen::Matrix< Real, Eigen::Dynamic, Eigen::Dynamic > &res, const Eigen::Matrix< Real, Eigen::Dynamic, Eigen::Dynamic > &rhs);  Sparse x Dense Matrix product openmp multithreaded. More...;  ; const char * Name ();  ; const char * Name ();  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:12143,Modifiability,inherit,inherited,12143,,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:16566,Modifiability,inherit,inherited,16566,"tor *it, const InternalColBlockIterator *it2) const;  ; ColBlockConstIterator createColBlockConstIterator (Index row, void *internalPtr) const;  ; ColBlockConstIterator createColBlockConstIterator (Index row, Index internalData) const;  ; virtual void itCopyRowBlock (InternalRowBlockIterator *) const;  ; virtual void itDeleteRowBlock (const InternalRowBlockIterator *) const;  ; virtual Index itAccessRowBlock (InternalRowBlockIterator *it) const;  ; virtual ColBlockConstIterator itBeginRowBlock (InternalRowBlockIterator *it) const;  ; virtual ColBlockConstIterator itEndRowBlock (InternalRowBlockIterator *it) const;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > itRangeRowBlock (InternalRowBlockIterator *it) const;  ; virtual void itIncRowBlock (InternalRowBlockIterator *it) const;  ; virtual void itDecRowBlock (InternalRowBlockIterator *it) const;  ; virtual bool itEqRowBlock (const InternalRowBlockIterator *it, const InternalRowBlockIterator *it2) const;  ; virtual bool itLessRowBlock (const InternalRowBlockIterator *it, const InternalRowBlockIterator *it2) const;  ; RowBlockConstIterator createRowBlockConstIterator (void *internalPtr) const;  ; RowBlockConstIterator createRowBlockConstIterator (Index internalData0, Index internalData1) const;  ;  Static Protected Member Functions inherited from sofa::linearalgebra::BaseMatrix; static InternalBlockAccessor * getInternal (BlockConstAccessor *b);  ; static const InternalBlockAccessor * getInternal (const BlockConstAccessor *b);  ; static InternalBlockAccessor * getInternal (BlockAccessor *b);  ; static const InternalBlockAccessor * getInternal (const BlockAccessor *b);  ; static InternalColBlockIterator * getInternal (ColBlockConstIterator *b);  ; static const InternalColBlockIterator * getInternal (const ColBlockConstIterator *b);  ; static InternalRowBlockIterator * getInternal (RowBlockConstIterator *b);  ; static const InternalRowBlockIterator * getInternal (const RowBlockConstIterator *b);  .",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:24217,Modifiability,variab,variable,24217,"earalgebra::EigenBaseSparseMatrix< TReal >::getRowBegin ; (; ). inline . ◆ insertBack(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::insertBack ; (; Index ; row, . Index ; col, . Real ; value . ). inline . Insert in the compressed matrix. There must be no value at this place already. Efficient only if the value is inserted at the last place of the last row. Warningthe line must be created previously with ""beginRow"" . ◆ mul() [1/2]. template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::mul ; (; Eigen::Matrix< Real, Eigen::Dynamic, Eigen::Dynamic > & ; res, . const Eigen::Matrix< Real, Eigen::Dynamic, Eigen::Dynamic > & ; rhs . ). inline . Sparse x Dense Matrix product. . ◆ mul() [2/2]. template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::mul ; (; EigenBaseSparseMatrix< Real > & ; res, . const EigenBaseSparseMatrix< Real > & ; rhs . ); const. inline . EigenBaseSparseMatrix multiplication res can be the same variable as this or rhs . ◆ mul_MT() [1/2]. template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::mul_MT ; (; Eigen::Matrix< Real, Eigen::Dynamic, Eigen::Dynamic > & ; res, . const Eigen::Matrix< Real, Eigen::Dynamic, Eigen::Dynamic > & ; rhs . ). inline . Sparse x Dense Matrix product openmp multithreaded. . ◆ mul_MT() [2/2]. template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::mul_MT ; (; EigenBaseSparseMatrix< Real > & ; res, . const EigenBaseSparseMatrix< Real > & ; rhs . ); const. inline . EigenBaseSparseMatrix multiplication (openmp multithreaded version) Warningres MUST NOT be the same variable as this or rhs . ◆ mult(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::mult ; (; VectorEigen & ; result, . const VectorEigen & ; data . ). inline . Matrix-vector product. . ◆ mult_MT(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::mult_MT ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:24876,Modifiability,variab,variable,24876,"Eigen::Matrix< Real, Eigen::Dynamic, Eigen::Dynamic > & ; rhs . ). inline . Sparse x Dense Matrix product. . ◆ mul() [2/2]. template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::mul ; (; EigenBaseSparseMatrix< Real > & ; res, . const EigenBaseSparseMatrix< Real > & ; rhs . ); const. inline . EigenBaseSparseMatrix multiplication res can be the same variable as this or rhs . ◆ mul_MT() [1/2]. template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::mul_MT ; (; Eigen::Matrix< Real, Eigen::Dynamic, Eigen::Dynamic > & ; res, . const Eigen::Matrix< Real, Eigen::Dynamic, Eigen::Dynamic > & ; rhs . ). inline . Sparse x Dense Matrix product openmp multithreaded. . ◆ mul_MT() [2/2]. template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::mul_MT ; (; EigenBaseSparseMatrix< Real > & ; res, . const EigenBaseSparseMatrix< Real > & ; rhs . ); const. inline . EigenBaseSparseMatrix multiplication (openmp multithreaded version) Warningres MUST NOT be the same variable as this or rhs . ◆ mult(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::mult ; (; VectorEigen & ; result, . const VectorEigen & ; data . ). inline . Matrix-vector product. . ◆ mult_MT(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::mult_MT ; (; VectorEigen & ; result, . const VectorEigen & ; data . ). inline . Matrix-vector product openmp multithreaded. . ◆ multVector(). template<class TReal > . template<class V1 , class V2 > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::multVector ; (; V1 & ; output, . const V2 & ; input . ). inline . Matrix-Vector product (dense vector with contiguous memory layout) . ◆ Name() [1/3]. template<class TReal > . static const char* sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::Name ; (; ). static . ◆ Name() [2/3]. const char * sofa::linearalgebra::EigenBaseSparseMatrix< double >::Name ; (; ). inline . ◆ Name() [3/",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:6551,Performance,perform,performances,6551,"nst;  ; void mul (Eigen::Matrix< Real, Eigen::Dynamic, Eigen::Dynamic > &res, const Eigen::Matrix< Real, Eigen::Dynamic, Eigen::Dynamic > &rhs);  Sparse x Dense Matrix product. More...;  ; void mul_MT (Eigen::Matrix< Real, Eigen::Dynamic, Eigen::Dynamic > &res, const Eigen::Matrix< Real, Eigen::Dynamic, Eigen::Dynamic > &rhs);  Sparse x Dense Matrix product openmp multithreaded. More...;  ; const char * Name ();  ; const char * Name ();  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void opMulV (linearalgebra::BaseVecto",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:6725,Performance,perform,performances,6725,"t. More...;  ; void mul_MT (Eigen::Matrix< Real, Eigen::Dynamic, Eigen::Dynamic > &res, const Eigen::Matrix< Real, Eigen::Dynamic, Eigen::Dynamic > &rhs);  Sparse x Dense Matrix product openmp multithreaded. More...;  ; const char * Name ();  ; const char * Name ();  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:6899,Performance,perform,performances,6899,"rix product openmp multithreaded. More...;  ; const char * Name ();  ; const char * Name ();  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Mul",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:7073,Performance,perform,performances,7073,"Matrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:7247,Performance,perform,performances,7247,"ible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; virtual void opPMulV (float *result, const float *v) const;  Multiply the matrix ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:7421,Performance,perform,performances,7421,"virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; virtual void opPMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and add the result in vector result. More...;  ; virtual void opPMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and a",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:770,Security,access,accessed,770,"﻿. SOFA API: sofa::linearalgebra::EigenBaseSparseMatrix< TReal > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::linearalgebra::EigenBaseSparseMatrix< TReal > Class Template Reference . #include <EigenBaseSparseMatrix.h>. Inheritance diagram for sofa::linearalgebra::EigenBaseSparseMatrix< TReal >:. [legend]; Detailed Description; template<class TReal>; class sofa::linearalgebra::EigenBaseSparseMatrix< TReal >; Sparse matrix based on the Eigen library.; An Eigen::SparseMatrix<Real, RowMajor> matrix is used to store the data in Compressed Row Storage mode. This matrix can not be accessed randomly. Two access modes are implemented.; The first access mode consists in inserting entries in increasing row, increasing column order. Method beginRow(Index index) must be called before any entry can be appended to row i. WarningbeginRow must be called even for empty rows Then insertBack(i,j,value) must be used in for increasing j. There is no need to explicitly end a row. Finally, method compress() must be called after the last entry has been inserted. This is the most efficient access mode.; The second access mode is randow access, but you access an auxiliary matrix. Method add is used to add a value at a given location. Method compress() is then used to transfer this data to the compressed matrix. There is no way to replace an entry, you can only add.; Rows, columns, or the full matrix can be set to zero using the clear* methods. . Public Attributes; CompressedMatrix compressedMatrix;  the compressed matrix More...;  . Protected Attributes; SimplicialCholesky cholesky;  used to factorize the matrix and solve systems using Cholesky method, for symmetric positive definite matrices only. More...;  . Public Member Functions;  EigenBaseSparseMatrix (Index nbRow=0, Index nbCol=0);  ;  EigenBaseSparse",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:793,Security,access,access,793,"﻿. SOFA API: sofa::linearalgebra::EigenBaseSparseMatrix< TReal > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::linearalgebra::EigenBaseSparseMatrix< TReal > Class Template Reference . #include <EigenBaseSparseMatrix.h>. Inheritance diagram for sofa::linearalgebra::EigenBaseSparseMatrix< TReal >:. [legend]; Detailed Description; template<class TReal>; class sofa::linearalgebra::EigenBaseSparseMatrix< TReal >; Sparse matrix based on the Eigen library.; An Eigen::SparseMatrix<Real, RowMajor> matrix is used to store the data in Compressed Row Storage mode. This matrix can not be accessed randomly. Two access modes are implemented.; The first access mode consists in inserting entries in increasing row, increasing column order. Method beginRow(Index index) must be called before any entry can be appended to row i. WarningbeginRow must be called even for empty rows Then insertBack(i,j,value) must be used in for increasing j. There is no need to explicitly end a row. Finally, method compress() must be called after the last entry has been inserted. This is the most efficient access mode.; The second access mode is randow access, but you access an auxiliary matrix. Method add is used to add a value at a given location. Method compress() is then used to transfer this data to the compressed matrix. There is no way to replace an entry, you can only add.; Rows, columns, or the full matrix can be set to zero using the clear* methods. . Public Attributes; CompressedMatrix compressedMatrix;  the compressed matrix More...;  . Protected Attributes; SimplicialCholesky cholesky;  used to factorize the matrix and solve systems using Cholesky method, for symmetric positive definite matrices only. More...;  . Public Member Functions;  EigenBaseSparseMatrix (Index nbRow=0, Index nbCol=0);  ;  EigenBaseSparse",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:834,Security,access,access,834,"﻿. SOFA API: sofa::linearalgebra::EigenBaseSparseMatrix< TReal > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::linearalgebra::EigenBaseSparseMatrix< TReal > Class Template Reference . #include <EigenBaseSparseMatrix.h>. Inheritance diagram for sofa::linearalgebra::EigenBaseSparseMatrix< TReal >:. [legend]; Detailed Description; template<class TReal>; class sofa::linearalgebra::EigenBaseSparseMatrix< TReal >; Sparse matrix based on the Eigen library.; An Eigen::SparseMatrix<Real, RowMajor> matrix is used to store the data in Compressed Row Storage mode. This matrix can not be accessed randomly. Two access modes are implemented.; The first access mode consists in inserting entries in increasing row, increasing column order. Method beginRow(Index index) must be called before any entry can be appended to row i. WarningbeginRow must be called even for empty rows Then insertBack(i,j,value) must be used in for increasing j. There is no need to explicitly end a row. Finally, method compress() must be called after the last entry has been inserted. This is the most efficient access mode.; The second access mode is randow access, but you access an auxiliary matrix. Method add is used to add a value at a given location. Method compress() is then used to transfer this data to the compressed matrix. There is no way to replace an entry, you can only add.; Rows, columns, or the full matrix can be set to zero using the clear* methods. . Public Attributes; CompressedMatrix compressedMatrix;  the compressed matrix More...;  . Protected Attributes; SimplicialCholesky cholesky;  used to factorize the matrix and solve systems using Cholesky method, for symmetric positive definite matrices only. More...;  . Public Member Functions;  EigenBaseSparseMatrix (Index nbRow=0, Index nbCol=0);  ;  EigenBaseSparse",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:1270,Security,access,access,1270,"tions |; List of all members . sofa::linearalgebra::EigenBaseSparseMatrix< TReal > Class Template Reference . #include <EigenBaseSparseMatrix.h>. Inheritance diagram for sofa::linearalgebra::EigenBaseSparseMatrix< TReal >:. [legend]; Detailed Description; template<class TReal>; class sofa::linearalgebra::EigenBaseSparseMatrix< TReal >; Sparse matrix based on the Eigen library.; An Eigen::SparseMatrix<Real, RowMajor> matrix is used to store the data in Compressed Row Storage mode. This matrix can not be accessed randomly. Two access modes are implemented.; The first access mode consists in inserting entries in increasing row, increasing column order. Method beginRow(Index index) must be called before any entry can be appended to row i. WarningbeginRow must be called even for empty rows Then insertBack(i,j,value) must be used in for increasing j. There is no need to explicitly end a row. Finally, method compress() must be called after the last entry has been inserted. This is the most efficient access mode.; The second access mode is randow access, but you access an auxiliary matrix. Method add is used to add a value at a given location. Method compress() is then used to transfer this data to the compressed matrix. There is no way to replace an entry, you can only add.; Rows, columns, or the full matrix can be set to zero using the clear* methods. . Public Attributes; CompressedMatrix compressedMatrix;  the compressed matrix More...;  . Protected Attributes; SimplicialCholesky cholesky;  used to factorize the matrix and solve systems using Cholesky method, for symmetric positive definite matrices only. More...;  . Public Member Functions;  EigenBaseSparseMatrix (Index nbRow=0, Index nbCol=0);  ;  EigenBaseSparseMatrix (const ThisMatrix &m);  copy constructor More...;  ; void operator= (const ThisMatrix &m);  copy operator More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:1295,Security,access,access,1295,"seSparseMatrix< TReal > Class Template Reference . #include <EigenBaseSparseMatrix.h>. Inheritance diagram for sofa::linearalgebra::EigenBaseSparseMatrix< TReal >:. [legend]; Detailed Description; template<class TReal>; class sofa::linearalgebra::EigenBaseSparseMatrix< TReal >; Sparse matrix based on the Eigen library.; An Eigen::SparseMatrix<Real, RowMajor> matrix is used to store the data in Compressed Row Storage mode. This matrix can not be accessed randomly. Two access modes are implemented.; The first access mode consists in inserting entries in increasing row, increasing column order. Method beginRow(Index index) must be called before any entry can be appended to row i. WarningbeginRow must be called even for empty rows Then insertBack(i,j,value) must be used in for increasing j. There is no need to explicitly end a row. Finally, method compress() must be called after the last entry has been inserted. This is the most efficient access mode.; The second access mode is randow access, but you access an auxiliary matrix. Method add is used to add a value at a given location. Method compress() is then used to transfer this data to the compressed matrix. There is no way to replace an entry, you can only add.; Rows, columns, or the full matrix can be set to zero using the clear* methods. . Public Attributes; CompressedMatrix compressedMatrix;  the compressed matrix More...;  . Protected Attributes; SimplicialCholesky cholesky;  used to factorize the matrix and solve systems using Cholesky method, for symmetric positive definite matrices only. More...;  . Public Member Functions;  EigenBaseSparseMatrix (Index nbRow=0, Index nbCol=0);  ;  EigenBaseSparseMatrix (const ThisMatrix &m);  copy constructor More...;  ; void operator= (const ThisMatrix &m);  copy operator More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void setIdentity ();  ; void add (Index row, Index col, doub",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:1317,Security,access,access,1317,"seSparseMatrix< TReal > Class Template Reference . #include <EigenBaseSparseMatrix.h>. Inheritance diagram for sofa::linearalgebra::EigenBaseSparseMatrix< TReal >:. [legend]; Detailed Description; template<class TReal>; class sofa::linearalgebra::EigenBaseSparseMatrix< TReal >; Sparse matrix based on the Eigen library.; An Eigen::SparseMatrix<Real, RowMajor> matrix is used to store the data in Compressed Row Storage mode. This matrix can not be accessed randomly. Two access modes are implemented.; The first access mode consists in inserting entries in increasing row, increasing column order. Method beginRow(Index index) must be called before any entry can be appended to row i. WarningbeginRow must be called even for empty rows Then insertBack(i,j,value) must be used in for increasing j. There is no need to explicitly end a row. Finally, method compress() must be called after the last entry has been inserted. This is the most efficient access mode.; The second access mode is randow access, but you access an auxiliary matrix. Method add is used to add a value at a given location. Method compress() is then used to transfer this data to the compressed matrix. There is no way to replace an entry, you can only add.; Rows, columns, or the full matrix can be set to zero using the clear* methods. . Public Attributes; CompressedMatrix compressedMatrix;  the compressed matrix More...;  . Protected Attributes; SimplicialCholesky cholesky;  used to factorize the matrix and solve systems using Cholesky method, for symmetric positive definite matrices only. More...;  . Public Member Functions;  EigenBaseSparseMatrix (Index nbRow=0, Index nbCol=0);  ;  EigenBaseSparseMatrix (const ThisMatrix &m);  copy constructor More...;  ; void operator= (const ThisMatrix &m);  copy operator More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void setIdentity ();  ; void add (Index row, Index col, doub",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:1333,Security,access,access,1333,"seSparseMatrix< TReal > Class Template Reference . #include <EigenBaseSparseMatrix.h>. Inheritance diagram for sofa::linearalgebra::EigenBaseSparseMatrix< TReal >:. [legend]; Detailed Description; template<class TReal>; class sofa::linearalgebra::EigenBaseSparseMatrix< TReal >; Sparse matrix based on the Eigen library.; An Eigen::SparseMatrix<Real, RowMajor> matrix is used to store the data in Compressed Row Storage mode. This matrix can not be accessed randomly. Two access modes are implemented.; The first access mode consists in inserting entries in increasing row, increasing column order. Method beginRow(Index index) must be called before any entry can be appended to row i. WarningbeginRow must be called even for empty rows Then insertBack(i,j,value) must be used in for increasing j. There is no need to explicitly end a row. Finally, method compress() must be called after the last entry has been inserted. This is the most efficient access mode.; The second access mode is randow access, but you access an auxiliary matrix. Method add is used to add a value at a given location. Method compress() is then used to transfer this data to the compressed matrix. There is no way to replace an entry, you can only add.; Rows, columns, or the full matrix can be set to zero using the clear* methods. . Public Attributes; CompressedMatrix compressedMatrix;  the compressed matrix More...;  . Protected Attributes; SimplicialCholesky cholesky;  used to factorize the matrix and solve systems using Cholesky method, for symmetric positive definite matrices only. More...;  . Public Member Functions;  EigenBaseSparseMatrix (Index nbRow=0, Index nbCol=0);  ;  EigenBaseSparseMatrix (const ThisMatrix &m);  copy constructor More...;  ; void operator= (const ThisMatrix &m);  copy operator More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void setIdentity ();  ; void add (Index row, Index col, doub",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:10468,Security,access,access,10468,"st;  Multiply the transposed matrix by float vector v and add the result in vector result. More...;  ; virtual void opPMulTV (double *result, const double *v) const;  Multiply the transposed matrix by double vector v and add the result in vector result. More...;  ; virtual void opMulTM (BaseMatrix *result, BaseMatrix *m) const;  Multiply the transposed matrix by matrix m and store the result in matrix result. More...;  ; virtual void opAddM (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the matrix to the m matrix and strore the result in m. More...;  ; virtual void opAddMT (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the transposed matrix to the m matrix and strore the result in m. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual MatrixCategory getCategory () const;  ; virtual Index getBlockRows () const;  ; virtual Index getBlockCols () const;  ; virtual Index bRowSize () const;  ; virtual Index bColSize () const;  ; virtual Index getBandWidth () const;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  ; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the give",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:10561,Security,access,access,10561,"const;  Multiply the transposed matrix by matrix m and store the result in matrix result. More...;  ; virtual void opAddM (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the matrix to the m matrix and strore the result in m. More...;  ; virtual void opAddMT (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the transposed matrix to the m matrix and strore the result in m. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual MatrixCategory getCategory () const;  ; virtual Index getBlockRows () const;  ; virtual Index getBlockCols () const;  ; virtual Index bRowSize () const;  ; virtual Index bColSize () const;  ; virtual Index getBandWidth () const;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  ; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the given row of blocks. More...;  ; virtual ColBlockConstIterator bRowEnd (Index ib) const;  Get the iterator corresponding to the end of the given row of blocks. More...;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > bRowRange (Index ib) const;  Get the iterators corresponding to the beginning and end of ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:10656,Security,access,access,10656,"tual void opAddM (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the matrix to the m matrix and strore the result in m. More...;  ; virtual void opAddMT (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the transposed matrix to the m matrix and strore the result in m. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual MatrixCategory getCategory () const;  ; virtual Index getBlockRows () const;  ; virtual Index getBlockCols () const;  ; virtual Index bRowSize () const;  ; virtual Index bColSize () const;  ; virtual Index getBandWidth () const;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  ; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the given row of blocks. More...;  ; virtual ColBlockConstIterator bRowEnd (Index ib) const;  Get the iterator corresponding to the end of the given row of blocks. More...;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > bRowRange (Index ib) const;  Get the iterators corresponding to the beginning and end of the given row of blocks. More...;  ; virtual RowBlockConstIterator bRowsBegin () const;  Get the iterator",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:1614,Usability,clear,clear,1614,"< TReal >; Sparse matrix based on the Eigen library.; An Eigen::SparseMatrix<Real, RowMajor> matrix is used to store the data in Compressed Row Storage mode. This matrix can not be accessed randomly. Two access modes are implemented.; The first access mode consists in inserting entries in increasing row, increasing column order. Method beginRow(Index index) must be called before any entry can be appended to row i. WarningbeginRow must be called even for empty rows Then insertBack(i,j,value) must be used in for increasing j. There is no need to explicitly end a row. Finally, method compress() must be called after the last entry has been inserted. This is the most efficient access mode.; The second access mode is randow access, but you access an auxiliary matrix. Method add is used to add a value at a given location. Method compress() is then used to transfer this data to the compressed matrix. There is no way to replace an entry, you can only add.; Rows, columns, or the full matrix can be set to zero using the clear* methods. . Public Attributes; CompressedMatrix compressedMatrix;  the compressed matrix More...;  . Protected Attributes; SimplicialCholesky cholesky;  used to factorize the matrix and solve systems using Cholesky method, for symmetric positive definite matrices only. More...;  . Public Member Functions;  EigenBaseSparseMatrix (Index nbRow=0, Index nbCol=0);  ;  EigenBaseSparseMatrix (const ThisMatrix &m);  copy constructor More...;  ; void operator= (const ThisMatrix &m);  copy operator More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void setIdentity ();  ; void add (Index row, Index col, double value) override;  Schedule the addition of the value at the given place. Scheduled additions must be finalized using function compress(). More...;  ; void beginRow (Index index);  ; void insertBack (Index row, Index col, Real value);  ; Real & coeffRef (Index i, In",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:3417,Usability,clear,clears,3417,"lace. Scheduled additions must be finalized using function compress(). More...;  ; void beginRow (Index index);  ; void insertBack (Index row, Index col, Real value);  ; Real & coeffRef (Index i, Index j);  Return a reference to the given entry in the compressed matrix.There can (must ?) be a value at this place already. Efficient only if the it is at the last place of the compressed matrix. More...;  ; void copy (const EigenBaseSparseMatrix &m, unsigned nbCol, unsigned shift);  ; void resize (Index nbRow, Index nbCol) override;  Resize the matrix without preserving the data (the matrix is set to zero) More...;  ; Index rowSize (void) const override;  number of rows More...;  ; Index colSize (void) const override;  number of columns More...;  ; void reserve (typename CompressedMatrix::Index reserveSize);  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void compress () override;  Add the values from the scheduled list, and clears the schedule list. More...;  ; Index * getRowBegin ();  ; Index * getColsIndex ();  ; Real * getColsValue ();  ; void clearRow (Index i) override;  Set all the entries of a row to 0. More...;  ; void clearRows (Index imin, Index imax) override;  Set all the entries of rows imin to imax-1 to 0. More...;  ; void clearCol (Index col) override;  Clears the all the entries of column imin to column imax-1. Not efficient ! More...;  ; void clearCols (Index imin, Index imax) override;  Set all the entries of column i and of row i to 0. Not efficient ! More...;  ; void clearRowCol (Index i) override;  Clears all the entries of rows imin to imax-1 and columns imin to imax-1. More...;  ; void clearRowsCols (Index imin, Index imax) override;  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; void clear () override;  Set all values to 0, by resizing to the same size. More...;  ; void mult (VectorEigen &result, const VectorEigen &da",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:3542,Usability,clear,clearRow,3542," row, Index col, Real value);  ; Real & coeffRef (Index i, Index j);  Return a reference to the given entry in the compressed matrix.There can (must ?) be a value at this place already. Efficient only if the it is at the last place of the compressed matrix. More...;  ; void copy (const EigenBaseSparseMatrix &m, unsigned nbCol, unsigned shift);  ; void resize (Index nbRow, Index nbCol) override;  Resize the matrix without preserving the data (the matrix is set to zero) More...;  ; Index rowSize (void) const override;  number of rows More...;  ; Index colSize (void) const override;  number of columns More...;  ; void reserve (typename CompressedMatrix::Index reserveSize);  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void compress () override;  Add the values from the scheduled list, and clears the schedule list. More...;  ; Index * getRowBegin ();  ; Index * getColsIndex ();  ; Real * getColsValue ();  ; void clearRow (Index i) override;  Set all the entries of a row to 0. More...;  ; void clearRows (Index imin, Index imax) override;  Set all the entries of rows imin to imax-1 to 0. More...;  ; void clearCol (Index col) override;  Clears the all the entries of column imin to column imax-1. Not efficient ! More...;  ; void clearCols (Index imin, Index imax) override;  Set all the entries of column i and of row i to 0. Not efficient ! More...;  ; void clearRowCol (Index i) override;  Clears all the entries of rows imin to imax-1 and columns imin to imax-1. More...;  ; void clearRowsCols (Index imin, Index imax) override;  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; void clear () override;  Set all values to 0, by resizing to the same size. More...;  ; void mult (VectorEigen &result, const VectorEigen &data);  Matrix-vector product. More...;  ; void mult_MT (VectorEigen &result, const VectorEigen &data);  Matrix-vector product openmp multi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:3624,Usability,clear,clearRows,3624," can (must ?) be a value at this place already. Efficient only if the it is at the last place of the compressed matrix. More...;  ; void copy (const EigenBaseSparseMatrix &m, unsigned nbCol, unsigned shift);  ; void resize (Index nbRow, Index nbCol) override;  Resize the matrix without preserving the data (the matrix is set to zero) More...;  ; Index rowSize (void) const override;  number of rows More...;  ; Index colSize (void) const override;  number of columns More...;  ; void reserve (typename CompressedMatrix::Index reserveSize);  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void compress () override;  Add the values from the scheduled list, and clears the schedule list. More...;  ; Index * getRowBegin ();  ; Index * getColsIndex ();  ; Real * getColsValue ();  ; void clearRow (Index i) override;  Set all the entries of a row to 0. More...;  ; void clearRows (Index imin, Index imax) override;  Set all the entries of rows imin to imax-1 to 0. More...;  ; void clearCol (Index col) override;  Clears the all the entries of column imin to column imax-1. Not efficient ! More...;  ; void clearCols (Index imin, Index imax) override;  Set all the entries of column i and of row i to 0. Not efficient ! More...;  ; void clearRowCol (Index i) override;  Clears all the entries of rows imin to imax-1 and columns imin to imax-1. More...;  ; void clearRowsCols (Index imin, Index imax) override;  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; void clear () override;  Set all values to 0, by resizing to the same size. More...;  ; void mult (VectorEigen &result, const VectorEigen &data);  Matrix-vector product. More...;  ; void mult_MT (VectorEigen &result, const VectorEigen &data);  Matrix-vector product openmp multithreaded. More...;  ; template<class V1 , class V2 > ; void multVector (V1 &output, const V2 &input);  Matrix-Vector product (dense vector",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:3736,Usability,clear,clearCol,3736,"d matrix. More...;  ; void copy (const EigenBaseSparseMatrix &m, unsigned nbCol, unsigned shift);  ; void resize (Index nbRow, Index nbCol) override;  Resize the matrix without preserving the data (the matrix is set to zero) More...;  ; Index rowSize (void) const override;  number of rows More...;  ; Index colSize (void) const override;  number of columns More...;  ; void reserve (typename CompressedMatrix::Index reserveSize);  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void compress () override;  Add the values from the scheduled list, and clears the schedule list. More...;  ; Index * getRowBegin ();  ; Index * getColsIndex ();  ; Real * getColsValue ();  ; void clearRow (Index i) override;  Set all the entries of a row to 0. More...;  ; void clearRows (Index imin, Index imax) override;  Set all the entries of rows imin to imax-1 to 0. More...;  ; void clearCol (Index col) override;  Clears the all the entries of column imin to column imax-1. Not efficient ! More...;  ; void clearCols (Index imin, Index imax) override;  Set all the entries of column i and of row i to 0. Not efficient ! More...;  ; void clearRowCol (Index i) override;  Clears all the entries of rows imin to imax-1 and columns imin to imax-1. More...;  ; void clearRowsCols (Index imin, Index imax) override;  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; void clear () override;  Set all values to 0, by resizing to the same size. More...;  ; void mult (VectorEigen &result, const VectorEigen &data);  Matrix-vector product. More...;  ; void mult_MT (VectorEigen &result, const VectorEigen &data);  Matrix-vector product openmp multithreaded. More...;  ; template<class V1 , class V2 > ; void multVector (V1 &output, const V2 &input);  Matrix-Vector product (dense vector with contiguous memory layout) More...;  ; template<class V > ; V operator* (const V &input);  Matrix-Vector p",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:3861,Usability,clear,clearCols,3861,"ndex nbCol) override;  Resize the matrix without preserving the data (the matrix is set to zero) More...;  ; Index rowSize (void) const override;  number of rows More...;  ; Index colSize (void) const override;  number of columns More...;  ; void reserve (typename CompressedMatrix::Index reserveSize);  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void compress () override;  Add the values from the scheduled list, and clears the schedule list. More...;  ; Index * getRowBegin ();  ; Index * getColsIndex ();  ; Real * getColsValue ();  ; void clearRow (Index i) override;  Set all the entries of a row to 0. More...;  ; void clearRows (Index imin, Index imax) override;  Set all the entries of rows imin to imax-1 to 0. More...;  ; void clearCol (Index col) override;  Clears the all the entries of column imin to column imax-1. Not efficient ! More...;  ; void clearCols (Index imin, Index imax) override;  Set all the entries of column i and of row i to 0. Not efficient ! More...;  ; void clearRowCol (Index i) override;  Clears all the entries of rows imin to imax-1 and columns imin to imax-1. More...;  ; void clearRowsCols (Index imin, Index imax) override;  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; void clear () override;  Set all values to 0, by resizing to the same size. More...;  ; void mult (VectorEigen &result, const VectorEigen &data);  Matrix-vector product. More...;  ; void mult_MT (VectorEigen &result, const VectorEigen &data);  Matrix-vector product openmp multithreaded. More...;  ; template<class V1 , class V2 > ; void multVector (V1 &output, const V2 &input);  Matrix-Vector product (dense vector with contiguous memory layout) More...;  ; template<class V > ; V operator* (const V &input);  Matrix-Vector product (dense vector with contiguous memory layout) More...;  ; bool choleskyDecompose ();  Try to compute the LDLT decompositi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:3991,Usability,clear,clearRowCol,3991," override;  number of rows More...;  ; Index colSize (void) const override;  number of columns More...;  ; void reserve (typename CompressedMatrix::Index reserveSize);  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void compress () override;  Add the values from the scheduled list, and clears the schedule list. More...;  ; Index * getRowBegin ();  ; Index * getColsIndex ();  ; Real * getColsValue ();  ; void clearRow (Index i) override;  Set all the entries of a row to 0. More...;  ; void clearRows (Index imin, Index imax) override;  Set all the entries of rows imin to imax-1 to 0. More...;  ; void clearCol (Index col) override;  Clears the all the entries of column imin to column imax-1. Not efficient ! More...;  ; void clearCols (Index imin, Index imax) override;  Set all the entries of column i and of row i to 0. Not efficient ! More...;  ; void clearRowCol (Index i) override;  Clears all the entries of rows imin to imax-1 and columns imin to imax-1. More...;  ; void clearRowsCols (Index imin, Index imax) override;  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; void clear () override;  Set all values to 0, by resizing to the same size. More...;  ; void mult (VectorEigen &result, const VectorEigen &data);  Matrix-vector product. More...;  ; void mult_MT (VectorEigen &result, const VectorEigen &data);  Matrix-vector product openmp multithreaded. More...;  ; template<class V1 , class V2 > ; void multVector (V1 &output, const V2 &input);  Matrix-Vector product (dense vector with contiguous memory layout) More...;  ; template<class V > ; V operator* (const V &input);  Matrix-Vector product (dense vector with contiguous memory layout) More...;  ; bool choleskyDecompose ();  Try to compute the LDLT decomposition, and return true if success. The matrix is unchanged. More...;  ; void choleskySolve (VectorEigen &x, const VectorEigen &b) const;  ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:4115,Usability,clear,clearRowsCols,4115,"mpressedMatrix::Index reserveSize);  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void compress () override;  Add the values from the scheduled list, and clears the schedule list. More...;  ; Index * getRowBegin ();  ; Index * getColsIndex ();  ; Real * getColsValue ();  ; void clearRow (Index i) override;  Set all the entries of a row to 0. More...;  ; void clearRows (Index imin, Index imax) override;  Set all the entries of rows imin to imax-1 to 0. More...;  ; void clearCol (Index col) override;  Clears the all the entries of column imin to column imax-1. Not efficient ! More...;  ; void clearCols (Index imin, Index imax) override;  Set all the entries of column i and of row i to 0. Not efficient ! More...;  ; void clearRowCol (Index i) override;  Clears all the entries of rows imin to imax-1 and columns imin to imax-1. More...;  ; void clearRowsCols (Index imin, Index imax) override;  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; void clear () override;  Set all values to 0, by resizing to the same size. More...;  ; void mult (VectorEigen &result, const VectorEigen &data);  Matrix-vector product. More...;  ; void mult_MT (VectorEigen &result, const VectorEigen &data);  Matrix-vector product openmp multithreaded. More...;  ; template<class V1 , class V2 > ; void multVector (V1 &output, const V2 &input);  Matrix-Vector product (dense vector with contiguous memory layout) More...;  ; template<class V > ; V operator* (const V &input);  Matrix-Vector product (dense vector with contiguous memory layout) More...;  ; bool choleskyDecompose ();  Try to compute the LDLT decomposition, and return true if success. The matrix is unchanged. More...;  ; void choleskySolve (VectorEigen &x, const VectorEigen &b) const;  Solve Ax=b, where A is this matrix. WARNING: ldltDecompose() must be called first. x and b can be the same vector. More...;  ; void ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:4255,Usability,clear,clear,4255,"ment at row i, column j (using 0-based indices) More...;  ; void compress () override;  Add the values from the scheduled list, and clears the schedule list. More...;  ; Index * getRowBegin ();  ; Index * getColsIndex ();  ; Real * getColsValue ();  ; void clearRow (Index i) override;  Set all the entries of a row to 0. More...;  ; void clearRows (Index imin, Index imax) override;  Set all the entries of rows imin to imax-1 to 0. More...;  ; void clearCol (Index col) override;  Clears the all the entries of column imin to column imax-1. Not efficient ! More...;  ; void clearCols (Index imin, Index imax) override;  Set all the entries of column i and of row i to 0. Not efficient ! More...;  ; void clearRowCol (Index i) override;  Clears all the entries of rows imin to imax-1 and columns imin to imax-1. More...;  ; void clearRowsCols (Index imin, Index imax) override;  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; void clear () override;  Set all values to 0, by resizing to the same size. More...;  ; void mult (VectorEigen &result, const VectorEigen &data);  Matrix-vector product. More...;  ; void mult_MT (VectorEigen &result, const VectorEigen &data);  Matrix-vector product openmp multithreaded. More...;  ; template<class V1 , class V2 > ; void multVector (V1 &output, const V2 &input);  Matrix-Vector product (dense vector with contiguous memory layout) More...;  ; template<class V > ; V operator* (const V &input);  Matrix-Vector product (dense vector with contiguous memory layout) More...;  ; bool choleskyDecompose ();  Try to compute the LDLT decomposition, and return true if success. The matrix is unchanged. More...;  ; void choleskySolve (VectorEigen &x, const VectorEigen &b) const;  Solve Ax=b, where A is this matrix. WARNING: ldltDecompose() must be called first. x and b can be the same vector. More...;  ; void addToBaseMatrix (BaseMatrix *matrix, SReal factor, Index offset) const;  add this EigenBaseSparseMatrix to a BaseM",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:7460,Usability,clear,clear,7460,"r performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; virtual void opPMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and add the result in vector result. More...;  ; virtual void opPMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and add the result in vector result. More...;  ; virtual void opMulTV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  M",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:19401,Usability,clear,clear,19401,"::linearalgebra::BaseMatrix. ◆ addToBaseMatrix(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::addToBaseMatrix ; (; BaseMatrix * ; matrix, . SReal ; factor, . Index ; offset . ); const. inline . add this EigenBaseSparseMatrix to a BaseMatrix at the offset and multiplied by factor . ◆ beginRow(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::beginRow ; (; Index ; index). inline . ◆ choleskyDecompose(). template<class TReal > . bool sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::choleskyDecompose ; (; ). inline . Try to compute the LDLT decomposition, and return true if success. The matrix is unchanged. . ◆ choleskySolve(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::choleskySolve ; (; VectorEigen & ; x, . const VectorEigen & ; b . ); const. inline . Solve Ax=b, where A is this matrix. WARNING: ldltDecompose() must be called first. x and b can be the same vector. . ◆ clear(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clear ; (; ). inlineoverridevirtual . Set all values to 0, by resizing to the same size. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearCol ; (; Index ; col). inlineoverridevirtual . Clears the all the entries of column imin to column imax-1. Not efficient ! ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCols(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearCols ; (; Index ; imin, . Index ; imax . ). inlineoverridevirtual . Set all the entries of column i and of row i to 0. Not efficient ! ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRow ; (; Index ; i). inlineoverridevirtual . Set all the entries of a row to 0. ; Reimplemented from so",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:19493,Usability,clear,clear,19493,"eal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::addToBaseMatrix ; (; BaseMatrix * ; matrix, . SReal ; factor, . Index ; offset . ); const. inline . add this EigenBaseSparseMatrix to a BaseMatrix at the offset and multiplied by factor . ◆ beginRow(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::beginRow ; (; Index ; index). inline . ◆ choleskyDecompose(). template<class TReal > . bool sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::choleskyDecompose ; (; ). inline . Try to compute the LDLT decomposition, and return true if success. The matrix is unchanged. . ◆ choleskySolve(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::choleskySolve ; (; VectorEigen & ; x, . const VectorEigen & ; b . ); const. inline . Solve Ax=b, where A is this matrix. WARNING: ldltDecompose() must be called first. x and b can be the same vector. . ◆ clear(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clear ; (; ). inlineoverridevirtual . Set all values to 0, by resizing to the same size. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearCol ; (; Index ; col). inlineoverridevirtual . Clears the all the entries of column imin to column imax-1. Not efficient ! ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCols(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearCols ; (; Index ; imin, . Index ; imax . ). inlineoverridevirtual . Set all the entries of column i and of row i to 0. Not efficient ! ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRow ; (; Index ; i). inlineoverridevirtual . Set all the entries of a row to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<class TRe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:19630,Usability,clear,clearCol,19630,". add this EigenBaseSparseMatrix to a BaseMatrix at the offset and multiplied by factor . ◆ beginRow(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::beginRow ; (; Index ; index). inline . ◆ choleskyDecompose(). template<class TReal > . bool sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::choleskyDecompose ; (; ). inline . Try to compute the LDLT decomposition, and return true if success. The matrix is unchanged. . ◆ choleskySolve(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::choleskySolve ; (; VectorEigen & ; x, . const VectorEigen & ; b . ); const. inline . Solve Ax=b, where A is this matrix. WARNING: ldltDecompose() must be called first. x and b can be the same vector. . ◆ clear(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clear ; (; ). inlineoverridevirtual . Set all values to 0, by resizing to the same size. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearCol ; (; Index ; col). inlineoverridevirtual . Clears the all the entries of column imin to column imax-1. Not efficient ! ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCols(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearCols ; (; Index ; imin, . Index ; imax . ). inlineoverridevirtual . Set all the entries of column i and of row i to 0. Not efficient ! ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRow ; (; Index ; i). inlineoverridevirtual . Set all the entries of a row to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Clears all the entries of rows imin to imax-1 ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:19725,Usability,clear,clearCol,19725,"ed by factor . ◆ beginRow(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::beginRow ; (; Index ; index). inline . ◆ choleskyDecompose(). template<class TReal > . bool sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::choleskyDecompose ; (; ). inline . Try to compute the LDLT decomposition, and return true if success. The matrix is unchanged. . ◆ choleskySolve(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::choleskySolve ; (; VectorEigen & ; x, . const VectorEigen & ; b . ); const. inline . Solve Ax=b, where A is this matrix. WARNING: ldltDecompose() must be called first. x and b can be the same vector. . ◆ clear(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clear ; (; ). inlineoverridevirtual . Set all values to 0, by resizing to the same size. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearCol ; (; Index ; col). inlineoverridevirtual . Clears the all the entries of column imin to column imax-1. Not efficient ! ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCols(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearCols ; (; Index ; imin, . Index ; imax . ). inlineoverridevirtual . Set all the entries of column i and of row i to 0. Not efficient ! ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRow ; (; Index ; i). inlineoverridevirtual . Set all the entries of a row to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Clears all the entries of rows imin to imax-1 and columns imin to imax-1. ; Reimplemented from sofa::linearalgebra::BaseM",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:19909,Usability,clear,clearCols,19909,"sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::choleskyDecompose ; (; ). inline . Try to compute the LDLT decomposition, and return true if success. The matrix is unchanged. . ◆ choleskySolve(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::choleskySolve ; (; VectorEigen & ; x, . const VectorEigen & ; b . ); const. inline . Solve Ax=b, where A is this matrix. WARNING: ldltDecompose() must be called first. x and b can be the same vector. . ◆ clear(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clear ; (; ). inlineoverridevirtual . Set all values to 0, by resizing to the same size. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearCol ; (; Index ; col). inlineoverridevirtual . Clears the all the entries of column imin to column imax-1. Not efficient ! ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCols(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearCols ; (; Index ; imin, . Index ; imax . ). inlineoverridevirtual . Set all the entries of column i and of row i to 0. Not efficient ! ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRow ; (; Index ; i). inlineoverridevirtual . Set all the entries of a row to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Clears all the entries of rows imin to imax-1 and columns imin to imax-1. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRows(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRows ; (; Index ; imin, . Index ; imax . ). inlineoverridevirtual . Set all the entries of rows",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:20005,Usability,clear,clearCols,20005,". inline . Try to compute the LDLT decomposition, and return true if success. The matrix is unchanged. . ◆ choleskySolve(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::choleskySolve ; (; VectorEigen & ; x, . const VectorEigen & ; b . ); const. inline . Solve Ax=b, where A is this matrix. WARNING: ldltDecompose() must be called first. x and b can be the same vector. . ◆ clear(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clear ; (; ). inlineoverridevirtual . Set all values to 0, by resizing to the same size. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearCol ; (; Index ; col). inlineoverridevirtual . Clears the all the entries of column imin to column imax-1. Not efficient ! ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCols(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearCols ; (; Index ; imin, . Index ; imax . ). inlineoverridevirtual . Set all the entries of column i and of row i to 0. Not efficient ! ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRow ; (; Index ; i). inlineoverridevirtual . Set all the entries of a row to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Clears all the entries of rows imin to imax-1 and columns imin to imax-1. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRows(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRows ; (; Index ; imin, . Index ; imax . ). inlineoverridevirtual . Set all the entries of rows imin to imax-1 to 0. ; Set all the entries of a column to 0. Not efficient !",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:20201,Usability,clear,clearRow,20201,"Solve ; (; VectorEigen & ; x, . const VectorEigen & ; b . ); const. inline . Solve Ax=b, where A is this matrix. WARNING: ldltDecompose() must be called first. x and b can be the same vector. . ◆ clear(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clear ; (; ). inlineoverridevirtual . Set all values to 0, by resizing to the same size. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearCol ; (; Index ; col). inlineoverridevirtual . Clears the all the entries of column imin to column imax-1. Not efficient ! ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCols(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearCols ; (; Index ; imin, . Index ; imax . ). inlineoverridevirtual . Set all the entries of column i and of row i to 0. Not efficient ! ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRow ; (; Index ; i). inlineoverridevirtual . Set all the entries of a row to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Clears all the entries of rows imin to imax-1 and columns imin to imax-1. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRows(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRows ; (; Index ; imin, . Index ; imax . ). inlineoverridevirtual . Set all the entries of rows imin to imax-1 to 0. ; Set all the entries of a column to 0. Not efficient ! ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowsCols(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRowsCols ; (; Index ; imin, . Index ; imax . ). inli",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:20296,Usability,clear,clearRow,20296," . Solve Ax=b, where A is this matrix. WARNING: ldltDecompose() must be called first. x and b can be the same vector. . ◆ clear(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clear ; (; ). inlineoverridevirtual . Set all values to 0, by resizing to the same size. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearCol ; (; Index ; col). inlineoverridevirtual . Clears the all the entries of column imin to column imax-1. Not efficient ! ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCols(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearCols ; (; Index ; imin, . Index ; imax . ). inlineoverridevirtual . Set all the entries of column i and of row i to 0. Not efficient ! ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRow ; (; Index ; i). inlineoverridevirtual . Set all the entries of a row to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Clears all the entries of rows imin to imax-1 and columns imin to imax-1. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRows(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRows ; (; Index ; imin, . Index ; imax . ). inlineoverridevirtual . Set all the entries of rows imin to imax-1 to 0. ; Set all the entries of a column to 0. Not efficient ! ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowsCols(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRowsCols ; (; Index ; imin, . Index ; imax . ). inlineoverridevirtual . Clears all the values in rows imin to imax-1 and colum",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:20437,Usability,clear,clearRowCol,20437,"fa::linearalgebra::EigenBaseSparseMatrix< TReal >::clear ; (; ). inlineoverridevirtual . Set all values to 0, by resizing to the same size. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearCol ; (; Index ; col). inlineoverridevirtual . Clears the all the entries of column imin to column imax-1. Not efficient ! ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCols(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearCols ; (; Index ; imin, . Index ; imax . ). inlineoverridevirtual . Set all the entries of column i and of row i to 0. Not efficient ! ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRow ; (; Index ; i). inlineoverridevirtual . Set all the entries of a row to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Clears all the entries of rows imin to imax-1 and columns imin to imax-1. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRows(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRows ; (; Index ; imin, . Index ; imax . ). inlineoverridevirtual . Set all the entries of rows imin to imax-1 to 0. ; Set all the entries of a column to 0. Not efficient ! ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowsCols(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRowsCols ; (; Index ; imin, . Index ; imax . ). inlineoverridevirtual . Clears all the values in rows imin to imax-1 and columns imin to imax-1. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ coeffRef(). template<class TReal > . Real& sofa::linearalgebra::EigenBaseSparseMatrix< TR",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:20535,Usability,clear,clearRowCol,20535,"devirtual . Set all values to 0, by resizing to the same size. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearCol ; (; Index ; col). inlineoverridevirtual . Clears the all the entries of column imin to column imax-1. Not efficient ! ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCols(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearCols ; (; Index ; imin, . Index ; imax . ). inlineoverridevirtual . Set all the entries of column i and of row i to 0. Not efficient ! ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRow ; (; Index ; i). inlineoverridevirtual . Set all the entries of a row to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Clears all the entries of rows imin to imax-1 and columns imin to imax-1. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRows(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRows ; (; Index ; imin, . Index ; imax . ). inlineoverridevirtual . Set all the entries of rows imin to imax-1 to 0. ; Set all the entries of a column to 0. Not efficient ! ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowsCols(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRowsCols ; (; Index ; imin, . Index ; imax . ). inlineoverridevirtual . Clears all the values in rows imin to imax-1 and columns imin to imax-1. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ coeffRef(). template<class TReal > . Real& sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::coeffRef ; (; Index ; i, . Index ; j . ). inline . Return a reference ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:20718,Usability,clear,clearRows,20718,">::clearCol ; (; Index ; col). inlineoverridevirtual . Clears the all the entries of column imin to column imax-1. Not efficient ! ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCols(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearCols ; (; Index ; imin, . Index ; imax . ). inlineoverridevirtual . Set all the entries of column i and of row i to 0. Not efficient ! ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRow ; (; Index ; i). inlineoverridevirtual . Set all the entries of a row to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Clears all the entries of rows imin to imax-1 and columns imin to imax-1. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRows(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRows ; (; Index ; imin, . Index ; imax . ). inlineoverridevirtual . Set all the entries of rows imin to imax-1 to 0. ; Set all the entries of a column to 0. Not efficient ! ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowsCols(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRowsCols ; (; Index ; imin, . Index ; imax . ). inlineoverridevirtual . Clears all the values in rows imin to imax-1 and columns imin to imax-1. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ coeffRef(). template<class TReal > . Real& sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::coeffRef ; (; Index ; i, . Index ; j . ). inline . Return a reference to the given entry in the compressed matrix.There can (must ?) be a value at this place already. Efficient only if the it is at the last place of the compressed matrix. . ◆ colSize(). template<class TRea",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:20814,Usability,clear,clearRows,20814,"ries of column imin to column imax-1. Not efficient ! ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCols(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearCols ; (; Index ; imin, . Index ; imax . ). inlineoverridevirtual . Set all the entries of column i and of row i to 0. Not efficient ! ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRow ; (; Index ; i). inlineoverridevirtual . Set all the entries of a row to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Clears all the entries of rows imin to imax-1 and columns imin to imax-1. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRows(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRows ; (; Index ; imin, . Index ; imax . ). inlineoverridevirtual . Set all the entries of rows imin to imax-1 to 0. ; Set all the entries of a column to 0. Not efficient ! ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowsCols(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRowsCols ; (; Index ; imin, . Index ; imax . ). inlineoverridevirtual . Clears all the values in rows imin to imax-1 and columns imin to imax-1. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ coeffRef(). template<class TReal > . Real& sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::coeffRef ; (; Index ; i, . Index ; j . ). inline . Return a reference to the given entry in the compressed matrix.There can (must ?) be a value at this place already. Efficient only if the it is at the last place of the compressed matrix. . ◆ colSize(). template<class TReal > . Index sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::colSize ; (;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:21048,Usability,clear,clearRowsCols,21048,"inlineoverridevirtual . Set all the entries of column i and of row i to 0. Not efficient ! ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRow ; (; Index ; i). inlineoverridevirtual . Set all the entries of a row to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Clears all the entries of rows imin to imax-1 and columns imin to imax-1. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRows(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRows ; (; Index ; imin, . Index ; imax . ). inlineoverridevirtual . Set all the entries of rows imin to imax-1 to 0. ; Set all the entries of a column to 0. Not efficient ! ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowsCols(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRowsCols ; (; Index ; imin, . Index ; imax . ). inlineoverridevirtual . Clears all the values in rows imin to imax-1 and columns imin to imax-1. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ coeffRef(). template<class TReal > . Real& sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::coeffRef ; (; Index ; i, . Index ; j . ). inline . Return a reference to the given entry in the compressed matrix.There can (must ?) be a value at this place already. Efficient only if the it is at the last place of the compressed matrix. . ◆ colSize(). template<class TReal > . Index sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::colSize ; (; void ; ); const. inlineoverridevirtual . number of columns ; Implements sofa::linearalgebra::BaseMatrix. ◆ compress(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::compress ; (; ). inlineoverridevirtual . Add the val",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:21148,Usability,clear,clearRowsCols,21148,"ficient ! ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRow ; (; Index ; i). inlineoverridevirtual . Set all the entries of a row to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Clears all the entries of rows imin to imax-1 and columns imin to imax-1. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRows(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRows ; (; Index ; imin, . Index ; imax . ). inlineoverridevirtual . Set all the entries of rows imin to imax-1 to 0. ; Set all the entries of a column to 0. Not efficient ! ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowsCols(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRowsCols ; (; Index ; imin, . Index ; imax . ). inlineoverridevirtual . Clears all the values in rows imin to imax-1 and columns imin to imax-1. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ coeffRef(). template<class TReal > . Real& sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::coeffRef ; (; Index ; i, . Index ; j . ). inline . Return a reference to the given entry in the compressed matrix.There can (must ?) be a value at this place already. Efficient only if the it is at the last place of the compressed matrix. . ◆ colSize(). template<class TReal > . Index sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::colSize ; (; void ; ); const. inlineoverridevirtual . number of columns ; Implements sofa::linearalgebra::BaseMatrix. ◆ compress(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::compress ; (; ). inlineoverridevirtual . Add the values from the scheduled list, and clears the schedule list. ; See alsoset(Index i,",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:22088,Usability,clear,clears,22088,"s TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::clearRowsCols ; (; Index ; imin, . Index ; imax . ). inlineoverridevirtual . Clears all the values in rows imin to imax-1 and columns imin to imax-1. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ coeffRef(). template<class TReal > . Real& sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::coeffRef ; (; Index ; i, . Index ; j . ). inline . Return a reference to the given entry in the compressed matrix.There can (must ?) be a value at this place already. Efficient only if the it is at the last place of the compressed matrix. . ◆ colSize(). template<class TReal > . Index sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::colSize ; (; void ; ); const. inlineoverridevirtual . number of columns ; Implements sofa::linearalgebra::BaseMatrix. ◆ compress(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::compress ; (; ). inlineoverridevirtual . Add the values from the scheduled list, and clears the schedule list. ; See alsoset(Index i, Index j, double v). ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ copy(). template<class TReal > . void sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::copy ; (; const EigenBaseSparseMatrix< TReal > & ; m, . unsigned ; nbCol, . unsigned ; shift . ). inline . Clear and resize this to (m.rows,nbCol) and initialize it with the given matrix, columns shifted of the given value: this(i,j+shift) = m(i,j). @precond nbCol >= m.cols + shift . ◆ element(). template<class TReal > . SReal sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::element ; (; Index ; i, . Index ; j . ); const. inlineoverridevirtual . Read the value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ getColsIndex(). template<class TReal > . Index* sofa::linearalgebra::EigenBaseSparseMatrix< TReal >::getColsIndex ; (; ). inline . ◆ getColsValue(). template<class TReal > . Real* sofa::linearalgebra",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix-members.html:306,Modifiability,inherit,inherited,306,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes > Member List . This is the complete list of members for sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >, including all inherited members. add(Index row, Index col, double value) overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat3x3d &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat3x3f &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat2x2d &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat2x2f &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat6x6d &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat6x6f &_M)sofa::linearalgebra::BaseMatrixvirtual; addBlock(unsigned row, unsigned col, const Block &b)sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >inline; addMult(OutVecDeriv &result, const InVecDeriv &data) constsofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >inline; addMult(OutVecDeriv &result, const InVecDeriv &data, const OutReal fact) constsofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >inline; addMult_impl(OutType &result, const InType &data, Real fact) constsofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >inlineprotected; addMultTranspose(InVecDeriv &result, const OutVecDeriv &data) constsofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >inline; addMultTranspose(InVecDeriv &result, const OutVecDeriv &data, const OutReal fact) constsofa::linearalgebra",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix-members.html:7100,Usability,clear,clear,7100,"nSparseMatrix< InDataTypes, OutDataTypes >protected; BlockRowMap typedefsofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >protected; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; choleskysofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >protected; choleskyDecompose()sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inline; choleskySolve(VectorEigen &x, const VectorEigen &b) constsofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inline; clear() overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; sofa::linearalgebra::BaseMatrix::clear(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearCol(Index col) overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; clearCols(Index imin, Index imax) overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; clearRow(Index i) overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; clearRowCol(Index i) overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; clearRows(Index imin, Index imax) overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; clearRowsCols(Index imin, Index imax) overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; coeffRef(Index i, Index j)sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inline; cols(void) constsofa:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix-members.html:7228,Usability,clear,clear,7228,"DataTypes >protected; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; choleskysofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >protected; choleskyDecompose()sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inline; choleskySolve(VectorEigen &x, const VectorEigen &b) constsofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inline; clear() overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; sofa::linearalgebra::BaseMatrix::clear(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearCol(Index col) overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; clearCols(Index imin, Index imax) overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; clearRow(Index i) overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; clearRowCol(Index i) overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; clearRows(Index imin, Index imax) overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; clearRowsCols(Index imin, Index imax) overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; coeffRef(Index i, Index j)sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inline; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >in",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix-members.html:7297,Usability,clear,clearCol,7297,"linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; choleskysofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >protected; choleskyDecompose()sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inline; choleskySolve(VectorEigen &x, const VectorEigen &b) constsofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inline; clear() overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; sofa::linearalgebra::BaseMatrix::clear(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearCol(Index col) overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; clearCols(Index imin, Index imax) overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; clearRow(Index i) overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; clearRowCol(Index i) overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; clearRows(Index imin, Index imax) overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; clearRowsCols(Index imin, Index imax) overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; coeffRef(Index i, Index j)sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inline; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; compress() overridesofa::linearalgebra::EigenBaseSparseMat",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix-members.html:7404,Usability,clear,clearCols,7404,"End(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; choleskysofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >protected; choleskyDecompose()sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inline; choleskySolve(VectorEigen &x, const VectorEigen &b) constsofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inline; clear() overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; sofa::linearalgebra::BaseMatrix::clear(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearCol(Index col) overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; clearCols(Index imin, Index imax) overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; clearRow(Index i) overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; clearRowCol(Index i) overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; clearRows(Index imin, Index imax) overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; clearRowsCols(Index imin, Index imax) overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; coeffRef(Index i, Index j)sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inline; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; compress() overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; compressedMatrixsofa::linearalgebra::EigenBaseSparseMatrix< OutData",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix-members.html:7525,Usability,clear,clearRow,7525,"xinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; choleskysofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >protected; choleskyDecompose()sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inline; choleskySolve(VectorEigen &x, const VectorEigen &b) constsofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inline; clear() overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; sofa::linearalgebra::BaseMatrix::clear(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearCol(Index col) overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; clearCols(Index imin, Index imax) overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; clearRow(Index i) overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; clearRowCol(Index i) overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; clearRows(Index imin, Index imax) overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; clearRowsCols(Index imin, Index imax) overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; coeffRef(Index i, Index j)sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inline; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; compress() overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; compressedMatrixsofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >; CompressedMatrix typedefsofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >; copy(const Ei",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix-members.html:7630,Usability,clear,clearRowCol,7630,"ralgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; choleskysofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >protected; choleskyDecompose()sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inline; choleskySolve(VectorEigen &x, const VectorEigen &b) constsofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inline; clear() overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; sofa::linearalgebra::BaseMatrix::clear(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearCol(Index col) overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; clearCols(Index imin, Index imax) overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; clearRow(Index i) overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; clearRowCol(Index i) overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; clearRows(Index imin, Index imax) overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; clearRowsCols(Index imin, Index imax) overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; coeffRef(Index i, Index j)sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inline; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; compress() overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; compressedMatrixsofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >; CompressedMatrix typedefsofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >; copy(const EigenBaseSparseMatrix &m, unsigned nbCol, unsigned shift)sofa::linearalgebra::EigenBaseSparseMatrix< OutData",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix-members.html:7738,Usability,clear,clearRows,7738,"() constsofa::linearalgebra::BaseMatrixinlinevirtual; choleskysofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >protected; choleskyDecompose()sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inline; choleskySolve(VectorEigen &x, const VectorEigen &b) constsofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inline; clear() overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; sofa::linearalgebra::BaseMatrix::clear(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearCol(Index col) overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; clearCols(Index imin, Index imax) overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; clearRow(Index i) overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; clearRowCol(Index i) overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; clearRows(Index imin, Index imax) overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; clearRowsCols(Index imin, Index imax) overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; coeffRef(Index i, Index j)sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inline; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; compress() overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; compressedMatrixsofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >; CompressedMatrix typedefsofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >; copy(const EigenBaseSparseMatrix &m, unsigned nbCol, unsigned shift)sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inline; copyFrom(const CompressedRowSparseMatrix< type::Mat< Nout, Nin, AnyReal > > &crs)sofa:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix-members.html:7859,Usability,clear,clearRowsCols,7859,"l >protected; choleskyDecompose()sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inline; choleskySolve(VectorEigen &x, const VectorEigen &b) constsofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inline; clear() overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; sofa::linearalgebra::BaseMatrix::clear(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearCol(Index col) overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; clearCols(Index imin, Index imax) overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; clearRow(Index i) overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; clearRowCol(Index i) overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; clearRows(Index imin, Index imax) overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; clearRowsCols(Index imin, Index imax) overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; coeffRef(Index i, Index j)sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inline; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; compress() overridesofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inlinevirtual; compressedMatrixsofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >; CompressedMatrix typedefsofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >; copy(const EigenBaseSparseMatrix &m, unsigned nbCol, unsigned shift)sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >inline; copyFrom(const CompressedRowSparseMatrix< type::Mat< Nout, Nin, AnyReal > > &crs)sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >inline; createBlock(unsigned column, const Block &b)sofa::lin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html:1036,Energy Efficiency,efficient,efficiently,1036,"s, OutDataTypes > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; List of all members . sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes > Class Template Reference . #include <EigenSparseMatrix.h>. Inheritance diagram for sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >:. [legend]; Detailed Description; template<class InDataTypes, class OutDataTypes>; class sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >; Variant of EigenBaseSparseMatrix, capable of block-view access. The blocks correspond to matrix blocks of the size of the DataTypes Deriv.; There are two ways of filling the matrix:; Random block access is provided by method wBlock. Use compress() after the last insertion.; Block rows can be efficiently appended using methods beginBlockRow, createBlock, endBlockRow. Use compress() after the last insertion. The rows must be created in increasing index order. The two ways of filling the matrix can not be used at the same time. . Classes; struct  map_traits;  . Protected Attributes; BlockMatMap incomingBlocks;  To store block-view data before it is compressed in optimized format. More...;  ;  Protected Attributes inherited from sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >; SimplicialCholesky cholesky;  used to factorize the matrix and solve systems using Cholesky method, for symmetric positive definite matrices only. More...;  . Public Member Functions;  EigenSparseMatrix (int nbRow=0, int nbCol=0);  ; void resizeBlocks (int nbBlockRows, int nbBlockCols);  Resize the matrix without preserving the data (the matrix is set to zero), with the size given in number of blocks. More...;  ; void addBlock (unsigned row, unsigned col, const Block &b);  Schedule the addition of the block at the ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html:4668,Energy Efficiency,schedul,scheduled,4668,"lace. Scheduled additions must be finalized using function compress(). More...;  ; void beginRow (Index index);  ; void insertBack (Index row, Index col, Real value);  ; Real & coeffRef (Index i, Index j);  Return a reference to the given entry in the compressed matrix.There can (must ?) be a value at this place already. Efficient only if the it is at the last place of the compressed matrix. More...;  ; void copy (const EigenBaseSparseMatrix &m, unsigned nbCol, unsigned shift);  ; void resize (Index nbRow, Index nbCol) override;  Resize the matrix without preserving the data (the matrix is set to zero) More...;  ; Index rowSize (void) const override;  number of rows More...;  ; Index colSize (void) const override;  number of columns More...;  ; void reserve (typename CompressedMatrix::Index reserveSize);  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void compress () override;  Add the values from the scheduled list, and clears the schedule list. More...;  ; Index * getRowBegin ();  ; Index * getColsIndex ();  ; Real * getColsValue ();  ; void clearRow (Index i) override;  Set all the entries of a row to 0. More...;  ; void clearRows (Index imin, Index imax) override;  Set all the entries of rows imin to imax-1 to 0. More...;  ; void clearCol (Index col) override;  Clears the all the entries of column imin to column imax-1. Not efficient ! More...;  ; void clearCols (Index imin, Index imax) override;  Set all the entries of column i and of row i to 0. Not efficient ! More...;  ; void clearRowCol (Index i) override;  Clears all the entries of rows imin to imax-1 and columns imin to imax-1. More...;  ; void clearRowsCols (Index imin, Index imax) override;  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; void clear () override;  Set all values to 0, by resizing to the same size. More...;  ; void mult (VectorEigen &result, const VectorEigen &da",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html:4699,Energy Efficiency,schedul,schedule,4699,"lace. Scheduled additions must be finalized using function compress(). More...;  ; void beginRow (Index index);  ; void insertBack (Index row, Index col, Real value);  ; Real & coeffRef (Index i, Index j);  Return a reference to the given entry in the compressed matrix.There can (must ?) be a value at this place already. Efficient only if the it is at the last place of the compressed matrix. More...;  ; void copy (const EigenBaseSparseMatrix &m, unsigned nbCol, unsigned shift);  ; void resize (Index nbRow, Index nbCol) override;  Resize the matrix without preserving the data (the matrix is set to zero) More...;  ; Index rowSize (void) const override;  number of rows More...;  ; Index colSize (void) const override;  number of columns More...;  ; void reserve (typename CompressedMatrix::Index reserveSize);  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void compress () override;  Add the values from the scheduled list, and clears the schedule list. More...;  ; Index * getRowBegin ();  ; Index * getColsIndex ();  ; Real * getColsValue ();  ; void clearRow (Index i) override;  Set all the entries of a row to 0. More...;  ; void clearRows (Index imin, Index imax) override;  Set all the entries of rows imin to imax-1 to 0. More...;  ; void clearCol (Index col) override;  Clears the all the entries of column imin to column imax-1. Not efficient ! More...;  ; void clearCols (Index imin, Index imax) override;  Set all the entries of column i and of row i to 0. Not efficient ! More...;  ; void clearRowCol (Index i) override;  Clears all the entries of rows imin to imax-1 and columns imin to imax-1. More...;  ; void clearRowsCols (Index imin, Index imax) override;  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; void clear () override;  Set all values to 0, by resizing to the same size. More...;  ; void mult (VectorEigen &result, const VectorEigen &da",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html:5103,Energy Efficiency,efficient,efficient,5103,"m, unsigned nbCol, unsigned shift);  ; void resize (Index nbRow, Index nbCol) override;  Resize the matrix without preserving the data (the matrix is set to zero) More...;  ; Index rowSize (void) const override;  number of rows More...;  ; Index colSize (void) const override;  number of columns More...;  ; void reserve (typename CompressedMatrix::Index reserveSize);  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void compress () override;  Add the values from the scheduled list, and clears the schedule list. More...;  ; Index * getRowBegin ();  ; Index * getColsIndex ();  ; Real * getColsValue ();  ; void clearRow (Index i) override;  Set all the entries of a row to 0. More...;  ; void clearRows (Index imin, Index imax) override;  Set all the entries of rows imin to imax-1 to 0. More...;  ; void clearCol (Index col) override;  Clears the all the entries of column imin to column imax-1. Not efficient ! More...;  ; void clearCols (Index imin, Index imax) override;  Set all the entries of column i and of row i to 0. Not efficient ! More...;  ; void clearRowCol (Index i) override;  Clears all the entries of rows imin to imax-1 and columns imin to imax-1. More...;  ; void clearRowsCols (Index imin, Index imax) override;  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; void clear () override;  Set all values to 0, by resizing to the same size. More...;  ; void mult (VectorEigen &result, const VectorEigen &data);  Matrix-vector product. More...;  ; void mult_MT (VectorEigen &result, const VectorEigen &data);  Matrix-vector product openmp multithreaded. More...;  ; void multVector (V1 &output, const V2 &input);  Matrix-Vector product (dense vector with contiguous memory layout) More...;  ; V operator* (const V &input);  Matrix-Vector product (dense vector with contiguous memory layout) More...;  ; const char * Name ();  ; const char * Name ();  ; b",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html:5233,Energy Efficiency,efficient,efficient,5233,"data (the matrix is set to zero) More...;  ; Index rowSize (void) const override;  number of rows More...;  ; Index colSize (void) const override;  number of columns More...;  ; void reserve (typename CompressedMatrix::Index reserveSize);  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void compress () override;  Add the values from the scheduled list, and clears the schedule list. More...;  ; Index * getRowBegin ();  ; Index * getColsIndex ();  ; Real * getColsValue ();  ; void clearRow (Index i) override;  Set all the entries of a row to 0. More...;  ; void clearRows (Index imin, Index imax) override;  Set all the entries of rows imin to imax-1 to 0. More...;  ; void clearCol (Index col) override;  Clears the all the entries of column imin to column imax-1. Not efficient ! More...;  ; void clearCols (Index imin, Index imax) override;  Set all the entries of column i and of row i to 0. Not efficient ! More...;  ; void clearRowCol (Index i) override;  Clears all the entries of rows imin to imax-1 and columns imin to imax-1. More...;  ; void clearRowsCols (Index imin, Index imax) override;  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; void clear () override;  Set all values to 0, by resizing to the same size. More...;  ; void mult (VectorEigen &result, const VectorEigen &data);  Matrix-vector product. More...;  ; void mult_MT (VectorEigen &result, const VectorEigen &data);  Matrix-vector product openmp multithreaded. More...;  ; void multVector (V1 &output, const V2 &input);  Matrix-Vector product (dense vector with contiguous memory layout) More...;  ; V operator* (const V &input);  Matrix-Vector product (dense vector with contiguous memory layout) More...;  ; const char * Name ();  ; const char * Name ();  ; bool choleskyDecompose ();  Try to compute the LDLT decomposition, and return true if success. The matrix is unchanged. More...;  ;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html:23729,Energy Efficiency,efficient,efficient,23729," endBlockRow() or endSortedBlockRow() to validate the row insertion. See alsocreateBlock( unsigned column, const Block& b ) . endBlockRow() ; Warningempty rows should be created with a call to beginBlockRow + endSortedBlockRow . ◆ copyFrom(). template<class InDataTypes , class OutDataTypes > . template<class AnyReal > . void sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >::copyFrom ; (; const CompressedRowSparseMatrix< type::Mat< Nout, Nin, AnyReal > > & ; crs). inline . Set from a CompressedRowSparseMatrix. Preconditioncrs must be compressed . ◆ createBlock(). template<class InDataTypes , class OutDataTypes > . void sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >::createBlock ; (; unsigned ; column, . const Block & ; b . ). inline . Create a block in the current row, which must be previously initialized using beginBlockRow(unsigned row).; If the blocks are NOT created in column order, call endBlockRow(). If the blocks are given in column order, endSortedBlockRow() will be more efficient.; The blocks are not actually created in the matrix until method endBlockRow()/endSortedBlockRow() is called.; Warningthe block must NOT already exist . ◆ endBlockRow(). template<class InDataTypes , class OutDataTypes > . void sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >::endBlockRow ; (; ). inline . Finalize the creation of the current block row. See alsobeginBlockRow(unsigned row) . createBlock( unsigned column, const Block& b ); If the block have been given in column order, endSortedBlockRow() is more efficient. . ◆ endSortedBlockRow(). template<class InDataTypes , class OutDataTypes > . void sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >::endSortedBlockRow ; (; ). inline . Finalize the creation of the current block row with blocks given in column order. See alsobeginBlockRow(unsigned row) . createBlock( unsigned column, const Block& b ) in column order . ◆ insertBackBlock(). template<class InDataT",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html:24272,Energy Efficiency,efficient,efficient,24272,"wSparseMatrix. Preconditioncrs must be compressed . ◆ createBlock(). template<class InDataTypes , class OutDataTypes > . void sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >::createBlock ; (; unsigned ; column, . const Block & ; b . ). inline . Create a block in the current row, which must be previously initialized using beginBlockRow(unsigned row).; If the blocks are NOT created in column order, call endBlockRow(). If the blocks are given in column order, endSortedBlockRow() will be more efficient.; The blocks are not actually created in the matrix until method endBlockRow()/endSortedBlockRow() is called.; Warningthe block must NOT already exist . ◆ endBlockRow(). template<class InDataTypes , class OutDataTypes > . void sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >::endBlockRow ; (; ). inline . Finalize the creation of the current block row. See alsobeginBlockRow(unsigned row) . createBlock( unsigned column, const Block& b ); If the block have been given in column order, endSortedBlockRow() is more efficient. . ◆ endSortedBlockRow(). template<class InDataTypes , class OutDataTypes > . void sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >::endSortedBlockRow ; (; ). inline . Finalize the creation of the current block row with blocks given in column order. See alsobeginBlockRow(unsigned row) . createBlock( unsigned column, const Block& b ) in column order . ◆ insertBackBlock(). template<class InDataTypes , class OutDataTypes > . void sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >::insertBackBlock ; (; unsigned ; row, . unsigned ; col, . const Block & ; b . ). inline . Insert ASAP in the compressed matrix. There must be no value at this place already. Warningbasically works only if there is only one block on the row . empty rows should be created with a call to beginBlockRow + endSortedBlockRow . ◆ map() [1/2]. template<class InDataTypes , class OutDataTypes > . template<class VecDeriv > .",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html:1463,Modifiability,inherit,inherited,1463,"Types, OutDataTypes >:. [legend]; Detailed Description; template<class InDataTypes, class OutDataTypes>; class sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >; Variant of EigenBaseSparseMatrix, capable of block-view access. The blocks correspond to matrix blocks of the size of the DataTypes Deriv.; There are two ways of filling the matrix:; Random block access is provided by method wBlock. Use compress() after the last insertion.; Block rows can be efficiently appended using methods beginBlockRow, createBlock, endBlockRow. Use compress() after the last insertion. The rows must be created in increasing index order. The two ways of filling the matrix can not be used at the same time. . Classes; struct  map_traits;  . Protected Attributes; BlockMatMap incomingBlocks;  To store block-view data before it is compressed in optimized format. More...;  ;  Protected Attributes inherited from sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >; SimplicialCholesky cholesky;  used to factorize the matrix and solve systems using Cholesky method, for symmetric positive definite matrices only. More...;  . Public Member Functions;  EigenSparseMatrix (int nbRow=0, int nbCol=0);  ; void resizeBlocks (int nbBlockRows, int nbBlockCols);  Resize the matrix without preserving the data (the matrix is set to zero), with the size given in number of blocks. More...;  ; void addBlock (unsigned row, unsigned col, const Block &b);  Schedule the addition of the block at the given place. Scheduled additions must be finalized using function compress(). More...;  ; void insertBackBlock (unsigned row, unsigned col, const Block &b);  ; void beginBlockRow (unsigned row);  ; void createBlock (unsigned column, const Block &b);  ; void endBlockRow ();  ; void endSortedBlockRow ();  ; template<class AnyReal > ; void copyFrom (const CompressedRowSparseMatrix< type::Mat< Nout, Nin, AnyReal > > &crs);  ; void mult (OutVecDeriv &result, const InVecDeriv &data) const;  compute r",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html:3117,Modifiability,inherit,inherited,3117,"nst Block &b);  ; void beginBlockRow (unsigned row);  ; void createBlock (unsigned column, const Block &b);  ; void endBlockRow ();  ; void endSortedBlockRow ();  ; template<class AnyReal > ; void copyFrom (const CompressedRowSparseMatrix< type::Mat< Nout, Nin, AnyReal > > &crs);  ; void mult (OutVecDeriv &result, const InVecDeriv &data) const;  compute result = A * data More...;  ; void addMult (OutVecDeriv &result, const InVecDeriv &data) const;  compute result += A * data More...;  ; void addMult (OutVecDeriv &result, const InVecDeriv &data, const OutReal fact) const;  compute result += A * data * fact More...;  ; void addMultTranspose (InVecDeriv &result, const OutVecDeriv &data) const;  compute result += A^T * data More...;  ; void addMultTranspose (InVecDeriv &result, const OutVecDeriv &data, const OutReal fact) const;  compute result += A^T * data * fact More...;  ;  Public Member Functions inherited from sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >;  EigenBaseSparseMatrix (Index nbRow=0, Index nbCol=0);  ;  EigenBaseSparseMatrix (const ThisMatrix &m);  copy constructor More...;  ; void operator= (const ThisMatrix &m);  copy operator More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void setIdentity ();  ; void add (Index row, Index col, double value) override;  Schedule the addition of the value at the given place. Scheduled additions must be finalized using function compress(). More...;  ; void beginRow (Index index);  ; void insertBack (Index row, Index col, Real value);  ; Real & coeffRef (Index i, Index j);  Return a reference to the given entry in the compressed matrix.There can (must ?) be a value at this place already. Efficient only if the it is at the last place of the compressed matrix. More...;  ; void copy (const EigenBaseSparseMatrix &m, unsigned nbCol, unsigned shift);  ; void resize (Index nbRow, Index nbCol) override;  Resize t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html:7219,Modifiability,inherit,inherited,7219,"torEigen &b) const;  Solve Ax=b, where A is this matrix. WARNING: ldltDecompose() must be called first. x and b can be the same vector. More...;  ; void addToBaseMatrix (BaseMatrix *matrix, SReal factor, Index offset) const;  add this EigenBaseSparseMatrix to a BaseMatrix at the offset and multiplied by factor More...;  ; void mul (EigenBaseSparseMatrix< Real > &res, const EigenBaseSparseMatrix< Real > &rhs) const;  ; void mul (Eigen::Matrix< Real, Eigen::Dynamic, Eigen::Dynamic > &res, const Eigen::Matrix< Real, Eigen::Dynamic, Eigen::Dynamic > &rhs);  Sparse x Dense Matrix product. More...;  ; void mul_MT (EigenBaseSparseMatrix< Real > &res, const EigenBaseSparseMatrix< Real > &rhs) const;  ; void mul_MT (Eigen::Matrix< Real, Eigen::Dynamic, Eigen::Dynamic > &res, const Eigen::Matrix< Real, Eigen::Dynamic, Eigen::Dynamic > &rhs);  Sparse x Dense Matrix product openmp multithreaded. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain bet",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html:13339,Modifiability,inherit,inherited,13339,"RowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the given row of blocks. More...;  ; virtual ColBlockConstIterator bRowEnd (Index ib) const;  Get the iterator corresponding to the end of the given row of blocks. More...;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > bRowRange (Index ib) const;  Get the iterators corresponding to the beginning and end of the given row of blocks. More...;  ; virtual RowBlockConstIterator bRowsBegin () const;  Get the iterator corresponding to the beginning of the rows of blocks. More...;  ; virtual RowBlockConstIterator bRowsEnd () const;  Get the iterator corresponding to the end of the rows of blocks. More...;  ; virtual std::pair< RowBlockConstIterator, RowBlockConstIterator > bRowsRange () const;  Get the iterators corresponding to the beginning and end of the given row of blocks. More...;  . Static Public Member Functions; static const std::string Name ();  ;  Static Public Member Functions inherited from sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >; static const char * Name ();  . Protected Member Functions; template<class OutType , class InType > ; void mult_impl (OutType &result, const InType &data) const;  ; template<class OutType , class InType > ; void addMult_impl (OutType &result, const InType &data, Real fact) const;  ; template<class InType , class OutType > ; void addMultTranspose_impl (InType &result, const OutType &data, Real fact) const;  ;  Protected Member Functions inherited from sofa::linearalgebra::BaseMatrix; virtual void bAccessorDelete (const InternalBlockAccessor *) const;  ; virtual void bAccessorCopy (InternalBlockAccessor *) const;  ; virtual SReal bAccessorElement (const InternalBlockAccessor *b, Index i, Index j) const;  ; virtual void bAccessorSet (InternalBlockAccessor *b, Index i, Index j, double v);  ; virtual void bAccessorAdd (InternalBlockAccessor *b, Index i, Index j, double v);  ; template<class T > ; const T * bAccessor",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html:13860,Modifiability,inherit,inherited,13860,,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html:18606,Modifiability,inherit,inherited,18606,"const;  ; virtual void itDecRowBlock (InternalRowBlockIterator *it) const;  ; virtual bool itEqRowBlock (const InternalRowBlockIterator *it, const InternalRowBlockIterator *it2) const;  ; virtual bool itLessRowBlock (const InternalRowBlockIterator *it, const InternalRowBlockIterator *it2) const;  ; RowBlockConstIterator createRowBlockConstIterator (void *internalPtr) const;  ; RowBlockConstIterator createRowBlockConstIterator (Index internalData0, Index internalData1) const;  . Static Protected Member Functions; template<class VecDeriv > ; static map_traits< VecDeriv >::const_map_type map (const VecDeriv &data);  ; template<class VecDeriv > ; static map_traits< VecDeriv >::map_type map (VecDeriv &data);  ; template<class LHS , class RHS > ; static bool alias (const LHS &lhs, const RHS &rhs);  ;  Static Protected Member Functions inherited from sofa::linearalgebra::BaseMatrix; static InternalBlockAccessor * getInternal (BlockConstAccessor *b);  ; static const InternalBlockAccessor * getInternal (const BlockConstAccessor *b);  ; static InternalBlockAccessor * getInternal (BlockAccessor *b);  ; static const InternalBlockAccessor * getInternal (const BlockAccessor *b);  ; static InternalColBlockIterator * getInternal (ColBlockConstIterator *b);  ; static const InternalColBlockIterator * getInternal (const ColBlockConstIterator *b);  ; static InternalRowBlockIterator * getInternal (RowBlockConstIterator *b);  ; static const InternalRowBlockIterator * getInternal (const RowBlockConstIterator *b);  . Additional Inherited Members;  Public Attributes inherited from sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >; CompressedMatrix compressedMatrix;  the compressed matrix More...;  . Attribute details. ◆ incomingBlocks. template<class InDataTypes , class OutDataTypes > . BlockMatMap sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >::incomingBlocks. protected . To store block-view data before it is compressed in optimized format. . Constructor",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html:19333,Modifiability,inherit,inherited,19333,"ta);  ; template<class VecDeriv > ; static map_traits< VecDeriv >::map_type map (VecDeriv &data);  ; template<class LHS , class RHS > ; static bool alias (const LHS &lhs, const RHS &rhs);  ;  Static Protected Member Functions inherited from sofa::linearalgebra::BaseMatrix; static InternalBlockAccessor * getInternal (BlockConstAccessor *b);  ; static const InternalBlockAccessor * getInternal (const BlockConstAccessor *b);  ; static InternalBlockAccessor * getInternal (BlockAccessor *b);  ; static const InternalBlockAccessor * getInternal (const BlockAccessor *b);  ; static InternalColBlockIterator * getInternal (ColBlockConstIterator *b);  ; static const InternalColBlockIterator * getInternal (const ColBlockConstIterator *b);  ; static InternalRowBlockIterator * getInternal (RowBlockConstIterator *b);  ; static const InternalRowBlockIterator * getInternal (const RowBlockConstIterator *b);  . Additional Inherited Members;  Public Attributes inherited from sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >; CompressedMatrix compressedMatrix;  the compressed matrix More...;  . Attribute details. ◆ incomingBlocks. template<class InDataTypes , class OutDataTypes > . BlockMatMap sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >::incomingBlocks. protected . To store block-view data before it is compressed in optimized format. . Constructor details. ◆ EigenSparseMatrix(). template<class InDataTypes , class OutDataTypes > . sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >::EigenSparseMatrix ; (; int ; nbRow = 0, . int ; nbCol = 0 . ). inline . Function details. ◆ addBlock(). template<class InDataTypes , class OutDataTypes > . void sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >::addBlock ; (; unsigned ; row, . unsigned ; col, . const Block & ; b . ). inline . Schedule the addition of the block at the given place. Scheduled additions must be finalized using function compress(). . ◆ addMult() [1/2]. template",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html:1411,Performance,optimiz,optimized,1411,"ofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes > Class Template Reference . #include <EigenSparseMatrix.h>. Inheritance diagram for sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >:. [legend]; Detailed Description; template<class InDataTypes, class OutDataTypes>; class sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >; Variant of EigenBaseSparseMatrix, capable of block-view access. The blocks correspond to matrix blocks of the size of the DataTypes Deriv.; There are two ways of filling the matrix:; Random block access is provided by method wBlock. Use compress() after the last insertion.; Block rows can be efficiently appended using methods beginBlockRow, createBlock, endBlockRow. Use compress() after the last insertion. The rows must be created in increasing index order. The two ways of filling the matrix can not be used at the same time. . Classes; struct  map_traits;  . Protected Attributes; BlockMatMap incomingBlocks;  To store block-view data before it is compressed in optimized format. More...;  ;  Protected Attributes inherited from sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >; SimplicialCholesky cholesky;  used to factorize the matrix and solve systems using Cholesky method, for symmetric positive definite matrices only. More...;  . Public Member Functions;  EigenSparseMatrix (int nbRow=0, int nbCol=0);  ; void resizeBlocks (int nbBlockRows, int nbBlockCols);  Resize the matrix without preserving the data (the matrix is set to zero), with the size given in number of blocks. More...;  ; void addBlock (unsigned row, unsigned col, const Block &b);  Schedule the addition of the block at the given place. Scheduled additions must be finalized using function compress(). More...;  ; void insertBackBlock (unsigned row, unsigned col, const Block &b);  ; void beginBlockRow (unsigned row);  ; void createBlock (unsigned column, const Block &b);  ; void endBlockRow ();  ; void endSortedBlockRow (); ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html:7768,Performance,perform,performances,7768,"ic, Eigen::Dynamic > &res, const Eigen::Matrix< Real, Eigen::Dynamic, Eigen::Dynamic > &rhs);  Sparse x Dense Matrix product. More...;  ; void mul_MT (EigenBaseSparseMatrix< Real > &res, const EigenBaseSparseMatrix< Real > &rhs) const;  ; void mul_MT (Eigen::Matrix< Real, Eigen::Dynamic, Eigen::Dynamic > &res, const Eigen::Matrix< Real, Eigen::Dynamic, Eigen::Dynamic > &rhs);  Sparse x Dense Matrix product openmp multithreaded. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void opMulV (linearalgebra::BaseVecto",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html:7942,Performance,perform,performances,7942,"Real > &res, const EigenBaseSparseMatrix< Real > &rhs) const;  ; void mul_MT (Eigen::Matrix< Real, Eigen::Dynamic, Eigen::Dynamic > &res, const Eigen::Matrix< Real, Eigen::Dynamic, Eigen::Dynamic > &rhs);  Sparse x Dense Matrix product openmp multithreaded. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html:8116,Performance,perform,performances,8116,"namic, Eigen::Dynamic > &rhs);  Sparse x Dense Matrix product openmp multithreaded. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Mul",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html:8290,Performance,perform,performances,8290,"Matrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html:8464,Performance,perform,performances,8464,"ible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; virtual void opPMulV (float *result, const float *v) const;  Multiply the matrix ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html:8638,Performance,perform,performances,8638,"virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; virtual void opPMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and add the result in vector result. More...;  ; virtual void opPMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and a",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html:19734,Performance,optimiz,optimized,19734," *b);  ; static const InternalBlockAccessor * getInternal (const BlockConstAccessor *b);  ; static InternalBlockAccessor * getInternal (BlockAccessor *b);  ; static const InternalBlockAccessor * getInternal (const BlockAccessor *b);  ; static InternalColBlockIterator * getInternal (ColBlockConstIterator *b);  ; static const InternalColBlockIterator * getInternal (const ColBlockConstIterator *b);  ; static InternalRowBlockIterator * getInternal (RowBlockConstIterator *b);  ; static const InternalRowBlockIterator * getInternal (const RowBlockConstIterator *b);  . Additional Inherited Members;  Public Attributes inherited from sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >; CompressedMatrix compressedMatrix;  the compressed matrix More...;  . Attribute details. ◆ incomingBlocks. template<class InDataTypes , class OutDataTypes > . BlockMatMap sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >::incomingBlocks. protected . To store block-view data before it is compressed in optimized format. . Constructor details. ◆ EigenSparseMatrix(). template<class InDataTypes , class OutDataTypes > . sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >::EigenSparseMatrix ; (; int ; nbRow = 0, . int ; nbCol = 0 . ). inline . Function details. ◆ addBlock(). template<class InDataTypes , class OutDataTypes > . void sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >::addBlock ; (; unsigned ; row, . unsigned ; col, . const Block & ; b . ). inline . Schedule the addition of the block at the given place. Scheduled additions must be finalized using function compress(). . ◆ addMult() [1/2]. template<class InDataTypes , class OutDataTypes > . void sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >::addMult ; (; OutVecDeriv & ; result, . const InVecDeriv & ; data . ); const. inline . compute result += A * data . ◆ addMult() [2/2]. template<class InDataTypes , class OutDataTypes > . void sofa::linearalgebra::EigenS",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html:799,Security,access,access,799,"﻿. SOFA API: sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; List of all members . sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes > Class Template Reference . #include <EigenSparseMatrix.h>. Inheritance diagram for sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >:. [legend]; Detailed Description; template<class InDataTypes, class OutDataTypes>; class sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >; Variant of EigenBaseSparseMatrix, capable of block-view access. The blocks correspond to matrix blocks of the size of the DataTypes Deriv.; There are two ways of filling the matrix:; Random block access is provided by method wBlock. Use compress() after the last insertion.; Block rows can be efficiently appended using methods beginBlockRow, createBlock, endBlockRow. Use compress() after the last insertion. The rows must be created in increasing index order. The two ways of filling the matrix can not be used at the same time. . Classes; struct  map_traits;  . Protected Attributes; BlockMatMap incomingBlocks;  To store block-view data before it is compressed in optimized format. More...;  ;  Protected Attributes inherited from sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >; SimplicialCholesky cholesky;  used to factorize the matrix and solve systems using Cholesky method, for symmetric positive definite matrices only. More...;  . Public Member Functions;  EigenSparseMatrix (int nbRow=0, int nbCol=0);  ; void resizeBlocks (int nbBlockRows, int nbBlockCols);  Resize the matrix without preserving the data (the matrix is set to zero), with the size given in number of blocks. More...;  ; void addBlock (unsigned row, unsigned co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html:939,Security,access,access,939,"﻿. SOFA API: sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; List of all members . sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes > Class Template Reference . #include <EigenSparseMatrix.h>. Inheritance diagram for sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >:. [legend]; Detailed Description; template<class InDataTypes, class OutDataTypes>; class sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >; Variant of EigenBaseSparseMatrix, capable of block-view access. The blocks correspond to matrix blocks of the size of the DataTypes Deriv.; There are two ways of filling the matrix:; Random block access is provided by method wBlock. Use compress() after the last insertion.; Block rows can be efficiently appended using methods beginBlockRow, createBlock, endBlockRow. Use compress() after the last insertion. The rows must be created in increasing index order. The two ways of filling the matrix can not be used at the same time. . Classes; struct  map_traits;  . Protected Attributes; BlockMatMap incomingBlocks;  To store block-view data before it is compressed in optimized format. More...;  ;  Protected Attributes inherited from sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >; SimplicialCholesky cholesky;  used to factorize the matrix and solve systems using Cholesky method, for symmetric positive definite matrices only. More...;  . Public Member Functions;  EigenSparseMatrix (int nbRow=0, int nbCol=0);  ; void resizeBlocks (int nbBlockRows, int nbBlockCols);  Resize the matrix without preserving the data (the matrix is set to zero), with the size given in number of blocks. More...;  ; void addBlock (unsigned row, unsigned co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html:11685,Security,access,access,11685,"st;  Multiply the transposed matrix by float vector v and add the result in vector result. More...;  ; virtual void opPMulTV (double *result, const double *v) const;  Multiply the transposed matrix by double vector v and add the result in vector result. More...;  ; virtual void opMulTM (BaseMatrix *result, BaseMatrix *m) const;  Multiply the transposed matrix by matrix m and store the result in matrix result. More...;  ; virtual void opAddM (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the matrix to the m matrix and strore the result in m. More...;  ; virtual void opAddMT (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the transposed matrix to the m matrix and strore the result in m. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual MatrixCategory getCategory () const;  ; virtual Index getBlockRows () const;  ; virtual Index getBlockCols () const;  ; virtual Index bRowSize () const;  ; virtual Index bColSize () const;  ; virtual Index getBandWidth () const;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  ; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the give",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html:11778,Security,access,access,11778,"const;  Multiply the transposed matrix by matrix m and store the result in matrix result. More...;  ; virtual void opAddM (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the matrix to the m matrix and strore the result in m. More...;  ; virtual void opAddMT (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the transposed matrix to the m matrix and strore the result in m. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual MatrixCategory getCategory () const;  ; virtual Index getBlockRows () const;  ; virtual Index getBlockCols () const;  ; virtual Index bRowSize () const;  ; virtual Index bColSize () const;  ; virtual Index getBandWidth () const;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  ; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the given row of blocks. More...;  ; virtual ColBlockConstIterator bRowEnd (Index ib) const;  Get the iterator corresponding to the end of the given row of blocks. More...;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > bRowRange (Index ib) const;  Get the iterators corresponding to the beginning and end of ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html:11873,Security,access,access,11873,"tual void opAddM (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the matrix to the m matrix and strore the result in m. More...;  ; virtual void opAddMT (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the transposed matrix to the m matrix and strore the result in m. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual MatrixCategory getCategory () const;  ; virtual Index getBlockRows () const;  ; virtual Index getBlockCols () const;  ; virtual Index bRowSize () const;  ; virtual Index bColSize () const;  ; virtual Index getBandWidth () const;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  ; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the given row of blocks. More...;  ; virtual ColBlockConstIterator bRowEnd (Index ib) const;  Get the iterator corresponding to the end of the given row of blocks. More...;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > bRowRange (Index ib) const;  Get the iterators corresponding to the beginning and end of the given row of blocks. More...;  ; virtual RowBlockConstIterator bRowsBegin () const;  Get the iterator",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html:22737,Security,validat,validate,22737," ; fact . ); const. inline . compute result += A^T * data * fact . ◆ addMultTranspose_impl(). template<class InDataTypes , class OutDataTypes > . template<class InType , class OutType > . void sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >::addMultTranspose_impl ; (; InType & ; result, . const OutType & ; data, . Real ; fact . ); const. inlineprotected . ◆ alias(). template<class InDataTypes , class OutDataTypes > . template<class LHS , class RHS > . static bool sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >::alias ; (; const LHS & ; lhs, . const RHS & ; rhs . ). inlinestaticprotected . ◆ beginBlockRow(). template<class InDataTypes , class OutDataTypes > . void sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >::beginBlockRow ; (; unsigned ; row). inline . Prepare the insertion of a new row of blocks in the matrix. Then create blocks using createBlock( unsigned column, const Block& b ). Then finally use endBlockRow() or endSortedBlockRow() to validate the row insertion. See alsocreateBlock( unsigned column, const Block& b ) . endBlockRow() ; Warningempty rows should be created with a call to beginBlockRow + endSortedBlockRow . ◆ copyFrom(). template<class InDataTypes , class OutDataTypes > . template<class AnyReal > . void sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >::copyFrom ; (; const CompressedRowSparseMatrix< type::Mat< Nout, Nin, AnyReal > > & ; crs). inline . Set from a CompressedRowSparseMatrix. Preconditioncrs must be compressed . ◆ createBlock(). template<class InDataTypes , class OutDataTypes > . void sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >::createBlock ; (; unsigned ; column, . const Block & ; b . ). inline . Create a block in the current row, which must be previously initialized using beginBlockRow(unsigned row).; If the blocks are NOT created in column order, call endBlockRow(). If the blocks are given in column order, endSortedBlockRow() will b",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html:4688,Usability,clear,clears,4688,"lace. Scheduled additions must be finalized using function compress(). More...;  ; void beginRow (Index index);  ; void insertBack (Index row, Index col, Real value);  ; Real & coeffRef (Index i, Index j);  Return a reference to the given entry in the compressed matrix.There can (must ?) be a value at this place already. Efficient only if the it is at the last place of the compressed matrix. More...;  ; void copy (const EigenBaseSparseMatrix &m, unsigned nbCol, unsigned shift);  ; void resize (Index nbRow, Index nbCol) override;  Resize the matrix without preserving the data (the matrix is set to zero) More...;  ; Index rowSize (void) const override;  number of rows More...;  ; Index colSize (void) const override;  number of columns More...;  ; void reserve (typename CompressedMatrix::Index reserveSize);  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void compress () override;  Add the values from the scheduled list, and clears the schedule list. More...;  ; Index * getRowBegin ();  ; Index * getColsIndex ();  ; Real * getColsValue ();  ; void clearRow (Index i) override;  Set all the entries of a row to 0. More...;  ; void clearRows (Index imin, Index imax) override;  Set all the entries of rows imin to imax-1 to 0. More...;  ; void clearCol (Index col) override;  Clears the all the entries of column imin to column imax-1. Not efficient ! More...;  ; void clearCols (Index imin, Index imax) override;  Set all the entries of column i and of row i to 0. Not efficient ! More...;  ; void clearRowCol (Index i) override;  Clears all the entries of rows imin to imax-1 and columns imin to imax-1. More...;  ; void clearRowsCols (Index imin, Index imax) override;  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; void clear () override;  Set all values to 0, by resizing to the same size. More...;  ; void mult (VectorEigen &result, const VectorEigen &da",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html:4813,Usability,clear,clearRow,4813," row, Index col, Real value);  ; Real & coeffRef (Index i, Index j);  Return a reference to the given entry in the compressed matrix.There can (must ?) be a value at this place already. Efficient only if the it is at the last place of the compressed matrix. More...;  ; void copy (const EigenBaseSparseMatrix &m, unsigned nbCol, unsigned shift);  ; void resize (Index nbRow, Index nbCol) override;  Resize the matrix without preserving the data (the matrix is set to zero) More...;  ; Index rowSize (void) const override;  number of rows More...;  ; Index colSize (void) const override;  number of columns More...;  ; void reserve (typename CompressedMatrix::Index reserveSize);  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void compress () override;  Add the values from the scheduled list, and clears the schedule list. More...;  ; Index * getRowBegin ();  ; Index * getColsIndex ();  ; Real * getColsValue ();  ; void clearRow (Index i) override;  Set all the entries of a row to 0. More...;  ; void clearRows (Index imin, Index imax) override;  Set all the entries of rows imin to imax-1 to 0. More...;  ; void clearCol (Index col) override;  Clears the all the entries of column imin to column imax-1. Not efficient ! More...;  ; void clearCols (Index imin, Index imax) override;  Set all the entries of column i and of row i to 0. Not efficient ! More...;  ; void clearRowCol (Index i) override;  Clears all the entries of rows imin to imax-1 and columns imin to imax-1. More...;  ; void clearRowsCols (Index imin, Index imax) override;  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; void clear () override;  Set all values to 0, by resizing to the same size. More...;  ; void mult (VectorEigen &result, const VectorEigen &data);  Matrix-vector product. More...;  ; void mult_MT (VectorEigen &result, const VectorEigen &data);  Matrix-vector product openmp multi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html:4895,Usability,clear,clearRows,4895," can (must ?) be a value at this place already. Efficient only if the it is at the last place of the compressed matrix. More...;  ; void copy (const EigenBaseSparseMatrix &m, unsigned nbCol, unsigned shift);  ; void resize (Index nbRow, Index nbCol) override;  Resize the matrix without preserving the data (the matrix is set to zero) More...;  ; Index rowSize (void) const override;  number of rows More...;  ; Index colSize (void) const override;  number of columns More...;  ; void reserve (typename CompressedMatrix::Index reserveSize);  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void compress () override;  Add the values from the scheduled list, and clears the schedule list. More...;  ; Index * getRowBegin ();  ; Index * getColsIndex ();  ; Real * getColsValue ();  ; void clearRow (Index i) override;  Set all the entries of a row to 0. More...;  ; void clearRows (Index imin, Index imax) override;  Set all the entries of rows imin to imax-1 to 0. More...;  ; void clearCol (Index col) override;  Clears the all the entries of column imin to column imax-1. Not efficient ! More...;  ; void clearCols (Index imin, Index imax) override;  Set all the entries of column i and of row i to 0. Not efficient ! More...;  ; void clearRowCol (Index i) override;  Clears all the entries of rows imin to imax-1 and columns imin to imax-1. More...;  ; void clearRowsCols (Index imin, Index imax) override;  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; void clear () override;  Set all values to 0, by resizing to the same size. More...;  ; void mult (VectorEigen &result, const VectorEigen &data);  Matrix-vector product. More...;  ; void mult_MT (VectorEigen &result, const VectorEigen &data);  Matrix-vector product openmp multithreaded. More...;  ; void multVector (V1 &output, const V2 &input);  Matrix-Vector product (dense vector with contiguous memory layout) M",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html:5007,Usability,clear,clearCol,5007,"d matrix. More...;  ; void copy (const EigenBaseSparseMatrix &m, unsigned nbCol, unsigned shift);  ; void resize (Index nbRow, Index nbCol) override;  Resize the matrix without preserving the data (the matrix is set to zero) More...;  ; Index rowSize (void) const override;  number of rows More...;  ; Index colSize (void) const override;  number of columns More...;  ; void reserve (typename CompressedMatrix::Index reserveSize);  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void compress () override;  Add the values from the scheduled list, and clears the schedule list. More...;  ; Index * getRowBegin ();  ; Index * getColsIndex ();  ; Real * getColsValue ();  ; void clearRow (Index i) override;  Set all the entries of a row to 0. More...;  ; void clearRows (Index imin, Index imax) override;  Set all the entries of rows imin to imax-1 to 0. More...;  ; void clearCol (Index col) override;  Clears the all the entries of column imin to column imax-1. Not efficient ! More...;  ; void clearCols (Index imin, Index imax) override;  Set all the entries of column i and of row i to 0. Not efficient ! More...;  ; void clearRowCol (Index i) override;  Clears all the entries of rows imin to imax-1 and columns imin to imax-1. More...;  ; void clearRowsCols (Index imin, Index imax) override;  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; void clear () override;  Set all values to 0, by resizing to the same size. More...;  ; void mult (VectorEigen &result, const VectorEigen &data);  Matrix-vector product. More...;  ; void mult_MT (VectorEigen &result, const VectorEigen &data);  Matrix-vector product openmp multithreaded. More...;  ; void multVector (V1 &output, const V2 &input);  Matrix-Vector product (dense vector with contiguous memory layout) More...;  ; V operator* (const V &input);  Matrix-Vector product (dense vector with contiguous memory layout) Mo",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html:5132,Usability,clear,clearCols,5132,"ndex nbCol) override;  Resize the matrix without preserving the data (the matrix is set to zero) More...;  ; Index rowSize (void) const override;  number of rows More...;  ; Index colSize (void) const override;  number of columns More...;  ; void reserve (typename CompressedMatrix::Index reserveSize);  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void compress () override;  Add the values from the scheduled list, and clears the schedule list. More...;  ; Index * getRowBegin ();  ; Index * getColsIndex ();  ; Real * getColsValue ();  ; void clearRow (Index i) override;  Set all the entries of a row to 0. More...;  ; void clearRows (Index imin, Index imax) override;  Set all the entries of rows imin to imax-1 to 0. More...;  ; void clearCol (Index col) override;  Clears the all the entries of column imin to column imax-1. Not efficient ! More...;  ; void clearCols (Index imin, Index imax) override;  Set all the entries of column i and of row i to 0. Not efficient ! More...;  ; void clearRowCol (Index i) override;  Clears all the entries of rows imin to imax-1 and columns imin to imax-1. More...;  ; void clearRowsCols (Index imin, Index imax) override;  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; void clear () override;  Set all values to 0, by resizing to the same size. More...;  ; void mult (VectorEigen &result, const VectorEigen &data);  Matrix-vector product. More...;  ; void mult_MT (VectorEigen &result, const VectorEigen &data);  Matrix-vector product openmp multithreaded. More...;  ; void multVector (V1 &output, const V2 &input);  Matrix-Vector product (dense vector with contiguous memory layout) More...;  ; V operator* (const V &input);  Matrix-Vector product (dense vector with contiguous memory layout) More...;  ; const char * Name ();  ; const char * Name ();  ; bool choleskyDecompose ();  Try to compute the LDLT decomposition, ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html:5262,Usability,clear,clearRowCol,5262," override;  number of rows More...;  ; Index colSize (void) const override;  number of columns More...;  ; void reserve (typename CompressedMatrix::Index reserveSize);  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void compress () override;  Add the values from the scheduled list, and clears the schedule list. More...;  ; Index * getRowBegin ();  ; Index * getColsIndex ();  ; Real * getColsValue ();  ; void clearRow (Index i) override;  Set all the entries of a row to 0. More...;  ; void clearRows (Index imin, Index imax) override;  Set all the entries of rows imin to imax-1 to 0. More...;  ; void clearCol (Index col) override;  Clears the all the entries of column imin to column imax-1. Not efficient ! More...;  ; void clearCols (Index imin, Index imax) override;  Set all the entries of column i and of row i to 0. Not efficient ! More...;  ; void clearRowCol (Index i) override;  Clears all the entries of rows imin to imax-1 and columns imin to imax-1. More...;  ; void clearRowsCols (Index imin, Index imax) override;  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; void clear () override;  Set all values to 0, by resizing to the same size. More...;  ; void mult (VectorEigen &result, const VectorEigen &data);  Matrix-vector product. More...;  ; void mult_MT (VectorEigen &result, const VectorEigen &data);  Matrix-vector product openmp multithreaded. More...;  ; void multVector (V1 &output, const V2 &input);  Matrix-Vector product (dense vector with contiguous memory layout) More...;  ; V operator* (const V &input);  Matrix-Vector product (dense vector with contiguous memory layout) More...;  ; const char * Name ();  ; const char * Name ();  ; bool choleskyDecompose ();  Try to compute the LDLT decomposition, and return true if success. The matrix is unchanged. More...;  ; void choleskySolve (VectorEigen &x, const VectorEigen &b) const;  Solv",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html:5386,Usability,clear,clearRowsCols,5386,"mpressedMatrix::Index reserveSize);  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void compress () override;  Add the values from the scheduled list, and clears the schedule list. More...;  ; Index * getRowBegin ();  ; Index * getColsIndex ();  ; Real * getColsValue ();  ; void clearRow (Index i) override;  Set all the entries of a row to 0. More...;  ; void clearRows (Index imin, Index imax) override;  Set all the entries of rows imin to imax-1 to 0. More...;  ; void clearCol (Index col) override;  Clears the all the entries of column imin to column imax-1. Not efficient ! More...;  ; void clearCols (Index imin, Index imax) override;  Set all the entries of column i and of row i to 0. Not efficient ! More...;  ; void clearRowCol (Index i) override;  Clears all the entries of rows imin to imax-1 and columns imin to imax-1. More...;  ; void clearRowsCols (Index imin, Index imax) override;  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; void clear () override;  Set all values to 0, by resizing to the same size. More...;  ; void mult (VectorEigen &result, const VectorEigen &data);  Matrix-vector product. More...;  ; void mult_MT (VectorEigen &result, const VectorEigen &data);  Matrix-vector product openmp multithreaded. More...;  ; void multVector (V1 &output, const V2 &input);  Matrix-Vector product (dense vector with contiguous memory layout) More...;  ; V operator* (const V &input);  Matrix-Vector product (dense vector with contiguous memory layout) More...;  ; const char * Name ();  ; const char * Name ();  ; bool choleskyDecompose ();  Try to compute the LDLT decomposition, and return true if success. The matrix is unchanged. More...;  ; void choleskySolve (VectorEigen &x, const VectorEigen &b) const;  Solve Ax=b, where A is this matrix. WARNING: ldltDecompose() must be called first. x and b can be the same vector. More...;  ; void addT",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html:5526,Usability,clear,clear,5526,"ment at row i, column j (using 0-based indices) More...;  ; void compress () override;  Add the values from the scheduled list, and clears the schedule list. More...;  ; Index * getRowBegin ();  ; Index * getColsIndex ();  ; Real * getColsValue ();  ; void clearRow (Index i) override;  Set all the entries of a row to 0. More...;  ; void clearRows (Index imin, Index imax) override;  Set all the entries of rows imin to imax-1 to 0. More...;  ; void clearCol (Index col) override;  Clears the all the entries of column imin to column imax-1. Not efficient ! More...;  ; void clearCols (Index imin, Index imax) override;  Set all the entries of column i and of row i to 0. Not efficient ! More...;  ; void clearRowCol (Index i) override;  Clears all the entries of rows imin to imax-1 and columns imin to imax-1. More...;  ; void clearRowsCols (Index imin, Index imax) override;  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; void clear () override;  Set all values to 0, by resizing to the same size. More...;  ; void mult (VectorEigen &result, const VectorEigen &data);  Matrix-vector product. More...;  ; void mult_MT (VectorEigen &result, const VectorEigen &data);  Matrix-vector product openmp multithreaded. More...;  ; void multVector (V1 &output, const V2 &input);  Matrix-Vector product (dense vector with contiguous memory layout) More...;  ; V operator* (const V &input);  Matrix-Vector product (dense vector with contiguous memory layout) More...;  ; const char * Name ();  ; const char * Name ();  ; bool choleskyDecompose ();  Try to compute the LDLT decomposition, and return true if success. The matrix is unchanged. More...;  ; void choleskySolve (VectorEigen &x, const VectorEigen &b) const;  Solve Ax=b, where A is this matrix. WARNING: ldltDecompose() must be called first. x and b can be the same vector. More...;  ; void addToBaseMatrix (BaseMatrix *matrix, SReal factor, Index offset) const;  add this EigenBaseSparseMatrix to a BaseMatri",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html:8677,Usability,clear,clear,8677,"r performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; virtual void opPMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and add the result in vector result. More...;  ; virtual void opPMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and add the result in vector result. More...;  ; virtual void opMulTV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  M",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_to_compressed_row_sparse_matrix_3_01sofa_1_1defaultt0f4f61ab2a67e77212e747c4d2833f62.html:625,Modifiability,inherit,inherited,625,"﻿. SOFA API: sofa::linearalgebra::EigenSparseToCompressedRowSparseMatrix< sofa::defaulttype::RigidDeriv< N, Real > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. List of all members . sofa::linearalgebra::EigenSparseToCompressedRowSparseMatrix< sofa::defaulttype::RigidDeriv< N, Real > > Class Template Reference . #include <CompressedRowSparseMatrixConstraintEigenUtils.h>. Inheritance diagram for sofa::linearalgebra::EigenSparseToCompressedRowSparseMatrix< sofa::defaulttype::RigidDeriv< N, Real > >:. [legend]. Additional Inherited Members;  Public Member Functions inherited from sofa::linearalgebra::EigenSparseToCompressedRowSparseMatrixVec< sofa::defaulttype::RigidDeriv< N, Real > >; TCompressedRowSparseMatrix operator() (const EigenSparseMatrix &eigenMat);  . sofalinearalgebraEigenSparseToCompressedRowSparseMatrix< sofa::defaulttype::RigidDeriv< N, Real > >; Generated on Mon Nov 11 2024 03:31:22 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_to_compressed_row_sparse_matrix_3_01sofa_1_1defaultt0f4f61ab2a67e77212e747c4d2833f62.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_to_compressed_row_sparse_matrix_3_01sofa_1_1defaultt0f4f61ab2a67e77212e747c4d2833f62.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_to_compressed_row_sparse_matrix_3_01sofa_1_1defaulttc3521a4f90f199ac10c07f889845b1da.html:378,Modifiability,inherit,inherited,378,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::EigenSparseToCompressedRowSparseMatrix< sofa::defaulttype::RigidDeriv< N, Real > > Member List . This is the complete list of members for sofa::linearalgebra::EigenSparseToCompressedRowSparseMatrix< sofa::defaulttype::RigidDeriv< N, Real > >, including all inherited members. EigenSparseMatrix typedefsofa::linearalgebra::EigenSparseToCompressedRowSparseMatrixVec< sofa::defaulttype::RigidDeriv< N, Real > >; operator()(const EigenSparseMatrix &eigenMat)sofa::linearalgebra::EigenSparseToCompressedRowSparseMatrixVec< sofa::defaulttype::RigidDeriv< N, Real > >inline; Real typedefsofa::linearalgebra::EigenSparseToCompressedRowSparseMatrixVec< sofa::defaulttype::RigidDeriv< N, Real > >; TCompressedRowSparseMatrix typedefsofa::linearalgebra::EigenSparseToCompressedRowSparseMatrixVec< sofa::defaulttype::RigidDeriv< N, Real > >. Generated on Mon Nov 11 2024 03:31:22 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_to_compressed_row_sparse_matrix_3_01sofa_1_1defaulttc3521a4f90f199ac10c07f889845b1da.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_to_compressed_row_sparse_matrix_3_01sofa_1_1defaulttc3521a4f90f199ac10c07f889845b1da.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_to_compressed_row_sparse_matrix_3_01sofa_1_1type_1_152472eae97d9bddba86c9d82b624e235.html:350,Modifiability,inherit,inherited,350,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::EigenSparseToCompressedRowSparseMatrix< sofa::type::Vec< N, Real > > Member List . This is the complete list of members for sofa::linearalgebra::EigenSparseToCompressedRowSparseMatrix< sofa::type::Vec< N, Real > >, including all inherited members. EigenSparseMatrix typedefsofa::linearalgebra::EigenSparseToCompressedRowSparseMatrixVec< sofa::type::Vec< N, Real > >; operator()(const EigenSparseMatrix &eigenMat)sofa::linearalgebra::EigenSparseToCompressedRowSparseMatrixVec< sofa::type::Vec< N, Real > >inline; Real typedefsofa::linearalgebra::EigenSparseToCompressedRowSparseMatrixVec< sofa::type::Vec< N, Real > >; TCompressedRowSparseMatrix typedefsofa::linearalgebra::EigenSparseToCompressedRowSparseMatrixVec< sofa::type::Vec< N, Real > >. Generated on Mon Nov 11 2024 03:31:22 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_to_compressed_row_sparse_matrix_3_01sofa_1_1type_1_152472eae97d9bddba86c9d82b624e235.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_to_compressed_row_sparse_matrix_3_01sofa_1_1type_1_152472eae97d9bddba86c9d82b624e235.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_to_compressed_row_sparse_matrix_3_01sofa_1_1type_1_1f61c922078f11d08e0df3b973ac597d6.html:583,Modifiability,inherit,inherited,583,"﻿. SOFA API: sofa::linearalgebra::EigenSparseToCompressedRowSparseMatrix< sofa::type::Vec< N, Real > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. List of all members . sofa::linearalgebra::EigenSparseToCompressedRowSparseMatrix< sofa::type::Vec< N, Real > > Class Template Reference . #include <CompressedRowSparseMatrixConstraintEigenUtils.h>. Inheritance diagram for sofa::linearalgebra::EigenSparseToCompressedRowSparseMatrix< sofa::type::Vec< N, Real > >:. [legend]. Additional Inherited Members;  Public Member Functions inherited from sofa::linearalgebra::EigenSparseToCompressedRowSparseMatrixVec< sofa::type::Vec< N, Real > >; TCompressedRowSparseMatrix operator() (const EigenSparseMatrix &eigenMat);  . sofalinearalgebraEigenSparseToCompressedRowSparseMatrix< sofa::type::Vec< N, Real > >; Generated on Mon Nov 11 2024 03:31:22 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_to_compressed_row_sparse_matrix_3_01sofa_1_1type_1_1f61c922078f11d08e0df3b973ac597d6.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_to_compressed_row_sparse_matrix_3_01sofa_1_1type_1_1f61c922078f11d08e0df3b973ac597d6.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_vector-members.html:278,Modifiability,inherit,inherited,278,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::EigenVector< TReal, TBlockSize > Member List . This is the complete list of members for sofa::linearalgebra::EigenVector< TReal, TBlockSize >, including all inherited members. add(Index i, SReal v) overridesofa::linearalgebra::EigenVector< TReal, TBlockSize >inlinevirtual; sofa::linearalgebra::BaseVector::add(Index i0, Index n, const float *src)sofa::linearalgebra::BaseVectorinlinevirtual; sofa::linearalgebra::BaseVector::add(Index i0, Index n, const double *src)sofa::linearalgebra::BaseVectorinlinevirtual; sofa::linearalgebra::BaseVector::add(Index i0, Index n, const int *src)sofa::linearalgebra::BaseVectorinlinevirtual; addDefaultImpl(Index i0, Index n, const T *src)sofa::linearalgebra::BaseVectorinlineprotected; Block typedefsofa::linearalgebra::EigenVector< TReal, TBlockSize >; clear(Index i) overridesofa::linearalgebra::EigenVector< TReal, TBlockSize >inlinevirtual; clear() overridesofa::linearalgebra::EigenVector< TReal, TBlockSize >inlinevirtual; eigenVectorsofa::linearalgebra::EigenVector< TReal, TBlockSize >protected; EigenVector(Index nbRow=0)sofa::linearalgebra::EigenVector< TReal, TBlockSize >inline; element(Index i) const overridesofa::linearalgebra::EigenVector< TReal, TBlockSize >inlinevirtual; ELEMENT_FLOAT enum valuesofa::linearalgebra::BaseVector; ELEMENT_INT enum valuesofa::linearalgebra::BaseVector; ELEMENT_UNKNOWN enum valuesofa::linearalgebra::BaseVector; elements(Index i0, Index n, float *src) constsofa::linearalgebra::BaseVectorinlinevirtual; elements(Index i0, Index n, double *src) constsofa::linearalgebra::BaseVectorinlinevirtual; elements(Index i0, Index n, int *src) constsofa::linearalgebra::BaseVectorinlinevirtual; elementsDefaultImpl(Index i0, Index n, T *buffer) constsofa::linearalgebra::BaseVectorinlineprotected; ElementType enum namesofa::linearalgebra::BaseVector; getElementSize() constsofa::linearalgebra::BaseVect",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_vector-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_vector-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_vector-members.html:914,Usability,clear,clear,914," add(Index i, SReal v) overridesofa::linearalgebra::EigenVector< TReal, TBlockSize >inlinevirtual; sofa::linearalgebra::BaseVector::add(Index i0, Index n, const float *src)sofa::linearalgebra::BaseVectorinlinevirtual; sofa::linearalgebra::BaseVector::add(Index i0, Index n, const double *src)sofa::linearalgebra::BaseVectorinlinevirtual; sofa::linearalgebra::BaseVector::add(Index i0, Index n, const int *src)sofa::linearalgebra::BaseVectorinlinevirtual; addDefaultImpl(Index i0, Index n, const T *src)sofa::linearalgebra::BaseVectorinlineprotected; Block typedefsofa::linearalgebra::EigenVector< TReal, TBlockSize >; clear(Index i) overridesofa::linearalgebra::EigenVector< TReal, TBlockSize >inlinevirtual; clear() overridesofa::linearalgebra::EigenVector< TReal, TBlockSize >inlinevirtual; eigenVectorsofa::linearalgebra::EigenVector< TReal, TBlockSize >protected; EigenVector(Index nbRow=0)sofa::linearalgebra::EigenVector< TReal, TBlockSize >inline; element(Index i) const overridesofa::linearalgebra::EigenVector< TReal, TBlockSize >inlinevirtual; ELEMENT_FLOAT enum valuesofa::linearalgebra::BaseVector; ELEMENT_INT enum valuesofa::linearalgebra::BaseVector; ELEMENT_UNKNOWN enum valuesofa::linearalgebra::BaseVector; elements(Index i0, Index n, float *src) constsofa::linearalgebra::BaseVectorinlinevirtual; elements(Index i0, Index n, double *src) constsofa::linearalgebra::BaseVectorinlinevirtual; elements(Index i0, Index n, int *src) constsofa::linearalgebra::BaseVectorinlinevirtual; elementsDefaultImpl(Index i0, Index n, T *buffer) constsofa::linearalgebra::BaseVectorinlineprotected; ElementType enum namesofa::linearalgebra::BaseVector; getElementSize() constsofa::linearalgebra::BaseVect",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_vector-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_vector-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_vector-members.html:1005,Usability,clear,clear,1005," add(Index i, SReal v) overridesofa::linearalgebra::EigenVector< TReal, TBlockSize >inlinevirtual; sofa::linearalgebra::BaseVector::add(Index i0, Index n, const float *src)sofa::linearalgebra::BaseVectorinlinevirtual; sofa::linearalgebra::BaseVector::add(Index i0, Index n, const double *src)sofa::linearalgebra::BaseVectorinlinevirtual; sofa::linearalgebra::BaseVector::add(Index i0, Index n, const int *src)sofa::linearalgebra::BaseVectorinlinevirtual; addDefaultImpl(Index i0, Index n, const T *src)sofa::linearalgebra::BaseVectorinlineprotected; Block typedefsofa::linearalgebra::EigenVector< TReal, TBlockSize >; clear(Index i) overridesofa::linearalgebra::EigenVector< TReal, TBlockSize >inlinevirtual; clear() overridesofa::linearalgebra::EigenVector< TReal, TBlockSize >inlinevirtual; eigenVectorsofa::linearalgebra::EigenVector< TReal, TBlockSize >protected; EigenVector(Index nbRow=0)sofa::linearalgebra::EigenVector< TReal, TBlockSize >inline; element(Index i) const overridesofa::linearalgebra::EigenVector< TReal, TBlockSize >inlinevirtual; ELEMENT_FLOAT enum valuesofa::linearalgebra::BaseVector; ELEMENT_INT enum valuesofa::linearalgebra::BaseVector; ELEMENT_UNKNOWN enum valuesofa::linearalgebra::BaseVector; elements(Index i0, Index n, float *src) constsofa::linearalgebra::BaseVectorinlinevirtual; elements(Index i0, Index n, double *src) constsofa::linearalgebra::BaseVectorinlinevirtual; elements(Index i0, Index n, int *src) constsofa::linearalgebra::BaseVectorinlinevirtual; elementsDefaultImpl(Index i0, Index n, T *buffer) constsofa::linearalgebra::BaseVectorinlineprotected; ElementType enum namesofa::linearalgebra::BaseVector; getElementSize() constsofa::linearalgebra::BaseVect",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_vector-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_vector-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_vector.html:1778,Modifiability,inherit,inherited,1778,"w=0);  ; Index size () const override;  Number of elements. More...;  ; void resize (Index nbRow) override;  Resize the matrix without preserving the data (the matrix is set to zero) More...;  ; void resizeBlocks (Index nbBlocks);  Resize the matrix without preserving the data (the matrix is set to zero), with the size given in number of blocks. More...;  ; SReal element (Index i) const override;  Read the value of element i. More...;  ; void set (Index i, SReal v) override;  Write the value of element i. More...;  ; void setBlock (Index i, const Block &v);  ; void add (Index i, SReal v) override;  Add v to the existing value of element i. More...;  ; void clear (Index i) override;  Reset the value of element i to 0. More...;  ; void clear () override;  Set all values to 0, by resizing to the same size. More...;  ; const std::string Name ();  ;  Public Member Functions inherited from sofa::linearalgebra::BaseVector; virtual ~BaseVector ();  ; virtual const float * elements (Index i0, Index n, float *src) const;  Get the values of n elements, starting at element i0, into given float buffer, or return the pointer to the data if the in-memory format is compatible. More...;  ; virtual const double * elements (Index i0, Index n, double *src) const;  Get the values of n elements, starting at element i0, into given double buffer, or return the pointer to the data if the in-memory format is compatible. More...;  ; virtual const int * elements (Index i0, Index n, int *src) const;  Get the values of n elements, starting at element i0, into given int buffer, or return the pointer to the data if the in-memory format is compatible. More...;  ; virtual void set (Index i0, Index n, const float *src);  Write the values of n float elements, starting at element i0. More...;  ; virtual void set (Index i0, Index n, const double *src);  Write the values of n double elements, starting at element i0. More...;  ; virtual void set (Index i0, Index n, const int *src);  Write the values of n i",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_vector.html:3811,Modifiability,inherit,inherited,3811,"i0. More...;  ; virtual void add (Index i0, Index n, const float *src);  Add to the values of n float elements, starting at element i0. More...;  ; virtual void add (Index i0, Index n, const double *src);  Add to the values of n double elements, starting at element i0. More...;  ; virtual void add (Index i0, Index n, const int *src);  Add to the values of n int elements, starting at element i0. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual bool isFull () const;  Return true if this vector is full, i.a. all elements are stored in memory. More...;  ; bool isSparse () const;  . Static Public Member Functions; static const std::string Name ();  . Friends; std::ostream & operator<< (std::ostream &out, const EigenVector< TReal, TBlockSize > &v);  . Additional Inherited Members;  Protected Member Functions inherited from sofa::linearalgebra::BaseVector; template<class T > ; const T * elementsDefaultImpl (Index i0, Index n, T *buffer) const;  ; template<class T > ; void setDefaultImpl (Index i0, Index n, const T *src);  ; template<class T > ; void addDefaultImpl (Index i0, Index n, const T *src);  . Attribute details. ◆ eigenVector. template<class TReal , std::size_t TBlockSize = 1> . VectorEigen sofa::linearalgebra::EigenVector< TReal, TBlockSize >::eigenVector. protected . the data . Constructor details. ◆ EigenVector(). template<class TReal , std::size_t TBlockSize = 1> . sofa::linearalgebra::EigenVector< TReal, TBlockSize >::EigenVector ; (; Index ; nbRow = 0). inline . Function details. ◆ add(). template<class TReal , std::size_t TBlockSize = 1> . void sofa::linearalgebra::EigenVector< TReal, TBlockSize >::add ; (; Index ; i, . SReal ; v . ). inlineoverridevirtual . Add v to the existing value of element i. ; Implements sofa::linearalgebra::BaseVector. ◆ clear() [1/2]. template<class TReal , std::size_t TBlockSize = 1> . void sofa::linearalgebra::EigenVector< TReal, TBlockSize >::clear ; (; ). inline",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_vector.html:1561,Usability,clear,clear,1561,"nVector< TReal, TBlockSize >; Container of a vector of the Eigen library. Not an eigenvector of a matrix. . Protected Attributes; VectorEigen eigenVector;  the data More...;  . Public Member Functions; VectorEigen & getVectorEigen ();  ; const VectorEigen & getVectorEigen () const;  ;  EigenVector (Index nbRow=0);  ; Index size () const override;  Number of elements. More...;  ; void resize (Index nbRow) override;  Resize the matrix without preserving the data (the matrix is set to zero) More...;  ; void resizeBlocks (Index nbBlocks);  Resize the matrix without preserving the data (the matrix is set to zero), with the size given in number of blocks. More...;  ; SReal element (Index i) const override;  Read the value of element i. More...;  ; void set (Index i, SReal v) override;  Write the value of element i. More...;  ; void setBlock (Index i, const Block &v);  ; void add (Index i, SReal v) override;  Add v to the existing value of element i. More...;  ; void clear (Index i) override;  Reset the value of element i to 0. More...;  ; void clear () override;  Set all values to 0, by resizing to the same size. More...;  ; const std::string Name ();  ;  Public Member Functions inherited from sofa::linearalgebra::BaseVector; virtual ~BaseVector ();  ; virtual const float * elements (Index i0, Index n, float *src) const;  Get the values of n elements, starting at element i0, into given float buffer, or return the pointer to the data if the in-memory format is compatible. More...;  ; virtual const double * elements (Index i0, Index n, double *src) const;  Get the values of n elements, starting at element i0, into given double buffer, or return the pointer to the data if the in-memory format is compatible. More...;  ; virtual const int * elements (Index i0, Index n, int *src) const;  Get the values of n elements, starting at element i0, into given int buffer, or return the pointer to the data if the in-memory format is compatible. More...;  ; virtual void set (Index i0, Inde",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_vector.html:1640,Usability,clear,clear,1640,"envector of a matrix. . Protected Attributes; VectorEigen eigenVector;  the data More...;  . Public Member Functions; VectorEigen & getVectorEigen ();  ; const VectorEigen & getVectorEigen () const;  ;  EigenVector (Index nbRow=0);  ; Index size () const override;  Number of elements. More...;  ; void resize (Index nbRow) override;  Resize the matrix without preserving the data (the matrix is set to zero) More...;  ; void resizeBlocks (Index nbBlocks);  Resize the matrix without preserving the data (the matrix is set to zero), with the size given in number of blocks. More...;  ; SReal element (Index i) const override;  Read the value of element i. More...;  ; void set (Index i, SReal v) override;  Write the value of element i. More...;  ; void setBlock (Index i, const Block &v);  ; void add (Index i, SReal v) override;  Add v to the existing value of element i. More...;  ; void clear (Index i) override;  Reset the value of element i to 0. More...;  ; void clear () override;  Set all values to 0, by resizing to the same size. More...;  ; const std::string Name ();  ;  Public Member Functions inherited from sofa::linearalgebra::BaseVector; virtual ~BaseVector ();  ; virtual const float * elements (Index i0, Index n, float *src) const;  Get the values of n elements, starting at element i0, into given float buffer, or return the pointer to the data if the in-memory format is compatible. More...;  ; virtual const double * elements (Index i0, Index n, double *src) const;  Get the values of n elements, starting at element i0, into given double buffer, or return the pointer to the data if the in-memory format is compatible. More...;  ; virtual const int * elements (Index i0, Index n, int *src) const;  Get the values of n elements, starting at element i0, into given int buffer, or return the pointer to the data if the in-memory format is compatible. More...;  ; virtual void set (Index i0, Index n, const float *src);  Write the values of n float elements, starting at element ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_vector.html:4782,Usability,clear,clear,4782,"tected Member Functions inherited from sofa::linearalgebra::BaseVector; template<class T > ; const T * elementsDefaultImpl (Index i0, Index n, T *buffer) const;  ; template<class T > ; void setDefaultImpl (Index i0, Index n, const T *src);  ; template<class T > ; void addDefaultImpl (Index i0, Index n, const T *src);  . Attribute details. ◆ eigenVector. template<class TReal , std::size_t TBlockSize = 1> . VectorEigen sofa::linearalgebra::EigenVector< TReal, TBlockSize >::eigenVector. protected . the data . Constructor details. ◆ EigenVector(). template<class TReal , std::size_t TBlockSize = 1> . sofa::linearalgebra::EigenVector< TReal, TBlockSize >::EigenVector ; (; Index ; nbRow = 0). inline . Function details. ◆ add(). template<class TReal , std::size_t TBlockSize = 1> . void sofa::linearalgebra::EigenVector< TReal, TBlockSize >::add ; (; Index ; i, . SReal ; v . ). inlineoverridevirtual . Add v to the existing value of element i. ; Implements sofa::linearalgebra::BaseVector. ◆ clear() [1/2]. template<class TReal , std::size_t TBlockSize = 1> . void sofa::linearalgebra::EigenVector< TReal, TBlockSize >::clear ; (; ). inlineoverridevirtual . Set all values to 0, by resizing to the same size. ; Implements sofa::linearalgebra::BaseVector. ◆ clear() [2/2]. template<class TReal , std::size_t TBlockSize = 1> . void sofa::linearalgebra::EigenVector< TReal, TBlockSize >::clear ; (; Index ; i). inlineoverridevirtual . Reset the value of element i to 0. ; Reimplemented from sofa::linearalgebra::BaseVector. ◆ element(). template<class TReal , std::size_t TBlockSize = 1> . SReal sofa::linearalgebra::EigenVector< TReal, TBlockSize >::element ; (; Index ; i); const. inlineoverridevirtual . Read the value of element i. ; Implements sofa::linearalgebra::BaseVector. ◆ getVectorEigen() [1/2]. template<class TReal , std::size_t TBlockSize = 1> . VectorEigen& sofa::linearalgebra::EigenVector< TReal, TBlockSize >::getVectorEigen ; (; ). inline . ◆ getVectorEigen() [2/2]. template<class",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_vector.html:4910,Usability,clear,clear,4910,"T * elementsDefaultImpl (Index i0, Index n, T *buffer) const;  ; template<class T > ; void setDefaultImpl (Index i0, Index n, const T *src);  ; template<class T > ; void addDefaultImpl (Index i0, Index n, const T *src);  . Attribute details. ◆ eigenVector. template<class TReal , std::size_t TBlockSize = 1> . VectorEigen sofa::linearalgebra::EigenVector< TReal, TBlockSize >::eigenVector. protected . the data . Constructor details. ◆ EigenVector(). template<class TReal , std::size_t TBlockSize = 1> . sofa::linearalgebra::EigenVector< TReal, TBlockSize >::EigenVector ; (; Index ; nbRow = 0). inline . Function details. ◆ add(). template<class TReal , std::size_t TBlockSize = 1> . void sofa::linearalgebra::EigenVector< TReal, TBlockSize >::add ; (; Index ; i, . SReal ; v . ). inlineoverridevirtual . Add v to the existing value of element i. ; Implements sofa::linearalgebra::BaseVector. ◆ clear() [1/2]. template<class TReal , std::size_t TBlockSize = 1> . void sofa::linearalgebra::EigenVector< TReal, TBlockSize >::clear ; (; ). inlineoverridevirtual . Set all values to 0, by resizing to the same size. ; Implements sofa::linearalgebra::BaseVector. ◆ clear() [2/2]. template<class TReal , std::size_t TBlockSize = 1> . void sofa::linearalgebra::EigenVector< TReal, TBlockSize >::clear ; (; Index ; i). inlineoverridevirtual . Reset the value of element i to 0. ; Reimplemented from sofa::linearalgebra::BaseVector. ◆ element(). template<class TReal , std::size_t TBlockSize = 1> . SReal sofa::linearalgebra::EigenVector< TReal, TBlockSize >::element ; (; Index ; i); const. inlineoverridevirtual . Read the value of element i. ; Implements sofa::linearalgebra::BaseVector. ◆ getVectorEigen() [1/2]. template<class TReal , std::size_t TBlockSize = 1> . VectorEigen& sofa::linearalgebra::EigenVector< TReal, TBlockSize >::getVectorEigen ; (; ). inline . ◆ getVectorEigen() [2/2]. template<class TReal , std::size_t TBlockSize = 1> . const VectorEigen& sofa::linearalgebra::EigenVector< TReal,",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_vector.html:5047,Usability,clear,clear,5047,"oid addDefaultImpl (Index i0, Index n, const T *src);  . Attribute details. ◆ eigenVector. template<class TReal , std::size_t TBlockSize = 1> . VectorEigen sofa::linearalgebra::EigenVector< TReal, TBlockSize >::eigenVector. protected . the data . Constructor details. ◆ EigenVector(). template<class TReal , std::size_t TBlockSize = 1> . sofa::linearalgebra::EigenVector< TReal, TBlockSize >::EigenVector ; (; Index ; nbRow = 0). inline . Function details. ◆ add(). template<class TReal , std::size_t TBlockSize = 1> . void sofa::linearalgebra::EigenVector< TReal, TBlockSize >::add ; (; Index ; i, . SReal ; v . ). inlineoverridevirtual . Add v to the existing value of element i. ; Implements sofa::linearalgebra::BaseVector. ◆ clear() [1/2]. template<class TReal , std::size_t TBlockSize = 1> . void sofa::linearalgebra::EigenVector< TReal, TBlockSize >::clear ; (; ). inlineoverridevirtual . Set all values to 0, by resizing to the same size. ; Implements sofa::linearalgebra::BaseVector. ◆ clear() [2/2]. template<class TReal , std::size_t TBlockSize = 1> . void sofa::linearalgebra::EigenVector< TReal, TBlockSize >::clear ; (; Index ; i). inlineoverridevirtual . Reset the value of element i to 0. ; Reimplemented from sofa::linearalgebra::BaseVector. ◆ element(). template<class TReal , std::size_t TBlockSize = 1> . SReal sofa::linearalgebra::EigenVector< TReal, TBlockSize >::element ; (; Index ; i); const. inlineoverridevirtual . Read the value of element i. ; Implements sofa::linearalgebra::BaseVector. ◆ getVectorEigen() [1/2]. template<class TReal , std::size_t TBlockSize = 1> . VectorEigen& sofa::linearalgebra::EigenVector< TReal, TBlockSize >::getVectorEigen ; (; ). inline . ◆ getVectorEigen() [2/2]. template<class TReal , std::size_t TBlockSize = 1> . const VectorEigen& sofa::linearalgebra::EigenVector< TReal, TBlockSize >::getVectorEigen ; (; ); const. inline . ◆ Name() [1/2]. const std::string sofa::linearalgebra::EigenVector< double >::Name ; (; ). ◆ Name() [2/2]. templa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_vector.html:5175,Usability,clear,clear,5175,"ss TReal , std::size_t TBlockSize = 1> . VectorEigen sofa::linearalgebra::EigenVector< TReal, TBlockSize >::eigenVector. protected . the data . Constructor details. ◆ EigenVector(). template<class TReal , std::size_t TBlockSize = 1> . sofa::linearalgebra::EigenVector< TReal, TBlockSize >::EigenVector ; (; Index ; nbRow = 0). inline . Function details. ◆ add(). template<class TReal , std::size_t TBlockSize = 1> . void sofa::linearalgebra::EigenVector< TReal, TBlockSize >::add ; (; Index ; i, . SReal ; v . ). inlineoverridevirtual . Add v to the existing value of element i. ; Implements sofa::linearalgebra::BaseVector. ◆ clear() [1/2]. template<class TReal , std::size_t TBlockSize = 1> . void sofa::linearalgebra::EigenVector< TReal, TBlockSize >::clear ; (; ). inlineoverridevirtual . Set all values to 0, by resizing to the same size. ; Implements sofa::linearalgebra::BaseVector. ◆ clear() [2/2]. template<class TReal , std::size_t TBlockSize = 1> . void sofa::linearalgebra::EigenVector< TReal, TBlockSize >::clear ; (; Index ; i). inlineoverridevirtual . Reset the value of element i to 0. ; Reimplemented from sofa::linearalgebra::BaseVector. ◆ element(). template<class TReal , std::size_t TBlockSize = 1> . SReal sofa::linearalgebra::EigenVector< TReal, TBlockSize >::element ; (; Index ; i); const. inlineoverridevirtual . Read the value of element i. ; Implements sofa::linearalgebra::BaseVector. ◆ getVectorEigen() [1/2]. template<class TReal , std::size_t TBlockSize = 1> . VectorEigen& sofa::linearalgebra::EigenVector< TReal, TBlockSize >::getVectorEigen ; (; ). inline . ◆ getVectorEigen() [2/2]. template<class TReal , std::size_t TBlockSize = 1> . const VectorEigen& sofa::linearalgebra::EigenVector< TReal, TBlockSize >::getVectorEigen ; (; ); const. inline . ◆ Name() [1/2]. const std::string sofa::linearalgebra::EigenVector< double >::Name ; (; ). ◆ Name() [2/2]. template<class TReal , std::size_t TBlockSize = 1> . static const std::string sofa::linearalgebra::EigenVecto",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix-members.html:244,Modifiability,inherit,inherited,244,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::FullMatrix< T > Member List . This is the complete list of members for sofa::linearalgebra::FullMatrix< T >, including all inherited members. add(Index i, Index j, double v) overridesofa::linearalgebra::FullMatrix< T >virtual; add(Index row, Index col, double v)=0sofa::linearalgebra::FullMatrix< T >; add(Index row, Index col, const type::Mat3x3d &_M)sofa::linearalgebra::FullMatrix< T >; add(Index row, Index col, const type::Mat3x3f &_M)sofa::linearalgebra::FullMatrix< T >; add(Index row, Index col, const type::Mat2x2d &_M)sofa::linearalgebra::FullMatrix< T >; add(Index row, Index col, const type::Mat2x2f &_M)sofa::linearalgebra::FullMatrix< T >; add(Index row, Index col, const type::Mat6x6d &_M)sofa::linearalgebra::FullMatrix< T >; add(Index row, Index col, const type::Mat6x6f &_M)sofa::linearalgebra::FullMatrix< T >; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat3x3d &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat3x3f &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat2x2d &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat2x2f &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat6x6d &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat6x6f &_M)sofa::linearalgebra::BaseMatrixvirtual; allocsizesofa::linearalgebra::FullMatrix< T >protected; bAccessorAdd(InternalBlockAccessor *b, Index i, Index j, double v)sofa::linearalgebra::BaseMatrixinlineprotectedvirtual; bAccessorAdd(InternalBlockAccessor *b, const float *buffer)sofa::linearalgebra::BaseMatrixinlineprotectedvirtual; bAccessorAdd(Internal",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix-members.html:5683,Usability,clear,clear,5683,"atrix< T >; begin() constsofa::linearalgebra::FullMatrix< T >; blocAdd(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; blocCreate(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocElements(Index i, Index j, T *buffer) constsofa::linearalgebra::BaseMatrixinline; blocGet(Index i, Index j) constsofa::linearalgebra::BaseMatrixinlinevirtual; blocGetW(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; clear(Index i, Index j) overridesofa::linearalgebra::FullMatrix< T >virtual; clear() overridesofa::linearalgebra::FullMatrix< T >virtual; clearCol(Index j) overridesofa::linearalgebra::FullMatrix< T >virtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::FullMatrix< T >virtual; clearRowCol(Index i) overridesofa::linearalgebra::FullMatrix< T >virtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::FullMatrix< T >inlinevirtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix-members.html:5760,Usability,clear,clear,5760,"i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; blocCreate(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocElements(Index i, Index j, T *buffer) constsofa::linearalgebra::BaseMatrixinline; blocGet(Index i, Index j) constsofa::linearalgebra::BaseMatrixinlinevirtual; blocGetW(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; clear(Index i, Index j) overridesofa::linearalgebra::FullMatrix< T >virtual; clear() overridesofa::linearalgebra::FullMatrix< T >virtual; clearCol(Index j) overridesofa::linearalgebra::FullMatrix< T >virtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::FullMatrix< T >virtual; clearRowCol(Index i) overridesofa::linearalgebra::FullMatrix< T >virtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::FullMatrix< T >inlinevirtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix-members.html:5821,Usability,clear,clearCol,5821,"ine; blocCreate(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocElements(Index i, Index j, T *buffer) constsofa::linearalgebra::BaseMatrixinline; blocGet(Index i, Index j) constsofa::linearalgebra::BaseMatrixinlinevirtual; blocGetW(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; clear(Index i, Index j) overridesofa::linearalgebra::FullMatrix< T >virtual; clear() overridesofa::linearalgebra::FullMatrix< T >virtual; clearCol(Index j) overridesofa::linearalgebra::FullMatrix< T >virtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::FullMatrix< T >virtual; clearRowCol(Index i) overridesofa::linearalgebra::FullMatrix< T >virtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::FullMatrix< T >inlinevirtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockC",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix-members.html:5892,Usability,clear,clearCols,5892,"rtual; blocElements(Index i, Index j, T *buffer) constsofa::linearalgebra::BaseMatrixinline; blocGet(Index i, Index j) constsofa::linearalgebra::BaseMatrixinlinevirtual; blocGetW(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; clear(Index i, Index j) overridesofa::linearalgebra::FullMatrix< T >virtual; clear() overridesofa::linearalgebra::FullMatrix< T >virtual; clearCol(Index j) overridesofa::linearalgebra::FullMatrix< T >virtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::FullMatrix< T >virtual; clearRowCol(Index i) overridesofa::linearalgebra::FullMatrix< T >virtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::FullMatrix< T >inlinevirtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData) constsofa::linea",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix-members.html:5971,Usability,clear,clearRow,5971,"eMatrixinline; blocGet(Index i, Index j) constsofa::linearalgebra::BaseMatrixinlinevirtual; blocGetW(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; clear(Index i, Index j) overridesofa::linearalgebra::FullMatrix< T >virtual; clear() overridesofa::linearalgebra::FullMatrix< T >virtual; clearCol(Index j) overridesofa::linearalgebra::FullMatrix< T >virtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::FullMatrix< T >virtual; clearRowCol(Index i) overridesofa::linearalgebra::FullMatrix< T >virtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::FullMatrix< T >inlinevirtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, voi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix-members.html:6042,Usability,clear,clearRowCol,6042,"trixinlinevirtual; blocGetW(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; clear(Index i, Index j) overridesofa::linearalgebra::FullMatrix< T >virtual; clear() overridesofa::linearalgebra::FullMatrix< T >virtual; clearCol(Index j) overridesofa::linearalgebra::FullMatrix< T >virtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::FullMatrix< T >virtual; clearRowCol(Index i) overridesofa::linearalgebra::FullMatrix< T >virtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::FullMatrix< T >inlinevirtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, void *internalPtr) constsofa::linearalgebra::BaseMatrixinlineprotected; cre",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix-members.html:6116,Usability,clear,clearRows,6116,"rixinlinevirtual; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; clear(Index i, Index j) overridesofa::linearalgebra::FullMatrix< T >virtual; clear() overridesofa::linearalgebra::FullMatrix< T >virtual; clearCol(Index j) overridesofa::linearalgebra::FullMatrix< T >virtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::FullMatrix< T >virtual; clearRowCol(Index i) overridesofa::linearalgebra::FullMatrix< T >virtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::FullMatrix< T >inlinevirtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, void *internalPtr) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, Index internalData) constsofa::linear",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix-members.html:6195,Usability,clear,clearRowsCols,6195,"BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; clear(Index i, Index j) overridesofa::linearalgebra::FullMatrix< T >virtual; clear() overridesofa::linearalgebra::FullMatrix< T >virtual; clearCol(Index j) overridesofa::linearalgebra::FullMatrix< T >virtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::FullMatrix< T >virtual; clearRowCol(Index i) overridesofa::linearalgebra::FullMatrix< T >virtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::FullMatrix< T >inlinevirtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, void *internalPtr) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; createRowBlockConstIterator(void *internalPtr",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html:4020,Modifiability,inherit,inherited,4020,"btain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain bet",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html:10501,Modifiability,inherit,inherited,10501,,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html:14924,Modifiability,inherit,inherited,14924,"tor *it, const InternalColBlockIterator *it2) const;  ; ColBlockConstIterator createColBlockConstIterator (Index row, void *internalPtr) const;  ; ColBlockConstIterator createColBlockConstIterator (Index row, Index internalData) const;  ; virtual void itCopyRowBlock (InternalRowBlockIterator *) const;  ; virtual void itDeleteRowBlock (const InternalRowBlockIterator *) const;  ; virtual Index itAccessRowBlock (InternalRowBlockIterator *it) const;  ; virtual ColBlockConstIterator itBeginRowBlock (InternalRowBlockIterator *it) const;  ; virtual ColBlockConstIterator itEndRowBlock (InternalRowBlockIterator *it) const;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > itRangeRowBlock (InternalRowBlockIterator *it) const;  ; virtual void itIncRowBlock (InternalRowBlockIterator *it) const;  ; virtual void itDecRowBlock (InternalRowBlockIterator *it) const;  ; virtual bool itEqRowBlock (const InternalRowBlockIterator *it, const InternalRowBlockIterator *it2) const;  ; virtual bool itLessRowBlock (const InternalRowBlockIterator *it, const InternalRowBlockIterator *it2) const;  ; RowBlockConstIterator createRowBlockConstIterator (void *internalPtr) const;  ; RowBlockConstIterator createRowBlockConstIterator (Index internalData0, Index internalData1) const;  ;  Static Protected Member Functions inherited from sofa::linearalgebra::BaseMatrix; static InternalBlockAccessor * getInternal (BlockConstAccessor *b);  ; static const InternalBlockAccessor * getInternal (const BlockConstAccessor *b);  ; static InternalBlockAccessor * getInternal (BlockAccessor *b);  ; static const InternalBlockAccessor * getInternal (const BlockAccessor *b);  ; static InternalColBlockIterator * getInternal (ColBlockConstIterator *b);  ; static const InternalColBlockIterator * getInternal (const ColBlockConstIterator *b);  ; static InternalRowBlockIterator * getInternal (RowBlockConstIterator *b);  ; static const InternalRowBlockIterator * getInternal (const RowBlockConstIterator *b);  .",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html:3099,Performance,perform,performances,3099,"lumn j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; FullVector< Real > operator* (const FullVector< Real > &v) const;  ; void mul (FullVector< Real > &res, const FullVector< Real > &b) const;  ; void mulT (FullVector< Real > &res, const FullVector< Real > &b) const;  ; FullMatrix< Real > operator* (const FullMatrix< Real > &m) const;  ; void mul (FullMatrix< Real > &res, const FullMatrix< Real > &m) const;  ; void mulT (FullMatrix< Real > &res, const FullMatrix< Real > &m) const;  ; const char * Name ();  ; const char * Name ();  ; const char * Name ();  ; const char * Name ();  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ()",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html:3273,Performance,perform,performances,3273,"...;  ; FullVector< Real > operator* (const FullVector< Real > &v) const;  ; void mul (FullVector< Real > &res, const FullVector< Real > &b) const;  ; void mulT (FullVector< Real > &res, const FullVector< Real > &b) const;  ; FullMatrix< Real > operator* (const FullMatrix< Real > &m) const;  ; void mul (FullMatrix< Real > &res, const FullMatrix< Real > &m) const;  ; void mulT (FullMatrix< Real > &res, const FullMatrix< Real > &m) const;  ; const char * Name ();  ; const char * Name ();  ; const char * Name ();  ; const char * Name ();  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API)",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html:3447,Performance,perform,performances,3447,"Real > &res, const FullVector< Real > &b) const;  ; FullMatrix< Real > operator* (const FullMatrix< Real > &m) const;  ; void mul (FullMatrix< Real > &res, const FullMatrix< Real > &m) const;  ; void mulT (FullMatrix< Real > &res, const FullMatrix< Real > &m) const;  ; const char * Name ();  ; const char * Name ();  ; const char * Name ();  ; const char * Name ();  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html:3621,Performance,perform,performances,3621,"Real > &m) const;  ; void mulT (FullMatrix< Real > &res, const FullMatrix< Real > &m) const;  ; const char * Name ();  ; const char * Name ();  ; const char * Name ();  ; const char * Name ();  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html:3795,Performance,perform,performances,3795,"st char * Name ();  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html:3969,Performance,perform,performances,3969,"virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html:4569,Performance,perform,performances,4569,"es from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html:4743,Performance,perform,performances,4743,"es from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index i",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html:4917,Performance,perform,performances,4917,"es from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *resul",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html:5091,Performance,perform,performances,5091,"Matrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const floa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html:5265,Performance,perform,performances,5265,"ible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply th",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html:5439,Performance,perform,performances,5439,"virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) cons",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html:17262,Performance,perform,performances,17262," template<class Real > . sofa::linearalgebra::FullMatrix< Real >::FullMatrix ; (; Index ; nbRow, . Index ; nbCol . ). ◆ FullMatrix() [3/4]. template<class Real > . sofa::linearalgebra::FullMatrix< Real >::FullMatrix ; (; Real * ; p, . Index ; nbRow, . Index ; nbCol . ). ◆ FullMatrix() [4/4]. template<class Real > . sofa::linearalgebra::FullMatrix< Real >::FullMatrix ; (; Real * ; p, . Index ; nbRow, . Index ; nbCol, . Index ; pitch . ). ◆ ~FullMatrix(). template<class Real > . sofa::linearalgebra::FullMatrix< Real >::~FullMatrix. override . Function details. ◆ add() [1/8]. template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::add ; (; Index ; row, . Index ; col, . double ; v . ). overridevirtual . Add v to the existing value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ add() [2/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [3/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [4/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [6/8]. template<typename T > . void so",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html:17358,Performance,perform,performances,17358,"(; Index ; nbRow, . Index ; nbCol . ). ◆ FullMatrix() [3/4]. template<class Real > . sofa::linearalgebra::FullMatrix< Real >::FullMatrix ; (; Real * ; p, . Index ; nbRow, . Index ; nbCol . ). ◆ FullMatrix() [4/4]. template<class Real > . sofa::linearalgebra::FullMatrix< Real >::FullMatrix ; (; Real * ; p, . Index ; nbRow, . Index ; nbCol, . Index ; pitch . ). ◆ ~FullMatrix(). template<class Real > . sofa::linearalgebra::FullMatrix< Real >::~FullMatrix. override . Function details. ◆ add() [1/8]. template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::add ; (; Index ; row, . Index ; col, . double ; v . ). overridevirtual . Add v to the existing value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ add() [2/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [3/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [4/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [6/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This fun",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html:17537,Performance,perform,performances,17537,"llMatrix() [4/4]. template<class Real > . sofa::linearalgebra::FullMatrix< Real >::FullMatrix ; (; Real * ; p, . Index ; nbRow, . Index ; nbCol, . Index ; pitch . ). ◆ ~FullMatrix(). template<class Real > . sofa::linearalgebra::FullMatrix< Real >::~FullMatrix. override . Function details. ◆ add() [1/8]. template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::add ; (; Index ; row, . Index ; col, . double ; v . ). overridevirtual . Add v to the existing value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ add() [2/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [3/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [4/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [6/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [7/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html:17633,Performance,perform,performances,17633," >::FullMatrix ; (; Real * ; p, . Index ; nbRow, . Index ; nbCol, . Index ; pitch . ). ◆ ~FullMatrix(). template<class Real > . sofa::linearalgebra::FullMatrix< Real >::~FullMatrix. override . Function details. ◆ add() [1/8]. template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::add ; (; Index ; row, . Index ; col, . double ; v . ). overridevirtual . Add v to the existing value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ add() [2/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [3/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [4/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [6/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [7/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [8/8]. template<typename T > . vi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html:17812,Performance,perform,performances,17812,"ction details. ◆ add() [1/8]. template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::add ; (; Index ; row, . Index ; col, . double ; v . ). overridevirtual . Add v to the existing value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ add() [2/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [3/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [4/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [6/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [7/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [8/8]. template<typename T > . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ begin() [1/2]. template<class Real > . FullMatrix< Real >:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html:17908,Performance,perform,performances,17908,":FullMatrix< Real >::add ; (; Index ; row, . Index ; col, . double ; v . ). overridevirtual . Add v to the existing value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ add() [2/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [3/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [4/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [6/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [7/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [8/8]. template<typename T > . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ begin() [1/2]. template<class Real > . FullMatrix< Real >::LineIterator sofa::linearalgebra::FullMatrix< Real >::begin. ◆ begin() [2/2].",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html:18087,Performance,perform,performances,18087,"a::linearalgebra::BaseMatrix. ◆ add() [2/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [3/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [4/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [6/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [7/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [8/8]. template<typename T > . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ begin() [1/2]. template<class Real > . FullMatrix< Real >::LineIterator sofa::linearalgebra::FullMatrix< Real >::begin. ◆ begin() [2/2]. template<class Real > . FullMatrix< Real >::LineConstIterator sofa::linearalgebra::FullMatrix< Real >::begin. ◆ clear() [1/2]. template<class Real > . void sofa::linearalgebra::FullMatrix< Real >:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html:18183,Performance,perform,performances,18183,":linearalgebra::BaseMatrix::add. Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [3/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [4/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [6/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [7/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [8/8]. template<typename T > . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ begin() [1/2]. template<class Real > . FullMatrix< Real >::LineIterator sofa::linearalgebra::FullMatrix< Real >::begin. ◆ begin() [2/2]. template<class Real > . FullMatrix< Real >::LineConstIterator sofa::linearalgebra::FullMatrix< Real >::begin. ◆ clear() [1/2]. template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clear ; (; ). overridevirtual . Reset all values to 0. ; Implements sofa::lin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html:18362,Performance,perform,performances,18362,"obtain better performances. . ◆ add() [3/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [4/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [6/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [7/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [8/8]. template<typename T > . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ begin() [1/2]. template<class Real > . FullMatrix< Real >::LineIterator sofa::linearalgebra::FullMatrix< Real >::begin. ◆ begin() [2/2]. template<class Real > . FullMatrix< Real >::LineConstIterator sofa::linearalgebra::FullMatrix< Real >::begin. ◆ clear() [1/2]. template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clear ; (; ). overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clear ; (; Index ; i, . Index ; j . ). overridevirtual . Reimplemented from sofa::line",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html:18541,Performance,perform,performances,18541,"obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [4/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [6/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [7/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [8/8]. template<typename T > . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ begin() [1/2]. template<class Real > . FullMatrix< Real >::LineIterator sofa::linearalgebra::FullMatrix< Real >::begin. ◆ begin() [2/2]. template<class Real > . FullMatrix< Real >::LineConstIterator sofa::linearalgebra::FullMatrix< Real >::begin. ◆ clear() [1/2]. template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clear ; (; ). overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clear ; (; Index ; i, . Index ; j . ). overridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clearCol ; (; Index ; j). overridevirtual . Reset the all values in colu",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html:8826,Security,access,access,8826,"st;  Multiply the transposed matrix by float vector v and add the result in vector result. More...;  ; virtual void opPMulTV (double *result, const double *v) const;  Multiply the transposed matrix by double vector v and add the result in vector result. More...;  ; virtual void opMulTM (BaseMatrix *result, BaseMatrix *m) const;  Multiply the transposed matrix by matrix m and store the result in matrix result. More...;  ; virtual void opAddM (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the matrix to the m matrix and strore the result in m. More...;  ; virtual void opAddMT (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the transposed matrix to the m matrix and strore the result in m. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual MatrixCategory getCategory () const;  ; virtual Index getBlockRows () const;  ; virtual Index getBlockCols () const;  ; virtual Index bRowSize () const;  ; virtual Index bColSize () const;  ; virtual Index getBandWidth () const;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  ; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the give",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html:8919,Security,access,access,8919,"const;  Multiply the transposed matrix by matrix m and store the result in matrix result. More...;  ; virtual void opAddM (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the matrix to the m matrix and strore the result in m. More...;  ; virtual void opAddMT (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the transposed matrix to the m matrix and strore the result in m. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual MatrixCategory getCategory () const;  ; virtual Index getBlockRows () const;  ; virtual Index getBlockCols () const;  ; virtual Index bRowSize () const;  ; virtual Index bColSize () const;  ; virtual Index getBandWidth () const;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  ; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the given row of blocks. More...;  ; virtual ColBlockConstIterator bRowEnd (Index ib) const;  Get the iterator corresponding to the end of the given row of blocks. More...;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > bRowRange (Index ib) const;  Get the iterators corresponding to the beginning and end of ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html:9014,Security,access,access,9014,"tual void opAddM (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the matrix to the m matrix and strore the result in m. More...;  ; virtual void opAddMT (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the transposed matrix to the m matrix and strore the result in m. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual MatrixCategory getCategory () const;  ; virtual Index getBlockRows () const;  ; virtual Index getBlockCols () const;  ; virtual Index bRowSize () const;  ; virtual Index bColSize () const;  ; virtual Index getBandWidth () const;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  ; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the given row of blocks. More...;  ; virtual ColBlockConstIterator bRowEnd (Index ib) const;  Get the iterator corresponding to the end of the given row of blocks. More...;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > bRowRange (Index ib) const;  Get the iterators corresponding to the beginning and end of the given row of blocks. More...;  ; virtual RowBlockConstIterator bRowsBegin () const;  Get the iterator",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html:1899,Usability,clear,clear,1899," pitch);  ;  ~FullMatrix () override;  ; Real * ptr ();  ; const Real * ptr () const;  ; LineIterator begin ();  ; LineIterator end ();  ; LineConstIterator begin () const;  ; LineConstIterator end () const;  ; Real * operator[] (Index i);  ; const Real * operator[] (Index i) const;  ; void resize (Index nbRow, Index nbCol) override;  Resize the matrix and reset all values to 0. More...;  ; Index rowSize (void) const override;  Number of rows. More...;  ; Index colSize (void) const override;  Number of columns. More...;  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; FullVector< Real > operator* (const FullVector< Real > &v) const;  ; void mul (FullVector< Real > &res, const FullVector< Real > &b) const;  ; void mulT (FullVector< Real > &res, const FullVector< Real > &b) const;  ; FullMatrix< Real > operator* (const FullMatrix< Real > &m) const;  ; void mul (FullMatrix< Real > &res, const FullMatrix< Real > &m) const;  ; void mulT (FullMatrix< Real > &res, const FullMatrix< Real > &m) const;  ; const char * Name ();  ; const char * Name ();  ; const char * Name ();  ; const char * Name ();  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html:1942,Usability,clear,clearRow,1942," pitch);  ;  ~FullMatrix () override;  ; Real * ptr ();  ; const Real * ptr () const;  ; LineIterator begin ();  ; LineIterator end ();  ; LineConstIterator begin () const;  ; LineConstIterator end () const;  ; Real * operator[] (Index i);  ; const Real * operator[] (Index i) const;  ; void resize (Index nbRow, Index nbCol) override;  Resize the matrix and reset all values to 0. More...;  ; Index rowSize (void) const override;  Number of rows. More...;  ; Index colSize (void) const override;  Number of columns. More...;  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; FullVector< Real > operator* (const FullVector< Real > &v) const;  ; void mul (FullVector< Real > &res, const FullVector< Real > &b) const;  ; void mulT (FullVector< Real > &res, const FullVector< Real > &b) const;  ; FullMatrix< Real > operator* (const FullMatrix< Real > &m) const;  ; void mul (FullMatrix< Real > &res, const FullMatrix< Real > &m) const;  ; void mulT (FullMatrix< Real > &res, const FullMatrix< Real > &m) const;  ; const char * Name ();  ; const char * Name ();  ; const char * Name ();  ; const char * Name ();  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html:2025,Usability,clear,clearCol,2025,"n ();  ; LineIterator end ();  ; LineConstIterator begin () const;  ; LineConstIterator end () const;  ; Real * operator[] (Index i);  ; const Real * operator[] (Index i) const;  ; void resize (Index nbRow, Index nbCol) override;  Resize the matrix and reset all values to 0. More...;  ; Index rowSize (void) const override;  Number of rows. More...;  ; Index colSize (void) const override;  Number of columns. More...;  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; FullVector< Real > operator* (const FullVector< Real > &v) const;  ; void mul (FullVector< Real > &res, const FullVector< Real > &b) const;  ; void mulT (FullVector< Real > &res, const FullVector< Real > &b) const;  ; FullMatrix< Real > operator* (const FullMatrix< Real > &m) const;  ; void mul (FullMatrix< Real > &res, const FullMatrix< Real > &m) const;  ; void mulT (FullMatrix< Real > &res, const FullMatrix< Real > &m) const;  ; const char * Name ();  ; const char * Name ();  ; const char * Name ();  ; const char * Name ();  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. Th",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html:2111,Usability,clear,clearRowCol,2111," () const;  ; Real * operator[] (Index i);  ; const Real * operator[] (Index i) const;  ; void resize (Index nbRow, Index nbCol) override;  Resize the matrix and reset all values to 0. More...;  ; Index rowSize (void) const override;  Number of rows. More...;  ; Index colSize (void) const override;  Number of columns. More...;  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; FullVector< Real > operator* (const FullVector< Real > &v) const;  ; void mul (FullVector< Real > &res, const FullVector< Real > &b) const;  ; void mulT (FullVector< Real > &res, const FullVector< Real > &b) const;  ; FullMatrix< Real > operator* (const FullMatrix< Real > &m) const;  ; void mul (FullMatrix< Real > &res, const FullMatrix< Real > &m) const;  ; void mulT (FullMatrix< Real > &res, const FullMatrix< Real > &m) const;  ; const char * Name ();  ; const char * Name ();  ; const char * Name ();  ; const char * Name ();  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Ind",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html:2208,Usability,clear,clear,2208," const;  ; void resize (Index nbRow, Index nbCol) override;  Resize the matrix and reset all values to 0. More...;  ; Index rowSize (void) const override;  Number of rows. More...;  ; Index colSize (void) const override;  Number of columns. More...;  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; FullVector< Real > operator* (const FullVector< Real > &v) const;  ; void mul (FullVector< Real > &res, const FullVector< Real > &b) const;  ; void mulT (FullVector< Real > &res, const FullVector< Real > &b) const;  ; FullMatrix< Real > operator* (const FullMatrix< Real > &m) const;  ; void mul (FullMatrix< Real > &res, const FullMatrix< Real > &m) const;  ; void mulT (FullMatrix< Real > &res, const FullMatrix< Real > &m) const;  ; const char * Name ();  ; const char * Name ();  ; const char * Name ();  ; const char * Name ();  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html:5478,Usability,clear,clearRows,5478,"a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html:5581,Usability,clear,clearCols,5581,"ndex row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; virtual void opPMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and add t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html:5692,Usability,clear,clearRowsCols,5692,"ter performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; virtual void opPMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and add the result in vector result. More...;  ; virtual void opPMulV (double *result, const double *v) const;  Multiply the matrix by",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html:18986,Usability,clear,clear,18986,"seMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [6/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [7/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [8/8]. template<typename T > . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ begin() [1/2]. template<class Real > . FullMatrix< Real >::LineIterator sofa::linearalgebra::FullMatrix< Real >::begin. ◆ begin() [2/2]. template<class Real > . FullMatrix< Real >::LineConstIterator sofa::linearalgebra::FullMatrix< Real >::begin. ◆ clear() [1/2]. template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clear ; (; ). overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clear ; (; Index ; i, . Index ; j . ). overridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clearCol ; (; Index ; j). overridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clearRow ; (; Index ; i). overridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clearRowCol ; (; Index ; i). overridevirtual . Reset the value of both row and column i to 0. ; Re",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html:19071,Usability,clear,clear,19071,"may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [6/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [7/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [8/8]. template<typename T > . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ begin() [1/2]. template<class Real > . FullMatrix< Real >::LineIterator sofa::linearalgebra::FullMatrix< Real >::begin. ◆ begin() [2/2]. template<class Real > . FullMatrix< Real >::LineConstIterator sofa::linearalgebra::FullMatrix< Real >::begin. ◆ clear() [1/2]. template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clear ; (; ). overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clear ; (; Index ; i, . Index ; j . ). overridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clearCol ; (; Index ; j). overridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clearRow ; (; Index ; i). overridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clearRowCol ; (; Index ; i). overridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize().",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html:19174,Usability,clear,clear,19174,"ter performances. . ◆ add() [6/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [7/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [8/8]. template<typename T > . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ begin() [1/2]. template<class Real > . FullMatrix< Real >::LineIterator sofa::linearalgebra::FullMatrix< Real >::begin. ◆ begin() [2/2]. template<class Real > . FullMatrix< Real >::LineConstIterator sofa::linearalgebra::FullMatrix< Real >::begin. ◆ clear() [1/2]. template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clear ; (; ). overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clear ; (; Index ; i, . Index ; j . ). overridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clearCol ; (; Index ; j). overridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clearRow ; (; Index ; i). overridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clearRowCol ; (; Index ; i). overridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<typename T > . Index sofa::linearalgebra::FullMatrix< T >::colSize ; (; void ; ); const. inlineoverridevirtual . Num",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html:19259,Usability,clear,clear,19259,"::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [7/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [8/8]. template<typename T > . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ begin() [1/2]. template<class Real > . FullMatrix< Real >::LineIterator sofa::linearalgebra::FullMatrix< Real >::begin. ◆ begin() [2/2]. template<class Real > . FullMatrix< Real >::LineConstIterator sofa::linearalgebra::FullMatrix< Real >::begin. ◆ clear() [1/2]. template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clear ; (; ). overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clear ; (; Index ; i, . Index ; j . ). overridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clearCol ; (; Index ; j). overridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clearRow ; (; Index ; i). overridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clearRowCol ; (; Index ; i). overridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<typename T > . Index sofa::linearalgebra::FullMatrix< T >::colSize ; (; void ; ); const. inlineoverridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ ele",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html:19370,Usability,clear,clearCol,19370,". . ◆ add() [7/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [8/8]. template<typename T > . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ begin() [1/2]. template<class Real > . FullMatrix< Real >::LineIterator sofa::linearalgebra::FullMatrix< Real >::begin. ◆ begin() [2/2]. template<class Real > . FullMatrix< Real >::LineConstIterator sofa::linearalgebra::FullMatrix< Real >::begin. ◆ clear() [1/2]. template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clear ; (; ). overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clear ; (; Index ; i, . Index ; j . ). overridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clearCol ; (; Index ; j). overridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clearRow ; (; Index ; i). overridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clearRowCol ; (; Index ; i). overridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<typename T > . Index sofa::linearalgebra::FullMatrix< T >::colSize ; (; void ; ); const. inlineoverridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ element(). template<class Real > . SReal sofa::linearalgebra::FullMatrix< Real >::element ; (; Index ; i, . Index ; j . ); const. ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html:19452,Usability,clear,clearCol,19452,"::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [8/8]. template<typename T > . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ begin() [1/2]. template<class Real > . FullMatrix< Real >::LineIterator sofa::linearalgebra::FullMatrix< Real >::begin. ◆ begin() [2/2]. template<class Real > . FullMatrix< Real >::LineConstIterator sofa::linearalgebra::FullMatrix< Real >::begin. ◆ clear() [1/2]. template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clear ; (; ). overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clear ; (; Index ; i, . Index ; j . ). overridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clearCol ; (; Index ; j). overridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clearRow ; (; Index ; i). overridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clearRowCol ; (; Index ; i). overridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<typename T > . Index sofa::linearalgebra::FullMatrix< T >::colSize ; (; void ; ); const. inlineoverridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ element(). template<class Real > . SReal sofa::linearalgebra::FullMatrix< Real >::element ; (; Index ; i, . Index ; j . ); const. overridevirtual . Read the value of the element at row i, column j ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html:19591,Usability,clear,clearRow,19591," virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ begin() [1/2]. template<class Real > . FullMatrix< Real >::LineIterator sofa::linearalgebra::FullMatrix< Real >::begin. ◆ begin() [2/2]. template<class Real > . FullMatrix< Real >::LineConstIterator sofa::linearalgebra::FullMatrix< Real >::begin. ◆ clear() [1/2]. template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clear ; (; ). overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clear ; (; Index ; i, . Index ; j . ). overridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clearCol ; (; Index ; j). overridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clearRow ; (; Index ; i). overridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clearRowCol ; (; Index ; i). overridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<typename T > . Index sofa::linearalgebra::FullMatrix< T >::colSize ; (; void ; ); const. inlineoverridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ element(). template<class Real > . SReal sofa::linearalgebra::FullMatrix< Real >::element ; (; Index ; i, . Index ; j . ); const. overridevirtual . Read the value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ end() [1/2]. template<class Real > . FullMatrix< Real >::LineIterator sofa::linear",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html:19673,Usability,clear,clearRow,19673,"isting value of the element at row i, column j (using 0-based indices) . ◆ begin() [1/2]. template<class Real > . FullMatrix< Real >::LineIterator sofa::linearalgebra::FullMatrix< Real >::begin. ◆ begin() [2/2]. template<class Real > . FullMatrix< Real >::LineConstIterator sofa::linearalgebra::FullMatrix< Real >::begin. ◆ clear() [1/2]. template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clear ; (; ). overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clear ; (; Index ; i, . Index ; j . ). overridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clearCol ; (; Index ; j). overridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clearRow ; (; Index ; i). overridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clearRowCol ; (; Index ; i). overridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<typename T > . Index sofa::linearalgebra::FullMatrix< T >::colSize ; (; void ; ); const. inlineoverridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ element(). template<class Real > . SReal sofa::linearalgebra::FullMatrix< Real >::element ; (; Index ; i, . Index ; j . ); const. overridevirtual . Read the value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ end() [1/2]. template<class Real > . FullMatrix< Real >::LineIterator sofa::linearalgebra::FullMatrix< Real >::end. ◆ end() [2/2]. template<class Rea",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html:19809,Usability,clear,clearRowCol,19809,":linearalgebra::FullMatrix< Real >::begin. ◆ begin() [2/2]. template<class Real > . FullMatrix< Real >::LineConstIterator sofa::linearalgebra::FullMatrix< Real >::begin. ◆ clear() [1/2]. template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clear ; (; ). overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clear ; (; Index ; i, . Index ; j . ). overridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clearCol ; (; Index ; j). overridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clearRow ; (; Index ; i). overridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clearRowCol ; (; Index ; i). overridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<typename T > . Index sofa::linearalgebra::FullMatrix< T >::colSize ; (; void ; ); const. inlineoverridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ element(). template<class Real > . SReal sofa::linearalgebra::FullMatrix< Real >::element ; (; Index ; i, . Index ; j . ); const. overridevirtual . Read the value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ end() [1/2]. template<class Real > . FullMatrix< Real >::LineIterator sofa::linearalgebra::FullMatrix< Real >::end. ◆ end() [2/2]. template<class Real > . FullMatrix< Real >::LineConstIterator sofa::linearalgebra::FullMatrix< Real >::end. ◆ mul() [1/2]. template<class Real > . void sofa::linearalgebra",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html:19894,Usability,clear,clearRowCol,19894,"lass Real > . FullMatrix< Real >::LineConstIterator sofa::linearalgebra::FullMatrix< Real >::begin. ◆ clear() [1/2]. template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clear ; (; ). overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clear ; (; Index ; i, . Index ; j . ). overridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clearCol ; (; Index ; j). overridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clearRow ; (; Index ; i). overridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::clearRowCol ; (; Index ; i). overridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<typename T > . Index sofa::linearalgebra::FullMatrix< T >::colSize ; (; void ; ); const. inlineoverridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ element(). template<class Real > . SReal sofa::linearalgebra::FullMatrix< Real >::element ; (; Index ; i, . Index ; j . ); const. overridevirtual . Read the value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ end() [1/2]. template<class Real > . FullMatrix< Real >::LineIterator sofa::linearalgebra::FullMatrix< Real >::end. ◆ end() [2/2]. template<class Real > . FullMatrix< Real >::LineConstIterator sofa::linearalgebra::FullMatrix< Real >::end. ◆ mul() [1/2]. template<class Real > . void sofa::linearalgebra::FullMatrix< Real >::mul ; (; FullMatrix< Real > & ; res, . const Ful",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix_1_1_line_const_iterator-members.html:282,Modifiability,inherit,inherited,282,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::FullMatrix< T >::LineConstIterator Member List . This is the complete list of members for sofa::linearalgebra::FullMatrix< T >::LineConstIterator, including all inherited members. firstsofa::linearalgebra::FullMatrix< T >::LineConstIterator; LineConstIterator(Real *p, Index i, Index size, Index pitch)sofa::linearalgebra::FullMatrix< T >::LineConstIteratorinline; operator!=(const LineConstIterator &i) constsofa::linearalgebra::FullMatrix< T >::LineConstIteratorinline; operator*() constsofa::linearalgebra::FullMatrix< T >::LineConstIteratorinline; operator++()sofa::linearalgebra::FullMatrix< T >::LineConstIteratorinline; operator++(int)sofa::linearalgebra::FullMatrix< T >::LineConstIteratorinline; operator--()sofa::linearalgebra::FullMatrix< T >::LineConstIteratorinline; operator--(int)sofa::linearalgebra::FullMatrix< T >::LineConstIteratorinline; operator->() constsofa::linearalgebra::FullMatrix< T >::LineConstIteratorinline; operator==(const LineConstIterator &i) constsofa::linearalgebra::FullMatrix< T >::LineConstIteratorinline; secondsofa::linearalgebra::FullMatrix< T >::LineConstIterator. Generated on Mon Nov 11 2024 03:32:16 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix_1_1_line_const_iterator-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix_1_1_line_const_iterator-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix_1_1_line_iterator-members.html:272,Modifiability,inherit,inherited,272,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::FullMatrix< T >::LineIterator Member List . This is the complete list of members for sofa::linearalgebra::FullMatrix< T >::LineIterator, including all inherited members. firstsofa::linearalgebra::FullMatrix< T >::LineConstIterator; LineConstIterator(Real *p, Index i, Index size, Index pitch)sofa::linearalgebra::FullMatrix< T >::LineConstIteratorinline; LineIterator(Real *p, Index i, Index size, Index pitch)sofa::linearalgebra::FullMatrix< T >::LineIteratorinline; operator!=(const LineConstIterator &i) constsofa::linearalgebra::FullMatrix< T >::LineConstIteratorinline; operator*()sofa::linearalgebra::FullMatrix< T >::LineIteratorinline; sofa::linearalgebra::FullMatrix::LineConstIterator::operator*() constsofa::linearalgebra::FullMatrix< T >::LineConstIteratorinline; operator++()sofa::linearalgebra::FullMatrix< T >::LineConstIteratorinline; operator++(int)sofa::linearalgebra::FullMatrix< T >::LineConstIteratorinline; operator--()sofa::linearalgebra::FullMatrix< T >::LineConstIteratorinline; operator--(int)sofa::linearalgebra::FullMatrix< T >::LineConstIteratorinline; operator->()sofa::linearalgebra::FullMatrix< T >::LineIteratorinline; sofa::linearalgebra::FullMatrix::LineConstIterator::operator->() constsofa::linearalgebra::FullMatrix< T >::LineConstIteratorinline; operator==(const LineConstIterator &i) constsofa::linearalgebra::FullMatrix< T >::LineConstIteratorinline; secondsofa::linearalgebra::FullMatrix< T >::LineConstIterator. Generated on Mon Nov 11 2024 03:32:16 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix_1_1_line_iterator-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix_1_1_line_iterator-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix_1_1_line_iterator.html:546,Modifiability,inherit,inherited,546,"﻿. SOFA API: sofa::linearalgebra::FullMatrix< T >::LineIterator Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::linearalgebra::FullMatrix< T >::LineIterator Class Reference . #include <FullMatrix.h>. Inheritance diagram for sofa::linearalgebra::FullMatrix< T >::LineIterator:. [legend]. Public Member Functions;  LineIterator (Real *p, Index i, Index size, Index pitch);  ; Line & operator* ();  ; Line * operator-> ();  ;  Public Member Functions inherited from sofa::linearalgebra::FullMatrix< T >::LineConstIterator;  LineConstIterator (Real *p, Index i, Index size, Index pitch);  ; const Line & operator* () const;  ; const Line * operator-> () const;  ; void operator++ ();  ; void operator++ (int);  ; void operator-- ();  ; void operator-- (int);  ; bool operator== (const LineConstIterator &i) const;  ; bool operator!= (const LineConstIterator &i) const;  . Additional Inherited Members;  Public Attributes inherited from sofa::linearalgebra::FullMatrix< T >::LineConstIterator; Index first;  ; Line second;  . Constructor details. ◆ LineIterator(). template<typename T > . sofa::linearalgebra::FullMatrix< T >::LineIterator::LineIterator ; (; Real * ; p, . Index ; i, . Index ; size, . Index ; pitch . ). inline . Function details. ◆ operator*(). template<typename T > . Line& sofa::linearalgebra::FullMatrix< T >::LineIterator::operator* ; (; ). inline . ◆ operator->(). template<typename T > . Line* sofa::linearalgebra::FullMatrix< T >::LineIterator::operator-> ; (; ). inline . sofalinearalgebraFullMatrixLineIterator; Generated on Mon Nov 11 2024 03:32:16 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix_1_1_line_iterator.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix_1_1_line_iterator.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix_1_1_line_iterator.html:1015,Modifiability,inherit,inherited,1015,"﻿. SOFA API: sofa::linearalgebra::FullMatrix< T >::LineIterator Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::linearalgebra::FullMatrix< T >::LineIterator Class Reference . #include <FullMatrix.h>. Inheritance diagram for sofa::linearalgebra::FullMatrix< T >::LineIterator:. [legend]. Public Member Functions;  LineIterator (Real *p, Index i, Index size, Index pitch);  ; Line & operator* ();  ; Line * operator-> ();  ;  Public Member Functions inherited from sofa::linearalgebra::FullMatrix< T >::LineConstIterator;  LineConstIterator (Real *p, Index i, Index size, Index pitch);  ; const Line & operator* () const;  ; const Line * operator-> () const;  ; void operator++ ();  ; void operator++ (int);  ; void operator-- ();  ; void operator-- (int);  ; bool operator== (const LineConstIterator &i) const;  ; bool operator!= (const LineConstIterator &i) const;  . Additional Inherited Members;  Public Attributes inherited from sofa::linearalgebra::FullMatrix< T >::LineConstIterator; Index first;  ; Line second;  . Constructor details. ◆ LineIterator(). template<typename T > . sofa::linearalgebra::FullMatrix< T >::LineIterator::LineIterator ; (; Real * ; p, . Index ; i, . Index ; size, . Index ; pitch . ). inline . Function details. ◆ operator*(). template<typename T > . Line& sofa::linearalgebra::FullMatrix< T >::LineIterator::operator* ; (; ). inline . ◆ operator->(). template<typename T > . Line* sofa::linearalgebra::FullMatrix< T >::LineIterator::operator-> ; (; ). inline . sofalinearalgebraFullMatrixLineIterator; Generated on Mon Nov 11 2024 03:32:16 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix_1_1_line_iterator.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_matrix_1_1_line_iterator.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_vector-members.html:244,Modifiability,inherit,inherited,244,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::FullVector< T > Member List . This is the complete list of members for sofa::linearalgebra::FullVector< T >, including all inherited members. add(Index i, SReal v) overridesofa::linearalgebra::FullVector< T >inlinevirtual; sofa::linearalgebra::BaseVector::add(Index i0, Index n, const float *src)sofa::linearalgebra::BaseVectorinlinevirtual; sofa::linearalgebra::BaseVector::add(Index i0, Index n, const double *src)sofa::linearalgebra::BaseVectorinlinevirtual; sofa::linearalgebra::BaseVector::add(Index i0, Index n, const int *src)sofa::linearalgebra::BaseVectorinlinevirtual; addDefaultImpl(Index i0, Index n, const T *src)sofa::linearalgebra::BaseVectorinlineprotected; allocsizesofa::linearalgebra::FullVector< T >protected; begin()sofa::linearalgebra::FullVector< T >inline; begin() constsofa::linearalgebra::FullVector< T >inline; capacity() constsofa::linearalgebra::FullVector< T >inline; checkIndex(Index n) constsofa::linearalgebra::FullVector< T >protected; clear() overridesofa::linearalgebra::FullVector< T >virtual; clear(Index dim) overridesofa::linearalgebra::FullVector< T >virtual; const_iterator typedefsofa::linearalgebra::FullVector< T >; ConstIterator typedefsofa::linearalgebra::FullVector< T >; cursizesofa::linearalgebra::FullVector< T >protected; datasofa::linearalgebra::FullVector< T >protected; dot(const FullVector< Real > &a) constsofa::linearalgebra::FullVector< T >; element(Index i) const overridesofa::linearalgebra::FullVector< T >inlinevirtual; ELEMENT_FLOAT enum valuesofa::linearalgebra::BaseVector; ELEMENT_INT enum valuesofa::linearalgebra::BaseVector; ELEMENT_UNKNOWN enum valuesofa::linearalgebra::BaseVector; elements(Index i0, Index n, float *src) constsofa::linearalgebra::BaseVectorinlinevirtual; elements(Index i0, Index n, double *src) constsofa::linearalgebra::BaseVectorinlinevirtual; elements(Index i0, Index n, int *src) const",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_vector-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_vector-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_vector-members.html:1091,Usability,clear,clear,1091," add(Index i, SReal v) overridesofa::linearalgebra::FullVector< T >inlinevirtual; sofa::linearalgebra::BaseVector::add(Index i0, Index n, const float *src)sofa::linearalgebra::BaseVectorinlinevirtual; sofa::linearalgebra::BaseVector::add(Index i0, Index n, const double *src)sofa::linearalgebra::BaseVectorinlinevirtual; sofa::linearalgebra::BaseVector::add(Index i0, Index n, const int *src)sofa::linearalgebra::BaseVectorinlinevirtual; addDefaultImpl(Index i0, Index n, const T *src)sofa::linearalgebra::BaseVectorinlineprotected; allocsizesofa::linearalgebra::FullVector< T >protected; begin()sofa::linearalgebra::FullVector< T >inline; begin() constsofa::linearalgebra::FullVector< T >inline; capacity() constsofa::linearalgebra::FullVector< T >inline; checkIndex(Index n) constsofa::linearalgebra::FullVector< T >protected; clear() overridesofa::linearalgebra::FullVector< T >virtual; clear(Index dim) overridesofa::linearalgebra::FullVector< T >virtual; const_iterator typedefsofa::linearalgebra::FullVector< T >; ConstIterator typedefsofa::linearalgebra::FullVector< T >; cursizesofa::linearalgebra::FullVector< T >protected; datasofa::linearalgebra::FullVector< T >protected; dot(const FullVector< Real > &a) constsofa::linearalgebra::FullVector< T >; element(Index i) const overridesofa::linearalgebra::FullVector< T >inlinevirtual; ELEMENT_FLOAT enum valuesofa::linearalgebra::BaseVector; ELEMENT_INT enum valuesofa::linearalgebra::BaseVector; ELEMENT_UNKNOWN enum valuesofa::linearalgebra::BaseVector; elements(Index i0, Index n, float *src) constsofa::linearalgebra::BaseVectorinlinevirtual; elements(Index i0, Index n, double *src) constsofa::linearalgebra::BaseVectorinlinevirtual; elements(Index i0, Index n, int *src) const",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_vector-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_vector-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_vector-members.html:1152,Usability,clear,clear,1152," add(Index i, SReal v) overridesofa::linearalgebra::FullVector< T >inlinevirtual; sofa::linearalgebra::BaseVector::add(Index i0, Index n, const float *src)sofa::linearalgebra::BaseVectorinlinevirtual; sofa::linearalgebra::BaseVector::add(Index i0, Index n, const double *src)sofa::linearalgebra::BaseVectorinlinevirtual; sofa::linearalgebra::BaseVector::add(Index i0, Index n, const int *src)sofa::linearalgebra::BaseVectorinlinevirtual; addDefaultImpl(Index i0, Index n, const T *src)sofa::linearalgebra::BaseVectorinlineprotected; allocsizesofa::linearalgebra::FullVector< T >protected; begin()sofa::linearalgebra::FullVector< T >inline; begin() constsofa::linearalgebra::FullVector< T >inline; capacity() constsofa::linearalgebra::FullVector< T >inline; checkIndex(Index n) constsofa::linearalgebra::FullVector< T >protected; clear() overridesofa::linearalgebra::FullVector< T >virtual; clear(Index dim) overridesofa::linearalgebra::FullVector< T >virtual; const_iterator typedefsofa::linearalgebra::FullVector< T >; ConstIterator typedefsofa::linearalgebra::FullVector< T >; cursizesofa::linearalgebra::FullVector< T >protected; datasofa::linearalgebra::FullVector< T >protected; dot(const FullVector< Real > &a) constsofa::linearalgebra::FullVector< T >; element(Index i) const overridesofa::linearalgebra::FullVector< T >inlinevirtual; ELEMENT_FLOAT enum valuesofa::linearalgebra::BaseVector; ELEMENT_INT enum valuesofa::linearalgebra::BaseVector; ELEMENT_UNKNOWN enum valuesofa::linearalgebra::BaseVector; elements(Index i0, Index n, float *src) constsofa::linearalgebra::BaseVectorinlinevirtual; elements(Index i0, Index n, double *src) constsofa::linearalgebra::BaseVectorinlinevirtual; elements(Index i0, Index n, int *src) const",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_vector-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_vector-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_vector.html:2422,Modifiability,inherit,inherited,2422,"v to the existing value of element i. More...;  ; Index size () const override;  Number of elements. More...;  ; FullVector< T > sub (Index i, Index n);  ; template<class TV > ; void getsub (Index i, Index n, TV &v);  ; template<class TV > ; void setsub (Index i, Index n, const TV &v);  ; void operator= (const FullVector< T > &a);  v = a More...;  ; void operator= (const T &a);  ; void operator+= (const FullVector< Real > &a);  v += a More...;  ; void operator-= (const FullVector< Real > &a);  v -= a More...;  ; void eq (const FullVector< Real > &a, Real f);  v = a*f More...;  ; void eq (const FullVector< Real > &a, const FullVector< Real > &b, Real f=1.0);  v = a+b*f More...;  ; void peq (const FullVector< Real > &a, Real f);  v += a*f More...;  ; void operator*= (Real f);  v *= f More...;  ; Real dot (const FullVector< Real > &a) const;  ; double norm () const;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseVector; virtual ~BaseVector ();  ; virtual const float * elements (Index i0, Index n, float *src) const;  Get the values of n elements, starting at element i0, into given float buffer, or return the pointer to the data if the in-memory format is compatible. More...;  ; virtual const double * elements (Index i0, Index n, double *src) const;  Get the values of n elements, starting at element i0, into given double buffer, or return the pointer to the data if the in-memory format is compatible. More...;  ; virtual const int * elements (Index i0, Index n, int *src) const;  Get the values of n elements, starting at element i0, into given int buffer, or return the pointer to the data if the in-memory format is compatible. More...;  ; virtual void set (Index i0, Index n, const float *src);  Write the values of n float elements, starting at element i0. More...;  ; virtual void set (Index i0, Index n, const double *src);  Write the values of n double elements, starting at element i0. More...;  ; virtual void set (Index i0, Index n, const int *src);  W",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_vector.html:4382,Modifiability,inherit,inherited,4382,"ex i0, Index n, const int *src);  Write the values of n int elements, starting at element i0. More...;  ; virtual void add (Index i0, Index n, const float *src);  Add to the values of n float elements, starting at element i0. More...;  ; virtual void add (Index i0, Index n, const double *src);  Add to the values of n double elements, starting at element i0. More...;  ; virtual void add (Index i0, Index n, const int *src);  Add to the values of n int elements, starting at element i0. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual bool isFull () const;  Return true if this vector is full, i.a. all elements are stored in memory. More...;  ; bool isSparse () const;  . Static Public Member Functions; static const char * Name ();  . Protected Member Functions; void checkIndex (Index n) const;  ;  Protected Member Functions inherited from sofa::linearalgebra::BaseVector; template<class T > ; const T * elementsDefaultImpl (Index i0, Index n, T *buffer) const;  ; template<class T > ; void setDefaultImpl (Index i0, Index n, const T *src);  ; template<class T > ; void addDefaultImpl (Index i0, Index n, const T *src);  . Attribute details. ◆ allocsize. template<typename T > . Index sofa::linearalgebra::FullVector< T >::allocsize. protected . ◆ cursize. template<typename T > . Index sofa::linearalgebra::FullVector< T >::cursize. protected . ◆ data. template<typename T > . T* sofa::linearalgebra::FullVector< T >::data. protected . Constructor details. ◆ FullVector() [1/5]. template<typename T > . sofa::linearalgebra::FullVector< T >::FullVector ; (; ). inline . ◆ FullVector() [2/5]. template<typename T > . sofa::linearalgebra::FullVector< T >::FullVector ; (; const FullVector< T > & ; vect). inline . ◆ FullVector() [3/5]. template<typename T > . sofa::linearalgebra::FullVector< T >::FullVector ; (; Index ; n). inlineexplicit . ◆ FullVector() [4/5]. template<typename T > . sofa::linearalgebra::FullVector< T >::Fu",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_vector.html:1071,Usability,clear,clear,1071,"  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members . sofa::linearalgebra::FullVector< T > Class Template Reference . #include <FullVector.h>. Inheritance diagram for sofa::linearalgebra::FullVector< T >:. [legend]. Protected Attributes; T * data;  ; Index cursize;  ; Index allocsize;  . Public Member Functions;  FullVector ();  ;  FullVector (const FullVector &vect);  ;  FullVector (Index n);  ;  FullVector (T *ptr, Index n);  ;  FullVector (T *ptr, Index n, Index nmax);  ;  ~FullVector () override;  ; T * ptr ();  ; const T * ptr () const;  ; void setptr (T *p);  ; Index capacity () const;  ; Iterator begin ();  ; Iterator end ();  ; ConstIterator begin () const;  ; ConstIterator end () const;  ; void fastResize (Index dim);  ; void resize (Index dim) override;  Resize the vector, and reset all values to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; void swap (FullVector< T > &v);  ; void clear (Index dim) override;  Reset the value of element i to 0. More...;  ; T & operator[] (Index i);  ; const T & operator[] (Index i) const;  ; SReal element (Index i) const override;  Read the value of element i. More...;  ; void set (Index i, SReal v) override;  Write the value of element i. More...;  ; void add (Index i, SReal v) override;  Add v to the existing value of element i. More...;  ; Index size () const override;  Number of elements. More...;  ; FullVector< T > sub (Index i, Index n);  ; template<class TV > ; void getsub (Index i, Index n, TV &v);  ; template<class TV > ; void setsub (Index i, Index n, const TV &v);  ; void operator= (const FullVector< T > &a);  v = a More...;  ; void operator= (const T &a);  ; void operator+= (const FullVector< Real > &a);  v += a More...;  ; void operator-= (const FullVector< Real > &a);  v -= a More...;  ; void eq (const FullVector< Real > &a, Real f);  v =",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_vector.html:1166,Usability,clear,clear,1166,"ublic Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members . sofa::linearalgebra::FullVector< T > Class Template Reference . #include <FullVector.h>. Inheritance diagram for sofa::linearalgebra::FullVector< T >:. [legend]. Protected Attributes; T * data;  ; Index cursize;  ; Index allocsize;  . Public Member Functions;  FullVector ();  ;  FullVector (const FullVector &vect);  ;  FullVector (Index n);  ;  FullVector (T *ptr, Index n);  ;  FullVector (T *ptr, Index n, Index nmax);  ;  ~FullVector () override;  ; T * ptr ();  ; const T * ptr () const;  ; void setptr (T *p);  ; Index capacity () const;  ; Iterator begin ();  ; Iterator end ();  ; ConstIterator begin () const;  ; ConstIterator end () const;  ; void fastResize (Index dim);  ; void resize (Index dim) override;  Resize the vector, and reset all values to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; void swap (FullVector< T > &v);  ; void clear (Index dim) override;  Reset the value of element i to 0. More...;  ; T & operator[] (Index i);  ; const T & operator[] (Index i) const;  ; SReal element (Index i) const override;  Read the value of element i. More...;  ; void set (Index i, SReal v) override;  Write the value of element i. More...;  ; void add (Index i, SReal v) override;  Add v to the existing value of element i. More...;  ; Index size () const override;  Number of elements. More...;  ; FullVector< T > sub (Index i, Index n);  ; template<class TV > ; void getsub (Index i, Index n, TV &v);  ; template<class TV > ; void setsub (Index i, Index n, const TV &v);  ; void operator= (const FullVector< T > &a);  v = a More...;  ; void operator= (const T &a);  ; void operator+= (const FullVector< Real > &a);  v += a More...;  ; void operator-= (const FullVector< Real > &a);  v -= a More...;  ; void eq (const FullVector< Real > &a, Real f);  v = a*f More...;  ; void eq (const FullVector< Real > &a, const FullVector< Real > &b, Real",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_vector.html:6534,Usability,clear,clear,6534,"llVector() [5/5]. template<typename T > . sofa::linearalgebra::FullVector< T >::FullVector ; (; T * ; ptr, . Index ; n, . Index ; nmax . ). inline . ◆ ~FullVector(). template<typename T > . sofa::linearalgebra::FullVector< T >::~FullVector ; (; ). inlineoverride . Function details. ◆ add(). template<typename T > . void sofa::linearalgebra::FullVector< T >::add ; (; Index ; i, . SReal ; v . ). inlineoverridevirtual . Add v to the existing value of element i. ; Implements sofa::linearalgebra::BaseVector. ◆ begin() [1/2]. template<typename T > . Iterator sofa::linearalgebra::FullVector< T >::begin ; (; ). inline . ◆ begin() [2/2]. template<typename T > . ConstIterator sofa::linearalgebra::FullVector< T >::begin ; (; ); const. inline . ◆ capacity(). template<typename T > . Index sofa::linearalgebra::FullVector< T >::capacity ; (; ); const. inline . ◆ checkIndex(). template<typename Real > . void sofa::linearalgebra::FullVector< Real >::checkIndex ; (; Index ; n); const. protected . ◆ clear() [1/2]. template<typename Real > . void sofa::linearalgebra::FullVector< Real >::clear ; (; ). overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseVector. ◆ clear() [2/2]. template<typename Real > . void sofa::linearalgebra::FullVector< Real >::clear ; (; Index ; i). overridevirtual . Reset the value of element i to 0. ; Reimplemented from sofa::linearalgebra::BaseVector. ◆ dot(). template<typename Real > . Real sofa::linearalgebra::FullVector< Real >::dot ; (; const FullVector< Real > & ; a); const. Returnsv.a . ◆ element(). template<typename T > . SReal sofa::linearalgebra::FullVector< T >::element ; (; Index ; i); const. inlineoverridevirtual . Read the value of element i. ; Implements sofa::linearalgebra::BaseVector. ◆ end() [1/2]. template<typename T > . Iterator sofa::linearalgebra::FullVector< T >::end ; (; ). inline . ◆ end() [2/2]. template<typename T > . ConstIterator sofa::linearalgebra::FullVector< T >::end ; (; ); const. inline . ◆ eq() [1/2]. t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_vector.html:6622,Usability,clear,clear,6622,"lVector< T >::FullVector ; (; T * ; ptr, . Index ; n, . Index ; nmax . ). inline . ◆ ~FullVector(). template<typename T > . sofa::linearalgebra::FullVector< T >::~FullVector ; (; ). inlineoverride . Function details. ◆ add(). template<typename T > . void sofa::linearalgebra::FullVector< T >::add ; (; Index ; i, . SReal ; v . ). inlineoverridevirtual . Add v to the existing value of element i. ; Implements sofa::linearalgebra::BaseVector. ◆ begin() [1/2]. template<typename T > . Iterator sofa::linearalgebra::FullVector< T >::begin ; (; ). inline . ◆ begin() [2/2]. template<typename T > . ConstIterator sofa::linearalgebra::FullVector< T >::begin ; (; ); const. inline . ◆ capacity(). template<typename T > . Index sofa::linearalgebra::FullVector< T >::capacity ; (; ); const. inline . ◆ checkIndex(). template<typename Real > . void sofa::linearalgebra::FullVector< Real >::checkIndex ; (; Index ; n); const. protected . ◆ clear() [1/2]. template<typename Real > . void sofa::linearalgebra::FullVector< Real >::clear ; (; ). overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseVector. ◆ clear() [2/2]. template<typename Real > . void sofa::linearalgebra::FullVector< Real >::clear ; (; Index ; i). overridevirtual . Reset the value of element i to 0. ; Reimplemented from sofa::linearalgebra::BaseVector. ◆ dot(). template<typename Real > . Real sofa::linearalgebra::FullVector< Real >::dot ; (; const FullVector< Real > & ; a); const. Returnsv.a . ◆ element(). template<typename T > . SReal sofa::linearalgebra::FullVector< T >::element ; (; Index ; i); const. inlineoverridevirtual . Read the value of element i. ; Implements sofa::linearalgebra::BaseVector. ◆ end() [1/2]. template<typename T > . Iterator sofa::linearalgebra::FullVector< T >::end ; (; ). inline . ◆ end() [2/2]. template<typename T > . ConstIterator sofa::linearalgebra::FullVector< T >::end ; (; ); const. inline . ◆ eq() [1/2]. template<typename Real > . void sofa::linearalgebra::FullVector< R",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_vector.html:6725,Usability,clear,clear,6725,"ofa::linearalgebra::FullVector< T >::~FullVector ; (; ). inlineoverride . Function details. ◆ add(). template<typename T > . void sofa::linearalgebra::FullVector< T >::add ; (; Index ; i, . SReal ; v . ). inlineoverridevirtual . Add v to the existing value of element i. ; Implements sofa::linearalgebra::BaseVector. ◆ begin() [1/2]. template<typename T > . Iterator sofa::linearalgebra::FullVector< T >::begin ; (; ). inline . ◆ begin() [2/2]. template<typename T > . ConstIterator sofa::linearalgebra::FullVector< T >::begin ; (; ); const. inline . ◆ capacity(). template<typename T > . Index sofa::linearalgebra::FullVector< T >::capacity ; (; ); const. inline . ◆ checkIndex(). template<typename Real > . void sofa::linearalgebra::FullVector< Real >::checkIndex ; (; Index ; n); const. protected . ◆ clear() [1/2]. template<typename Real > . void sofa::linearalgebra::FullVector< Real >::clear ; (; ). overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseVector. ◆ clear() [2/2]. template<typename Real > . void sofa::linearalgebra::FullVector< Real >::clear ; (; Index ; i). overridevirtual . Reset the value of element i to 0. ; Reimplemented from sofa::linearalgebra::BaseVector. ◆ dot(). template<typename Real > . Real sofa::linearalgebra::FullVector< Real >::dot ; (; const FullVector< Real > & ; a); const. Returnsv.a . ◆ element(). template<typename T > . SReal sofa::linearalgebra::FullVector< T >::element ; (; Index ; i); const. inlineoverridevirtual . Read the value of element i. ; Implements sofa::linearalgebra::BaseVector. ◆ end() [1/2]. template<typename T > . Iterator sofa::linearalgebra::FullVector< T >::end ; (; ). inline . ◆ end() [2/2]. template<typename T > . ConstIterator sofa::linearalgebra::FullVector< T >::end ; (; ); const. inline . ◆ eq() [1/2]. template<typename Real > . void sofa::linearalgebra::FullVector< Real >::eq ; (; const FullVector< Real > & ; a, . const FullVector< Real > & ; b, . Real ; f = 1.0 . ). v = a+b*f . ◆ eq() [2/2",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_vector.html:6813,Usability,clear,clear,6813,"e . Function details. ◆ add(). template<typename T > . void sofa::linearalgebra::FullVector< T >::add ; (; Index ; i, . SReal ; v . ). inlineoverridevirtual . Add v to the existing value of element i. ; Implements sofa::linearalgebra::BaseVector. ◆ begin() [1/2]. template<typename T > . Iterator sofa::linearalgebra::FullVector< T >::begin ; (; ). inline . ◆ begin() [2/2]. template<typename T > . ConstIterator sofa::linearalgebra::FullVector< T >::begin ; (; ); const. inline . ◆ capacity(). template<typename T > . Index sofa::linearalgebra::FullVector< T >::capacity ; (; ); const. inline . ◆ checkIndex(). template<typename Real > . void sofa::linearalgebra::FullVector< Real >::checkIndex ; (; Index ; n); const. protected . ◆ clear() [1/2]. template<typename Real > . void sofa::linearalgebra::FullVector< Real >::clear ; (; ). overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseVector. ◆ clear() [2/2]. template<typename Real > . void sofa::linearalgebra::FullVector< Real >::clear ; (; Index ; i). overridevirtual . Reset the value of element i to 0. ; Reimplemented from sofa::linearalgebra::BaseVector. ◆ dot(). template<typename Real > . Real sofa::linearalgebra::FullVector< Real >::dot ; (; const FullVector< Real > & ; a); const. Returnsv.a . ◆ element(). template<typename T > . SReal sofa::linearalgebra::FullVector< T >::element ; (; Index ; i); const. inlineoverridevirtual . Read the value of element i. ; Implements sofa::linearalgebra::BaseVector. ◆ end() [1/2]. template<typename T > . Iterator sofa::linearalgebra::FullVector< T >::end ; (; ). inline . ◆ end() [2/2]. template<typename T > . ConstIterator sofa::linearalgebra::FullVector< T >::end ; (; ); const. inline . ◆ eq() [1/2]. template<typename Real > . void sofa::linearalgebra::FullVector< Real >::eq ; (; const FullVector< Real > & ; a, . const FullVector< Real > & ; b, . Real ; f = 1.0 . ). v = a+b*f . ◆ eq() [2/2]. template<typename Real > . void sofa::linearalgebra::FullVector< Re",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_vector.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_full_vector.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix-members.html:252,Modifiability,inherit,inherited,252,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::LPtrFullMatrix< T > Member List . This is the complete list of members for sofa::linearalgebra::LPtrFullMatrix< T >, including all inherited members. add(Index i, Index j, double v) overridesofa::linearalgebra::FullMatrix< T >virtual; add(Index row, Index col, double v)=0sofa::linearalgebra::FullMatrix< T >; add(Index row, Index col, const type::Mat3x3d &_M)sofa::linearalgebra::FullMatrix< T >; add(Index row, Index col, const type::Mat3x3f &_M)sofa::linearalgebra::FullMatrix< T >; add(Index row, Index col, const type::Mat2x2d &_M)sofa::linearalgebra::FullMatrix< T >; add(Index row, Index col, const type::Mat2x2f &_M)sofa::linearalgebra::FullMatrix< T >; add(Index row, Index col, const type::Mat6x6d &_M)sofa::linearalgebra::FullMatrix< T >; add(Index row, Index col, const type::Mat6x6f &_M)sofa::linearalgebra::FullMatrix< T >; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat3x3d &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat3x3f &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat2x2d &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat2x2f &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat6x6d &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat6x6f &_M)sofa::linearalgebra::BaseMatrixvirtual; allocsizesofa::linearalgebra::FullMatrix< T >protected; bAccessorAdd(InternalBlockAccessor *b, Index i, Index j, double v)sofa::linearalgebra::BaseMatrixinlineprotectedvirtual; bAccessorAdd(InternalBlockAccessor *b, const float *buffer)sofa::linearalgebra::BaseMatrixinlineprotectedvirtual; bAccessorAdd(",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix-members.html:5691,Usability,clear,clear,5691,"atrix< T >; begin() constsofa::linearalgebra::FullMatrix< T >; blocAdd(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; blocCreate(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocElements(Index i, Index j, T *buffer) constsofa::linearalgebra::BaseMatrixinline; blocGet(Index i, Index j) constsofa::linearalgebra::BaseMatrixinlinevirtual; blocGetW(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; clear(Index i, Index j) overridesofa::linearalgebra::FullMatrix< T >virtual; clear() overridesofa::linearalgebra::FullMatrix< T >virtual; clearCol(Index j) overridesofa::linearalgebra::FullMatrix< T >virtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::FullMatrix< T >virtual; clearRowCol(Index i) overridesofa::linearalgebra::FullMatrix< T >virtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::FullMatrix< T >inlinevirtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix-members.html:5768,Usability,clear,clear,5768,"i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; blocCreate(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocElements(Index i, Index j, T *buffer) constsofa::linearalgebra::BaseMatrixinline; blocGet(Index i, Index j) constsofa::linearalgebra::BaseMatrixinlinevirtual; blocGetW(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; clear(Index i, Index j) overridesofa::linearalgebra::FullMatrix< T >virtual; clear() overridesofa::linearalgebra::FullMatrix< T >virtual; clearCol(Index j) overridesofa::linearalgebra::FullMatrix< T >virtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::FullMatrix< T >virtual; clearRowCol(Index i) overridesofa::linearalgebra::FullMatrix< T >virtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::FullMatrix< T >inlinevirtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix-members.html:5829,Usability,clear,clearCol,5829,"ine; blocCreate(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocElements(Index i, Index j, T *buffer) constsofa::linearalgebra::BaseMatrixinline; blocGet(Index i, Index j) constsofa::linearalgebra::BaseMatrixinlinevirtual; blocGetW(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; clear(Index i, Index j) overridesofa::linearalgebra::FullMatrix< T >virtual; clear() overridesofa::linearalgebra::FullMatrix< T >virtual; clearCol(Index j) overridesofa::linearalgebra::FullMatrix< T >virtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::FullMatrix< T >virtual; clearRowCol(Index i) overridesofa::linearalgebra::FullMatrix< T >virtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::FullMatrix< T >inlinevirtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockC",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix-members.html:5900,Usability,clear,clearCols,5900,"rtual; blocElements(Index i, Index j, T *buffer) constsofa::linearalgebra::BaseMatrixinline; blocGet(Index i, Index j) constsofa::linearalgebra::BaseMatrixinlinevirtual; blocGetW(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; clear(Index i, Index j) overridesofa::linearalgebra::FullMatrix< T >virtual; clear() overridesofa::linearalgebra::FullMatrix< T >virtual; clearCol(Index j) overridesofa::linearalgebra::FullMatrix< T >virtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::FullMatrix< T >virtual; clearRowCol(Index i) overridesofa::linearalgebra::FullMatrix< T >virtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::FullMatrix< T >inlinevirtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData) constsofa::linea",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix-members.html:5979,Usability,clear,clearRow,5979,"eMatrixinline; blocGet(Index i, Index j) constsofa::linearalgebra::BaseMatrixinlinevirtual; blocGetW(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; clear(Index i, Index j) overridesofa::linearalgebra::FullMatrix< T >virtual; clear() overridesofa::linearalgebra::FullMatrix< T >virtual; clearCol(Index j) overridesofa::linearalgebra::FullMatrix< T >virtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::FullMatrix< T >virtual; clearRowCol(Index i) overridesofa::linearalgebra::FullMatrix< T >virtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::FullMatrix< T >inlinevirtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, voi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix-members.html:6050,Usability,clear,clearRowCol,6050,"trixinlinevirtual; blocGetW(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; clear(Index i, Index j) overridesofa::linearalgebra::FullMatrix< T >virtual; clear() overridesofa::linearalgebra::FullMatrix< T >virtual; clearCol(Index j) overridesofa::linearalgebra::FullMatrix< T >virtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::FullMatrix< T >virtual; clearRowCol(Index i) overridesofa::linearalgebra::FullMatrix< T >virtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::FullMatrix< T >inlinevirtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, void *internalPtr) constsofa::linearalgebra::BaseMatrixinlineprotected; cre",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix-members.html:6124,Usability,clear,clearRows,6124,"rixinlinevirtual; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; clear(Index i, Index j) overridesofa::linearalgebra::FullMatrix< T >virtual; clear() overridesofa::linearalgebra::FullMatrix< T >virtual; clearCol(Index j) overridesofa::linearalgebra::FullMatrix< T >virtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::FullMatrix< T >virtual; clearRowCol(Index i) overridesofa::linearalgebra::FullMatrix< T >virtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::FullMatrix< T >inlinevirtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, void *internalPtr) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, Index internalData) constsofa::linear",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix-members.html:6203,Usability,clear,clearRowsCols,6203,"BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; clear(Index i, Index j) overridesofa::linearalgebra::FullMatrix< T >virtual; clear() overridesofa::linearalgebra::FullMatrix< T >virtual; clearCol(Index j) overridesofa::linearalgebra::FullMatrix< T >virtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::FullMatrix< T >virtual; clearRowCol(Index i) overridesofa::linearalgebra::FullMatrix< T >virtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::FullMatrix< T >inlinevirtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, void *internalPtr) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; createRowBlockConstIterator(void *internalPtr",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html:829,Modifiability,inherit,inherited,829,"﻿. SOFA API: sofa::linearalgebra::LPtrFullMatrix< T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::linearalgebra::LPtrFullMatrix< T > Class Template Reference . #include <FullMatrix.h>; Simple full matrix container, with an additional pointer per line, to be able do get a T** pointer and use [i][j] directly. ; More... Inheritance diagram for sofa::linearalgebra::LPtrFullMatrix< T >:. [legend]; Detailed Description; template<typename T>; class sofa::linearalgebra::LPtrFullMatrix< T >; Simple full matrix container, with an additional pointer per line, to be able do get a T** pointer and use [i][j] directly. . Protected Attributes; T ** ldata;  ; Index lallocsize;  ;  Protected Attributes inherited from sofa::linearalgebra::FullMatrix< T >; Real * data;  ; Index nRow;  ; Index nCol;  ; Index pitch;  ; Index allocsize;  . Public Member Functions;  LPtrFullMatrix ();  ;  ~LPtrFullMatrix () override;  ; void resize (Index nbRow, Index nbCol) override;  Resize the matrix and reset all values to 0. More...;  ; T ** lptr ();  ;  Public Member Functions inherited from sofa::linearalgebra::FullMatrix< T >;  FullMatrix ();  ;  FullMatrix (Index nbRow, Index nbCol);  ;  FullMatrix (Real *p, Index nbRow, Index nbCol);  ;  FullMatrix (Real *p, Index nbRow, Index nbCol, Index pitch);  ;  ~FullMatrix () override;  ; Real * ptr ();  ; const Real * ptr () const;  ; LineIterator begin ();  ; LineIterator end ();  ; LineConstIterator begin () const;  ; LineConstIterator end () const;  ; Real * operator[] (Index i);  ; const Real * operator[] (Index i) const;  ; Index rowSize (void) const override;  Number of rows. More...;  ; Index colSize (void) const override;  Number of columns. More...;  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void set (Index i, Index j, do",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html:1194,Modifiability,inherit,inherited,1194,"... Inheritance diagram for sofa::linearalgebra::LPtrFullMatrix< T >:. [legend]; Detailed Description; template<typename T>; class sofa::linearalgebra::LPtrFullMatrix< T >; Simple full matrix container, with an additional pointer per line, to be able do get a T** pointer and use [i][j] directly. . Protected Attributes; T ** ldata;  ; Index lallocsize;  ;  Protected Attributes inherited from sofa::linearalgebra::FullMatrix< T >; Real * data;  ; Index nRow;  ; Index nCol;  ; Index pitch;  ; Index allocsize;  . Public Member Functions;  LPtrFullMatrix ();  ;  ~LPtrFullMatrix () override;  ; void resize (Index nbRow, Index nbCol) override;  Resize the matrix and reset all values to 0. More...;  ; T ** lptr ();  ;  Public Member Functions inherited from sofa::linearalgebra::FullMatrix< T >;  FullMatrix ();  ;  FullMatrix (Index nbRow, Index nbCol);  ;  FullMatrix (Real *p, Index nbRow, Index nbCol);  ;  FullMatrix (Real *p, Index nbRow, Index nbCol, Index pitch);  ;  ~FullMatrix () override;  ; Real * ptr ();  ; const Real * ptr () const;  ; LineIterator begin ();  ; LineIterator end ();  ; LineConstIterator begin () const;  ; LineConstIterator end () const;  ; Real * operator[] (Index i);  ; const Real * operator[] (Index i) const;  ; Index rowSize (void) const override;  Number of rows. More...;  ; Index colSize (void) const override;  Number of columns. More...;  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html:4379,Modifiability,inherit,inherited,4379,"btain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain bet",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html:10800,Modifiability,inherit,inherited,10800,,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html:10913,Modifiability,inherit,inherited,10913,,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html:15336,Modifiability,inherit,inherited,15336,"tor *it, const InternalColBlockIterator *it2) const;  ; ColBlockConstIterator createColBlockConstIterator (Index row, void *internalPtr) const;  ; ColBlockConstIterator createColBlockConstIterator (Index row, Index internalData) const;  ; virtual void itCopyRowBlock (InternalRowBlockIterator *) const;  ; virtual void itDeleteRowBlock (const InternalRowBlockIterator *) const;  ; virtual Index itAccessRowBlock (InternalRowBlockIterator *it) const;  ; virtual ColBlockConstIterator itBeginRowBlock (InternalRowBlockIterator *it) const;  ; virtual ColBlockConstIterator itEndRowBlock (InternalRowBlockIterator *it) const;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > itRangeRowBlock (InternalRowBlockIterator *it) const;  ; virtual void itIncRowBlock (InternalRowBlockIterator *it) const;  ; virtual void itDecRowBlock (InternalRowBlockIterator *it) const;  ; virtual bool itEqRowBlock (const InternalRowBlockIterator *it, const InternalRowBlockIterator *it2) const;  ; virtual bool itLessRowBlock (const InternalRowBlockIterator *it, const InternalRowBlockIterator *it2) const;  ; RowBlockConstIterator createRowBlockConstIterator (void *internalPtr) const;  ; RowBlockConstIterator createRowBlockConstIterator (Index internalData0, Index internalData1) const;  ;  Static Protected Member Functions inherited from sofa::linearalgebra::BaseMatrix; static InternalBlockAccessor * getInternal (BlockConstAccessor *b);  ; static const InternalBlockAccessor * getInternal (const BlockConstAccessor *b);  ; static InternalBlockAccessor * getInternal (BlockAccessor *b);  ; static const InternalBlockAccessor * getInternal (const BlockAccessor *b);  ; static InternalColBlockIterator * getInternal (ColBlockConstIterator *b);  ; static const InternalColBlockIterator * getInternal (const ColBlockConstIterator *b);  ; static InternalRowBlockIterator * getInternal (RowBlockConstIterator *b);  ; static const InternalRowBlockIterator * getInternal (const RowBlockConstIterator *b);  .",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html:3458,Performance,perform,performances,3458,"lumn j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; FullVector< Real > operator* (const FullVector< Real > &v) const;  ; void mul (FullVector< Real > &res, const FullVector< Real > &b) const;  ; void mulT (FullVector< Real > &res, const FullVector< Real > &b) const;  ; FullMatrix< Real > operator* (const FullMatrix< Real > &m) const;  ; void mul (FullMatrix< Real > &res, const FullMatrix< Real > &m) const;  ; void mulT (FullMatrix< Real > &res, const FullMatrix< Real > &m) const;  ; const char * Name ();  ; const char * Name ();  ; const char * Name ();  ; const char * Name ();  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ()",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html:3632,Performance,perform,performances,3632,"...;  ; FullVector< Real > operator* (const FullVector< Real > &v) const;  ; void mul (FullVector< Real > &res, const FullVector< Real > &b) const;  ; void mulT (FullVector< Real > &res, const FullVector< Real > &b) const;  ; FullMatrix< Real > operator* (const FullMatrix< Real > &m) const;  ; void mul (FullMatrix< Real > &res, const FullMatrix< Real > &m) const;  ; void mulT (FullMatrix< Real > &res, const FullMatrix< Real > &m) const;  ; const char * Name ();  ; const char * Name ();  ; const char * Name ();  ; const char * Name ();  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API)",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html:3806,Performance,perform,performances,3806,"Real > &res, const FullVector< Real > &b) const;  ; FullMatrix< Real > operator* (const FullMatrix< Real > &m) const;  ; void mul (FullMatrix< Real > &res, const FullMatrix< Real > &m) const;  ; void mulT (FullMatrix< Real > &res, const FullMatrix< Real > &m) const;  ; const char * Name ();  ; const char * Name ();  ; const char * Name ();  ; const char * Name ();  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html:3980,Performance,perform,performances,3980,"Real > &m) const;  ; void mulT (FullMatrix< Real > &res, const FullMatrix< Real > &m) const;  ; const char * Name ();  ; const char * Name ();  ; const char * Name ();  ; const char * Name ();  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html:4154,Performance,perform,performances,4154,"st char * Name ();  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html:4328,Performance,perform,performances,4328,"virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html:4928,Performance,perform,performances,4928,"es from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html:5102,Performance,perform,performances,5102,"es from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index i",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html:5276,Performance,perform,performances,5276,"es from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *resul",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html:5450,Performance,perform,performances,5450,"Matrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const floa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html:5624,Performance,perform,performances,5624,"ible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply th",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html:5798,Performance,perform,performances,5798,"virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) cons",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html:9185,Security,access,access,9185,"st;  Multiply the transposed matrix by float vector v and add the result in vector result. More...;  ; virtual void opPMulTV (double *result, const double *v) const;  Multiply the transposed matrix by double vector v and add the result in vector result. More...;  ; virtual void opMulTM (BaseMatrix *result, BaseMatrix *m) const;  Multiply the transposed matrix by matrix m and store the result in matrix result. More...;  ; virtual void opAddM (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the matrix to the m matrix and strore the result in m. More...;  ; virtual void opAddMT (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the transposed matrix to the m matrix and strore the result in m. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual MatrixCategory getCategory () const;  ; virtual Index getBlockRows () const;  ; virtual Index getBlockCols () const;  ; virtual Index bRowSize () const;  ; virtual Index bColSize () const;  ; virtual Index getBandWidth () const;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  ; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the give",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html:9278,Security,access,access,9278,"const;  Multiply the transposed matrix by matrix m and store the result in matrix result. More...;  ; virtual void opAddM (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the matrix to the m matrix and strore the result in m. More...;  ; virtual void opAddMT (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the transposed matrix to the m matrix and strore the result in m. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual MatrixCategory getCategory () const;  ; virtual Index getBlockRows () const;  ; virtual Index getBlockCols () const;  ; virtual Index bRowSize () const;  ; virtual Index bColSize () const;  ; virtual Index getBandWidth () const;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  ; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the given row of blocks. More...;  ; virtual ColBlockConstIterator bRowEnd (Index ib) const;  Get the iterator corresponding to the end of the given row of blocks. More...;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > bRowRange (Index ib) const;  Get the iterators corresponding to the beginning and end of ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html:9373,Security,access,access,9373,"tual void opAddM (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the matrix to the m matrix and strore the result in m. More...;  ; virtual void opAddMT (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the transposed matrix to the m matrix and strore the result in m. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual MatrixCategory getCategory () const;  ; virtual Index getBlockRows () const;  ; virtual Index getBlockCols () const;  ; virtual Index bRowSize () const;  ; virtual Index bColSize () const;  ; virtual Index getBandWidth () const;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  ; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the given row of blocks. More...;  ; virtual ColBlockConstIterator bRowEnd (Index ib) const;  Get the iterator corresponding to the end of the given row of blocks. More...;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > bRowRange (Index ib) const;  Get the iterators corresponding to the beginning and end of the given row of blocks. More...;  ; virtual RowBlockConstIterator bRowsBegin () const;  Get the iterator",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html:2258,Usability,clear,clear,2258,";  FullMatrix (Real *p, Index nbRow, Index nbCol);  ;  FullMatrix (Real *p, Index nbRow, Index nbCol, Index pitch);  ;  ~FullMatrix () override;  ; Real * ptr ();  ; const Real * ptr () const;  ; LineIterator begin ();  ; LineIterator end ();  ; LineConstIterator begin () const;  ; LineConstIterator end () const;  ; Real * operator[] (Index i);  ; const Real * operator[] (Index i) const;  ; Index rowSize (void) const override;  Number of rows. More...;  ; Index colSize (void) const override;  Number of columns. More...;  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; FullVector< Real > operator* (const FullVector< Real > &v) const;  ; void mul (FullVector< Real > &res, const FullVector< Real > &b) const;  ; void mulT (FullVector< Real > &res, const FullVector< Real > &b) const;  ; FullMatrix< Real > operator* (const FullMatrix< Real > &m) const;  ; void mul (FullMatrix< Real > &res, const FullMatrix< Real > &m) const;  ; void mulT (FullMatrix< Real > &res, const FullMatrix< Real > &m) const;  ; const char * Name ();  ; const char * Name ();  ; const char * Name ();  ; const char * Name ();  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html:2301,Usability,clear,clearRow,2301,";  FullMatrix (Real *p, Index nbRow, Index nbCol);  ;  FullMatrix (Real *p, Index nbRow, Index nbCol, Index pitch);  ;  ~FullMatrix () override;  ; Real * ptr ();  ; const Real * ptr () const;  ; LineIterator begin ();  ; LineIterator end ();  ; LineConstIterator begin () const;  ; LineConstIterator end () const;  ; Real * operator[] (Index i);  ; const Real * operator[] (Index i) const;  ; Index rowSize (void) const override;  Number of rows. More...;  ; Index colSize (void) const override;  Number of columns. More...;  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; FullVector< Real > operator* (const FullVector< Real > &v) const;  ; void mul (FullVector< Real > &res, const FullVector< Real > &b) const;  ; void mulT (FullVector< Real > &res, const FullVector< Real > &b) const;  ; FullMatrix< Real > operator* (const FullMatrix< Real > &m) const;  ; void mul (FullMatrix< Real > &res, const FullMatrix< Real > &m) const;  ; void mulT (FullMatrix< Real > &res, const FullMatrix< Real > &m) const;  ; const char * Name ();  ; const char * Name ();  ; const char * Name ();  ; const char * Name ();  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html:2384,Usability,clear,clearCol,2384,"x pitch);  ;  ~FullMatrix () override;  ; Real * ptr ();  ; const Real * ptr () const;  ; LineIterator begin ();  ; LineIterator end ();  ; LineConstIterator begin () const;  ; LineConstIterator end () const;  ; Real * operator[] (Index i);  ; const Real * operator[] (Index i) const;  ; Index rowSize (void) const override;  Number of rows. More...;  ; Index colSize (void) const override;  Number of columns. More...;  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; FullVector< Real > operator* (const FullVector< Real > &v) const;  ; void mul (FullVector< Real > &res, const FullVector< Real > &b) const;  ; void mulT (FullVector< Real > &res, const FullVector< Real > &b) const;  ; FullMatrix< Real > operator* (const FullMatrix< Real > &m) const;  ; void mul (FullMatrix< Real > &res, const FullMatrix< Real > &m) const;  ; void mulT (FullMatrix< Real > &res, const FullMatrix< Real > &m) const;  ; const char * Name ();  ; const char * Name ();  ; const char * Name ();  ; const char * Name ();  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. Th",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html:2470,Usability,clear,clearRowCol,2470,"ineIterator begin ();  ; LineIterator end ();  ; LineConstIterator begin () const;  ; LineConstIterator end () const;  ; Real * operator[] (Index i);  ; const Real * operator[] (Index i) const;  ; Index rowSize (void) const override;  Number of rows. More...;  ; Index colSize (void) const override;  Number of columns. More...;  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; FullVector< Real > operator* (const FullVector< Real > &v) const;  ; void mul (FullVector< Real > &res, const FullVector< Real > &b) const;  ; void mulT (FullVector< Real > &res, const FullVector< Real > &b) const;  ; FullMatrix< Real > operator* (const FullMatrix< Real > &m) const;  ; void mul (FullMatrix< Real > &res, const FullMatrix< Real > &m) const;  ; void mulT (FullMatrix< Real > &res, const FullMatrix< Real > &m) const;  ; const char * Name ();  ; const char * Name ();  ; const char * Name ();  ; const char * Name ();  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Ind",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html:2567,Usability,clear,clear,2567,"st;  ; LineConstIterator end () const;  ; Real * operator[] (Index i);  ; const Real * operator[] (Index i) const;  ; Index rowSize (void) const override;  Number of rows. More...;  ; Index colSize (void) const override;  Number of columns. More...;  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; FullVector< Real > operator* (const FullVector< Real > &v) const;  ; void mul (FullVector< Real > &res, const FullVector< Real > &b) const;  ; void mulT (FullVector< Real > &res, const FullVector< Real > &b) const;  ; FullMatrix< Real > operator* (const FullMatrix< Real > &m) const;  ; void mul (FullMatrix< Real > &res, const FullMatrix< Real > &m) const;  ; void mulT (FullMatrix< Real > &res, const FullMatrix< Real > &m) const;  ; const char * Name ();  ; const char * Name ();  ; const char * Name ();  ; const char * Name ();  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html:5837,Usability,clear,clearRows,5837,"a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html:5940,Usability,clear,clearCols,5940,"ndex row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; virtual void opPMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and add t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html:6051,Usability,clear,clearRowsCols,6051,"ter performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; virtual void opPMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and add the result in vector result. More...;  ; virtual void opPMulV (double *result, const double *v) const;  Multiply the matrix by",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_l_ptr_full_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_addition-members.html:262,Modifiability,inherit,inherited,262,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::MatrixAddition< M1, M2 > Member List . This is the complete list of members for sofa::linearalgebra::MatrixAddition< M1, M2 >, including all inherited members. addTo(Dest *d) constsofa::linearalgebra::MatrixAddition< M1, M2 >inline; category enum valuesofa::linearalgebra::MatrixAddition< M1, M2 >; colSize(void) constsofa::linearalgebra::MatrixAddition< M1, M2 >inline; expr() constsofa::linearalgebra::MatrixAddition< M1, M2 >inline; Expr typedefsofa::linearalgebra::MatrixAddition< M1, M2 >; hasRef(const M *m) constsofa::linearalgebra::MatrixAddition< M1, M2 >inline; m1sofa::linearalgebra::MatrixAddition< M1, M2 >; m2sofa::linearalgebra::MatrixAddition< M1, M2 >; m_index enum valuesofa::linearalgebra::MatrixAddition< M1, M2 >; matrix_type typedefsofa::linearalgebra::MatrixAddition< M1, M2 >; MatrixAddition(const M1 &m1, const M2 &m2)sofa::linearalgebra::MatrixAddition< M1, M2 >inline; operand enum valuesofa::linearalgebra::MatrixAddition< M1, M2 >; rowSize(void) constsofa::linearalgebra::MatrixAddition< M1, M2 >inline; valid() constsofa::linearalgebra::MatrixAddition< M1, M2 >inline. Generated on Mon Nov 11 2024 03:32:16 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_addition-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_addition-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_expr-members.html:244,Modifiability,inherit,inherited,244,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::MatrixExpr< T > Member List . This is the complete list of members for sofa::linearalgebra::MatrixExpr< T >, including all inherited members. Expr typedefsofa::linearalgebra::MatrixExpr< T >; MatrixExpr(const Expr &e)sofa::linearalgebra::MatrixExpr< T >inlineexplicit; operator*(const M2 &m) constsofa::linearalgebra::MatrixExpr< T >inline; operator*(double d) constsofa::linearalgebra::MatrixExpr< T >inline; operator*(double d, const MatrixExpr< Expr > &m)sofa::linearalgebra::MatrixExpr< T >friend; operator*(const M1 &m1, const MatrixExpr< Expr > &m2)sofa::linearalgebra::MatrixExpr< T >friend; operator+(const M2 &m) constsofa::linearalgebra::MatrixExpr< T >inline; operator+(const M1 &m1, const MatrixExpr< Expr > &m2)sofa::linearalgebra::MatrixExpr< T >friend; operator-(const M2 &m) constsofa::linearalgebra::MatrixExpr< T >inline; operator-() constsofa::linearalgebra::MatrixExpr< T >inline; operator-(const M1 &m1, const MatrixExpr< Expr > &m2)sofa::linearalgebra::MatrixExpr< T >friend; t() constsofa::linearalgebra::MatrixExpr< T >inline. Generated on Mon Nov 11 2024 03:32:16 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_expr-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_expr-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_inverse-members.html:252,Modifiability,inherit,inherited,252,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::MatrixInverse< M1 > Member List . This is the complete list of members for sofa::linearalgebra::MatrixInverse< M1 >, including all inherited members. addTo(Dest *d) constsofa::linearalgebra::MatrixInverse< M1 >inline; colSize(void) constsofa::linearalgebra::MatrixInverse< M1 >inline; Expr typedefsofa::linearalgebra::MatrixInverse< M1 >; expr() constsofa::linearalgebra::MatrixInverse< M1 >inline; hasRef(const M *m) constsofa::linearalgebra::MatrixInverse< M1 >inline; m1sofa::linearalgebra::MatrixInverse< M1 >; MatrixInverse(const M1 &m1)sofa::linearalgebra::MatrixInverse< M1 >inlineexplicit; Op typedefsofa::linearalgebra::MatrixInverse< M1 >; operand enum valuesofa::linearalgebra::MatrixInverse< M1 >; rowSize(void) constsofa::linearalgebra::MatrixInverse< M1 >inline; valid() constsofa::linearalgebra::MatrixInverse< M1 >inline. Generated on Mon Nov 11 2024 03:32:16 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_inverse-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_inverse-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_invert_op_3_01_diagonal_matrix_3_01_r1_01_4_01_4-members.html:290,Modifiability,inherit,inherited,290,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::MatrixInvertOp< DiagonalMatrix< R1 > > Member List . This is the complete list of members for sofa::linearalgebra::MatrixInvertOp< DiagonalMatrix< R1 > >, including all inherited members. category enum valuesofa::linearalgebra::MatrixInvertOp< DiagonalMatrix< R1 > >; Index typedefsofa::linearalgebra::MatrixInvertOp< DiagonalMatrix< R1 > >; matrix_type typedefsofa::linearalgebra::MatrixInvertOp< DiagonalMatrix< R1 > >; operator()(const DiagonalMatrix< R1 > &m1, Dest *d)sofa::linearalgebra::MatrixInvertOp< DiagonalMatrix< R1 > >inline. Generated on Mon Nov 11 2024 03:31:33 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_invert_op_3_01_diagonal_matrix_3_01_r1_01_4_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_invert_op_3_01_diagonal_matrix_3_01_r1_01_4_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_negative-members.html:254,Modifiability,inherit,inherited,254,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::MatrixNegative< M1 > Member List . This is the complete list of members for sofa::linearalgebra::MatrixNegative< M1 >, including all inherited members. addTo(Dest *d) constsofa::linearalgebra::MatrixNegative< M1 >inline; category enum valuesofa::linearalgebra::MatrixNegative< M1 >; colSize(void) constsofa::linearalgebra::MatrixNegative< M1 >inline; Expr typedefsofa::linearalgebra::MatrixNegative< M1 >; expr() constsofa::linearalgebra::MatrixNegative< M1 >inline; hasRef(const M *m) constsofa::linearalgebra::MatrixNegative< M1 >inline; m1sofa::linearalgebra::MatrixNegative< M1 >; matrix_type typedefsofa::linearalgebra::MatrixNegative< M1 >; MatrixNegative(const M1 &m1)sofa::linearalgebra::MatrixNegative< M1 >inlineexplicit; operand enum valuesofa::linearalgebra::MatrixNegative< M1 >; rowSize(void) constsofa::linearalgebra::MatrixNegative< M1 >inline; valid() constsofa::linearalgebra::MatrixNegative< M1 >inline. Generated on Mon Nov 11 2024 03:32:16 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_negative-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_negative-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_negative_1_1_my_dest-members.html:286,Modifiability,inherit,inherited,286,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::MatrixNegative< M1 >::MyDest< Dest > Member List . This is the complete list of members for sofa::linearalgebra::MatrixNegative< M1 >::MyDest< Dest >, including all inherited members. add(int l, int c, double v)sofa::linearalgebra::MatrixNegative< M1 >::MyDest< Dest >inline; dsofa::linearalgebra::MatrixNegative< M1 >::MyDest< Dest >; MyDest(Dest *d)sofa::linearalgebra::MatrixNegative< M1 >::MyDest< Dest >inline. Generated on Mon Nov 11 2024 03:32:16 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_negative_1_1_my_dest-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_negative_1_1_my_dest-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_product-members.html:260,Modifiability,inherit,inherited,260,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::MatrixProduct< M1, M2 > Member List . This is the complete list of members for sofa::linearalgebra::MatrixProduct< M1, M2 >, including all inherited members. addTo(Dest *d) constsofa::linearalgebra::MatrixProduct< M1, M2 >inline; category enum valuesofa::linearalgebra::MatrixProduct< M1, M2 >; colSize(void) constsofa::linearalgebra::MatrixProduct< M1, M2 >inline; Expr typedefsofa::linearalgebra::MatrixProduct< M1, M2 >; expr() constsofa::linearalgebra::MatrixProduct< M1, M2 >inline; hasRef(const M *m) constsofa::linearalgebra::MatrixProduct< M1, M2 >inline; m1sofa::linearalgebra::MatrixProduct< M1, M2 >; m2sofa::linearalgebra::MatrixProduct< M1, M2 >; matrix_type typedefsofa::linearalgebra::MatrixProduct< M1, M2 >; MatrixProduct(const M1 &m1, const M2 &m2)sofa::linearalgebra::MatrixProduct< M1, M2 >inline; Op typedefsofa::linearalgebra::MatrixProduct< M1, M2 >; operand enum valuesofa::linearalgebra::MatrixProduct< M1, M2 >; rowSize(void) constsofa::linearalgebra::MatrixProduct< M1, M2 >inline; valid() constsofa::linearalgebra::MatrixProduct< M1, M2 >inline. Generated on Mon Nov 11 2024 03:32:16 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_product-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_product-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_product_op_3_01_diagonal_matrix_3_01_r1_01_4_00_01_diagona497f524121550ac4d3bf9dc30f3f7754.html:336,Modifiability,inherit,inherited,336,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::MatrixProductOp< DiagonalMatrix< R1 >, DiagonalMatrix< R2 > > Member List . This is the complete list of members for sofa::linearalgebra::MatrixProductOp< DiagonalMatrix< R1 >, DiagonalMatrix< R2 > >, including all inherited members. category enum valuesofa::linearalgebra::MatrixProductOp< DiagonalMatrix< R1 >, DiagonalMatrix< R2 > >; Index typedefsofa::linearalgebra::MatrixProductOp< DiagonalMatrix< R1 >, DiagonalMatrix< R2 > >; M1 typedefsofa::linearalgebra::MatrixProductOp< DiagonalMatrix< R1 >, DiagonalMatrix< R2 > >; M2 typedefsofa::linearalgebra::MatrixProductOp< DiagonalMatrix< R1 >, DiagonalMatrix< R2 > >; matrix_type typedefsofa::linearalgebra::MatrixProductOp< DiagonalMatrix< R1 >, DiagonalMatrix< R2 > >; operator()(const DiagonalMatrix< R1 > &m1, const DiagonalMatrix< R2 > &m2, Dest *d)sofa::linearalgebra::MatrixProductOp< DiagonalMatrix< R1 >, DiagonalMatrix< R2 > >inline. Generated on Mon Nov 11 2024 03:31:33 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_product_op_3_01_diagonal_matrix_3_01_r1_01_4_00_01_diagona497f524121550ac4d3bf9dc30f3f7754.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_product_op_3_01_diagonal_matrix_3_01_r1_01_4_00_01_diagona497f524121550ac4d3bf9dc30f3f7754.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_product_op_3_01_diagonal_matrix_3_01_r1_01_4_00_01_m2_01_4-members.html:300,Modifiability,inherit,inherited,300,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::MatrixProductOp< DiagonalMatrix< R1 >, M2 > Member List . This is the complete list of members for sofa::linearalgebra::MatrixProductOp< DiagonalMatrix< R1 >, M2 >, including all inherited members. category enum valuesofa::linearalgebra::MatrixProductOp< DiagonalMatrix< R1 >, M2 >; matrix_type typedefsofa::linearalgebra::MatrixProductOp< DiagonalMatrix< R1 >, M2 >; operator()(const DiagonalMatrix< R1 > &m1, const M2 &m2, Dest *d)sofa::linearalgebra::MatrixProductOp< DiagonalMatrix< R1 >, M2 >inline. Generated on Mon Nov 11 2024 03:31:32 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_product_op_3_01_diagonal_matrix_3_01_r1_01_4_00_01_m2_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_product_op_3_01_diagonal_matrix_3_01_r1_01_4_00_01_m2_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_product_op_3_01_diagonal_matrix_3_01_r1_01_4_00_01_m2_01_4_1_1_my_dest-members.html:332,Modifiability,inherit,inherited,332,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::MatrixProductOp< DiagonalMatrix< R1 >, M2 >::MyDest< Dest > Member List . This is the complete list of members for sofa::linearalgebra::MatrixProductOp< DiagonalMatrix< R1 >, M2 >::MyDest< Dest >, including all inherited members. add(Index l, Index c, double v)sofa::linearalgebra::MatrixProductOp< DiagonalMatrix< R1 >, M2 >::MyDest< Dest >inline; dsofa::linearalgebra::MatrixProductOp< DiagonalMatrix< R1 >, M2 >::MyDest< Dest >; m1sofa::linearalgebra::MatrixProductOp< DiagonalMatrix< R1 >, M2 >::MyDest< Dest >; MyDest(const DiagonalMatrix< R1 > &m1, Dest *d)sofa::linearalgebra::MatrixProductOp< DiagonalMatrix< R1 >, M2 >::MyDest< Dest >inline. Generated on Mon Nov 11 2024 03:31:32 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_product_op_3_01_diagonal_matrix_3_01_r1_01_4_00_01_m2_01_4_1_1_my_dest-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_product_op_3_01_diagonal_matrix_3_01_r1_01_4_00_01_m2_01_4_1_1_my_dest-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_product_op_3_01_m1_00_01_diagonal_matrix_3_01_r2_01_4_01_4-members.html:300,Modifiability,inherit,inherited,300,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::MatrixProductOp< M1, DiagonalMatrix< R2 > > Member List . This is the complete list of members for sofa::linearalgebra::MatrixProductOp< M1, DiagonalMatrix< R2 > >, including all inherited members. category enum valuesofa::linearalgebra::MatrixProductOp< M1, DiagonalMatrix< R2 > >; matrix_type typedefsofa::linearalgebra::MatrixProductOp< M1, DiagonalMatrix< R2 > >; operator()(const M1 &m1, const DiagonalMatrix< R2 > &m2, Dest *d)sofa::linearalgebra::MatrixProductOp< M1, DiagonalMatrix< R2 > >inline. Generated on Mon Nov 11 2024 03:31:32 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_product_op_3_01_m1_00_01_diagonal_matrix_3_01_r2_01_4_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_product_op_3_01_m1_00_01_diagonal_matrix_3_01_r2_01_4_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_product_op_3_01_m1_00_01_diagonal_matrix_3_01_r2_01_4_01_4_1_1_my_dest-members.html:332,Modifiability,inherit,inherited,332,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::MatrixProductOp< M1, DiagonalMatrix< R2 > >::MyDest< Dest > Member List . This is the complete list of members for sofa::linearalgebra::MatrixProductOp< M1, DiagonalMatrix< R2 > >::MyDest< Dest >, including all inherited members. add(Index l, Index c, double v)sofa::linearalgebra::MatrixProductOp< M1, DiagonalMatrix< R2 > >::MyDest< Dest >inline; dsofa::linearalgebra::MatrixProductOp< M1, DiagonalMatrix< R2 > >::MyDest< Dest >; m2sofa::linearalgebra::MatrixProductOp< M1, DiagonalMatrix< R2 > >::MyDest< Dest >; MyDest(const DiagonalMatrix< R2 > &m2, Dest *d)sofa::linearalgebra::MatrixProductOp< M1, DiagonalMatrix< R2 > >::MyDest< Dest >inline. Generated on Mon Nov 11 2024 03:31:33 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_product_op_3_01_m1_00_01_diagonal_matrix_3_01_r2_01_4_01_4_1_1_my_dest-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_product_op_3_01_m1_00_01_diagonal_matrix_3_01_r2_01_4_01_4_1_1_my_dest-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_product_op_3_01_sparse_matrix_3_01_r1_01_4_00_01_sparse_matrix_3_01_r2_01_4_01_4-members.html:328,Modifiability,inherit,inherited,328,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::MatrixProductOp< SparseMatrix< R1 >, SparseMatrix< R2 > > Member List . This is the complete list of members for sofa::linearalgebra::MatrixProductOp< SparseMatrix< R1 >, SparseMatrix< R2 > >, including all inherited members. category enum valuesofa::linearalgebra::MatrixProductOp< SparseMatrix< R1 >, SparseMatrix< R2 > >; M1 typedefsofa::linearalgebra::MatrixProductOp< SparseMatrix< R1 >, SparseMatrix< R2 > >; M2 typedefsofa::linearalgebra::MatrixProductOp< SparseMatrix< R1 >, SparseMatrix< R2 > >; matrix_type typedefsofa::linearalgebra::MatrixProductOp< SparseMatrix< R1 >, SparseMatrix< R2 > >; operator()(const SparseMatrix< R1 > &m1, const SparseMatrix< R2 > &m2, Dest *d)sofa::linearalgebra::MatrixProductOp< SparseMatrix< R1 >, SparseMatrix< R2 > >inline. Generated on Mon Nov 11 2024 03:32:16 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_product_op_3_01_sparse_matrix_3_01_r1_01_4_00_01_sparse_matrix_3_01_r2_01_4_01_4-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_product_op_3_01_sparse_matrix_3_01_r1_01_4_00_01_sparse_matrix_3_01_r2_01_4_01_4-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_scale-members.html:256,Modifiability,inherit,inherited,256,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::MatrixScale< M1, R2 > Member List . This is the complete list of members for sofa::linearalgebra::MatrixScale< M1, R2 >, including all inherited members. addTo(Dest *d) constsofa::linearalgebra::MatrixScale< M1, R2 >inline; category enum valuesofa::linearalgebra::MatrixScale< M1, R2 >; colSize(void) constsofa::linearalgebra::MatrixScale< M1, R2 >inline; Expr typedefsofa::linearalgebra::MatrixScale< M1, R2 >; expr() constsofa::linearalgebra::MatrixScale< M1, R2 >inline; hasRef(const M *m) constsofa::linearalgebra::MatrixScale< M1, R2 >inline; m1sofa::linearalgebra::MatrixScale< M1, R2 >; matrix_type typedefsofa::linearalgebra::MatrixScale< M1, R2 >; MatrixScale(const M1 &m1, const R2 &r2)sofa::linearalgebra::MatrixScale< M1, R2 >inline; operand enum valuesofa::linearalgebra::MatrixScale< M1, R2 >; r2sofa::linearalgebra::MatrixScale< M1, R2 >; rowSize(void) constsofa::linearalgebra::MatrixScale< M1, R2 >inline; valid() constsofa::linearalgebra::MatrixScale< M1, R2 >inline. Generated on Mon Nov 11 2024 03:32:16 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_scale-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_scale-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_scale_1_1_my_dest-members.html:288,Modifiability,inherit,inherited,288,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::MatrixScale< M1, R2 >::MyDest< Dest > Member List . This is the complete list of members for sofa::linearalgebra::MatrixScale< M1, R2 >::MyDest< Dest >, including all inherited members. add(int l, int c, double v)sofa::linearalgebra::MatrixScale< M1, R2 >::MyDest< Dest >inline; dsofa::linearalgebra::MatrixScale< M1, R2 >::MyDest< Dest >; MyDest(const R2 &r2, Dest *d)sofa::linearalgebra::MatrixScale< M1, R2 >::MyDest< Dest >inline; r2sofa::linearalgebra::MatrixScale< M1, R2 >::MyDest< Dest >. Generated on Mon Nov 11 2024 03:32:16 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_scale_1_1_my_dest-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_scale_1_1_my_dest-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_subtraction-members.html:268,Modifiability,inherit,inherited,268,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::MatrixSubtraction< M1, M2 > Member List . This is the complete list of members for sofa::linearalgebra::MatrixSubtraction< M1, M2 >, including all inherited members. addTo(Dest *d) constsofa::linearalgebra::MatrixSubtraction< M1, M2 >inline; category enum valuesofa::linearalgebra::MatrixSubtraction< M1, M2 >; colSize(void) constsofa::linearalgebra::MatrixSubtraction< M1, M2 >inline; expr() constsofa::linearalgebra::MatrixSubtraction< M1, M2 >inline; Expr typedefsofa::linearalgebra::MatrixSubtraction< M1, M2 >; hasRef(const M *m) constsofa::linearalgebra::MatrixSubtraction< M1, M2 >inline; m1sofa::linearalgebra::MatrixSubtraction< M1, M2 >; m2sofa::linearalgebra::MatrixSubtraction< M1, M2 >; m_index enum valuesofa::linearalgebra::MatrixSubtraction< M1, M2 >; matrix_type typedefsofa::linearalgebra::MatrixSubtraction< M1, M2 >; MatrixSubtraction(const M1 &m1, const M2 &m2)sofa::linearalgebra::MatrixSubtraction< M1, M2 >inline; operand enum valuesofa::linearalgebra::MatrixSubtraction< M1, M2 >; rowSize(void) constsofa::linearalgebra::MatrixSubtraction< M1, M2 >inline; valid() constsofa::linearalgebra::MatrixSubtraction< M1, M2 >inline. Generated on Mon Nov 11 2024 03:32:16 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_subtraction-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_subtraction-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_subtraction_1_1_my_dest-members.html:300,Modifiability,inherit,inherited,300,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::MatrixSubtraction< M1, M2 >::MyDest< Dest > Member List . This is the complete list of members for sofa::linearalgebra::MatrixSubtraction< M1, M2 >::MyDest< Dest >, including all inherited members. add(int l, int c, double v)sofa::linearalgebra::MatrixSubtraction< M1, M2 >::MyDest< Dest >inline; dsofa::linearalgebra::MatrixSubtraction< M1, M2 >::MyDest< Dest >; MyDest(Dest *d)sofa::linearalgebra::MatrixSubtraction< M1, M2 >::MyDest< Dest >inline. Generated on Mon Nov 11 2024 03:32:16 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_subtraction_1_1_my_dest-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_subtraction_1_1_my_dest-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_transpose-members.html:256,Modifiability,inherit,inherited,256,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::MatrixTranspose< M1 > Member List . This is the complete list of members for sofa::linearalgebra::MatrixTranspose< M1 >, including all inherited members. addTo(Dest *d) constsofa::linearalgebra::MatrixTranspose< M1 >inline; category enum valuesofa::linearalgebra::MatrixTranspose< M1 >; colSize(void) constsofa::linearalgebra::MatrixTranspose< M1 >inline; Expr typedefsofa::linearalgebra::MatrixTranspose< M1 >; expr() constsofa::linearalgebra::MatrixTranspose< M1 >inline; hasRef(const M *m) constsofa::linearalgebra::MatrixTranspose< M1 >inline; m1sofa::linearalgebra::MatrixTranspose< M1 >; matrix_type typedefsofa::linearalgebra::MatrixTranspose< M1 >; MatrixTranspose(const M1 &m1)sofa::linearalgebra::MatrixTranspose< M1 >inlineexplicit; operand enum valuesofa::linearalgebra::MatrixTranspose< M1 >; rowSize(void) constsofa::linearalgebra::MatrixTranspose< M1 >inline; valid() constsofa::linearalgebra::MatrixTranspose< M1 >inline. Generated on Mon Nov 11 2024 03:32:16 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_transpose-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_transpose-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_transpose_1_1_my_dest-members.html:288,Modifiability,inherit,inherited,288,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::MatrixTranspose< M1 >::MyDest< Dest > Member List . This is the complete list of members for sofa::linearalgebra::MatrixTranspose< M1 >::MyDest< Dest >, including all inherited members. add(int l, int c, double v)sofa::linearalgebra::MatrixTranspose< M1 >::MyDest< Dest >inline; dsofa::linearalgebra::MatrixTranspose< M1 >::MyDest< Dest >; MyDest(Dest *d)sofa::linearalgebra::MatrixTranspose< M1 >::MyDest< Dest >inline. Generated on Mon Nov 11 2024 03:32:16 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_transpose_1_1_my_dest-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_matrix_transpose_1_1_my_dest-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix-members.html:260,Modifiability,inherit,inherited,260,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::RotationMatrix< TReal > Member List . This is the complete list of members for sofa::linearalgebra::RotationMatrix< TReal >, including all inherited members. add(sofa::SignedIndex i, sofa::SignedIndex j, double v) overridesofa::linearalgebra::RotationMatrix< TReal >virtual; add(Index row, Index col, double v)=0sofa::linearalgebra::RotationMatrix< TReal >; add(Index row, Index col, const type::Mat3x3d &_M)sofa::linearalgebra::RotationMatrix< TReal >; add(Index row, Index col, const type::Mat3x3f &_M)sofa::linearalgebra::RotationMatrix< TReal >; add(Index row, Index col, const type::Mat2x2d &_M)sofa::linearalgebra::RotationMatrix< TReal >; add(Index row, Index col, const type::Mat2x2f &_M)sofa::linearalgebra::RotationMatrix< TReal >; add(Index row, Index col, const type::Mat6x6d &_M)sofa::linearalgebra::RotationMatrix< TReal >; add(Index row, Index col, const type::Mat6x6f &_M)sofa::linearalgebra::RotationMatrix< TReal >; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat3x3d &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat3x3f &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat2x2d &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat2x2f &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat6x6d &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat6x6f &_M)sofa::linearalgebra::BaseMatrixvirtual; bAccessorAdd(InternalBlockAccessor *b, Index i, Index j, double v)sofa::linearalgebra::BaseMatrixinlineprotectedvirtual; bAccessorAdd(InternalBlockAccessor *b, const float *buffer)sofa::linearalgebra::BaseMat",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix-members.html:5635,Usability,clear,clear,5635," bColSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; blocAdd(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; blocCreate(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocElements(Index i, Index j, T *buffer) constsofa::linearalgebra::BaseMatrixinline; blocGet(Index i, Index j) constsofa::linearalgebra::BaseMatrixinlinevirtual; blocGetW(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; clear() overridesofa::linearalgebra::RotationMatrix< TReal >virtual; sofa::linearalgebra::BaseMatrix::clear(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearCol(Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowCol(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::RotationMatrix< TReal >virtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix-members.html:5737,Usability,clear,clear,5737,"er)sofa::linearalgebra::BaseMatrixinline; blocCreate(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocElements(Index i, Index j, T *buffer) constsofa::linearalgebra::BaseMatrixinline; blocGet(Index i, Index j) constsofa::linearalgebra::BaseMatrixinlinevirtual; blocGetW(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; clear() overridesofa::linearalgebra::RotationMatrix< TReal >virtual; sofa::linearalgebra::BaseMatrix::clear(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearCol(Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowCol(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::RotationMatrix< TReal >virtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linea",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix-members.html:5806,Usability,clear,clearCol,5806,"sofa::linearalgebra::BaseMatrixinlinevirtual; blocElements(Index i, Index j, T *buffer) constsofa::linearalgebra::BaseMatrixinline; blocGet(Index i, Index j) constsofa::linearalgebra::BaseMatrixinlinevirtual; blocGetW(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; clear() overridesofa::linearalgebra::RotationMatrix< TReal >virtual; sofa::linearalgebra::BaseMatrix::clear(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearCol(Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowCol(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::RotationMatrix< TReal >virtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix-members.html:5869,Usability,clear,clearCols,5869," i, Index j, T *buffer) constsofa::linearalgebra::BaseMatrixinline; blocGet(Index i, Index j) constsofa::linearalgebra::BaseMatrixinlinevirtual; blocGetW(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; clear() overridesofa::linearalgebra::RotationMatrix< TReal >virtual; sofa::linearalgebra::BaseMatrix::clear(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearCol(Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowCol(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::RotationMatrix< TReal >virtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData) constsofa::linearalgebra::Base",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix-members.html:5948,Usability,clear,clearRow,5948,"dex i, Index j) constsofa::linearalgebra::BaseMatrixinlinevirtual; blocGetW(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; clear() overridesofa::linearalgebra::RotationMatrix< TReal >virtual; sofa::linearalgebra::BaseMatrix::clear(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearCol(Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowCol(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::RotationMatrix< TReal >virtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, void *internalPtr",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix-members.html:6011,Usability,clear,clearRowCol,6011,"; blocGetW(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; clear() overridesofa::linearalgebra::RotationMatrix< TReal >virtual; sofa::linearalgebra::BaseMatrix::clear(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearCol(Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowCol(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::RotationMatrix< TReal >virtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, void *internalPtr) constsofa::linearalgebra::BaseMatrixinlineprotected; createCol",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix-members.html:6077,Usability,clear,clearRows,6077,"virtual; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; clear() overridesofa::linearalgebra::RotationMatrix< TReal >virtual; sofa::linearalgebra::BaseMatrix::clear(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearCol(Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowCol(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::RotationMatrix< TReal >virtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, void *internalPtr) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, Index internalData) constsofa::line",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix-members.html:6156,Usability,clear,clearRowsCols,6156,"xinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; clear() overridesofa::linearalgebra::RotationMatrix< TReal >virtual; sofa::linearalgebra::BaseMatrix::clear(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearCol(Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowCol(Index i)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::RotationMatrix< TReal >virtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, void *internalPtr) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; createRowBlockConstIterator(void *internalP",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html:3921,Modifiability,inherit,inherited,3921,"btain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain bet",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html:10299,Modifiability,inherit,inherited,10299,,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html:14842,Modifiability,inherit,inherited,14842,"irtual void itIncRowBlock (InternalRowBlockIterator *it) const;  ; virtual void itDecRowBlock (InternalRowBlockIterator *it) const;  ; virtual bool itEqRowBlock (const InternalRowBlockIterator *it, const InternalRowBlockIterator *it2) const;  ; virtual bool itLessRowBlock (const InternalRowBlockIterator *it, const InternalRowBlockIterator *it2) const;  ; RowBlockConstIterator createRowBlockConstIterator (void *internalPtr) const;  ; RowBlockConstIterator createRowBlockConstIterator (Index internalData0, Index internalData1) const;  . Friends; std::ostream & operator (std::ostream &out, const RotationMatrix< Real > &v);  . Additional Inherited Members;  Static Protected Member Functions inherited from sofa::linearalgebra::BaseMatrix; static InternalBlockAccessor * getInternal (BlockConstAccessor *b);  ; static const InternalBlockAccessor * getInternal (const BlockConstAccessor *b);  ; static InternalBlockAccessor * getInternal (BlockAccessor *b);  ; static const InternalBlockAccessor * getInternal (const BlockAccessor *b);  ; static InternalColBlockIterator * getInternal (ColBlockConstIterator *b);  ; static const InternalColBlockIterator * getInternal (const ColBlockConstIterator *b);  ; static InternalRowBlockIterator * getInternal (RowBlockConstIterator *b);  ; static const InternalRowBlockIterator * getInternal (const RowBlockConstIterator *b);  . Attribute details. ◆ data. template<class TReal > . type::vector<Real> sofa::linearalgebra::RotationMatrix< TReal >::data. protected . Function details. ◆ add() [1/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [2/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html:3000,Performance,perform,performances,3000,"const override;  Multiply the matrix by vector v and put the result in vector result. More...;  ; void opMulTV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const override;  Multiply the transposed matrix by vector v and put the result in vector result. More...;  ; void opMulTM (linearalgebra::BaseMatrix *bresult, linearalgebra::BaseMatrix *bm) const override;  multiply the transpose current matrix by m matrix and store the result in m More...;  ; void rotateMatrix (linearalgebra::BaseMatrix *mat, const linearalgebra::BaseMatrix *Jmat);  ; const char * Name ();  ; const char * Name ();  ; SOFA_LINEARALGEBRA_API const char * Name ();  ; SOFA_LINEARALGEBRA_API const char * Name ();  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ()",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html:3174,Performance,perform,performances,3174,"ctor *v) const override;  Multiply the transposed matrix by vector v and put the result in vector result. More...;  ; void opMulTM (linearalgebra::BaseMatrix *bresult, linearalgebra::BaseMatrix *bm) const override;  multiply the transpose current matrix by m matrix and store the result in m More...;  ; void rotateMatrix (linearalgebra::BaseMatrix *mat, const linearalgebra::BaseMatrix *Jmat);  ; const char * Name ();  ; const char * Name ();  ; SOFA_LINEARALGEBRA_API const char * Name ();  ; SOFA_LINEARALGEBRA_API const char * Name ();  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API)",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html:3348,Performance,perform,performances,3348,"algebra::BaseMatrix *bm) const override;  multiply the transpose current matrix by m matrix and store the result in m More...;  ; void rotateMatrix (linearalgebra::BaseMatrix *mat, const linearalgebra::BaseMatrix *Jmat);  ; const char * Name ();  ; const char * Name ();  ; SOFA_LINEARALGEBRA_API const char * Name ();  ; SOFA_LINEARALGEBRA_API const char * Name ();  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html:3522,Performance,perform,performances,3522," *mat, const linearalgebra::BaseMatrix *Jmat);  ; const char * Name ();  ; const char * Name ();  ; SOFA_LINEARALGEBRA_API const char * Name ();  ; SOFA_LINEARALGEBRA_API const char * Name ();  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html:3696,Performance,perform,performances,3696,"st char * Name ();  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html:3870,Performance,perform,performances,3870,"virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html:4470,Performance,perform,performances,4470,"es from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void clearRow (Index i);  Reset all t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html:4644,Performance,perform,performances,4644,"es from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void clearRow (Index i);  Reset all the values in row i to 0. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCol (Index j);  ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html:4818,Performance,perform,performances,4818,"es from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void clearRow (Index i);  Reset all the values in row i to 0. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCol (Index j);  Reset the all values in column j to 0. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html:4992,Performance,perform,performances,4992,"Matrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void clearRow (Index i);  Reset all the values in row i to 0. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCol (Index j);  Reset the all values in column j to 0. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowCol (Index i);  Reset the value of both row and column i to 0. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html:5166,Performance,perform,performances,5166,"ible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void clearRow (Index i);  Reset all the values in row i to 0. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCol (Index j);  Reset the all values in column j to 0. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowCol (Index i);  Reset the value of both row and column i to 0. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html:5340,Performance,perform,performances,5340,"virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void clearRow (Index i);  Reset all the values in row i to 0. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCol (Index j);  Reset the all values in column j to 0. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowCol (Index i);  Reset the value of both row and column i to 0. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html:15837,Performance,perform,performances,15837,ected Member Functions inherited from sofa::linearalgebra::BaseMatrix; static InternalBlockAccessor * getInternal (BlockConstAccessor *b);  ; static const InternalBlockAccessor * getInternal (const BlockConstAccessor *b);  ; static InternalBlockAccessor * getInternal (BlockAccessor *b);  ; static const InternalBlockAccessor * getInternal (const BlockAccessor *b);  ; static InternalColBlockIterator * getInternal (ColBlockConstIterator *b);  ; static const InternalColBlockIterator * getInternal (const ColBlockConstIterator *b);  ; static InternalRowBlockIterator * getInternal (RowBlockConstIterator *b);  ; static const InternalRowBlockIterator * getInternal (const RowBlockConstIterator *b);  . Attribute details. ◆ data. template<class TReal > . type::vector<Real> sofa::linearalgebra::RotationMatrix< TReal >::data. protected . Function details. ◆ add() [1/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [2/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [3/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [4/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<class TReal > . voi,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html:15933,Performance,perform,performances,15933,nternalBlockAccessor * getInternal (BlockConstAccessor *b);  ; static const InternalBlockAccessor * getInternal (const BlockConstAccessor *b);  ; static InternalBlockAccessor * getInternal (BlockAccessor *b);  ; static const InternalBlockAccessor * getInternal (const BlockAccessor *b);  ; static InternalColBlockIterator * getInternal (ColBlockConstIterator *b);  ; static const InternalColBlockIterator * getInternal (const ColBlockConstIterator *b);  ; static InternalRowBlockIterator * getInternal (RowBlockConstIterator *b);  ; static const InternalRowBlockIterator * getInternal (const RowBlockConstIterator *b);  . Attribute details. ◆ data. template<class TReal > . type::vector<Real> sofa::linearalgebra::RotationMatrix< TReal >::data. protected . Function details. ◆ add() [1/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [2/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [3/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [4/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html:16113,Performance,perform,performances,16113,cessor *b);  ; static const InternalBlockAccessor * getInternal (const BlockAccessor *b);  ; static InternalColBlockIterator * getInternal (ColBlockConstIterator *b);  ; static const InternalColBlockIterator * getInternal (const ColBlockConstIterator *b);  ; static InternalRowBlockIterator * getInternal (RowBlockConstIterator *b);  ; static const InternalRowBlockIterator * getInternal (const RowBlockConstIterator *b);  . Attribute details. ◆ data. template<class TReal > . type::vector<Real> sofa::linearalgebra::RotationMatrix< TReal >::data. protected . Function details. ◆ add() [1/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [2/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [3/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [4/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [6/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be o,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html:16209,Performance,perform,performances,16209,essor *b);  ; static InternalColBlockIterator * getInternal (ColBlockConstIterator *b);  ; static const InternalColBlockIterator * getInternal (const ColBlockConstIterator *b);  ; static InternalRowBlockIterator * getInternal (RowBlockConstIterator *b);  ; static const InternalRowBlockIterator * getInternal (const RowBlockConstIterator *b);  . Attribute details. ◆ data. template<class TReal > . type::vector<Real> sofa::linearalgebra::RotationMatrix< TReal >::data. protected . Function details. ◆ add() [1/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [2/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [3/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [4/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [6/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [7/8]. template<class TReal >,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html:16389,Performance,perform,performances,16389,"wBlockIterator * getInternal (RowBlockConstIterator *b);  ; static const InternalRowBlockIterator * getInternal (const RowBlockConstIterator *b);  . Attribute details. ◆ data. template<class TReal > . type::vector<Real> sofa::linearalgebra::RotationMatrix< TReal >::data. protected . Function details. ◆ add() [1/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [2/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [3/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [4/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [6/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [7/8]. template<class TReal > . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ add() [8/8]. template<class Real > . void sofa::linear",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html:16485,Performance,perform,performances,16485,"alRowBlockIterator * getInternal (const RowBlockConstIterator *b);  . Attribute details. ◆ data. template<class TReal > . type::vector<Real> sofa::linearalgebra::RotationMatrix< TReal >::data. protected . Function details. ◆ add() [1/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [2/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [3/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [4/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [6/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [7/8]. template<class TReal > . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ add() [8/8]. template<class Real > . void sofa::linearalgebra::RotationMatrix< Real >::add ; (; sofa::SignedIndex ; i, . sofa::Signe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html:16665,Performance,perform,performances,16665,"ected . Function details. ◆ add() [1/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [2/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [3/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [4/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [6/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [7/8]. template<class TReal > . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ add() [8/8]. template<class Real > . void sofa::linearalgebra::RotationMatrix< Real >::add ; (; sofa::SignedIndex ; i, . sofa::SignedIndex ; j, . double ; v . ). overridevirtual . Add v to the existing value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear(). templat",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html:16761,Performance,perform,performances,16761,"nearalgebra::BaseMatrix::add. Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [2/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [3/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [4/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [6/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [7/8]. template<class TReal > . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ add() [8/8]. template<class Real > . void sofa::linearalgebra::RotationMatrix< Real >::add ; (; sofa::SignedIndex ; i, . sofa::SignedIndex ; j, . double ; v . ). overridevirtual . Add v to the existing value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear(). template<class Real > . void sofa::linearalgebra::RotationMatrix< Real >::clear. over",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html:16941,Performance,perform,performances,16941,"in better performances. . ◆ add() [2/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [3/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [4/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [6/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [7/8]. template<class TReal > . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ add() [8/8]. template<class Real > . void sofa::linearalgebra::RotationMatrix< Real >::add ; (; sofa::SignedIndex ; i, . sofa::SignedIndex ; j, . double ; v . ). overridevirtual . Add v to the existing value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear(). template<class Real > . void sofa::linearalgebra::RotationMatrix< Real >::clear. overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<class Real > . sofa::SignedIndex sofa::linearalgebra::RotationMatrix< Real >::colSize ; (; vo",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html:17121,Performance,perform,performances,17121,"in better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [3/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [4/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [6/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [7/8]. template<class TReal > . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ add() [8/8]. template<class Real > . void sofa::linearalgebra::RotationMatrix< Real >::add ; (; sofa::SignedIndex ; i, . sofa::SignedIndex ; j, . double ; v . ). overridevirtual . Add v to the existing value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear(). template<class Real > . void sofa::linearalgebra::RotationMatrix< Real >::clear. overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<class Real > . sofa::SignedIndex sofa::linearalgebra::RotationMatrix< Real >::colSize ; (; void ; ); const. overridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ element(). template<class Real > . SReal sofa::linearalgebra::RotationMatrix< Re",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html:8499,Security,access,access,8499,") const;  Multiply the transposed matrix by vector v and add the result in vector result. More...;  ; virtual void opPMulTV (float *result, const float *v) const;  Multiply the transposed matrix by float vector v and add the result in vector result. More...;  ; virtual void opPMulTV (double *result, const double *v) const;  Multiply the transposed matrix by double vector v and add the result in vector result. More...;  ; virtual void opAddM (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the matrix to the m matrix and strore the result in m. More...;  ; virtual void opAddMT (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the transposed matrix to the m matrix and strore the result in m. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual MatrixCategory getCategory () const;  ; virtual Index getBlockRows () const;  ; virtual Index getBlockCols () const;  ; virtual Index bRowSize () const;  ; virtual Index bColSize () const;  ; virtual Index getBandWidth () const;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  ; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the give",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html:8592,Security,access,access,8592,";  Multiply the transposed matrix by double vector v and add the result in vector result. More...;  ; virtual void opAddM (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the matrix to the m matrix and strore the result in m. More...;  ; virtual void opAddMT (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the transposed matrix to the m matrix and strore the result in m. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual MatrixCategory getCategory () const;  ; virtual Index getBlockRows () const;  ; virtual Index getBlockCols () const;  ; virtual Index bRowSize () const;  ; virtual Index bColSize () const;  ; virtual Index getBandWidth () const;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  ; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the given row of blocks. More...;  ; virtual ColBlockConstIterator bRowEnd (Index ib) const;  Get the iterator corresponding to the end of the given row of blocks. More...;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > bRowRange (Index ib) const;  Get the iterators corresponding to the beginning and end of ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html:8687,Security,access,access,8687,"tual void opAddM (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the matrix to the m matrix and strore the result in m. More...;  ; virtual void opAddMT (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the transposed matrix to the m matrix and strore the result in m. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual MatrixCategory getCategory () const;  ; virtual Index getBlockRows () const;  ; virtual Index getBlockCols () const;  ; virtual Index bRowSize () const;  ; virtual Index bColSize () const;  ; virtual Index getBandWidth () const;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  ; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the given row of blocks. More...;  ; virtual ColBlockConstIterator bRowEnd (Index ib) const;  Get the iterator corresponding to the end of the given row of blocks. More...;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > bRowRange (Index ib) const;  Get the iterators corresponding to the beginning and end of the given row of blocks. More...;  ; virtual RowBlockConstIterator bRowsBegin () const;  Get the iterator",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html:1433,Usability,clear,clear,1433," is considered as a rotation. ; More... Inheritance diagram for sofa::linearalgebra::RotationMatrix< TReal >:. [legend]; Detailed Description; template<class TReal>; class sofa::linearalgebra::RotationMatrix< TReal >; 3x3 block-diagonal matrix where each block is considered as a rotation. ; Template Parameters. TRealType of scalar. One of the feature of this class is to rotate another matrix: if M is a matrix and R is a rotation matrix, it can compute M * R. . Protected Attributes; type::vector< Real > data;  . Public Member Functions; sofa::SignedIndex rowSize (void) const override;  Number of rows. More...;  ; sofa::SignedIndex colSize (void) const override;  Number of columns. More...;  ; SReal element (Index i, sofa::SignedIndex j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void resize (sofa::SignedIndex nbRow, sofa::SignedIndex nbCol) override;  Resize the matrix and reset all values to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; virtual void setIdentity ();  ; void set (sofa::SignedIndex i, sofa::SignedIndex j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void add (sofa::SignedIndex i, sofa::SignedIndex j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual type::vector< Real > & getVector ();  ; void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const override;  Multiply the matrix by vector v and put the result in vector result. More...;  ; void opMulTV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const override;  Multiply the transposed matrix by vector v and put the result in vector result. More...;  ; void opMulTM (linearalgebra::BaseMatrix *bresult, linearalgebra::BaseMatrix *bm) const override;  multiply the transpose current matrix by m matrix and store the result in m M",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html:5379,Usability,clear,clear,5379,"ix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void clearRow (Index i);  Reset all the values in row i to 0. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCol (Index j);  Reset the all values in column j to 0. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowCol (Index i);  Reset the value of both row and column i to 0. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linear",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html:5421,Usability,clear,clearRow,5421,"ix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void clearRow (Index i);  Reset all the values in row i to 0. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCol (Index j);  Reset the all values in column j to 0. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowCol (Index i);  Reset the value of both row and column i to 0. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linear",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html:5503,Usability,clear,clearRows,5503,"ol, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void clearRow (Index i);  Reset all the values in row i to 0. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCol (Index j);  Reset the all values in column j to 0. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowCol (Index i);  Reset the value of both row and column i to 0. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html:5606,Usability,clear,clearCol,5606," to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void clearRow (Index i);  Reset all the values in row i to 0. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCol (Index j);  Reset the all values in column j to 0. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowCol (Index i);  Reset the value of both row and column i to 0. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; virtual void opPMulV (float *result, const float *v) const;  Multiply the matrix by float vecto",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html:5691,Usability,clear,clearCols,5691,"t2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void clearRow (Index i);  Reset all the values in row i to 0. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCol (Index j);  Reset the all values in column j to 0. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowCol (Index i);  Reset the value of both row and column i to 0. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; virtual void opPMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and add the result in vector result. More...;  ; virtual void opPMulV (double *result, const d",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html:5802,Usability,clear,clearRowCol,5802,"es. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void clearRow (Index i);  Reset all the values in row i to 0. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCol (Index j);  Reset the all values in column j to 0. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowCol (Index i);  Reset the value of both row and column i to 0. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; virtual void opPMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and add the result in vector result. More...;  ; virtual void opPMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and add the result in vector result. More...; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html:5898,Usability,clear,clearRowsCols,5898,"This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clear (Index i, Index j);  ; virtual void clearRow (Index i);  Reset all the values in row i to 0. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCol (Index j);  Reset the all values in column j to 0. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowCol (Index i);  Reset the value of both row and column i to 0. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; virtual void opPMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and add the result in vector result. More...;  ; virtual void opPMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and add the result in vector result. More...;  ; virtual void opMulTV (float *result, const float *v) const;  Multiply the transposed matrix by float vector v and p",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html:17632,Usability,clear,clear,17632,"y be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [6/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [7/8]. template<class TReal > . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ add() [8/8]. template<class Real > . void sofa::linearalgebra::RotationMatrix< Real >::add ; (; sofa::SignedIndex ; i, . sofa::SignedIndex ; j, . double ; v . ). overridevirtual . Add v to the existing value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear(). template<class Real > . void sofa::linearalgebra::RotationMatrix< Real >::clear. overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<class Real > . sofa::SignedIndex sofa::linearalgebra::RotationMatrix< Real >::colSize ; (; void ; ); const. overridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ element(). template<class Real > . SReal sofa::linearalgebra::RotationMatrix< Real >::element ; (; Index ; i, . sofa::SignedIndex ; j . ); const. overridevirtual . Read the value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ getVector(). template<class Real > . type::vector< Real > & sofa::linearalgebra::RotationMatrix< Real >::getVector. virtual . ◆ Name() [1/5]. const char * sofa::linearalgebra::RotationMatrix< float >::Name ; (; ). ◆ Name() [2/5]. const char * sofa::linearalgebra::RotationMatrix< double >::Name ; (; ). ◆ Name() [3/5]. templat",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html:17715,Usability,clear,clear,17715,"es from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [6/8]. template<class TReal > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [7/8]. template<class TReal > . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ add() [8/8]. template<class Real > . void sofa::linearalgebra::RotationMatrix< Real >::add ; (; sofa::SignedIndex ; i, . sofa::SignedIndex ; j, . double ; v . ). overridevirtual . Add v to the existing value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear(). template<class Real > . void sofa::linearalgebra::RotationMatrix< Real >::clear. overridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<class Real > . sofa::SignedIndex sofa::linearalgebra::RotationMatrix< Real >::colSize ; (; void ; ); const. overridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ element(). template<class Real > . SReal sofa::linearalgebra::RotationMatrix< Real >::element ; (; Index ; i, . sofa::SignedIndex ; j . ); const. overridevirtual . Read the value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ getVector(). template<class Real > . type::vector< Real > & sofa::linearalgebra::RotationMatrix< Real >::getVector. virtual . ◆ Name() [1/5]. const char * sofa::linearalgebra::RotationMatrix< float >::Name ; (; ). ◆ Name() [2/5]. const char * sofa::linearalgebra::RotationMatrix< double >::Name ; (; ). ◆ Name() [3/5]. template<class TReal > . template SOFA_LINEARALGEBRA_API const ch",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix-members.html:248,Modifiability,inherit,inherited,248,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::SparseMatrix< T > Member List . This is the complete list of members for sofa::linearalgebra::SparseMatrix< T >, including all inherited members. add(Index i, Index j, double v) overridesofa::linearalgebra::SparseMatrix< T >inlinevirtual; add(Index row, Index col, double v)=0sofa::linearalgebra::SparseMatrix< T >; add(Index row, Index col, const type::Mat3x3d &_M)sofa::linearalgebra::SparseMatrix< T >; add(Index row, Index col, const type::Mat3x3f &_M)sofa::linearalgebra::SparseMatrix< T >; add(Index row, Index col, const type::Mat2x2d &_M)sofa::linearalgebra::SparseMatrix< T >; add(Index row, Index col, const type::Mat2x2f &_M)sofa::linearalgebra::SparseMatrix< T >; add(Index row, Index col, const type::Mat6x6d &_M)sofa::linearalgebra::SparseMatrix< T >; add(Index row, Index col, const type::Mat6x6f &_M)sofa::linearalgebra::SparseMatrix< T >; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat3x3d &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat3x3f &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat2x2d &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat2x2f &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat6x6d &_M)sofa::linearalgebra::BaseMatrixvirtual; sofa::linearalgebra::BaseMatrix::add(Index row, Index col, const type::Mat6x6f &_M)sofa::linearalgebra::BaseMatrixvirtual; addEqual(const M &m)sofa::linearalgebra::SparseMatrix< T >inlineprotected; addMulTranspose(FullVector< Real2 > &res, const FullVector< Real2 > &v) constsofa::linearalgebra::SparseMatrix< T >inline; addMulTranspose(FullVector< Real2 > &res, const linearalgebra::BaseVector *v) constsofa:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix-members.html:6388,Usability,clear,clear,6388,"ne; blocAdd(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; blocCreate(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocElements(Index i, Index j, T *buffer) constsofa::linearalgebra::BaseMatrixinline; blocGet(Index i, Index j) constsofa::linearalgebra::BaseMatrixinlinevirtual; blocGetW(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; category enum valuesofa::linearalgebra::SparseMatrix< T >; clear(Index i, Index j) overridesofa::linearalgebra::SparseMatrix< T >inlinevirtual; clear() overridesofa::linearalgebra::SparseMatrix< T >inlinevirtual; clearCol(Index j) overridesofa::linearalgebra::SparseMatrix< T >inlinevirtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::SparseMatrix< T >inlinevirtual; clearRowCol(Index i) overridesofa::linearalgebra::SparseMatrix< T >inlinevirtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::SparseMatrix< T >inlinevirtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix-members.html:6473,Usability,clear,clear,6473,"blocCreate(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocElements(Index i, Index j, T *buffer) constsofa::linearalgebra::BaseMatrixinline; blocGet(Index i, Index j) constsofa::linearalgebra::BaseMatrixinlinevirtual; blocGetW(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; category enum valuesofa::linearalgebra::SparseMatrix< T >; clear(Index i, Index j) overridesofa::linearalgebra::SparseMatrix< T >inlinevirtual; clear() overridesofa::linearalgebra::SparseMatrix< T >inlinevirtual; clearCol(Index j) overridesofa::linearalgebra::SparseMatrix< T >inlinevirtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::SparseMatrix< T >inlinevirtual; clearRowCol(Index i) overridesofa::linearalgebra::SparseMatrix< T >inlinevirtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::SparseMatrix< T >inlinevirtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix-members.html:6542,Usability,clear,clearCol,6542,"al; blocElements(Index i, Index j, T *buffer) constsofa::linearalgebra::BaseMatrixinline; blocGet(Index i, Index j) constsofa::linearalgebra::BaseMatrixinlinevirtual; blocGetW(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; category enum valuesofa::linearalgebra::SparseMatrix< T >; clear(Index i, Index j) overridesofa::linearalgebra::SparseMatrix< T >inlinevirtual; clear() overridesofa::linearalgebra::SparseMatrix< T >inlinevirtual; clearCol(Index j) overridesofa::linearalgebra::SparseMatrix< T >inlinevirtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::SparseMatrix< T >inlinevirtual; clearRowCol(Index i) overridesofa::linearalgebra::SparseMatrix< T >inlinevirtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::SparseMatrix< T >inlinevirtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix-members.html:6621,Usability,clear,clearCols,6621,"ixinline; blocGet(Index i, Index j) constsofa::linearalgebra::BaseMatrixinlinevirtual; blocGetW(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; category enum valuesofa::linearalgebra::SparseMatrix< T >; clear(Index i, Index j) overridesofa::linearalgebra::SparseMatrix< T >inlinevirtual; clear() overridesofa::linearalgebra::SparseMatrix< T >inlinevirtual; clearCol(Index j) overridesofa::linearalgebra::SparseMatrix< T >inlinevirtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::SparseMatrix< T >inlinevirtual; clearRowCol(Index i) overridesofa::linearalgebra::SparseMatrix< T >inlinevirtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::SparseMatrix< T >inlinevirtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix-members.html:6700,Usability,clear,clearRow,6700,"virtual; blocGetW(Index i, Index j)sofa::linearalgebra::BaseMatrixinlinevirtual; blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; category enum valuesofa::linearalgebra::SparseMatrix< T >; clear(Index i, Index j) overridesofa::linearalgebra::SparseMatrix< T >inlinevirtual; clear() overridesofa::linearalgebra::SparseMatrix< T >inlinevirtual; clearCol(Index j) overridesofa::linearalgebra::SparseMatrix< T >inlinevirtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::SparseMatrix< T >inlinevirtual; clearRowCol(Index i) overridesofa::linearalgebra::SparseMatrix< T >inlinevirtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::SparseMatrix< T >inlinevirtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstItera",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix-members.html:6779,Usability,clear,clearRowCol,6779,"blocSet(Index i, Index j, const T *buffer)sofa::linearalgebra::BaseMatrixinline; bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; category enum valuesofa::linearalgebra::SparseMatrix< T >; clear(Index i, Index j) overridesofa::linearalgebra::SparseMatrix< T >inlinevirtual; clear() overridesofa::linearalgebra::SparseMatrix< T >inlinevirtual; clearCol(Index j) overridesofa::linearalgebra::SparseMatrix< T >inlinevirtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::SparseMatrix< T >inlinevirtual; clearRowCol(Index i) overridesofa::linearalgebra::SparseMatrix< T >inlinevirtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::SparseMatrix< T >inlinevirtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, void *internalPtr) constsofa::linearalgebra::BaseMatrixinlineprot",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix-members.html:6861,Usability,clear,clearRows,6861,"bRowBegin(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowEnd(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; category enum valuesofa::linearalgebra::SparseMatrix< T >; clear(Index i, Index j) overridesofa::linearalgebra::SparseMatrix< T >inlinevirtual; clear() overridesofa::linearalgebra::SparseMatrix< T >inlinevirtual; clearCol(Index j) overridesofa::linearalgebra::SparseMatrix< T >inlinevirtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::SparseMatrix< T >inlinevirtual; clearRowCol(Index i) overridesofa::linearalgebra::SparseMatrix< T >inlinevirtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::SparseMatrix< T >inlinevirtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, void *internalPtr) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, Index internalData) constsofa::line",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix-members.html:6940,Usability,clear,clearRowsCols,6940,"dex ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowRange(Index ib) constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsBegin() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsEnd() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowSize() constsofa::linearalgebra::BaseMatrixinlinevirtual; bRowsRange() constsofa::linearalgebra::BaseMatrixinlinevirtual; category enum valuesofa::linearalgebra::SparseMatrix< T >; clear(Index i, Index j) overridesofa::linearalgebra::SparseMatrix< T >inlinevirtual; clear() overridesofa::linearalgebra::SparseMatrix< T >inlinevirtual; clearCol(Index j) overridesofa::linearalgebra::SparseMatrix< T >inlinevirtual; clearCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRow(Index i) overridesofa::linearalgebra::SparseMatrix< T >inlinevirtual; clearRowCol(Index i) overridesofa::linearalgebra::SparseMatrix< T >inlinevirtual; clearRows(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; clearRowsCols(Index imin, Index imax)sofa::linearalgebra::BaseMatrixinlinevirtual; cols(void) constsofa::linearalgebra::BaseMatrixinline; colSize(void) const overridesofa::linearalgebra::SparseMatrix< T >inlinevirtual; compress()sofa::linearalgebra::BaseMatrixvirtual; createBlockAccessor(Index row, Index col, void *internalPtr=nullptr)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockAccessor(Index row, Index col, Index internalData)sofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, void *internalPtr=nullptr) constsofa::linearalgebra::BaseMatrixinlineprotected; createBlockConstAccessor(Index row, Index col, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, void *internalPtr) constsofa::linearalgebra::BaseMatrixinlineprotected; createColBlockConstIterator(Index row, Index internalData) constsofa::linearalgebra::BaseMatrixinlineprotected; createRowBlockConstIterator(void *internalP",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:584,Integrability,wrap,wrapped,584,"﻿. SOFA API: sofa::linearalgebra::SparseMatrix< T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members . sofa::linearalgebra::SparseMatrix< T > Class Template Reference . #include <SparseMatrix.h>. Inheritance diagram for sofa::linearalgebra::SparseMatrix< T >:. [legend]; Detailed Description; template<typename T>; class sofa::linearalgebra::SparseMatrix< T >; This is basically a map of map of T, wrapped in a linearalgebra::BaseMatrix interface. The const access methods avoid creating the entries when they do not exist. . Protected Attributes; Data data;  ; Index nRow;  ; Index nCol;  . Public Member Functions;  SparseMatrix ();  ;  SparseMatrix (Index nbRow, Index nbCol);  ; LineIterator begin ();  ; LineIterator end ();  ; LineConstIterator begin () const;  ; LineConstIterator end () const;  ; Line & operator[] (Index i);  ; const Line & operator[] (Index i) const;  ; void resize (Index nbRow, Index nbCol) override;  Resize the matrix and reset all values to 0. More...;  ; Index rowSize (void) const override;  Number of rows. More...;  ; Index colSize (void) const override;  Number of columns. More...;  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both r",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:623,Integrability,interface,interface,623,"﻿. SOFA API: sofa::linearalgebra::SparseMatrix< T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members . sofa::linearalgebra::SparseMatrix< T > Class Template Reference . #include <SparseMatrix.h>. Inheritance diagram for sofa::linearalgebra::SparseMatrix< T >:. [legend]; Detailed Description; template<typename T>; class sofa::linearalgebra::SparseMatrix< T >; This is basically a map of map of T, wrapped in a linearalgebra::BaseMatrix interface. The const access methods avoid creating the entries when they do not exist. . Protected Attributes; Data data;  ; Index nRow;  ; Index nCol;  . Public Member Functions;  SparseMatrix ();  ;  SparseMatrix (Index nbRow, Index nbCol);  ; LineIterator begin ();  ; LineIterator end ();  ; LineConstIterator begin () const;  ; LineConstIterator end () const;  ; Line & operator[] (Index i);  ; const Line & operator[] (Index i) const;  ; void resize (Index nbRow, Index nbCol) override;  Resize the matrix and reset all values to 0. More...;  ; Index rowSize (void) const override;  Number of rows. More...;  ; Index colSize (void) const override;  Number of columns. More...;  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both r",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:5667,Modifiability,inherit,inherited,5667,"btain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain bet",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:12283,Modifiability,inherit,inherited,12283,,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:16736,Modifiability,inherit,inherited,16736,"erator, ColBlockConstIterator > itRangeRowBlock (InternalRowBlockIterator *it) const;  ; virtual void itIncRowBlock (InternalRowBlockIterator *it) const;  ; virtual void itDecRowBlock (InternalRowBlockIterator *it) const;  ; virtual bool itEqRowBlock (const InternalRowBlockIterator *it, const InternalRowBlockIterator *it2) const;  ; virtual bool itLessRowBlock (const InternalRowBlockIterator *it, const InternalRowBlockIterator *it2) const;  ; RowBlockConstIterator createRowBlockConstIterator (void *internalPtr) const;  ; RowBlockConstIterator createRowBlockConstIterator (Index internalData0, Index internalData1) const;  . Additional Inherited Members;  Static Protected Member Functions inherited from sofa::linearalgebra::BaseMatrix; static InternalBlockAccessor * getInternal (BlockConstAccessor *b);  ; static const InternalBlockAccessor * getInternal (const BlockConstAccessor *b);  ; static InternalBlockAccessor * getInternal (BlockAccessor *b);  ; static const InternalBlockAccessor * getInternal (const BlockAccessor *b);  ; static InternalColBlockIterator * getInternal (ColBlockConstIterator *b);  ; static const InternalColBlockIterator * getInternal (const ColBlockConstIterator *b);  ; static InternalRowBlockIterator * getInternal (RowBlockConstIterator *b);  ; static const InternalRowBlockIterator * getInternal (const RowBlockConstIterator *b);  . Attribute details. ◆ data. template<typename T > . Data sofa::linearalgebra::SparseMatrix< T >::data. protected . ◆ nCol. template<typename T > . Index sofa::linearalgebra::SparseMatrix< T >::nCol. protected . ◆ nRow. template<typename T > . Index sofa::linearalgebra::SparseMatrix< T >::nRow. protected . Constructor details. ◆ SparseMatrix() [1/2]. template<typename T > . sofa::linearalgebra::SparseMatrix< T >::SparseMatrix ; (; ). inline . ◆ SparseMatrix() [2/2]. template<typename T > . sofa::linearalgebra::SparseMatrix< T >::SparseMatrix ; (; Index ; nbRow, . Index ; nbCol . ). inline . Function details. ◆ add() [1/8].",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:4746,Performance,perform,performances,4746," void swap (SparseMatrix< T > &m);  ; template<class M2 > ; bool hasRef (const M2 *m) const;  ; std::string expr () const;  ; bool valid () const;  ; template<class Dest > ; void addTo (Dest *dest) const;  ; template<class Real2 > ; void operator= (const SparseMatrix< Real2 > &m);  ; template<class Real2 > ; void operator+= (const SparseMatrix< Real2 > &m);  ; template<class Real2 > ; void operator-= (const SparseMatrix< Real2 > &m);  ; template<class Expr2 > ; void operator= (const MatrixExpr< Expr2 > &m);  ; template<class Expr2 > ; void operator+= (const MatrixExpr< Expr2 > &m);  ; template<class Expr2 > ; void operator-= (const MatrixExpr< Expr2 > &m);  ; const char * Name ();  ; const char * Name ();  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ()",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:4920,Performance,perform,performances,4920,"void addTo (Dest *dest) const;  ; template<class Real2 > ; void operator= (const SparseMatrix< Real2 > &m);  ; template<class Real2 > ; void operator+= (const SparseMatrix< Real2 > &m);  ; template<class Real2 > ; void operator-= (const SparseMatrix< Real2 > &m);  ; template<class Expr2 > ; void operator= (const MatrixExpr< Expr2 > &m);  ; template<class Expr2 > ; void operator+= (const MatrixExpr< Expr2 > &m);  ; template<class Expr2 > ; void operator-= (const MatrixExpr< Expr2 > &m);  ; const char * Name ();  ; const char * Name ();  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API)",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:5094,Performance,perform,performances,5094,"eal2 > &m);  ; template<class Real2 > ; void operator-= (const SparseMatrix< Real2 > &m);  ; template<class Expr2 > ; void operator= (const MatrixExpr< Expr2 > &m);  ; template<class Expr2 > ; void operator+= (const MatrixExpr< Expr2 > &m);  ; template<class Expr2 > ; void operator-= (const MatrixExpr< Expr2 > &m);  ; const char * Name ();  ; const char * Name ();  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:5268,Performance,perform,performances,5268,"te<class Expr2 > ; void operator+= (const MatrixExpr< Expr2 > &m);  ; template<class Expr2 > ; void operator-= (const MatrixExpr< Expr2 > &m);  ; const char * Name ();  ; const char * Name ();  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:5442,Performance,perform,performances,5442,"st char * Name ();  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:5616,Performance,perform,performances,5616,"virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:6216,Performance,perform,performances,6216,"es from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:6390,Performance,perform,performances,6390,"es from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index i",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:6564,Performance,perform,performances,6564,"es from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ;  Public Member Functions inherited from sofa::linearalgebra::BaseMatrix;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *resul",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:6738,Performance,perform,performances,6738,"Matrix ();  ; virtual ~BaseMatrix ();  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const floa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:6912,Performance,perform,performances,6912,"ible API) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply th",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:7086,Performance,perform,performances,7086,"virtual void add (Index row, Index col, const type::Mat3x3d &_M);  Adding values from a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) cons",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:18486,Performance,perform,performances,18486,"a sofa::linearalgebra::SparseMatrix< T >::data. protected . ◆ nCol. template<typename T > . Index sofa::linearalgebra::SparseMatrix< T >::nCol. protected . ◆ nRow. template<typename T > . Index sofa::linearalgebra::SparseMatrix< T >::nRow. protected . Constructor details. ◆ SparseMatrix() [1/2]. template<typename T > . sofa::linearalgebra::SparseMatrix< T >::SparseMatrix ; (; ). inline . ◆ SparseMatrix() [2/2]. template<typename T > . sofa::linearalgebra::SparseMatrix< T >::SparseMatrix ; (; Index ; nbRow, . Index ; nbCol . ). inline . Function details. ◆ add() [1/8]. template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::add ; (; Index ; row, . Index ; col, . double ; v . ). inlineoverridevirtual . Add v to the existing value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ add() [2/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [3/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [4/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [6/8]. template<typename T > . void so",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:18582,Performance,perform,performances,18582,"pename T > . Index sofa::linearalgebra::SparseMatrix< T >::nCol. protected . ◆ nRow. template<typename T > . Index sofa::linearalgebra::SparseMatrix< T >::nRow. protected . Constructor details. ◆ SparseMatrix() [1/2]. template<typename T > . sofa::linearalgebra::SparseMatrix< T >::SparseMatrix ; (; ). inline . ◆ SparseMatrix() [2/2]. template<typename T > . sofa::linearalgebra::SparseMatrix< T >::SparseMatrix ; (; Index ; nbRow, . Index ; nbCol . ). inline . Function details. ◆ add() [1/8]. template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::add ; (; Index ; row, . Index ; col, . double ; v . ). inlineoverridevirtual . Add v to the existing value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ add() [2/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [3/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [4/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [6/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This fun",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:18761,Performance,perform,performances,18761,"SparseMatrix() [1/2]. template<typename T > . sofa::linearalgebra::SparseMatrix< T >::SparseMatrix ; (; ). inline . ◆ SparseMatrix() [2/2]. template<typename T > . sofa::linearalgebra::SparseMatrix< T >::SparseMatrix ; (; Index ; nbRow, . Index ; nbCol . ). inline . Function details. ◆ add() [1/8]. template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::add ; (; Index ; row, . Index ; col, . double ; v . ). inlineoverridevirtual . Add v to the existing value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ add() [2/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [3/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [4/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [6/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [7/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:18857,Performance,perform,performances,18857,"< T >::SparseMatrix ; (; ). inline . ◆ SparseMatrix() [2/2]. template<typename T > . sofa::linearalgebra::SparseMatrix< T >::SparseMatrix ; (; Index ; nbRow, . Index ; nbCol . ). inline . Function details. ◆ add() [1/8]. template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::add ; (; Index ; row, . Index ; col, . double ; v . ). inlineoverridevirtual . Add v to the existing value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ add() [2/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [3/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [4/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [6/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [7/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [8/8]. template<typename T > . vi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:19036,Performance,perform,performances,19036," details. ◆ add() [1/8]. template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::add ; (; Index ; row, . Index ; col, . double ; v . ). inlineoverridevirtual . Add v to the existing value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ add() [2/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [3/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [4/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [6/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [7/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [8/8]. template<typename T > . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ addEqual(). template<typename T > . template<class M > . v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:19132,Performance,perform,performances,19132,"seMatrix< T >::add ; (; Index ; row, . Index ; col, . double ; v . ). inlineoverridevirtual . Add v to the existing value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ add() [2/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [3/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [4/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [6/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [7/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [8/8]. template<typename T > . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ addEqual(). template<typename T > . template<class M > . void sofa::linearalgebra::SparseMatrix< T >::addEqual ; (; const M & ; m). inli",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:19311,Performance,perform,performances,19311,"a::linearalgebra::BaseMatrix. ◆ add() [2/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [3/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [4/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [6/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [7/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [8/8]. template<typename T > . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ addEqual(). template<typename T > . template<class M > . void sofa::linearalgebra::SparseMatrix< T >::addEqual ; (; const M & ; m). inlineprotected . this += m . ◆ addMulTranspose() [1/4]. template<typename T > . template<class Real2 > . void sofa::linearalgebra::SparseMatrix< T >::addMulTranspose ; (; FullVector< Real2 > & ; res, ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:19407,Performance,perform,performances,19407,":linearalgebra::BaseMatrix::add. Adding values from a 2x2d matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2d matrix this function may be overload to obtain better performances. . ◆ add() [3/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [4/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [6/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [7/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [8/8]. template<typename T > . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ addEqual(). template<typename T > . template<class M > . void sofa::linearalgebra::SparseMatrix< T >::addEqual ; (; const M & ; m). inlineprotected . this += m . ◆ addMulTranspose() [1/4]. template<typename T > . template<class Real2 > . void sofa::linearalgebra::SparseMatrix< T >::addMulTranspose ; (; FullVector< Real2 > & ; res, . const FullVector< Real2 > & ; v . ); const. inline . ◆ addMulTranspose() [2/",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:19586,Performance,perform,performances,19586,"obtain better performances. . ◆ add() [3/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 2x2f matrix. This function may be overload to obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [4/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [6/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [7/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [8/8]. template<typename T > . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ addEqual(). template<typename T > . template<class M > . void sofa::linearalgebra::SparseMatrix< T >::addEqual ; (; const M & ; m). inlineprotected . this += m . ◆ addMulTranspose() [1/4]. template<typename T > . template<class Real2 > . void sofa::linearalgebra::SparseMatrix< T >::addMulTranspose ; (; FullVector< Real2 > & ; res, . const FullVector< Real2 > & ; v . ); const. inline . ◆ addMulTranspose() [2/4]. template<typename T > . template<class Real2 > . void sofa::linearalgebra::SparseMatrix< T >::addMulTranspose ; (; FullVector< Real2 > & ; res, . const linearalgebra::BaseVector * ; v . ); cons",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:19765,Performance,perform,performances,19765,"obtain better performances. ; Adding values from a 2x2f matrix this function may be overload to obtain better performances. . ◆ add() [4/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3d matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3d matrix this function may be overload to obtain better performances. . ◆ add() [5/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 3x3f matrix. This function may be overload to obtain better performances. ; Adding values from a 3x3f matrix this function may be overload to obtain better performances. . ◆ add() [6/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6d matrix. This function may be overload to obtain better performances. . ◆ add() [7/8]. template<typename T > . void sofa::linearalgebra::BaseMatrix::add. Adding values from a 6x6f matrix. This function may be overload to obtain better performances. . ◆ add() [8/8]. template<typename T > . virtual void sofa::linearalgebra::BaseMatrix::add. Add v to the existing value of the element at row i, column j (using 0-based indices) . ◆ addEqual(). template<typename T > . template<class M > . void sofa::linearalgebra::SparseMatrix< T >::addEqual ; (; const M & ; m). inlineprotected . this += m . ◆ addMulTranspose() [1/4]. template<typename T > . template<class Real2 > . void sofa::linearalgebra::SparseMatrix< T >::addMulTranspose ; (; FullVector< Real2 > & ; res, . const FullVector< Real2 > & ; v . ); const. inline . ◆ addMulTranspose() [2/4]. template<typename T > . template<class Real2 > . void sofa::linearalgebra::SparseMatrix< T >::addMulTranspose ; (; FullVector< Real2 > & ; res, . const linearalgebra::BaseVector * ; v . ); const. inline . ◆ addMulTranspose() [3/4]. template<typename T > . template<class Real2 > . void sofa::linearalgebra::SparseMatrix< T >::addMulTranspose ; (; linearalgebra::BaseVector",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:659,Safety,avoid,avoid,659,"﻿. SOFA API: sofa::linearalgebra::SparseMatrix< T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members . sofa::linearalgebra::SparseMatrix< T > Class Template Reference . #include <SparseMatrix.h>. Inheritance diagram for sofa::linearalgebra::SparseMatrix< T >:. [legend]; Detailed Description; template<typename T>; class sofa::linearalgebra::SparseMatrix< T >; This is basically a map of map of T, wrapped in a linearalgebra::BaseMatrix interface. The const access methods avoid creating the entries when they do not exist. . Protected Attributes; Data data;  ; Index nRow;  ; Index nCol;  . Public Member Functions;  SparseMatrix ();  ;  SparseMatrix (Index nbRow, Index nbCol);  ; LineIterator begin ();  ; LineIterator end ();  ; LineConstIterator begin () const;  ; LineConstIterator end () const;  ; Line & operator[] (Index i);  ; const Line & operator[] (Index i) const;  ; void resize (Index nbRow, Index nbCol) override;  Resize the matrix and reset all values to 0. More...;  ; Index rowSize (void) const override;  Number of rows. More...;  ; Index colSize (void) const override;  Number of columns. More...;  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both r",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:644,Security,access,access,644,"﻿. SOFA API: sofa::linearalgebra::SparseMatrix< T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members . sofa::linearalgebra::SparseMatrix< T > Class Template Reference . #include <SparseMatrix.h>. Inheritance diagram for sofa::linearalgebra::SparseMatrix< T >:. [legend]; Detailed Description; template<typename T>; class sofa::linearalgebra::SparseMatrix< T >; This is basically a map of map of T, wrapped in a linearalgebra::BaseMatrix interface. The const access methods avoid creating the entries when they do not exist. . Protected Attributes; Data data;  ; Index nRow;  ; Index nCol;  . Public Member Functions;  SparseMatrix ();  ;  SparseMatrix (Index nbRow, Index nbCol);  ; LineIterator begin ();  ; LineIterator end ();  ; LineConstIterator begin () const;  ; LineConstIterator end () const;  ; Line & operator[] (Index i);  ; const Line & operator[] (Index i) const;  ; void resize (Index nbRow, Index nbCol) override;  Resize the matrix and reset all values to 0. More...;  ; Index rowSize (void) const override;  Number of rows. More...;  ; Index colSize (void) const override;  Number of columns. More...;  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both r",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:10473,Security,access,access,10473,"st;  Multiply the transposed matrix by float vector v and add the result in vector result. More...;  ; virtual void opPMulTV (double *result, const double *v) const;  Multiply the transposed matrix by double vector v and add the result in vector result. More...;  ; virtual void opMulTM (BaseMatrix *result, BaseMatrix *m) const;  Multiply the transposed matrix by matrix m and store the result in matrix result. More...;  ; virtual void opAddM (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the matrix to the m matrix and strore the result in m. More...;  ; virtual void opAddMT (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the transposed matrix to the m matrix and strore the result in m. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual MatrixCategory getCategory () const;  ; virtual Index getBlockRows () const;  ; virtual Index getBlockCols () const;  ; virtual Index bRowSize () const;  ; virtual Index bColSize () const;  ; virtual Index getBandWidth () const;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  ; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the give",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:10566,Security,access,access,10566,"const;  Multiply the transposed matrix by matrix m and store the result in matrix result. More...;  ; virtual void opAddM (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the matrix to the m matrix and strore the result in m. More...;  ; virtual void opAddMT (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the transposed matrix to the m matrix and strore the result in m. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual MatrixCategory getCategory () const;  ; virtual Index getBlockRows () const;  ; virtual Index getBlockCols () const;  ; virtual Index bRowSize () const;  ; virtual Index bColSize () const;  ; virtual Index getBandWidth () const;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  ; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the given row of blocks. More...;  ; virtual ColBlockConstIterator bRowEnd (Index ib) const;  Get the iterator corresponding to the end of the given row of blocks. More...;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > bRowRange (Index ib) const;  Get the iterators corresponding to the beginning and end of ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:10661,Security,access,access,10661,"tual void opAddM (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the matrix to the m matrix and strore the result in m. More...;  ; virtual void opAddMT (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the transposed matrix to the m matrix and strore the result in m. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual MatrixCategory getCategory () const;  ; virtual Index getBlockRows () const;  ; virtual Index getBlockCols () const;  ; virtual Index bRowSize () const;  ; virtual Index bColSize () const;  ; virtual Index getBandWidth () const;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  ; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the given row of blocks. More...;  ; virtual ColBlockConstIterator bRowEnd (Index ib) const;  Get the iterator corresponding to the end of the given row of blocks. More...;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > bRowRange (Index ib) const;  Get the iterators corresponding to the beginning and end of the given row of blocks. More...;  ; virtual RowBlockConstIterator bRowsBegin () const;  Get the iterator",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:1731,Usability,clear,clear,1731,"blic Member Functions;  SparseMatrix ();  ;  SparseMatrix (Index nbRow, Index nbCol);  ; LineIterator begin ();  ; LineIterator end ();  ; LineConstIterator begin () const;  ; LineConstIterator end () const;  ; Line & operator[] (Index i);  ; const Line & operator[] (Index i) const;  ; void resize (Index nbRow, Index nbCol) override;  Resize the matrix and reset all values to 0. More...;  ; Index rowSize (void) const override;  Number of rows. More...;  ; Index colSize (void) const override;  Number of columns. More...;  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; template<class Real2 > ; void mul (FullVector< Real2 > &res, const FullVector< Real2 > &v) const;  ; template<class Real2 > ; void addMulTranspose (FullVector< Real2 > &res, const FullVector< Real2 > &v) const;  ; template<class Real2 > ; void mul (FullVector< Real2 > &res, const linearalgebra::BaseVector *v) const;  ; template<class Real2 > ; void addMulTranspose (FullVector< Real2 > &res, const linearalgebra::BaseVector *v) const;  ; template<class Real2 > ; void mul (linearalgebra::BaseVector *res, const FullVector< Real2 > &v) const;  ; template<class Real2 > ; void addMulTranspose (linearalgebra::BaseVector *res, const FullVector< Real2 > &v) const;  ; void mul (linearalg",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:1774,Usability,clear,clearRow,1774,"blic Member Functions;  SparseMatrix ();  ;  SparseMatrix (Index nbRow, Index nbCol);  ; LineIterator begin ();  ; LineIterator end ();  ; LineConstIterator begin () const;  ; LineConstIterator end () const;  ; Line & operator[] (Index i);  ; const Line & operator[] (Index i) const;  ; void resize (Index nbRow, Index nbCol) override;  Resize the matrix and reset all values to 0. More...;  ; Index rowSize (void) const override;  Number of rows. More...;  ; Index colSize (void) const override;  Number of columns. More...;  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; template<class Real2 > ; void mul (FullVector< Real2 > &res, const FullVector< Real2 > &v) const;  ; template<class Real2 > ; void addMulTranspose (FullVector< Real2 > &res, const FullVector< Real2 > &v) const;  ; template<class Real2 > ; void mul (FullVector< Real2 > &res, const linearalgebra::BaseVector *v) const;  ; template<class Real2 > ; void addMulTranspose (FullVector< Real2 > &res, const linearalgebra::BaseVector *v) const;  ; template<class Real2 > ; void mul (linearalgebra::BaseVector *res, const FullVector< Real2 > &v) const;  ; template<class Real2 > ; void addMulTranspose (linearalgebra::BaseVector *res, const FullVector< Real2 > &v) const;  ; void mul (linearalg",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:1857,Usability,clear,clearCol,1857,"n ();  ; LineIterator end ();  ; LineConstIterator begin () const;  ; LineConstIterator end () const;  ; Line & operator[] (Index i);  ; const Line & operator[] (Index i) const;  ; void resize (Index nbRow, Index nbCol) override;  Resize the matrix and reset all values to 0. More...;  ; Index rowSize (void) const override;  Number of rows. More...;  ; Index colSize (void) const override;  Number of columns. More...;  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; template<class Real2 > ; void mul (FullVector< Real2 > &res, const FullVector< Real2 > &v) const;  ; template<class Real2 > ; void addMulTranspose (FullVector< Real2 > &res, const FullVector< Real2 > &v) const;  ; template<class Real2 > ; void mul (FullVector< Real2 > &res, const linearalgebra::BaseVector *v) const;  ; template<class Real2 > ; void addMulTranspose (FullVector< Real2 > &res, const linearalgebra::BaseVector *v) const;  ; template<class Real2 > ; void mul (linearalgebra::BaseVector *res, const FullVector< Real2 > &v) const;  ; template<class Real2 > ; void addMulTranspose (linearalgebra::BaseVector *res, const FullVector< Real2 > &v) const;  ; void mul (linearalgebra::BaseVector *res, const linearalgebra::BaseVector *v) const;  ; void addMulTranspose (linearalgebra::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:1943,Usability,clear,clearRowCol,1943," () const;  ; Line & operator[] (Index i);  ; const Line & operator[] (Index i) const;  ; void resize (Index nbRow, Index nbCol) override;  Resize the matrix and reset all values to 0. More...;  ; Index rowSize (void) const override;  Number of rows. More...;  ; Index colSize (void) const override;  Number of columns. More...;  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; template<class Real2 > ; void mul (FullVector< Real2 > &res, const FullVector< Real2 > &v) const;  ; template<class Real2 > ; void addMulTranspose (FullVector< Real2 > &res, const FullVector< Real2 > &v) const;  ; template<class Real2 > ; void mul (FullVector< Real2 > &res, const linearalgebra::BaseVector *v) const;  ; template<class Real2 > ; void addMulTranspose (FullVector< Real2 > &res, const linearalgebra::BaseVector *v) const;  ; template<class Real2 > ; void mul (linearalgebra::BaseVector *res, const FullVector< Real2 > &v) const;  ; template<class Real2 > ; void addMulTranspose (linearalgebra::BaseVector *res, const FullVector< Real2 > &v) const;  ; void mul (linearalgebra::BaseVector *res, const linearalgebra::BaseVector *v) const;  ; void addMulTranspose (linearalgebra::BaseVector *res, const linearalgebra::BaseVector *v) const;  ; template<class Real2 > ; Full",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:2040,Usability,clear,clear,2040," const;  ; void resize (Index nbRow, Index nbCol) override;  Resize the matrix and reset all values to 0. More...;  ; Index rowSize (void) const override;  Number of rows. More...;  ; Index colSize (void) const override;  Number of columns. More...;  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both row and column i to 0. More...;  ; void clear () override;  Reset all values to 0. More...;  ; template<class Real2 > ; void mul (FullVector< Real2 > &res, const FullVector< Real2 > &v) const;  ; template<class Real2 > ; void addMulTranspose (FullVector< Real2 > &res, const FullVector< Real2 > &v) const;  ; template<class Real2 > ; void mul (FullVector< Real2 > &res, const linearalgebra::BaseVector *v) const;  ; template<class Real2 > ; void addMulTranspose (FullVector< Real2 > &res, const linearalgebra::BaseVector *v) const;  ; template<class Real2 > ; void mul (linearalgebra::BaseVector *res, const FullVector< Real2 > &v) const;  ; template<class Real2 > ; void addMulTranspose (linearalgebra::BaseVector *res, const FullVector< Real2 > &v) const;  ; void mul (linearalgebra::BaseVector *res, const linearalgebra::BaseVector *v) const;  ; void addMulTranspose (linearalgebra::BaseVector *res, const linearalgebra::BaseVector *v) const;  ; template<class Real2 > ; FullVector< Real2 > operator* (const FullVector< Real2 > &v) const;  ; MatrixExpr<",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:7125,Usability,clear,clearRows,7125,"a 3x3d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:7228,Usability,clear,clearCols,7228,"ndex row, Index col, const type::Mat3x3f &_M);  Adding values from a 3x3f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; virtual void opPMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and add t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:7339,Usability,clear,clearRowsCols,7339,"ter performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2d &_M);  Adding values from a 2x2d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat2x2f &_M);  Adding values from a 2x2f matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6d &_M);  Adding values from a 6x6d matrix. This function may be overload to obtain better performances. More...;  ; virtual void add (Index row, Index col, const type::Mat6x6f &_M);  Adding values from a 6x6f matrix. This function may be overload to obtain better performances. More...;  ; virtual void clearRows (Index imin, Index imax);  Clears the value of rows imin to imax-1. More...;  ; virtual void clearCols (Index imin, Index imax);  Clears all the values in columns imin to imax-1. More...;  ; virtual void clearRowsCols (Index imin, Index imax);  Clears all the values in rows imin to imax-1 and columns imin to imax-1. More...;  ; virtual void compress ();  ; virtual void opMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and put the result in vector result. More...;  ; virtual void opMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and put the result in vector result. More...;  ; virtual void opMulV (double *result, const double *v) const;  Multiply the matrix by double vector v and put the result in vector result. More...;  ; virtual void opPMulV (linearalgebra::BaseVector *result, const linearalgebra::BaseVector *v) const;  Multiply the matrix by vector v and add the result in vector result. More...;  ; virtual void opPMulV (float *result, const float *v) const;  Multiply the matrix by float vector v and add the result in vector result. More...;  ; virtual void opPMulV (double *result, const double *v) const;  Multiply the matrix by",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:21421,Usability,clear,clear,21421,"oid sofa::linearalgebra::SparseMatrix< T >::addMulTranspose ; (; FullVector< Real2 > & ; res, . const linearalgebra::BaseVector * ; v . ); const. inline . ◆ addMulTranspose() [3/4]. template<typename T > . template<class Real2 > . void sofa::linearalgebra::SparseMatrix< T >::addMulTranspose ; (; linearalgebra::BaseVector * ; res, . const FullVector< Real2 > & ; v . ); const. inline . ◆ addMulTranspose() [4/4]. template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::addMulTranspose ; (; linearalgebra::BaseVector * ; res, . const linearalgebra::BaseVector * ; v . ); const. inline . ◆ addTo(). template<typename T > . template<class Dest > . void sofa::linearalgebra::SparseMatrix< T >::addTo ; (; Dest * ; dest); const. inline . ◆ begin() [1/2]. template<typename T > . LineIterator sofa::linearalgebra::SparseMatrix< T >::begin ; (; ). inline . ◆ begin() [2/2]. template<typename T > . LineConstIterator sofa::linearalgebra::SparseMatrix< T >::begin ; (; ); const. inline . ◆ clear() [1/2]. template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clear ; (; ). inlineoverridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clear ; (; Index ; i, . Index ; j . ). inlineoverridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clearCol ; (; Index ; j). inlineoverridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clearRow ; (; Index ; i). inlineoverridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Reset the value of both ro",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:21505,Usability,clear,clear,21505,"(; FullVector< Real2 > & ; res, . const linearalgebra::BaseVector * ; v . ); const. inline . ◆ addMulTranspose() [3/4]. template<typename T > . template<class Real2 > . void sofa::linearalgebra::SparseMatrix< T >::addMulTranspose ; (; linearalgebra::BaseVector * ; res, . const FullVector< Real2 > & ; v . ); const. inline . ◆ addMulTranspose() [4/4]. template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::addMulTranspose ; (; linearalgebra::BaseVector * ; res, . const linearalgebra::BaseVector * ; v . ); const. inline . ◆ addTo(). template<typename T > . template<class Dest > . void sofa::linearalgebra::SparseMatrix< T >::addTo ; (; Dest * ; dest); const. inline . ◆ begin() [1/2]. template<typename T > . LineIterator sofa::linearalgebra::SparseMatrix< T >::begin ; (; ). inline . ◆ begin() [2/2]. template<typename T > . LineConstIterator sofa::linearalgebra::SparseMatrix< T >::begin ; (; ); const. inline . ◆ clear() [1/2]. template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clear ; (; ). inlineoverridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clear ; (; Index ; i, . Index ; j . ). inlineoverridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clearCol ; (; Index ; j). inlineoverridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clearRow ; (; Index ; i). inlineoverridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:21614,Usability,clear,clear,21614,"pename T > . template<class Real2 > . void sofa::linearalgebra::SparseMatrix< T >::addMulTranspose ; (; linearalgebra::BaseVector * ; res, . const FullVector< Real2 > & ; v . ); const. inline . ◆ addMulTranspose() [4/4]. template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::addMulTranspose ; (; linearalgebra::BaseVector * ; res, . const linearalgebra::BaseVector * ; v . ); const. inline . ◆ addTo(). template<typename T > . template<class Dest > . void sofa::linearalgebra::SparseMatrix< T >::addTo ; (; Dest * ; dest); const. inline . ◆ begin() [1/2]. template<typename T > . LineIterator sofa::linearalgebra::SparseMatrix< T >::begin ; (; ). inline . ◆ begin() [2/2]. template<typename T > . LineConstIterator sofa::linearalgebra::SparseMatrix< T >::begin ; (; ); const. inline . ◆ clear() [1/2]. template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clear ; (; ). inlineoverridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clear ; (; Index ; i, . Index ; j . ). inlineoverridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clearCol ; (; Index ; j). inlineoverridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clearRow ; (; Index ; i). inlineoverridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<typename T > . Index sofa::linearalgebra::SparseMatrix< T >::colSize ; (; void ; ); const. inlin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:21698,Usability,clear,clear,21698,"rseMatrix< T >::addMulTranspose ; (; linearalgebra::BaseVector * ; res, . const FullVector< Real2 > & ; v . ); const. inline . ◆ addMulTranspose() [4/4]. template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::addMulTranspose ; (; linearalgebra::BaseVector * ; res, . const linearalgebra::BaseVector * ; v . ); const. inline . ◆ addTo(). template<typename T > . template<class Dest > . void sofa::linearalgebra::SparseMatrix< T >::addTo ; (; Dest * ; dest); const. inline . ◆ begin() [1/2]. template<typename T > . LineIterator sofa::linearalgebra::SparseMatrix< T >::begin ; (; ). inline . ◆ begin() [2/2]. template<typename T > . LineConstIterator sofa::linearalgebra::SparseMatrix< T >::begin ; (; ); const. inline . ◆ clear() [1/2]. template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clear ; (; ). inlineoverridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clear ; (; Index ; i, . Index ; j . ). inlineoverridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clearCol ; (; Index ; j). inlineoverridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clearRow ; (; Index ; i). inlineoverridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<typename T > . Index sofa::linearalgebra::SparseMatrix< T >::colSize ; (; void ; ); const. inlineoverridevirtual . Number of columns. ; Implements sofa::linearalge",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:21815,Usability,clear,clearCol,21815,"ulTranspose() [4/4]. template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::addMulTranspose ; (; linearalgebra::BaseVector * ; res, . const linearalgebra::BaseVector * ; v . ); const. inline . ◆ addTo(). template<typename T > . template<class Dest > . void sofa::linearalgebra::SparseMatrix< T >::addTo ; (; Dest * ; dest); const. inline . ◆ begin() [1/2]. template<typename T > . LineIterator sofa::linearalgebra::SparseMatrix< T >::begin ; (; ). inline . ◆ begin() [2/2]. template<typename T > . LineConstIterator sofa::linearalgebra::SparseMatrix< T >::begin ; (; ); const. inline . ◆ clear() [1/2]. template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clear ; (; ). inlineoverridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clear ; (; Index ; i, . Index ; j . ). inlineoverridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clearCol ; (; Index ; j). inlineoverridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clearRow ; (; Index ; i). inlineoverridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<typename T > . Index sofa::linearalgebra::SparseMatrix< T >::colSize ; (; void ; ); const. inlineoverridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ element(). template<typename T > . SReal sofa::linearalgebra::SparseMatrix< T >::element ; (; Index ; i, . Index ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:21896,Usability,clear,clearCol,21896,"bra::SparseMatrix< T >::addMulTranspose ; (; linearalgebra::BaseVector * ; res, . const linearalgebra::BaseVector * ; v . ); const. inline . ◆ addTo(). template<typename T > . template<class Dest > . void sofa::linearalgebra::SparseMatrix< T >::addTo ; (; Dest * ; dest); const. inline . ◆ begin() [1/2]. template<typename T > . LineIterator sofa::linearalgebra::SparseMatrix< T >::begin ; (; ). inline . ◆ begin() [2/2]. template<typename T > . LineConstIterator sofa::linearalgebra::SparseMatrix< T >::begin ; (; ); const. inline . ◆ clear() [1/2]. template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clear ; (; ). inlineoverridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clear ; (; Index ; i, . Index ; j . ). inlineoverridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clearCol ; (; Index ; j). inlineoverridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clearRow ; (; Index ; i). inlineoverridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<typename T > . Index sofa::linearalgebra::SparseMatrix< T >::colSize ; (; void ; ); const. inlineoverridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ element(). template<typename T > . SReal sofa::linearalgebra::SparseMatrix< T >::element ; (; Index ; i, . Index ; j . ); const. inlineoverridevirtual . Read the value of the eleme",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:22041,Usability,clear,clearRow,22041,"<typename T > . template<class Dest > . void sofa::linearalgebra::SparseMatrix< T >::addTo ; (; Dest * ; dest); const. inline . ◆ begin() [1/2]. template<typename T > . LineIterator sofa::linearalgebra::SparseMatrix< T >::begin ; (; ). inline . ◆ begin() [2/2]. template<typename T > . LineConstIterator sofa::linearalgebra::SparseMatrix< T >::begin ; (; ); const. inline . ◆ clear() [1/2]. template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clear ; (; ). inlineoverridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clear ; (; Index ; i, . Index ; j . ). inlineoverridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clearCol ; (; Index ; j). inlineoverridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clearRow ; (; Index ; i). inlineoverridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<typename T > . Index sofa::linearalgebra::SparseMatrix< T >::colSize ; (; void ; ); const. inlineoverridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ element(). template<typename T > . SReal sofa::linearalgebra::SparseMatrix< T >::element ; (; Index ; i, . Index ; j . ); const. inlineoverridevirtual . Read the value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ end() [1/2]. template<typename T > . LineIterator sofa::linearalg",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:22122,Usability,clear,clearRow,22122,"SparseMatrix< T >::addTo ; (; Dest * ; dest); const. inline . ◆ begin() [1/2]. template<typename T > . LineIterator sofa::linearalgebra::SparseMatrix< T >::begin ; (; ). inline . ◆ begin() [2/2]. template<typename T > . LineConstIterator sofa::linearalgebra::SparseMatrix< T >::begin ; (; ); const. inline . ◆ clear() [1/2]. template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clear ; (; ). inlineoverridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clear ; (; Index ; i, . Index ; j . ). inlineoverridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clearCol ; (; Index ; j). inlineoverridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clearRow ; (; Index ; i). inlineoverridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<typename T > . Index sofa::linearalgebra::SparseMatrix< T >::colSize ; (; void ; ); const. inlineoverridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ element(). template<typename T > . SReal sofa::linearalgebra::SparseMatrix< T >::element ; (; Index ; i, . Index ; j . ); const. inlineoverridevirtual . Read the value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ end() [1/2]. template<typename T > . LineIterator sofa::linearalgebra::SparseMatrix< T >::end ; (; ). inline . ◆ end() [2/2]. templa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:22264,Usability,clear,clearRowCol,22264,"gin ; (; ). inline . ◆ begin() [2/2]. template<typename T > . LineConstIterator sofa::linearalgebra::SparseMatrix< T >::begin ; (; ); const. inline . ◆ clear() [1/2]. template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clear ; (; ). inlineoverridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clear ; (; Index ; i, . Index ; j . ). inlineoverridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clearCol ; (; Index ; j). inlineoverridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clearRow ; (; Index ; i). inlineoverridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<typename T > . Index sofa::linearalgebra::SparseMatrix< T >::colSize ; (; void ; ); const. inlineoverridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ element(). template<typename T > . SReal sofa::linearalgebra::SparseMatrix< T >::element ; (; Index ; i, . Index ; j . ); const. inlineoverridevirtual . Read the value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ end() [1/2]. template<typename T > . LineIterator sofa::linearalgebra::SparseMatrix< T >::end ; (; ). inline . ◆ end() [2/2]. template<typename T > . LineConstIterator sofa::linearalgebra::SparseMatrix< T >::end ; (; ); const. inline . ◆ equal(). template<typename T > . template<class M > ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:22348,Usability,clear,clearRowCol,22348,"tIterator sofa::linearalgebra::SparseMatrix< T >::begin ; (; ); const. inline . ◆ clear() [1/2]. template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clear ; (; ). inlineoverridevirtual . Reset all values to 0. ; Implements sofa::linearalgebra::BaseMatrix. ◆ clear() [2/2]. template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clear ; (; Index ; i, . Index ; j . ). inlineoverridevirtual . Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearCol(). template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clearCol ; (; Index ; j). inlineoverridevirtual . Reset the all values in column j to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRow(). template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clearRow ; (; Index ; i). inlineoverridevirtual . Reset all the values in row i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ clearRowCol(). template<typename T > . void sofa::linearalgebra::SparseMatrix< T >::clearRowCol ; (; Index ; i). inlineoverridevirtual . Reset the value of both row and column i to 0. ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ colSize(). template<typename T > . Index sofa::linearalgebra::SparseMatrix< T >::colSize ; (; void ; ); const. inlineoverridevirtual . Number of columns. ; Implements sofa::linearalgebra::BaseMatrix. ◆ element(). template<typename T > . SReal sofa::linearalgebra::SparseMatrix< T >::element ; (; Index ; i, . Index ; j . ); const. inlineoverridevirtual . Read the value of the element at row i, column j (using 0-based indices) ; Implements sofa::linearalgebra::BaseMatrix. ◆ end() [1/2]. template<typename T > . LineIterator sofa::linearalgebra::SparseMatrix< T >::end ; (; ). inline . ◆ end() [2/2]. template<typename T > . LineConstIterator sofa::linearalgebra::SparseMatrix< T >::end ; (; ); const. inline . ◆ equal(). template<typename T > . template<class M > . void sofa::linearalgebra::SparseMatrix< T >::equal ; (; const M & ;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix_product-members.html:300,Modifiability,inherit,inherited,300,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType > Member List . This is the complete list of members for sofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >, including all inherited members. computeIntersection()sofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >protected; computeProduct(bool forceComputeIntersection=false)sofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >; computeProductFromIntersection()sofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >protectedvirtual; computeRegularProduct()sofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >; getProductResult() constsofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >inline; Index typedefsofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >; invalidateIntersection()sofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >; LhsCleaned typedefsofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >; LhsScalar typedefsofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >; m_hasComputedIntersectionsofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >protected; m_intersectionABsofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >protected; m_lhssofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >; m_productResultsofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >protected; m_rhssofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >; ProductResult typedefsofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >; ResultCleaned typedefsofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >; ResultScalar typedefsofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >; RhsCleaned typedefsofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >; RhsScalar typedefsofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix_product-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix_product-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix_storage_order-members.html:284,Modifiability,inherit,inherited,284,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::SparseMatrixStorageOrder< TMatrix > Member List . This is the complete list of members for sofa::linearalgebra::SparseMatrixStorageOrder< TMatrix >, including all inherited members. buildOppositeOrder()sofa::linearalgebra::SparseMatrixStorageOrder< TMatrix >; buildOppositeOrder()sofa::linearalgebra::SparseMatrixStorageOrder< TMatrix >; buildOppositeOrder()sofa::linearalgebra::SparseMatrixStorageOrder< TMatrix >; buildOppositeOrder()sofa::linearalgebra::SparseMatrixStorageOrder< TMatrix >; buildOppositeOrder()sofa::linearalgebra::SparseMatrixStorageOrder< TMatrix >; getInnerIndices() constsofa::linearalgebra::SparseMatrixStorageOrder< TMatrix >inline; getOuterStarts() constsofa::linearalgebra::SparseMatrixStorageOrder< TMatrix >inline; getPermutations() constsofa::linearalgebra::SparseMatrixStorageOrder< TMatrix >inline; Index typedefsofa::linearalgebra::SparseMatrixStorageOrder< TMatrix >; SparseMatrixStorageOrder(const TMatrix *m)sofa::linearalgebra::SparseMatrixStorageOrder< TMatrix >inlineexplicit. Generated on Mon Nov 11 2024 03:32:16 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix_storage_order-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix_storage_order-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix_storage_order_1_1_inner_iterator-members.html:314,Modifiability,inherit,inherited,314,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::linearalgebra::SparseMatrixStorageOrder< TMatrix >::InnerIterator Member List . This is the complete list of members for sofa::linearalgebra::SparseMatrixStorageOrder< TMatrix >::InnerIterator, including all inherited members. col() constsofa::linearalgebra::SparseMatrixStorageOrder< TMatrix >::InnerIterator; col() constsofa::linearalgebra::SparseMatrixStorageOrder< TMatrix >::InnerIterator; col() constsofa::linearalgebra::SparseMatrixStorageOrder< TMatrix >::InnerIterator; col() constsofa::linearalgebra::SparseMatrixStorageOrder< TMatrix >::InnerIterator; col() constsofa::linearalgebra::SparseMatrixStorageOrder< TMatrix >::InnerIterator; col() constsofa::linearalgebra::SparseMatrixStorageOrder< TMatrix >::InnerIterator; col() constsofa::linearalgebra::SparseMatrixStorageOrder< TMatrix >::InnerIterator; col() constsofa::linearalgebra::SparseMatrixStorageOrder< TMatrix >::InnerIterator; col() constsofa::linearalgebra::SparseMatrixStorageOrder< TMatrix >::InnerIterator; InnerIterator()=deletesofa::linearalgebra::SparseMatrixStorageOrder< TMatrix >::InnerIterator; InnerIterator(const SparseMatrixStorageOrder< TMatrix > &mat, sofa::Index outer)sofa::linearalgebra::SparseMatrixStorageOrder< TMatrix >::InnerIteratorinline; operator bool() constsofa::linearalgebra::SparseMatrixStorageOrder< TMatrix >::InnerIteratorinlineexplicit; operator+(const typename TMatrix::Index i)sofa::linearalgebra::SparseMatrixStorageOrder< TMatrix >::InnerIteratorinline; operator++()sofa::linearalgebra::SparseMatrixStorageOrder< TMatrix >::InnerIteratorinline; operator+=(const typename TMatrix::Index i)sofa::linearalgebra::SparseMatrixStorageOrder< TMatrix >::InnerIteratorinline; row() constsofa::linearalgebra::SparseMatrixStorageOrder< TMatrix >::InnerIterator; row() constsofa::linearalgebra::SparseMatrixStorageOrder< TMatrix >::InnerIterator; row() constsofa::linearalgebra::SparseMatrixStor",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix_storage_order_1_1_inner_iterator-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix_storage_order_1_1_inner_iterator-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations-members.html:3008,Deployability,integrat,integrateVelocity,3008,"e=true)sofa::simulation::common::MechanicalOperations; computeEnergy(SReal &kineticEnergy, SReal &potentialEnergy)sofa::simulation::common::MechanicalOperations; computeForce(core::MultiVecDerivId result, bool clear=true, bool accumulate=true)sofa::simulation::common::MechanicalOperations; computeForce(SReal t, core::MultiVecDerivId f, core::MultiVecCoordId x, core::MultiVecDerivId v)sofa::simulation::common::MechanicalOperations; cparamssofa::simulation::common::MechanicalOperations; ctxsofa::simulation::common::MechanicalOperations; executeVisitorsofa::simulation::common::MechanicalOperationsprotected; getMatrixDimension(sofa::Size *const, sofa::Size *const, sofa::core::behavior::MultiMatrixAccessor *matrix=nullptr)sofa::simulation::common::MechanicalOperations; getMatrixDimension(sofa::core::behavior::MultiMatrixAccessor *matrix)sofa::simulation::common::MechanicalOperationsinline; hasShownMissingLinearSolverMapsofa::simulation::common::MechanicalOperationsprotectedstatic; integrateVelocity(core::MultiVecDerivId res, core::ConstMultiVecCoordId x, core::ConstMultiVecDerivId v, SReal dt)sofa::simulation::common::MechanicalOperations; kFactsofa::simulation::common::MechanicalOperations; MechanicalOperations(const core::MechanicalParams *mparams, core::objectmodel::BaseContext *ctx, bool precomputedTraversalOrder=false)sofa::simulation::common::MechanicalOperations; MechanicalOperations(const core::ExecParams *params, core::objectmodel::BaseContext *ctx, bool precomputedTraversalOrder=false)sofa::simulation::common::MechanicalOperations; mparamssofa::simulation::common::MechanicalOperations; multiVector2BaseVector(core::ConstMultiVecId src, linearalgebra::BaseVector *dest, const sofa::core::behavior::MultiMatrixAccessor *matrix)sofa::simulation::common::MechanicalOperations; multiVectorPeqBaseVector(core::MultiVecDerivId dest, const linearalgebra::BaseVector *src, const sofa::core::behavior::MultiMatrixAccessor *matrix)sofa::simulation::common::MechanicalOperations; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations-members.html:3008,Integrability,integrat,integrateVelocity,3008,"e=true)sofa::simulation::common::MechanicalOperations; computeEnergy(SReal &kineticEnergy, SReal &potentialEnergy)sofa::simulation::common::MechanicalOperations; computeForce(core::MultiVecDerivId result, bool clear=true, bool accumulate=true)sofa::simulation::common::MechanicalOperations; computeForce(SReal t, core::MultiVecDerivId f, core::MultiVecCoordId x, core::MultiVecDerivId v)sofa::simulation::common::MechanicalOperations; cparamssofa::simulation::common::MechanicalOperations; ctxsofa::simulation::common::MechanicalOperations; executeVisitorsofa::simulation::common::MechanicalOperationsprotected; getMatrixDimension(sofa::Size *const, sofa::Size *const, sofa::core::behavior::MultiMatrixAccessor *matrix=nullptr)sofa::simulation::common::MechanicalOperations; getMatrixDimension(sofa::core::behavior::MultiMatrixAccessor *matrix)sofa::simulation::common::MechanicalOperationsinline; hasShownMissingLinearSolverMapsofa::simulation::common::MechanicalOperationsprotectedstatic; integrateVelocity(core::MultiVecDerivId res, core::ConstMultiVecCoordId x, core::ConstMultiVecDerivId v, SReal dt)sofa::simulation::common::MechanicalOperations; kFactsofa::simulation::common::MechanicalOperations; MechanicalOperations(const core::MechanicalParams *mparams, core::objectmodel::BaseContext *ctx, bool precomputedTraversalOrder=false)sofa::simulation::common::MechanicalOperations; MechanicalOperations(const core::ExecParams *params, core::objectmodel::BaseContext *ctx, bool precomputedTraversalOrder=false)sofa::simulation::common::MechanicalOperations; mparamssofa::simulation::common::MechanicalOperations; multiVector2BaseVector(core::ConstMultiVecId src, linearalgebra::BaseVector *dest, const sofa::core::behavior::MultiMatrixAccessor *matrix)sofa::simulation::common::MechanicalOperations; multiVectorPeqBaseVector(core::MultiVecDerivId dest, const linearalgebra::BaseVector *src, const sofa::core::behavior::MultiMatrixAccessor *matrix)sofa::simulation::common::MechanicalOperations; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations-members.html:264,Modifiability,inherit,inherited,264,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::common::MechanicalOperations Member List . This is the complete list of members for sofa::simulation::common::MechanicalOperations, including all inherited members. accFromF(core::MultiVecDerivId a, core::ConstMultiVecDerivId f)sofa::simulation::common::MechanicalOperations; addMBK_ToMatrix(const sofa::core::behavior::MultiMatrixAccessor *matrix, SReal mFact, SReal bFact, SReal kFact)sofa::simulation::common::MechanicalOperations; addMBKdx(core::MultiVecDerivId df, SReal m, SReal b, SReal k, bool clear=true, bool accumulate=true)sofa::simulation::common::MechanicalOperations; addMBKv(core::MultiVecDerivId df, SReal m, SReal b, SReal k, bool clear=true, bool accumulate=true)sofa::simulation::common::MechanicalOperations; addMdx(core::MultiVecDerivId res, core::MultiVecDerivId dx, SReal factor=1.0)sofa::simulation::common::MechanicalOperations; addSeparateGravity(SReal dt, core::MultiVecDerivId result=core::VecDerivId::velocity())sofa::simulation::common::MechanicalOperations; baseVector2MultiVector(const linearalgebra::BaseVector *src, core::MultiVecId dest, const sofa::core::behavior::MultiMatrixAccessor *matrix)sofa::simulation::common::MechanicalOperations; bFactsofa::simulation::common::MechanicalOperations; computeAcc(SReal t, core::MultiVecDerivId a, core::MultiVecCoordId x, core::MultiVecDerivId v)sofa::simulation::common::MechanicalOperations; computeContactAcc(SReal t, core::MultiVecDerivId a, core::MultiVecCoordId x, core::MultiVecDerivId v)sofa::simulation::common::MechanicalOperations; computeContactDf(core::MultiVecDerivId df)sofa::simulation::common::MechanicalOperations; computeContactForce(core::MultiVecDerivId result)sofa::simulation::common::MechanicalOperations; computeDf(core::MultiVecDerivId df, bool clear=true, bool accumulate=true)sofa::simulation::common::MechanicalOperations; computeDfV(core::MultiVecDerivId df, bool clear=true",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations-members.html:620,Usability,clear,clear,620,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::common::MechanicalOperations Member List . This is the complete list of members for sofa::simulation::common::MechanicalOperations, including all inherited members. accFromF(core::MultiVecDerivId a, core::ConstMultiVecDerivId f)sofa::simulation::common::MechanicalOperations; addMBK_ToMatrix(const sofa::core::behavior::MultiMatrixAccessor *matrix, SReal mFact, SReal bFact, SReal kFact)sofa::simulation::common::MechanicalOperations; addMBKdx(core::MultiVecDerivId df, SReal m, SReal b, SReal k, bool clear=true, bool accumulate=true)sofa::simulation::common::MechanicalOperations; addMBKv(core::MultiVecDerivId df, SReal m, SReal b, SReal k, bool clear=true, bool accumulate=true)sofa::simulation::common::MechanicalOperations; addMdx(core::MultiVecDerivId res, core::MultiVecDerivId dx, SReal factor=1.0)sofa::simulation::common::MechanicalOperations; addSeparateGravity(SReal dt, core::MultiVecDerivId result=core::VecDerivId::velocity())sofa::simulation::common::MechanicalOperations; baseVector2MultiVector(const linearalgebra::BaseVector *src, core::MultiVecId dest, const sofa::core::behavior::MultiMatrixAccessor *matrix)sofa::simulation::common::MechanicalOperations; bFactsofa::simulation::common::MechanicalOperations; computeAcc(SReal t, core::MultiVecDerivId a, core::MultiVecCoordId x, core::MultiVecDerivId v)sofa::simulation::common::MechanicalOperations; computeContactAcc(SReal t, core::MultiVecDerivId a, core::MultiVecCoordId x, core::MultiVecDerivId v)sofa::simulation::common::MechanicalOperations; computeContactDf(core::MultiVecDerivId df)sofa::simulation::common::MechanicalOperations; computeContactForce(core::MultiVecDerivId result)sofa::simulation::common::MechanicalOperations; computeDf(core::MultiVecDerivId df, bool clear=true, bool accumulate=true)sofa::simulation::common::MechanicalOperations; computeDfV(core::MultiVecDerivId df, bool clear=true",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations-members.html:767,Usability,clear,clear,767,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::common::MechanicalOperations Member List . This is the complete list of members for sofa::simulation::common::MechanicalOperations, including all inherited members. accFromF(core::MultiVecDerivId a, core::ConstMultiVecDerivId f)sofa::simulation::common::MechanicalOperations; addMBK_ToMatrix(const sofa::core::behavior::MultiMatrixAccessor *matrix, SReal mFact, SReal bFact, SReal kFact)sofa::simulation::common::MechanicalOperations; addMBKdx(core::MultiVecDerivId df, SReal m, SReal b, SReal k, bool clear=true, bool accumulate=true)sofa::simulation::common::MechanicalOperations; addMBKv(core::MultiVecDerivId df, SReal m, SReal b, SReal k, bool clear=true, bool accumulate=true)sofa::simulation::common::MechanicalOperations; addMdx(core::MultiVecDerivId res, core::MultiVecDerivId dx, SReal factor=1.0)sofa::simulation::common::MechanicalOperations; addSeparateGravity(SReal dt, core::MultiVecDerivId result=core::VecDerivId::velocity())sofa::simulation::common::MechanicalOperations; baseVector2MultiVector(const linearalgebra::BaseVector *src, core::MultiVecId dest, const sofa::core::behavior::MultiMatrixAccessor *matrix)sofa::simulation::common::MechanicalOperations; bFactsofa::simulation::common::MechanicalOperations; computeAcc(SReal t, core::MultiVecDerivId a, core::MultiVecCoordId x, core::MultiVecDerivId v)sofa::simulation::common::MechanicalOperations; computeContactAcc(SReal t, core::MultiVecDerivId a, core::MultiVecCoordId x, core::MultiVecDerivId v)sofa::simulation::common::MechanicalOperations; computeContactDf(core::MultiVecDerivId df)sofa::simulation::common::MechanicalOperations; computeContactForce(core::MultiVecDerivId result)sofa::simulation::common::MechanicalOperations; computeDf(core::MultiVecDerivId df, bool clear=true, bool accumulate=true)sofa::simulation::common::MechanicalOperations; computeDfV(core::MultiVecDerivId df, bool clear=true",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations-members.html:1868,Usability,clear,clear,1868,"0)sofa::simulation::common::MechanicalOperations; addSeparateGravity(SReal dt, core::MultiVecDerivId result=core::VecDerivId::velocity())sofa::simulation::common::MechanicalOperations; baseVector2MultiVector(const linearalgebra::BaseVector *src, core::MultiVecId dest, const sofa::core::behavior::MultiMatrixAccessor *matrix)sofa::simulation::common::MechanicalOperations; bFactsofa::simulation::common::MechanicalOperations; computeAcc(SReal t, core::MultiVecDerivId a, core::MultiVecCoordId x, core::MultiVecDerivId v)sofa::simulation::common::MechanicalOperations; computeContactAcc(SReal t, core::MultiVecDerivId a, core::MultiVecCoordId x, core::MultiVecDerivId v)sofa::simulation::common::MechanicalOperations; computeContactDf(core::MultiVecDerivId df)sofa::simulation::common::MechanicalOperations; computeContactForce(core::MultiVecDerivId result)sofa::simulation::common::MechanicalOperations; computeDf(core::MultiVecDerivId df, bool clear=true, bool accumulate=true)sofa::simulation::common::MechanicalOperations; computeDfV(core::MultiVecDerivId df, bool clear=true",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations-members.html:1991,Usability,clear,clear,1991,"eal dt, core::MultiVecDerivId result=core::VecDerivId::velocity())sofa::simulation::common::MechanicalOperations; baseVector2MultiVector(const linearalgebra::BaseVector *src, core::MultiVecId dest, const sofa::core::behavior::MultiMatrixAccessor *matrix)sofa::simulation::common::MechanicalOperations; bFactsofa::simulation::common::MechanicalOperations; computeAcc(SReal t, core::MultiVecDerivId a, core::MultiVecCoordId x, core::MultiVecDerivId v)sofa::simulation::common::MechanicalOperations; computeContactAcc(SReal t, core::MultiVecDerivId a, core::MultiVecCoordId x, core::MultiVecDerivId v)sofa::simulation::common::MechanicalOperations; computeContactDf(core::MultiVecDerivId df)sofa::simulation::common::MechanicalOperations; computeContactForce(core::MultiVecDerivId result)sofa::simulation::common::MechanicalOperations; computeDf(core::MultiVecDerivId df, bool clear=true, bool accumulate=true)sofa::simulation::common::MechanicalOperations; computeDfV(core::MultiVecDerivId df, bool clear=true, bool accumulate=true)sofa::simulation::common::MechanicalOperations; computeEnergy(SReal &kineticEnergy, SReal &potentialEnergy)sofa::simulation::common::MechanicalOperations; computeForce(core::MultiVecDerivId result, bool clear=true, bool accumulate=true)sofa::simulation::common::MechanicalOperations; computeForce(SReal t, core::MultiVecDerivId f, core::MultiVecCoordId x, core::MultiVecDerivId v)sofa::simulation::common::MechanicalOperations; cparamssofa::simulation::common::MechanicalOperations; ctxsofa::simulation::common::MechanicalOperations; executeVisitorsofa::simulation::common::MechanicalOperationsprotected; getMatrixDimension(sofa::Size *const, sofa::Size *const, sofa::core::behavior::MultiMatrixAccessor *matrix=nullptr)sofa::simulation::common::MechanicalOperations; getMatrixDimension(sofa::core::behavior::MultiMatrixAccessor *matrix)sofa::simulation::common::MechanicalOperationsinline; hasShownMissingLinearSolverMapsofa::simulation::common::MechanicalOperationspro",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations-members.html:2227,Usability,clear,clear,2227,"xAccessor *matrix)sofa::simulation::common::MechanicalOperations; bFactsofa::simulation::common::MechanicalOperations; computeAcc(SReal t, core::MultiVecDerivId a, core::MultiVecCoordId x, core::MultiVecDerivId v)sofa::simulation::common::MechanicalOperations; computeContactAcc(SReal t, core::MultiVecDerivId a, core::MultiVecCoordId x, core::MultiVecDerivId v)sofa::simulation::common::MechanicalOperations; computeContactDf(core::MultiVecDerivId df)sofa::simulation::common::MechanicalOperations; computeContactForce(core::MultiVecDerivId result)sofa::simulation::common::MechanicalOperations; computeDf(core::MultiVecDerivId df, bool clear=true, bool accumulate=true)sofa::simulation::common::MechanicalOperations; computeDfV(core::MultiVecDerivId df, bool clear=true, bool accumulate=true)sofa::simulation::common::MechanicalOperations; computeEnergy(SReal &kineticEnergy, SReal &potentialEnergy)sofa::simulation::common::MechanicalOperations; computeForce(core::MultiVecDerivId result, bool clear=true, bool accumulate=true)sofa::simulation::common::MechanicalOperations; computeForce(SReal t, core::MultiVecDerivId f, core::MultiVecCoordId x, core::MultiVecDerivId v)sofa::simulation::common::MechanicalOperations; cparamssofa::simulation::common::MechanicalOperations; ctxsofa::simulation::common::MechanicalOperations; executeVisitorsofa::simulation::common::MechanicalOperationsprotected; getMatrixDimension(sofa::Size *const, sofa::Size *const, sofa::core::behavior::MultiMatrixAccessor *matrix=nullptr)sofa::simulation::common::MechanicalOperations; getMatrixDimension(sofa::core::behavior::MultiMatrixAccessor *matrix)sofa::simulation::common::MechanicalOperationsinline; hasShownMissingLinearSolverMapsofa::simulation::common::MechanicalOperationsprotectedstatic; integrateVelocity(core::MultiVecDerivId res, core::ConstMultiVecCoordId x, core::ConstMultiVecDerivId v, SReal dt)sofa::simulation::common::MechanicalOperations; kFactsofa::simulation::common::MechanicalOperations; Mechani",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html:753,Availability,error,error,753,"﻿. SOFA API: sofa::simulation::common::MechanicalOperations Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Protected Attributes |; Static Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::simulation::common::MechanicalOperations Class Reference . #include <MechanicalOperations.h>. Public Attributes; core::MechanicalParams mparams;  ; core::ConstraintParams cparams;  ; core::objectmodel::BaseContext * ctx;  . Protected Attributes; VisitorExecuteFunc executeVisitor;  . Static Protected Attributes; static std::map< core::objectmodel::BaseContext *, bool > hasShownMissingLinearSolverMap;  Store if the ""missing linear solver"" error message has already been shown for a given context. More...;  . Public Member Functions;  MechanicalOperations (const core::MechanicalParams *mparams, core::objectmodel::BaseContext *ctx, bool precomputedTraversalOrder=false);  ;  MechanicalOperations (const core::ExecParams *params, core::objectmodel::BaseContext *ctx, bool precomputedTraversalOrder=false);  ; core::MechanicalParams * operator-> ();  ;  operator const core::MechanicalParams * ();  ; Mechanical Vector operations; void propagateDx (core::MultiVecDerivId dx, bool ignore_flag=false);  Propagate the given displacement through all mappings. More...;  ; void propagateDxAndResetDf (core::MultiVecDerivId dx, core::MultiVecDerivId df);  Propagate the given displacement through all mappings and reset the current force delta. More...;  ; void propagateX (core::MultiVecCoordId x);  Propagate the given position through all mappings. More...;  ; void propagateV (core::MultiVecDerivId v);  Propagate the given velocity through all mappings. More...;  ; void propagateXAndV (core::MultiVecCoordId x, core::MultiVecDerivId v);  Propagate the given position and velocity through all mappings. More...;  ; void propagateXAndResetF (core::MultiVecCoordId x, core::MultiVecDerivId f",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html:7838,Availability,error,error,7838,"ehavior::LinearSolver *linearSolver);  ; void solveSystem (core::behavior::LinearSolver *linearSolver);  ; void print (std::ostream &out, core::behavior::LinearSolver *linearSolver);  ;  SOFA_ATTRIBUTE_DEPRECATED_MECHANICALOPERATIONS_RESETSYSTEM () void m_resetSystem();  ;  SOFA_ATTRIBUTE_DEPRECATED_MECHANICALOPERATIONS_SETSYSTEMMBKMATRIX () void m_setSystemMBKMatrix(SReal mFact;  . Attribute details. ◆ bFact. SReal sofa::simulation::common::MechanicalOperations::bFact. ◆ cparams. core::ConstraintParams sofa::simulation::common::MechanicalOperations::cparams. ◆ ctx. core::objectmodel::BaseContext* sofa::simulation::common::MechanicalOperations::ctx. ◆ executeVisitor. VisitorExecuteFunc sofa::simulation::common::MechanicalOperations::executeVisitor. protected . ◆ hasShownMissingLinearSolverMap. std::map< core::objectmodel::BaseContext *, bool > sofa::simulation::common::MechanicalOperations::hasShownMissingLinearSolverMap. staticprotected . Store if the ""missing linear solver"" error message has already been shown for a given context. . ◆ kFact. SReal SReal sofa::simulation::common::MechanicalOperations::kFact. ◆ mparams. core::MechanicalParams sofa::simulation::common::MechanicalOperations::mparams. Constructor details. ◆ MechanicalOperations() [1/2]. sofa::simulation::common::MechanicalOperations::MechanicalOperations ; (; const core::MechanicalParams * ; mparams, . core::objectmodel::BaseContext * ; ctx, . bool ; precomputedTraversalOrder = false . ). ◆ MechanicalOperations() [2/2]. sofa::simulation::common::MechanicalOperations::MechanicalOperations ; (; const core::ExecParams * ; params, . core::objectmodel::BaseContext * ; ctx, . bool ; precomputedTraversalOrder = false . ). Function details. ◆ accFromF(). void sofa::simulation::common::MechanicalOperations::accFromF ; (; core::MultiVecDerivId ; a, . core::ConstMultiVecDerivId ; f . ). a = M^-1 . f ; Parameters. fa = M^-1 . f . ◆ addMBK_ToMatrix(). void sofa::simulation::common::MechanicalOperations::addMBK_ToMat",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html:2815,Deployability,integrat,integrateVelocity,2815,"tion and velocity through all mappings. More...;  ; void propagateXAndResetF (core::MultiVecCoordId x, core::MultiVecDerivId f);  Propagate the given position through all mappings and reset the current force delta. More...;  ; void projectPosition (core::MultiVecCoordId x, SReal time=0.0);  Apply projective constraints to the given position vector. More...;  ; void projectVelocity (core::MultiVecDerivId v, SReal time=0.0);  Apply projective constraints to the given velocity vector. More...;  ; void projectResponse (core::MultiVecDerivId dx, double **W=nullptr);  Apply projective constraints to the given vector. More...;  ; void projectPositionAndVelocity (core::MultiVecCoordId x, core::MultiVecDerivId v, double time=0.0);  Apply projective constraints to the given position and velocity vectors. More...;  ; void addMdx (core::MultiVecDerivId res, core::MultiVecDerivId dx, SReal factor=1.0);  res += factor M.dx More...;  ; void integrateVelocity (core::MultiVecDerivId res, core::ConstMultiVecCoordId x, core::ConstMultiVecDerivId v, SReal dt);  res = x + v.dt More...;  ; void accFromF (core::MultiVecDerivId a, core::ConstMultiVecDerivId f);  ; void computeEnergy (SReal &kineticEnergy, SReal &potentialEnergy);  Compute Energy. More...;  ; void computeForce (core::MultiVecDerivId result, bool clear=true, bool accumulate=true);  Compute the current force (given the latest propagated position and velocity) More...;  ; void computeDf (core::MultiVecDerivId df, bool clear=true, bool accumulate=true);  Compute the current force delta (given the latest propagated displacement) More...;  ; void computeDfV (core::MultiVecDerivId df, bool clear=true, bool accumulate=true);  Compute the current force delta (given the latest propagated velocity) More...;  ; void addMBKdx (core::MultiVecDerivId df, SReal m, SReal b, SReal k, bool clear=true, bool accumulate=true);  accumulate $ df += (m M + b B + k K) dx $ (given the latest propagated displacement) More...;  ; void addMBKv (core::Mu",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html:12574,Deployability,integrat,integrateVelocity,12574,"o the given velocity vector. . ◆ computeForce() [1/2]. void sofa::simulation::common::MechanicalOperations::computeForce ; (; core::MultiVecDerivId ; result, . bool ; clear = true, . bool ; accumulate = true . ). Compute the current force (given the latest propagated position and velocity) . ◆ computeForce() [2/2]. void sofa::simulation::common::MechanicalOperations::computeForce ; (; SReal ; t, . core::MultiVecDerivId ; f, . core::MultiVecCoordId ; x, . core::MultiVecDerivId ; v . ). Compute f(x,v) at time t. Parameters x and v not const due to propagation through mappings. . ◆ getMatrixDimension() [1/2]. void sofa::simulation::common::MechanicalOperations::getMatrixDimension ; (; sofa::core::behavior::MultiMatrixAccessor * ; matrix). inline . ◆ getMatrixDimension() [2/2]. void sofa::simulation::common::MechanicalOperations::getMatrixDimension ; (; sofa::Size * const ; nbRow, . sofa::Size * const ; nbCol, . sofa::core::behavior::MultiMatrixAccessor * ; matrix = nullptr . ). ◆ integrateVelocity(). void sofa::simulation::common::MechanicalOperations::integrateVelocity ; (; core::MultiVecDerivId ; res, . core::ConstMultiVecCoordId ; x, . core::ConstMultiVecDerivId ; v, . SReal ; dt . ). res = x + v.dt . ◆ multiVector2BaseVector(). void sofa::simulation::common::MechanicalOperations::multiVector2BaseVector ; (; core::ConstMultiVecId ; src, . linearalgebra::BaseVector * ; dest, . const sofa::core::behavior::MultiMatrixAccessor * ; matrix . ). ◆ multiVectorPeqBaseVector(). void sofa::simulation::common::MechanicalOperations::multiVectorPeqBaseVector ; (; core::MultiVecDerivId ; dest, . const linearalgebra::BaseVector * ; src, . const sofa::core::behavior::MultiMatrixAccessor * ; matrix . ). ◆ operator const core::MechanicalParams *(). sofa::simulation::common::MechanicalOperations::operator const core::MechanicalParams * ; (; ). inline . ◆ operator->(). core::MechanicalParams* sofa::simulation::common::MechanicalOperations::operator-> ; (; ). inline . ◆ print() [1/2]. voi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html:12648,Deployability,integrat,integrateVelocity,12648,":simulation::common::MechanicalOperations::computeForce ; (; core::MultiVecDerivId ; result, . bool ; clear = true, . bool ; accumulate = true . ). Compute the current force (given the latest propagated position and velocity) . ◆ computeForce() [2/2]. void sofa::simulation::common::MechanicalOperations::computeForce ; (; SReal ; t, . core::MultiVecDerivId ; f, . core::MultiVecCoordId ; x, . core::MultiVecDerivId ; v . ). Compute f(x,v) at time t. Parameters x and v not const due to propagation through mappings. . ◆ getMatrixDimension() [1/2]. void sofa::simulation::common::MechanicalOperations::getMatrixDimension ; (; sofa::core::behavior::MultiMatrixAccessor * ; matrix). inline . ◆ getMatrixDimension() [2/2]. void sofa::simulation::common::MechanicalOperations::getMatrixDimension ; (; sofa::Size * const ; nbRow, . sofa::Size * const ; nbCol, . sofa::core::behavior::MultiMatrixAccessor * ; matrix = nullptr . ). ◆ integrateVelocity(). void sofa::simulation::common::MechanicalOperations::integrateVelocity ; (; core::MultiVecDerivId ; res, . core::ConstMultiVecCoordId ; x, . core::ConstMultiVecDerivId ; v, . SReal ; dt . ). res = x + v.dt . ◆ multiVector2BaseVector(). void sofa::simulation::common::MechanicalOperations::multiVector2BaseVector ; (; core::ConstMultiVecId ; src, . linearalgebra::BaseVector * ; dest, . const sofa::core::behavior::MultiMatrixAccessor * ; matrix . ). ◆ multiVectorPeqBaseVector(). void sofa::simulation::common::MechanicalOperations::multiVectorPeqBaseVector ; (; core::MultiVecDerivId ; dest, . const linearalgebra::BaseVector * ; src, . const sofa::core::behavior::MultiMatrixAccessor * ; matrix . ). ◆ operator const core::MechanicalParams *(). sofa::simulation::common::MechanicalOperations::operator const core::MechanicalParams * ; (; ). inline . ◆ operator->(). core::MechanicalParams* sofa::simulation::common::MechanicalOperations::operator-> ; (; ). inline . ◆ print() [1/2]. void sofa::simulation::common::MechanicalOperations::print ; (; core",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html:759,Integrability,message,message,759,"﻿. SOFA API: sofa::simulation::common::MechanicalOperations Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Protected Attributes |; Static Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::simulation::common::MechanicalOperations Class Reference . #include <MechanicalOperations.h>. Public Attributes; core::MechanicalParams mparams;  ; core::ConstraintParams cparams;  ; core::objectmodel::BaseContext * ctx;  . Protected Attributes; VisitorExecuteFunc executeVisitor;  . Static Protected Attributes; static std::map< core::objectmodel::BaseContext *, bool > hasShownMissingLinearSolverMap;  Store if the ""missing linear solver"" error message has already been shown for a given context. More...;  . Public Member Functions;  MechanicalOperations (const core::MechanicalParams *mparams, core::objectmodel::BaseContext *ctx, bool precomputedTraversalOrder=false);  ;  MechanicalOperations (const core::ExecParams *params, core::objectmodel::BaseContext *ctx, bool precomputedTraversalOrder=false);  ; core::MechanicalParams * operator-> ();  ;  operator const core::MechanicalParams * ();  ; Mechanical Vector operations; void propagateDx (core::MultiVecDerivId dx, bool ignore_flag=false);  Propagate the given displacement through all mappings. More...;  ; void propagateDxAndResetDf (core::MultiVecDerivId dx, core::MultiVecDerivId df);  Propagate the given displacement through all mappings and reset the current force delta. More...;  ; void propagateX (core::MultiVecCoordId x);  Propagate the given position through all mappings. More...;  ; void propagateV (core::MultiVecDerivId v);  Propagate the given velocity through all mappings. More...;  ; void propagateXAndV (core::MultiVecCoordId x, core::MultiVecDerivId v);  Propagate the given position and velocity through all mappings. More...;  ; void propagateXAndResetF (core::MultiVecCoordId x, core::MultiVecDerivId f",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html:2815,Integrability,integrat,integrateVelocity,2815,"tion and velocity through all mappings. More...;  ; void propagateXAndResetF (core::MultiVecCoordId x, core::MultiVecDerivId f);  Propagate the given position through all mappings and reset the current force delta. More...;  ; void projectPosition (core::MultiVecCoordId x, SReal time=0.0);  Apply projective constraints to the given position vector. More...;  ; void projectVelocity (core::MultiVecDerivId v, SReal time=0.0);  Apply projective constraints to the given velocity vector. More...;  ; void projectResponse (core::MultiVecDerivId dx, double **W=nullptr);  Apply projective constraints to the given vector. More...;  ; void projectPositionAndVelocity (core::MultiVecCoordId x, core::MultiVecDerivId v, double time=0.0);  Apply projective constraints to the given position and velocity vectors. More...;  ; void addMdx (core::MultiVecDerivId res, core::MultiVecDerivId dx, SReal factor=1.0);  res += factor M.dx More...;  ; void integrateVelocity (core::MultiVecDerivId res, core::ConstMultiVecCoordId x, core::ConstMultiVecDerivId v, SReal dt);  res = x + v.dt More...;  ; void accFromF (core::MultiVecDerivId a, core::ConstMultiVecDerivId f);  ; void computeEnergy (SReal &kineticEnergy, SReal &potentialEnergy);  Compute Energy. More...;  ; void computeForce (core::MultiVecDerivId result, bool clear=true, bool accumulate=true);  Compute the current force (given the latest propagated position and velocity) More...;  ; void computeDf (core::MultiVecDerivId df, bool clear=true, bool accumulate=true);  Compute the current force delta (given the latest propagated displacement) More...;  ; void computeDfV (core::MultiVecDerivId df, bool clear=true, bool accumulate=true);  Compute the current force delta (given the latest propagated velocity) More...;  ; void addMBKdx (core::MultiVecDerivId df, SReal m, SReal b, SReal k, bool clear=true, bool accumulate=true);  accumulate $ df += (m M + b B + k K) dx $ (given the latest propagated displacement) More...;  ; void addMBKv (core::Mu",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html:7844,Integrability,message,message,7844,"ehavior::LinearSolver *linearSolver);  ; void solveSystem (core::behavior::LinearSolver *linearSolver);  ; void print (std::ostream &out, core::behavior::LinearSolver *linearSolver);  ;  SOFA_ATTRIBUTE_DEPRECATED_MECHANICALOPERATIONS_RESETSYSTEM () void m_resetSystem();  ;  SOFA_ATTRIBUTE_DEPRECATED_MECHANICALOPERATIONS_SETSYSTEMMBKMATRIX () void m_setSystemMBKMatrix(SReal mFact;  . Attribute details. ◆ bFact. SReal sofa::simulation::common::MechanicalOperations::bFact. ◆ cparams. core::ConstraintParams sofa::simulation::common::MechanicalOperations::cparams. ◆ ctx. core::objectmodel::BaseContext* sofa::simulation::common::MechanicalOperations::ctx. ◆ executeVisitor. VisitorExecuteFunc sofa::simulation::common::MechanicalOperations::executeVisitor. protected . ◆ hasShownMissingLinearSolverMap. std::map< core::objectmodel::BaseContext *, bool > sofa::simulation::common::MechanicalOperations::hasShownMissingLinearSolverMap. staticprotected . Store if the ""missing linear solver"" error message has already been shown for a given context. . ◆ kFact. SReal SReal sofa::simulation::common::MechanicalOperations::kFact. ◆ mparams. core::MechanicalParams sofa::simulation::common::MechanicalOperations::mparams. Constructor details. ◆ MechanicalOperations() [1/2]. sofa::simulation::common::MechanicalOperations::MechanicalOperations ; (; const core::MechanicalParams * ; mparams, . core::objectmodel::BaseContext * ; ctx, . bool ; precomputedTraversalOrder = false . ). ◆ MechanicalOperations() [2/2]. sofa::simulation::common::MechanicalOperations::MechanicalOperations ; (; const core::ExecParams * ; params, . core::objectmodel::BaseContext * ; ctx, . bool ; precomputedTraversalOrder = false . ). Function details. ◆ accFromF(). void sofa::simulation::common::MechanicalOperations::accFromF ; (; core::MultiVecDerivId ; a, . core::ConstMultiVecDerivId ; f . ). a = M^-1 . f ; Parameters. fa = M^-1 . f . ◆ addMBK_ToMatrix(). void sofa::simulation::common::MechanicalOperations::addMBK_ToMat",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html:12574,Integrability,integrat,integrateVelocity,12574,"o the given velocity vector. . ◆ computeForce() [1/2]. void sofa::simulation::common::MechanicalOperations::computeForce ; (; core::MultiVecDerivId ; result, . bool ; clear = true, . bool ; accumulate = true . ). Compute the current force (given the latest propagated position and velocity) . ◆ computeForce() [2/2]. void sofa::simulation::common::MechanicalOperations::computeForce ; (; SReal ; t, . core::MultiVecDerivId ; f, . core::MultiVecCoordId ; x, . core::MultiVecDerivId ; v . ). Compute f(x,v) at time t. Parameters x and v not const due to propagation through mappings. . ◆ getMatrixDimension() [1/2]. void sofa::simulation::common::MechanicalOperations::getMatrixDimension ; (; sofa::core::behavior::MultiMatrixAccessor * ; matrix). inline . ◆ getMatrixDimension() [2/2]. void sofa::simulation::common::MechanicalOperations::getMatrixDimension ; (; sofa::Size * const ; nbRow, . sofa::Size * const ; nbCol, . sofa::core::behavior::MultiMatrixAccessor * ; matrix = nullptr . ). ◆ integrateVelocity(). void sofa::simulation::common::MechanicalOperations::integrateVelocity ; (; core::MultiVecDerivId ; res, . core::ConstMultiVecCoordId ; x, . core::ConstMultiVecDerivId ; v, . SReal ; dt . ). res = x + v.dt . ◆ multiVector2BaseVector(). void sofa::simulation::common::MechanicalOperations::multiVector2BaseVector ; (; core::ConstMultiVecId ; src, . linearalgebra::BaseVector * ; dest, . const sofa::core::behavior::MultiMatrixAccessor * ; matrix . ). ◆ multiVectorPeqBaseVector(). void sofa::simulation::common::MechanicalOperations::multiVectorPeqBaseVector ; (; core::MultiVecDerivId ; dest, . const linearalgebra::BaseVector * ; src, . const sofa::core::behavior::MultiMatrixAccessor * ; matrix . ). ◆ operator const core::MechanicalParams *(). sofa::simulation::common::MechanicalOperations::operator const core::MechanicalParams * ; (; ). inline . ◆ operator->(). core::MechanicalParams* sofa::simulation::common::MechanicalOperations::operator-> ; (; ). inline . ◆ print() [1/2]. voi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html:12648,Integrability,integrat,integrateVelocity,12648,":simulation::common::MechanicalOperations::computeForce ; (; core::MultiVecDerivId ; result, . bool ; clear = true, . bool ; accumulate = true . ). Compute the current force (given the latest propagated position and velocity) . ◆ computeForce() [2/2]. void sofa::simulation::common::MechanicalOperations::computeForce ; (; SReal ; t, . core::MultiVecDerivId ; f, . core::MultiVecCoordId ; x, . core::MultiVecDerivId ; v . ). Compute f(x,v) at time t. Parameters x and v not const due to propagation through mappings. . ◆ getMatrixDimension() [1/2]. void sofa::simulation::common::MechanicalOperations::getMatrixDimension ; (; sofa::core::behavior::MultiMatrixAccessor * ; matrix). inline . ◆ getMatrixDimension() [2/2]. void sofa::simulation::common::MechanicalOperations::getMatrixDimension ; (; sofa::Size * const ; nbRow, . sofa::Size * const ; nbCol, . sofa::core::behavior::MultiMatrixAccessor * ; matrix = nullptr . ). ◆ integrateVelocity(). void sofa::simulation::common::MechanicalOperations::integrateVelocity ; (; core::MultiVecDerivId ; res, . core::ConstMultiVecCoordId ; x, . core::ConstMultiVecDerivId ; v, . SReal ; dt . ). res = x + v.dt . ◆ multiVector2BaseVector(). void sofa::simulation::common::MechanicalOperations::multiVector2BaseVector ; (; core::ConstMultiVecId ; src, . linearalgebra::BaseVector * ; dest, . const sofa::core::behavior::MultiMatrixAccessor * ; matrix . ). ◆ multiVectorPeqBaseVector(). void sofa::simulation::common::MechanicalOperations::multiVectorPeqBaseVector ; (; core::MultiVecDerivId ; dest, . const linearalgebra::BaseVector * ; src, . const sofa::core::behavior::MultiMatrixAccessor * ; matrix . ). ◆ operator const core::MechanicalParams *(). sofa::simulation::common::MechanicalOperations::operator const core::MechanicalParams * ; (; ). inline . ◆ operator->(). core::MechanicalParams* sofa::simulation::common::MechanicalOperations::operator-> ; (; ). inline . ◆ print() [1/2]. void sofa::simulation::common::MechanicalOperations::print ; (; core",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html:3184,Usability,clear,clear,3184,"ion vector. More...;  ; void projectVelocity (core::MultiVecDerivId v, SReal time=0.0);  Apply projective constraints to the given velocity vector. More...;  ; void projectResponse (core::MultiVecDerivId dx, double **W=nullptr);  Apply projective constraints to the given vector. More...;  ; void projectPositionAndVelocity (core::MultiVecCoordId x, core::MultiVecDerivId v, double time=0.0);  Apply projective constraints to the given position and velocity vectors. More...;  ; void addMdx (core::MultiVecDerivId res, core::MultiVecDerivId dx, SReal factor=1.0);  res += factor M.dx More...;  ; void integrateVelocity (core::MultiVecDerivId res, core::ConstMultiVecCoordId x, core::ConstMultiVecDerivId v, SReal dt);  res = x + v.dt More...;  ; void accFromF (core::MultiVecDerivId a, core::ConstMultiVecDerivId f);  ; void computeEnergy (SReal &kineticEnergy, SReal &potentialEnergy);  Compute Energy. More...;  ; void computeForce (core::MultiVecDerivId result, bool clear=true, bool accumulate=true);  Compute the current force (given the latest propagated position and velocity) More...;  ; void computeDf (core::MultiVecDerivId df, bool clear=true, bool accumulate=true);  Compute the current force delta (given the latest propagated displacement) More...;  ; void computeDfV (core::MultiVecDerivId df, bool clear=true, bool accumulate=true);  Compute the current force delta (given the latest propagated velocity) More...;  ; void addMBKdx (core::MultiVecDerivId df, SReal m, SReal b, SReal k, bool clear=true, bool accumulate=true);  accumulate $ df += (m M + b B + k K) dx $ (given the latest propagated displacement) More...;  ; void addMBKv (core::MultiVecDerivId df, SReal m, SReal b, SReal k, bool clear=true, bool accumulate=true);  accumulate $ df += (m M + b B + k K) velocity $ More...;  ; void addSeparateGravity (SReal dt, core::MultiVecDerivId result=core::VecDerivId::velocity());  Add dt*Gravity to the velocity. More...;  ; void computeContactForce (core::MultiVecDerivId resul",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html:3357,Usability,clear,clear,3357,"ponse (core::MultiVecDerivId dx, double **W=nullptr);  Apply projective constraints to the given vector. More...;  ; void projectPositionAndVelocity (core::MultiVecCoordId x, core::MultiVecDerivId v, double time=0.0);  Apply projective constraints to the given position and velocity vectors. More...;  ; void addMdx (core::MultiVecDerivId res, core::MultiVecDerivId dx, SReal factor=1.0);  res += factor M.dx More...;  ; void integrateVelocity (core::MultiVecDerivId res, core::ConstMultiVecCoordId x, core::ConstMultiVecDerivId v, SReal dt);  res = x + v.dt More...;  ; void accFromF (core::MultiVecDerivId a, core::ConstMultiVecDerivId f);  ; void computeEnergy (SReal &kineticEnergy, SReal &potentialEnergy);  Compute Energy. More...;  ; void computeForce (core::MultiVecDerivId result, bool clear=true, bool accumulate=true);  Compute the current force (given the latest propagated position and velocity) More...;  ; void computeDf (core::MultiVecDerivId df, bool clear=true, bool accumulate=true);  Compute the current force delta (given the latest propagated displacement) More...;  ; void computeDfV (core::MultiVecDerivId df, bool clear=true, bool accumulate=true);  Compute the current force delta (given the latest propagated velocity) More...;  ; void addMBKdx (core::MultiVecDerivId df, SReal m, SReal b, SReal k, bool clear=true, bool accumulate=true);  accumulate $ df += (m M + b B + k K) dx $ (given the latest propagated displacement) More...;  ; void addMBKv (core::MultiVecDerivId df, SReal m, SReal b, SReal k, bool clear=true, bool accumulate=true);  accumulate $ df += (m M + b B + k K) velocity $ More...;  ; void addSeparateGravity (SReal dt, core::MultiVecDerivId result=core::VecDerivId::velocity());  Add dt*Gravity to the velocity. More...;  ; void computeContactForce (core::MultiVecDerivId result);  ; void computeContactDf (core::MultiVecDerivId df);  ; void computeAcc (SReal t, core::MultiVecDerivId a, core::MultiVecCoordId x, core::MultiVecDerivId v);  Compute a(x,",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html:3528,Usability,clear,clear,3528,"dId x, core::MultiVecDerivId v, double time=0.0);  Apply projective constraints to the given position and velocity vectors. More...;  ; void addMdx (core::MultiVecDerivId res, core::MultiVecDerivId dx, SReal factor=1.0);  res += factor M.dx More...;  ; void integrateVelocity (core::MultiVecDerivId res, core::ConstMultiVecCoordId x, core::ConstMultiVecDerivId v, SReal dt);  res = x + v.dt More...;  ; void accFromF (core::MultiVecDerivId a, core::ConstMultiVecDerivId f);  ; void computeEnergy (SReal &kineticEnergy, SReal &potentialEnergy);  Compute Energy. More...;  ; void computeForce (core::MultiVecDerivId result, bool clear=true, bool accumulate=true);  Compute the current force (given the latest propagated position and velocity) More...;  ; void computeDf (core::MultiVecDerivId df, bool clear=true, bool accumulate=true);  Compute the current force delta (given the latest propagated displacement) More...;  ; void computeDfV (core::MultiVecDerivId df, bool clear=true, bool accumulate=true);  Compute the current force delta (given the latest propagated velocity) More...;  ; void addMBKdx (core::MultiVecDerivId df, SReal m, SReal b, SReal k, bool clear=true, bool accumulate=true);  accumulate $ df += (m M + b B + k K) dx $ (given the latest propagated displacement) More...;  ; void addMBKv (core::MultiVecDerivId df, SReal m, SReal b, SReal k, bool clear=true, bool accumulate=true);  accumulate $ df += (m M + b B + k K) velocity $ More...;  ; void addSeparateGravity (SReal dt, core::MultiVecDerivId result=core::VecDerivId::velocity());  Add dt*Gravity to the velocity. More...;  ; void computeContactForce (core::MultiVecDerivId result);  ; void computeContactDf (core::MultiVecDerivId df);  ; void computeAcc (SReal t, core::MultiVecDerivId a, core::MultiVecCoordId x, core::MultiVecDerivId v);  Compute a(x,v) at time t. Parameters x and v not const due to propagation through mappings. More...;  ; void computeForce (SReal t, core::MultiVecDerivId f, core::MultiVecCoordId x,",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html:3720,Usability,clear,clear,3720,"VecDerivId dx, SReal factor=1.0);  res += factor M.dx More...;  ; void integrateVelocity (core::MultiVecDerivId res, core::ConstMultiVecCoordId x, core::ConstMultiVecDerivId v, SReal dt);  res = x + v.dt More...;  ; void accFromF (core::MultiVecDerivId a, core::ConstMultiVecDerivId f);  ; void computeEnergy (SReal &kineticEnergy, SReal &potentialEnergy);  Compute Energy. More...;  ; void computeForce (core::MultiVecDerivId result, bool clear=true, bool accumulate=true);  Compute the current force (given the latest propagated position and velocity) More...;  ; void computeDf (core::MultiVecDerivId df, bool clear=true, bool accumulate=true);  Compute the current force delta (given the latest propagated displacement) More...;  ; void computeDfV (core::MultiVecDerivId df, bool clear=true, bool accumulate=true);  Compute the current force delta (given the latest propagated velocity) More...;  ; void addMBKdx (core::MultiVecDerivId df, SReal m, SReal b, SReal k, bool clear=true, bool accumulate=true);  accumulate $ df += (m M + b B + k K) dx $ (given the latest propagated displacement) More...;  ; void addMBKv (core::MultiVecDerivId df, SReal m, SReal b, SReal k, bool clear=true, bool accumulate=true);  accumulate $ df += (m M + b B + k K) velocity $ More...;  ; void addSeparateGravity (SReal dt, core::MultiVecDerivId result=core::VecDerivId::velocity());  Add dt*Gravity to the velocity. More...;  ; void computeContactForce (core::MultiVecDerivId result);  ; void computeContactDf (core::MultiVecDerivId df);  ; void computeAcc (SReal t, core::MultiVecDerivId a, core::MultiVecCoordId x, core::MultiVecDerivId v);  Compute a(x,v) at time t. Parameters x and v not const due to propagation through mappings. More...;  ; void computeForce (SReal t, core::MultiVecDerivId f, core::MultiVecCoordId x, core::MultiVecDerivId v);  Compute f(x,v) at time t. Parameters x and v not const due to propagation through mappings. More...;  ; void computeContactAcc (SReal t, core::MultiVecDerivId",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html:3925,Usability,clear,clear,3925,"  res = x + v.dt More...;  ; void accFromF (core::MultiVecDerivId a, core::ConstMultiVecDerivId f);  ; void computeEnergy (SReal &kineticEnergy, SReal &potentialEnergy);  Compute Energy. More...;  ; void computeForce (core::MultiVecDerivId result, bool clear=true, bool accumulate=true);  Compute the current force (given the latest propagated position and velocity) More...;  ; void computeDf (core::MultiVecDerivId df, bool clear=true, bool accumulate=true);  Compute the current force delta (given the latest propagated displacement) More...;  ; void computeDfV (core::MultiVecDerivId df, bool clear=true, bool accumulate=true);  Compute the current force delta (given the latest propagated velocity) More...;  ; void addMBKdx (core::MultiVecDerivId df, SReal m, SReal b, SReal k, bool clear=true, bool accumulate=true);  accumulate $ df += (m M + b B + k K) dx $ (given the latest propagated displacement) More...;  ; void addMBKv (core::MultiVecDerivId df, SReal m, SReal b, SReal k, bool clear=true, bool accumulate=true);  accumulate $ df += (m M + b B + k K) velocity $ More...;  ; void addSeparateGravity (SReal dt, core::MultiVecDerivId result=core::VecDerivId::velocity());  Add dt*Gravity to the velocity. More...;  ; void computeContactForce (core::MultiVecDerivId result);  ; void computeContactDf (core::MultiVecDerivId df);  ; void computeAcc (SReal t, core::MultiVecDerivId a, core::MultiVecCoordId x, core::MultiVecDerivId v);  Compute a(x,v) at time t. Parameters x and v not const due to propagation through mappings. More...;  ; void computeForce (SReal t, core::MultiVecDerivId f, core::MultiVecCoordId x, core::MultiVecDerivId v);  Compute f(x,v) at time t. Parameters x and v not const due to propagation through mappings. More...;  ; void computeContactAcc (SReal t, core::MultiVecDerivId a, core::MultiVecCoordId x, core::MultiVecDerivId v);  ; Matrix operations; void getMatrixDimension (sofa::Size *const, sofa::Size *const, sofa::core::behavior::MultiMatrixAccessor *matr",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html:9129,Usability,clear,clear,9129,"on::common::MechanicalOperations::MechanicalOperations ; (; const core::MechanicalParams * ; mparams, . core::objectmodel::BaseContext * ; ctx, . bool ; precomputedTraversalOrder = false . ). ◆ MechanicalOperations() [2/2]. sofa::simulation::common::MechanicalOperations::MechanicalOperations ; (; const core::ExecParams * ; params, . core::objectmodel::BaseContext * ; ctx, . bool ; precomputedTraversalOrder = false . ). Function details. ◆ accFromF(). void sofa::simulation::common::MechanicalOperations::accFromF ; (; core::MultiVecDerivId ; a, . core::ConstMultiVecDerivId ; f . ). a = M^-1 . f ; Parameters. fa = M^-1 . f . ◆ addMBK_ToMatrix(). void sofa::simulation::common::MechanicalOperations::addMBK_ToMatrix ; (; const sofa::core::behavior::MultiMatrixAccessor * ; matrix, . SReal ; mFact, . SReal ; bFact, . SReal ; kFact . ). ◆ addMBKdx(). void sofa::simulation::common::MechanicalOperations::addMBKdx ; (; core::MultiVecDerivId ; df, . SReal ; m, . SReal ; b, . SReal ; k, . bool ; clear = true, . bool ; accumulate = true . ). accumulate $ df += (m M + b B + k K) dx $ (given the latest propagated displacement) . ◆ addMBKv(). void sofa::simulation::common::MechanicalOperations::addMBKv ; (; core::MultiVecDerivId ; df, . SReal ; m, . SReal ; b, . SReal ; k, . bool ; clear = true, . bool ; accumulate = true . ). accumulate $ df += (m M + b B + k K) velocity $ . ◆ addMdx(). void sofa::simulation::common::MechanicalOperations::addMdx ; (; core::MultiVecDerivId ; res, . core::MultiVecDerivId ; dx, . SReal ; factor = 1.0 . ). res += factor M.dx . ◆ addSeparateGravity(). void sofa::simulation::common::MechanicalOperations::addSeparateGravity ; (; SReal ; dt, . core::MultiVecDerivId ; result = core::VecDerivId::velocity() . ). Add dt*Gravity to the velocity. . ◆ baseVector2MultiVector(). void sofa::simulation::common::MechanicalOperations::baseVector2MultiVector ; (; const linearalgebra::BaseVector * ; src, . core::MultiVecId ; dest, . const sofa::core::behavior::MultiMatrixA",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html:9417,Usability,clear,clear,9417,"ions ; (; const core::ExecParams * ; params, . core::objectmodel::BaseContext * ; ctx, . bool ; precomputedTraversalOrder = false . ). Function details. ◆ accFromF(). void sofa::simulation::common::MechanicalOperations::accFromF ; (; core::MultiVecDerivId ; a, . core::ConstMultiVecDerivId ; f . ). a = M^-1 . f ; Parameters. fa = M^-1 . f . ◆ addMBK_ToMatrix(). void sofa::simulation::common::MechanicalOperations::addMBK_ToMatrix ; (; const sofa::core::behavior::MultiMatrixAccessor * ; matrix, . SReal ; mFact, . SReal ; bFact, . SReal ; kFact . ). ◆ addMBKdx(). void sofa::simulation::common::MechanicalOperations::addMBKdx ; (; core::MultiVecDerivId ; df, . SReal ; m, . SReal ; b, . SReal ; k, . bool ; clear = true, . bool ; accumulate = true . ). accumulate $ df += (m M + b B + k K) dx $ (given the latest propagated displacement) . ◆ addMBKv(). void sofa::simulation::common::MechanicalOperations::addMBKv ; (; core::MultiVecDerivId ; df, . SReal ; m, . SReal ; b, . SReal ; k, . bool ; clear = true, . bool ; accumulate = true . ). accumulate $ df += (m M + b B + k K) velocity $ . ◆ addMdx(). void sofa::simulation::common::MechanicalOperations::addMdx ; (; core::MultiVecDerivId ; res, . core::MultiVecDerivId ; dx, . SReal ; factor = 1.0 . ). res += factor M.dx . ◆ addSeparateGravity(). void sofa::simulation::common::MechanicalOperations::addSeparateGravity ; (; SReal ; dt, . core::MultiVecDerivId ; result = core::VecDerivId::velocity() . ). Add dt*Gravity to the velocity. . ◆ baseVector2MultiVector(). void sofa::simulation::common::MechanicalOperations::baseVector2MultiVector ; (; const linearalgebra::BaseVector * ; src, . core::MultiVecId ; dest, . const sofa::core::behavior::MultiMatrixAccessor * ; matrix . ). ◆ computeAcc(). void sofa::simulation::common::MechanicalOperations::computeAcc ; (; SReal ; t, . core::MultiVecDerivId ; a, . core::MultiVecCoordId ; x, . core::MultiVecDerivId ; v . ). Compute a(x,v) at time t. Parameters x and v not const due to propagation thr",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html:11021,Usability,clear,clear,11021,"onst linearalgebra::BaseVector * ; src, . core::MultiVecId ; dest, . const sofa::core::behavior::MultiMatrixAccessor * ; matrix . ). ◆ computeAcc(). void sofa::simulation::common::MechanicalOperations::computeAcc ; (; SReal ; t, . core::MultiVecDerivId ; a, . core::MultiVecCoordId ; x, . core::MultiVecDerivId ; v . ). Compute a(x,v) at time t. Parameters x and v not const due to propagation through mappings. . ◆ computeContactAcc(). void sofa::simulation::common::MechanicalOperations::computeContactAcc ; (; SReal ; t, . core::MultiVecDerivId ; a, . core::MultiVecCoordId ; x, . core::MultiVecDerivId ; v . ). ◆ computeContactDf(). void sofa::simulation::common::MechanicalOperations::computeContactDf ; (; core::MultiVecDerivId ; df). ◆ computeContactForce(). void sofa::simulation::common::MechanicalOperations::computeContactForce ; (; core::MultiVecDerivId ; result). ◆ computeDf(). void sofa::simulation::common::MechanicalOperations::computeDf ; (; core::MultiVecDerivId ; df, . bool ; clear = true, . bool ; accumulate = true . ). Compute the current force delta (given the latest propagated displacement) . ◆ computeDfV(). void sofa::simulation::common::MechanicalOperations::computeDfV ; (; core::MultiVecDerivId ; df, . bool ; clear = true, . bool ; accumulate = true . ). Compute the current force delta (given the latest propagated velocity) . ◆ computeEnergy(). void sofa::simulation::common::MechanicalOperations::computeEnergy ; (; SReal & ; kineticEnergy, . SReal & ; potentialEnergy . ). Compute Energy. ; Apply projective constraints to the given velocity vector. . ◆ computeForce() [1/2]. void sofa::simulation::common::MechanicalOperations::computeForce ; (; core::MultiVecDerivId ; result, . bool ; clear = true, . bool ; accumulate = true . ). Compute the current force (given the latest propagated position and velocity) . ◆ computeForce() [2/2]. void sofa::simulation::common::MechanicalOperations::computeForce ; (; SReal ; t, . core::MultiVecDerivId ; f, . core::MultiVe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html:11266,Usability,clear,clear,11266,"DerivId ; a, . core::MultiVecCoordId ; x, . core::MultiVecDerivId ; v . ). Compute a(x,v) at time t. Parameters x and v not const due to propagation through mappings. . ◆ computeContactAcc(). void sofa::simulation::common::MechanicalOperations::computeContactAcc ; (; SReal ; t, . core::MultiVecDerivId ; a, . core::MultiVecCoordId ; x, . core::MultiVecDerivId ; v . ). ◆ computeContactDf(). void sofa::simulation::common::MechanicalOperations::computeContactDf ; (; core::MultiVecDerivId ; df). ◆ computeContactForce(). void sofa::simulation::common::MechanicalOperations::computeContactForce ; (; core::MultiVecDerivId ; result). ◆ computeDf(). void sofa::simulation::common::MechanicalOperations::computeDf ; (; core::MultiVecDerivId ; df, . bool ; clear = true, . bool ; accumulate = true . ). Compute the current force delta (given the latest propagated displacement) . ◆ computeDfV(). void sofa::simulation::common::MechanicalOperations::computeDfV ; (; core::MultiVecDerivId ; df, . bool ; clear = true, . bool ; accumulate = true . ). Compute the current force delta (given the latest propagated velocity) . ◆ computeEnergy(). void sofa::simulation::common::MechanicalOperations::computeEnergy ; (; SReal & ; kineticEnergy, . SReal & ; potentialEnergy . ). Compute Energy. ; Apply projective constraints to the given velocity vector. . ◆ computeForce() [1/2]. void sofa::simulation::common::MechanicalOperations::computeForce ; (; core::MultiVecDerivId ; result, . bool ; clear = true, . bool ; accumulate = true . ). Compute the current force (given the latest propagated position and velocity) . ◆ computeForce() [2/2]. void sofa::simulation::common::MechanicalOperations::computeForce ; (; SReal ; t, . core::MultiVecDerivId ; f, . core::MultiVecCoordId ; x, . core::MultiVecDerivId ; v . ). Compute f(x,v) at time t. Parameters x and v not const due to propagation through mappings. . ◆ getMatrixDimension() [1/2]. void sofa::simulation::common::MechanicalOperations::getMatrixDimension ; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html:11749,Usability,clear,clear,11749,"rivId ; df). ◆ computeContactForce(). void sofa::simulation::common::MechanicalOperations::computeContactForce ; (; core::MultiVecDerivId ; result). ◆ computeDf(). void sofa::simulation::common::MechanicalOperations::computeDf ; (; core::MultiVecDerivId ; df, . bool ; clear = true, . bool ; accumulate = true . ). Compute the current force delta (given the latest propagated displacement) . ◆ computeDfV(). void sofa::simulation::common::MechanicalOperations::computeDfV ; (; core::MultiVecDerivId ; df, . bool ; clear = true, . bool ; accumulate = true . ). Compute the current force delta (given the latest propagated velocity) . ◆ computeEnergy(). void sofa::simulation::common::MechanicalOperations::computeEnergy ; (; SReal & ; kineticEnergy, . SReal & ; potentialEnergy . ). Compute Energy. ; Apply projective constraints to the given velocity vector. . ◆ computeForce() [1/2]. void sofa::simulation::common::MechanicalOperations::computeForce ; (; core::MultiVecDerivId ; result, . bool ; clear = true, . bool ; accumulate = true . ). Compute the current force (given the latest propagated position and velocity) . ◆ computeForce() [2/2]. void sofa::simulation::common::MechanicalOperations::computeForce ; (; SReal ; t, . core::MultiVecDerivId ; f, . core::MultiVecCoordId ; x, . core::MultiVecDerivId ; v . ). Compute f(x,v) at time t. Parameters x and v not const due to propagation through mappings. . ◆ getMatrixDimension() [1/2]. void sofa::simulation::common::MechanicalOperations::getMatrixDimension ; (; sofa::core::behavior::MultiMatrixAccessor * ; matrix). inline . ◆ getMatrixDimension() [2/2]. void sofa::simulation::common::MechanicalOperations::getMatrixDimension ; (; sofa::Size * const ; nbRow, . sofa::Size * const ; nbCol, . sofa::core::behavior::MultiMatrixAccessor * ; matrix = nullptr . ). ◆ integrateVelocity(). void sofa::simulation::common::MechanicalOperations::integrateVelocity ; (; core::MultiVecDerivId ; res, . core::ConstMultiVecCoordId ; x, . core::ConstMultiV",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_mechanical_operations.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations-members.html:256,Modifiability,inherit,inherited,256,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::common::VectorOperations Member List . This is the complete list of members for sofa::simulation::common::VectorOperations, including all inherited members. BaseVectorOperations(const core::ExecParams *params, core::objectmodel::BaseContext *ctx)sofa::core::behavior::BaseVectorOperationsinline; ctxsofa::core::behavior::BaseVectorOperationsprotected; executeVisitorsofa::simulation::common::VectorOperationsprotected; finish() overridesofa::simulation::common::VectorOperationsvirtual; paramssofa::core::behavior::BaseVectorOperationsprotected; print(sofa::core::ConstMultiVecId v, std::ostream &out, std::string prefix="""", std::string suffix="""") overridesofa::simulation::common::VectorOperationsvirtual; resultsofa::simulation::common::VectorOperationsprotected; v_alloc(sofa::core::MultiVecCoordId &v, const core::VecIdProperties &properties={}) overridesofa::simulation::common::VectorOperationsvirtual; v_alloc(sofa::core::MultiVecDerivId &v, const core::VecIdProperties &properties={}) overridesofa::simulation::common::VectorOperationsvirtual; v_clear(core::MultiVecId v) overridesofa::simulation::common::VectorOperationsvirtual; v_dot(core::ConstMultiVecId a, core::ConstMultiVecId b) overridesofa::simulation::common::VectorOperationsvirtual; v_eq(core::MultiVecId v, core::ConstMultiVecId a) overridesofa::simulation::common::VectorOperationsvirtual; v_eq(core::MultiVecId v, core::ConstMultiVecId a, SReal f) overridesofa::simulation::common::VectorOperationsvirtual; v_free(sofa::core::MultiVecCoordId &id, bool interactionForceField=false, bool propagate=false) overridesofa::simulation::common::VectorOperationsvirtual; v_free(sofa::core::MultiVecDerivId &id, bool interactionForceField=false, bool propagate=false) overridesofa::simulation::common::VectorOperationsvirtual; v_multiop(const core::behavior::BaseMechanicalState::VMultiOp &o) overridesofa::simulation::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html:1230,Energy Efficiency,allocate,allocated,1230,"lti-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::common::VectorOperations Class Reference . #include <VectorOperations.h>. Inheritance diagram for sofa::simulation::common::VectorOperations:. [legend]. Protected Attributes; VisitorExecuteFunc executeVisitor;  ; SReal result;  Result of latest v_dot operation. More...;  ;  Protected Attributes inherited from sofa::core::behavior::BaseVectorOperations; const core::ExecParams * params;  ; core::objectmodel::BaseContext * ctx;  ; SReal result;  . Public Member Functions;  VectorOperations (const sofa::core::ExecParams *params, sofa::core::objectmodel::BaseContext *ctx, bool precomputedTraversalOrder=false);  ; void v_alloc (sofa::core::MultiVecCoordId &v, const core::VecIdProperties &properties={}) override;  Allocate a temporary vector. More...;  ; void v_alloc (sofa::core::MultiVecDerivId &v, const core::VecIdProperties &properties={}) override;  ; void v_free (sofa::core::MultiVecCoordId &id, bool interactionForceField=false, bool propagate=false) override;  Free a previously allocated temporary vector. More...;  ; void v_free (sofa::core::MultiVecDerivId &id, bool interactionForceField=false, bool propagate=false) override;  ; void v_realloc (sofa::core::MultiVecCoordId &id, bool interactionForceField=false, bool propagate=false, const core::VecIdProperties &properties={}) override;  keep already allocated vectors and allocates others. If interactionForceField, also allocates mechanical states linked by an InteractionForceField More...;  ; void v_realloc (sofa::core::MultiVecDerivId &id, bool interactionForceField=false, bool propagate=false, const core::VecIdProperties &properties={}) override;  ; void v_clear (core::MultiVecId v) override;  v=0 More...;  ; void v_eq (core::MultiVecId v, core::ConstMultiVecId a) override;  v=a More...;  ; void v_eq (core::MultiVecId v, core::ConstMultiVecId a, SReal f) override;  v=f*a More...;  ; void v_peq (core::Mu",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html:1558,Energy Efficiency,allocate,allocated,1558," executeVisitor;  ; SReal result;  Result of latest v_dot operation. More...;  ;  Protected Attributes inherited from sofa::core::behavior::BaseVectorOperations; const core::ExecParams * params;  ; core::objectmodel::BaseContext * ctx;  ; SReal result;  . Public Member Functions;  VectorOperations (const sofa::core::ExecParams *params, sofa::core::objectmodel::BaseContext *ctx, bool precomputedTraversalOrder=false);  ; void v_alloc (sofa::core::MultiVecCoordId &v, const core::VecIdProperties &properties={}) override;  Allocate a temporary vector. More...;  ; void v_alloc (sofa::core::MultiVecDerivId &v, const core::VecIdProperties &properties={}) override;  ; void v_free (sofa::core::MultiVecCoordId &id, bool interactionForceField=false, bool propagate=false) override;  Free a previously allocated temporary vector. More...;  ; void v_free (sofa::core::MultiVecDerivId &id, bool interactionForceField=false, bool propagate=false) override;  ; void v_realloc (sofa::core::MultiVecCoordId &id, bool interactionForceField=false, bool propagate=false, const core::VecIdProperties &properties={}) override;  keep already allocated vectors and allocates others. If interactionForceField, also allocates mechanical states linked by an InteractionForceField More...;  ; void v_realloc (sofa::core::MultiVecDerivId &id, bool interactionForceField=false, bool propagate=false, const core::VecIdProperties &properties={}) override;  ; void v_clear (core::MultiVecId v) override;  v=0 More...;  ; void v_eq (core::MultiVecId v, core::ConstMultiVecId a) override;  v=a More...;  ; void v_eq (core::MultiVecId v, core::ConstMultiVecId a, SReal f) override;  v=f*a More...;  ; void v_peq (core::MultiVecId v, core::ConstMultiVecId a, SReal f=1.0) override;  v+=f*a More...;  ; void v_teq (core::MultiVecId v, SReal f) override;  v*=f More...;  ; void v_op (core::MultiVecId v, core::ConstMultiVecId a, core::ConstMultiVecId b, SReal f=1.0) override;  v=a+b*f More...;  ; void v_multiop (const core::behav",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html:1580,Energy Efficiency,allocate,allocates,1580," executeVisitor;  ; SReal result;  Result of latest v_dot operation. More...;  ;  Protected Attributes inherited from sofa::core::behavior::BaseVectorOperations; const core::ExecParams * params;  ; core::objectmodel::BaseContext * ctx;  ; SReal result;  . Public Member Functions;  VectorOperations (const sofa::core::ExecParams *params, sofa::core::objectmodel::BaseContext *ctx, bool precomputedTraversalOrder=false);  ; void v_alloc (sofa::core::MultiVecCoordId &v, const core::VecIdProperties &properties={}) override;  Allocate a temporary vector. More...;  ; void v_alloc (sofa::core::MultiVecDerivId &v, const core::VecIdProperties &properties={}) override;  ; void v_free (sofa::core::MultiVecCoordId &id, bool interactionForceField=false, bool propagate=false) override;  Free a previously allocated temporary vector. More...;  ; void v_free (sofa::core::MultiVecDerivId &id, bool interactionForceField=false, bool propagate=false) override;  ; void v_realloc (sofa::core::MultiVecCoordId &id, bool interactionForceField=false, bool propagate=false, const core::VecIdProperties &properties={}) override;  keep already allocated vectors and allocates others. If interactionForceField, also allocates mechanical states linked by an InteractionForceField More...;  ; void v_realloc (sofa::core::MultiVecDerivId &id, bool interactionForceField=false, bool propagate=false, const core::VecIdProperties &properties={}) override;  ; void v_clear (core::MultiVecId v) override;  v=0 More...;  ; void v_eq (core::MultiVecId v, core::ConstMultiVecId a) override;  v=a More...;  ; void v_eq (core::MultiVecId v, core::ConstMultiVecId a, SReal f) override;  v=f*a More...;  ; void v_peq (core::MultiVecId v, core::ConstMultiVecId a, SReal f=1.0) override;  v+=f*a More...;  ; void v_teq (core::MultiVecId v, SReal f) override;  v*=f More...;  ; void v_op (core::MultiVecId v, core::ConstMultiVecId a, core::ConstMultiVecId b, SReal f=1.0) override;  v=a+b*f More...;  ; void v_multiop (const core::behav",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html:1629,Energy Efficiency,allocate,allocates,1629,":BaseContext * ctx;  ; SReal result;  . Public Member Functions;  VectorOperations (const sofa::core::ExecParams *params, sofa::core::objectmodel::BaseContext *ctx, bool precomputedTraversalOrder=false);  ; void v_alloc (sofa::core::MultiVecCoordId &v, const core::VecIdProperties &properties={}) override;  Allocate a temporary vector. More...;  ; void v_alloc (sofa::core::MultiVecDerivId &v, const core::VecIdProperties &properties={}) override;  ; void v_free (sofa::core::MultiVecCoordId &id, bool interactionForceField=false, bool propagate=false) override;  Free a previously allocated temporary vector. More...;  ; void v_free (sofa::core::MultiVecDerivId &id, bool interactionForceField=false, bool propagate=false) override;  ; void v_realloc (sofa::core::MultiVecCoordId &id, bool interactionForceField=false, bool propagate=false, const core::VecIdProperties &properties={}) override;  keep already allocated vectors and allocates others. If interactionForceField, also allocates mechanical states linked by an InteractionForceField More...;  ; void v_realloc (sofa::core::MultiVecDerivId &id, bool interactionForceField=false, bool propagate=false, const core::VecIdProperties &properties={}) override;  ; void v_clear (core::MultiVecId v) override;  v=0 More...;  ; void v_eq (core::MultiVecId v, core::ConstMultiVecId a) override;  v=a More...;  ; void v_eq (core::MultiVecId v, core::ConstMultiVecId a, SReal f) override;  v=f*a More...;  ; void v_peq (core::MultiVecId v, core::ConstMultiVecId a, SReal f=1.0) override;  v+=f*a More...;  ; void v_teq (core::MultiVecId v, SReal f) override;  v*=f More...;  ; void v_op (core::MultiVecId v, core::ConstMultiVecId a, core::ConstMultiVecId b, SReal f=1.0) override;  v=a+b*f More...;  ; void v_multiop (const core::behavior::BaseMechanicalState::VMultiOp &o) override;  ; void v_dot (core::ConstMultiVecId a, core::ConstMultiVecId b) override;  a dot b ( get result using finish ) More...;  ; void v_norm (core::ConstMultiVecId a, unsig",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html:2821,Energy Efficiency,efficient,efficiently,2821,"&properties={}) override;  ; void v_clear (core::MultiVecId v) override;  v=0 More...;  ; void v_eq (core::MultiVecId v, core::ConstMultiVecId a) override;  v=a More...;  ; void v_eq (core::MultiVecId v, core::ConstMultiVecId a, SReal f) override;  v=f*a More...;  ; void v_peq (core::MultiVecId v, core::ConstMultiVecId a, SReal f=1.0) override;  v+=f*a More...;  ; void v_teq (core::MultiVecId v, SReal f) override;  v*=f More...;  ; void v_op (core::MultiVecId v, core::ConstMultiVecId a, core::ConstMultiVecId b, SReal f=1.0) override;  v=a+b*f More...;  ; void v_multiop (const core::behavior::BaseMechanicalState::VMultiOp &o) override;  ; void v_dot (core::ConstMultiVecId a, core::ConstMultiVecId b) override;  a dot b ( get result using finish ) More...;  ; void v_norm (core::ConstMultiVecId a, unsigned l) override;  Compute the norm of a vector ( get result using finish ). The type of norm is set by parameter l. Use 0 for the infinite norm. Note that the 2-norm is more efficiently computed using the square root of the dot product. More...;  ; void v_threshold (core::MultiVecId a, SReal threshold) override;  nullify the values below the given threshold More...;  ; SReal finish () override;  ; void print (sofa::core::ConstMultiVecId v, std::ostream &out, std::string prefix="""", std::string suffix="""") override;  ; size_t v_size (core::MultiVecId v) override;  ;  Public Member Functions inherited from sofa::core::behavior::BaseVectorOperations;  BaseVectorOperations (const core::ExecParams *params, core::objectmodel::BaseContext *ctx);  ; virtual ~BaseVectorOperations ();  . Attribute details. ◆ executeVisitor. VisitorExecuteFunc sofa::simulation::common::VectorOperations::executeVisitor. protected . ◆ result. SReal sofa::simulation::common::VectorOperations::result. protected . Result of latest v_dot operation. . Constructor details. ◆ VectorOperations(). sofa::simulation::common::VectorOperations::VectorOperations ; (; const sofa::core::ExecParams * ; params, . sofa::c",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html:5949,Energy Efficiency,allocate,allocated,5949,"::MultiVecId ; v). overridevirtual . v=0 ; Implements sofa::core::behavior::BaseVectorOperations. ◆ v_dot(). void sofa::simulation::common::VectorOperations::v_dot ; (; core::ConstMultiVecId ; a, . core::ConstMultiVecId ; b . ). overridevirtual . a dot b ( get result using finish ) ; Implements sofa::core::behavior::BaseVectorOperations. ◆ v_eq() [1/2]. void sofa::simulation::common::VectorOperations::v_eq ; (; core::MultiVecId ; v, . core::ConstMultiVecId ; a . ). overridevirtual . v=a ; Implements sofa::core::behavior::BaseVectorOperations. ◆ v_eq() [2/2]. void sofa::simulation::common::VectorOperations::v_eq ; (; core::MultiVecId ; v, . core::ConstMultiVecId ; a, . SReal ; f . ). overridevirtual . v=f*a ; Implements sofa::core::behavior::BaseVectorOperations. ◆ v_free() [1/2]. void sofa::simulation::common::VectorOperations::v_free ; (; sofa::core::MultiVecCoordId & ; id, . bool ; interactionForceField = false, . bool ; propagate = false . ). overridevirtual . Free a previously allocated temporary vector. ; Implements sofa::core::behavior::BaseVectorOperations. ◆ v_free() [2/2]. void sofa::simulation::common::VectorOperations::v_free ; (; sofa::core::MultiVecDerivId & ; id, . bool ; interactionForceField = false, . bool ; propagate = false . ). overridevirtual . Implements sofa::core::behavior::BaseVectorOperations. ◆ v_multiop(). void sofa::simulation::common::VectorOperations::v_multiop ; (; const core::behavior::BaseMechanicalState::VMultiOp & ; o). overridevirtual . Implements sofa::core::behavior::BaseVectorOperations. ◆ v_norm(). void sofa::simulation::common::VectorOperations::v_norm ; (; core::ConstMultiVecId ; a, . unsigned ; l . ). overridevirtual . Compute the norm of a vector ( get result using finish ). The type of norm is set by parameter l. Use 0 for the infinite norm. Note that the 2-norm is more efficiently computed using the square root of the dot product. ; Implements sofa::core::behavior::BaseVectorOperations. ◆ v_op(). void sofa::simulation::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html:6800,Energy Efficiency,efficient,efficiently,6800,":MultiVecCoordId & ; id, . bool ; interactionForceField = false, . bool ; propagate = false . ). overridevirtual . Free a previously allocated temporary vector. ; Implements sofa::core::behavior::BaseVectorOperations. ◆ v_free() [2/2]. void sofa::simulation::common::VectorOperations::v_free ; (; sofa::core::MultiVecDerivId & ; id, . bool ; interactionForceField = false, . bool ; propagate = false . ). overridevirtual . Implements sofa::core::behavior::BaseVectorOperations. ◆ v_multiop(). void sofa::simulation::common::VectorOperations::v_multiop ; (; const core::behavior::BaseMechanicalState::VMultiOp & ; o). overridevirtual . Implements sofa::core::behavior::BaseVectorOperations. ◆ v_norm(). void sofa::simulation::common::VectorOperations::v_norm ; (; core::ConstMultiVecId ; a, . unsigned ; l . ). overridevirtual . Compute the norm of a vector ( get result using finish ). The type of norm is set by parameter l. Use 0 for the infinite norm. Note that the 2-norm is more efficiently computed using the square root of the dot product. ; Implements sofa::core::behavior::BaseVectorOperations. ◆ v_op(). void sofa::simulation::common::VectorOperations::v_op ; (; core::MultiVecId ; v, . core::ConstMultiVecId ; a, . core::ConstMultiVecId ; b, . SReal ; f = 1.0 . ). overridevirtual . v=a+b*f ; Implements sofa::core::behavior::BaseVectorOperations. ◆ v_peq(). void sofa::simulation::common::VectorOperations::v_peq ; (; core::MultiVecId ; v, . core::ConstMultiVecId ; a, . SReal ; f = 1.0 . ). overridevirtual . v+=f*a ; Implements sofa::core::behavior::BaseVectorOperations. ◆ v_realloc() [1/2]. void sofa::simulation::common::VectorOperations::v_realloc ; (; sofa::core::MultiVecCoordId & ; id, . bool ; interactionForceField = false, . bool ; propagate = false, . const core::VecIdProperties & ; properties = {} . ). overridevirtual . keep already allocated vectors and allocates others. If interactionForceField, also allocates mechanical states linked by an InteractionForceField ; Imp",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html:7677,Energy Efficiency,allocate,allocated,7677,"ng finish ). The type of norm is set by parameter l. Use 0 for the infinite norm. Note that the 2-norm is more efficiently computed using the square root of the dot product. ; Implements sofa::core::behavior::BaseVectorOperations. ◆ v_op(). void sofa::simulation::common::VectorOperations::v_op ; (; core::MultiVecId ; v, . core::ConstMultiVecId ; a, . core::ConstMultiVecId ; b, . SReal ; f = 1.0 . ). overridevirtual . v=a+b*f ; Implements sofa::core::behavior::BaseVectorOperations. ◆ v_peq(). void sofa::simulation::common::VectorOperations::v_peq ; (; core::MultiVecId ; v, . core::ConstMultiVecId ; a, . SReal ; f = 1.0 . ). overridevirtual . v+=f*a ; Implements sofa::core::behavior::BaseVectorOperations. ◆ v_realloc() [1/2]. void sofa::simulation::common::VectorOperations::v_realloc ; (; sofa::core::MultiVecCoordId & ; id, . bool ; interactionForceField = false, . bool ; propagate = false, . const core::VecIdProperties & ; properties = {} . ). overridevirtual . keep already allocated vectors and allocates others. If interactionForceField, also allocates mechanical states linked by an InteractionForceField ; Implements sofa::core::behavior::BaseVectorOperations. ◆ v_realloc() [2/2]. void sofa::simulation::common::VectorOperations::v_realloc ; (; sofa::core::MultiVecDerivId & ; id, . bool ; interactionForceField = false, . bool ; propagate = false, . const core::VecIdProperties & ; properties = {} . ). overridevirtual . Implements sofa::core::behavior::BaseVectorOperations. ◆ v_size(). size_t sofa::simulation::common::VectorOperations::v_size ; (; core::MultiVecId ; v). overridevirtual . Implements sofa::core::behavior::BaseVectorOperations. ◆ v_teq(). void sofa::simulation::common::VectorOperations::v_teq ; (; core::MultiVecId ; v, . SReal ; f . ). overridevirtual . v*=f ; Implements sofa::core::behavior::BaseVectorOperations. ◆ v_threshold(). void sofa::simulation::common::VectorOperations::v_threshold ; (; core::MultiVecId ; a, . SReal ; threshold . ). overridevirtua",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html:7699,Energy Efficiency,allocate,allocates,7699,"ng finish ). The type of norm is set by parameter l. Use 0 for the infinite norm. Note that the 2-norm is more efficiently computed using the square root of the dot product. ; Implements sofa::core::behavior::BaseVectorOperations. ◆ v_op(). void sofa::simulation::common::VectorOperations::v_op ; (; core::MultiVecId ; v, . core::ConstMultiVecId ; a, . core::ConstMultiVecId ; b, . SReal ; f = 1.0 . ). overridevirtual . v=a+b*f ; Implements sofa::core::behavior::BaseVectorOperations. ◆ v_peq(). void sofa::simulation::common::VectorOperations::v_peq ; (; core::MultiVecId ; v, . core::ConstMultiVecId ; a, . SReal ; f = 1.0 . ). overridevirtual . v+=f*a ; Implements sofa::core::behavior::BaseVectorOperations. ◆ v_realloc() [1/2]. void sofa::simulation::common::VectorOperations::v_realloc ; (; sofa::core::MultiVecCoordId & ; id, . bool ; interactionForceField = false, . bool ; propagate = false, . const core::VecIdProperties & ; properties = {} . ). overridevirtual . keep already allocated vectors and allocates others. If interactionForceField, also allocates mechanical states linked by an InteractionForceField ; Implements sofa::core::behavior::BaseVectorOperations. ◆ v_realloc() [2/2]. void sofa::simulation::common::VectorOperations::v_realloc ; (; sofa::core::MultiVecDerivId & ; id, . bool ; interactionForceField = false, . bool ; propagate = false, . const core::VecIdProperties & ; properties = {} . ). overridevirtual . Implements sofa::core::behavior::BaseVectorOperations. ◆ v_size(). size_t sofa::simulation::common::VectorOperations::v_size ; (; core::MultiVecId ; v). overridevirtual . Implements sofa::core::behavior::BaseVectorOperations. ◆ v_teq(). void sofa::simulation::common::VectorOperations::v_teq ; (; core::MultiVecId ; v, . SReal ; f . ). overridevirtual . v*=f ; Implements sofa::core::behavior::BaseVectorOperations. ◆ v_threshold(). void sofa::simulation::common::VectorOperations::v_threshold ; (; core::MultiVecId ; a, . SReal ; threshold . ). overridevirtua",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html:7748,Energy Efficiency,allocate,allocates,7748," is more efficiently computed using the square root of the dot product. ; Implements sofa::core::behavior::BaseVectorOperations. ◆ v_op(). void sofa::simulation::common::VectorOperations::v_op ; (; core::MultiVecId ; v, . core::ConstMultiVecId ; a, . core::ConstMultiVecId ; b, . SReal ; f = 1.0 . ). overridevirtual . v=a+b*f ; Implements sofa::core::behavior::BaseVectorOperations. ◆ v_peq(). void sofa::simulation::common::VectorOperations::v_peq ; (; core::MultiVecId ; v, . core::ConstMultiVecId ; a, . SReal ; f = 1.0 . ). overridevirtual . v+=f*a ; Implements sofa::core::behavior::BaseVectorOperations. ◆ v_realloc() [1/2]. void sofa::simulation::common::VectorOperations::v_realloc ; (; sofa::core::MultiVecCoordId & ; id, . bool ; interactionForceField = false, . bool ; propagate = false, . const core::VecIdProperties & ; properties = {} . ). overridevirtual . keep already allocated vectors and allocates others. If interactionForceField, also allocates mechanical states linked by an InteractionForceField ; Implements sofa::core::behavior::BaseVectorOperations. ◆ v_realloc() [2/2]. void sofa::simulation::common::VectorOperations::v_realloc ; (; sofa::core::MultiVecDerivId & ; id, . bool ; interactionForceField = false, . bool ; propagate = false, . const core::VecIdProperties & ; properties = {} . ). overridevirtual . Implements sofa::core::behavior::BaseVectorOperations. ◆ v_size(). size_t sofa::simulation::common::VectorOperations::v_size ; (; core::MultiVecId ; v). overridevirtual . Implements sofa::core::behavior::BaseVectorOperations. ◆ v_teq(). void sofa::simulation::common::VectorOperations::v_teq ; (; core::MultiVecId ; v, . SReal ; f . ). overridevirtual . v*=f ; Implements sofa::core::behavior::BaseVectorOperations. ◆ v_threshold(). void sofa::simulation::common::VectorOperations::v_threshold ; (; core::MultiVecId ; a, . SReal ; threshold . ). overridevirtual . nullify the values below the given threshold ; Implements sofa::core::behavior::BaseVectorOperatio",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html:534,Modifiability,inherit,inherited,534,"﻿. SOFA API: sofa::simulation::common::VectorOperations Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::common::VectorOperations Class Reference . #include <VectorOperations.h>. Inheritance diagram for sofa::simulation::common::VectorOperations:. [legend]. Protected Attributes; VisitorExecuteFunc executeVisitor;  ; SReal result;  Result of latest v_dot operation. More...;  ;  Protected Attributes inherited from sofa::core::behavior::BaseVectorOperations; const core::ExecParams * params;  ; core::objectmodel::BaseContext * ctx;  ; SReal result;  . Public Member Functions;  VectorOperations (const sofa::core::ExecParams *params, sofa::core::objectmodel::BaseContext *ctx, bool precomputedTraversalOrder=false);  ; void v_alloc (sofa::core::MultiVecCoordId &v, const core::VecIdProperties &properties={}) override;  Allocate a temporary vector. More...;  ; void v_alloc (sofa::core::MultiVecDerivId &v, const core::VecIdProperties &properties={}) override;  ; void v_free (sofa::core::MultiVecCoordId &id, bool interactionForceField=false, bool propagate=false) override;  Free a previously allocated temporary vector. More...;  ; void v_free (sofa::core::MultiVecDerivId &id, bool interactionForceField=false, bool propagate=false) override;  ; void v_realloc (sofa::core::MultiVecCoordId &id, bool interactionForceField=false, bool propagate=false, const core::VecIdProperties &properties={}) override;  keep already allocated vectors and allocates others. If interactionForceField, also allocates mechanical states linked by an InteractionForceField More...;  ; void v_realloc (sofa::core::MultiVecDerivId &id, bool interactionForceField=false, bool propagate=false, const core::VecIdProperties &properties={}) override;  ; void v_clear (core::MultiVecId v) override;  v=0 More...;  ; void v_eq (core::MultiVecId v, core::ConstMultiVecId a) override;  v=a Mor",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html:3242,Modifiability,inherit,inherited,3242,"ultiVecId v, SReal f) override;  v*=f More...;  ; void v_op (core::MultiVecId v, core::ConstMultiVecId a, core::ConstMultiVecId b, SReal f=1.0) override;  v=a+b*f More...;  ; void v_multiop (const core::behavior::BaseMechanicalState::VMultiOp &o) override;  ; void v_dot (core::ConstMultiVecId a, core::ConstMultiVecId b) override;  a dot b ( get result using finish ) More...;  ; void v_norm (core::ConstMultiVecId a, unsigned l) override;  Compute the norm of a vector ( get result using finish ). The type of norm is set by parameter l. Use 0 for the infinite norm. Note that the 2-norm is more efficiently computed using the square root of the dot product. More...;  ; void v_threshold (core::MultiVecId a, SReal threshold) override;  nullify the values below the given threshold More...;  ; SReal finish () override;  ; void print (sofa::core::ConstMultiVecId v, std::ostream &out, std::string prefix="""", std::string suffix="""") override;  ; size_t v_size (core::MultiVecId v) override;  ;  Public Member Functions inherited from sofa::core::behavior::BaseVectorOperations;  BaseVectorOperations (const core::ExecParams *params, core::objectmodel::BaseContext *ctx);  ; virtual ~BaseVectorOperations ();  . Attribute details. ◆ executeVisitor. VisitorExecuteFunc sofa::simulation::common::VectorOperations::executeVisitor. protected . ◆ result. SReal sofa::simulation::common::VectorOperations::result. protected . Result of latest v_dot operation. . Constructor details. ◆ VectorOperations(). sofa::simulation::common::VectorOperations::VectorOperations ; (; const sofa::core::ExecParams * ; params, . sofa::core::objectmodel::BaseContext * ; ctx, . bool ; precomputedTraversalOrder = false . ). Function details. ◆ finish(). SReal sofa::simulation::common::VectorOperations::finish ; (; ). overridevirtual . Implements sofa::core::behavior::BaseVectorOperations. ◆ print(). void sofa::simulation::common::VectorOperations::print ; (; sofa::core::ConstMultiVecId ; v, . std::ostream & ; out, . st",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1common_1_1_vector_operations.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html:2622,Deployability,configurat,configurationSettingsofa,2622,"back(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; animate_sofa::core::objectmodel::Context; animationManagersofa::simulation::Node; Base()sofa::core::objectmodel::Baseprotected; BaseContext()sofa::core::objectmodel::BaseContextprotected; BaseNode()sofa::core::objectmodel::BaseNodeprotected; BaseType typedefsofa::core::objectmodel::Base; behaviorModelsofa::simulation::Node; canChangeSleepingState() const overridesofa::core::objectmodel::Contextvirtual; childsofa::simulation::Node; ChildIterator typedefsofa::simulation::Node; Children typedefsofa::core::objectmodel::BaseNode; clearLoggedMessages() constsofa::core::objectmodel::Base; clearObjectContext(BaseObject::SPtr obj)sofa::core::objectmodel::BaseNodeprotected; collisionModelsofa::simulation::Node; collisionPipelinesofa::simulation::Node; configurationSettingsofa::simulation::Node; constraintSetsofa::simulation::Node; constraintSolversofa::simulation::Node; Context()sofa::core::objectmodel::Contextprotected; contextObjectsofa::simulation::Node; copyContext(const Context &c)sofa::core::objectmodel::Context; copySimulationContext(const Context &c)sofa::core::objectmodel::Context; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(DAGNode *, sofa::core::objectmodel::BaseObjectDescription *arg)sofa::simulation::graph::DAGNodeinlinestatic; sofa::simulation::Node::create(RealObject *, sofa::core::objectmodel::BaseObjectDescription *arg)sofa::simulation::Nodestatic; sofa::simulation::Node::create(const std::string &name)sofa::simulation::Nodestatic; createChild(const std::string &nodeName) overridesofa::simulation::graph::DAGNodevirtual; d_canChangeSleepingStatesofa::core::objectmodel::Context; d_componentStatesofa::core::objectmodel::Base; d_is",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html:22736,Deployability,update,updateContext,22736,"re::objectmodel::Contextvirtual; setTopology(BaseObject *)sofa::core::objectmodel::BaseContextinlinevirtual; shaderssofa::simulation::Node; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; Single typedefsofa::simulation::Node; SOFA_ABSTRACT_CLASS(BaseNode, Base)sofa::core::objectmodel::BaseNode; SOFA_ABSTRACT_CLASS2(Node, BaseNode, Context)sofa::simulation::Node; SOFA_CLASS(DAGNode, simulation::Node)sofa::simulation::graph::DAGNode; sofa::simulation::Node::SOFA_CLASS(Context, BaseContext)sofa::core::objectmodel::Context; sofa::core::objectmodel::BaseContext::SOFA_CLASS(BaseContext, Base)sofa::core::objectmodel::BaseContext; solversofa::simulation::Node; SPtr typedefsofa::core::objectmodel::Base; statesofa::simulation::Node; StatusMap typedefsofa::simulation::graph::DAGNodeprotected; time_sofa::core::objectmodel::Context; topologysofa::simulation::Node; topologyObjectsofa::simulation::Node; unsortedsofa::simulation::Node; updateContext() overridesofa::simulation::graph::DAGNodevirtual; updateDescendancy()sofa::simulation::graph::DAGNodeprotected; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateSimulationContext() overridesofa::simulation::graph::DAGNodevirtual; updateVisualContext()sofa::simulation::Nodevirtual; Vec3 typedefsofa::core::objectmodel::BaseContext; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VISITED enum valuesofa::simulation::graph::DAGNodeprotected; VisitedStatus enum namesofa::simulation::graph::DAGNodeprotected; visualLoopsofa::simulation::Node; visualManagersofa::simulation::Node; visualModelsofa::simulation::Node; worldGravity_sofa::core::objectmodel::Context; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseContext() overridesofa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html:22801,Deployability,update,updateDescendancy,22801,"e::objectmodel::BaseContextinlinevirtual; shaderssofa::simulation::Node; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; Single typedefsofa::simulation::Node; SOFA_ABSTRACT_CLASS(BaseNode, Base)sofa::core::objectmodel::BaseNode; SOFA_ABSTRACT_CLASS2(Node, BaseNode, Context)sofa::simulation::Node; SOFA_CLASS(DAGNode, simulation::Node)sofa::simulation::graph::DAGNode; sofa::simulation::Node::SOFA_CLASS(Context, BaseContext)sofa::core::objectmodel::Context; sofa::core::objectmodel::BaseContext::SOFA_CLASS(BaseContext, Base)sofa::core::objectmodel::BaseContext; solversofa::simulation::Node; SPtr typedefsofa::core::objectmodel::Base; statesofa::simulation::Node; StatusMap typedefsofa::simulation::graph::DAGNodeprotected; time_sofa::core::objectmodel::Context; topologysofa::simulation::Node; topologyObjectsofa::simulation::Node; unsortedsofa::simulation::Node; updateContext() overridesofa::simulation::graph::DAGNodevirtual; updateDescendancy()sofa::simulation::graph::DAGNodeprotected; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateSimulationContext() overridesofa::simulation::graph::DAGNodevirtual; updateVisualContext()sofa::simulation::Nodevirtual; Vec3 typedefsofa::core::objectmodel::BaseContext; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VISITED enum valuesofa::simulation::graph::DAGNodeprotected; VisitedStatus enum namesofa::simulation::graph::DAGNodeprotected; visualLoopsofa::simulation::Node; visualManagersofa::simulation::Node; visualModelsofa::simulation::Node; worldGravity_sofa::core::objectmodel::Context; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseContext() overridesofa::core::objectmodel::BaseContextprotected; ~BaseNode() overridesofa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html:22863,Deployability,update,updateLinks,22863,"lation::Node; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; Single typedefsofa::simulation::Node; SOFA_ABSTRACT_CLASS(BaseNode, Base)sofa::core::objectmodel::BaseNode; SOFA_ABSTRACT_CLASS2(Node, BaseNode, Context)sofa::simulation::Node; SOFA_CLASS(DAGNode, simulation::Node)sofa::simulation::graph::DAGNode; sofa::simulation::Node::SOFA_CLASS(Context, BaseContext)sofa::core::objectmodel::Context; sofa::core::objectmodel::BaseContext::SOFA_CLASS(BaseContext, Base)sofa::core::objectmodel::BaseContext; solversofa::simulation::Node; SPtr typedefsofa::core::objectmodel::Base; statesofa::simulation::Node; StatusMap typedefsofa::simulation::graph::DAGNodeprotected; time_sofa::core::objectmodel::Context; topologysofa::simulation::Node; topologyObjectsofa::simulation::Node; unsortedsofa::simulation::Node; updateContext() overridesofa::simulation::graph::DAGNodevirtual; updateDescendancy()sofa::simulation::graph::DAGNodeprotected; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateSimulationContext() overridesofa::simulation::graph::DAGNodevirtual; updateVisualContext()sofa::simulation::Nodevirtual; Vec3 typedefsofa::core::objectmodel::BaseContext; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VISITED enum valuesofa::simulation::graph::DAGNodeprotected; VisitedStatus enum namesofa::simulation::graph::DAGNodeprotected; visualLoopsofa::simulation::Node; visualManagersofa::simulation::Node; visualModelsofa::simulation::Node; worldGravity_sofa::core::objectmodel::Context; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseContext() overridesofa::core::objectmodel::BaseContextprotected; ~BaseNode() overridesofa::core::objectmodel::BaseNodeprotected; ~Context() override",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html:22933,Deployability,update,updateSimulationContext,22933,"r)sofa::core::objectmodel::Baseinlinestatic; Single typedefsofa::simulation::Node; SOFA_ABSTRACT_CLASS(BaseNode, Base)sofa::core::objectmodel::BaseNode; SOFA_ABSTRACT_CLASS2(Node, BaseNode, Context)sofa::simulation::Node; SOFA_CLASS(DAGNode, simulation::Node)sofa::simulation::graph::DAGNode; sofa::simulation::Node::SOFA_CLASS(Context, BaseContext)sofa::core::objectmodel::Context; sofa::core::objectmodel::BaseContext::SOFA_CLASS(BaseContext, Base)sofa::core::objectmodel::BaseContext; solversofa::simulation::Node; SPtr typedefsofa::core::objectmodel::Base; statesofa::simulation::Node; StatusMap typedefsofa::simulation::graph::DAGNodeprotected; time_sofa::core::objectmodel::Context; topologysofa::simulation::Node; topologyObjectsofa::simulation::Node; unsortedsofa::simulation::Node; updateContext() overridesofa::simulation::graph::DAGNodevirtual; updateDescendancy()sofa::simulation::graph::DAGNodeprotected; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateSimulationContext() overridesofa::simulation::graph::DAGNodevirtual; updateVisualContext()sofa::simulation::Nodevirtual; Vec3 typedefsofa::core::objectmodel::BaseContext; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VISITED enum valuesofa::simulation::graph::DAGNodeprotected; VisitedStatus enum namesofa::simulation::graph::DAGNodeprotected; visualLoopsofa::simulation::Node; visualManagersofa::simulation::Node; visualModelsofa::simulation::Node; worldGravity_sofa::core::objectmodel::Context; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseContext() overridesofa::core::objectmodel::BaseContextprotected; ~BaseNode() overridesofa::core::objectmodel::BaseNodeprotected; ~Context() overridesofa::core::objectmodel::Contextinlineprotectedvirtual; ~DAGNode() overrides",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html:23008,Deployability,update,updateVisualContext,23008,"on::Node; SOFA_ABSTRACT_CLASS(BaseNode, Base)sofa::core::objectmodel::BaseNode; SOFA_ABSTRACT_CLASS2(Node, BaseNode, Context)sofa::simulation::Node; SOFA_CLASS(DAGNode, simulation::Node)sofa::simulation::graph::DAGNode; sofa::simulation::Node::SOFA_CLASS(Context, BaseContext)sofa::core::objectmodel::Context; sofa::core::objectmodel::BaseContext::SOFA_CLASS(BaseContext, Base)sofa::core::objectmodel::BaseContext; solversofa::simulation::Node; SPtr typedefsofa::core::objectmodel::Base; statesofa::simulation::Node; StatusMap typedefsofa::simulation::graph::DAGNodeprotected; time_sofa::core::objectmodel::Context; topologysofa::simulation::Node; topologyObjectsofa::simulation::Node; unsortedsofa::simulation::Node; updateContext() overridesofa::simulation::graph::DAGNodevirtual; updateDescendancy()sofa::simulation::graph::DAGNodeprotected; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateSimulationContext() overridesofa::simulation::graph::DAGNodevirtual; updateVisualContext()sofa::simulation::Nodevirtual; Vec3 typedefsofa::core::objectmodel::BaseContext; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VISITED enum valuesofa::simulation::graph::DAGNodeprotected; VisitedStatus enum namesofa::simulation::graph::DAGNodeprotected; visualLoopsofa::simulation::Node; visualManagersofa::simulation::Node; visualModelsofa::simulation::Node; worldGravity_sofa::core::objectmodel::Context; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseContext() overridesofa::core::objectmodel::BaseContextprotected; ~BaseNode() overridesofa::core::objectmodel::BaseNodeprotected; ~Context() overridesofa::core::objectmodel::Contextinlineprotectedvirtual; ~DAGNode() overridesofa::simulation::graph::DAGNodeprotectedvirtual; ~Node() overridesofa::si",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html:236,Modifiability,inherit,inherited,236,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::graph::DAGNode Member List . This is the complete list of members for sofa::simulation::graph::DAGNode, including all inherited members. _contextsofa::simulation::Nodeprotected; _descendancysofa::simulation::graph::DAGNodeprotected; _precomputedTraversalOrdersofa::simulation::graph::DAGNodeprotected; actionStacksofa::simulation::Nodeprotected; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addChild(BaseNode::SPtr node) finalsofa::simulation::Nodevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addListener(MutationListener *obj)sofa::simulation::Nodevirtual; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addObject(sofa::core::objectmodel::BaseObject::SPtr obj, sofa::core::objectmodel::TypeOfInsertion insertionLocation=sofa::core::objectmodel::TypeOfInsertion::AtEnd) finalsofa::simulation::Nodevirtual; sofa::core::objectmodel::Context::addObject(sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd)sofa::core::objectmodel::BaseContextinlinevirtual; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; animate_sofa::core::objectmodel::Context; animationManagersofa::simulation::Node; Base()sofa::core::objectmodel::Baseprotected; Bas",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html:2622,Modifiability,config,configurationSettingsofa,2622,"back(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; animate_sofa::core::objectmodel::Context; animationManagersofa::simulation::Node; Base()sofa::core::objectmodel::Baseprotected; BaseContext()sofa::core::objectmodel::BaseContextprotected; BaseNode()sofa::core::objectmodel::BaseNodeprotected; BaseType typedefsofa::core::objectmodel::Base; behaviorModelsofa::simulation::Node; canChangeSleepingState() const overridesofa::core::objectmodel::Contextvirtual; childsofa::simulation::Node; ChildIterator typedefsofa::simulation::Node; Children typedefsofa::core::objectmodel::BaseNode; clearLoggedMessages() constsofa::core::objectmodel::Base; clearObjectContext(BaseObject::SPtr obj)sofa::core::objectmodel::BaseNodeprotected; collisionModelsofa::simulation::Node; collisionPipelinesofa::simulation::Node; configurationSettingsofa::simulation::Node; constraintSetsofa::simulation::Node; constraintSolversofa::simulation::Node; Context()sofa::core::objectmodel::Contextprotected; contextObjectsofa::simulation::Node; copyContext(const Context &c)sofa::core::objectmodel::Context; copySimulationContext(const Context &c)sofa::core::objectmodel::Context; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(DAGNode *, sofa::core::objectmodel::BaseObjectDescription *arg)sofa::simulation::graph::DAGNodeinlinestatic; sofa::simulation::Node::create(RealObject *, sofa::core::objectmodel::BaseObjectDescription *arg)sofa::simulation::Nodestatic; sofa::simulation::Node::create(const std::string &name)sofa::simulation::Nodestatic; createChild(const std::string &nodeName) overridesofa::simulation::graph::DAGNodevirtual; d_canChangeSleepingStatesofa::core::objectmodel::Context; d_componentStatesofa::core::objectmodel::Base; d_is",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html:1044,Testability,log,logging,1044," _contextsofa::simulation::Nodeprotected; _descendancysofa::simulation::graph::DAGNodeprotected; _precomputedTraversalOrdersofa::simulation::graph::DAGNodeprotected; actionStacksofa::simulation::Nodeprotected; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addChild(BaseNode::SPtr node) finalsofa::simulation::Nodevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addListener(MutationListener *obj)sofa::simulation::Nodevirtual; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addObject(sofa::core::objectmodel::BaseObject::SPtr obj, sofa::core::objectmodel::TypeOfInsertion insertionLocation=sofa::core::objectmodel::TypeOfInsertion::AtEnd) finalsofa::simulation::Nodevirtual; sofa::core::objectmodel::Context::addObject(sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd)sofa::core::objectmodel::BaseContextinlinevirtual; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; animate_sofa::core::objectmodel::Context; animationManagersofa::simulation::Node; Base()sofa::core::objectmodel::Baseprotected; Bas",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html:3002,Testability,log,logging,3002,"ext()sofa::core::objectmodel::BaseContextprotected; BaseNode()sofa::core::objectmodel::BaseNodeprotected; BaseType typedefsofa::core::objectmodel::Base; behaviorModelsofa::simulation::Node; canChangeSleepingState() const overridesofa::core::objectmodel::Contextvirtual; childsofa::simulation::Node; ChildIterator typedefsofa::simulation::Node; Children typedefsofa::core::objectmodel::BaseNode; clearLoggedMessages() constsofa::core::objectmodel::Base; clearObjectContext(BaseObject::SPtr obj)sofa::core::objectmodel::BaseNodeprotected; collisionModelsofa::simulation::Node; collisionPipelinesofa::simulation::Node; configurationSettingsofa::simulation::Node; constraintSetsofa::simulation::Node; constraintSolversofa::simulation::Node; Context()sofa::core::objectmodel::Contextprotected; contextObjectsofa::simulation::Node; copyContext(const Context &c)sofa::core::objectmodel::Context; copySimulationContext(const Context &c)sofa::core::objectmodel::Context; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(DAGNode *, sofa::core::objectmodel::BaseObjectDescription *arg)sofa::simulation::graph::DAGNodeinlinestatic; sofa::simulation::Node::create(RealObject *, sofa::core::objectmodel::BaseObjectDescription *arg)sofa::simulation::Nodestatic; sofa::simulation::Node::create(const std::string &name)sofa::simulation::Nodestatic; createChild(const std::string &nodeName) overridesofa::simulation::graph::DAGNodevirtual; d_canChangeSleepingStatesofa::core::objectmodel::Context; d_componentStatesofa::core::objectmodel::Base; d_isSleepingsofa::core::objectmodel::Context; d_messageLogCountsofa::core::objectmodel::Basemutable; DAGNode(const std::string &name="""", DAGNode *parent=nullptr)sofa::simulation::graph::DAGNodeprotected; debug_sofa::simulation::Nodeprotected; detachFromGraph() overridesofa::simulation::graph::DAGNodevirtual; DisplayFlags typedefsofa::simulation::graph::DAGNode; doAddChild(",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html:3044,Testability,log,logging,3044,"rotected; BaseNode()sofa::core::objectmodel::BaseNodeprotected; BaseType typedefsofa::core::objectmodel::Base; behaviorModelsofa::simulation::Node; canChangeSleepingState() const overridesofa::core::objectmodel::Contextvirtual; childsofa::simulation::Node; ChildIterator typedefsofa::simulation::Node; Children typedefsofa::core::objectmodel::BaseNode; clearLoggedMessages() constsofa::core::objectmodel::Base; clearObjectContext(BaseObject::SPtr obj)sofa::core::objectmodel::BaseNodeprotected; collisionModelsofa::simulation::Node; collisionPipelinesofa::simulation::Node; configurationSettingsofa::simulation::Node; constraintSetsofa::simulation::Node; constraintSolversofa::simulation::Node; Context()sofa::core::objectmodel::Contextprotected; contextObjectsofa::simulation::Node; copyContext(const Context &c)sofa::core::objectmodel::Context; copySimulationContext(const Context &c)sofa::core::objectmodel::Context; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(DAGNode *, sofa::core::objectmodel::BaseObjectDescription *arg)sofa::simulation::graph::DAGNodeinlinestatic; sofa::simulation::Node::create(RealObject *, sofa::core::objectmodel::BaseObjectDescription *arg)sofa::simulation::Nodestatic; sofa::simulation::Node::create(const std::string &name)sofa::simulation::Nodestatic; createChild(const std::string &nodeName) overridesofa::simulation::graph::DAGNodevirtual; d_canChangeSleepingStatesofa::core::objectmodel::Context; d_componentStatesofa::core::objectmodel::Base; d_isSleepingsofa::core::objectmodel::Context; d_messageLogCountsofa::core::objectmodel::Basemutable; DAGNode(const std::string &name="""", DAGNode *parent=nullptr)sofa::simulation::graph::DAGNodeprotected; debug_sofa::simulation::Nodeprotected; detachFromGraph() overridesofa::simulation::graph::DAGNodevirtual; DisplayFlags typedefsofa::simulation::graph::DAGNode; doAddChild(BaseNode::SPtr node) overridesofa::simulat",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html:10312,Testability,log,logging,10312,"t()sofa::core::objectmodel::BaseContextstatic; getDefinitionSourceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; GetDownObjectsVisitor classsofa::simulation::graph::DAGNodefriend; getDt() const overridesofa::core::objectmodel::Contextvirtual; getFirstParent() const overridesofa::simulation::graph::DAGNodevirtual; getGravity() const overridesofa::core::objectmodel::Contextvirtual; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLocalObjects(const sofa::core::objectmodel::ClassInfo &class_info, DAGNode::GetObjectsCallBack &container, const sofa::core::objectmodel::TagSet &tags) constsofa::simulation::graph::DAGNodeprotected; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getMass() constsofa::core::objectmodel::BaseContextvirtual; getMechanicalState() const overridesofa::simulation::Nodevirtual; getMeshTopology(SearchDirection dir=SearchUp) constsofa::core::objectmodel::BaseContextvirtual; getMeshTopologyLink(SearchDirection dir=SearchUp) const overridesofa::simulation::graph::DAGNodevirtual; getName() constsofa::core::objectmodel::Baseinline; getNameHelper()sofa::core::objectmodel::BaseContextinline; getNameSpaceName() constsofa::core::objectmodel::Base; getNbParents() const overridesofa::simulation::graph::DAGNodevirtual; getNodeInGraph(const std::string &absolutePath) constsofa::simulation::Node; getNodeObject(Object *&result)sofa::simulation::Nodeinline; getNodeObject()sofa::simulation::Nodeinline; getNodeObjects(Container *list)sofa::simulation::Nodeinline; getNodeObjects(Container *result)sofa::simulation::Nodeinline; getNodeObjects(Container &res",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html:10354,Testability,log,logging,10354,"tic; getDefinitionSourceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; GetDownObjectsVisitor classsofa::simulation::graph::DAGNodefriend; getDt() const overridesofa::core::objectmodel::Contextvirtual; getFirstParent() const overridesofa::simulation::graph::DAGNodevirtual; getGravity() const overridesofa::core::objectmodel::Contextvirtual; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLocalObjects(const sofa::core::objectmodel::ClassInfo &class_info, DAGNode::GetObjectsCallBack &container, const sofa::core::objectmodel::TagSet &tags) constsofa::simulation::graph::DAGNodeprotected; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getMass() constsofa::core::objectmodel::BaseContextvirtual; getMechanicalState() const overridesofa::simulation::Nodevirtual; getMeshTopology(SearchDirection dir=SearchUp) constsofa::core::objectmodel::BaseContextvirtual; getMeshTopologyLink(SearchDirection dir=SearchUp) const overridesofa::simulation::graph::DAGNodevirtual; getName() constsofa::core::objectmodel::Baseinline; getNameHelper()sofa::core::objectmodel::BaseContextinline; getNameSpaceName() constsofa::core::objectmodel::Base; getNbParents() const overridesofa::simulation::graph::DAGNodevirtual; getNodeInGraph(const std::string &absolutePath) constsofa::simulation::Node; getNodeObject(Object *&result)sofa::simulation::Nodeinline; getNodeObject()sofa::simulation::Nodeinline; getNodeObjects(Container *list)sofa::simulation::Nodeinline; getNodeObjects(Container *result)sofa::simulation::Nodeinline; getNodeObjects(Container &result)sofa::simulation::Nodeinline; getNodeO",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html:22880,Testability,log,logErrors,22880,"ortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; Single typedefsofa::simulation::Node; SOFA_ABSTRACT_CLASS(BaseNode, Base)sofa::core::objectmodel::BaseNode; SOFA_ABSTRACT_CLASS2(Node, BaseNode, Context)sofa::simulation::Node; SOFA_CLASS(DAGNode, simulation::Node)sofa::simulation::graph::DAGNode; sofa::simulation::Node::SOFA_CLASS(Context, BaseContext)sofa::core::objectmodel::Context; sofa::core::objectmodel::BaseContext::SOFA_CLASS(BaseContext, Base)sofa::core::objectmodel::BaseContext; solversofa::simulation::Node; SPtr typedefsofa::core::objectmodel::Base; statesofa::simulation::Node; StatusMap typedefsofa::simulation::graph::DAGNodeprotected; time_sofa::core::objectmodel::Context; topologysofa::simulation::Node; topologyObjectsofa::simulation::Node; unsortedsofa::simulation::Node; updateContext() overridesofa::simulation::graph::DAGNodevirtual; updateDescendancy()sofa::simulation::graph::DAGNodeprotected; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateSimulationContext() overridesofa::simulation::graph::DAGNodevirtual; updateVisualContext()sofa::simulation::Nodevirtual; Vec3 typedefsofa::core::objectmodel::BaseContext; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VISITED enum valuesofa::simulation::graph::DAGNodeprotected; VisitedStatus enum namesofa::simulation::graph::DAGNodeprotected; visualLoopsofa::simulation::Node; visualManagersofa::simulation::Node; visualModelsofa::simulation::Node; worldGravity_sofa::core::objectmodel::Context; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseContext() overridesofa::core::objectmodel::BaseContextprotected; ~BaseNode() overridesofa::core::objectmodel::BaseNodeprotected; ~Context() overridesofa::core::obje",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html:2401,Usability,clear,clearLoggedMessages,2401,"core::objectmodel::BaseContextinlinevirtual; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; animate_sofa::core::objectmodel::Context; animationManagersofa::simulation::Node; Base()sofa::core::objectmodel::Baseprotected; BaseContext()sofa::core::objectmodel::BaseContextprotected; BaseNode()sofa::core::objectmodel::BaseNodeprotected; BaseType typedefsofa::core::objectmodel::Base; behaviorModelsofa::simulation::Node; canChangeSleepingState() const overridesofa::core::objectmodel::Contextvirtual; childsofa::simulation::Node; ChildIterator typedefsofa::simulation::Node; Children typedefsofa::core::objectmodel::BaseNode; clearLoggedMessages() constsofa::core::objectmodel::Base; clearObjectContext(BaseObject::SPtr obj)sofa::core::objectmodel::BaseNodeprotected; collisionModelsofa::simulation::Node; collisionPipelinesofa::simulation::Node; configurationSettingsofa::simulation::Node; constraintSetsofa::simulation::Node; constraintSolversofa::simulation::Node; Context()sofa::core::objectmodel::Contextprotected; contextObjectsofa::simulation::Node; copyContext(const Context &c)sofa::core::objectmodel::Context; copySimulationContext(const Context &c)sofa::core::objectmodel::Context; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(DAGNode *, sofa::core::objectmodel::BaseObjectDescription *arg)sofa::simulation::graph::DAGNodeinlinestatic; sofa::simulation::Node::create(RealObject *, sofa::core::objectmodel::BaseObjectDescription *arg)sofa::simulation::Nodestatic; sofa::simulation::Node::create(const std::string &name)sofa:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html:2459,Usability,clear,clearObjectContext,2459,"Callback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; animate_sofa::core::objectmodel::Context; animationManagersofa::simulation::Node; Base()sofa::core::objectmodel::Baseprotected; BaseContext()sofa::core::objectmodel::BaseContextprotected; BaseNode()sofa::core::objectmodel::BaseNodeprotected; BaseType typedefsofa::core::objectmodel::Base; behaviorModelsofa::simulation::Node; canChangeSleepingState() const overridesofa::core::objectmodel::Contextvirtual; childsofa::simulation::Node; ChildIterator typedefsofa::simulation::Node; Children typedefsofa::core::objectmodel::BaseNode; clearLoggedMessages() constsofa::core::objectmodel::Base; clearObjectContext(BaseObject::SPtr obj)sofa::core::objectmodel::BaseNodeprotected; collisionModelsofa::simulation::Node; collisionPipelinesofa::simulation::Node; configurationSettingsofa::simulation::Node; constraintSetsofa::simulation::Node; constraintSolversofa::simulation::Node; Context()sofa::core::objectmodel::Contextprotected; contextObjectsofa::simulation::Node; copyContext(const Context &c)sofa::core::objectmodel::Context; copySimulationContext(const Context &c)sofa::core::objectmodel::Context; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(DAGNode *, sofa::core::objectmodel::BaseObjectDescription *arg)sofa::simulation::graph::DAGNodeinlinestatic; sofa::simulation::Node::create(RealObject *, sofa::core::objectmodel::BaseObjectDescription *arg)sofa::simulation::Nodestatic; sofa::simulation::Node::create(const std::string &name)sofa::simulation::Nodestatic; createChild(const std::string &no",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:666,Availability,down,down,666,"﻿. SOFA API: sofa::simulation::graph::DAGNode Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members . sofa::simulation::graph::DAGNode Class Reference . #include <DAGNode.h>. Inheritance diagram for sofa::simulation::graph::DAGNode:. [legend]; Detailed Description; Define the structure of the scene as a Directed Acyclic Graph. Contains component objects (as pointer lists) and parents/childs (as DAGNode objects).; The visitor traversal is performed in two passes:; a complete top-down traversal; then a complete bottom-up traversal in the exact invert order than the top-down traversal NB: contrary to the ""tree"" traversal, there are no interlinked forward/backward callbacks. There are only forward then only backward callbacks. Note that nodes created during a traversal are not traversed if they are created upper than the current node during the top-down traversal or if they are created during the bottom-up traversal. . Classes; struct  StatusStruct;  wrapper to use VisitedStatus in a std::map (to ensure the default map insertion will give NOT_VISITED) More...;  . Protected Attributes; LinkParents l_parents;  ;  Protected Attributes inherited from sofa::simulation::Node; bool debug_;  ; bool initialized;  ; std::stack< Visitor * > actionStack;  ; BaseContext * _context;  ; type::vector< MutationListener * > listener;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Protected Attributes inherited from sofa::core::obj",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:757,Availability,down,down,757,"﻿. SOFA API: sofa::simulation::graph::DAGNode Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members . sofa::simulation::graph::DAGNode Class Reference . #include <DAGNode.h>. Inheritance diagram for sofa::simulation::graph::DAGNode:. [legend]; Detailed Description; Define the structure of the scene as a Directed Acyclic Graph. Contains component objects (as pointer lists) and parents/childs (as DAGNode objects).; The visitor traversal is performed in two passes:; a complete top-down traversal; then a complete bottom-up traversal in the exact invert order than the top-down traversal NB: contrary to the ""tree"" traversal, there are no interlinked forward/backward callbacks. There are only forward then only backward callbacks. Note that nodes created during a traversal are not traversed if they are created upper than the current node during the top-down traversal or if they are created during the bottom-up traversal. . Classes; struct  StatusStruct;  wrapper to use VisitedStatus in a std::map (to ensure the default map insertion will give NOT_VISITED) More...;  . Protected Attributes; LinkParents l_parents;  ;  Protected Attributes inherited from sofa::simulation::Node; bool debug_;  ; bool initialized;  ; std::stack< Visitor * > actionStack;  ; BaseContext * _context;  ; type::vector< MutationListener * > listener;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Protected Attributes inherited from sofa::core::obj",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:1040,Availability,down,down,1040," sofa::simulation::graph::DAGNode Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members . sofa::simulation::graph::DAGNode Class Reference . #include <DAGNode.h>. Inheritance diagram for sofa::simulation::graph::DAGNode:. [legend]; Detailed Description; Define the structure of the scene as a Directed Acyclic Graph. Contains component objects (as pointer lists) and parents/childs (as DAGNode objects).; The visitor traversal is performed in two passes:; a complete top-down traversal; then a complete bottom-up traversal in the exact invert order than the top-down traversal NB: contrary to the ""tree"" traversal, there are no interlinked forward/backward callbacks. There are only forward then only backward callbacks. Note that nodes created during a traversal are not traversed if they are created upper than the current node during the top-down traversal or if they are created during the bottom-up traversal. . Classes; struct  StatusStruct;  wrapper to use VisitedStatus in a std::map (to ensure the default map insertion will give NOT_VISITED) More...;  . Protected Attributes; LinkParents l_parents;  ;  Protected Attributes inherited from sofa::simulation::Node; bool debug_;  ; bool initialized;  ; std::stack< Visitor * > actionStack;  ; BaseContext * _context;  ; type::vector< MutationListener * > listener;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::B",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:20004,Availability,down,down,20004," sofa::core::objectmodel::BaseContext;  SOFA_CLASS (BaseContext, Base);  ; ComponentNameHelper & getNameHelper ();  Returns utilitary object to uniquely name objects in the context. More...;  ; virtual core::topology::BaseMeshTopology * getMeshTopology (SearchDirection dir=SearchUp) const;  Mesh Topology (unified interface for both static and dynamic topologies) More...;  ; virtual core::behavior::BaseMass * getMass () const;  Mass. More...;  ; template<class Object , class Container > ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ; template<class Container > ; Container * getObjects (Container *result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:20190,Availability,down,down,20190,"logy (unified interface for both static and dynamic topologies) More...;  ; virtual core::behavior::BaseMass * getMass () const;  Mass. More...;  ; template<class Object , class Container > ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ; template<class Container > ; Container * getObjects (Container *result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:20383,Availability,down,down,20383," ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ; template<class Container > ; Container * getObjects (Container *result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:20597,Availability,down,down,20597,"result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:20821,Availability,down,down,20821,"ate<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly se",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:21052,Availability,down,down,21052,"wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:21278,Availability,down,down,21278," the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  G",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:21514,Availability,down,down,21514,"late<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access templa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:21757,Availability,down,down,21757," (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:22467,Availability,down,down,22467,"ection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; virtual void setMechanicalState (BaseObject *);  Mechanical Degrees-of-Freedom. More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ; virtual bool addObject (sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd);  Add an object, or return false if not supported. More...;  ; virtual bool removeObject (sptr< BaseObject >); ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:22726,Availability,down,down,22726,"Direction dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; virtual void setMechanicalState (BaseObject *);  Mechanical Degrees-of-Freedom. More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ; virtual bool addObject (sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd);  Add an object, or return false if not supported. More...;  ; virtual bool removeObject (sptr< BaseObject >);  Remove an object, or return false if not supported. More...;  ; virtual void notifyAddSlave (core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  ; virtual void notifyRemoveSlave (core::objectmodel::BaseObject *ma",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:22997,Availability,down,down,22997,"rapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; virtual void setMechanicalState (BaseObject *);  Mechanical Degrees-of-Freedom. More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ; virtual bool addObject (sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd);  Add an object, or return false if not supported. More...;  ; virtual bool removeObject (sptr< BaseObject >);  Remove an object, or return false if not supported. More...;  ; virtual void notifyAddSlave (core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  ; virtual void notifyRemoveSlave (core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  ; virtual void notifyMoveSlave (core::objectmodel::BaseObject *previousMaster, core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  . Static Public Member Functions; static const std::string Ge",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:37155,Availability,down,down,37155,"etMeshTopologyLink(). sofa::core::topology::BaseMeshTopology * sofa::simulation::graph::DAGNode::getMeshTopologyLink ; (; SearchDirection ; dir = SearchUp); const. overridevirtual . Mesh Topology that is relevant for this context (within it or its parents until a mapping is reached that does not preserve topologies). ; Reimplemented from sofa::simulation::Node. ◆ getNbParents(). size_t sofa::simulation::graph::DAGNode::getNbParents ; (; ); const. overridevirtual . returns number of parents ; Implements sofa::core::objectmodel::BaseNode. ◆ getObject() [1/2]. void * sofa::simulation::graph::DAGNode::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . const sofa::core::objectmodel::TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. overridevirtual . Generic object access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type,; Generic object access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Implements sofa::simulation::Node. ◆ getObject() [2/2]. void * sofa::simulation::graph::DAGNode::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . const std::string & ; path . ); const. overridevirtual . Generic object access, given a path from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Implements sofa::simulation::Node. ◆ getObjects(). void sofa::simulation::graph::DAGNode::getObjects ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const sofa::core::objectmodel::TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. overridevirtual . Generic list of objects access, given a set of required tags, possibly searching up or down from the current context; Note ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:37331,Availability,down,down,37331,"etMeshTopologyLink(). sofa::core::topology::BaseMeshTopology * sofa::simulation::graph::DAGNode::getMeshTopologyLink ; (; SearchDirection ; dir = SearchUp); const. overridevirtual . Mesh Topology that is relevant for this context (within it or its parents until a mapping is reached that does not preserve topologies). ; Reimplemented from sofa::simulation::Node. ◆ getNbParents(). size_t sofa::simulation::graph::DAGNode::getNbParents ; (; ); const. overridevirtual . returns number of parents ; Implements sofa::core::objectmodel::BaseNode. ◆ getObject() [1/2]. void * sofa::simulation::graph::DAGNode::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . const sofa::core::objectmodel::TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. overridevirtual . Generic object access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type,; Generic object access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Implements sofa::simulation::Node. ◆ getObject() [2/2]. void * sofa::simulation::graph::DAGNode::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . const std::string & ; path . ); const. overridevirtual . Generic object access, given a path from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Implements sofa::simulation::Node. ◆ getObjects(). void sofa::simulation::graph::DAGNode::getObjects ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const sofa::core::objectmodel::TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. overridevirtual . Generic list of objects access, given a set of required tags, possibly searching up or down from the current context; Note ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:38249,Availability,down,down,38249,"plate wrapper method should generally be used to have the correct return type, ; Implements sofa::simulation::Node. ◆ getObject() [2/2]. void * sofa::simulation::graph::DAGNode::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . const std::string & ; path . ); const. overridevirtual . Generic object access, given a path from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Implements sofa::simulation::Node. ◆ getObjects(). void sofa::simulation::graph::DAGNode::getObjects ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const sofa::core::objectmodel::TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. overridevirtual . Generic list of objects access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type,; Generic list of objects access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Implements sofa::simulation::Node. ◆ getParents(). sofa::core::objectmodel::BaseNode::Parents sofa::simulation::graph::DAGNode::getParents ; (; ); const. overridevirtual . Get a list of parent node. ; Implements sofa::core::objectmodel::BaseNode. ◆ hasAncestor() [1/2]. bool sofa::simulation::graph::DAGNode::hasAncestor ; (; const BaseContext * ; context); const. overridevirtual . Test if the given context is an ancestor of this context. An ancestor is a parent or (recursively) the parent of an ancestor. ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ hasAncestor() [2/2]. bool sofa::simulation::graph::DAGNode::hasAncestor ; (; const BaseNode * ; node); const. inlineoverridevirtual . Test if the given context is an ancestor of this context. An ancestor is a parent or (recursively) the parent of",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:38434,Availability,down,down,38434,"plate wrapper method should generally be used to have the correct return type, ; Implements sofa::simulation::Node. ◆ getObject() [2/2]. void * sofa::simulation::graph::DAGNode::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . const std::string & ; path . ); const. overridevirtual . Generic object access, given a path from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Implements sofa::simulation::Node. ◆ getObjects(). void sofa::simulation::graph::DAGNode::getObjects ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const sofa::core::objectmodel::TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. overridevirtual . Generic list of objects access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type,; Generic list of objects access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Implements sofa::simulation::Node. ◆ getParents(). sofa::core::objectmodel::BaseNode::Parents sofa::simulation::graph::DAGNode::getParents ; (; ); const. overridevirtual . Get a list of parent node. ; Implements sofa::core::objectmodel::BaseNode. ◆ hasAncestor() [1/2]. bool sofa::simulation::graph::DAGNode::hasAncestor ; (; const BaseContext * ; context); const. overridevirtual . Test if the given context is an ancestor of this context. An ancestor is a parent or (recursively) the parent of an ancestor. ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ hasAncestor() [2/2]. bool sofa::simulation::graph::DAGNode::hasAncestor ; (; const BaseNode * ; node); const. inlineoverridevirtual . Test if the given context is an ancestor of this context. An ancestor is a parent or (recursively) the parent of",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:3736,Deployability,update,updateContext,3736,"t BaseContext *context) const;  Test if the given context is a parent of this context. More...;  ; bool hasAncestor (const BaseNode *node) const override;  ; bool hasAncestor (const BaseContext *context) const override;  ; void * getObject (const sofa::core::objectmodel::ClassInfo &class_info, const sofa::core::objectmodel::TagSet &tags, SearchDirection dir=SearchUp) const override;  ; void * getObject (const sofa::core::objectmodel::ClassInfo &class_info, const std::string &path) const override;  ; void getObjects (const sofa::core::objectmodel::ClassInfo &class_info, GetObjectsCallBack &container, const sofa::core::objectmodel::TagSet &tags, SearchDirection dir=SearchUp) const override;  ; sofa::core::topology::BaseMeshTopology * getMeshTopologyLink (SearchDirection dir=SearchUp) const override;  ; void initVisualContext () override;  Called during initialization to correctly propagate the visual context to the children. More...;  ; void updateContext () override;  Update the whole context values, based on parent and local ContextObjects. More...;  ; void updateSimulationContext () override;  Update the simulation context values(gravity, time...), based on parent and local ContextObjects. More...;  ; Node * findCommonParent (Node *node2) override;  ; void precomputeTraversalOrder (const sofa::core::ExecParams *params) override;  compute the traversal order from this Node More...;  ; virtual void moveChild (BaseNode::SPtr node) override;  Move a node in this from another node. More...;  ;  Public Member Functions inherited from sofa::simulation::Node;  SOFA_ABSTRACT_CLASS2 (Node, BaseNode, Context);  ; virtual void removeControllers ();  Remove odesolvers and mastercontroler. More...;  ; Node * getChild (const std::string &name) const;  Find a child node given its name. More...;  ; Node * getTreeNode (const std::string &name) const;  Get a descendant node given its name. More...;  ; Node * getNodeInGraph (const std::string &absolutePath) const;  Get a node in the s",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:3856,Deployability,update,updateSimulationContext,3856,"or (const BaseNode *node) const override;  ; bool hasAncestor (const BaseContext *context) const override;  ; void * getObject (const sofa::core::objectmodel::ClassInfo &class_info, const sofa::core::objectmodel::TagSet &tags, SearchDirection dir=SearchUp) const override;  ; void * getObject (const sofa::core::objectmodel::ClassInfo &class_info, const std::string &path) const override;  ; void getObjects (const sofa::core::objectmodel::ClassInfo &class_info, GetObjectsCallBack &container, const sofa::core::objectmodel::TagSet &tags, SearchDirection dir=SearchUp) const override;  ; sofa::core::topology::BaseMeshTopology * getMeshTopologyLink (SearchDirection dir=SearchUp) const override;  ; void initVisualContext () override;  Called during initialization to correctly propagate the visual context to the children. More...;  ; void updateContext () override;  Update the whole context values, based on parent and local ContextObjects. More...;  ; void updateSimulationContext () override;  Update the simulation context values(gravity, time...), based on parent and local ContextObjects. More...;  ; Node * findCommonParent (Node *node2) override;  ; void precomputeTraversalOrder (const sofa::core::ExecParams *params) override;  compute the traversal order from this Node More...;  ; virtual void moveChild (BaseNode::SPtr node) override;  Move a node in this from another node. More...;  ;  Public Member Functions inherited from sofa::simulation::Node;  SOFA_ABSTRACT_CLASS2 (Node, BaseNode, Context);  ; virtual void removeControllers ();  Remove odesolvers and mastercontroler. More...;  ; Node * getChild (const std::string &name) const;  Find a child node given its name. More...;  ; Node * getTreeNode (const std::string &name) const;  Get a descendant node given its name. More...;  ; Node * getNodeInGraph (const std::string &absolutePath) const;  Get a node in the scene graph matching the given absolute path. More...;  ; Children getChildren () const override;  Get children nod",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:5404,Deployability,update,updateVisualContext,5404,");  Remove odesolvers and mastercontroler. More...;  ; Node * getChild (const std::string &name) const;  Find a child node given its name. More...;  ; Node * getTreeNode (const std::string &name) const;  Get a descendant node given its name. More...;  ; Node * getNodeInGraph (const std::string &absolutePath) const;  Get a node in the scene graph matching the given absolute path. More...;  ; Children getChildren () const override;  Get children nodes. More...;  ; BaseContext * getRootContext () const override;  Get the root context of the graph. More...;  ; Node * setDebug (bool);  ; bool getDebug () const;  ; void printComponents ();  ; const BaseContext * getContext () const override;  Get this node context. More...;  ; BaseContext * getContext () override;  Get this node context. More...;  ; void propagateEvent (const sofa::core::ExecParams *params, sofa::core::objectmodel::Event *event) override;  Propagate an event. More...;  ; virtual void updateVisualContext ();  Update the visual context values, based on parent and local ContextObjects. More...;  ; virtual void initialize ();  Must be called after each graph modification. Do not call it directly, apply an InitVisitor instead. More...;  ; virtual void setDefaultVisualContextValue ();  Called after initialization to set the default value of the visual context. More...;  ; void setSleeping (bool val) override;  override context setSleeping to add notification. More...;  ; virtual void addListener (MutationListener *obj);  ; virtual void removeListener (MutationListener *obj);  ; void parse (sofa::core::objectmodel::BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; void init (const sofa::core::ExecParams *params);  Initialize the components. More...;  ; bool isInitialized () const;  ; void reinit (const sofa::core::ExecParams *params);  Apply modifications to the components. More...;  ; void draw (sofa::core::v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:15451,Deployability,update,updateLinks,15451,"d::string > &str);  Assign the field values stored in the given list of name + value pairs of strings. More...;  ; virtual void parseFields (const std::map< std::string, std::string * > &str);  Assign the field values stored in the given map of name -> value pairs. More...;  ; void writeDatas (std::map< std::string, std::string * > &str);  Write the current field values to the given map of name -> value pairs. More...;  ; void writeDatas (std::ostream &out, const std::string &separator="" "");  ; BaseData * findData (const std::string &name) const;  ; std::vector< BaseData * > findGlobalField (const std::string &name) const;  Find data fields given a name: several can be found as we look into the alias map. More...;  ; BaseLink * findLink (const std::string &name) const;  ; std::vector< BaseLink * > findLinks (const std::string &name) const;  Find link fields given a name: several can be found as we look into the alias map. More...;  ; virtual void updateLinks (bool logErrors=true);  Update pointers in case the pointed-to objects have appeared. More...;  ; template<class T > ; BaseData::BaseInitData initData (::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataFlags dataflags);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; BaseData::BaseInitData initData (Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; Data< T >::InitData initData (Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; void addData (BaseData *f, const std::string &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:28076,Deployability,update,updateDescendancy,28076,"name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Context;  Context ();  ; virtual ~Context () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseContext;  BaseContext ();  ;  ~BaseContext () override;  . @internal stuff related to the DAG traversal; enum  VisitedStatus { NOT_VISITED =0; , VISITED; , PRUNED; };  traversal flags More...;  ; typedef std::map< DAGNode *, StatusStruct > StatusMap;  map structure to store a traversal flag for each DAGNode More...;  ; typedef std::list< DAGNode * > NodeList;  list of DAGNode* More...;  ; std::set< DAGNode * > _descendancy;  all child nodes (unordered) More...;  ; NodeList _precomputedTraversalOrder;  the ordered list of Node to traverse from this Node More...;  ; void setDirtyDescendancy ();  bottom-up traversal removing descendancy More...;  ; void updateDescendancy ();  traversal updating the descendancy More...;  ; void executeVisitorTopDown (simulation::Visitor *action, NodeList &executedNodes, StatusMap &statusMap, DAGNode *visitorRoot);  ; void executeVisitorBottomUp (simulation::Visitor *action, NodeList &executedNodes);  . @internal stuff related to getObjects; class GetDownObjectsVisitor;  ; class GetUpObjectsVisitor;  ; void getLocalObjects (const sofa::core::objectmodel::ClassInfo &class_info, DAGNode::GetObjectsCallBack &container, const sofa::core::objectmodel::TagSet &tags) const;  get node's local objects respecting specified class_info and tags More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Node; NodeSequence< Node, true > child;  ; NodeSequence< sofa::core::objectmodel::BaseObject, true > object;  ; NodeSequence< sofa::core::BehaviorModel > behaviorModel;  ; NodeSequence< sofa::core::BaseMapping > mapping;  ; NodeSequence< sofa::core::behavior::OdeSolver > solver;  ; NodeSequence< sofa::core::b",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:29761,Deployability,configurat,configurationSetting,29761,"rom sofa::simulation::Node; NodeSequence< Node, true > child;  ; NodeSequence< sofa::core::objectmodel::BaseObject, true > object;  ; NodeSequence< sofa::core::BehaviorModel > behaviorModel;  ; NodeSequence< sofa::core::BaseMapping > mapping;  ; NodeSequence< sofa::core::behavior::OdeSolver > solver;  ; NodeSequence< sofa::core::behavior::ConstraintSolver > constraintSolver;  ; NodeSequence< sofa::core::behavior::BaseLinearSolver > linearSolver;  ; NodeSequence< sofa::core::topology::BaseTopologyObject > topologyObject;  ; NodeSequence< sofa::core::behavior::BaseForceField > forceField;  ; NodeSequence< sofa::core::behavior::BaseInteractionForceField > interactionForceField;  ; NodeSequence< sofa::core::behavior::BaseProjectiveConstraintSet > projectiveConstraintSet;  ; NodeSequence< sofa::core::behavior::BaseConstraintSet > constraintSet;  ; NodeSequence< sofa::core::objectmodel::ContextObject > contextObject;  ; NodeSequence< sofa::core::objectmodel::ConfigurationSetting > configurationSetting;  ; NodeSequence< sofa::core::visual::Shader > shaders;  ; NodeSequence< sofa::core::visual::VisualModel > visualModel;  ; NodeSequence< sofa::core::visual::VisualManager > visualManager;  ; NodeSequence< sofa::core::CollisionModel > collisionModel;  ; NodeSequence< sofa::core::objectmodel::BaseObject > unsorted;  ; NodeSingle< sofa::core::behavior::BaseAnimationLoop > animationManager;  ; NodeSingle< sofa::core::visual::VisualLoop > visualLoop;  ; NodeSingle< sofa::core::topology::Topology > topology;  ; NodeSingle< sofa::core::topology::BaseMeshTopology > meshTopology;  ; NodeSingle< sofa::core::BaseState > state;  ; NodeSingle< sofa::core::behavior::BaseMechanicalState > mechanicalState;  ; NodeSingle< sofa::core::BaseMapping > mechanicalMapping;  ; NodeSingle< sofa::core::behavior::BaseMass > mass;  ; NodeSingle< sofa::core::collision::Pipeline > collisionPipeline;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData *",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:40762,Deployability,update,updateContext,40762,"rent of this node. ; Implements sofa::core::objectmodel::BaseNode. ◆ initVisualContext(). void sofa::simulation::graph::DAGNode::initVisualContext ; (; ). overridevirtual . Called during initialization to correctly propagate the visual context to the children. ; Reimplemented from sofa::simulation::Node. ◆ moveChild(). void sofa::simulation::graph::DAGNode::moveChild ; (; BaseNode::SPtr ; node). overridevirtual . Move a node in this from another node. ; Implements sofa::simulation::Node. ◆ precomputeTraversalOrder(). void sofa::simulation::graph::DAGNode::precomputeTraversalOrder ; (; const sofa::core::ExecParams * ; params). overridevirtual . compute the traversal order from this Node ; Reimplemented from sofa::simulation::Node. ◆ setDirtyDescendancy(). void sofa::simulation::graph::DAGNode::setDirtyDescendancy ; (; ). protected . bottom-up traversal removing descendancy . ◆ SOFA_CLASS(). sofa::simulation::graph::DAGNode::SOFA_CLASS ; (; DAGNode ; , . simulation::Node ;  . ). ◆ updateContext(). void sofa::simulation::graph::DAGNode::updateContext ; (; ). overridevirtual . Update the whole context values, based on parent and local ContextObjects. ; Reimplemented from sofa::simulation::Node. ◆ updateDescendancy(). void sofa::simulation::graph::DAGNode::updateDescendancy ; (; ). protected . traversal updating the descendancy . ◆ updateSimulationContext(). void sofa::simulation::graph::DAGNode::updateSimulationContext ; (; ). overridevirtual . Update the simulation context values(gravity, time...), based on parent and local ContextObjects. ; Reimplemented from sofa::simulation::Node. Enum details. ◆ VisitedStatus. enum sofa::simulation::graph::DAGNode::VisitedStatus. protected . traversal flags . EnumeratorNOT_VISITED ; VISITED ; PRUNED . Related details. ◆ GetDownObjectsVisitor. friend class GetDownObjectsVisitor. friend . ◆ GetUpObjectsVisitor. friend class GetUpObjectsVisitor. friend . sofasimulationgraphDAGNode; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:40818,Deployability,update,updateContext,40818,"his node. ; Implements sofa::core::objectmodel::BaseNode. ◆ initVisualContext(). void sofa::simulation::graph::DAGNode::initVisualContext ; (; ). overridevirtual . Called during initialization to correctly propagate the visual context to the children. ; Reimplemented from sofa::simulation::Node. ◆ moveChild(). void sofa::simulation::graph::DAGNode::moveChild ; (; BaseNode::SPtr ; node). overridevirtual . Move a node in this from another node. ; Implements sofa::simulation::Node. ◆ precomputeTraversalOrder(). void sofa::simulation::graph::DAGNode::precomputeTraversalOrder ; (; const sofa::core::ExecParams * ; params). overridevirtual . compute the traversal order from this Node ; Reimplemented from sofa::simulation::Node. ◆ setDirtyDescendancy(). void sofa::simulation::graph::DAGNode::setDirtyDescendancy ; (; ). protected . bottom-up traversal removing descendancy . ◆ SOFA_CLASS(). sofa::simulation::graph::DAGNode::SOFA_CLASS ; (; DAGNode ; , . simulation::Node ;  . ). ◆ updateContext(). void sofa::simulation::graph::DAGNode::updateContext ; (; ). overridevirtual . Update the whole context values, based on parent and local ContextObjects. ; Reimplemented from sofa::simulation::Node. ◆ updateDescendancy(). void sofa::simulation::graph::DAGNode::updateDescendancy ; (; ). protected . traversal updating the descendancy . ◆ updateSimulationContext(). void sofa::simulation::graph::DAGNode::updateSimulationContext ; (; ). overridevirtual . Update the simulation context values(gravity, time...), based on parent and local ContextObjects. ; Reimplemented from sofa::simulation::Node. Enum details. ◆ VisitedStatus. enum sofa::simulation::graph::DAGNode::VisitedStatus. protected . traversal flags . EnumeratorNOT_VISITED ; VISITED ; PRUNED . Related details. ◆ GetDownObjectsVisitor. friend class GetDownObjectsVisitor. friend . ◆ GetUpObjectsVisitor. friend class GetUpObjectsVisitor. friend . sofasimulationgraphDAGNode; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:40980,Deployability,update,updateDescendancy,40980,"his node. ; Implements sofa::core::objectmodel::BaseNode. ◆ initVisualContext(). void sofa::simulation::graph::DAGNode::initVisualContext ; (; ). overridevirtual . Called during initialization to correctly propagate the visual context to the children. ; Reimplemented from sofa::simulation::Node. ◆ moveChild(). void sofa::simulation::graph::DAGNode::moveChild ; (; BaseNode::SPtr ; node). overridevirtual . Move a node in this from another node. ; Implements sofa::simulation::Node. ◆ precomputeTraversalOrder(). void sofa::simulation::graph::DAGNode::precomputeTraversalOrder ; (; const sofa::core::ExecParams * ; params). overridevirtual . compute the traversal order from this Node ; Reimplemented from sofa::simulation::Node. ◆ setDirtyDescendancy(). void sofa::simulation::graph::DAGNode::setDirtyDescendancy ; (; ). protected . bottom-up traversal removing descendancy . ◆ SOFA_CLASS(). sofa::simulation::graph::DAGNode::SOFA_CLASS ; (; DAGNode ; , . simulation::Node ;  . ). ◆ updateContext(). void sofa::simulation::graph::DAGNode::updateContext ; (; ). overridevirtual . Update the whole context values, based on parent and local ContextObjects. ; Reimplemented from sofa::simulation::Node. ◆ updateDescendancy(). void sofa::simulation::graph::DAGNode::updateDescendancy ; (; ). protected . traversal updating the descendancy . ◆ updateSimulationContext(). void sofa::simulation::graph::DAGNode::updateSimulationContext ; (; ). overridevirtual . Update the simulation context values(gravity, time...), based on parent and local ContextObjects. ; Reimplemented from sofa::simulation::Node. Enum details. ◆ VisitedStatus. enum sofa::simulation::graph::DAGNode::VisitedStatus. protected . traversal flags . EnumeratorNOT_VISITED ; VISITED ; PRUNED . Related details. ◆ GetDownObjectsVisitor. friend class GetDownObjectsVisitor. friend . ◆ GetUpObjectsVisitor. friend class GetUpObjectsVisitor. friend . sofasimulationgraphDAGNode; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:41040,Deployability,update,updateDescendancy,41040,"his node. ; Implements sofa::core::objectmodel::BaseNode. ◆ initVisualContext(). void sofa::simulation::graph::DAGNode::initVisualContext ; (; ). overridevirtual . Called during initialization to correctly propagate the visual context to the children. ; Reimplemented from sofa::simulation::Node. ◆ moveChild(). void sofa::simulation::graph::DAGNode::moveChild ; (; BaseNode::SPtr ; node). overridevirtual . Move a node in this from another node. ; Implements sofa::simulation::Node. ◆ precomputeTraversalOrder(). void sofa::simulation::graph::DAGNode::precomputeTraversalOrder ; (; const sofa::core::ExecParams * ; params). overridevirtual . compute the traversal order from this Node ; Reimplemented from sofa::simulation::Node. ◆ setDirtyDescendancy(). void sofa::simulation::graph::DAGNode::setDirtyDescendancy ; (; ). protected . bottom-up traversal removing descendancy . ◆ SOFA_CLASS(). sofa::simulation::graph::DAGNode::SOFA_CLASS ; (; DAGNode ; , . simulation::Node ;  . ). ◆ updateContext(). void sofa::simulation::graph::DAGNode::updateContext ; (; ). overridevirtual . Update the whole context values, based on parent and local ContextObjects. ; Reimplemented from sofa::simulation::Node. ◆ updateDescendancy(). void sofa::simulation::graph::DAGNode::updateDescendancy ; (; ). protected . traversal updating the descendancy . ◆ updateSimulationContext(). void sofa::simulation::graph::DAGNode::updateSimulationContext ; (; ). overridevirtual . Update the simulation context values(gravity, time...), based on parent and local ContextObjects. ; Reimplemented from sofa::simulation::Node. Enum details. ◆ VisitedStatus. enum sofa::simulation::graph::DAGNode::VisitedStatus. protected . traversal flags . EnumeratorNOT_VISITED ; VISITED ; PRUNED . Related details. ◆ GetDownObjectsVisitor. friend class GetDownObjectsVisitor. friend . ◆ GetUpObjectsVisitor. friend class GetUpObjectsVisitor. friend . sofasimulationgraphDAGNode; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:41117,Deployability,update,updateSimulationContext,41117,"his node. ; Implements sofa::core::objectmodel::BaseNode. ◆ initVisualContext(). void sofa::simulation::graph::DAGNode::initVisualContext ; (; ). overridevirtual . Called during initialization to correctly propagate the visual context to the children. ; Reimplemented from sofa::simulation::Node. ◆ moveChild(). void sofa::simulation::graph::DAGNode::moveChild ; (; BaseNode::SPtr ; node). overridevirtual . Move a node in this from another node. ; Implements sofa::simulation::Node. ◆ precomputeTraversalOrder(). void sofa::simulation::graph::DAGNode::precomputeTraversalOrder ; (; const sofa::core::ExecParams * ; params). overridevirtual . compute the traversal order from this Node ; Reimplemented from sofa::simulation::Node. ◆ setDirtyDescendancy(). void sofa::simulation::graph::DAGNode::setDirtyDescendancy ; (; ). protected . bottom-up traversal removing descendancy . ◆ SOFA_CLASS(). sofa::simulation::graph::DAGNode::SOFA_CLASS ; (; DAGNode ; , . simulation::Node ;  . ). ◆ updateContext(). void sofa::simulation::graph::DAGNode::updateContext ; (; ). overridevirtual . Update the whole context values, based on parent and local ContextObjects. ; Reimplemented from sofa::simulation::Node. ◆ updateDescendancy(). void sofa::simulation::graph::DAGNode::updateDescendancy ; (; ). protected . traversal updating the descendancy . ◆ updateSimulationContext(). void sofa::simulation::graph::DAGNode::updateSimulationContext ; (; ). overridevirtual . Update the simulation context values(gravity, time...), based on parent and local ContextObjects. ; Reimplemented from sofa::simulation::Node. Enum details. ◆ VisitedStatus. enum sofa::simulation::graph::DAGNode::VisitedStatus. protected . traversal flags . EnumeratorNOT_VISITED ; VISITED ; PRUNED . Related details. ◆ GetDownObjectsVisitor. friend class GetDownObjectsVisitor. friend . ◆ GetUpObjectsVisitor. friend class GetUpObjectsVisitor. friend . sofasimulationgraphDAGNode; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:41183,Deployability,update,updateSimulationContext,41183,"his node. ; Implements sofa::core::objectmodel::BaseNode. ◆ initVisualContext(). void sofa::simulation::graph::DAGNode::initVisualContext ; (; ). overridevirtual . Called during initialization to correctly propagate the visual context to the children. ; Reimplemented from sofa::simulation::Node. ◆ moveChild(). void sofa::simulation::graph::DAGNode::moveChild ; (; BaseNode::SPtr ; node). overridevirtual . Move a node in this from another node. ; Implements sofa::simulation::Node. ◆ precomputeTraversalOrder(). void sofa::simulation::graph::DAGNode::precomputeTraversalOrder ; (; const sofa::core::ExecParams * ; params). overridevirtual . compute the traversal order from this Node ; Reimplemented from sofa::simulation::Node. ◆ setDirtyDescendancy(). void sofa::simulation::graph::DAGNode::setDirtyDescendancy ; (; ). protected . bottom-up traversal removing descendancy . ◆ SOFA_CLASS(). sofa::simulation::graph::DAGNode::SOFA_CLASS ; (; DAGNode ; , . simulation::Node ;  . ). ◆ updateContext(). void sofa::simulation::graph::DAGNode::updateContext ; (; ). overridevirtual . Update the whole context values, based on parent and local ContextObjects. ; Reimplemented from sofa::simulation::Node. ◆ updateDescendancy(). void sofa::simulation::graph::DAGNode::updateDescendancy ; (; ). protected . traversal updating the descendancy . ◆ updateSimulationContext(). void sofa::simulation::graph::DAGNode::updateSimulationContext ; (; ). overridevirtual . Update the simulation context values(gravity, time...), based on parent and local ContextObjects. ; Reimplemented from sofa::simulation::Node. Enum details. ◆ VisitedStatus. enum sofa::simulation::graph::DAGNode::VisitedStatus. protected . traversal flags . EnumeratorNOT_VISITED ; VISITED ; PRUNED . Related details. ◆ GetDownObjectsVisitor. friend class GetDownObjectsVisitor. friend . ◆ GetUpObjectsVisitor. friend class GetUpObjectsVisitor. friend . sofasimulationgraphDAGNode; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:1144,Integrability,wrap,wrapper,1144,"mber Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members . sofa::simulation::graph::DAGNode Class Reference . #include <DAGNode.h>. Inheritance diagram for sofa::simulation::graph::DAGNode:. [legend]; Detailed Description; Define the structure of the scene as a Directed Acyclic Graph. Contains component objects (as pointer lists) and parents/childs (as DAGNode objects).; The visitor traversal is performed in two passes:; a complete top-down traversal; then a complete bottom-up traversal in the exact invert order than the top-down traversal NB: contrary to the ""tree"" traversal, there are no interlinked forward/backward callbacks. There are only forward then only backward callbacks. Note that nodes created during a traversal are not traversed if they are created upper than the current node during the top-down traversal or if they are created during the bottom-up traversal. . Classes; struct  StatusStruct;  wrapper to use VisitedStatus in a std::map (to ensure the default map insertion will give NOT_VISITED) More...;  . Protected Attributes; LinkParents l_parents;  ;  Protected Attributes inherited from sofa::simulation::Node; bool debug_;  ; bool initialized;  ; std::stack< Visitor * > actionStack;  ; BaseContext * _context;  ; type::vector< MutationListener * > listener;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseContext; ComponentNameHelper m_nameHelper;  . Public Member Functions;  SOFA_CLASS (DAGNode, simulation::Node);  ; virtual Node::SPtr createChild (const std::string &n",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:7777,Integrability,interface,interfaces,7777,"  ; void execute (Visitor *p, bool precomputedOrder=false);  Execute a recursive action starting from this node. More...;  ; template<class Act , class Params > ; void execute (const Params *params, bool precomputedOrder=false);  Execute a recursive action starting from this node. More...;  ; template<class Act > ; void execute (sofa::core::visual::VisualParams *vparams, bool precomputedOrder=false);  Execute a recursive action starting from this node. More...;  ; virtual void addChild (BaseNode::SPtr node) final;  ; virtual void removeChild (BaseNode::SPtr node) final;  Remove a child node. More...;  ; virtual void moveChild (BaseNode::SPtr node, BaseNode::SPtr prev_parent) final;  Move a node in this from another node. More...;  ; virtual bool addObject (sofa::core::objectmodel::BaseObject::SPtr obj, sofa::core::objectmodel::TypeOfInsertion insertionLocation=sofa::core::objectmodel::TypeOfInsertion::AtEnd) final;  Add an object and return this. Detect the implemented interfaces and add the object to the corresponding lists. More...;  ; virtual bool removeObject (sofa::core::objectmodel::BaseObject::SPtr obj) final;  Remove an object. More...;  ; virtual void moveObject (sofa::core::objectmodel::BaseObject::SPtr obj) final;  Move an object from another node. More...;  ; sofa::core::objectmodel::BaseObject * getObject (const std::string &name) const;  Find an object given its name. More...;  ; Base * findLinkDestClass (const sofa::core::objectmodel::BaseClass *destType, const std::string &path, const sofa::core::objectmodel::BaseLink *link) override;  ; void * getObject (const sofa::core::objectmodel::ClassInfo &class_info, SearchDirection dir=SearchUp) const override;  ; void getObjects (const sofa::core::objectmodel::ClassInfo &class_info, GetObjectsCallBack &container, SearchDirection dir=SearchUp) const override;  ; template<class Object , class Container > ; void getNodeObjects (Container *list);  List all objects of this node deriving from a given class. More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:19145,Integrability,interface,interface,19145,"l coordinates. More...;  ; void setGravity (const Vec3 &) override;  Gravity in local coordinates. More...;  ; SReal getDt () const override;  Simulation timestep. More...;  ; SReal getTime () const override;  Simulation time. More...;  ; bool getAnimate () const override;  Animation flag. More...;  ; void setDt (SReal dt) override;  Simulation timestep. More...;  ; virtual void setTime (SReal t);  Simulation time. More...;  ; void setAnimate (bool val) override;  Animation flag. More...;  ; void setChangeSleepingState (bool val) override;  Sleeping state change of the context. More...;  ; virtual void setDisplayWorldGravity (bool val);  Display flags: Gravity. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseContext;  SOFA_CLASS (BaseContext, Base);  ; ComponentNameHelper & getNameHelper ();  Returns utilitary object to uniquely name objects in the context. More...;  ; virtual core::topology::BaseMeshTopology * getMeshTopology (SearchDirection dir=SearchUp) const;  Mesh Topology (unified interface for both static and dynamic topologies) More...;  ; virtual core::behavior::BaseMass * getMass () const;  Mass. More...;  ; template<class Object , class Container > ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ; template<class Container > ; Container * getObjects (Container *result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=Sea",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:19970,Integrability,wrap,wrapper,19970," sofa::core::objectmodel::BaseContext;  SOFA_CLASS (BaseContext, Base);  ; ComponentNameHelper & getNameHelper ();  Returns utilitary object to uniquely name objects in the context. More...;  ; virtual core::topology::BaseMeshTopology * getMeshTopology (SearchDirection dir=SearchUp) const;  Mesh Topology (unified interface for both static and dynamic topologies) More...;  ; virtual core::behavior::BaseMass * getMass () const;  Mass. More...;  ; template<class Object , class Container > ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ; template<class Container > ; Container * getObjects (Container *result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:20156,Integrability,wrap,wrapper,20156,"logy (unified interface for both static and dynamic topologies) More...;  ; virtual core::behavior::BaseMass * getMass () const;  Mass. More...;  ; template<class Object , class Container > ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ; template<class Container > ; Container * getObjects (Container *result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:20349,Integrability,wrap,wrapper,20349," ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ; template<class Container > ; Container * getObjects (Container *result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:20541,Integrability,wrap,wrapper,20541,"result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:20765,Integrability,wrap,wrapper,20765,"ate<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly se",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:20996,Integrability,wrap,wrapper,20996,"wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:21214,Integrability,wrap,wrapper,21214," the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  G",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:21450,Integrability,wrap,wrapper,21450,"late<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access templa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:21693,Integrability,wrap,wrapper,21693," (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:21894,Integrability,wrap,wrapper,21894,"late<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirecti",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:22058,Integrability,wrap,wrapper,22058,"possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:22229,Integrability,wrap,wrapper,22229,"ect access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; virtual void setMechanicalState (BaseObject *);  Mechanical Degrees-of-Freedom. More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:22433,Integrability,wrap,wrapper,22433,"ection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; virtual void setMechanicalState (BaseObject *);  Mechanical Degrees-of-Freedom. More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ; virtual bool addObject (sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd);  Add an object, or return false if not supported. More...;  ; virtual bool removeObject (sptr< BaseObject >); ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:22670,Integrability,wrap,wrapper,22670,"Direction dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; virtual void setMechanicalState (BaseObject *);  Mechanical Degrees-of-Freedom. More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ; virtual bool addObject (sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd);  Add an object, or return false if not supported. More...;  ; virtual bool removeObject (sptr< BaseObject >);  Remove an object, or return false if not supported. More...;  ; virtual void notifyAddSlave (core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  ; virtual void notifyRemoveSlave (core::objectmodel::BaseObject *ma",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:22933,Integrability,wrap,wrapper,22933,"rapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; virtual void setMechanicalState (BaseObject *);  Mechanical Degrees-of-Freedom. More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ; virtual bool addObject (sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd);  Add an object, or return false if not supported. More...;  ; virtual bool removeObject (sptr< BaseObject >);  Remove an object, or return false if not supported. More...;  ; virtual void notifyAddSlave (core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  ; virtual void notifyRemoveSlave (core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  ; virtual void notifyMoveSlave (core::objectmodel::BaseObject *previousMaster, core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  . Static Public Member Functions; static const std::string Ge",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:25893,Integrability,interface,interfaces,25893,"ode2 More...;  ; virtual void doAddChild (BaseNode::SPtr node) override;  Add a child node. More...;  ; virtual void doRemoveChild (BaseNode::SPtr node) override;  Remove a child. More...;  ; virtual void doMoveChild (BaseNode::SPtr node, BaseNode::SPtr previous_parent) override;  Move a node from another node. More...;  ; void doExecuteVisitor (simulation::Visitor *action, bool precomputedOrder=false) override;  Execute a recursive action starting from this node. More...;  ; void executeVisitorTreeTraversal (Visitor *action, StatusMap &statusMap, Visitor::TreeTraversalRepetition repeat, bool alreadyRepeated=false);  ;  Protected Member Functions inherited from sofa::simulation::Node;  Node (const std::string &name="""");  ; virtual ~Node () override;  ; virtual bool doAddObject (sofa::core::objectmodel::BaseObject::SPtr obj, sofa::core::objectmodel::TypeOfInsertion insertionLocation=sofa::core::objectmodel::TypeOfInsertion::AtEnd);  Add an object. Detect the implemented interfaces and add the object to the corresponding lists. More...;  ; virtual bool doRemoveObject (sofa::core::objectmodel::BaseObject::SPtr obj);  Remove an object. More...;  ; virtual void doMoveObject (sofa::core::objectmodel::BaseObject::SPtr sobj, Node *prev_parent);  Remove an object. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseNode;  BaseNode ();  ;  ~BaseNode () override;  ; void setObjectContext (BaseObject::SPtr obj);  Set the context of an object to this. More...;  ; void clearObjectContext (BaseObject::SPtr obj);  Reset the context of an object. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, Base",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:30935,Integrability,message,messages,30935,"sofa::core::visual::VisualManager > visualManager;  ; NodeSequence< sofa::core::CollisionModel > collisionModel;  ; NodeSequence< sofa::core::objectmodel::BaseObject > unsorted;  ; NodeSingle< sofa::core::behavior::BaseAnimationLoop > animationManager;  ; NodeSingle< sofa::core::visual::VisualLoop > visualLoop;  ; NodeSingle< sofa::core::topology::Topology > topology;  ; NodeSingle< sofa::core::topology::BaseMeshTopology > meshTopology;  ; NodeSingle< sofa::core::BaseState > state;  ; NodeSingle< sofa::core::behavior::BaseMechanicalState > mechanicalState;  ; NodeSingle< sofa::core::BaseMapping > mechanicalMapping;  ; NodeSingle< sofa::core::behavior::BaseMass > mass;  ; NodeSingle< sofa::core::collision::Pipeline > collisionPipeline;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Public Attributes inherited from sofa::core::objectmodel::Context; Data< bool > is_activated;  To Activate a node. More...;  ; Data< Vec3 > worldGravity_;  Gravity in the world coordinate system. More...;  ; Data< SReal > dt_;  Time step. More...;  ; Data< SReal > time_;  Current time. More...;  ; Data< bool > animate_;  Animate the Simulation(applied at initialization only) More...;  ; Data< bool > d_isSleeping;  The node is sl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:37209,Integrability,wrap,wrapper,37209,"etMeshTopologyLink(). sofa::core::topology::BaseMeshTopology * sofa::simulation::graph::DAGNode::getMeshTopologyLink ; (; SearchDirection ; dir = SearchUp); const. overridevirtual . Mesh Topology that is relevant for this context (within it or its parents until a mapping is reached that does not preserve topologies). ; Reimplemented from sofa::simulation::Node. ◆ getNbParents(). size_t sofa::simulation::graph::DAGNode::getNbParents ; (; ); const. overridevirtual . returns number of parents ; Implements sofa::core::objectmodel::BaseNode. ◆ getObject() [1/2]. void * sofa::simulation::graph::DAGNode::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . const sofa::core::objectmodel::TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. overridevirtual . Generic object access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type,; Generic object access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Implements sofa::simulation::Node. ◆ getObject() [2/2]. void * sofa::simulation::graph::DAGNode::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . const std::string & ; path . ); const. overridevirtual . Generic object access, given a path from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Implements sofa::simulation::Node. ◆ getObjects(). void sofa::simulation::graph::DAGNode::getObjects ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const sofa::core::objectmodel::TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. overridevirtual . Generic list of objects access, given a set of required tags, possibly searching up or down from the current context; Note ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:37385,Integrability,wrap,wrapper,37385,"etMeshTopologyLink(). sofa::core::topology::BaseMeshTopology * sofa::simulation::graph::DAGNode::getMeshTopologyLink ; (; SearchDirection ; dir = SearchUp); const. overridevirtual . Mesh Topology that is relevant for this context (within it or its parents until a mapping is reached that does not preserve topologies). ; Reimplemented from sofa::simulation::Node. ◆ getNbParents(). size_t sofa::simulation::graph::DAGNode::getNbParents ; (; ); const. overridevirtual . returns number of parents ; Implements sofa::core::objectmodel::BaseNode. ◆ getObject() [1/2]. void * sofa::simulation::graph::DAGNode::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . const sofa::core::objectmodel::TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. overridevirtual . Generic object access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type,; Generic object access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Implements sofa::simulation::Node. ◆ getObject() [2/2]. void * sofa::simulation::graph::DAGNode::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . const std::string & ; path . ); const. overridevirtual . Generic object access, given a path from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Implements sofa::simulation::Node. ◆ getObjects(). void sofa::simulation::graph::DAGNode::getObjects ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const sofa::core::objectmodel::TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. overridevirtual . Generic list of objects access, given a set of required tags, possibly searching up or down from the current context; Note ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:37773,Integrability,wrap,wrapper,37773,"plements sofa::core::objectmodel::BaseNode. ◆ getObject() [1/2]. void * sofa::simulation::graph::DAGNode::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . const sofa::core::objectmodel::TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. overridevirtual . Generic object access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type,; Generic object access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Implements sofa::simulation::Node. ◆ getObject() [2/2]. void * sofa::simulation::graph::DAGNode::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . const std::string & ; path . ); const. overridevirtual . Generic object access, given a path from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Implements sofa::simulation::Node. ◆ getObjects(). void sofa::simulation::graph::DAGNode::getObjects ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const sofa::core::objectmodel::TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. overridevirtual . Generic list of objects access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type,; Generic list of objects access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Implements sofa::simulation::Node. ◆ getParents(). sofa::core::objectmodel::BaseNode::Parents sofa::simulation::graph::DAGNode::getParents ; (; ); const. overridevirtual . Get a list of parent node. ; Implements sofa::core",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:38303,Integrability,wrap,wrapper,38303,"plate wrapper method should generally be used to have the correct return type, ; Implements sofa::simulation::Node. ◆ getObject() [2/2]. void * sofa::simulation::graph::DAGNode::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . const std::string & ; path . ); const. overridevirtual . Generic object access, given a path from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Implements sofa::simulation::Node. ◆ getObjects(). void sofa::simulation::graph::DAGNode::getObjects ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const sofa::core::objectmodel::TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. overridevirtual . Generic list of objects access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type,; Generic list of objects access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Implements sofa::simulation::Node. ◆ getParents(). sofa::core::objectmodel::BaseNode::Parents sofa::simulation::graph::DAGNode::getParents ; (; ); const. overridevirtual . Get a list of parent node. ; Implements sofa::core::objectmodel::BaseNode. ◆ hasAncestor() [1/2]. bool sofa::simulation::graph::DAGNode::hasAncestor ; (; const BaseContext * ; context); const. overridevirtual . Test if the given context is an ancestor of this context. An ancestor is a parent or (recursively) the parent of an ancestor. ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ hasAncestor() [2/2]. bool sofa::simulation::graph::DAGNode::hasAncestor ; (; const BaseNode * ; node); const. inlineoverridevirtual . Test if the given context is an ancestor of this context. An ancestor is a parent or (recursively) the parent of",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:38488,Integrability,wrap,wrapper,38488,"plate wrapper method should generally be used to have the correct return type, ; Implements sofa::simulation::Node. ◆ getObject() [2/2]. void * sofa::simulation::graph::DAGNode::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . const std::string & ; path . ); const. overridevirtual . Generic object access, given a path from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Implements sofa::simulation::Node. ◆ getObjects(). void sofa::simulation::graph::DAGNode::getObjects ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const sofa::core::objectmodel::TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. overridevirtual . Generic list of objects access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type,; Generic list of objects access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Implements sofa::simulation::Node. ◆ getParents(). sofa::core::objectmodel::BaseNode::Parents sofa::simulation::graph::DAGNode::getParents ; (; ); const. overridevirtual . Get a list of parent node. ; Implements sofa::core::objectmodel::BaseNode. ◆ hasAncestor() [1/2]. bool sofa::simulation::graph::DAGNode::hasAncestor ; (; const BaseContext * ; context); const. overridevirtual . Test if the given context is an ancestor of this context. An ancestor is a parent or (recursively) the parent of an ancestor. ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ hasAncestor() [2/2]. bool sofa::simulation::graph::DAGNode::hasAncestor ; (; const BaseNode * ; node); const. inlineoverridevirtual . Test if the given context is an ancestor of this context. An ancestor is a parent or (recursively) the parent of",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:1329,Modifiability,inherit,inherited,1329,"rected Acyclic Graph. Contains component objects (as pointer lists) and parents/childs (as DAGNode objects).; The visitor traversal is performed in two passes:; a complete top-down traversal; then a complete bottom-up traversal in the exact invert order than the top-down traversal NB: contrary to the ""tree"" traversal, there are no interlinked forward/backward callbacks. There are only forward then only backward callbacks. Note that nodes created during a traversal are not traversed if they are created upper than the current node during the top-down traversal or if they are created during the bottom-up traversal. . Classes; struct  StatusStruct;  wrapper to use VisitedStatus in a std::map (to ensure the default map insertion will give NOT_VISITED) More...;  . Protected Attributes; LinkParents l_parents;  ;  Protected Attributes inherited from sofa::simulation::Node; bool debug_;  ; bool initialized;  ; std::stack< Visitor * > actionStack;  ; BaseContext * _context;  ; type::vector< MutationListener * > listener;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseContext; ComponentNameHelper m_nameHelper;  . Public Member Functions;  SOFA_CLASS (DAGNode, simulation::Node);  ; virtual Node::SPtr createChild (const std::string &nodeName) override;  Pure Virtual method from Node. More...;  ; void detachFromGraph () override;  Remove the current node from the graph: consists in removing the link to its parent. More...;  ; Parents getParents () const override;  Get a list of parent node. More...;  ; size_t getNbParents () const overrid",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:1542,Modifiability,inherit,inherited,1542,"rected Acyclic Graph. Contains component objects (as pointer lists) and parents/childs (as DAGNode objects).; The visitor traversal is performed in two passes:; a complete top-down traversal; then a complete bottom-up traversal in the exact invert order than the top-down traversal NB: contrary to the ""tree"" traversal, there are no interlinked forward/backward callbacks. There are only forward then only backward callbacks. Note that nodes created during a traversal are not traversed if they are created upper than the current node during the top-down traversal or if they are created during the bottom-up traversal. . Classes; struct  StatusStruct;  wrapper to use VisitedStatus in a std::map (to ensure the default map insertion will give NOT_VISITED) More...;  . Protected Attributes; LinkParents l_parents;  ;  Protected Attributes inherited from sofa::simulation::Node; bool debug_;  ; bool initialized;  ; std::stack< Visitor * > actionStack;  ; BaseContext * _context;  ; type::vector< MutationListener * > listener;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseContext; ComponentNameHelper m_nameHelper;  . Public Member Functions;  SOFA_CLASS (DAGNode, simulation::Node);  ; virtual Node::SPtr createChild (const std::string &nodeName) override;  Pure Virtual method from Node. More...;  ; void detachFromGraph () override;  Remove the current node from the graph: consists in removing the link to its parent. More...;  ; Parents getParents () const override;  Get a list of parent node. More...;  ; size_t getNbParents () const overrid",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:1971,Modifiability,inherit,inherited,1971," than the current node during the top-down traversal or if they are created during the bottom-up traversal. . Classes; struct  StatusStruct;  wrapper to use VisitedStatus in a std::map (to ensure the default map insertion will give NOT_VISITED) More...;  . Protected Attributes; LinkParents l_parents;  ;  Protected Attributes inherited from sofa::simulation::Node; bool debug_;  ; bool initialized;  ; std::stack< Visitor * > actionStack;  ; BaseContext * _context;  ; type::vector< MutationListener * > listener;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseContext; ComponentNameHelper m_nameHelper;  . Public Member Functions;  SOFA_CLASS (DAGNode, simulation::Node);  ; virtual Node::SPtr createChild (const std::string &nodeName) override;  Pure Virtual method from Node. More...;  ; void detachFromGraph () override;  Remove the current node from the graph: consists in removing the link to its parent. More...;  ; Parents getParents () const override;  Get a list of parent node. More...;  ; size_t getNbParents () const override;  returns number of parents More...;  ; BaseNode * getFirstParent () const override;  return the first parent (returns nullptr if no parent) More...;  ; bool hasParent (const BaseNode *node) const override;  Test if the given node is a parent of this node. More...;  ; bool hasParent (const BaseContext *context) const;  Test if the given context is a parent of this context. More...;  ; bool hasAncestor (const BaseNode *node) const override;  ; bool hasAncestor (const BaseContext *context) const override; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:4322,Modifiability,inherit,inherited,4322,"const sofa::core::objectmodel::TagSet &tags, SearchDirection dir=SearchUp) const override;  ; sofa::core::topology::BaseMeshTopology * getMeshTopologyLink (SearchDirection dir=SearchUp) const override;  ; void initVisualContext () override;  Called during initialization to correctly propagate the visual context to the children. More...;  ; void updateContext () override;  Update the whole context values, based on parent and local ContextObjects. More...;  ; void updateSimulationContext () override;  Update the simulation context values(gravity, time...), based on parent and local ContextObjects. More...;  ; Node * findCommonParent (Node *node2) override;  ; void precomputeTraversalOrder (const sofa::core::ExecParams *params) override;  compute the traversal order from this Node More...;  ; virtual void moveChild (BaseNode::SPtr node) override;  Move a node in this from another node. More...;  ;  Public Member Functions inherited from sofa::simulation::Node;  SOFA_ABSTRACT_CLASS2 (Node, BaseNode, Context);  ; virtual void removeControllers ();  Remove odesolvers and mastercontroler. More...;  ; Node * getChild (const std::string &name) const;  Find a child node given its name. More...;  ; Node * getTreeNode (const std::string &name) const;  Get a descendant node given its name. More...;  ; Node * getNodeInGraph (const std::string &absolutePath) const;  Get a node in the scene graph matching the given absolute path. More...;  ; Children getChildren () const override;  Get children nodes. More...;  ; BaseContext * getRootContext () const override;  Get the root context of the graph. More...;  ; Node * setDebug (bool);  ; bool getDebug () const;  ; void printComponents ();  ; const BaseContext * getContext () const override;  Get this node context. More...;  ; BaseContext * getContext () override;  Get this node context. More...;  ; void propagateEvent (const sofa::core::ExecParams *params, sofa::core::objectmodel::Event *event) override;  Propagate an event. More...;  ;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:10849,Modifiability,inherit,inherited,10849,"st all objects of this node and sub-nodes deriving from a given class. More...;  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getTreeObjects ();  ; template<class Object > ; void getTreeObject (Object *&result);  ; template<class Object > ; Object * getTreeObject ();  ; sofa::core::topology::Topology * getTopology () const override;  Topology. More...;  ; sofa::core::BaseState * getState () const override;  Degrees-of-Freedom. More...;  ; sofa::core::behavior::BaseMechanicalState * getMechanicalState () const override;  Mechanical Degrees-of-Freedom. More...;  ; sofa::core::visual::Shader * getShader () const override;  Shader. More...;  ; virtual sofa::core::visual::Shader * getShader (const sofa::core::objectmodel::TagSet &t) const;  ; sofa::core::behavior::BaseAnimationLoop * getAnimationLoop () const override;  ; sofa::core::behavior::OdeSolver * getOdeSolver () const override;  ; sofa::core::collision::Pipeline * getCollisionPipeline () const override;  ; sofa::core::visual::VisualLoop * getVisualLoop () const override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseNode;  SOFA_ABSTRACT_CLASS (BaseNode, Base);  ; virtual BaseNode * getRoot () const;  returns the root by following up the first parent for multinodes More...;  ; virtual std::string getPathName () const override;  Return the full path name of this node. More...;  ; virtual std::string getRootPath () const;  Return the path from this node to the root node. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, s",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:11289,Modifiability,inherit,inherited,11289,"nimationLoop * getAnimationLoop () const override;  ; sofa::core::behavior::OdeSolver * getOdeSolver () const override;  ; sofa::core::collision::Pipeline * getCollisionPipeline () const override;  ; sofa::core::visual::VisualLoop * getVisualLoop () const override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseNode;  SOFA_ABSTRACT_CLASS (BaseNode, Base);  ; virtual BaseNode * getRoot () const;  returns the root by following up the first parent for multinodes More...;  ; virtual std::string getPathName () const override;  Return the full path name of this node. More...;  ; virtual std::string getRootPath () const;  Return the path from this node to the root node. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name of this object, adding an integer counter. More...;  ; std::string getTypeName () const;  Get the type name of this object (i.e. class and template types) More...;  ; virtual std::string getClassName () const;  Get the class name of this object. More...;  ; virtual std::string getTemplateName () const final;  Get the template type names (if any) used to instantiate this object. More...;  ; std::string getNameSpaceName () const;  Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:17415,Modifiability,inherit,inherited,17415," &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More...;  ; void addAlias (BaseData *field, const char *alias);  Add an alias to a Data. More...;  ; void addLink (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  ;  Public Member Functions inherited from sofa::core::objectmodel::Context;  SOFA_CLASS (Context, BaseContext);  ; void copyContext (const Context &c);  Copy the context variables from the given instance. More...;  ; void copySimulationContext (const Context &c);  Copy the context variables of visualization from the given instance. More...;  ; bool isActive () const override;  The Context is active. More...;  ; void setActive (bool val) override;  State of the context. More...;  ; bool isSleeping () const override;  The Context is sleeping. More...;  ; bool canChangeSleepingState () const override;  The Context can change its sleeping state. More...;  ; const Vec3 & getGravity () const override;  Gravity in local coordinates. More...;  ; void setGravity (const Vec3 &) override;  Gravity in local coordinates. More...;  ; SReal getDt () const override;  Simulation timestep. More...;  ; SReal getTime () const override;  Simulation time. More...;  ; bool getAnimate () const override;  Animat",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:17558,Modifiability,variab,variables,17558," &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More...;  ; void addAlias (BaseData *field, const char *alias);  Add an alias to a Data. More...;  ; void addLink (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  ;  Public Member Functions inherited from sofa::core::objectmodel::Context;  SOFA_CLASS (Context, BaseContext);  ; void copyContext (const Context &c);  Copy the context variables from the given instance. More...;  ; void copySimulationContext (const Context &c);  Copy the context variables of visualization from the given instance. More...;  ; bool isActive () const override;  The Context is active. More...;  ; void setActive (bool val) override;  State of the context. More...;  ; bool isSleeping () const override;  The Context is sleeping. More...;  ; bool canChangeSleepingState () const override;  The Context can change its sleeping state. More...;  ; const Vec3 & getGravity () const override;  Gravity in local coordinates. More...;  ; void setGravity (const Vec3 &) override;  Gravity in local coordinates. More...;  ; SReal getDt () const override;  Simulation timestep. More...;  ; SReal getTime () const override;  Simulation time. More...;  ; bool getAnimate () const override;  Animat",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:17670,Modifiability,variab,variables,17670,"nk *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  ;  Public Member Functions inherited from sofa::core::objectmodel::Context;  SOFA_CLASS (Context, BaseContext);  ; void copyContext (const Context &c);  Copy the context variables from the given instance. More...;  ; void copySimulationContext (const Context &c);  Copy the context variables of visualization from the given instance. More...;  ; bool isActive () const override;  The Context is active. More...;  ; void setActive (bool val) override;  State of the context. More...;  ; bool isSleeping () const override;  The Context is sleeping. More...;  ; bool canChangeSleepingState () const override;  The Context can change its sleeping state. More...;  ; const Vec3 & getGravity () const override;  Gravity in local coordinates. More...;  ; void setGravity (const Vec3 &) override;  Gravity in local coordinates. More...;  ; SReal getDt () const override;  Simulation timestep. More...;  ; SReal getTime () const override;  Simulation time. More...;  ; bool getAnimate () const override;  Animation flag. More...;  ; void setDt (SReal dt) override;  Simulation timestep. More...;  ; virtual void setTime (SReal t);  Simulation time. More...;  ; void setAnimate (bool val) override;  Animation flag. More...;  ; void setChangeSleepingState (bool val) override;  Sleep",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:18816,Modifiability,inherit,inherited,18816," override;  The Context is sleeping. More...;  ; bool canChangeSleepingState () const override;  The Context can change its sleeping state. More...;  ; const Vec3 & getGravity () const override;  Gravity in local coordinates. More...;  ; void setGravity (const Vec3 &) override;  Gravity in local coordinates. More...;  ; SReal getDt () const override;  Simulation timestep. More...;  ; SReal getTime () const override;  Simulation time. More...;  ; bool getAnimate () const override;  Animation flag. More...;  ; void setDt (SReal dt) override;  Simulation timestep. More...;  ; virtual void setTime (SReal t);  Simulation time. More...;  ; void setAnimate (bool val) override;  Animation flag. More...;  ; void setChangeSleepingState (bool val) override;  Sleeping state change of the context. More...;  ; virtual void setDisplayWorldGravity (bool val);  Display flags: Gravity. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseContext;  SOFA_CLASS (BaseContext, Base);  ; ComponentNameHelper & getNameHelper ();  Returns utilitary object to uniquely name objects in the context. More...;  ; virtual core::topology::BaseMeshTopology * getMeshTopology (SearchDirection dir=SearchUp) const;  Mesh Topology (unified interface for both static and dynamic topologies) More...;  ; virtual core::behavior::BaseMass * getMass () const;  Mass. More...;  ; template<class Object , class Container > ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ; template<class Container > ; Container * getObjects (Container *result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:24049,Modifiability,inherit,inherited,24049,"eObject >, TypeOfInsertion=TypeOfInsertion::AtEnd);  Add an object, or return false if not supported. More...;  ; virtual bool removeObject (sptr< BaseObject >);  Remove an object, or return false if not supported. More...;  ; virtual void notifyAddSlave (core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  ; virtual void notifyRemoveSlave (core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  ; virtual void notifyMoveSlave (core::objectmodel::BaseObject *previousMaster, core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  . Static Public Member Functions; static const std::string GetCustomClassName ();  ; static DAGNode::SPtr create (DAGNode *, sofa::core::objectmodel::BaseObjectDescription *arg);  ;  Static Public Member Functions inherited from sofa::simulation::Node; template<class RealObject > ; static Node::SPtr create (RealObject *, sofa::core::objectmodel::BaseObjectDescription *arg);  ; static Node::SPtr create (const std::string &name);  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseContext; static BaseContext * getDefault ();  . Protected Member Functions;  DAGNode (const std::string &name="""", DAGNode *parent=nullptr);  ; virtual ~DAGNode () override;  ; DAGNode * findCommonParent (DAGNode *node1, DAGNode *node2);  bottom-up traversal, returning the first node which have a descendancy containing both node1 & node2 More...;  ; virtual void doAddChild (BaseNode::SPtr node) override;  Add a child node. More...;  ; virtual void doRemoveChild (BaseNode::SPtr node) override;  Remove a child. More...;  ; virtual void doMoveChild (BaseNode::SPtr node, BaseNode::SPtr previous_parent) override;  Move a node from another node. More...",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:24302,Modifiability,inherit,inherited,24302,"eObject >, TypeOfInsertion=TypeOfInsertion::AtEnd);  Add an object, or return false if not supported. More...;  ; virtual bool removeObject (sptr< BaseObject >);  Remove an object, or return false if not supported. More...;  ; virtual void notifyAddSlave (core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  ; virtual void notifyRemoveSlave (core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  ; virtual void notifyMoveSlave (core::objectmodel::BaseObject *previousMaster, core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  . Static Public Member Functions; static const std::string GetCustomClassName ();  ; static DAGNode::SPtr create (DAGNode *, sofa::core::objectmodel::BaseObjectDescription *arg);  ;  Static Public Member Functions inherited from sofa::simulation::Node; template<class RealObject > ; static Node::SPtr create (RealObject *, sofa::core::objectmodel::BaseObjectDescription *arg);  ; static Node::SPtr create (const std::string &name);  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseContext; static BaseContext * getDefault ();  . Protected Member Functions;  DAGNode (const std::string &name="""", DAGNode *parent=nullptr);  ; virtual ~DAGNode () override;  ; DAGNode * findCommonParent (DAGNode *node1, DAGNode *node2);  bottom-up traversal, returning the first node which have a descendancy containing both node1 & node2 More...;  ; virtual void doAddChild (BaseNode::SPtr node) override;  Add a child node. More...;  ; virtual void doRemoveChild (BaseNode::SPtr node) override;  Remove a child. More...;  ; virtual void doMoveChild (BaseNode::SPtr node, BaseNode::SPtr previous_parent) override;  Move a node from another node. More...",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:24531,Modifiability,inherit,inherited,24531,"eObject >, TypeOfInsertion=TypeOfInsertion::AtEnd);  Add an object, or return false if not supported. More...;  ; virtual bool removeObject (sptr< BaseObject >);  Remove an object, or return false if not supported. More...;  ; virtual void notifyAddSlave (core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  ; virtual void notifyRemoveSlave (core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  ; virtual void notifyMoveSlave (core::objectmodel::BaseObject *previousMaster, core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  . Static Public Member Functions; static const std::string GetCustomClassName ();  ; static DAGNode::SPtr create (DAGNode *, sofa::core::objectmodel::BaseObjectDescription *arg);  ;  Static Public Member Functions inherited from sofa::simulation::Node; template<class RealObject > ; static Node::SPtr create (RealObject *, sofa::core::objectmodel::BaseObjectDescription *arg);  ; static Node::SPtr create (const std::string &name);  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseContext; static BaseContext * getDefault ();  . Protected Member Functions;  DAGNode (const std::string &name="""", DAGNode *parent=nullptr);  ; virtual ~DAGNode () override;  ; DAGNode * findCommonParent (DAGNode *node1, DAGNode *node2);  bottom-up traversal, returning the first node which have a descendancy containing both node1 & node2 More...;  ; virtual void doAddChild (BaseNode::SPtr node) override;  Add a child node. More...;  ; virtual void doRemoveChild (BaseNode::SPtr node) override;  Remove a child. More...;  ; virtual void doMoveChild (BaseNode::SPtr node, BaseNode::SPtr previous_parent) override;  Move a node from another node. More...",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:25564,Modifiability,inherit,inherited,25564,"ected Member Functions;  DAGNode (const std::string &name="""", DAGNode *parent=nullptr);  ; virtual ~DAGNode () override;  ; DAGNode * findCommonParent (DAGNode *node1, DAGNode *node2);  bottom-up traversal, returning the first node which have a descendancy containing both node1 & node2 More...;  ; virtual void doAddChild (BaseNode::SPtr node) override;  Add a child node. More...;  ; virtual void doRemoveChild (BaseNode::SPtr node) override;  Remove a child. More...;  ; virtual void doMoveChild (BaseNode::SPtr node, BaseNode::SPtr previous_parent) override;  Move a node from another node. More...;  ; void doExecuteVisitor (simulation::Visitor *action, bool precomputedOrder=false) override;  Execute a recursive action starting from this node. More...;  ; void executeVisitorTreeTraversal (Visitor *action, StatusMap &statusMap, Visitor::TreeTraversalRepetition repeat, bool alreadyRepeated=false);  ;  Protected Member Functions inherited from sofa::simulation::Node;  Node (const std::string &name="""");  ; virtual ~Node () override;  ; virtual bool doAddObject (sofa::core::objectmodel::BaseObject::SPtr obj, sofa::core::objectmodel::TypeOfInsertion insertionLocation=sofa::core::objectmodel::TypeOfInsertion::AtEnd);  Add an object. Detect the implemented interfaces and add the object to the corresponding lists. More...;  ; virtual bool doRemoveObject (sofa::core::objectmodel::BaseObject::SPtr obj);  Remove an object. More...;  ; virtual void doMoveObject (sofa::core::objectmodel::BaseObject::SPtr sobj, Node *prev_parent);  Remove an object. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseNode;  BaseNode ();  ;  ~BaseNode () override;  ; void setObjectContext (BaseObject::SPtr obj);  Set the context of an object to this. More...;  ; void clearObjectContext (BaseObject::SPtr obj);  Reset the context of an object. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initD",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:26225,Modifiability,inherit,inherited,26225,"putedOrder=false) override;  Execute a recursive action starting from this node. More...;  ; void executeVisitorTreeTraversal (Visitor *action, StatusMap &statusMap, Visitor::TreeTraversalRepetition repeat, bool alreadyRepeated=false);  ;  Protected Member Functions inherited from sofa::simulation::Node;  Node (const std::string &name="""");  ; virtual ~Node () override;  ; virtual bool doAddObject (sofa::core::objectmodel::BaseObject::SPtr obj, sofa::core::objectmodel::TypeOfInsertion insertionLocation=sofa::core::objectmodel::TypeOfInsertion::AtEnd);  Add an object. Detect the implemented interfaces and add the object to the corresponding lists. More...;  ; virtual bool doRemoveObject (sofa::core::objectmodel::BaseObject::SPtr obj);  Remove an object. More...;  ; virtual void doMoveObject (sofa::core::objectmodel::BaseObject::SPtr sobj, Node *prev_parent);  Remove an object. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseNode;  BaseNode ();  ;  ~BaseNode () override;  ; void setObjectContext (BaseObject::SPtr obj);  Set the context of an object to this. More...;  ; void clearObjectContext (BaseObject::SPtr obj);  Reset the context of an object. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Context;  C",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:26537,Modifiability,inherit,inherited,26537,"ode () override;  ; virtual bool doAddObject (sofa::core::objectmodel::BaseObject::SPtr obj, sofa::core::objectmodel::TypeOfInsertion insertionLocation=sofa::core::objectmodel::TypeOfInsertion::AtEnd);  Add an object. Detect the implemented interfaces and add the object to the corresponding lists. More...;  ; virtual bool doRemoveObject (sofa::core::objectmodel::BaseObject::SPtr obj);  Remove an object. More...;  ; virtual void doMoveObject (sofa::core::objectmodel::BaseObject::SPtr sobj, Node *prev_parent);  Remove an object. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseNode;  BaseNode ();  ;  ~BaseNode () override;  ; void setObjectContext (BaseObject::SPtr obj);  Set the context of an object to this. More...;  ; void clearObjectContext (BaseObject::SPtr obj);  Reset the context of an object. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Context;  Context ();  ; virtual ~Context () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseContext;  BaseContext ();  ;  ~BaseContext () override;  . @internal stuff related to the DAG traversal; enum  VisitedStatus { NOT_VISITED =0; , VISITED; , PRUNED; };  traversal flags More...;  ; typedef std::map< DAGNode *, StatusStruc",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:27247,Modifiability,inherit,inherited,27247,"seObject::SPtr obj);  Set the context of an object to this. More...;  ; void clearObjectContext (BaseObject::SPtr obj);  Reset the context of an object. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Context;  Context ();  ; virtual ~Context () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseContext;  BaseContext ();  ;  ~BaseContext () override;  . @internal stuff related to the DAG traversal; enum  VisitedStatus { NOT_VISITED =0; , VISITED; , PRUNED; };  traversal flags More...;  ; typedef std::map< DAGNode *, StatusStruct > StatusMap;  map structure to store a traversal flag for each DAGNode More...;  ; typedef std::list< DAGNode * > NodeList;  list of DAGNode* More...;  ; std::set< DAGNode * > _descendancy;  all child nodes (unordered) More...;  ; NodeList _precomputedTraversalOrder;  the ordered list of Node to traverse from this Node More...;  ; void setDirtyDescendancy ();  bottom-up traversal removing descendancy More...;  ; void updateDescendancy ();  traversal updating the descendancy More...;  ; void executeVisitorTopDown (simulation::Visitor *action, NodeList &executedNodes, StatusMap &statusMap, DAGNode *visitorRoot);  ; void executeVisitorBottomUp (simulation::Visitor *action, NodeList &e",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:27373,Modifiability,inherit,inherited,27373,"seObject::SPtr obj);  Set the context of an object to this. More...;  ; void clearObjectContext (BaseObject::SPtr obj);  Reset the context of an object. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Context;  Context ();  ; virtual ~Context () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseContext;  BaseContext ();  ;  ~BaseContext () override;  . @internal stuff related to the DAG traversal; enum  VisitedStatus { NOT_VISITED =0; , VISITED; , PRUNED; };  traversal flags More...;  ; typedef std::map< DAGNode *, StatusStruct > StatusMap;  map structure to store a traversal flag for each DAGNode More...;  ; typedef std::list< DAGNode * > NodeList;  list of DAGNode* More...;  ; std::set< DAGNode * > _descendancy;  all child nodes (unordered) More...;  ; NodeList _precomputedTraversalOrder;  the ordered list of Node to traverse from this Node More...;  ; void setDirtyDescendancy ();  bottom-up traversal removing descendancy More...;  ; void updateDescendancy ();  traversal updating the descendancy More...;  ; void executeVisitorTopDown (simulation::Visitor *action, NodeList &executedNodes, StatusMap &statusMap, DAGNode *visitorRoot);  ; void executeVisitorBottomUp (simulation::Visitor *action, NodeList &e",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:28760,Modifiability,inherit,inherited,28760,,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:29761,Modifiability,config,configurationSetting,29761,"rom sofa::simulation::Node; NodeSequence< Node, true > child;  ; NodeSequence< sofa::core::objectmodel::BaseObject, true > object;  ; NodeSequence< sofa::core::BehaviorModel > behaviorModel;  ; NodeSequence< sofa::core::BaseMapping > mapping;  ; NodeSequence< sofa::core::behavior::OdeSolver > solver;  ; NodeSequence< sofa::core::behavior::ConstraintSolver > constraintSolver;  ; NodeSequence< sofa::core::behavior::BaseLinearSolver > linearSolver;  ; NodeSequence< sofa::core::topology::BaseTopologyObject > topologyObject;  ; NodeSequence< sofa::core::behavior::BaseForceField > forceField;  ; NodeSequence< sofa::core::behavior::BaseInteractionForceField > interactionForceField;  ; NodeSequence< sofa::core::behavior::BaseProjectiveConstraintSet > projectiveConstraintSet;  ; NodeSequence< sofa::core::behavior::BaseConstraintSet > constraintSet;  ; NodeSequence< sofa::core::objectmodel::ContextObject > contextObject;  ; NodeSequence< sofa::core::objectmodel::ConfigurationSetting > configurationSetting;  ; NodeSequence< sofa::core::visual::Shader > shaders;  ; NodeSequence< sofa::core::visual::VisualModel > visualModel;  ; NodeSequence< sofa::core::visual::VisualManager > visualManager;  ; NodeSequence< sofa::core::CollisionModel > collisionModel;  ; NodeSequence< sofa::core::objectmodel::BaseObject > unsorted;  ; NodeSingle< sofa::core::behavior::BaseAnimationLoop > animationManager;  ; NodeSingle< sofa::core::visual::VisualLoop > visualLoop;  ; NodeSingle< sofa::core::topology::Topology > topology;  ; NodeSingle< sofa::core::topology::BaseMeshTopology > meshTopology;  ; NodeSingle< sofa::core::BaseState > state;  ; NodeSingle< sofa::core::behavior::BaseMechanicalState > mechanicalState;  ; NodeSingle< sofa::core::BaseMapping > mechanicalMapping;  ; NodeSingle< sofa::core::behavior::BaseMass > mass;  ; NodeSingle< sofa::core::collision::Pipeline > collisionPipeline;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData *",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:30686,Modifiability,inherit,inherited,30686,":BaseObject, true > object;  ; NodeSequence< sofa::core::BehaviorModel > behaviorModel;  ; NodeSequence< sofa::core::BaseMapping > mapping;  ; NodeSequence< sofa::core::behavior::OdeSolver > solver;  ; NodeSequence< sofa::core::behavior::ConstraintSolver > constraintSolver;  ; NodeSequence< sofa::core::behavior::BaseLinearSolver > linearSolver;  ; NodeSequence< sofa::core::topology::BaseTopologyObject > topologyObject;  ; NodeSequence< sofa::core::behavior::BaseForceField > forceField;  ; NodeSequence< sofa::core::behavior::BaseInteractionForceField > interactionForceField;  ; NodeSequence< sofa::core::behavior::BaseProjectiveConstraintSet > projectiveConstraintSet;  ; NodeSequence< sofa::core::behavior::BaseConstraintSet > constraintSet;  ; NodeSequence< sofa::core::objectmodel::ContextObject > contextObject;  ; NodeSequence< sofa::core::objectmodel::ConfigurationSetting > configurationSetting;  ; NodeSequence< sofa::core::visual::Shader > shaders;  ; NodeSequence< sofa::core::visual::VisualModel > visualModel;  ; NodeSequence< sofa::core::visual::VisualManager > visualManager;  ; NodeSequence< sofa::core::CollisionModel > collisionModel;  ; NodeSequence< sofa::core::objectmodel::BaseObject > unsorted;  ; NodeSingle< sofa::core::behavior::BaseAnimationLoop > animationManager;  ; NodeSingle< sofa::core::visual::VisualLoop > visualLoop;  ; NodeSingle< sofa::core::topology::Topology > topology;  ; NodeSingle< sofa::core::topology::BaseMeshTopology > meshTopology;  ; NodeSingle< sofa::core::BaseState > state;  ; NodeSingle< sofa::core::behavior::BaseMechanicalState > mechanicalState;  ; NodeSingle< sofa::core::BaseMapping > mechanicalMapping;  ; NodeSingle< sofa::core::behavior::BaseMass > mass;  ; NodeSingle< sofa::core::collision::Pipeline > collisionPipeline;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:31505,Modifiability,inherit,inherited,31505,"anicalState > mechanicalState;  ; NodeSingle< sofa::core::BaseMapping > mechanicalMapping;  ; NodeSingle< sofa::core::behavior::BaseMass > mass;  ; NodeSingle< sofa::core::collision::Pipeline > collisionPipeline;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Public Attributes inherited from sofa::core::objectmodel::Context; Data< bool > is_activated;  To Activate a node. More...;  ; Data< Vec3 > worldGravity_;  Gravity in the world coordinate system. More...;  ; Data< SReal > dt_;  Time step. More...;  ; Data< SReal > time_;  Current time. More...;  ; Data< bool > animate_;  Animate the Simulation(applied at initialization only) More...;  ; Data< bool > d_isSleeping;  The node is sleeping, and thus ignored by visitors. More...;  ; Data< bool > d_canChangeSleepingState;  The node can change its sleeping state. More...;  . Attribute details. ◆ _descendancy. std::set<DAGNode*> sofa::simulation::graph::DAGNode::_descendancy. protected . all child nodes (unordered) . ◆ _precomputedTraversalOrder. NodeList sofa::simulation::graph::DAGNode::_precomputedTraversalOrder. protected . the ordered list of Node to traverse from this Node . ◆ l_parents. LinkParents sofa::simulation::graph::DAGNode::l_parents. protected",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:625,Performance,perform,performed,625,"﻿. SOFA API: sofa::simulation::graph::DAGNode Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members . sofa::simulation::graph::DAGNode Class Reference . #include <DAGNode.h>. Inheritance diagram for sofa::simulation::graph::DAGNode:. [legend]; Detailed Description; Define the structure of the scene as a Directed Acyclic Graph. Contains component objects (as pointer lists) and parents/childs (as DAGNode objects).; The visitor traversal is performed in two passes:; a complete top-down traversal; then a complete bottom-up traversal in the exact invert order than the top-down traversal NB: contrary to the ""tree"" traversal, there are no interlinked forward/backward callbacks. There are only forward then only backward callbacks. Note that nodes created during a traversal are not traversed if they are created upper than the current node during the top-down traversal or if they are created during the bottom-up traversal. . Classes; struct  StatusStruct;  wrapper to use VisitedStatus in a std::map (to ensure the default map insertion will give NOT_VISITED) More...;  . Protected Attributes; LinkParents l_parents;  ;  Protected Attributes inherited from sofa::simulation::Node; bool debug_;  ; bool initialized;  ; std::stack< Visitor * > actionStack;  ; BaseContext * _context;  ; type::vector< MutationListener * > listener;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Protected Attributes inherited from sofa::core::obj",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:19954,Security,access,access,19954," sofa::core::objectmodel::BaseContext;  SOFA_CLASS (BaseContext, Base);  ; ComponentNameHelper & getNameHelper ();  Returns utilitary object to uniquely name objects in the context. More...;  ; virtual core::topology::BaseMeshTopology * getMeshTopology (SearchDirection dir=SearchUp) const;  Mesh Topology (unified interface for both static and dynamic topologies) More...;  ; virtual core::behavior::BaseMass * getMass () const;  Mass. More...;  ; template<class Object , class Container > ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ; template<class Container > ; Container * getObjects (Container *result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:20140,Security,access,access,20140,"logy (unified interface for both static and dynamic topologies) More...;  ; virtual core::behavior::BaseMass * getMass () const;  Mass. More...;  ; template<class Object , class Container > ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ; template<class Container > ; Container * getObjects (Container *result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:20333,Security,access,access,20333," ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ; template<class Container > ; Container * getObjects (Container *result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:20525,Security,access,access,20525,"result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:20749,Security,access,access,20749,"ate<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly se",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:20980,Security,access,access,20980,"wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:21198,Security,access,access,21198," the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  G",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:21434,Security,access,access,21434,"late<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access templa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:21677,Security,access,access,21677," (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:21878,Security,access,access,21878,"late<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirecti",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:22042,Security,access,access,22042,"possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:22213,Security,access,access,22213,"ect access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; virtual void setMechanicalState (BaseObject *);  Mechanical Degrees-of-Freedom. More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:22417,Security,access,access,22417,"ection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; virtual void setMechanicalState (BaseObject *);  Mechanical Degrees-of-Freedom. More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ; virtual bool addObject (sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd);  Add an object, or return false if not supported. More...;  ; virtual bool removeObject (sptr< BaseObject >); ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:22654,Security,access,access,22654,"Direction dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; virtual void setMechanicalState (BaseObject *);  Mechanical Degrees-of-Freedom. More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ; virtual bool addObject (sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd);  Add an object, or return false if not supported. More...;  ; virtual bool removeObject (sptr< BaseObject >);  Remove an object, or return false if not supported. More...;  ; virtual void notifyAddSlave (core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  ; virtual void notifyRemoveSlave (core::objectmodel::BaseObject *ma",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:22917,Security,access,access,22917,"rapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; virtual void setMechanicalState (BaseObject *);  Mechanical Degrees-of-Freedom. More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ; virtual bool addObject (sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd);  Add an object, or return false if not supported. More...;  ; virtual bool removeObject (sptr< BaseObject >);  Remove an object, or return false if not supported. More...;  ; virtual void notifyAddSlave (core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  ; virtual void notifyRemoveSlave (core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  ; virtual void notifyMoveSlave (core::objectmodel::BaseObject *previousMaster, core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  . Static Public Member Functions; static const std::string Ge",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:37092,Security,access,access,37092,"etMeshTopologyLink(). sofa::core::topology::BaseMeshTopology * sofa::simulation::graph::DAGNode::getMeshTopologyLink ; (; SearchDirection ; dir = SearchUp); const. overridevirtual . Mesh Topology that is relevant for this context (within it or its parents until a mapping is reached that does not preserve topologies). ; Reimplemented from sofa::simulation::Node. ◆ getNbParents(). size_t sofa::simulation::graph::DAGNode::getNbParents ; (; ); const. overridevirtual . returns number of parents ; Implements sofa::core::objectmodel::BaseNode. ◆ getObject() [1/2]. void * sofa::simulation::graph::DAGNode::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . const sofa::core::objectmodel::TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. overridevirtual . Generic object access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type,; Generic object access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Implements sofa::simulation::Node. ◆ getObject() [2/2]. void * sofa::simulation::graph::DAGNode::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . const std::string & ; path . ); const. overridevirtual . Generic object access, given a path from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Implements sofa::simulation::Node. ◆ getObjects(). void sofa::simulation::graph::DAGNode::getObjects ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const sofa::core::objectmodel::TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. overridevirtual . Generic list of objects access, given a set of required tags, possibly searching up or down from the current context; Note ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:37298,Security,access,access,37298,"etMeshTopologyLink(). sofa::core::topology::BaseMeshTopology * sofa::simulation::graph::DAGNode::getMeshTopologyLink ; (; SearchDirection ; dir = SearchUp); const. overridevirtual . Mesh Topology that is relevant for this context (within it or its parents until a mapping is reached that does not preserve topologies). ; Reimplemented from sofa::simulation::Node. ◆ getNbParents(). size_t sofa::simulation::graph::DAGNode::getNbParents ; (; ); const. overridevirtual . returns number of parents ; Implements sofa::core::objectmodel::BaseNode. ◆ getObject() [1/2]. void * sofa::simulation::graph::DAGNode::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . const sofa::core::objectmodel::TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. overridevirtual . Generic object access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type,; Generic object access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Implements sofa::simulation::Node. ◆ getObject() [2/2]. void * sofa::simulation::graph::DAGNode::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . const std::string & ; path . ); const. overridevirtual . Generic object access, given a path from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Implements sofa::simulation::Node. ◆ getObjects(). void sofa::simulation::graph::DAGNode::getObjects ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const sofa::core::objectmodel::TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. overridevirtual . Generic list of objects access, given a set of required tags, possibly searching up or down from the current context; Note ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:37703,Security,access,access,37703,"plements sofa::core::objectmodel::BaseNode. ◆ getObject() [1/2]. void * sofa::simulation::graph::DAGNode::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . const sofa::core::objectmodel::TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. overridevirtual . Generic object access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type,; Generic object access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Implements sofa::simulation::Node. ◆ getObject() [2/2]. void * sofa::simulation::graph::DAGNode::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . const std::string & ; path . ); const. overridevirtual . Generic object access, given a path from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Implements sofa::simulation::Node. ◆ getObjects(). void sofa::simulation::graph::DAGNode::getObjects ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const sofa::core::objectmodel::TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. overridevirtual . Generic list of objects access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type,; Generic list of objects access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Implements sofa::simulation::Node. ◆ getParents(). sofa::core::objectmodel::BaseNode::Parents sofa::simulation::graph::DAGNode::getParents ; (; ); const. overridevirtual . Get a list of parent node. ; Implements sofa::core",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:38186,Security,access,access,38186,"plate wrapper method should generally be used to have the correct return type, ; Implements sofa::simulation::Node. ◆ getObject() [2/2]. void * sofa::simulation::graph::DAGNode::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . const std::string & ; path . ); const. overridevirtual . Generic object access, given a path from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Implements sofa::simulation::Node. ◆ getObjects(). void sofa::simulation::graph::DAGNode::getObjects ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const sofa::core::objectmodel::TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. overridevirtual . Generic list of objects access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type,; Generic list of objects access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Implements sofa::simulation::Node. ◆ getParents(). sofa::core::objectmodel::BaseNode::Parents sofa::simulation::graph::DAGNode::getParents ; (; ); const. overridevirtual . Get a list of parent node. ; Implements sofa::core::objectmodel::BaseNode. ◆ hasAncestor() [1/2]. bool sofa::simulation::graph::DAGNode::hasAncestor ; (; const BaseContext * ; context); const. overridevirtual . Test if the given context is an ancestor of this context. An ancestor is a parent or (recursively) the parent of an ancestor. ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ hasAncestor() [2/2]. bool sofa::simulation::graph::DAGNode::hasAncestor ; (; const BaseNode * ; node); const. inlineoverridevirtual . Test if the given context is an ancestor of this context. An ancestor is a parent or (recursively) the parent of",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:38401,Security,access,access,38401,"plate wrapper method should generally be used to have the correct return type, ; Implements sofa::simulation::Node. ◆ getObject() [2/2]. void * sofa::simulation::graph::DAGNode::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . const std::string & ; path . ); const. overridevirtual . Generic object access, given a path from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Implements sofa::simulation::Node. ◆ getObjects(). void sofa::simulation::graph::DAGNode::getObjects ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const sofa::core::objectmodel::TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. overridevirtual . Generic list of objects access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type,; Generic list of objects access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Implements sofa::simulation::Node. ◆ getParents(). sofa::core::objectmodel::BaseNode::Parents sofa::simulation::graph::DAGNode::getParents ; (; ); const. overridevirtual . Get a list of parent node. ; Implements sofa::core::objectmodel::BaseNode. ◆ hasAncestor() [1/2]. bool sofa::simulation::graph::DAGNode::hasAncestor ; (; const BaseContext * ; context); const. overridevirtual . Test if the given context is an ancestor of this context. An ancestor is a parent or (recursively) the parent of an ancestor. ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ hasAncestor() [2/2]. bool sofa::simulation::graph::DAGNode::hasAncestor ; (; const BaseNode * ; node); const. inlineoverridevirtual . Test if the given context is an ancestor of this context. An ancestor is a parent or (recursively) the parent of",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:13307,Testability,log,logging,13307," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:13380,Testability,log,logging,13380," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:13422,Testability,log,logging,13422," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:13492,Testability,log,logging,13492," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:13603,Testability,log,logging,13603," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:13645,Testability,log,logging,13645," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:15469,Testability,log,logErrors,15469,"d::string > &str);  Assign the field values stored in the given list of name + value pairs of strings. More...;  ; virtual void parseFields (const std::map< std::string, std::string * > &str);  Assign the field values stored in the given map of name -> value pairs. More...;  ; void writeDatas (std::map< std::string, std::string * > &str);  Write the current field values to the given map of name -> value pairs. More...;  ; void writeDatas (std::ostream &out, const std::string &separator="" "");  ; BaseData * findData (const std::string &name) const;  ; std::vector< BaseData * > findGlobalField (const std::string &name) const;  Find data fields given a name: several can be found as we look into the alias map. More...;  ; BaseLink * findLink (const std::string &name) const;  ; std::vector< BaseLink * > findLinks (const std::string &name) const;  Find link fields given a name: several can be found as we look into the alias map. More...;  ; virtual void updateLinks (bool logErrors=true);  Update pointers in case the pointed-to objects have appeared. More...;  ; template<class T > ; BaseData::BaseInitData initData (::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataFlags dataflags);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; BaseData::BaseInitData initData (Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; Data< T >::InitData initData (Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; void addData (BaseData *f, const std::string &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:13688,Usability,clear,clearLoggedMessages,13688," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:26421,Usability,clear,clearObjectContext,26421,"tatusMap, Visitor::TreeTraversalRepetition repeat, bool alreadyRepeated=false);  ;  Protected Member Functions inherited from sofa::simulation::Node;  Node (const std::string &name="""");  ; virtual ~Node () override;  ; virtual bool doAddObject (sofa::core::objectmodel::BaseObject::SPtr obj, sofa::core::objectmodel::TypeOfInsertion insertionLocation=sofa::core::objectmodel::TypeOfInsertion::AtEnd);  Add an object. Detect the implemented interfaces and add the object to the corresponding lists. More...;  ; virtual bool doRemoveObject (sofa::core::objectmodel::BaseObject::SPtr obj);  Remove an object. More...;  ; virtual void doMoveObject (sofa::core::objectmodel::BaseObject::SPtr sobj, Node *prev_parent);  Remove an object. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseNode;  BaseNode ();  ;  ~BaseNode () override;  ; void setObjectContext (BaseObject::SPtr obj);  Set the context of an object to this. More...;  ; void clearObjectContext (BaseObject::SPtr obj);  Reset the context of an object. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Context;  Context ();  ; virtual ~Context () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseContext;  BaseContext ();  ;  ~BaseCo",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_simulation-members.html:2197,Deployability,update,updateContext,2197,"letesofa::simulation::Simulationvirtual; createNewGraph(const std::string &name) overridesofa::simulation::graph::DAGSimulationvirtual; createNewNode(const std::string &name) overridesofa::simulation::graph::DAGSimulationvirtual; DAGSimulation()sofa::simulation::graph::DAGSimulation; draw(sofa::core::visual::VisualParams *vparams, Node *root)=deletesofa::simulation::Simulationvirtual; dumpState(Node *root, std::ofstream &out)=deletesofa::simulation::Simulationvirtual; exportGraph(Node *root, const char *filename=nullptr)=deletesofa::simulation::Simulationvirtual; exportOBJ(Node *root, const char *filename, bool exportMTL=true)=deletesofa::simulation::Simulationvirtual; exportXML(Node *root, const char *fileName=nullptr)=deletesofa::simulation::Simulationvirtual; init(Node *root)=deletesofa::simulation::Simulationvirtual; initNode(Node *node)=deletesofa::simulation::Simulationvirtual; initTextures(Node *root)=deletesofa::simulation::Simulationvirtual; isDirectedAcyclicGraph() overridesofa::simulation::graph::DAGSimulationinlinevirtual; load(const std::string &, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0))=deletesofa::simulation::Simulationvirtual; operator=(const Simulation &n)=deletesofa::simulation::Simulation; print(Node *root)=deletesofa::simulation::Simulationvirtual; reset(Node *root)=deletesofa::simulation::Simulationvirtual; Simulation()sofa::simulation::Simulation; Simulation(const Simulation &n)=deletesofa::simulation::Simulation; SPtr typedefsofa::simulation::Simulation; theSimulationsofa::simulation::Simulationinlinestatic; unload(NodeSPtr root)=deletesofa::simulation::Simulationvirtual; updateContext(Node *root)=deletesofa::simulation::Simulationvirtual; updateVisual(Node *root)=deletesofa::simulation::Simulationvirtual; updateVisualContext(Node *root)=deletesofa::simulation::Simulationvirtual; ~DAGSimulation() overridesofa::simulation::graph::DAGSimulation; ~Simulation()sofa::simulation::Simulationvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_simulation-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_simulation-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_simulation-members.html:2266,Deployability,update,updateVisual,2266,"letesofa::simulation::Simulationvirtual; createNewGraph(const std::string &name) overridesofa::simulation::graph::DAGSimulationvirtual; createNewNode(const std::string &name) overridesofa::simulation::graph::DAGSimulationvirtual; DAGSimulation()sofa::simulation::graph::DAGSimulation; draw(sofa::core::visual::VisualParams *vparams, Node *root)=deletesofa::simulation::Simulationvirtual; dumpState(Node *root, std::ofstream &out)=deletesofa::simulation::Simulationvirtual; exportGraph(Node *root, const char *filename=nullptr)=deletesofa::simulation::Simulationvirtual; exportOBJ(Node *root, const char *filename, bool exportMTL=true)=deletesofa::simulation::Simulationvirtual; exportXML(Node *root, const char *fileName=nullptr)=deletesofa::simulation::Simulationvirtual; init(Node *root)=deletesofa::simulation::Simulationvirtual; initNode(Node *node)=deletesofa::simulation::Simulationvirtual; initTextures(Node *root)=deletesofa::simulation::Simulationvirtual; isDirectedAcyclicGraph() overridesofa::simulation::graph::DAGSimulationinlinevirtual; load(const std::string &, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0))=deletesofa::simulation::Simulationvirtual; operator=(const Simulation &n)=deletesofa::simulation::Simulation; print(Node *root)=deletesofa::simulation::Simulationvirtual; reset(Node *root)=deletesofa::simulation::Simulationvirtual; Simulation()sofa::simulation::Simulation; Simulation(const Simulation &n)=deletesofa::simulation::Simulation; SPtr typedefsofa::simulation::Simulation; theSimulationsofa::simulation::Simulationinlinestatic; unload(NodeSPtr root)=deletesofa::simulation::Simulationvirtual; updateContext(Node *root)=deletesofa::simulation::Simulationvirtual; updateVisual(Node *root)=deletesofa::simulation::Simulationvirtual; updateVisualContext(Node *root)=deletesofa::simulation::Simulationvirtual; ~DAGSimulation() overridesofa::simulation::graph::DAGSimulation; ~Simulation()sofa::simulation::Simulationvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_simulation-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_simulation-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_simulation-members.html:2334,Deployability,update,updateVisualContext,2334,"letesofa::simulation::Simulationvirtual; createNewGraph(const std::string &name) overridesofa::simulation::graph::DAGSimulationvirtual; createNewNode(const std::string &name) overridesofa::simulation::graph::DAGSimulationvirtual; DAGSimulation()sofa::simulation::graph::DAGSimulation; draw(sofa::core::visual::VisualParams *vparams, Node *root)=deletesofa::simulation::Simulationvirtual; dumpState(Node *root, std::ofstream &out)=deletesofa::simulation::Simulationvirtual; exportGraph(Node *root, const char *filename=nullptr)=deletesofa::simulation::Simulationvirtual; exportOBJ(Node *root, const char *filename, bool exportMTL=true)=deletesofa::simulation::Simulationvirtual; exportXML(Node *root, const char *fileName=nullptr)=deletesofa::simulation::Simulationvirtual; init(Node *root)=deletesofa::simulation::Simulationvirtual; initNode(Node *node)=deletesofa::simulation::Simulationvirtual; initTextures(Node *root)=deletesofa::simulation::Simulationvirtual; isDirectedAcyclicGraph() overridesofa::simulation::graph::DAGSimulationinlinevirtual; load(const std::string &, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0))=deletesofa::simulation::Simulationvirtual; operator=(const Simulation &n)=deletesofa::simulation::Simulation; print(Node *root)=deletesofa::simulation::Simulationvirtual; reset(Node *root)=deletesofa::simulation::Simulationvirtual; Simulation()sofa::simulation::Simulation; Simulation(const Simulation &n)=deletesofa::simulation::Simulation; SPtr typedefsofa::simulation::Simulation; theSimulationsofa::simulation::Simulationinlinestatic; unload(NodeSPtr root)=deletesofa::simulation::Simulationvirtual; updateContext(Node *root)=deletesofa::simulation::Simulationvirtual; updateVisual(Node *root)=deletesofa::simulation::Simulationvirtual; updateVisualContext(Node *root)=deletesofa::simulation::Simulationvirtual; ~DAGSimulation() overridesofa::simulation::graph::DAGSimulation; ~Simulation()sofa::simulation::Simulationvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_simulation-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_simulation-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_simulation-members.html:248,Modifiability,inherit,inherited,248,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::graph::DAGSimulation Member List . This is the complete list of members for sofa::simulation::graph::DAGSimulation, including all inherited members. animate(Node *root, SReal dt=0.0)=deletesofa::simulation::Simulationvirtual; computeBBox(Node *root, SReal *minBBox, SReal *maxBBox, bool init=true)=deletesofa::simulation::Simulationvirtual; computeTotalBBox(Node *root, SReal *minBBox, SReal *maxBBox)=deletesofa::simulation::Simulationvirtual; createNewGraph(const std::string &name) overridesofa::simulation::graph::DAGSimulationvirtual; createNewNode(const std::string &name) overridesofa::simulation::graph::DAGSimulationvirtual; DAGSimulation()sofa::simulation::graph::DAGSimulation; draw(sofa::core::visual::VisualParams *vparams, Node *root)=deletesofa::simulation::Simulationvirtual; dumpState(Node *root, std::ofstream &out)=deletesofa::simulation::Simulationvirtual; exportGraph(Node *root, const char *filename=nullptr)=deletesofa::simulation::Simulationvirtual; exportOBJ(Node *root, const char *filename, bool exportMTL=true)=deletesofa::simulation::Simulationvirtual; exportXML(Node *root, const char *fileName=nullptr)=deletesofa::simulation::Simulationvirtual; init(Node *root)=deletesofa::simulation::Simulationvirtual; initNode(Node *node)=deletesofa::simulation::Simulationvirtual; initTextures(Node *root)=deletesofa::simulation::Simulationvirtual; isDirectedAcyclicGraph() overridesofa::simulation::graph::DAGSimulationinlinevirtual; load(const std::string &, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0))=deletesofa::simulation::Simulationvirtual; operator=(const Simulation &n)=deletesofa::simulation::Simulation; print(Node *root)=deletesofa::simulation::Simulationvirtual; reset(Node *root)=deletesofa::simulation::Simulationvirtual; Simulation()sofa::simulation::Simulation; Simulation(const Simulation &n)=de",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_simulation-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_simulation-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_simulation-members.html:1573,Performance,load,load,1573,"letesofa::simulation::Simulationvirtual; createNewGraph(const std::string &name) overridesofa::simulation::graph::DAGSimulationvirtual; createNewNode(const std::string &name) overridesofa::simulation::graph::DAGSimulationvirtual; DAGSimulation()sofa::simulation::graph::DAGSimulation; draw(sofa::core::visual::VisualParams *vparams, Node *root)=deletesofa::simulation::Simulationvirtual; dumpState(Node *root, std::ofstream &out)=deletesofa::simulation::Simulationvirtual; exportGraph(Node *root, const char *filename=nullptr)=deletesofa::simulation::Simulationvirtual; exportOBJ(Node *root, const char *filename, bool exportMTL=true)=deletesofa::simulation::Simulationvirtual; exportXML(Node *root, const char *fileName=nullptr)=deletesofa::simulation::Simulationvirtual; init(Node *root)=deletesofa::simulation::Simulationvirtual; initNode(Node *node)=deletesofa::simulation::Simulationvirtual; initTextures(Node *root)=deletesofa::simulation::Simulationvirtual; isDirectedAcyclicGraph() overridesofa::simulation::graph::DAGSimulationinlinevirtual; load(const std::string &, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0))=deletesofa::simulation::Simulationvirtual; operator=(const Simulation &n)=deletesofa::simulation::Simulation; print(Node *root)=deletesofa::simulation::Simulationvirtual; reset(Node *root)=deletesofa::simulation::Simulationvirtual; Simulation()sofa::simulation::Simulation; Simulation(const Simulation &n)=deletesofa::simulation::Simulation; SPtr typedefsofa::simulation::Simulation; theSimulationsofa::simulation::Simulationinlinestatic; unload(NodeSPtr root)=deletesofa::simulation::Simulationvirtual; updateContext(Node *root)=deletesofa::simulation::Simulationvirtual; updateVisual(Node *root)=deletesofa::simulation::Simulationvirtual; updateVisualContext(Node *root)=deletesofa::simulation::Simulationvirtual; ~DAGSimulation() overridesofa::simulation::graph::DAGSimulation; ~Simulation()sofa::simulation::Simulationvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_simulation-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_simulation-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_simulation.html:458,Deployability,update,updated,458,"﻿. SOFA API: sofa::simulation::graph::DAGSimulation Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::graph::DAGSimulation Class Reference . #include <DAGSimulation.h>. Inheritance diagram for sofa::simulation::graph::DAGSimulation:. [legend]; Detailed Description; Main controller of the scene. Defines how the scene is inited at the beginning, and updated at each time step. Derives from BaseObject in order to model the parameters as Datas, which makes their edition easy in the GUI. . Public Member Functions;  DAGSimulation ();  ;  ~DAGSimulation () override;  ; virtual NodeSPtr createNewGraph (const std::string &name) override;  create a new graph(or tree) and return its root node. More...;  ; virtual NodeSPtr createNewNode (const std::string &name) override;  creates and returns a new node. More...;  ; bool isDirectedAcyclicGraph () override;  Can the simulation handle a directed acyclic graph? More...;  ;  Public Member Functions inherited from sofa::simulation::Simulation;  Simulation ();  ; virtual ~Simulation ();  ;  Simulation (const Simulation &n)=delete;  ; Simulation & operator= (const Simulation &n)=delete;  ; virtual void print (Node *root)=delete;  Print all object in the graph. More...;  ; virtual void init (Node *root)=delete;  Initialize the objects. More...;  ; virtual void initNode (Node *node)=delete;  Init a node without changing the context of the simulation. More...;  ; virtual void animate (Node *root, SReal dt=0.0)=delete;  Execute one timestep. If dt is 0, the dt parameter in the graph will be used. More...;  ; virtual void updateVisual (Node *root)=delete;  Update the Visual Models: triggers the Mappings. More...;  ; virtual void reset (Node *root)=delete;  Reset to initial state. More...;  ; virtual void initTextures (Node *root)=delete;  Initialize the textures. More...;  ; virtual void updateContext (Node *root)=delete;  Update conte",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_simulation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_simulation.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_simulation.html:1682,Deployability,update,updateVisual,1682," std::string &name) override;  create a new graph(or tree) and return its root node. More...;  ; virtual NodeSPtr createNewNode (const std::string &name) override;  creates and returns a new node. More...;  ; bool isDirectedAcyclicGraph () override;  Can the simulation handle a directed acyclic graph? More...;  ;  Public Member Functions inherited from sofa::simulation::Simulation;  Simulation ();  ; virtual ~Simulation ();  ;  Simulation (const Simulation &n)=delete;  ; Simulation & operator= (const Simulation &n)=delete;  ; virtual void print (Node *root)=delete;  Print all object in the graph. More...;  ; virtual void init (Node *root)=delete;  Initialize the objects. More...;  ; virtual void initNode (Node *node)=delete;  Init a node without changing the context of the simulation. More...;  ; virtual void animate (Node *root, SReal dt=0.0)=delete;  Execute one timestep. If dt is 0, the dt parameter in the graph will be used. More...;  ; virtual void updateVisual (Node *root)=delete;  Update the Visual Models: triggers the Mappings. More...;  ; virtual void reset (Node *root)=delete;  Reset to initial state. More...;  ; virtual void initTextures (Node *root)=delete;  Initialize the textures. More...;  ; virtual void updateContext (Node *root)=delete;  Update contexts. Required before drawing the scene if root flags are modified. More...;  ; virtual void updateVisualContext (Node *root)=delete;  Update contexts. Required before drawing the scene if root flags are modified. More...;  ; virtual void computeBBox (Node *root, SReal *minBBox, SReal *maxBBox, bool init=true)=delete;  ; virtual void computeTotalBBox (Node *root, SReal *minBBox, SReal *maxBBox)=delete;  ; virtual void draw (sofa::core::visual::VisualParams *vparams, Node *root)=delete;  Render the scene. More...;  ; virtual void exportOBJ (Node *root, const char *filename, bool exportMTL=true)=delete;  Export a scene to an OBJ 3D Scene. More...;  ; virtual void exportXML (Node *root, const char *fileName=n",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_simulation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_simulation.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_simulation.html:1953,Deployability,update,updateContext,1953,"he simulation handle a directed acyclic graph? More...;  ;  Public Member Functions inherited from sofa::simulation::Simulation;  Simulation ();  ; virtual ~Simulation ();  ;  Simulation (const Simulation &n)=delete;  ; Simulation & operator= (const Simulation &n)=delete;  ; virtual void print (Node *root)=delete;  Print all object in the graph. More...;  ; virtual void init (Node *root)=delete;  Initialize the objects. More...;  ; virtual void initNode (Node *node)=delete;  Init a node without changing the context of the simulation. More...;  ; virtual void animate (Node *root, SReal dt=0.0)=delete;  Execute one timestep. If dt is 0, the dt parameter in the graph will be used. More...;  ; virtual void updateVisual (Node *root)=delete;  Update the Visual Models: triggers the Mappings. More...;  ; virtual void reset (Node *root)=delete;  Reset to initial state. More...;  ; virtual void initTextures (Node *root)=delete;  Initialize the textures. More...;  ; virtual void updateContext (Node *root)=delete;  Update contexts. Required before drawing the scene if root flags are modified. More...;  ; virtual void updateVisualContext (Node *root)=delete;  Update contexts. Required before drawing the scene if root flags are modified. More...;  ; virtual void computeBBox (Node *root, SReal *minBBox, SReal *maxBBox, bool init=true)=delete;  ; virtual void computeTotalBBox (Node *root, SReal *minBBox, SReal *maxBBox)=delete;  ; virtual void draw (sofa::core::visual::VisualParams *vparams, Node *root)=delete;  Render the scene. More...;  ; virtual void exportOBJ (Node *root, const char *filename, bool exportMTL=true)=delete;  Export a scene to an OBJ 3D Scene. More...;  ; virtual void exportXML (Node *root, const char *fileName=nullptr)=delete;  Print all object in the graph in XML format. More...;  ; virtual void exportGraph (Node *root, const char *filename=nullptr)=delete;  Print all objects in the graph in the given file (format is given by the filename extension) More...;  ;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_simulation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_simulation.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_simulation.html:2093,Deployability,update,updateVisualContext,2093,";  ; virtual ~Simulation ();  ;  Simulation (const Simulation &n)=delete;  ; Simulation & operator= (const Simulation &n)=delete;  ; virtual void print (Node *root)=delete;  Print all object in the graph. More...;  ; virtual void init (Node *root)=delete;  Initialize the objects. More...;  ; virtual void initNode (Node *node)=delete;  Init a node without changing the context of the simulation. More...;  ; virtual void animate (Node *root, SReal dt=0.0)=delete;  Execute one timestep. If dt is 0, the dt parameter in the graph will be used. More...;  ; virtual void updateVisual (Node *root)=delete;  Update the Visual Models: triggers the Mappings. More...;  ; virtual void reset (Node *root)=delete;  Reset to initial state. More...;  ; virtual void initTextures (Node *root)=delete;  Initialize the textures. More...;  ; virtual void updateContext (Node *root)=delete;  Update contexts. Required before drawing the scene if root flags are modified. More...;  ; virtual void updateVisualContext (Node *root)=delete;  Update contexts. Required before drawing the scene if root flags are modified. More...;  ; virtual void computeBBox (Node *root, SReal *minBBox, SReal *maxBBox, bool init=true)=delete;  ; virtual void computeTotalBBox (Node *root, SReal *minBBox, SReal *maxBBox)=delete;  ; virtual void draw (sofa::core::visual::VisualParams *vparams, Node *root)=delete;  Render the scene. More...;  ; virtual void exportOBJ (Node *root, const char *filename, bool exportMTL=true)=delete;  Export a scene to an OBJ 3D Scene. More...;  ; virtual void exportXML (Node *root, const char *fileName=nullptr)=delete;  Print all object in the graph in XML format. More...;  ; virtual void exportGraph (Node *root, const char *filename=nullptr)=delete;  Print all objects in the graph in the given file (format is given by the filename extension) More...;  ; virtual void dumpState (Node *root, std::ofstream &out)=delete;  Dump the current state in the given stream. More...;  ; virtual NodeSPtr load",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_simulation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_simulation.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_simulation.html:1054,Modifiability,inherit,inherited,1054,"List of all members . sofa::simulation::graph::DAGSimulation Class Reference . #include <DAGSimulation.h>. Inheritance diagram for sofa::simulation::graph::DAGSimulation:. [legend]; Detailed Description; Main controller of the scene. Defines how the scene is inited at the beginning, and updated at each time step. Derives from BaseObject in order to model the parameters as Datas, which makes their edition easy in the GUI. . Public Member Functions;  DAGSimulation ();  ;  ~DAGSimulation () override;  ; virtual NodeSPtr createNewGraph (const std::string &name) override;  create a new graph(or tree) and return its root node. More...;  ; virtual NodeSPtr createNewNode (const std::string &name) override;  creates and returns a new node. More...;  ; bool isDirectedAcyclicGraph () override;  Can the simulation handle a directed acyclic graph? More...;  ;  Public Member Functions inherited from sofa::simulation::Simulation;  Simulation ();  ; virtual ~Simulation ();  ;  Simulation (const Simulation &n)=delete;  ; Simulation & operator= (const Simulation &n)=delete;  ; virtual void print (Node *root)=delete;  Print all object in the graph. More...;  ; virtual void init (Node *root)=delete;  Initialize the objects. More...;  ; virtual void initNode (Node *node)=delete;  Init a node without changing the context of the simulation. More...;  ; virtual void animate (Node *root, SReal dt=0.0)=delete;  Execute one timestep. If dt is 0, the dt parameter in the graph will be used. More...;  ; virtual void updateVisual (Node *root)=delete;  Update the Visual Models: triggers the Mappings. More...;  ; virtual void reset (Node *root)=delete;  Reset to initial state. More...;  ; virtual void initTextures (Node *root)=delete;  Initialize the textures. More...;  ; virtual void updateContext (Node *root)=delete;  Update contexts. Required before drawing the scene if root flags are modified. More...;  ; virtual void updateVisualContext (Node *root)=delete;  Update contexts. Required before dra",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_simulation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_simulation.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_simulation.html:3418,Modifiability,inherit,inherited,3418,"::visual::VisualParams *vparams, Node *root)=delete;  Render the scene. More...;  ; virtual void exportOBJ (Node *root, const char *filename, bool exportMTL=true)=delete;  Export a scene to an OBJ 3D Scene. More...;  ; virtual void exportXML (Node *root, const char *fileName=nullptr)=delete;  Print all object in the graph in XML format. More...;  ; virtual void exportGraph (Node *root, const char *filename=nullptr)=delete;  Print all objects in the graph in the given file (format is given by the filename extension) More...;  ; virtual void dumpState (Node *root, std::ofstream &out)=delete;  Dump the current state in the given stream. More...;  ; virtual NodeSPtr load (const std::string &, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0))=delete;  Load a scene from a file. More...;  ; virtual void unload (NodeSPtr root)=delete;  Unload a scene from a Node. More...;  . Additional Inherited Members;  Static Public Attributes inherited from sofa::simulation::Simulation; static Simulation::SPtr theSimulation { nullptr };  . Constructor details. ◆ DAGSimulation(). sofa::simulation::graph::DAGSimulation::DAGSimulation ; (; ). ◆ ~DAGSimulation(). sofa::simulation::graph::DAGSimulation::~DAGSimulation ; (; ). override . Function details. ◆ createNewGraph(). Node::SPtr sofa::simulation::graph::DAGSimulation::createNewGraph ; (; const std::string & ; name). overridevirtual . create a new graph(or tree) and return its root node. ; Implements sofa::simulation::Simulation. ◆ createNewNode(). Node::SPtr sofa::simulation::graph::DAGSimulation::createNewNode ; (; const std::string & ; name). overridevirtual . creates and returns a new node. ; Implements sofa::simulation::Simulation. ◆ isDirectedAcyclicGraph(). bool sofa::simulation::graph::DAGSimulation::isDirectedAcyclicGraph ; (; ). inlineoverridevirtual . Can the simulation handle a directed acyclic graph? ; Implements sofa::simulation::Simulation. sofasimulationgraphDAGSimulation; Gener",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_simulation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_simulation.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_simulation.html:3109,Performance,load,load,3109," the scene if root flags are modified. More...;  ; virtual void computeBBox (Node *root, SReal *minBBox, SReal *maxBBox, bool init=true)=delete;  ; virtual void computeTotalBBox (Node *root, SReal *minBBox, SReal *maxBBox)=delete;  ; virtual void draw (sofa::core::visual::VisualParams *vparams, Node *root)=delete;  Render the scene. More...;  ; virtual void exportOBJ (Node *root, const char *filename, bool exportMTL=true)=delete;  Export a scene to an OBJ 3D Scene. More...;  ; virtual void exportXML (Node *root, const char *fileName=nullptr)=delete;  Print all object in the graph in XML format. More...;  ; virtual void exportGraph (Node *root, const char *filename=nullptr)=delete;  Print all objects in the graph in the given file (format is given by the filename extension) More...;  ; virtual void dumpState (Node *root, std::ofstream &out)=delete;  Dump the current state in the given stream. More...;  ; virtual NodeSPtr load (const std::string &, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0))=delete;  Load a scene from a file. More...;  ; virtual void unload (NodeSPtr root)=delete;  Unload a scene from a Node. More...;  . Additional Inherited Members;  Static Public Attributes inherited from sofa::simulation::Simulation; static Simulation::SPtr theSimulation { nullptr };  . Constructor details. ◆ DAGSimulation(). sofa::simulation::graph::DAGSimulation::DAGSimulation ; (; ). ◆ ~DAGSimulation(). sofa::simulation::graph::DAGSimulation::~DAGSimulation ; (; ). override . Function details. ◆ createNewGraph(). Node::SPtr sofa::simulation::graph::DAGSimulation::createNewGraph ; (; const std::string & ; name). overridevirtual . create a new graph(or tree) and return its root node. ; Implements sofa::simulation::Simulation. ◆ createNewNode(). Node::SPtr sofa::simulation::graph::DAGSimulation::createNewNode ; (; const std::string & ; name). overridevirtual . creates and returns a new node. ; Implements sofa::simulation::Simulation.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_simulation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_simulation.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_export_dot_visitor-members.html:254,Modifiability,inherit,inherited,254,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::graph::ExportDotVisitor Member List . This is the complete list of members for sofa::simulation::graph::ExportDotVisitor, including all inherited members. addTag(Tag t)sofa::simulation::Visitorinline; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; canAccessSleepingNodesofa::simulation::Visitor; childOrderReversed(simulation::Node *)sofa::simulation::Visitorinlinevirtual; ctime_t typedefsofa::simulation::Visitor; debug_write_state_after(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; debug_write_state_before(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; display(Node *node, const char **color=nullptr)sofa::simulation::graph::ExportDotVisitorprotected; display(core::objectmodel::BaseObject *obj, const char **color=nullptr)sofa::simulation::graph::ExportDotVisitorprotected; end(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; end(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; execParams() constsofa::simulation::Visitorinline; execute(sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false)sofa::simulation::Visitorvirtual; ExportDotVisitor(const sofa::core::ExecParams *params, std::ostream *out)sofa::simulation::graph::ExportDotVisitor; for_each(Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(Visit *visitor, VContext *ctx",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_export_dot_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_export_dot_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_export_dot_visitor-members.html:6021,Testability,test,testTags,6021,":simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setTags(const TagSet &t)sofa::simulation::Visitorinline; showBehaviorModelsofa::simulation::graph::ExportDotVisitor; showCollisionModelsofa::simulation::graph::ExportDotVisitor; showCollisionPipelinesofa::simulation::graph::ExportDotVisitor; showConstraintsofa::simulation::graph::ExportDotVisitor; showContextsofa::simulation::graph::ExportDotVisitor; showForceFieldsofa::simulation::graph::ExportDotVisitor; showInteractionForceFieldsofa::simulation::graph::ExportDotVisitor; showMappingsofa::simulation::graph::ExportDotVisitor; showMasssofa::simulation::graph::ExportDotVisitor; showMechanicalMappingsofa::simulation::graph::ExportDotVisitor; showMechanicalStatesofa::simulation::graph::ExportDotVisitor; showNodesofa::simulation::graph::ExportDotVisitor; showObjectsofa::simulation::graph::ExportDotVisitor; showSolversofa::simulation::graph::ExportDotVisitor; showTopologysofa::simulation::graph::ExportDotVisitor; showVisualModelsofa::simulation::graph::ExportDotVisitor; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; ~ExportDotVisitor() overridesofa::simulation::graph::ExportDotVisitor; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_export_dot_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_export_dot_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_export_dot_visitor.html:1497,Availability,avail,available,1497,"ing from a root Node, into a std::ostream. The format is the DOT language from Graphviz (https://graphviz.org/) . Public Attributes; std::ostream * out;  ; bool showNode;  ; bool showObject;  ; bool showBehaviorModel;  ; bool showCollisionModel;  ; bool showVisualModel;  ; bool showMapping;  ; bool showContext;  ; bool showCollisionPipeline;  ; bool showSolver;  ; bool showMechanicalState;  ; bool showForceField;  ; bool showInteractionForceField;  ; bool showConstraint;  ; bool showMass;  ; bool showTopology;  ; bool showMechanicalMapping;  ; bool labelNodeName;  ; bool labelNodeClass;  ; bool labelObjectName;  ; bool labelObjectClass;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Protected Attributes; std::map< core::objectmodel::Base *, std::string > names;  None names in output. More...;  ; std::map< std::string, int > nextIndex;  Next indice available for duplicated names. More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  ExportDotVisitor (const sofa::core::ExecParams *params, std::ostream *out);  ;  ~ExportDotVisitor () override;  ; void processObject (Node *node, core::objectmodel::BaseObject *obj);  ; Result processNodeTopDown (Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; void processNodeBottomUp (Node *node) override;  Callback method called after child node have been processed and before going back to the parent node. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_export_dot_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_export_dot_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_export_dot_visitor.html:6947,Availability,avail,available,6947,", PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ labelNodeClass. bool sofa::simulation::graph::ExportDotVisitor::labelNodeClass. ◆ labelNodeName. bool sofa::simulation::graph::ExportDotVisitor::labelNodeName. ◆ labelObjectClass. bool sofa::simulation::graph::ExportDotVisitor::labelObjectClass. ◆ labelObjectName. bool sofa::simulation::graph::ExportDotVisitor::labelObjectName. ◆ names. std::map<core::objectmodel::Base*, std::string> sofa::simulation::graph::ExportDotVisitor::names. protected . None names in output. . ◆ nextIndex. std::map<std::string, int> sofa::simulation::graph::ExportDotVisitor::nextIndex. protected . Next indice available for duplicated names. . ◆ out. std::ostream* sofa::simulation::graph::ExportDotVisitor::out. ◆ showBehaviorModel. bool sofa::simulation::graph::ExportDotVisitor::showBehaviorModel. ◆ showCollisionModel. bool sofa::simulation::graph::ExportDotVisitor::showCollisionModel. ◆ showCollisionPipeline. bool sofa::simulation::graph::ExportDotVisitor::showCollisionPipeline. ◆ showConstraint. bool sofa::simulation::graph::ExportDotVisitor::showConstraint. ◆ showContext. bool sofa::simulation::graph::ExportDotVisitor::showContext. ◆ showForceField. bool sofa::simulation::graph::ExportDotVisitor::showForceField. ◆ showInteractionForceField. bool sofa::simulation::graph::ExportDotVisitor::showInteractionForceField. ◆ showMapping. bool sofa::simulation::graph::ExportDotVisitor::showMapping. ◆ showMass. bool sofa::simulation::graph::ExportDotVisitor::showMass. ◆ showMechanicalMapping. bool sofa::simulation::graph::ExportDotVisitor::showMechanicalMapping. ◆ showMechanicalState. bool sofa::simulation::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_export_dot_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_export_dot_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_export_dot_visitor.html:1150,Modifiability,inherit,inherited,1150,"﻿. SOFA API: sofa::simulation::graph::ExportDotVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::simulation::graph::ExportDotVisitor Class Reference . #include <ExportDotVisitor.h>. Inheritance diagram for sofa::simulation::graph::ExportDotVisitor:. [legend]; Detailed Description; Write the graph, starting from a root Node, into a std::ostream. The format is the DOT language from Graphviz (https://graphviz.org/) . Public Attributes; std::ostream * out;  ; bool showNode;  ; bool showObject;  ; bool showBehaviorModel;  ; bool showCollisionModel;  ; bool showVisualModel;  ; bool showMapping;  ; bool showContext;  ; bool showCollisionPipeline;  ; bool showSolver;  ; bool showMechanicalState;  ; bool showForceField;  ; bool showInteractionForceField;  ; bool showConstraint;  ; bool showMass;  ; bool showTopology;  ; bool showMechanicalMapping;  ; bool labelNodeName;  ; bool labelNodeClass;  ; bool labelObjectName;  ; bool labelObjectClass;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Protected Attributes; std::map< core::objectmodel::Base *, std::string > names;  None names in output. More...;  ; std::map< std::string, int > nextIndex;  Next indice available for duplicated names. More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  ExportDotVisitor (const sofa::core::ExecParams *params, std::ostream *out);  ;  ~ExportDotVisitor () override;  ; void processObject (Node *node, core::objectmodel::BaseObject *obj);  ; Result processNodeTopDown (Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method ret",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_export_dot_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_export_dot_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_export_dot_visitor.html:1563,Modifiability,inherit,inherited,1563,"g/) . Public Attributes; std::ostream * out;  ; bool showNode;  ; bool showObject;  ; bool showBehaviorModel;  ; bool showCollisionModel;  ; bool showVisualModel;  ; bool showMapping;  ; bool showContext;  ; bool showCollisionPipeline;  ; bool showSolver;  ; bool showMechanicalState;  ; bool showForceField;  ; bool showInteractionForceField;  ; bool showConstraint;  ; bool showMass;  ; bool showTopology;  ; bool showMechanicalMapping;  ; bool labelNodeName;  ; bool labelNodeClass;  ; bool labelObjectName;  ; bool labelObjectClass;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Protected Attributes; std::map< core::objectmodel::Base *, std::string > names;  None names in output. More...;  ; std::map< std::string, int > nextIndex;  Next indice available for duplicated names. More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  ExportDotVisitor (const sofa::core::ExecParams *params, std::ostream *out);  ;  ~ExportDotVisitor () override;  ; void processObject (Node *node, core::objectmodel::BaseObject *obj);  ; Result processNodeTopDown (Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; void processNodeBottomUp (Node *node) override;  Callback method called after child node have been processed and before going back to the parent node. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTrav",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_export_dot_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_export_dot_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_export_dot_visitor.html:2268,Modifiability,inherit,inherited,2268,"model::Base *, std::string > names;  None names in output. More...;  ; std::map< std::string, int > nextIndex;  Next indice available for duplicated names. More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  ExportDotVisitor (const sofa::core::ExecParams *params, std::ostream *out);  ;  ~ExportDotVisitor () override;  ; void processObject (Node *node, core::objectmodel::BaseObject *obj);  ; Result processNodeTopDown (Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; void processNodeBottomUp (Node *node) override;  Callback method called after child node have been processed and before going back to the parent node. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual const char * getCategoryName () const;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_export_dot_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_export_dot_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_export_dot_visitor.html:5048,Modifiability,inherit,inherited,5048,"bj);  ; std::string getName (core::objectmodel::Base *o, std::string prefix);  Compute the name of a given node or object. More...;  ; std::string getName (core::objectmodel::BaseNode *node);  Compute the name of a given node. More...;  ; std::string getName (core::objectmodel::BaseObject *obj);  Compute the name of a given object. More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ labelNodeClass. bool sofa::simulation::graph::ExportDotVisitor::labelNodeClass. ◆ labelNodeName. bool sofa::simulation::graph::ExportDotVisitor::labelNodeName. ◆ labelObjectClass. bool sofa::simulation::graph::ExportDotVisitor::labelObjectClass. ◆ labelObjectName. bool sofa::simulation::graph::ExportDotVisitor::labelO",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_export_dot_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_export_dot_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_export_dot_visitor.html:1294,Security,access,access,1294,"ion::graph::ExportDotVisitor Class Reference . #include <ExportDotVisitor.h>. Inheritance diagram for sofa::simulation::graph::ExportDotVisitor:. [legend]; Detailed Description; Write the graph, starting from a root Node, into a std::ostream. The format is the DOT language from Graphviz (https://graphviz.org/) . Public Attributes; std::ostream * out;  ; bool showNode;  ; bool showObject;  ; bool showBehaviorModel;  ; bool showCollisionModel;  ; bool showVisualModel;  ; bool showMapping;  ; bool showContext;  ; bool showCollisionPipeline;  ; bool showSolver;  ; bool showMechanicalState;  ; bool showForceField;  ; bool showInteractionForceField;  ; bool showConstraint;  ; bool showMass;  ; bool showTopology;  ; bool showMechanicalMapping;  ; bool labelNodeName;  ; bool labelNodeClass;  ; bool labelObjectName;  ; bool labelObjectClass;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Protected Attributes; std::map< core::objectmodel::Base *, std::string > names;  None names in output. More...;  ; std::map< std::string, int > nextIndex;  Next indice available for duplicated names. More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  ExportDotVisitor (const sofa::core::ExecParams *params, std::ostream *out);  ;  ~ExportDotVisitor () override;  ; void processObject (Node *node, core::objectmodel::BaseObject *obj);  ; Result processNodeTopDown (Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; void processNodeBottomUp (Node *node) override;  Callback method called after child node have been processed and before going back to the parent node. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_export_dot_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_export_dot_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_export_dot_visitor.html:2732,Testability,test,testTags,2732,";  ;  ~ExportDotVisitor () override;  ; void processObject (Node *node, core::objectmodel::BaseObject *obj);  ; Result processNodeTopDown (Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; void processNodeBottomUp (Node *node) override;  Callback method called after child node have been processed and before going back to the parent node. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual const char * getCategoryName () const;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_export_dot_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_export_dot_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_down_objects_visitor-members.html:264,Modifiability,inherit,inherited,264,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::graph::GetDownObjectsVisitor Member List . This is the complete list of members for sofa::simulation::graph::GetDownObjectsVisitor, including all inherited members. _class_infosofa::simulation::graph::GetDownObjectsVisitorprotected; _containersofa::simulation::graph::GetDownObjectsVisitorprotected; _tagssofa::simulation::graph::GetDownObjectsVisitorprotected; addTag(Tag t)sofa::simulation::Visitorinline; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; canAccessSleepingNodesofa::simulation::Visitor; childOrderReversed(simulation::Node *)sofa::simulation::Visitorinlinevirtual; ctime_t typedefsofa::simulation::Visitor; debug_write_state_after(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; debug_write_state_before(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; end(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; end(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; execParams() constsofa::simulation::Visitorinline; execute(sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false)sofa::simulation::Visitorvirtual; for_each(Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_down_objects_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_down_objects_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_down_objects_visitor-members.html:4331,Testability,test,testTags,4331,"tion::graph::GetDownObjectsVisitor; getInfos() constsofa::simulation::Visitorinlinevirtual; isThreadSafe() const overridesofa::simulation::graph::GetDownObjectsVisitorinlinevirtual; NO_REPETITION enum valuesofa::simulation::Visitor; paramssofa::simulation::Visitorprotected; processNodeBottomUp(simulation::Node *)sofa::simulation::Visitorinlinevirtual; processNodeBottomUp(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::graph::GetDownObjectsVisitorinlinevirtual; sofa::simulation::Visitor::processNodeTopDown(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setTags(const TagSet &t)sofa::simulation::Visitorinline; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; ~GetDownObjectsVisitor() overridesofa::simulation::graph::GetDownObjectsVisitor; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_down_objects_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_down_objects_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_down_objects_visitor.html:297,Availability,down,down,297,"﻿. SOFA API: sofa::simulation::graph::GetDownObjectsVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::graph::GetDownObjectsVisitor Class Reference . get all down objects respecting specified class_info and tags ; More... Inheritance diagram for sofa::simulation::graph::GetDownObjectsVisitor:. [legend]; Detailed Description; get all down objects respecting specified class_info and tags . Protected Attributes; const sofa::core::objectmodel::ClassInfo & _class_info;  ; DAGNode::GetObjectsCallBack & _container;  ; const sofa::core::objectmodel::TagSet & _tags;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  GetDownObjectsVisitor (const sofa::core::objectmodel::ClassInfo &class_info, DAGNode::GetObjectsCallBack &container, const sofa::core::objectmodel::TagSet &tags);  ;  ~GetDownObjectsVisitor () override;  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_down_objects_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_down_objects_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_down_objects_visitor.html:474,Availability,down,down,474,"﻿. SOFA API: sofa::simulation::graph::GetDownObjectsVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::graph::GetDownObjectsVisitor Class Reference . get all down objects respecting specified class_info and tags ; More... Inheritance diagram for sofa::simulation::graph::GetDownObjectsVisitor:. [legend]; Detailed Description; get all down objects respecting specified class_info and tags . Protected Attributes; const sofa::core::objectmodel::ClassInfo & _class_info;  ; DAGNode::GetObjectsCallBack & _container;  ; const sofa::core::objectmodel::TagSet & _tags;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  GetDownObjectsVisitor (const sofa::core::objectmodel::ClassInfo &class_info, DAGNode::GetObjectsCallBack &container, const sofa::core::objectmodel::TagSet &tags);  ;  ~GetDownObjectsVisitor () override;  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_down_objects_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_down_objects_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_down_objects_visitor.html:728,Modifiability,inherit,inherited,728,"﻿. SOFA API: sofa::simulation::graph::GetDownObjectsVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::graph::GetDownObjectsVisitor Class Reference . get all down objects respecting specified class_info and tags ; More... Inheritance diagram for sofa::simulation::graph::GetDownObjectsVisitor:. [legend]; Detailed Description; get all down objects respecting specified class_info and tags . Protected Attributes; const sofa::core::objectmodel::ClassInfo & _class_info;  ; DAGNode::GetObjectsCallBack & _container;  ; const sofa::core::objectmodel::TagSet & _tags;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  GetDownObjectsVisitor (const sofa::core::objectmodel::ClassInfo &class_info, DAGNode::GetObjectsCallBack &container, const sofa::core::objectmodel::TagSet &tags);  ;  ~GetDownObjectsVisitor () override;  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_down_objects_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_down_objects_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_down_objects_visitor.html:1452,Modifiability,inherit,inherited,1452,"const sofa::core::objectmodel::ClassInfo & _class_info;  ; DAGNode::GetObjectsCallBack & _container;  ; const sofa::core::objectmodel::TagSet & _tags;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  GetDownObjectsVisitor (const sofa::core::objectmodel::ClassInfo &class_info, DAGNode::GetObjectsCallBack &container, const sofa::core::objectmodel::TagSet &tags);  ;  ~GetDownObjectsVisitor () override;  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_down_objects_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_down_objects_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_down_objects_visitor.html:3606,Modifiability,inherit,inherited,3606,"ing(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_down_objects_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_down_objects_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_down_objects_visitor.html:3813,Modifiability,inherit,inherited,3813,"nst Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ _class_info. const sofa::core::objectmodel::ClassInfo& sofa::simulation::graph::GetDownObjectsVisitor::_class_info. protected . ◆ _container. DAGNode::GetObjectsCallBack& sofa::simulation::graph::GetDownObjectsVisitor::_container. protected . ◆ _tags. const sofa::core::objectmodel::TagSet& sofa::simulation::graph::Get",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_down_objects_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_down_objects_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_down_objects_visitor.html:3750,Security,access,access,3750,"t *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_down_objects_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_down_objects_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_down_objects_visitor.html:2036,Testability,test,testTags,2036,"ation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_down_objects_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_down_objects_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_up_objects_visitor-members.html:260,Modifiability,inherit,inherited,260,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::graph::GetUpObjectsVisitor Member List . This is the complete list of members for sofa::simulation::graph::GetUpObjectsVisitor, including all inherited members. _class_infosofa::simulation::graph::GetUpObjectsVisitorprotected; _containersofa::simulation::graph::GetUpObjectsVisitorprotected; _searchNodesofa::simulation::graph::GetUpObjectsVisitorprotected; _tagssofa::simulation::graph::GetUpObjectsVisitorprotected; addTag(Tag t)sofa::simulation::Visitorinline; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; canAccessSleepingNodesofa::simulation::Visitor; childOrderReversed(simulation::Node *)sofa::simulation::Visitorinlinevirtual; ctime_t typedefsofa::simulation::Visitor; debug_write_state_after(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; debug_write_state_before(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; end(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; end(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; execParams() constsofa::simulation::Visitorinline; execute(sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false)sofa::simulation::Visitorvirtual; for_each(Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedT",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_up_objects_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_up_objects_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_up_objects_visitor-members.html:4396,Testability,test,testTags,4396,"ontainer, const sofa::core::objectmodel::TagSet &tags)sofa::simulation::graph::GetUpObjectsVisitor; isThreadSafe() const overridesofa::simulation::graph::GetUpObjectsVisitorinlinevirtual; NO_REPETITION enum valuesofa::simulation::Visitor; paramssofa::simulation::Visitorprotected; processNodeBottomUp(simulation::Node *)sofa::simulation::Visitorinlinevirtual; processNodeBottomUp(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::graph::GetUpObjectsVisitorinlinevirtual; sofa::simulation::Visitor::processNodeTopDown(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setTags(const TagSet &t)sofa::simulation::Visitorinline; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; ~GetUpObjectsVisitor() overridesofa::simulation::graph::GetUpObjectsVisitor; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_up_objects_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_up_objects_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_up_objects_visitor.html:744,Modifiability,inherit,inherited,744,"﻿. SOFA API: sofa::simulation::graph::GetUpObjectsVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::graph::GetUpObjectsVisitor Class Reference . get all up objects respecting specified class_info and tags ; More... Inheritance diagram for sofa::simulation::graph::GetUpObjectsVisitor:. [legend]; Detailed Description; get all up objects respecting specified class_info and tags . Protected Attributes; DAGNode * _searchNode;  ; const sofa::core::objectmodel::ClassInfo & _class_info;  ; DAGNode::GetObjectsCallBack & _container;  ; const sofa::core::objectmodel::TagSet & _tags;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  GetUpObjectsVisitor (DAGNode *searchNode, const sofa::core::objectmodel::ClassInfo &class_info, DAGNode::GetObjectsCallBack &container, const sofa::core::objectmodel::TagSet &tags);  ;  ~GetUpObjectsVisitor () override;  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRep",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_up_objects_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_up_objects_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_up_objects_visitor.html:1485,Modifiability,inherit,inherited,1485,":objectmodel::ClassInfo & _class_info;  ; DAGNode::GetObjectsCallBack & _container;  ; const sofa::core::objectmodel::TagSet & _tags;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  GetUpObjectsVisitor (DAGNode *searchNode, const sofa::core::objectmodel::ClassInfo &class_info, DAGNode::GetObjectsCallBack &container, const sofa::core::objectmodel::TagSet &tags);  ;  ~GetUpObjectsVisitor () override;  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_up_objects_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_up_objects_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_up_objects_visitor.html:3639,Modifiability,inherit,inherited,3639,"ing(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_up_objects_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_up_objects_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_up_objects_visitor.html:3846,Modifiability,inherit,inherited,3846,"nst Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ _class_info. const sofa::core::objectmodel::ClassInfo& sofa::simulation::graph::GetUpObjectsVisitor::_class_info. protected . ◆ _container. DAGNode::GetObjectsCallBack& sofa::simulation::graph::GetUpObjectsVisitor::_container. protected . ◆ _searchNode. DAGNode* sofa::simulation::graph::GetUpObjectsVisitor::_searchNod",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_up_objects_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_up_objects_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_up_objects_visitor.html:3783,Security,access,access,3783,"t *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_up_objects_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_up_objects_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_up_objects_visitor.html:2069,Testability,test,testTags,2069,"ation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_up_objects_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_up_objects_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian-members.html:302,Modifiability,inherit,inherited,302,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalAccumulateJacobian Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalAccumulateJacobian, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *node, core::BaseMapping *map) overridesofa::simulation::mechanicalvisitor::MechanicalAccumulateJacobianvirtual; sofa::simulation::BaseMechanicalVisitor::bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian-members.html:10384,Testability,test,testTags,10384,"ulation::BaseMechanicalVisitorvirtual; processNodeTopDown(simulation::Node *node, LocalStorage *stack) override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; ressofa::simulation::mechanicalvisitor::MechanicalAccumulateJacobianprotected; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, core::BaseMapping *) overridesofa::simulation::mechanicalvisitor::MechanicalAccumulateJacobianinlinevirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html:794,Modifiability,inherit,inherited,794,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalAccumulateJacobian Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalAccumulateJacobian Class Reference . #include <MechanicalAccumulateJacobian.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalAccumulateJacobian:. [legend]; Detailed Description; This class define a visitor which will go through the scene graph in reverse order and call the method applyJT of each mechanical mapping (See alsosofa::core::BaseMapping) . Protected Attributes; core::MultiMatrixDerivId res;  ; const sofa::core::ConstraintParams * cparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  MechanicalAccumulateJacobian (const core::ConstraintParams *_cparams, core::MultiMatrixDerivId _res);  ; void bwdMechanicalMapping (simulation::Node *node, core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; const char * getClassName () const override;  ; bool isThreadSafe () const override;  Specify whether this visitor can be parallelized. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, core::BaseMapping *) override;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html:1018,Modifiability,inherit,inherited,1018,"or::MechanicalAccumulateJacobian Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalAccumulateJacobian Class Reference . #include <MechanicalAccumulateJacobian.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalAccumulateJacobian:. [legend]; Detailed Description; This class define a visitor which will go through the scene graph in reverse order and call the method applyJT of each mechanical mapping (See alsosofa::core::BaseMapping) . Protected Attributes; core::MultiMatrixDerivId res;  ; const sofa::core::ConstraintParams * cparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  MechanicalAccumulateJacobian (const core::ConstraintParams *_cparams, core::MultiMatrixDerivId _res);  ; void bwdMechanicalMapping (simulation::Node *node, core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; const char * getClassName () const override;  ; bool isThreadSafe () const override;  Specify whether this visitor can be parallelized. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, core::BaseMapping *) override;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const overri",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html:1623,Modifiability,inherit,inherited,1623,"itor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  MechanicalAccumulateJacobian (const core::ConstraintParams *_cparams, core::MultiMatrixDerivId _res);  ; void bwdMechanicalMapping (simulation::Node *node, core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; const char * getClassName () const override;  ; bool isThreadSafe () const override;  Specify whether this visitor can be parallelized. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, core::BaseMapping *) override;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the Constrai",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html:8459,Modifiability,inherit,inherited,8459,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html:10272,Modifiability,inherit,inherited,10272,"ject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html:10479,Modifiability,inherit,inherited,10479,"al Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ cparams. const sofa::core::ConstraintParams* sofa::simulation::mechanicalvisitor::MechanicalAccumulateJacobian::cparams. protected . ◆ res. core::MultiMatrixDerivId sofa::simulation::mechanical",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html:10730,Modifiability,inherit,inherited,10730,"al Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ cparams. const sofa::core::ConstraintParams* sofa::simulation::mechanicalvisitor::MechanicalAccumulateJacobian::cparams. protected . ◆ res. core::MultiMatrixDerivId sofa::simulation::mechanical",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html:10416,Security,access,access,10416,"odel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::st",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html:8873,Testability,test,testTags,8873," Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv-members.html:308,Modifiability,inherit,inherited,308,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalAccumulateMatrixDeriv Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalAccumulateMatrixDeriv, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map) overridesofa::simulation::mechanicalvisitor::MechanicalAccumulateMatrixDerivvirtual; sofa::simulation::BaseMechanicalVisitor::bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMec",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv-members.html:10709,Testability,test,testTags,10709,"override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; ressofa::simulation::mechanicalvisitor::MechanicalAccumulateMatrixDerivprotected; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; reverseOrdersofa::simulation::mechanicalvisitor::MechanicalAccumulateMatrixDerivprotected; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *) overridesofa::simulation::mechanicalvisitor::MechanicalAccumulateMatrixDerivinlinevirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html:828,Modifiability,inherit,inherited,828,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalAccumulateMatrixDeriv Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalAccumulateMatrixDeriv Class Reference . #include <MechanicalAccumulateMatrixDeriv.h>; Accumulate Jacobian matrices through the mappings up to the independent DOFs. ; More... Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalAccumulateMatrixDeriv:. [legend]; Detailed Description; Accumulate Jacobian matrices through the mappings up to the independent DOFs. . Protected Attributes; sofa::core::MultiMatrixDerivId res;  ; const sofa::core::ConstraintParams * cparams;  ; bool reverseOrder;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  MechanicalAccumulateMatrixDeriv (const sofa::core::ConstraintParams *_cparams, sofa::core::MultiMatrixDerivId _res, bool _reverseOrder=false);  ; const sofa::core::ConstraintParams * constraintParams () const;  ; void bwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; bool childOrderReversed (simulation::Node *) override;  Return true to reverse the order of traversal of child nodes. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  This visitor must go through all mechanical mappings, even if isMechanical flag is disabled. More...;  ; const char * getClassName () const override;  ; bool isThreadSafe () const override;  Specify whether this visitor can be parallelized. More...;  ;  Public Member Funct",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html:1052,Modifiability,inherit,inherited,1052,"v Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalAccumulateMatrixDeriv Class Reference . #include <MechanicalAccumulateMatrixDeriv.h>; Accumulate Jacobian matrices through the mappings up to the independent DOFs. ; More... Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalAccumulateMatrixDeriv:. [legend]; Detailed Description; Accumulate Jacobian matrices through the mappings up to the independent DOFs. . Protected Attributes; sofa::core::MultiMatrixDerivId res;  ; const sofa::core::ConstraintParams * cparams;  ; bool reverseOrder;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  MechanicalAccumulateMatrixDeriv (const sofa::core::ConstraintParams *_cparams, sofa::core::MultiMatrixDerivId _res, bool _reverseOrder=false);  ; const sofa::core::ConstraintParams * constraintParams () const;  ; void bwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; bool childOrderReversed (simulation::Node *) override;  Return true to reverse the order of traversal of child nodes. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  This visitor must go through all mechanical mappings, even if isMechanical flag is disabled. More...;  ; const char * getClassName () const override;  ; bool isThreadSafe () const override;  Specify whether this visitor can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVis",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html:2006,Modifiability,inherit,inherited,2006,"Id _res, bool _reverseOrder=false);  ; const sofa::core::ConstraintParams * constraintParams () const;  ; void bwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; bool childOrderReversed (simulation::Node *) override;  Return true to reverse the order of traversal of child nodes. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  This visitor must go through all mechanical mappings, even if isMechanical flag is disabled. More...;  ; const char * getClassName () const override;  ; bool isThreadSafe () const override;  Specify whether this visitor can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual Result fwdMe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html:8842,Modifiability,inherit,inherited,8842,"VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorTyp",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html:10526,Modifiability,inherit,inherited,10526,"ject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html:10733,Modifiability,inherit,inherited,10733,"al Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ cparams. const sofa::core::ConstraintParams* sofa::simulation::mechanicalvisitor::MechanicalAccumulateMatrixDeriv::cparams. protected . ◆ res. sofa::core::MultiMatrixDerivId sofa::simulation::m",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html:10984,Modifiability,inherit,inherited,10984,"al Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ cparams. const sofa::core::ConstraintParams* sofa::simulation::mechanicalvisitor::MechanicalAccumulateMatrixDeriv::cparams. protected . ◆ res. sofa::core::MultiMatrixDerivId sofa::simulation::m",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html:10670,Security,access,access,10670,"odel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::st",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html:9127,Testability,test,testTags,9127,"VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorTyp",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_matrix_deriv.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor-members.html:296,Modifiability,inherit,inherited,296,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalAccFromFVisitor Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalAccFromFVisitor, including all inherited members. asofa::simulation::mechanicalvisitor::MechanicalAccFromFVisitor; addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMec",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor-members.html:10517,Testability,test,testTags,10517,"simulation::BaseMechanicalVisitorprotectedvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::BaseMechanicalVisitorvirtual; processNodeTopDown(simulation::Node *node, LocalStorage *stack) override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html:601,Modifiability,inherit,inherited,601,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalAccFromFVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalAccFromFVisitor Class Reference . #include <MechanicalAccFromFVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalAccFromFVisitor:. [legend]; Detailed Description; Compute accelerations generated by given forces . Public Attributes; sofa::core::MultiVecDerivId a;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalAccFromFVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId a);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMass (simulation::Node *, sofa::core::behavior::BaseMass *mass) override;  Process the BaseMass. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryNam",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html:1447,Modifiability,inherit,inherited,1447,"r (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId a);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMass (simulation::Node *, sofa::core::behavior::BaseMass *mass) override;  Process the BaseMass. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html:1595,Modifiability,inherit,inherited,1595,"r (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId a);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMass (simulation::Node *, sofa::core::behavior::BaseMass *mass) override;  Process the BaseMass. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html:8351,Modifiability,inherit,inherited,8351,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html:10125,Modifiability,inherit,inherited,10125,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html:10248,Modifiability,inherit,inherited,10248,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html:10472,Modifiability,inherit,inherited,10472,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ a. sofa::core::MultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalAccFromFVisitor::a. Constructor details. ◆ MechanicalAccFromFV",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html:10584,Modifiability,inherit,inherited,10584,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ a. sofa::core::MultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalAccFromFVisitor::a. Constructor details. ◆ MechanicalAccFromFV",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html:10835,Modifiability,inherit,inherited,10835,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ a. sofa::core::MultiVecDerivId sofa::simulation::mechanicalvisitor::MechanicalAccFromFVisitor::a. Constructor details. ◆ MechanicalAccFromFV",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html:745,Security,access,access,745,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalAccFromFVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalAccFromFVisitor Class Reference . #include <MechanicalAccFromFVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalAccFromFVisitor:. [legend]; Detailed Description; Compute accelerations generated by given forces . Public Attributes; sofa::core::MultiVecDerivId a;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalAccFromFVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId a);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMass (simulation::Node *, sofa::core::behavior::BaseMass *mass) override;  Process the BaseMass. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryNam",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html:8723,Testability,test,testTags,8723,"iveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor-members.html:296,Modifiability,inherit,inherited,296,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalAddMBKdxVisitor Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalAddMBKdxVisitor, including all inherited members. accumulatesofa::simulation::mechanicalvisitor::MechanicalAddMBKdxVisitor; addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map) overridesofa::simulation::mechanicalvisitor::MechanicalAddMBKdxVisitorvirtual; sofa::simulation::MechanicalVisitor::bwdMechanicalMapping(VisitorContext *ctx, so",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor-members.html:10835,Testability,test,testTags,10835,"wn(simulation::Node *node) overridesofa::simulation::BaseMechanicalVisitorvirtual; processNodeTopDown(simulation::Node *node, LocalStorage *stack) override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; ressofa::simulation::mechanicalvisitor::MechanicalAddMBKdxVisitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html:569,Deployability,integrat,integration,569,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalAddMBKdxVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalAddMBKdxVisitor Class Reference . #include <MechanicalAddMBKdxVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalAddMBKdxVisitor:. [legend]; Detailed Description; Accumulate the product of the system matrix by a given vector. Typically used in implicit integration solved by a Conjugate Gradient algorithm. The current value of the dx vector is used. This action is typically called after a MechanicalPropagateDxAndResetForceVisitor. . Public Attributes; sofa::core::MultiVecDerivId res;  ; bool accumulate;  Accumulate everything back to the DOFs through the mappings. More...;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalAddMBKdxVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId res, bool accumulate=true);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; Result fwdForceField (simulation::Node *, sofa::core::behavior::BaseForceField *ff) override;  Process all the BaseForceField. More...;  ; void bwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html:569,Integrability,integrat,integration,569,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalAddMBKdxVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalAddMBKdxVisitor Class Reference . #include <MechanicalAddMBKdxVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalAddMBKdxVisitor:. [legend]; Detailed Description; Accumulate the product of the system matrix by a given vector. Typically used in implicit integration solved by a Conjugate Gradient algorithm. The current value of the dx vector is used. This action is typically called after a MechanicalPropagateDxAndResetForceVisitor. . Public Attributes; sofa::core::MultiVecDerivId res;  ; bool accumulate;  Accumulate everything back to the DOFs through the mappings. More...;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalAddMBKdxVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId res, bool accumulate=true);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; Result fwdForceField (simulation::Node *, sofa::core::behavior::BaseForceField *ff) override;  Process all the BaseForceField. More...;  ; void bwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html:917,Modifiability,inherit,inherited,917,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalAddMBKdxVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalAddMBKdxVisitor Class Reference . #include <MechanicalAddMBKdxVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalAddMBKdxVisitor:. [legend]; Detailed Description; Accumulate the product of the system matrix by a given vector. Typically used in implicit integration solved by a Conjugate Gradient algorithm. The current value of the dx vector is used. This action is typically called after a MechanicalPropagateDxAndResetForceVisitor. . Public Attributes; sofa::core::MultiVecDerivId res;  ; bool accumulate;  Accumulate everything back to the DOFs through the mappings. More...;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalAddMBKdxVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId res, bool accumulate=true);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; Result fwdForceField (simulation::Node *, sofa::core::behavior::BaseForceField *ff) override;  Process all the BaseForceField. More...;  ; void bwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html:2324,Modifiability,inherit,inherited,2324,"ForceField *ff) override;  Process all the BaseForceField. More...;  ; void bwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState when it is not mapped from parent level. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html:2472,Modifiability,inherit,inherited,2472,"ForceField *ff) override;  Process all the BaseForceField. More...;  ; void bwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState when it is not mapped from parent level. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html:8699,Modifiability,inherit,inherited,8699,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html:10473,Modifiability,inherit,inherited,10473,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html:10596,Modifiability,inherit,inherited,10596,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html:10820,Modifiability,inherit,inherited,10820,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ accumulate. bool sofa::simulation::mechanicalvisitor::MechanicalAddMBKdxVisitor::accumulate. Accumulate everything back to the DOFs through ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html:10932,Modifiability,inherit,inherited,10932,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ accumulate. bool sofa::simulation::mechanicalvisitor::MechanicalAddMBKdxVisitor::accumulate. Accumulate everything back to the DOFs through ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html:11183,Modifiability,inherit,inherited,11183,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ accumulate. bool sofa::simulation::mechanicalvisitor::MechanicalAddMBKdxVisitor::accumulate. Accumulate everything back to the DOFs through ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html:1061,Security,access,access,1061,"MechanicalAddMBKdxVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalAddMBKdxVisitor Class Reference . #include <MechanicalAddMBKdxVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalAddMBKdxVisitor:. [legend]; Detailed Description; Accumulate the product of the system matrix by a given vector. Typically used in implicit integration solved by a Conjugate Gradient algorithm. The current value of the dx vector is used. This action is typically called after a MechanicalPropagateDxAndResetForceVisitor. . Public Attributes; sofa::core::MultiVecDerivId res;  ; bool accumulate;  Accumulate everything back to the DOFs through the mappings. More...;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalAddMBKdxVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId res, bool accumulate=true);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; Result fwdForceField (simulation::Node *, sofa::core::behavior::BaseForceField *ff) override;  Process all the BaseForceField. More...;  ; void bwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState wh",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html:9071,Testability,test,testTags,9071,"iveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor-members.html:310,Modifiability,inherit,inherited,310,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalAddMBK_ToMatrixVisitor Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalAddMBK_ToMatrixVisitor, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalState(simulation::Node *, sofa::core::behavi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor-members.html:10528,Testability,test,testTags,10528,"ectedvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::BaseMechanicalVisitorvirtual; processNodeTopDown(simulation::Node *node, LocalStorage *stack) override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *node, core::BaseMapping *map) overridesofa::simulation::mechanicalvisitor::MechanicalAddMBK_ToMatrixVisitorvirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html:693,Modifiability,inherit,inherited,693,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalAddMBK_ToMatrixVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalAddMBK_ToMatrixVisitor Class Reference . #include <MechanicalAddMBK_ToMatrixVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalAddMBK_ToMatrixVisitor:. [legend]; Detailed Description; Accumulate the entries of a mechanical matrix (mass or stiffness) of the whole scene . Public Attributes; const sofa::core::behavior::MultiMatrixAccessor * matrix;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalAddMBK_ToMatrixVisitor (const core::MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *_matrix);  ; const char * getClassName () const override;  ; Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdForceField (simulation::Node *, core::behavior::BaseForceField *ff) override;  Process all the BaseForceField. More...;  ; bool stopAtMechanicalMapping (simulation::Node *node, core::BaseMapping *map) override;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Nod",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html:1514,Modifiability,inherit,inherited,1514,"sSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalAddMBK_ToMatrixVisitor (const core::MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *_matrix);  ; const char * getClassName () const override;  ; Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdForceField (simulation::Node *, core::behavior::BaseForceField *ff) override;  Process all the BaseForceField. More...;  ; bool stopAtMechanicalMapping (simulation::Node *node, core::BaseMapping *map) override;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContext",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html:1662,Modifiability,inherit,inherited,1662,"sSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalAddMBK_ToMatrixVisitor (const core::MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *_matrix);  ; const char * getClassName () const override;  ; Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdForceField (simulation::Node *, core::behavior::BaseForceField *ff) override;  Process all the BaseForceField. More...;  ; bool stopAtMechanicalMapping (simulation::Node *node, core::BaseMapping *map) override;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContext",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html:8304,Modifiability,inherit,inherited,8304,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html:10219,Modifiability,inherit,inherited,10219,");  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html:10342,Modifiability,inherit,inherited,10342,");  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html:10566,Modifiability,inherit,inherited,10566,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ matrix. const sofa::core::behavior::MultiMatrixAccessor* sofa::simulation::mechanicalvisitor::MechanicalAddMBK_ToMatrixVisitor::matrix. Cons",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html:10678,Modifiability,inherit,inherited,10678,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ matrix. const sofa::core::behavior::MultiMatrixAccessor* sofa::simulation::mechanicalvisitor::MechanicalAddMBK_ToMatrixVisitor::matrix. Cons",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html:10929,Modifiability,inherit,inherited,10929,"seMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ matrix. const sofa::core::behavior::MultiMatrixAccessor* sofa::simulation::mechanicalvisitor::MechanicalAddMBK_ToMatrixVisitor::matrix. Cons",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html:837,Security,access,access,837,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalAddMBK_ToMatrixVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalAddMBK_ToMatrixVisitor Class Reference . #include <MechanicalAddMBK_ToMatrixVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalAddMBK_ToMatrixVisitor:. [legend]; Detailed Description; Accumulate the entries of a mechanical matrix (mass or stiffness) of the whole scene . Public Attributes; const sofa::core::behavior::MultiMatrixAccessor * matrix;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalAddMBK_ToMatrixVisitor (const core::MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *_matrix);  ; const char * getClassName () const override;  ; Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdForceField (simulation::Node *, core::behavior::BaseForceField *ff) override;  Process all the BaseForceField. More...;  ; bool stopAtMechanicalMapping (simulation::Node *node, core::BaseMapping *map) override;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Nod",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html:8718,Testability,test,testTags,8718," Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorTyp",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor-members.html:292,Modifiability,inherit,inherited,292,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::mechanicalvisitor::MechanicalAddMDxVisitor Member List . This is the complete list of members for sofa::simulation::mechanicalvisitor::MechanicalAddMDxVisitor, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanical",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor-members.html:10819,Testability,test,testTags,10819,"Down(simulation::Node *node) overridesofa::simulation::BaseMechanicalVisitorvirtual; processNodeTopDown(simulation::Node *node, LocalStorage *stack) override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; ressofa::simulation::mechanicalvisitor::MechanicalAddMDxVisitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html:559,Deployability,integrat,integration,559,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalAddMDxVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalAddMDxVisitor Class Reference . #include <MechanicalAddMDxVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalAddMDxVisitor:. [legend]; Detailed Description; Accumulate the product of the mass matrix by a given vector. Typically used in implicit integration solved by a Conjugate Gradient algorithm. Note that if a dx vector is given, it is used and propagated by the mappings, Otherwise the current value is used. . Public Attributes; sofa::core::MultiVecDerivId res;  ; sofa::core::MultiVecDerivId dx;  ; SReal factor;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalAddMDxVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId res, sofa::core::MultiVecDerivId dx, SReal factor);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMass (simulation::Node *, sofa::core::behavior::BaseMass *mass) override;  Process the BaseMass. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; bool isThreadSafe () const override;  Specify wheth",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html:559,Integrability,integrat,integration,559,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalAddMDxVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalAddMDxVisitor Class Reference . #include <MechanicalAddMDxVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalAddMDxVisitor:. [legend]; Detailed Description; Accumulate the product of the mass matrix by a given vector. Typically used in implicit integration solved by a Conjugate Gradient algorithm. Note that if a dx vector is given, it is used and propagated by the mappings, Otherwise the current value is used. . Public Attributes; sofa::core::MultiVecDerivId res;  ; sofa::core::MultiVecDerivId dx;  ; SReal factor;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalAddMDxVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId res, sofa::core::MultiVecDerivId dx, SReal factor);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMass (simulation::Node *, sofa::core::behavior::BaseMass *mass) override;  Process the BaseMass. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; bool isThreadSafe () const override;  Specify wheth",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html:856,Modifiability,inherit,inherited,856,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalAddMDxVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalAddMDxVisitor Class Reference . #include <MechanicalAddMDxVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalAddMDxVisitor:. [legend]; Detailed Description; Accumulate the product of the mass matrix by a given vector. Typically used in implicit integration solved by a Conjugate Gradient algorithm. Note that if a dx vector is given, it is used and propagated by the mappings, Otherwise the current value is used. . Public Attributes; sofa::core::MultiVecDerivId res;  ; sofa::core::MultiVecDerivId dx;  ; SReal factor;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalAddMDxVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId res, sofa::core::MultiVecDerivId dx, SReal factor);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMass (simulation::Node *, sofa::core::behavior::BaseMass *mass) override;  Process the BaseMass. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; bool isThreadSafe () const override;  Specify wheth",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html:2074,Modifiability,inherit,inherited,2074,"avior::BaseMass *mass) override;  Process the BaseMass. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html:2222,Modifiability,inherit,inherited,2222,"avior::BaseMass *mass) override;  Process the BaseMass. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html:8654,Modifiability,inherit,inherited,8654,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html:10428,Modifiability,inherit,inherited,10428,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html:10551,Modifiability,inherit,inherited,10551,"xt *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, con",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html
