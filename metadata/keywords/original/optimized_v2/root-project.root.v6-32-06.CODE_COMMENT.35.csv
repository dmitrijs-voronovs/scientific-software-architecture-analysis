quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Testability,// Make sure the globals captured in the provided statement are local by; // using the privatization logic. We assume the same variable is not; // captured more than once.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:101,log,logic,101,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,1,['log'],['logic']
Testability,"// Make sure the sandbox area exist and is writable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLite.cxx:17,sandbox,sandbox,17,proof/proof/src/TProofLite.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLite.cxx,1,['sandbox'],['sandbox']
Testability,// Make sure we calculated the address offsets byte size correctly by; // verifying the current address offset is within ranges. We have seen bugs; // introduced when the code changes that can cause problems here so it is; // good to catch this during testing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/GSYM/GsymCreator.cpp:252,test,testing,252,interpreter/llvm-project/llvm/lib/DebugInfo/GSYM/GsymCreator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/GSYM/GsymCreator.cpp,1,['test'],['testing']
Testability,"// Make sure we emit at least one dbg.value, otherwise MachineDebugify may; // not have anything to work with as it goes about inserting DBG_VALUEs.; // (It's common for MIR tests to be written containing skeletal IR with; // empty functions -- we're still interested in debugifying the MIR within; // those tests, and this helps with that.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Debugify.cpp:174,test,tests,174,interpreter/llvm-project/llvm/lib/Transforms/Utils/Debugify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Debugify.cpp,2,['test'],['tests']
Testability,// Make sure we have a VF > 1 for stress testing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:41,test,testing,41,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['test'],['testing']
Testability,// Make synthesized accessor stub functions visible.; // ActOnPropertyImplDecl() creates them as not visible in case; // they are overridden by an explicit method that is encountered; // later.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp:29,stub,stub,29,interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,1,['stub'],['stub']
Testability,"// Make temporary TH1s output of RooHists to perform Kolmogorov test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooHist.cxx:64,test,test,64,roofit/roofitcore/src/RooHist.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooHist.cxx,1,['test'],['test']
Testability,"// Make test plot and offer for comparison against ref plot",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h:8,test,test,8,roofit/roofitcore/test/stressRooFit_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h,7,['test'],['test']
Testability,// Make the ranges of the start and end point self-consistent with adjacent edges; // by forcing to use only the beginning of the range. This simplifies the layout; // logic for clients.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/PlistDiagnostics.cpp:168,log,logic,168,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/PlistDiagnostics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/PlistDiagnostics.cpp,1,['log'],['logic']
Testability,// Make the target call a call into the stub table.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp:40,stub,stub,40,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp,1,['stub'],['stub']
Testability,"// Manually match MipsISD::Ins nodes to get the correct instruction. It has; // to be done in this fashion so that we respect the differences between; // dins and dinsm, as the difference is that the size operand has the range; // 0 < size <= 32 for dins while dinsm has the range 2 <= size <= 64 which; // means SelectionDAGISel would have to test all the operands at once to; // match the instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEISelDAGToDAG.cpp:344,test,test,344,interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEISelDAGToDAG.cpp,1,['test'],['test']
Testability,"// Many other things have subexpressions, so we have to test those.; // Some are simple:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExceptionSpec.cpp:56,test,test,56,interpreter/llvm-project/clang/lib/Sema/SemaExceptionSpec.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExceptionSpec.cpp,1,['test'],['test']
Testability,// Map a kernel handle to the kernel stub.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:37,stub,stub,37,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,1,['stub'],['stub']
Testability,"// Map a kernel mangled name to a symbol for identifying kernel in host code; // For CUDA, the symbol for identifying the kernel is the same as the device; // stub function. For HIP, they are different.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:159,stub,stub,159,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,1,['stub'],['stub']
Testability,// Map logical index of GC ptr to MI operand index.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackMaps.cpp:7,log,logical,7,interpreter/llvm-project/llvm/lib/CodeGen/StackMaps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackMaps.cpp,1,['log'],['logical']
Testability,"// MapReduce; // Redefinition of the MapReduce classes of the base class, to adapt them to; // TProcessExecutor's logic",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/multiproc/inc/ROOT/TProcessExecutor.hxx:114,log,logic,114,core/multiproc/inc/ROOT/TProcessExecutor.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/multiproc/inc/ROOT/TProcessExecutor.hxx,1,['log'],['logic']
Testability,"// Mapping from type identifiers to the call sites that test them, as well as; // whether the type identifier needs to be exported to ThinLTO backends as; // part of the regular LTO phase of the ThinLTO pipeline (see exportTypeId).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp:56,test,test,56,interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,1,['test'],['test']
Testability,"// Mark all of the declarations used by a type as referenced.; // FIXME: Not fully implemented yet! We need to have a better understanding; // of when we're entering a context we should not recurse into.; // FIXME: This is and EvaluatedExprMarker are more-or-less equivalent to; // TreeTransforms rebuilding the type in a new context. Rather than; // duplicating the TreeTransform logic, we should consider reusing it here.; // Currently that causes problems when rebuilding LambdaExprs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:381,log,logic,381,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['log'],['logic']
Testability,"// Match GCC's naming convention for internal linkage symbols, for; // symbols that are not actually visible outside of this TU. GCC; // distinguishes between internal and external linkage symbols in; // its mangling, to support cases like this that were valid C++ prior; // to DR426:; //; // void test() { extern void foo(); }; // static void foo();; //; // Don't bother with the L marker for names in anonymous namespaces; the; // 12_GLOBAL__N_1 mangling is quite sufficient there, and this better; // matches GCC anyway, because GCC does not treat anonymous namespaces as; // implying internal linkage.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:298,test,test,298,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,1,['test'],['test']
Testability,// Match a one-use bitwise logic op.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp:27,log,logic,27,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,2,['log'],['logic']
Testability,// Match another bitwise logic op and a shift.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:25,log,logic,25,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['log'],['logic']
Testability,"// Match another shift op inside the first logic operand. Handle both commuted; // possibilities.; // LOGIC (LOGIC (SH X0, Y), Z), (SH X1, Y) --> LOGIC (SH (LOGIC X0, X1), Y), Z; // LOGIC (LOGIC Z, (SH X0, Y)), (SH X1, Y) --> LOGIC (SH (LOGIC X0, X1), Y), Z",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:43,log,logic,43,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,9,"['LOG', 'log']","['LOGIC', 'logic']"
Testability,"// Match logical variants of the pattern,; // and transform them iff that gets rid of inversions.; // (~x) | y --> ~(x & (~y)); // (~x) & y --> ~(x | (~y))",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp:9,log,logical,9,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,1,['log'],['logical']
Testability,// Match patterns that end in logical-and.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:30,log,logical-and,30,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['log'],['logical-and']
Testability,// Match patterns that end in logical-or.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:30,log,logical-or,30,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['log'],['logical-or']
Testability,"// Match this pattern so that we can generate simpler code:; //; // %a = ...; // %b = and i32 %a, 2; // %c = srl i32 %b, 1; // brcond i32 %c ...; //; // into; //; // %a = ...; // %b = and i32 %a, 2; // %c = setcc eq %b, 0; // brcond %c ...; //; // This applies only when the AND constant value has one bit set and the; // SRL constant is equal to the log2 of the AND constant. The back-end is; // smart enough to convert the result into a TEST/JMP sequence.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:439,TEST,TEST,439,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['TEST'],['TEST']
Testability,"// Match: logic (binop x, z), (binop y, z) -> binop (logic x, y), z",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp:10,log,logic,10,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,2,['log'],['logic']
Testability,"// Match: logic (ext X), (ext Y) --> ext (logic X, Y)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp:10,log,logic,10,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,2,['log'],['logic']
Testability,// Match; // (X + C2) | C; // (X + C2) ^ C; // (X + C2) & C; // and convert to do the bitwise logic first:; // (X | C) + C2; // (X ^ C) + C2; // (X & C) + C2; // iff bits affected by logic op are lower than last bit affected by math op,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:94,log,logic,94,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,2,['log'],['logic']
Testability,"// Matches: logic (hand x, ...), (hand y, ...) -> hand (logic x, y), ...; //; // Creates the new hand + logic instruction (but does not insert them.); //; // On success, MatchInfo is populated with the new instructions. These are; // inserted in applyHoistLogicOpWithSameOpcodeHands.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp:12,log,logic,12,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,3,['log'],['logic']
Testability,"// Materialize the assumptions for the reproducer using the entries in Stack.; // That is, first clone the operands of the condition recursively until we; // reach an external input to the reproducer and add them to the reproducer; // function. Then add an ICmp for the condition (with the inverse predicate if; // the entry is negated) and an assert using the ICmp.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp:344,assert,assert,344,interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp,1,['assert'],['assert']
Testability,"// Max log file size",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx:7,log,log,7,proof/proof/src/TProofServ.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx,1,['log'],['log']
Testability,"// Memoize the result of each visit so that we only compute once for; // the same input SCEV. This is to avoid redundant computations when; // a SCEV is referenced by multiple SCEVs. Without memoization, this; // visit algorithm would have exponential time complexity in the worst; // case, causing the compiler to hang on certain tests.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolutionExpressions.h:331,test,tests,331,interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolutionExpressions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ScalarEvolutionExpressions.h,1,['test'],['tests']
Testability,"// Memory allocation test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx:21,test,test,21,test/tcollbm.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx,1,['test'],['test']
Testability,"// Memory check:; // Transform phase will generate a versioned loop and also a runtime check to; // ensure the pointers are independent and they don’t alias.; // In version variant of loop, alias meta data asserts that all access are; // mutually independent.; //; // Pointers aliasing in alias domain are avoided because with multiple; // aliasing domains we may not be able to hoist potential loop invariant; // access out of the loop.; //; // Iterate over alias tracker sets, and confirm AliasSets doesn't have any; // must alias set.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopVersioningLICM.cpp:206,assert,asserts,206,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopVersioningLICM.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopVersioningLICM.cpp,1,['assert'],['asserts']
Testability,"// MemorySanitizer inserts complex instrumentation that mostly follows; // the logic of the original code, but operates on ""shadow"" values. It; // can benefit from re-running some general purpose optimization; // passes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp:79,log,logic,79,interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/BackendUtil.cpp,1,['log'],['logic']
Testability,"// Mention the particular opcode - it is not necessarily the ""main""; // opcode being benchmarked by this snippet. For example, serial snippet; // generator uses one more opcode when in SERIAL_VIA_NON_MEMORY_INSTR; // execution mode.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.cpp:85,benchmark,benchmarked,85,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.cpp,1,['benchmark'],['benchmarked']
Testability,"// Merge the debug lines and instruction lines using their text address;; // the logical line representing the debug line record is followed by the; // line(s) representing the disassembled instructions, whose addresses are; // equal or greater that the line address and less than the address of the; // next debug line record.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVBinaryReader.cpp:81,log,logical,81,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVBinaryReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVBinaryReader.cpp,1,['log'],['logical']
Testability,"// Merged file pptions to be tested",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:29,test,tested,29,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['test'],['tested']
Testability,"// Message logger",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamKernelBase.h:11,log,logger,11,tmva/tmva/inc/TMVA/PDEFoamKernelBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamKernelBase.h,1,['log'],['logger']
Testability,"// Message sends are expected to return a zero value when the; // receiver is nil. At one point, this was only guaranteed for; // simple integer and pointer types, but expectations have grown; // over time.; //; // Given a nil receiver, the GNU runtime's message lookup will; // return a stub function that simply sets various return-value; // registers to zero and then returns. That's good enough for us; // if and only if (1) the calling conventions of that stub are; // compatible with the signature we're using and (2) the registers; // it sets are sufficient to produce a zero value of the return type.; // Rather than doing a whole target-specific analysis, we assume it; // only works for void, integer, and pointer types, and in all; // other cases we do an explicit nil check is emitted code. In; // addition to ensuring we produce a zero value for other types, this; // sidesteps the few outright CC incompatibilities we know about that; // could otherwise lead to crashes, like when a method is expected to; // return on the x87 floating point stack or adjust the stack pointer; // because of an indirect return.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:288,stub,stub,288,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,2,['stub'],['stub']
Testability,"// Mimic the logic of TTreeProcessorMT::MakeClusters: merge entry ranges together such that we; // run around TTreeProcessorMT::GetTasksPerWorkerHint tasks per worker thread.; // TODO it would be better to expose TTreeProcessorMT's actual logic and call the exact same method from here",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/readspeed/inc/ReadSpeed.hxx:13,log,logic,13,tree/readspeed/inc/ReadSpeed.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/readspeed/inc/ReadSpeed.hxx,4,['log'],['logic']
Testability,"// MmapWriteExecChecker.cpp - Check for the prot argument -----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This checker tests the 3rd argument of mmap's calls to check if; // it is writable and executable in the same time. It's somehow; // an optional checker since for example in JIT libraries it is pretty common.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MmapWriteExecChecker.cpp:396,test,tests,396,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MmapWriteExecChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MmapWriteExecChecker.cpp,1,['test'],['tests']
Testability,// Mock up a declarator.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:3,Mock,Mock,3,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,2,['Mock'],['Mock']
Testability,"// Modeling of un-inlined AssertionResult constructors; //; // The gtest unit testing API provides macros for assertions that expand; // into an if statement that calls a series of constructors and returns; // when the ""assertion"" is false.; //; // For example,; //; // ASSERT_TRUE(a == b); //; // expands into:; //; // switch (0); // case 0:; // default:; // if (const ::testing::AssertionResult gtest_ar_ =; // ::testing::AssertionResult((a == b))); // ;; // else; // return ::testing::internal::AssertHelper(; // ::testing::TestPartResult::kFatalFailure,; // ""<path to project>"",; // <line number>,; // ::testing::internal::GetBoolAssertionFailureMessage(; // gtest_ar_, ""a == b"", ""false"", ""true""); // .c_str()) = ::testing::Message();; //; // where AssertionResult is defined similarly to; //; // class AssertionResult {; // public:; // AssertionResult(const AssertionResult& other);; // explicit AssertionResult(bool success) : success_(success) {}; // operator bool() const { return success_; }; // ...; // private:; // bool success_;; // };; //; // In order for the analyzer to correctly handle this assertion, it needs to; // know that the boolean value of the expression ""a == b"" is stored the; // 'success_' field of the original AssertionResult temporary and propagated; // (via the copy constructor) into the 'success_' field of the object stored; // in 'gtest_ar_'. That boolean value will then be returned from the bool; // conversion method in the if statement. This guarantees that the assertion; // holds when the return path is not taken.; //; // If the success value is not properly propagated, then the eager case split; // on evaluating the expression can cause pernicious false positives; // on the non-return path:; //; // ASSERT(ptr != NULL); // *ptr = 7; // False positive null pointer dereference here; //; // Unfortunately, the bool constructor cannot be inlined (because its; // implementation is not present in the headers) and the copy constructor is; // not inlined (bec",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GTestChecker.cpp:26,Assert,AssertionResult,26,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GTestChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GTestChecker.cpp,19,"['Assert', 'Test', 'assert', 'test']","['AssertHelper', 'AssertionResult', 'TestPartResult', 'assertion', 'assertions', 'testing']"
Testability,"// Modifications for individual cell drawing test, original block is marked",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGTableCell.cxx:45,test,test,45,gui/gui/src/TGTableCell.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGTableCell.cxx,1,['test'],['test']
Testability,// Modify the symbol so that it points to the ifunc stub instead of to the; // resolver function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp:52,stub,stub,52,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp,1,['stub'],['stub']
Testability,"// Module inclusion testing.; /// Find the module that owns the source or header file that; /// \p Loc points to. If the location is in a file that was included; /// into a module, or is outside any module, returns nullptr.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h:20,test,testing,20,interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/Preprocessor.h,1,['test'],['testing']
Testability,"// Modules with builtins are special; multiple modules use builtins as; // modular headers, example:; //; // module stddef { header ""stddef.h"" export * }; //; // After module map parsing, this expands to:; //; // module stddef {; // header ""/path_to_builtin_dirs/stddef.h""; // textual ""stddef.h""; // }; //; // It's common that libc++ and system modules will both define such; // submodules. Make sure cached results for a builtin header won't; // prevent other builtin modules from potentially entering the builtin; // header. Note that builtins are header guarded and the decision to; // actually enter them is postponed to the controlling macros logic below.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/HeaderSearch.cpp:648,log,logic,648,interpreter/llvm-project/clang/lib/Lex/HeaderSearch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/HeaderSearch.cpp,1,['log'],['logic']
Testability,"// Monitor the performance (on TEST sample) versus number of trees",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:31,TEST,TEST,31,tmva/tmva/src/MethodBDT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx,1,['TEST'],['TEST']
Testability,"// More testing of observable clones as integration variables. This time; // hitting the more general case where the algorithm also needs to find clients; // of the original variable correctly (""xShifted"" in this test).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:8,test,testing,8,roofit/roofitcore/test/testRooRealIntegral.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx,2,['test'],"['test', 'testing']"
Testability,"// Movable, mostly to allow returning. But we have to write this out; // properly to satisfy the assert in the destructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitBuilder.h:97,assert,assert,97,interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/CodeGen/ConstantInitBuilder.h,1,['assert'],['assert']
Testability,// Move a 'not' ahead of casts of a bool to enable logic reduction:; // not (bitcast (sext i1 X)) --> bitcast (sext (not i1 X)),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:51,log,logic,51,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,1,['log'],['logic']
Testability,"// Move the body of the function into the new rewritten function, and replace; // this function with a stub.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURewriteOutArguments.cpp:103,stub,stub,103,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURewriteOutArguments.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURewriteOutArguments.cpp,1,['stub'],['stub']
Testability,"// Move the logic operation ahead of a zext or sext if the constant is; // unchanged in the smaller source type. Performing the logic in a smaller; // type may provide more information to later folds, and the smaller logic; // instruction may be cheaper (particularly in the case of vectors).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:12,log,logic,12,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,3,['log'],['logic']
Testability,// Move the return value to the final block instead of the original exit; // stub.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/IROutliner.cpp:77,stub,stub,77,interpreter/llvm-project/llvm/lib/Transforms/IPO/IROutliner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/IROutliner.cpp,1,['stub'],['stub']
Testability,"// Multiplication of a power of two plus/minus one can be done more; // cheaply as shift+add/sub. For now, this is true unilaterally. If; // future CPUs have a cheaper MADD instruction, this may need to be; // gated on a subtarget feature. For Cyclone, 32-bit MADD is 4 cycles and; // 64-bit is 5 cycles, so this is always a win.; // More aggressively, some multiplications N0 * C can be lowered to; // shift+add+shift if the constant C = A * B where A = 2^N + 1 and B = 2^M,; // e.g. 6=3*2=(2+1)*2, 45=(1+4)*(1+8); // TODO: lower more cases.; // TrailingZeroes is used to test if the mul can be lowered to; // shift+add+shift.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:573,test,test,573,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['test'],['test']
Testability,// Multiplicative reduction over the vector with (potentially-extended); // i1 element type is actually a (potentially zero-extended); // logical `and` reduction over the original non-extended value:; // vector_reduce_mul(?ext(<n x i1>)); // -->; // zext(vector_reduce_and(<n x i1>)),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp:138,log,logical,138,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,1,['log'],['logical']
Testability,"// Must be 64-bit, otherwise asserted already.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AIX.cpp:29,assert,asserted,29,interpreter/llvm-project/clang/lib/Driver/ToolChains/AIX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AIX.cpp,3,['assert'],['asserted']
Testability,// Must be at least 4 to be able to branch over minimum unconditional branch; // code. This is only for making it possible to write reasonably small tests for; // long branches.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp:149,test,tests,149,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp,1,['test'],['tests']
Testability,// Must be non-zero due to null test above.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp:32,test,test,32,interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,1,['test'],['test']
Testability,"// Must set this last since other threads may read fProperty; // and think all test bits have been properly set.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:79,test,test,79,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,1,['test'],['test']
Testability,"// NB! This situation is legal, but is very suspicious -- whatever pass; // change the loop to make a trip count go from could not compute to; // computable or vice-versa *should have* invalidated SCEV. However, we; // choose not to assert here (for now) since we don't want false; // positives.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:233,assert,assert,233,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['assert'],['assert']
Testability,"// NB!!! Several arithmetic instructions only *partially* update; // flags. Theoretically, we could generate MI code sequences that; // would rely on this fact and observe different flags independently.; // But currently LLVM models all of these instructions as clobbering; // all the flags in an undef way. We rely on that to simplify the; // logic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp:344,log,logic,344,interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp,1,['log'],['logic']
Testability,"// NB: Releases of a particular Linux distro should be kept together; // in this enum, because some tests are done by integer comparison against; // the first and last known member in the family, e.g. IsRedHat().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Distro.h:100,test,tests,100,interpreter/llvm-project/clang/include/clang/Driver/Distro.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Driver/Distro.h,1,['test'],['tests']
Testability,// NB: This code path is going away. All of the logic is moving into the; // driver which has the information necessary to do target-specific; // selections of default include paths. Each target which moves there will be; // exempted from this logic in ShouldAddDefaultIncludePaths() until we can; // delete the entire pile of code.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/InitHeaderSearch.cpp:48,log,logic,48,interpreter/llvm-project/clang/lib/Lex/InitHeaderSearch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/InitHeaderSearch.cpp,2,['log'],['logic']
Testability,// NB: testing for not starting with a double quote to avoid; // breaking `template strings`.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/Format.cpp:7,test,testing,7,interpreter/llvm-project/clang/lib/Format/Format.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/Format.cpp,1,['test'],['testing']
Testability,"// NBins not multiple of SIMD vector size, testing padding",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testBinnedFitExecPolicy.cxx:43,test,testing,43,math/mathcore/test/fit/testBinnedFitExecPolicy.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testBinnedFitExecPolicy.cxx,1,['test'],['testing']
Testability,"// NLOOP = 1000*NLOOP_MIN; // initValues();; // TEST(5); // NLOOP = 50*NLOOP_MIN;; // TEST(30);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testOperations.cxx:48,TEST,TEST,48,math/smatrix/test/testOperations.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testOperations.cxx,2,['TEST'],['TEST']
Testability,"// NLOOP = NLOOP_MIN;; // TEST(50);; // TEST(75);; // TEST(100);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testOperations.cxx:26,TEST,TEST,26,math/smatrix/test/testOperations.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testOperations.cxx,3,['TEST'],['TEST']
Testability,"// NOT UTF8, NOT UTF16BE/LE, NOT UCS2BE/LE; // Actual JavaScript-native String's 16bit char codes used.; // no multi-byte logic here",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:122,log,logic,122,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['logic']
Testability,// NOT is handled here.; // Logical binary ops preserve the number of sign bits at the worst.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp:28,Log,Logical,28,interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,2,['Log'],['Logical']
Testability,// NOTE this assertion guarantees that MI.getOpcode() is add or subtraction; // that may or may not set flags.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:13,assert,assertion,13,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,1,['assert'],['assertion']
Testability,// NOTE: Also used for isLogicalImmNot as anything that can be represented as; // a logical immediate can always be represented when inverted.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp:84,log,logical,84,interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp,1,['log'],['logical']
Testability,"// NOTE: If this ends up to slow, we can maintain a dual structure for; // member testing/insertion, or keep things mostly sorted, and sort only; // here, or use SparseBitVector or ....",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp:82,test,testing,82,interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp,1,['test'],['testing']
Testability,"// NOTE: Instead of using ProgramState::assumeInBound(), we are prototyping; // some new logic here that reasons directly about memory region extents.; // Once that logic is more mature, we can bring it back to assumeInBound(); // for all clients to use.; //; // The algorithm we are using here for bounds checking is to see if the; // memory access is within the extent of the base region. Since we; // have some flexibility in defining the base region, we can achieve; // various levels of conservatism in our buffer overflow checking.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ArrayBoundCheckerV2.cpp:89,log,logic,89,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ArrayBoundCheckerV2.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ArrayBoundCheckerV2.cpp,2,['log'],['logic']
Testability,"// NOTE: Result of GetBinFrom on underflow bins, GetBinTo on overflow bins and; // GetBinCenter on either is considered unspecified for now. If we do; // ultimately decide to specify this behavior, please add a test here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/axis.cxx:211,test,test,211,hist/histv7/test/axis.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/axis.cxx,1,['test'],['test']
Testability,"// NOTE: The `ArraySubscriptExpr` and `UnaryOperator` callbacks are `PostStmt`; // instead of `PreStmt` because the current implementation passes the whole; // expression to `CheckerContext::getSVal()` which only works after the; // symbolic evaluation of the expression. (To turn them into `PreStmt`; // callbacks, we'd need to duplicate the logic that evaluates these; // expressions.) The `MemberExpr` callback would work as `PreStmt` but it's; // defined as `PostStmt` for the sake of consistency with the other callbacks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ArrayBoundCheckerV2.cpp:343,log,logic,343,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ArrayBoundCheckerV2.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ArrayBoundCheckerV2.cpp,1,['log'],['logic']
Testability,"// NOTE: The accuracy of the optimized trigonometric functions is relatively; // low and the test start to fail with an accuracy of 1e-5.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/vecops/test/vecops_rvec.cxx:93,test,test,93,math/vecops/test/vecops_rvec.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/vecops/test/vecops_rvec.cxx,2,['test'],['test']
Testability,"// NOTE: The logic below is mostly geared towards LV, which calls it with; // vectors with 2 elements. We might want to improve that, if other; // users show up.; // Nontemporal vector loads/stores can be directly lowered to LDNP/STNP, if; // the vector can be halved so that each half fits into a register. That's; // the case if the element type fits into a register and the number of; // elements is a power of 2 > 1.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.h:13,log,logic,13,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.h,1,['log'],['logic']
Testability,"// NOTE: The nodes below may require PC-Rel specific patterns if the; // address could be PC-Relative. When adding new nodes below, consider; // whether or not the address can be PC-Relative and add the corresponding; // PC-relative patterns and tests.; /// CHAIN = STBRX CHAIN, GPRC, Ptr, Type - This is a; /// byte-swapping store instruction. It byte-swaps the low ""Type"" bits of; /// the GPRC input, then stores it through Ptr. Type can be either i16 or; /// i32.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h:246,test,tests,246,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h,1,['test'],['tests']
Testability,"// NOTE: The non-block local cases are handled by the call to; // propagateEquality above; this block is just about handling the block; // local cases. TODO: There's a bunch of logic in propagateEqualiy which; // isn't duplicated for the block local case, can we share it somehow?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp:177,log,logic,177,interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp,1,['log'],['logic']
Testability,"// NOTE: This bailout should be an assert instead. However, asserting; // the condition here exposes a case where LoopFusion is querying SCEV; // with malformed loop information during the midst of the transform.; // There doesn't appear to be an obvious fix, so for the moment bailout; // until the caller issue can be fixed. PR49566 tracks the bug.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:35,assert,assert,35,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,2,['assert'],"['assert', 'asserting']"
Testability,// NOTE: This could be made more precise by PointerMayBeCapturedBefore; // with the killing MemoryDef. But we refrain from doing so for now to; // limit compile-time and this does not cause any changes to the number; // of stores removed on a large test set in practice.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp:249,test,test,249,interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,1,['test'],['test']
Testability,"// NOTE: We are using a double to represent an integer here. This _will_; // lead to problems if the norm of the double grows too large. A quick test; // with python suggests that problems arise at a magnitude of ~1e16.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CvSplit.cxx:145,test,test,145,tmva/tmva/src/CvSplit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CvSplit.cxx,1,['test'],['test']
Testability,"// NOTE: We assume that ONLY the first dimension of a leaf can have a variable; // size AND contain the index for the size of yet another sub-dimension.; // I.e. a variable size array inside a variable size array can only have its; // size vary with the VERY FIRST physical dimension of the leaf.; // Thus once the index of the first dimension is found, all other dimensions; // are fixed!; // NOTE: We could unroll some of this loops to avoid a few tests.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx:450,test,tests,450,tree/treeplayer/src/TTreeFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx,1,['test'],['tests']
Testability,"// NOTE: We'll exclude negative FIs here, which come from argument; // lowering, because there are no known test cases triggering this problem; // using packed structures (or similar). We can remove this exclusion if; // we find such a test case. The reason why this is so test-case driven is; // because this entire 'fixup' is only to prevent crashes (from the; // register scavenger) on not-really-valid inputs. For example, if we have:; // %a = alloca i1; // %b = bitcast i1* %a to i64*; // store i64* a, i64 b; // then the store should really be marked as 'align 1', but is not. If it; // were marked as 'align 1' then the indexed form would have been; // instruction-selected initially, and the problem this 'fixup' is preventing; // won't happen regardless.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:108,test,test,108,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,3,['test'],"['test', 'test-case']"
Testability,"// NOTE: cl::alias must not have cl::sub(), since aliased option's cl::sub(); // will be used. llvm::cl::alias::done() method asserts this condition.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:126,assert,asserts,126,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,1,['assert'],['asserts']
Testability,// NOTE: some additional header search logic is handled in the driver for; // Darwin.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/InitHeaderSearch.cpp:39,log,logic,39,interpreter/llvm-project/clang/lib/Lex/InitHeaderSearch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/InitHeaderSearch.cpp,1,['log'],['logic']
Testability,"// NOTE: some tests might define R__LITTLE_ENDIAN to simulate a different-endianness machine",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RColumnElement.hxx:14,test,tests,14,tree/ntuple/v7/src/RColumnElement.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RColumnElement.hxx,1,['test'],['tests']
Testability,"// NOTE: test that dim this is NOT too big!!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx:9,test,test,9,tree/treeplayer/src/TTreeFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx,1,['test'],['test']
Testability,"// NOTE: test that fNdimensions[code] is NOT too big!!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx:9,test,test,9,tree/treeplayer/src/TTreeFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx,2,['test'],['test']
Testability,"// NOTE: there's a bunch of different data classes tacked on after an; // EHCleanupScope. It is asserted (in EHScopeStack::pushCleanup*) that; // they don't require greater alignment than ScopeStackAlignment. So,; // EHCleanupScope ought to have alignment equal to that -- not more; // (would be misaligned by the stack allocator), and not less (would; // break the appended classes).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.h:96,assert,asserted,96,interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCleanup.h,1,['assert'],['asserted']
Testability,// NOTE: this can be checked even after testing for an IdentifierInfo.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/Lexer.cpp:40,test,testing,40,interpreter/llvm-project/clang/lib/Lex/Lexer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/Lexer.cpp,1,['test'],['testing']
Testability,// NOTE: this has to be checked *before* testing for an IdentifierInfo.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/Lexer.cpp:41,test,testing,41,interpreter/llvm-project/clang/lib/Lex/Lexer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/Lexer.cpp,2,['test'],['testing']
Testability,"// NOTE: this only has a subset of the full frame index logic. In; // particular, the FI < 0 and AfterFPPop logic is handled in; // M68kRegisterInfo::eliminateFrameIndex, but not here. Possibly; // (probably?) it should be moved into here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kFrameLowering.cpp:56,log,logic,56,interpreter/llvm-project/llvm/lib/Target/M68k/M68kFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kFrameLowering.cpp,2,['log'],['logic']
Testability,"// NOTE: we now use the upper-bit of the fNevBufSize to see if we have serialized any of the; // optional IOBits. If that bit is set, we immediately read out the IOBits; to replace this; // (minimal) safeguard against corruption, we will set aside the upper-bit of fIOBits to do; // the same thing (the fact this bit is reserved is tested in the unit tests). If there is; // someday a need for more than 7 IOBits, we'll widen the field using the same trick.; //; // We like to keep this safeguard because we immediately will allocate a buffer based on; // the value of fNevBufSize -- and would like to avoid wildly inappropriate allocations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBasket.cxx:332,test,tested,332,tree/tree/src/TBasket.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBasket.cxx,2,['test'],"['tested', 'tests']"
Testability,// NaCl MIPS sandbox's instruction bundle size.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsMCNaCl.h:13,sandbox,sandbox,13,interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsMCNaCl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsMCNaCl.h,1,['sandbox'],['sandbox']
Testability,// NaCl sandboxing requires that indirect call instructions are masked.; // This means that function entry points should be bundle-aligned.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsAsmPrinter.cpp:8,sandbox,sandboxing,8,interpreter/llvm-project/llvm/lib/Target/Mips/MipsAsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsAsmPrinter.cpp,1,['sandbox'],['sandboxing']
Testability,"// Name mismatch. We need a redirect. First grab the actual entry we want; // to return.; //; // This redirection logic intentionally leaks the external name of a; // redirected file that uses 'use-external-name' in \a; // vfs::RedirectionFileSystem. This allows clang to report the external; // name to users (in diagnostics) and to tools that don't have access to; // the VFS (in debug info and dependency '.d' files).; //; // FIXME: This is pretty complex and has some very complicated interactions; // with the rest of clang. It's also inconsistent with how ""real""; // filesystems behave and confuses parts of clang expect to see the; // name-as-accessed on the \a FileEntryRef.; //; // A potential plan to remove this is as follows -; // - Update callers such as `HeaderSearch::findUsableModuleForHeader()`; // to explicitly use the `getNameAsRequested()` rather than just using; // `getName()`.; // - Add a `FileManager::getExternalPath` API for explicitly getting the; // remapped external filename when there is one available. Adopt it in; // callers like diagnostics/deps reporting instead of calling; // `getName()` directly.; // - Switch the meaning of `FileEntryRef::getName()` to get the requested; // name, not the external name. Once that sticks, revert callers that; // want the requested name back to calling `getName()`.; // - Update the VFS to always return the requested name. This could also; // return the external name, or just have an API to request it; // lazily. The latter has the benefit of making accesses of the; // external path easily tracked, but may also require extra work than; // just returning up front.; // - (Optionally) Add an API to VFS to get the external filename lazily; // and update `FileManager::getExternalPath()` to use it instead. This; // has the benefit of making such accesses easily tracked, though isn't; // necessarily required (and could cause extra work than just adding to; // eg. `vfs::Status` up front).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp:114,log,logic,114,interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/FileManager.cpp,1,['log'],['logic']
Testability,"// Names of ROOT GUI events. Used for listing event logs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/recorder/src/TRecorder.cxx:52,log,logs,52,gui/recorder/src/TRecorder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/recorder/src/TRecorder.cxx,1,['log'],['logs']
Testability,"// Names of STL base classes was modified in vers==3. Allocators removed; // (We could be more specific (see test for the same case below)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TStreamerInfo.cxx:109,test,test,109,io/io/src/TStreamerInfo.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TStreamerInfo.cxx,2,['test'],['test']
Testability,"// Narrowing logical shift right.; // Operands are (source, shift, passthru, mask, vl)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h:13,log,logical,13,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h,1,['log'],['logical']
Testability,// Need to match the logic in value profile dumper code in compiler-rt:,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp:21,log,logic,21,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp,1,['log'],['logic']
Testability,"// Need to sort the name table so that lookup by the log of the enum value; // gives the proper name. More specifically, for a feature of value 1<<n,; // SubtargetFeatureNames[n] should be the name of the feature.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/SubtargetFeatureInfo.cpp:53,log,log,53,interpreter/llvm-project/llvm/utils/TableGen/SubtargetFeatureInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/SubtargetFeatureInfo.cpp,1,['log'],['log']
Testability,// Needed for testing dynamic_cast.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-import-test/clang-import-test.cpp:14,test,testing,14,interpreter/llvm-project/clang/tools/clang-import-test/clang-import-test.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-import-test/clang-import-test.cpp,1,['test'],['testing']
Testability,"// Never hoist constants larger than 128bit, because this might lead to; // incorrect code generation or assertions in codegen.; // Fixme: Create a cost model for types larger than i128 once the codegen; // issues have been fixed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp:105,assert,assertions,105,interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,1,['assert'],['assertions']
Testability,// Never let it get to 0 to hold logic above.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:33,log,logic,33,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['logic']
Testability,// Never use the balance information obtained from chains - return a specific; // color always. Used for testing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp:105,test,testing,105,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,1,['test'],['testing']
Testability,"// New geometry test suite. Creates a geometry containing all shape; // types. Loop over all volumes and compute the following :; // - generate 1 million random points and count how many are inside; // each shape -> compute volume of each shape; // - generate 10000 random directions and propagate from the center; // of each volume -> compute total step length to exit current shape",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressShapes.cxx:16,test,test,16,test/stressShapes.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressShapes.cxx,1,['test'],['test']
Testability,// New insertion point to insert testSetjmp(),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp:33,test,testSetjmp,33,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,1,['test'],['testSetjmp']
Testability,"// Next test direct dependence",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:8,test,test,8,roofit/roofitcore/src/RooAbsArg.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx,1,['test'],['test']
Testability,"// Next test disabled because it produces (of course) a Warning",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressLinear.cxx:8,test,test,8,test/stressLinear.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressLinear.cxx,1,['test'],['test']
Testability,"// Next try inverting the value and testing a bit. 0/1 could be; // handled this way too, but we dealt with that case above.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp:36,test,testing,36,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp,1,['test'],['testing']
Testability,"// Next, clear the sign bit from the first operand (magnitude).; // TODO: If we had general constant folding for FP logic ops, this check; // wouldn't be necessary.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:116,log,logic,116,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['log'],['logic']
Testability,"// Next, sort worklist by dominance, so that dominating conditions to check; // and facts come before conditions and facts dominated by them. If a; // condition to check and a fact have the same numbers, conditional facts come; // first. Assume facts and checks are ordered according to their relative; // order in the containing basic block. Also make sure conditions with; // constant operands come before conditions without constant operands. This; // increases the effectiveness of the current signed <-> unsigned fact; // transfer logic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp:536,log,logic,536,interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp,1,['log'],['logic']
Testability,"// No == 2 test because of assert",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/testCompatMode.cxx:11,test,test,11,roofit/roofit/test/vectorisedPDFs/testCompatMode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/testCompatMode.cxx,2,"['assert', 'test']","['assert', 'test']"
Testability,// No assert. We may have an elidable copy on the grandparent layer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ConstructionContext.cpp:6,assert,assert,6,interpreter/llvm-project/clang/lib/Analysis/ConstructionContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ConstructionContext.cpp,1,['assert'],['assert']
Testability,// No break opportunity - update the penalty and continue with the next; // logical line.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.cpp:76,log,logical,76,interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.cpp,1,['log'],['logical']
Testability,// No clients run in this mode and it's not supported. Please add tests and; // remove the assertion if you start relying on it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp:66,test,tests,66,interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp,2,"['assert', 'test']","['assertion', 'tests']"
Testability,// No miscompilation!; // Restore orig program & free test.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp:54,test,test,54,interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp,1,['test'],['test']
Testability,"// No need to test for len here, at worse idx==len and lib[idx]=='\0'",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:14,test,test,14,core/base/src/TSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx,1,['test'],['test']
Testability,"// No need to test for static, there are not in this list.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:14,test,test,14,core/dictgen/src/rootcling_impl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx,1,['test'],['test']
Testability,"// No need to test the Cursor is valid here, since it must be to get; // into this code path - if it were invalid, the default case would be; // followed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFDebugLine.cpp:14,test,test,14,interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFDebugLine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFDebugLine.cpp,1,['test'],['test']
Testability,"// No real optimizations we can do here, stub out with zero.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:41,stub,stub,41,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['stub'],['stub']
Testability,// No stub library for the fragile runtime.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h:6,stub,stub,6,interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/ObjCRuntime.h,1,['stub'],['stub']
Testability,"// No testing of logs because landau can return 0.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/testLandau.cxx:6,test,testing,6,roofit/roofit/test/vectorisedPDFs/testLandau.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/testLandau.cxx,2,"['log', 'test']","['logs', 'testing']"
Testability,// No-op intrinsics which we know don't escape the pointer to logic in; // some other function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/PtrUseVisitor.h:62,log,logic,62,interpreter/llvm-project/llvm/include/llvm/Analysis/PtrUseVisitor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/PtrUseVisitor.h,1,['log'],['logic']
Testability,"// Nodes may have no parents if:; // a) the node is the TranslationUnitDecl; // b) we have a limited traversal scope that excludes the parent edges; // c) there is a bug in the AST, and the node is not reachable; // Usually the traversal scope is the whole AST, which precludes b.; // Bugs are common enough that it's worthwhile asserting when we can.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp:329,assert,asserting,329,interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp,1,['assert'],['asserting']
Testability,"// None of the sandboxing applies, just emit the instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp:15,sandbox,sandboxing,15,interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,1,['sandbox'],['sandboxing']
Testability,"// Normally VALU use of exec would block the rematerialization, but that; // is OK in this case to have an implicit exec read as all VALU do.; // We really want all of the generic logic for this except for this.; // Another potential implicit use is mode register. The core logic of; // the RA will not attempt rematerialization if mode is set anywhere; // in the function, otherwise it is safe since mode is not changed.; // There is difference to generic method which does not allow; // rematerialization if there are virtual register uses. We allow this,; // therefore this method includes SOP instructions as well.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp:180,log,logic,180,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp,2,['log'],['logic']
Testability,"// Normally a Relocation can refer to the symbol via its name.; // It can also use a direct symbol table index instead (with no name; // specified), allowing disambiguating between multiple symbols with the; // same name or crafting intentionally broken files for testing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjectYAML/COFFYAML.h:264,test,testing,264,interpreter/llvm-project/llvm/include/llvm/ObjectYAML/COFFYAML.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjectYAML/COFFYAML.h,1,['test'],['testing']
Testability,"// Normally we want to write to a side-car file ending in "".ifso"" so for; // example if `clang -emit-interface-stubs -shared -o libhello.so` were; // invoked then we would like to get libhello.so and libhello.ifso. If the; // stdout stream is given as the output file (ie `-o -`), that is the one; // exception where we will just append to the same filestream as the normal; // output.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/InterfaceStubs.cpp:111,stub,stubs,111,interpreter/llvm-project/clang/lib/Driver/ToolChains/InterfaceStubs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/InterfaceStubs.cpp,1,['stub'],['stubs']
Testability,"// Normally we'd have already removed all @llvm.public.type.test calls,; // except for in the case where we originally were performing ThinLTO but; // decided not to in the backend.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp:60,test,test,60,interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,1,['test'],['test']
Testability,"// Not all operands are correctly disassembled at the moment. This means; // that some machine instructions won't have all the necessary operands; // set.; // To avoid asserting, print <unknown> instead until the necessary support; // has been implemented.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/MCTargetDesc/AVRInstPrinter.cpp:168,assert,asserting,168,interpreter/llvm-project/llvm/lib/Target/AVR/MCTargetDesc/AVRInstPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/MCTargetDesc/AVRInstPrinter.cpp,2,['assert'],['asserting']
Testability,"// Not owning lists, don't call Delete(); // But this still need to be done first because the TList destructor; // does access the object contained (via GetObject()->TestBit(kCanDelete))",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:166,Test,TestBit,166,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,1,['Test'],['TestBit']
Testability,"// Not really a cost consideration, but check for unsupported cases here to; // simplify the logic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:93,log,logic,93,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['log'],['logic']
Testability,"// Not using the error logger, as there routine is meant to be called; // during library initialization/loading.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:23,log,logger,23,core/base/src/TObject.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx,1,['log'],['logger']
Testability,"// Note that 'object' here is really a physical/logical pair described; // in buffer + physical ID.; // If adding component to a current partial composite do this now",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScenePad.cxx:48,log,logical,48,graf3d/gl/src/TGLScenePad.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScenePad.cxx,1,['log'],['logical']
Testability,"// Note that LK_String is intentionally after the other literals, as; // this is used for diagnostics logic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:102,log,logic,102,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['log'],['logic']
Testability,"// Note that it is sufficient to know that all edges of the phi node have; // the same argument. If they do, by the definition of dominance frontiers; // (which we used to place this phi), that argument must dominate this phi,; // and thus, must dominate the phi's uses, and so we will not hit the assert; // below.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSAUpdater.cpp:298,assert,assert,298,interpreter/llvm-project/llvm/lib/Analysis/MemorySSAUpdater.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSAUpdater.cpp,1,['assert'],['assert']
Testability,"// Note that this cast does not violate aliasing rules as we assert that; // the memory's dynamic type is the small, inline bucket buffer, and the; // 'storage' is a POD containing a char buffer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h:61,assert,assert,61,interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h,1,['assert'],['assert']
Testability,// Note that this must match *exactly* the logic in buildByrefHelpers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:43,log,logic,43,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,1,['log'],['logic']
Testability,// Note that we cannot assert(CallResult.hasValue()) here since; // Ret() above only sets the APValue if the curent frame doesn't; // have a caller set.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Interp.h:23,assert,assert,23,interpreter/llvm-project/clang/lib/AST/Interp/Interp.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/Interp.h,1,['assert'],['assert']
Testability,"// Note that we cannot here invert the arguments of an isel in order to fold; // a ZERO into what is presented as the second argument. All we have here; // is the condition bit, and that might come from a CR-logical bit operation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp:208,log,logical,208,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,1,['log'],['logical']
Testability,"// Note that we must test the size on each iteration, the worklist can grow.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:21,test,test,21,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,2,['test'],['test']
Testability,"// Note that we need to check for non-int types above before asking for; // demanded bits. Normally, the only way to reach an instruction with an; // non-int type is via an instruction that has side effects (or otherwise; // will demand its input bits). However, if we have a readnone function; // that returns an unsized type (e.g., void), we must avoid asking for the; // demanded bits of the function call's return value. A void-returning; // readnone function is always dead (and so we can stop walking the use/def; // chain here), but the check is necessary to avoid asserting.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/BDCE.cpp:572,assert,asserting,572,interpreter/llvm-project/llvm/lib/Transforms/Scalar/BDCE.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/BDCE.cpp,1,['assert'],['asserting']
Testability,"// Note that, since we are merging phi nodes and BB and Succ might; // have common predecessors, we could end up with a phi node with; // identical incoming branches. This will be cleaned up later (and; // will trigger asserts if we try to clean it up now, without also; // simplifying the corresponding conditional branch).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp:219,assert,asserts,219,interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp,1,['assert'],['asserts']
Testability,// Note the unset value for this is AMDGPU::SP_REG rather than; // NoRegister. This is mostly a workaround for MIR tests where state that; // can't be directly computed from the function is not preserved in serialized; // MIR.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMachineFunctionInfo.h:115,test,tests,115,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMachineFunctionInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMachineFunctionInfo.h,1,['test'],['tests']
Testability,"// Note we explicitly want to test multiple trees in the file - one with generated offsets of; // and one with them enabled.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/test/TBasket.cxx:30,test,test,30,tree/tree/test/TBasket.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/test/TBasket.cxx,1,['test'],['test']
Testability,"// Note, skip this test for bit-fields, see below.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:19,test,test,19,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,1,['test'],['test']
Testability,"// Note, this function should only be used after ensuring the value is; // correct, so it asserts if the value is out of range.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp:90,assert,asserts,90,interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp,1,['assert'],['asserts']
Testability,"// Note: #ident and #sccs are such crazy anachronisms that we don't provide; // completions for them. And __include_macros is a Clang-internal extension; // that we don't want to encourage anyone to use.; // FIXME: we don't support #assert or #unassert, so don't suggest them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp:233,assert,assert,233,interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,1,['assert'],['assert']
Testability,"// Note: If you change the logic here, please change; // doesDeclarationForceExternallyVisibleDefinition as well.; //; // If it's not the case that both 'inline' and 'extern' are; // specified on the definition, then this inline definition is; // externally visible.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp:27,log,logic,27,interpreter/llvm-project/clang/lib/AST/Decl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp,1,['log'],['logic']
Testability,"// Note: It is legal for a single derived pointer to be listed multiple; // times. It's non-optimal, but it is legal. It can also happen after; // insertion if we strip a bitcast away.; // Note: It is really tempting to check that each base is relocated and; // that a derived pointer is never reused as a base pointer. This turns; // out to be problematic since optimizations run after safepoint insertion; // can recognize equality properties that the insertion logic doesn't know; // about. See example statepoint.ll in the verifier subdirectory",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp:464,log,logic,464,interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,1,['log'],['logic']
Testability,"// Note: It's tempting to cache the state changes here, but due to the; // compatibility checks performed a blocks output state can change based on; // the input state. To cache, we'd have to add logic for finding; // never-compatible state changes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVInsertVSETVLI.cpp:196,log,logic,196,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVInsertVSETVLI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVInsertVSETVLI.cpp,1,['log'],['logic']
Testability,"// Note: LAnd, LOr, Comma are handled specially by higher-level logic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BasicValueFactory.cpp:64,log,logic,64,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BasicValueFactory.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BasicValueFactory.cpp,1,['log'],['logic']
Testability,"// Note: Ownership bug. Deleting this might crash on Mac.; // Therefore, it will leak because we are testing not the; // GenericPdf.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooJohnson.cxx:101,test,testing,101,roofit/roofit/test/testRooJohnson.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooJohnson.cxx,1,['test'],['testing']
Testability,"// Note: Potentially costly, but, for booleans, we could check whether both; // can be proven equivalent in their respective environments.; // FIXME: move the reference/pointers logic from `areEquivalentValues` to here; // and implement separate, join/widen specific handling for; // reference/pointers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/DataflowEnvironment.cpp:178,log,logic,178,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/DataflowEnvironment.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/DataflowEnvironment.cpp,1,['log'],['logic']
Testability,"// Note: TStreamerInfo::Compile() leaves this element; // out of the optimized info, although it does; // exists in the non-compiled and non-optimized info.; // FIXME: The test that TStreamerInfo::Compile() uses; // is element->GetType() < 0, so that is what; // we should do as well.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx:172,test,test,172,tree/tree/src/TBranchElement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx,1,['test'],['test']
Testability,// Note: The logic here must be synchronized with the code in the; // branch-selection pass which sets the offset of the first block in the; // function. This matters because it affects the alignment.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCAsmPrinter.cpp:13,log,logic,13,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCAsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCAsmPrinter.cpp,1,['log'],['logic']
Testability,// Note: There a lot of obvious peephole cases here. This are deliberately; // handled after the main base pointer inference algorithm to make writing; // test cases to exercise that code easier.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp:155,test,test,155,interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,1,['test'],['test']
Testability,// Note: This assert is both overly strong and overly weak. The actual; // invariant here is that StrideSCEV should be loop invariant. The only; // such invariant strides we happen to speculate right now are unknowns; // and thus this is a reasonable proxy of the actual invariant.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:14,assert,assert,14,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,1,['assert'],['assert']
Testability,// Note: This case has not been tested,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:32,test,tested,32,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,1,['test'],['tested']
Testability,"// Note: This functionality is used only when unsafe-fp-math is enabled, and; // on cores with reciprocal estimates (which are used when unsafe-fp-math is; // enabled for division), this functionality is redundant with the default; // combiner logic (once the division -> reciprocal/multiply transformation; // has taken place). As a result, this matters more for older cores than for; // newer ones.; // Combine multiple FDIVs with the same divisor into multiple FMULs by the; // reciprocal if there are two or more FDIVs (for embedded cores with only; // one FP pipeline) for three or more FDIVs (for generic OOO cores).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:244,log,logic,244,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['log'],['logic']
Testability,"// Note: This rule has been modified to work around ROOT bug #15877.; // The original rule was `str = std::string{onfile.chars, 4};`; //; // This bug is triggered by the TClassReadRules unit test (in rfield_class.cxx) in the following way:; // 1. Upon write, RNTuple calls TClass::GetStreamerInfo() to store the streamer info of StructWithTransientString; // 2. The read rule calls TClass::GetDataMemberOffset(""chars"") to fill the `onfile` variable; // 3. The class doesn't find ""chars"" among its real data members (it's ""chars[4]"" in this list); // 4. The class therefore tries to get the offset from the streamer info; the streamer info exists in; // GetCurrentStreamerInfo() because we called TClass::GetStreamerInfo() in step 1.; // Otherwise GetDataMemberOffset() would return 0 which happens to be correct.; // 5. Now we enter the bug:; // - The streamer info has two elements for ""chars"", one with the correct offset (0),; // one cached, with a wrong one (8); // - The streamer info returns the offset of the wrong data member",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/CustomStructLinkDef.h:191,test,test,191,tree/ntuple/v7/test/CustomStructLinkDef.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/CustomStructLinkDef.h,1,['test'],['test']
Testability,// Note: We explicitly check for attributes rather than using cover functions; // because some of the cover functions include the logic being implemented.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp:130,log,logic,130,interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp,1,['log'],['logic']
Testability,// Note: We leave the subreg number around a little longer in case of defs.; // This is so that the register freeing logic in allocateInstruction can still; // recognize this as subregister defs. The code there will clear the number.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocFast.cpp:117,log,logic,117,interpreter/llvm-project/llvm/lib/CodeGen/RegAllocFast.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocFast.cpp,1,['log'],['logic']
Testability,"// Note: We tested to make sure the streamer info was available previously.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx:12,test,tested,12,tree/tree/src/TBranchElement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx,1,['test'],['tested']
Testability,"// Note: as an egregious but useful hack we use the real path here, because; // frameworks moving between top-level frameworks to embedded frameworks tend; // to be symlinked, and we base the logical structure of modules on the; // physical layout. In particular, we need to deal with crazy includes like; //; // #include <Foo/Frameworks/Bar.framework/Headers/Wibble.h>; //; // where 'Bar' used to be embedded in 'Foo', is now a top-level framework; // which one should access with, e.g.,; //; // #include <Bar/Wibble.h>; //; // Similar issues occur when a top-level framework has moved into an; // embedded framework.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/HeaderSearch.cpp:192,log,logical,192,interpreter/llvm-project/clang/lib/Lex/HeaderSearch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/HeaderSearch.cpp,1,['log'],['logical']
Testability,// Note: remangleIntrinsicFunction does not copy metadata and as such; // F should not occur in the set of objects with unmapped metadata.; // If this assertion fails then remangleIntrinsicFunction needs updating.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Linker/IRMover.cpp:151,assert,assertion,151,interpreter/llvm-project/llvm/lib/Linker/IRMover.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Linker/IRMover.cpp,1,['assert'],['assertion']
Testability,"// Note: there are a few 32-bit splat values (specifically: 00ffff00,; // ff000000, ff0000ff, and ffff00ff) that are valid for VMOV.I64 but not; // VMOV.I32. A (very) minor optimization would be to replicate the value; // and fall through here to test for a valid 64-bit splat. But, then the; // caller would also need to check and handle the change in size.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:247,test,test,247,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['test'],['test']
Testability,"// Note: these tests could be simpler; the models were just copied; // from testLikelihoodSerial for convenience.; // Introspection tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx:15,test,tests,15,roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx,3,['test'],"['testLikelihoodSerial', 'tests']"
Testability,"// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:14,test,tests,14,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['test'],['tests']
Testability,"// Note: unconditionally getting checking that the proxy exists may get it at; // this point. There are cases when this is being run unnecessarily, but; // it is cheap and having the assertion in place is more valuable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/CGSCCPassManager.cpp:183,assert,assertion,183,interpreter/llvm-project/llvm/lib/Analysis/CGSCCPassManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/CGSCCPassManager.cpp,1,['assert'],['assertion']
Testability,"// Note: we can't do Hesse here. Without the error recovery, Minuit2; // would print errors that would cause the unit test to fail.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testNaNPacker.cxx:118,test,test,118,roofit/roofitcore/test/testNaNPacker.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testNaNPacker.cxx,1,['test'],['test']
Testability,"// Note: we can't use Hesse or Minos. Without the error recovery, Minuit2; // would print errors that would cause the unit test to fail.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testNaNPacker.cxx:123,test,test,123,roofit/roofitcore/test/testNaNPacker.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testNaNPacker.cxx,1,['test'],['test']
Testability,"// Note: we don't serialize the log or serialization file names, because; // they are generally transient files and will almost always be overridden.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:32,log,log,32,interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp,1,['log'],['log']
Testability,"// Nothing to delay, but we may as well skip the logic below.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCOpts.cpp:49,log,logic,49,interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCOpts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCOpts.cpp,1,['log'],['logic']
Testability,"// Notice that the RAxisBase configuration is _not_ updated when new; // labels are added. This is by design, according to the RAxisLabels docs.; // The configuration would be updated on Grow(), but we can't test Grow(); // right now since it isn't implemented yet...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/axis.cxx:208,test,test,208,hist/histv7/test/axis.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/axis.cxx,1,['test'],['test']
Testability,"// Notify locally taking care of redirection, windows logs, ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:54,log,logs,54,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['log'],['logs']
Testability,"// Notify the client that we've got more workers, and print info on; // Master's log as well",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:81,log,log,81,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['log'],['log']
Testability,"// Notify the enabled tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:22,test,tests,22,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['test'],['tests']
Testability,"// Now add the base class descriptions.; // Itanium C++ ABI 2.9.5p6c:; // __base_info[] is an array of base class descriptions -- one for every; // direct proper base. Each description is of the type:; //; // struct abi::__base_class_type_info {; // public:; // const __class_type_info *__base_type;; // long __offset_flags;; //; // enum __offset_flags_masks {; // __virtual_mask = 0x1,; // __public_mask = 0x2,; // __offset_shift = 8; // };; // };; // If we're in mingw and 'long' isn't wide enough for a pointer, use 'long; // long' instead of 'long' for __offset_flags. libstdc++abi uses long long on; // LLP64 platforms.; // FIXME: Consider updating libc++abi to match, and extend this logic to all; // LLP64 platforms.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:690,log,logic,690,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,1,['log'],['logic']
Testability,"// Now for the second test:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:22,test,test,22,hist/hist/src/TMultiDimFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx,1,['test'],['test']
Testability,"// Now if the branch exists in db, root gives a warning and exit; // Dealing with duplicate branch has been done, but not tested yet.; // So if you want to allow duplicate branch, just comment Fatal() line and uncomment commented; // below Fatal() line",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeSQL.cxx:122,test,tested,122,tree/tree/src/TTreeSQL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeSQL.cxx,1,['test'],['tested']
Testability,"// Now test Transformation3D",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/testGenVectorVc.cxx:7,test,test,7,test/testGenVectorVc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/testGenVectorVc.cxx,1,['test'],['test']
Testability,"// Now test all possible combinations of target and source sizes. The outer loop is for the target sizes because that; // allows us to check that nothing got overwritten.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/zip/test/ZipTest.cxx:7,test,test,7,core/zip/test/ZipTest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/zip/test/ZipTest.cxx,1,['test'],['test']
Testability,"// Now test the complete 2D case where the y variable is also distributed; // with non-uniform binning. To make things simple, the histogram has only; // 2 bins.; //; // The x-histogram will have the following content for the entries where y; // is in the [0, 2.5] bin (12 entries):; //; // - bin1 [0.0, 1.0]: 3 counts (bin volume x counts = 3); // - bin2 [1.0, 3.0]: 1 count (bin volume x counts = 2); // - bin3 [3.0, 3.5]: 8 counts (bin volume x counts = 4); //; // Then, there are some more entries with y in the [2.5, 3.5] bin (4 entries);; //; // - bin6 [0.0, 1.0]: 1 counts (bin volume x counts = 1); // - bin7 [1.0, 3.0]: 2 counts (bin volume x counts = 4); // - bin8 [3.0, 3.5]: 1 counts (bin volume x counts = 0.5)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx:7,test,test,7,roofit/roofitcore/test/testRooDataHist.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx,1,['test'],['test']
Testability,// Now test the imaginary part and create its branch.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp:7,test,test,7,interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp,1,['test'],['test']
Testability,"// Now test the simple 2D case where there just an additional dummy variable y that is always in the first bin; // This should consistently give the same results as the 1D case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx:7,test,test,7,roofit/roofitcore/test/testRooDataHist.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx,1,['test'],['test']
Testability,"// Now the equality tests for non template specialisations.; // The easy cases:; // template <class T=double> class A; or; // template <class T=A<float>> class B;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:20,test,tests,20,core/clingutils/src/TClingUtils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx,1,['test'],['tests']
Testability,// Now we can use the alloca logic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroFrame.cpp:29,log,logic,29,interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroFrame.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroFrame.cpp,1,['log'],['logic']
Testability,// Now we search for cases where we can use a tail call without changing the; // ABI. Sibcall is used in some places (particularly gcc) to refer to this; // concept.; // I want anyone implementing a new calling convention to think long and hard; // about this assert.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:260,assert,assert,260,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['assert'],['assert']
Testability,// Number of and total samples of units that only present in base or test; // profile,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:69,test,test,69,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,1,['test'],['test']
Testability,// Number of bits used in test for unsignedness.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVectorCombine.cpp:26,test,test,26,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVectorCombine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVectorCombine.cpp,1,['test'],['test']
Testability,"// Number of bytes to log",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:22,log,log,22,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['log'],['log']
Testability,"// Number of classes to be tested",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx:27,test,tested,27,test/tcollbm.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx,1,['test'],['tested']
Testability,// Number of logical segment descriptors,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h:13,log,logical,13,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h,1,['log'],['logical']
Testability,"// Number of micro opcodes dispatched.; // This field is often set to the total number of micro-opcodes specified by; // the instruction descriptor of IR.; // The only exception is when IR declares a number of micro opcodes; // which exceeds the processor DispatchWidth, and - by construction - it; // requires multiple cycles to be fully dispatched. In that particular case,; // the dispatch logic would generate more than one dispatch event (one per; // cycle), and each event would declare how many micro opcodes are effectively; // been dispatched to the schedulers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h:393,log,logic,393,interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HWEventListener.h,1,['log'],['logic']
Testability,// Number of units and total samples in base or test profile,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:48,test,test,48,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,1,['test'],['test']
Testability,// OR/AND test for masks.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h:10,test,test,10,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,1,['test'],['test']
Testability,"// ObjCForCollectionStmts are processed in two places. This method; // handles the case where an ObjCForCollectionStmt* occurs as one of the; // statements within a basic block. This transfer function does two things:; //; // (1) binds the next container value to 'element'. This creates a new; // node in the ExplodedGraph.; //; // (2) note whether the collection has any more elements (or in other words,; // whether the loop has more iterations). This will be tested in; // processBranch.; //; // FIXME: Eventually this logic should actually do dispatches to; // 'countByEnumeratingWithState:objects:count:' (NSFastEnumeration).; // This will require simulating a temporary NSFastEnumerationState, either; // through an SVal or through the use of MemRegions. This value can; // be affixed to the ObjCForCollectionStmt* instead of 0/1; when the loop; // terminates we reclaim the temporary (it goes out of scope) and we; // we can test if the SVal is 0 or if the MemRegion is null (depending; // on what approach we take).; //; // For now: simulate (1) by assigning either a symbol or nil if the; // container is empty. Thus this transfer function will by default; // result in state splitting.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineObjC.cpp:463,test,tested,463,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineObjC.cpp,3,"['log', 'test']","['logic', 'test', 'tested']"
Testability,"// ObjCWeakRuntime tracks whether the runtime supports __weak, not; // whether the feature is actually enabled. This is predominantly; // determined by -fobjc-runtime, but we allow it to be overridden; // from the command line for testing purposes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp:231,test,testing,231,interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp,1,['test'],['testing']
Testability,"// Objects are of interest if the have length ratio c.f. the; // current interest box, and they at least partially overlap it.; // Some objects have zero volume BBs - e.g. single points - skip; // the test for these as there is no way to threshold on 0.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLCamera.cxx:201,test,test,201,graf3d/gl/src/TGLCamera.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLCamera.cxx,1,['test'],['test']
Testability,"// Observation:; // If the cell has a form of 00..0xx..x with k zeros and n remaining; // bits, this could be an extractu of the n bits, but it could also be; // an extractu of a longer field which happens to have 0s in the top; // bit positions.; // The same logic applies to sign-extended fields.; //; // Do not check for the extended extracts, since it would expand the; // search space quite a bit. The search may be expensive as it is.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitSimplify.cpp:260,log,logic,260,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitSimplify.cpp,1,['log'],['logic']
Testability,"// Offset is 2 because the the first 2 bytes of the; // jump stub block are {0xff, 0x25} -- an indirect absolute; // jump.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h:61,stub,stub,61,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/i386.h,1,['stub'],['stub']
Testability,"// Ok, everything is good, mark the value as not being on the stack; // anymore so that our assertion about the stack being empty at end of; // block doesn't fire.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FloatingPoint.cpp:92,assert,assertion,92,interpreter/llvm-project/llvm/lib/Target/X86/X86FloatingPoint.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FloatingPoint.cpp,1,['assert'],['assertion']
Testability,"// Ok, we need to do a load from a stub. If we've already loaded from; // this stub, reuse the loaded pointer, otherwise emit the load now.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp:35,stub,stub,35,interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp,2,['stub'],['stub']
Testability,"// Okay! We've done all the tests. If any have failed, return false. Otherwise; // we can vectorize, and at this point we don't have any other mem analysis; // which may limit our maximum vectorization factor, so just return true with; // no restrictions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp:28,test,tests,28,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp,1,['test'],['tests']
Testability,"// Okay, now that we got the section, verify that the TAA & StubSize agree.; // If the user declared multiple globals with different section flags, we need; // to reject it here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp:60,Stub,StubSize,60,interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp,1,['Stub'],['StubSize']
Testability,"// Okay, we have actual filters or typeinfos to emit. As such, we need to; // pick a type encoding for them. We're about to emit a list of pointers to; // typeinfo objects at the end of the LSDA. However, unless we're in static; // mode, this reference will require a relocation by the dynamic linker.; //; // Because of this, we have a couple of options:; //; // 1) If we are in -static mode, we can always use an absolute reference; // from the LSDA, because the static linker will resolve it.; //; // 2) Otherwise, if the LSDA section is writable, we can output the direct; // reference to the typeinfo and allow the dynamic linker to relocate; // it. Since it is in a writable section, the dynamic linker won't; // have a problem.; //; // 3) Finally, if we're in PIC mode and the LDSA section isn't writable,; // we need to use some form of indirection. For example, on Darwin,; // we can output a statically-relocatable reference to a dyld stub. The; // offset to the stub is constant, but the contents are in a section; // that is updated by the dynamic linker. This is easy enough, but we; // need to tell the personality function of the unwinder to indirect; // through the dyld stub.; //; // FIXME: When (3) is actually implemented, we'll have to emit the stubs; // somewhere. This predicate should be moved to a shared location that is; // in target-independent code.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/EHStreamer.cpp:945,stub,stub,945,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/EHStreamer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/EHStreamer.cpp,4,['stub'],"['stub', 'stubs']"
Testability,"// Okay, we trimmed as much off the top and the bottom of the list as we; // could. If there is more than two elements in the list, try deleting; // interior elements and testing that.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/ListReducer.h:171,test,testing,171,interpreter/llvm-project/llvm/tools/bugpoint/ListReducer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/ListReducer.h,1,['test'],['testing']
Testability,"// Okay, we've parsed the section attributes, see if we have a stub size spec.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCSectionMachO.cpp:63,stub,stub,63,interpreter/llvm-project/llvm/lib/MC/MCSectionMachO.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCSectionMachO.cpp,1,['stub'],['stub']
Testability,"// Old test statistic with parallel likelihood or gradient",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMinimizer.cxx:7,test,test,7,roofit/roofitcore/src/RooMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMinimizer.cxx,1,['test'],['test']
Testability,// OldOpndValue is either undef (IMPLICIT_DEF) or immediate or something else; // We could use: assert(!OldOpndValue || OldOpndValue->isImm()); // but the third option is used to distinguish undef from non-immediate; // to reuse IMPLICIT_DEF instruction later,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNDPPCombine.cpp:96,assert,assert,96,interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNDPPCombine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNDPPCombine.cpp,1,['assert'],['assert']
Testability,"// On AIX, except if constinit and also neither of class type or of; // (possibly multi-dimensional) array of class type, thread_local vars; // will have init routines regardless of whether they are; // const-initialized. Since the routine is guaranteed to exist, we can; // unconditionally call it without testing for its existance. This; // avoids potentially unresolved weak symbols which the AIX linker; // isn't happy with.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:307,test,testing,307,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,1,['test'],['testing']
Testability,"// On AVX/AVX2 the type v8i1 is legalized to v8i16, which is an XMM sized; // register. In most cases we actually compare or select YMM-sized registers; // and mixing the two types creates horrible code. This method optimizes; // some of the transition sequences.; // Even with AVX-512 this is still useful for removing casts around logical; // operations on vXi1 mask types.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:333,log,logical,333,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['log'],['logical']
Testability,"// On Windows we get an assert, CodeGen-ing the callfunc for the construction:; // CGClass.cpp:488's CallBaseDtor::Emit fails to cast CFG.CurCodeDecl (the callfunc; // __cf2 function) into the expected destructor (i.e. CXXMethodDecl). I.e. something; // is wrong in the exception emission stack.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/test/TClingMethodInfoTests.cxx:24,assert,assert,24,core/metacling/test/TClingMethodInfoTests.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/test/TClingMethodInfoTests.cxx,1,['assert'],['assert']
Testability,"// On pre-SSE41 targets we test for the sign bit by comparing to; // zero - a negative value will set all bits of the lanes to true; // and VSELECT uses that in its OR(AND(V0,C),AND(V1,~C)) lowering.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:27,test,test,27,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['test'],['test']
Testability,"// On some 'newer' platform (Fedora Core 17+, Ubuntu 12), the; // initialization order is (by default?) is 'wrong' and so we can't; // delete the interpreter now .. because any of the static in the; // interpreter's library have already been deleted.; // On the link line, we must list the most dependent .o file; // and end with the least dependent (LLVM libraries), unfortunately,; // Fedora Core 17+ or Ubuntu 12 will also execute the initialization; // in the same order (hence doing libCore's before LLVM's and; // vice et versa for both the destructor. We worked around the; // initialization order by delay the TROOT creation until first use.; // We can not do the same for destruction as we have no way of knowing; // the last access ...; // So for now, let's avoid delete TCling except in the special build; // checking the completeness of the termination deletion.; // TODO: Should we do more cleanup here than just call delete?; // Segfaults rootcling in some cases, debug and uncomment:; //; // delete fInterpreter;; // We cannot delete fCleanups because of the logic in atexit which needs it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:1074,log,logic,1074,core/base/src/TROOT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx,1,['log'],['logic']
Testability,"// On some 32bit platforms, the result of; // (int) (std::log(bytes) / std::log(unit); // in the case of bytes==unit ends up surprisingly to be zero; // rather than one, so 'hard code' the result",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/StringConv.hxx:58,log,log,58,core/base/inc/ROOT/StringConv.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/ROOT/StringConv.hxx,2,['log'],['log']
Testability,"// On testing with the data from the 250202_181_RECO.root and doing ""just"" serializing; // the value 8 was the sweet spot of performance. With more slots, too much time is; // spent scanning the array of ""last"" seen and with less slots then the; // serialization induced by and/or the cost of executed `++fSubTypesReaders is slow; // down (noticeably) the streaming of branches with polymorphic containers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TIsAProxy.h:6,test,testing,6,core/meta/inc/TIsAProxy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TIsAProxy.h,1,['test'],['testing']
Testability,"// On workers we do not send the logs to masters (to avoid duplication of; // text) unless asked explicitly, e.g. after an Exec(...) request.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx:33,log,logs,33,proof/proof/src/TProofServ.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx,1,['log'],['logs']
Testability,"// On zEC12 we prefer to use RISBGN. But if there is a chance to; // actually use the condition code, we may turn it back into RISGB.; // Note that RISBG is not really a ""load-and-test"" instruction,; // but sets the same condition code values, so is OK to use here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZInstrInfo.cpp:180,test,test,180,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZInstrInfo.cpp,1,['test'],['test']
Testability,// One interesting pattern that we'd want to form is 'bit test':; // ((1 << Y) & C) ==/!= 0; // But we also need to be careful not to try to reverse that fold.; // Is this '1 << Y' ?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:58,test,test,58,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['test'],['test']
Testability,// Only add the strings that hold information about filenames. They will be; // used to complete the line/file information for the logical elements.; // There are other strings holding information about namespaces.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp:131,log,logical,131,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp,1,['log'],['logical']
Testability,// Only consider file-scope declarations in this test.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp:49,test,test,49,interpreter/llvm-project/clang/lib/AST/Decl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp,1,['test'],['test']
Testability,"// Only copy sret from the first argument. For C++ instance methods, clang can; // stick an sret marking on a later argument, but it doesn't actually affect; // the ABI, so we can omit it. This avoids triggering a verifier assertion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64Arm64ECCallLowering.cpp:223,assert,assertion,223,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64Arm64ECCallLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64Arm64ECCallLowering.cpp,1,['assert'],['assertion']
Testability,"// Only create a bitcast if necessary. In particular, with; // DebugTypeODRUniquing we may reach metadata in the destination module; // containing a GV from the source module, in which case SGV will be; // the same as DGV and NewGV, and TypeMap.get() will assert since it; // assumes it is being invoked on a type in the source module.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Linker/IRMover.cpp:256,assert,assert,256,interpreter/llvm-project/llvm/lib/Linker/IRMover.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Linker/IRMover.cpp,1,['assert'],['assert']
Testability,"// Only exactly equal builtin types are compatible, which is tested above.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:61,test,tested,61,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['test'],['tested']
Testability,"// Only fail with assert above, otherwise ignore the parsing error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/llvm-opt-fuzzer.cpp:18,assert,assert,18,interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/llvm-opt-fuzzer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/llvm-opt-fuzzer.cpp,1,['assert'],['assert']
Testability,"// Only for demo resolve all unknown objects to cling::test::Tester",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/InterpreterCallbacks.cpp:55,test,test,55,interpreter/cling/lib/Interpreter/InterpreterCallbacks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/InterpreterCallbacks.cpp,2,"['Test', 'test']","['Tester', 'test']"
Testability,"// Only for test/OutputRedirect.C, but shouldn't affect performance too much.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/driver/cling.cpp:12,test,test,12,interpreter/cling/tools/driver/cling.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/driver/cling.cpp,1,['test'],['test']
Testability,// Only handle test patterns.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:15,test,test,15,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['test'],['test']
Testability,"// Only implemented because they're abstract ... should throw an; // exception or assert they are not called.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLViewer.h:82,assert,assert,82,graf3d/gl/inc/TGLViewer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLViewer.h,1,['assert'],['assert']
Testability,// Only in +Asserts mode...,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Value.cpp:12,Assert,Asserts,12,interpreter/llvm-project/llvm/lib/IR/Value.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Value.cpp,1,['Assert'],['Asserts']
Testability,// Only include raw integers (not enums) as configuration; // values if they are used in a logical or comparison operator; // (not arithmetic).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ReachableCode.cpp:91,log,logical,91,interpreter/llvm-project/clang/lib/Analysis/ReachableCode.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ReachableCode.cpp,1,['log'],['logical']
Testability,"// Only logical ops can be done on v4i8 directly, others must be done; // elementwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp:8,log,logical,8,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp,1,['log'],['logical']
Testability,// Only merge entries that overlap the same chunk. We test this first; // despite being a bit more expensive because this is the condition that; // tends to prevent merging.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp:54,test,test,54,interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp,1,['test'],['test']
Testability,"// Only propagate the section size encoding length if it's not the minimal; // size or 5 (the default ""padded"" value). This is to avoid having every; // YAML output polluted with this value when we usually don't care about it; // (and avoid rewriting all the test expectations).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/wasm2yaml.cpp:259,test,test,259,interpreter/llvm-project/llvm/tools/obj2yaml/wasm2yaml.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/wasm2yaml.cpp,1,['test'],['test']
Testability,// Only remove the edges that we have added when testing; // the fit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUIGroupLP.cpp:49,test,testing,49,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUIGroupLP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUIGroupLP.cpp,1,['test'],['testing']
Testability,"// Only test the conditional argument of cmpxchg instruction.; // The other argument can potentially be uninitialized, but we can not; // detect this situation reliably without possible false positives.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp:8,test,test,8,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,1,['test'],['test']
Testability,"// Only use ""platform"" in tests to override CLANG_DEFAULT_CXX_STDLIB!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp:26,test,tests,26,interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp,1,['test'],['tests']
Testability,"// Only use ""platform"" in tests to override CLANG_DEFAULT_RTLIB!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp:26,test,tests,26,interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp,1,['test'],['tests']
Testability,// Only used by compiler if both template types are the same. Useful when; // using SFINAE to test for the existence of member functions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ADL.h:94,test,test,94,interpreter/llvm-project/llvm/include/llvm/ADT/ADL.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ADL.h,1,['test'],['test']
Testability,// Only used in assert(),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:16,assert,assert,16,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,4,['assert'],['assert']
Testability,// Only used in assert(); // This should be truncation of integral types.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:16,assert,assert,16,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,1,['assert'],['assert']
Testability,// Only used in asserts.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h:16,assert,asserts,16,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h,1,['assert'],['asserts']
Testability,// OpTypes are used to encode information about the following logical; // operand (which may consist of several MachineOperands) for the; // OpParser.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h:62,log,logical,62,interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h,1,['log'],['logical']
Testability,// Open the secure log file if we haven't already.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/DarwinAsmParser.cpp:19,log,log,19,interpreter/llvm-project/llvm/lib/MC/MCParser/DarwinAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/DarwinAsmParser.cpp,1,['log'],['log']
Testability,"// OpenCL builtin test generator. This class processes the same TableGen input; // as BuiltinNameEmitter, but generates a .cl file that contains a call to each; // builtin function described in the .td input.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp:18,test,test,18,interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp,1,['test'],['test']
Testability,// OpenCL v1.1 6.3.h: The logical operator not (!) does not; // operate on scalar float types.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:26,log,logical,26,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['log'],['logical']
Testability,// OpenCL v1.1 6.3.h: The logical operator not (!) does not; // operate on vector float types.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:26,log,logical,26,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['log'],['logical']
Testability,"// OpenCL v1.1 s6.3.g: The logical operators and (&&), or (||) do; // not operate on the built-in scalar and vector float types.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:27,log,logical,27,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['log'],['logical']
Testability,"// OpenMP [2.6, Canonical Loop Form, Restrictions]; // If test-expr is of form var relational-op b and relational-op is < or; // <= then incr-expr must cause var to increase on each iteration of the; // loop. If test-expr is of form var relational-op b and relational-op is; // > or >= then incr-expr must cause var to decrease on each iteration of; // the loop.; // If test-expr is of form b relational-op var and relational-op is < or; // <= then incr-expr must cause var to decrease on each iteration of the; // loop. If test-expr is of form b relational-op var and relational-op is; // > or >= then incr-expr must cause var to increase on each iteration of; // the loop.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:58,test,test-expr,58,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,4,['test'],['test-expr']
Testability,"// OpenMP [2.9.1, Canonical Loop Form]; // for (init-expr; test-expr; incr-expr) structured-block; // for (range-decl: range-expr) structured-block",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:59,test,test-expr,59,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['test'],['test-expr']
Testability,"// Optimization flags. Not user visible, used mostly for testing; // and benchmarking the tool.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp:57,test,testing,57,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,2,"['benchmark', 'test']","['benchmarking', 'testing']"
Testability,// Optimizations for TEST compares.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:21,TEST,TEST,21,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,1,['TEST'],['TEST']
Testability,// Optimize some simple tbz/tbnz cases. Returns the new operand and bit to test; // as well as whether the test should be inverted. This code is required to; // catch these cases (as opposed to standard dag combines) because; // AArch64ISD::TBZ is matched during legalization.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:75,test,test,75,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,2,['test'],['test']
Testability,// Optimize test single bit zero/non-zero and branch.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:12,test,test,12,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['test'],['test']
Testability,// Optimizing for varargs on Win64 is unlikely to be safe without; // additional testing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp:81,test,testing,81,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp,1,['test'],['testing']
Testability,"// Option LOG is required ?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:10,LOG,LOG,10,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,1,['LOG'],['LOG']
Testability,"// Option LOGX",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:10,LOG,LOGX,10,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,1,['LOG'],['LOGX']
Testability,// Option is used in lit tests to prevent deadcoding of patterns inspected.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp:25,test,tests,25,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp,1,['test'],['tests']
Testability,// Option to allow testing of the combiner while no targets know about indexed; // addressing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp:19,test,testing,19,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,1,['test'],['testing']
Testability,// Option to disable EH pad first sorting. Only for testing unwind destination; // mismatches in CFGStackify.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyCFGSort.cpp:52,test,testing,52,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyCFGSort.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyCFGSort.cpp,1,['test'],['testing']
Testability,// Option to disable vectorizer for tests.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp:36,test,tests,36,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUTargetMachine.cpp,1,['test'],['tests']
Testability,// Option to simulate function importing for testing. This enables using; // llvm-link to simulate ThinLTO backend processes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp:45,test,testing,45,interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp,1,['test'],['testing']
Testability,"// Option to support testing of function importing. The module summary; // must be specified in the case were we request imports via the -import; // option, as well as when compiling any module with functions that may be; // exported (imported by a different llvm-link -import invocation), to ensure; // consistent promotion and renaming of locals.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp:21,test,testing,21,interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-link/llvm-link.cpp,1,['test'],['testing']
Testability,"// Optional logging",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMinimizerFcn.cxx:12,log,logging,12,roofit/roofitcore/src/RooMinimizerFcn.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMinimizerFcn.cxx,3,['log'],['logging']
Testability,// Ordering on Info. The logic should match with the consumer-side function in; // llvm/Option/OptTable.h.; // FIXME: Make this take StringRefs instead of null terminated strings to; // simplify callers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/OptEmitter.cpp:25,log,logic,25,interpreter/llvm-project/llvm/utils/TableGen/OptEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/OptEmitter.cpp,1,['log'],['logic']
Testability,"// Ordering: shuff: 5 0 1 2 3 4, deal: 5 4 3 2 1 0 (for Log=6),; // for bytes zero is included, for halfwords is not.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelDAGToDAGHVX.cpp:56,Log,Log,56,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelDAGToDAGHVX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelDAGToDAGHVX.cpp,1,['Log'],['Log']
Testability,"// Originally, we could not get the debugger (lldb) to play nicely with ZeroMQ; every time we paused a process, it; // said it crashed because of SIGSTOP, but SIGSTOP should just pause it... this test was meant to reproduce this; // behavior and fix it, which was done by more carefully handling exceptions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/test/test_Messenger.cxx:196,test,test,196,roofit/multiprocess/test/test_Messenger.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/test/test_Messenger.cxx,1,['test'],['test']
Testability,"// Ostringstream derivative to redirect and format logging output",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MsgLogger.h:51,log,logging,51,tmva/tmva/inc/TMVA/MsgLogger.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MsgLogger.h,1,['log'],['logging']
Testability,// Other arithmetic and logic ops are unsupported.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp:24,log,logic,24,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp,1,['log'],['logic']
Testability,"// Other legalization maps vector<? x [type bigger than 64 bits]> via bitcasts; // but we can't go directly to that logic becasue you can't bitcast a vector; // of pointers to a vector of integers. Therefore, introduce an intermediate; // vector of integers using ptrtoint (and inttoptr on the output) in order to; // drive the legalization forward.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp:116,log,logic,116,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp,1,['log'],['logic']
Testability,"// Other legalization maps vector<? x [type bigger than 64 bits]> via bitcasts; // but we can't go directly to that logic becasue you can't bitcast a vector; // of pointers to a vector of integers. Therefore, make the pointer vector; // into an equivalent vector of integers with ptrtoint, insert the ptrtoint'd; // new value, and then inttoptr the result vector back. This will then allow; // the rest of legalization to take over.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp:116,log,logic,116,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp,1,['log'],['logic']
Testability,// Other predicates.; /// isZero - Test whether the quantity equals zero.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/CharUnits.h:35,Test,Test,35,interpreter/llvm-project/clang/include/clang/AST/CharUnits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/CharUnits.h,1,['Test'],['Test']
Testability,"// Otherwise do a clumsy setcc and re-test it.; // Note that i1 essentially gets ANY_EXTEND'ed to i8 where it isn't used; // in an explicit cast, so make sure to handle that correctly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp:38,test,test,38,interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp,1,['test'],['test']
Testability,"// Otherwise do coercion through memory. This is stupid, but; // simple.; // Generally SrcSize is never greater than DstSize, since this means we are; // losing bits. However, this can happen in cases where the structure has; // additional padding, for example due to a user specified alignment.; //; // FIXME: Assert that we aren't truncating non-padding bits when have access; // to that information.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:311,Assert,Assert,311,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,1,['Assert'],['Assert']
Testability,"// Otherwise, emit suspend logic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp:27,log,logic,27,interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp,1,['log'],['logic']
Testability,"// Otherwise, fall back to the generic logic for simplifying and handling; // instructions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp:39,log,logic,39,interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,1,['log'],['logic']
Testability,"// Otherwise, fall through to the next bit test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp:43,test,test,43,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp,2,['test'],['test']
Testability,"// Otherwise, fallback on the generic logic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:38,log,logic,38,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['log'],['logic']
Testability,"// Otherwise, if this is a comparison of the sign bit, simplify to and/test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:71,test,test,71,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['test'],['test']
Testability,"// Otherwise, if we have more than two sets, see if test passes on the; // complement.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DeltaAlgorithm.cpp:52,test,test,52,interpreter/llvm-project/llvm/lib/Support/DeltaAlgorithm.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DeltaAlgorithm.cpp,1,['test'],['test']
Testability,"// Otherwise, test whether we should swap L and Index.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-diff/lib/DifferenceEngine.cpp:14,test,test,14,interpreter/llvm-project/llvm/tools/llvm-diff/lib/DifferenceEngine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-diff/lib/DifferenceEngine.cpp,1,['test'],['test']
Testability,"// Otherwise, the standard logic requires a helper function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:27,log,logic,27,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,1,['log'],['logic']
Testability,"// Otherwise, use generic code to load one byte and test the bit. Use all but; // the bottom three bits as the array index, and the bottom three bits to form; // a mask.; // Bit = BitBaseI8[BitPos >> 3] & (1 << (BitPos & 0x7)) != 0;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:52,test,test,52,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,1,['test'],['test']
Testability,"// Otherwise, use the default logic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:30,log,logic,30,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,1,['log'],['logic']
Testability,"// Otherwise, we need to provide a de-sugared/transformed AST that can be; // associated with another loop directive.; //; // The canonical loop analysis return by checkTransformableLoopNest assumes; // the following structure to be the same loop without transformations or; // directives applied: \code OriginalInits; LoopHelper.PreInits;; // LoopHelper.Counters;; // for (; IV < LoopHelper.NumIterations; ++IV) {; // LoopHelper.Updates;; // Body;; // }; // \endcode; // where IV is a variable declared and initialized to 0 in LoopHelper.PreInits; // and referenced by LoopHelper.IterationVarRef.; //; // The unrolling directive transforms this into the following loop:; // \code; // OriginalInits; \; // LoopHelper.PreInits; > NewPreInits; // LoopHelper.Counters; /; // for (auto UIV = 0; UIV < LoopHelper.NumIterations; UIV+=Factor) {; // #pragma clang loop unroll_count(Factor); // for (IV = UIV; IV < UIV + Factor && UIV < LoopHelper.NumIterations; ++IV); // {; // LoopHelper.Updates;; // Body;; // }; // }; // \endcode; // where UIV is a new logical iteration counter. IV must be the same VarDecl; // as the original LoopHelper.IterationVarRef because LoopHelper.Updates; // references it. If the partially unrolled loop is associated with another; // loop directive (like an OMPForDirective), it will use checkOpenMPLoop to; // analyze this loop, i.e. the outer loop must fulfill the constraints of an; // OpenMP canonical loop. The inner loop is not an associable canonical loop; // and only exists to defer its unrolling to LLVM's LoopUnroll instead of; // doing it in the frontend (by adding loop metadata). NewPreInits becomes a; // property of the OMPLoopBasedDirective instead of statements in; // CompoundStatement. This is to allow the loop to become a non-outermost loop; // of a canonical loop nest where these PreInits are emitted before the; // outermost directive.; // Determine the PreInit declarations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:1048,log,logical,1048,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['log'],['logical']
Testability,// Out of range logical bit shifts are guaranteed to be zero.; // Out of range arithmetic bit shifts splat the sign bit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:16,log,logical,16,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,3,['log'],['logical']
Testability,"// OuterVar = (LB = TestIsLessOp.getValue() ? min(LB(MinVal), LB(MaxVal)) :; // max(LB(MinVal), LB(MaxVal)))",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:20,Test,TestIsLessOp,20,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['Test'],['TestIsLessOp']
Testability,"// Output instructions according to the Logical Layout of a Module:; // 1,2. All OpCapability instructions, then optional OpExtension instructions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVAsmPrinter.cpp:40,Log,Logical,40,interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVAsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVAsmPrinter.cpp,1,['Log'],['Logical']
Testability,// Output stubs for dynamically-linked functions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86AsmPrinter.cpp:10,stub,stubs,10,interpreter/llvm-project/llvm/lib/Target/X86/X86AsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86AsmPrinter.cpp,1,['stub'],['stubs']
Testability,// Output stubs for external and common global variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp:10,stub,stubs,10,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp,3,['stub'],['stubs']
Testability,"// OutputType - Allow the user to specify the way code should be run, to test; // for miscompilation.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/ExecutionDriver.cpp:73,test,test,73,interpreter/llvm-project/llvm/tools/bugpoint/ExecutionDriver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/ExecutionDriver.cpp,1,['test'],['test']
Testability,"// Overlap / projection / intersection tests; // Viewport is GL coorinate system - origin bottom/left",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLCamera.h:39,test,tests,39,graf3d/gl/inc/TGLCamera.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLCamera.h,1,['test'],['tests']
Testability,"// Overlap testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLBoundingBox.h:11,test,testing,11,graf3d/gl/inc/TGLBoundingBox.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLBoundingBox.h,1,['test'],['testing']
Testability,"// Overridden in cache-optimized test statistic",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h:33,test,test,33,roofit/roofitcore/src/RooAbsTestStatistic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h,1,['test'],['test']
Testability,"// Override endianness detection in RColumnElement.hxx; assume big-endian machine; // These tests are simulating a big endian machine; we will turn them off on an actual big endian node.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_endian.cxx:92,test,tests,92,tree/ntuple/v7/test/ntuple_endian.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_endian.cxx,1,['test'],['tests']
Testability,"// Override test value tolerance; // A larger tolerance is needed since the values in the Cousins paper are given with 1e-2 precision",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:12,test,test,12,roofit/roostats/test/stressRooStats_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h,2,['test'],['test']
Testability,"// Overrides set - we are in testing, the following does not need to be; // efficient.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ExpandVectorPredication.cpp:29,test,testing,29,interpreter/llvm-project/llvm/lib/CodeGen/ExpandVectorPredication.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ExpandVectorPredication.cpp,1,['test'],['testing']
Testability,// Owns the import summary specified by internal options for testing the; // ThinLTO backend via opt (to simulate distributed ThinLTO).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/MemProfContextDisambiguation.h:61,test,testing,61,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/MemProfContextDisambiguation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/MemProfContextDisambiguation.h,1,['test'],['testing']
Testability,// P1 can only subsume P2 if they test the same condition register.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp:34,test,test,34,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,1,['test'],['test']
Testability,"// P3:0 is a special case, since multiple predicate register definitions; // in a packet is allowed as the equivalent of their logical ""and"".; // Only an explicit definition of P3:0 is noted as such; if a; // side-effect, then note as a soft definition.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCChecker.cpp:127,log,logical,127,interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCChecker.cpp,1,['log'],['logical']
Testability,// PARAM: Randomly size testcases or large testcases?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/VtableTest/gen.cc:24,test,testcases,24,interpreter/llvm-project/clang/utils/VtableTest/gen.cc,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/VtableTest/gen.cc,2,['test'],['testcases']
Testability,"// PC-relative references to external symbols should go through $stub.; // If so, we need to prepare GlobalBaseReg first.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/VE/VEISelLowering.cpp:65,stub,stub,65,interpreter/llvm-project/llvm/lib/Target/VE/VEISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/VE/VEISelLowering.cpp,1,['stub'],['stub']
Testability,// PE files start with a DOS stub.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/COFFEmitter.cpp:29,stub,stub,29,interpreter/llvm-project/llvm/lib/ObjectYAML/COFFEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/COFFEmitter.cpp,1,['stub'],['stub']
Testability,"// PE/COFF, seek through MS-DOS compatibility stub and 4-byte; // PE signature to find 'normal' COFF header.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/COFFObjectFile.cpp:46,stub,stub,46,interpreter/llvm-project/llvm/lib/Object/COFFObjectFile.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/COFFObjectFile.cpp,1,['stub'],['stub']
Testability,"// PHIs are handled by the propagation logic, they are never passed into the; // transfer functions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/SparsePropagation.h:39,log,logic,39,interpreter/llvm-project/llvm/include/llvm/Analysis/SparsePropagation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/SparsePropagation.h,1,['log'],['logic']
Testability,// PLT stubs are always ARM.; // FIXME: This is the wrong heuristic for non-canonical jump tables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp:7,stub,stubs,7,interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,1,['stub'],['stubs']
Testability,"// PR35338; // TODO: assert(From != To && ""Redundant dbg value transfer"");; // TODO: assert(FromNode != ToNode && ""Intranode dbg value transfer"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:21,assert,assert,21,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,2,['assert'],['assert']
Testability,"// PROOF sandbox root dir",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TProofLite.h:9,sandbox,sandbox,9,proof/proof/inc/TProofLite.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TProofLite.h,1,['sandbox'],['sandbox']
Testability,// PTEST/TESTP sets EFLAGS as:; // TESTZ: ZF = (Op0 & Op1) == 0; // TESTC: CF = (~Op0 & Op1) == 0; // TESTNZC: ZF == 0 && CF == 0,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:9,TEST,TESTP,9,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,4,['TEST'],"['TESTC', 'TESTNZC', 'TESTP', 'TESTZ']"
Testability,"// Paint list of primitives (test,etc)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TDiamond.cxx:29,test,test,29,graf2d/graf/src/TDiamond.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TDiamond.cxx,1,['test'],['test']
Testability,// Parallel benchmarks repeat the same opcode multiple times. Just show this; // opcode and show the whole snippet only on hover.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Analysis.cpp:12,benchmark,benchmarks,12,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Analysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Analysis.cpp,1,['benchmark'],['benchmarks']
Testability,"// Parent DIEs are added to the AddrDieMap prior to the Children DIEs to; // simplify the logic to update AddrDieMap. The child's range will always; // be equal or smaller than the parent's range. With this assumption, when; // adding one range into the map, it will at most split a range into 3; // sub-ranges.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFUnit.cpp:90,log,logic,90,interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFUnit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFUnit.cpp,1,['log'],['logic']
Testability,"// Parse Log",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie_parsers/src/ParseBasicUnary.cxx:9,Log,Log,9,tmva/sofie_parsers/src/ParseBasicUnary.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie_parsers/src/ParseBasicUnary.cxx,1,['Log'],['Log']
Testability,// Parse additional include paths from environment variables.; // FIXME: We should probably sink the logic for handling these from the; // frontend into the driver. It will allow deleting 4 otherwise unused flags.; // CPATH - included following the user specified includes (but prior to; // builtin and standard includes).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:101,log,logic,101,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,1,['log'],['logic']
Testability,// Parse optional parameter to filter by stub kind,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldChecker.cpp:41,stub,stub,41,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldChecker.cpp,1,['stub'],['stub']
Testability,"// ParseArgs has printed the --help, has run the --test or has encountered an issue and logged about it",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/main/src/readspeed.cxx:51,test,test,51,main/src/readspeed.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/main/src/readspeed.cxx,2,"['log', 'test']","['logged', 'test']"
Testability,"// Parses the given data-buffer for stats and fill the CycleArray.; // If data has been extracted successfully, also modifies the code to jump; // out the benchmark loop.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/X86Counter.cpp:155,benchmark,benchmark,155,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/X86Counter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/X86Counter.cpp,1,['benchmark'],['benchmark']
Testability,"// Parsing jal operands is fiddly due to the `jal foo` and `jal ra, foo`; // both being acceptable forms. When parsing `jal ra, foo` this function; // will be called for the `ra` register operand in an attempt to match the; // single-operand alias. parseJALOffset must fail for this case. It would; // seem logical to try parse the operand using parseImmediate and return; // NoMatch if the next token is a comma (meaning we must be parsing a jal in; // the second form rather than the first). We can't do this as there's no; // way of rewinding the lexer state. Instead, return NoMatch if this operand; // is an identifier and is followed by a comma.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/AsmParser/RISCVAsmParser.cpp:307,log,logical,307,interpreter/llvm-project/llvm/lib/Target/RISCV/AsmParser/RISCVAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/AsmParser/RISCVAsmParser.cpp,1,['log'],['logical']
Testability,// Peek through any zero-extend if we're only testing for a zero result.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:46,test,testing,46,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['test'],['testing']
Testability,"// Pending: do something more intelligent here; // but at least get a message in the log file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TApplicationServer.cxx:85,log,log,85,net/net/src/TApplicationServer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TApplicationServer.cxx,2,['log'],['log']
Testability,// Perform a logical shr by shiftamt.; // Insert the shift to put the result in the low bit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp:13,log,logical,13,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,1,['log'],['logical']
Testability,"// Perform a logical view comparison as a whole unit. We start at the; // root reference; at each scope an equal test is applied to its children.; // If a difference is found, the current path is marked as missing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVCompare.cpp:13,log,logical,13,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVCompare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVCompare.cpp,2,"['log', 'test']","['logical', 'test']"
Testability,"// Perform all scalar logic operations as 16-byte vectors because there are no; // scalar FP logic instructions in SSE.; // TODO: This isn't necessary. If we used scalar types, we might avoid some; // unnecessary splats, but we might miss load folding opportunities. Should; // this decision be based on OptimizeForSize?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:22,log,logic,22,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['log'],['logic']
Testability,"// Perform logical OR of profile bitmap byte and shifted bit offset.; // %8 = or i8 %mcdc.bits, %7",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp:11,log,logical,11,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,1,['log'],['logical']
Testability,"// Perform logical OR of the bitmap against the loaded MCDC temporary value.; // %3 = or i32 %mcdc.temp, %2",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp:11,log,logical,11,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,1,['log'],['logical']
Testability,"// Perform logical elements comparison. An equal test is apply to each; // element. If a difference is found, the reference element is marked as; // 'missing'.; // The final comparison result will show the 'Reference' scopes tree,; // having both missing and added elements.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVCompare.cpp:11,log,logical,11,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVCompare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVCompare.cpp,2,"['log', 'test']","['logical', 'test']"
Testability,"// Perform separating axis test for all 15 potential; // axes. If no separating axes found, the two boxes overlap.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLBoundingBox.cxx:27,test,test,27,graf3d/gl/src/TGLBoundingBox.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLBoundingBox.cxx,1,['test'],['test']
Testability,// Perform the logical shift right.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp:15,log,logical,15,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp,1,['log'],['logical']
Testability,// Perform vector logical and on comparisons with zero vectors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:18,log,logical,18,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,1,['log'],['logical']
Testability,// Perform vector logical not on comparison with zero vector.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:18,log,logical,18,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,1,['log'],['logical']
Testability,// Perform vector logical or on comparisons with zero vectors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:18,log,logical,18,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,1,['log'],['logical']
Testability,"// Perhaps nothing to log",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:22,log,log,22,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['log'],['log']
Testability,// Pick the direction with fewer tests; // TODO: Handle more combinations of cases that can be handled together,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenCommonISel.cpp:33,test,tests,33,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenCommonISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenCommonISel.cpp,1,['test'],['tests']
Testability,// Pick the first select in Selects in the entry block. Note Selects is; // sorted in the instruction order within a block (asserted below).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/ControlHeightReduction.cpp:124,assert,asserted,124,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/ControlHeightReduction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/ControlHeightReduction.cpp,1,['assert'],['asserted']
Testability,"// Plotting and binning hints; /// Test if internal RooHistFunc is binned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooBinWidthFunction.h:35,Test,Test,35,roofit/roofitcore/inc/RooBinWidthFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooBinWidthFunction.h,1,['Test'],['Test']
Testability,"// Pointer to our current Element. This has no visible effect on the external; // state of a SparseBitVector, it's just used to improve performance in the; // common case of testing/modifying bits with similar indices.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h:174,test,testing,174,interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h,1,['test'],['testing']
Testability,"// Polynomial::Polynomial(const Polynomial &); // {; // }; // Polynomial & Polynomial::operator = (const Polynomial &rhs); // {; // if (this == &rhs) return *this; // time saving self-test; // return *this;; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/Polynomial.cxx:184,test,test,184,math/mathmore/src/Polynomial.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/Polynomial.cxx,1,['test'],['test']
Testability,"// Popdown X logo, only if started with -splash option",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/rint/src/TRint.cxx:13,log,logo,13,core/rint/src/TRint.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/rint/src/TRint.cxx,1,['log'],['logo']
Testability,// Populate stubs in __jump_table section.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldMachOI386.h:12,stub,stubs,12,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldMachOI386.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldMachOI386.h,1,['stub'],['stubs']
Testability,// Populate the stubs page stubs and mark it executable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/OrcABISupport.cpp:16,stub,stubs,16,interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/OrcABISupport.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/OrcABISupport.cpp,4,['stub'],['stubs']
Testability,"// Positive minimum. Used in case of log scale along X axis.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:37,log,log,37,hist/hist/src/TGraph.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx,1,['log'],['log']
Testability,"// Positive minimum. Used in case of log scale along Y axis.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:37,log,log,37,hist/hist/src/TGraph.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx,1,['log'],['log']
Testability,"// Possible MS-DOS stub on Windows PE file, MSF/PDB file or a; // Minidump file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/BinaryFormat/Magic.cpp:19,stub,stub,19,interpreter/llvm-project/llvm/lib/BinaryFormat/Magic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/BinaryFormat/Magic.cpp,1,['stub'],['stub']
Testability,// PostDominatorTree always has a virtual root that represents a virtual CFG; // node that serves as a single exit from the function. All the other exits; // (CFG nodes with terminators and nodes in infinite loops are logically; // connected to this virtual CFG exit node).; // This functions maps a nullptr CFG node to the virtual root tree node.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:218,log,logically,218,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,1,['log'],['logically']
Testability,// PostOutline CB is invoked when loop body function is outlined and; // loop body is replaced by call to outlined function. We need to add; // call to OpenMP device rtl inside loop preheader. OpenMP device rtl; // function will handle loop control logic.; //,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp:249,log,logic,249,interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,1,['log'],['logic']
Testability,"// Power doesn't support testing whether a value is 'normal'. Test the rest; // first, and test if it's 'not not-normal' with expected sign.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:25,test,testing,25,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,3,"['Test', 'test']","['Test', 'test', 'testing']"
Testability,// Power of 2 test:; // isPow2OrZero : ctpop(X) u< 2; // isPow2 : ctpop(X) == 1; // NotPow2OrZero: ctpop(X) u> 1; // NotPow2 : ctpop(X) != 1; // If we know any bit of X can be folded to:; // IsPow2 : X & (~Bit) == 0; // NotPow2 : X & (~Bit) != 0,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:14,test,test,14,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['test'],['test']
Testability,// PowerPC64 stub ELFv1 ABI: The address points to a function descriptor.; // Load the function address on r11 and sets it to control register. Also; // loads the function TOC in r2 and environment pointer to r11.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp:13,stub,stub,13,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp,1,['stub'],['stub']
Testability,// PowerPC64 stub ELFv2 ABI: The address points to the function itself.; // The address is already in r12 as required by the ABI. Branch to it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp:13,stub,stub,13,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp,1,['stub'],['stub']
Testability,"// Predicate is used by all the predicated intrinsics. Its C; // representation is mve_pred16_t (which is just an alias for uint16_t).; // But we give more detail here, by indicating that a given predicate; // instruction is logically regarded as a vector of i1 containing the; // same number of lanes as the input vector type. So our Predicate type; // comes with a lane count, which we use to decide which kind of <n x i1>; // we'll invoke the pred_i2v IR intrinsic to translate it into.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:225,log,logically,225,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,1,['log'],['logically']
Testability,// Preliminary check to ensure features needed for requested; // benchmark mode are present on target CPU and/or OS.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/llvm-exegesis.cpp:65,benchmark,benchmark,65,interpreter/llvm-project/llvm/tools/llvm-exegesis/llvm-exegesis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/llvm-exegesis.cpp,1,['benchmark'],['benchmark']
Testability,"// Prepend ""tag_offset, N"" to the dwarf expression.; // Tag offset logically applies to the alloca pointer, and it makes sense; // to put it at the beginning of the expression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/HWAddressSanitizer.cpp:67,log,logically,67,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/HWAddressSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/HWAddressSanitizer.cpp,1,['log'],['logically']
Testability,"// Preserve what we know about the size of the original result. If the; // result is v2i32, we have to manually widen the assert.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:122,assert,assert,122,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['assert'],['assert']
Testability,// Prevent loading GV stub multiple times in same MBB.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp:22,stub,stub,22,interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp,1,['stub'],['stub']
Testability,"// Print any logical element (line, scope, symbol or type).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVOptions.cpp:13,log,logical,13,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVOptions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVOptions.cpp,1,['log'],['logical']
Testability,// Print any logical line (debug or instruction).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVOptions.cpp:13,log,logical,13,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVOptions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVOptions.cpp,1,['log'],['logical']
Testability,"// Print test program number and its title",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx:9,test,test,9,test/stressIOPlugins.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressIOPlugins.cxx,1,['test'],['test']
Testability,"// Print test program number and its title; // const Int_t kMAX = 65;; // TString header = TString(""Test "")+Form(""%2d"",id)+"" : ""+title;; // const Int_t nch = header.Length();; // for (Int_t i = nch; i < kMAX; i++) header += '.';; // std::cout << header << (status ? ""OK"" : ""FAILED"") << std::endl;; // Print test program number and its title",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/vvector.cxx:9,test,test,9,test/vvector.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/vvector.cxx,3,"['Test', 'test']","['Test', 'test']"
Testability,"// Prints content of all cells; // Message logger",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h:43,log,logger,43,tmva/tmva/inc/TMVA/PDEFoam.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h,1,['log'],['logger']
Testability,"// Prior behavior was to return getFileOffset, which was only used as an; // in a test against std::string::npos. By returning 0 we preserve prior; // behavior to pass the test against std::string::npos and wrap everything",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Utils/SourceNormalization.cpp:82,test,test,82,interpreter/cling/lib/Utils/SourceNormalization.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Utils/SourceNormalization.cpp,2,['test'],['test']
Testability,"// Private bits, clients can only test but not change them",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/inc/TBox.h:34,test,test,34,graf2d/graf/inc/TBox.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/inc/TBox.h,1,['test'],['test']
Testability,// Process duplicated commands (without comand name); // This logic is shamelessly borrowed from Raphael; // https://github.com/DmitryBaranovskiy/raphael/; //,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:62,log,logic,62,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['logic']
Testability,// Process non-assignments except commas or short-circuited; // logical expressions (LAnd and LOr).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineC.cpp:64,log,logical,64,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineC.cpp,1,['log'],['logical']
Testability,"// Process one by one all enabled tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:34,test,tests,34,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['test'],['tests']
Testability,// Process the queue of logic instructions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTDC.cpp:24,log,logic,24,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTDC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTDC.cpp,1,['log'],['logic']
Testability,"// Process transparency !!!; // console.log(""cols"", fcol, lcol);; // double-side material required for correct tracing of colors - otherwise points sequence should be changed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveElements.js:40,log,log,40,ui5/eve7/lib/EveElements.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveElements.js,1,['log'],['log']
Testability,"// Produce a summary from type.test intrinsics. We only summarize type.test; // intrinsics that are used other than by an llvm.assume intrinsic.; // Intrinsics that are assumed are relevant only to the devirtualization; // pass, not the type test lowering pass.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ModuleSummaryAnalysis.cpp:31,test,test,31,interpreter/llvm-project/llvm/lib/Analysis/ModuleSummaryAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ModuleSummaryAnalysis.cpp,3,['test'],['test']
Testability,"// Produces a GPR sequence for each operand of the binary logic operation.; // For SETCC, it produces the respective comparison, for TRUNCATE it truncates; // the value in a GPR and for logic operations, it will recursively produce; // a GPR sequence for the operation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:58,log,logic,58,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,2,['log'],['logic']
Testability,"// Produces a human readable description of a CO-RE relocation.; // Such relocations are generated by BPF backend, and processed; // by libbpf's BPF program loader [1].; //; // Each relocation record has the following information:; // - Relocation kind;; // - BTF type ID;; // - Access string offset in string table.; //; // There are different kinds of relocations, these kinds could be split; // in three groups:; // - load-time information about types (size, existence),; // `BTFParser::symbolize()` output for such relocations uses the template:; //; // <relocation-kind> [<id>] <type-name>; //; // For example:; // - ""<type_exists> [7] struct foo""; // - ""<type_size> [7] struct foo""; //; // - load-time information about enums (literal existence, literal value),; // `BTFParser::symbolize()` output for such relocations uses the template:; //; // <relocation-kind> [<id>] <type-name>::<literal-name> = <original-value>; //; // For example:; // - ""<enumval_exists> [5] enum foo::U = 1""; // - ""<enumval_value> [5] enum foo::V = 2""; //; // - load-time information about fields (e.g. field offset),; // `BTFParser::symbolize()` output for such relocations uses the template:; //; // <relocation-kind> [<id>] \; // <type-name>::[N].<field-1-name>...<field-M-name> \; // (<access string>); //; // For example:; // - ""<byte_off> [8] struct bar::[7].v (7:1)""; // - ""<field_exists> [8] struct bar::v (0:1)""; //; // If relocation description is not valid output follows the following pattern:; //; // <relocation-kind> <type-id>::<unprocessedaccess-string> <<error-msg>>; //; // For example:; //; // - ""<type_sz> [42] '' <unknown type id: 42>""; // - ""<byte_off> [4] '0:' <field spec too short>""; //; // Additional examples could be found in unit tests, see; // llvm/unittests/DebugInfo/BTF/BTFParserTest.cpp.; //; // [1] https://www.kernel.org/doc/html/latest/bpf/libbpf/index.html",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/BTF/BTFParser.cpp:1741,test,tests,1741,interpreter/llvm-project/llvm/lib/DebugInfo/BTF/BTFParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/BTF/BTFParser.cpp,1,['test'],['tests']
Testability,// ProfAccForSymsInList is used in callsiteIsHot. The assertion makes sure; // Profile symbol list is ignored when profile-sample-accurate is on.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/SampleProfile.cpp:54,assert,assertion,54,interpreter/llvm-project/llvm/lib/Transforms/IPO/SampleProfile.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/SampleProfile.cpp,2,['assert'],['assertion']
Testability,"// Program is loading user32.dll, in the applications we are testing,; // this only happens if an assert has fired. By now the message has; // already been printed, so simply close the program.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp:61,test,testing,61,interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp,2,"['assert', 'test']","['assert', 'testing']"
Testability,"// Program to check a TGeo geometry; // The first time you run this program, the geometry files will be taken; // from http://root.cern/files; //; // How the program works; // If the file <geom_name>_ref.root does not exist, it is generated. The file; // contains a TTree with Npoints (default=100000) obtained with the following; // algorithm:; // -a point is generated with a uniform distribution x,y,z in the master volume; // -a direction theta, phi is generated uniformly in -2pi<phi<2pi and 0<theta<pi; // -gGeoManager finds the geometry path for the point; // -the number of boundaries (nbound), total length (length), safety distance; // from the starting point (safe) and number of radiation lengths (rad) from x,y,z; // is calculated to the exit of the detector. The total number of crossings, detector; // weight and total number of radiation lengths for all tracks are stored as user info in the tree.; //; // Using the file <geom_name>_ref.root (generated typically with a previous version; // of the TGeo classes), the Npoints in the Tree are used to perform the; // same operation with the new version.; // In case of a disagreement, an error message is reported.; //; // The ReadRef case is also used as a benchmark; // The ROOTMARKS reported are relative to a Linux/P IV 2.8 GHz gcc3.2.3 machine; // normalized at 800 ROOTMARKS when running with CINT.; //; // To run this script, do; // stressGeometry; // or stressGeometry *; // or stressGeometry alice; // or from the ROOT command line; // root > .L stressGeometry.cxx or .L stressGeometry.cxx+; // root > stressGeometry(exp_name); // where exp_name is the geometry file name without .root; // OR simply: stressGeometry(); to run tests for a set of geometries; //; // Authors: Rene Brun, Andrei Gheata, 22 march 2005",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGeometry.cxx:1222,benchmark,benchmark,1222,test/stressGeometry.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGeometry.cxx,2,"['benchmark', 'test']","['benchmark', 'tests']"
Testability,// Property accessor stubs sometimes do not correspond to any property decl; // in the current interface (but in a superclass). They still have a; // corresponding property impl decl in this case.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/BodyFarm.cpp:21,stub,stubs,21,interpreter/llvm-project/clang/lib/Analysis/BodyFarm.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/BodyFarm.cpp,1,['stub'],['stubs']
Testability,"// Prototype trigger simulation for the LHCb experiment; // This test nested loops with the interpreter.; // Expected to run fast with the compiler, slow with the interpreter.; // This code is extracted from an original macro by Hans Dijkstra (LHCb); // The program generates histograms and profile histograms.; // A canvas with subpads containing the results is sent to Postscript.; // We check graphics results by counting the number of lines in the ps file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:65,test,test,65,test/stress.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx,1,['test'],['test']
Testability,"// Provide a way to get a ""cast"" where the cast opcode is inferred from the; // types and size of the operand. This, basically, is a parallel of the; // logic in the castIsValid function below. This axiom should hold:; // castIsValid( getCastOpcode(Val, Ty), Val, Ty); // should not assert in castIsValid. In other words, this produces a ""correct""; // casting opcode for the arguments passed to it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Instructions.cpp:153,log,logic,153,interpreter/llvm-project/llvm/lib/IR/Instructions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Instructions.cpp,2,"['assert', 'log']","['assert', 'logic']"
Testability,// Pseudo code for the test:; // if (!(GuardVar & MyGuardBit)) {; // GuardVar |= MyGuardBit;; // ... initialize the object ...;; // }; // Test our bit from the guard variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:23,test,test,23,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,2,"['Test', 'test']","['Test', 'test']"
Testability,// Pseudo code for the test:; // if (TSS > _Init_thread_epoch) {; // _Init_thread_header(&TSS);; // if (TSS == -1) {; // ... initialize the object ...;; // _Init_thread_footer(&TSS);; // }; // }; //; // The algorithm is almost identical to what can be found in the appendix; // found in N2325.; // This BasicBLock determines whether or not we have any work to do.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:23,test,test,23,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,1,['test'],['test']
Testability,"// Publish sandbox nodes in directory and/or CINT if requested",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooWorkspace.cxx:11,sandbox,sandbox,11,roofit/roofitcore/src/RooWorkspace.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooWorkspace.cxx,1,['sandbox'],['sandbox']
Testability,"// Purge logical's DLs",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx:9,log,logical,9,graf3d/gl/src/TGLScene.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx,1,['log'],['logical']
Testability,"// Purposely do not test on the name!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TBranchProxyClassDescriptor.cxx:20,test,test,20,tree/treeplayer/src/TBranchProxyClassDescriptor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TBranchProxyClassDescriptor.cxx,1,['test'],['test']
Testability,// Push this test onto the chain of range checks (which terminates; // in the default basic block). The switch's default will be changed; // to the top of this chain after switch emission is complete.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:13,test,test,13,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,1,['test'],['test']
Testability,"// PyROOT needs to know whether a ctor is a template, see clingwrapper.cxx:; // > // don't give in just yet, but rather get the full name through the symbol name,; // > // as eg. constructors do not receive their proper/full name from GetName().; // Also test ""can we instantiate this function without extra type info""; // (see `Templates::MyMethods`).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/test/TClingMethodInfoTests.cxx:255,test,test,255,core/metacling/test/TClingMethodInfoTests.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/test/TClingMethodInfoTests.cxx,1,['test'],['test']
Testability,"// Quick check if instructions MI and MJ cannot coexist in the same packet.; // Limit the tests to be ""one-way"", e.g. ""if MI->isBranch and MJ->isInlineAsm"",; // but not the symmetric case: ""if MJ->isBranch and MI->isInlineAsm"".; // For full test call this function twice:; // cannotCoexistAsymm(MI, MJ) || cannotCoexistAsymm(MJ, MI); // Doing the test only one way saves the amount of code in this function,; // since every test would need to be repeated with the MI and MJ reversed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVLIWPacketizer.cpp:90,test,tests,90,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVLIWPacketizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVLIWPacketizer.cpp,4,['test'],"['test', 'tests']"
Testability,"// Quick check whether the def has already been encountered in the same block.; // PHI nodes are not checked to prevent accepting preceding PHIs, because PHI; // uses are defined to happen on the incoming edge, not at the instruction.; //; // FIXME: If this operand is a MetadataAsValue (wrapping a LocalAsMetadata); // wrapping an SSA value, assert that we've already encountered it. See; // related FIXME in Mapper::mapLocalAsMetadata in ValueMapper.cpp.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp:343,assert,assert,343,interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,1,['assert'],['assert']
Testability,"// R = carry_bit ? ~0 : 0; /// M68k conditional moves. Operand 0 and operand 1 are the two values; /// to select from. Operand 2 is the condition code, and operand 3 is the; /// flag operand produced by a CMP or TEST instruction. It also writes a; /// flag result.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.h:212,TEST,TEST,212,interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.h,1,['TEST'],['TEST']
Testability,"// R13 is reserved as Thread Pointer, we won't use threading in benchmark, so; // use it as scratch memory register",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PowerPC/Target.cpp:64,benchmark,benchmark,64,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PowerPC/Target.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PowerPC/Target.cpp,1,['benchmark'],['benchmark']
Testability,"// RAX contains the number of bytes of desired stack adjustment.; // The handling here assumes this value has already been updated so as to; // maintain stack alignment.; //; // We need to exit with RSP modified by this amount and execute suitable; // page touches to notify the OS that we're growing the stack responsibly.; // All stack probing must be done without modifying RSP.; //; // MBB:; // SizeReg = RAX;; // ZeroReg = 0; // CopyReg = RSP; // Flags, TestReg = CopyReg - SizeReg; // FinalReg = !Flags.Ovf ? TestReg : ZeroReg; // LimitReg = gs magic thread env access; // if FinalReg >= LimitReg goto ContinueMBB; // RoundBB:; // RoundReg = page address of FinalReg; // LoopMBB:; // LoopReg = PHI(LimitReg,ProbeReg); // ProbeReg = LoopReg - PageSize; // [ProbeReg] = 0; // if (ProbeReg > RoundReg) goto LoopMBB; // ContinueMBB:; // RSP = RSP - RAX; // [rest of original MBB]; // Set up the new basic blocks",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FrameLowering.cpp:459,Test,TestReg,459,interpreter/llvm-project/llvm/lib/Target/X86/X86FrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FrameLowering.cpp,2,['Test'],['TestReg']
Testability,"// RColumnElement concrete implementations; //; // Note that this file is in the src directory and not in the inc directory because we need the ability; // to override R__LITTLE_ENDIAN for testing purposes.; // This is not a particularly clean or correct solution, as the tests that do this will end up with two different; // definitions of some RColumnElements, so we might want to change this mechanism in the future. In any case, these; // definitions are implementation details and should not be exposed to a public interface.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RColumnElement.hxx:189,test,testing,189,tree/ntuple/v7/src/RColumnElement.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RColumnElement.hxx,2,['test'],"['testing', 'tests']"
Testability,"// RHist::Fill for 2D; // Test Fill() without weight and GetEntries()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/fill.cxx:26,Test,Test,26,hist/histv7/test/fill.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/fill.cxx,1,['Test'],['Test']
Testability,"// RHist::Fill for 3D; // Test Fill() without weight and GetEntries()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/fill.cxx:26,Test,Test,26,hist/histv7/test/fill.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/fill.cxx,1,['Test'],['Test']
Testability,"// ROOT test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/stressKalman.cxx:8,test,test,8,math/smatrix/test/stressKalman.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/stressKalman.cxx,3,['test'],['test']
Testability,// ROOT testing end; /* testing code for ROOT from CERN */; /*************************************/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/draw.c:8,test,testing,8,graf2d/asimage/src/libAfterImage/draw.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/libAfterImage/draw.c,2,['test'],['testing']
Testability,"// RVec does not guarantee exception safety, but we still want to test; // that we don't segfault or otherwise crash if element construction or move throws.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/vecops/test/vecops_rvec.cxx:66,test,test,66,math/vecops/test/vecops_rvec.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/vecops/test/vecops_rvec.cxx,1,['test'],['test']
Testability,"// R__USE_IMT; // Test for https://github.com/root-project/root/issues/6741",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_friends.cxx:18,Test,Test,18,tree/dataframe/test/dataframe_friends.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_friends.cxx,1,['Test'],['Test']
Testability,"// R__USE_IMT; // test if buffer has really been compressed. In case of small buffers; // when the buffer contains random data, it may happen that the compressed; // buffer is larger than the input. In this case, we write the original uncompressed buffer",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBasket.cxx:18,test,test,18,tree/tree/src/TBasket.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBasket.cxx,1,['test'],['test']
Testability,"// Rather than do make check tests with huge amounts of code, we force; // the test to use this amount.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsConstantIslandPass.cpp:29,test,tests,29,interpreter/llvm-project/llvm/lib/Target/Mips/MipsConstantIslandPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsConstantIslandPass.cpp,2,['test'],"['test', 'tests']"
Testability,// Rd = #u6; // Do not test for #u6 size since the const is getting extended; // regardless and compound could be formed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp:23,test,test,23,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,1,['test'],['test']
Testability,// Rd = #u6; // Do not test for #u6 size since the const is getting extended; // regardless and compound could be formed.; // Rd = #-1,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp:23,test,test,23,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,1,['test'],['test']
Testability,"// Re-check locality: if the logged user name is different from the local one, we may; // not have all the rights we need, so we go no-local",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:29,log,logged,29,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['log'],['logged']
Testability,"// Re-disable, we just meant to test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:32,test,test,32,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,1,['test'],['test']
Testability,// Re-evaluate an SVal with top-level `State->assume` logic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp:54,log,logic,54,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp,1,['log'],['logic']
Testability,"// Re-position at the beginning of the file, if requested.; // This is used by the dialog when it re-opens the log window to; // provide all the session messages",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:111,log,log,111,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['log'],['log']
Testability,"// Read a simple v6.20 workspace to test proxy schema evolution",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testProxiesAndCategories.cxx:36,test,test,36,roofit/roofitcore/test/testProxiesAndCategories.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testProxiesAndCategories.cxx,1,['test'],['test']
Testability,// Read benchmarks.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/llvm-exegesis.cpp:8,benchmark,benchmarks,8,interpreter/llvm-project/llvm/tools/llvm-exegesis/llvm-exegesis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/llvm-exegesis.cpp,1,['benchmark'],['benchmarks']
Testability,// Read the series of integer operands back as a null-terminated string using; // the reverse of the logic in addStringImm.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVUtils.h:101,log,logic,101,interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVUtils.h,1,['log'],['logic']
Testability,"// Reader tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:10,test,tests,10,tmva/tmva/test/stressTMVA.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx,1,['test'],['tests']
Testability,"// Reading a validation counter will only return a single value, so it is; // safe to only append the first value here. Also assert that this is true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.cpp:125,assert,assert,125,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/PerfHelper.cpp,1,['assert'],['assert']
Testability,"// Real host name and full path to remote log",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TApplicationRemote.cxx:42,log,log,42,net/net/src/TApplicationRemote.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TApplicationRemote.cxx,1,['log'],['log']
Testability,"// Real time used by the test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:25,test,test,25,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['test'],['test']
Testability,"// Real-life test: calculate a NLL using event-based parallelization. This; // should replicate RooRealMPFE results.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooRealL.cxx:13,test,test,13,roofit/roofitcore/test/TestStatistics/testRooRealL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooRealL.cxx,1,['test'],['test']
Testability,// Rearrange the names to make it easier to write test cases by having the; // exit block carry the suffix rather than the merge block carrying the; // suffix.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp:50,test,test,50,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,1,['test'],['test']
Testability,"// Rebuilds can potentially invalidate all logical and; // physical shapes.; // Physicals must be removed first.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScenePad.cxx:43,log,logical,43,graf3d/gl/src/TGLScenePad.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScenePad.cxx,1,['log'],['logical']
Testability,"// Receive username used for login",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:29,log,login,29,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,1,['log'],['login']
Testability,// Recognize a special case where a vector is casted into wide integer to; // test all 0s.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:78,test,test,78,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['test'],['test']
Testability,"// Recognize loops where the code at the end of the loop matches the code; // before the entry of the loop, and the matching code is such that is can; // be simplified. This pass relies on the bit simplification above and only; // prepares code in a way that can be handled by the bit simplifcation.; //; // This is the motivating testcase (and explanation):; //; // {; // loop0(.LBB0_2, r1) // %for.body.preheader; // r5:4 = memd(r0++#8); // }; // {; // r3 = lsr(r4, #16); // r7:6 = combine(r5, r5); // }; // {; // r3 = insert(r5, #16, #16); // r7:6 = vlsrw(r7:6, #16); // }; // .LBB0_2:; // {; // memh(r2+#4) = r5; // memh(r2+#6) = r6 # R6 is really R5.H; // }; // {; // r2 = add(r2, #8); // memh(r2+#0) = r4; // memh(r2+#2) = r3 # R3 is really R4.H; // }; // {; // r5:4 = memd(r0++#8); // }; // { # ""Shuffling"" code that sets up R3 and R6; // r3 = lsr(r4, #16) # so that their halves can be stored in the; // r7:6 = combine(r5, r5) # next iteration. This could be folded into; // } # the stores if the code was at the beginning; // { # of the loop iteration. Since the same code; // r3 = insert(r5, #16, #16) # precedes the loop, it can actually be moved; // r7:6 = vlsrw(r7:6, #16) # there.; // }:endloop0; //; //; // The outcome:; //; // {; // loop0(.LBB0_2, r1); // r5:4 = memd(r0++#8); // }; // .LBB0_2:; // {; // memh(r2+#4) = r5; // memh(r2+#6) = r5.h; // }; // {; // r2 = add(r2, #8); // memh(r2+#0) = r4; // memh(r2+#2) = r4.h; // }; // {; // r5:4 = memd(r0++#8); // }:endloop0",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitSimplify.cpp:331,test,testcase,331,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitSimplify.cpp,1,['test'],['testcase']
Testability,"// Recombination of data (making sure there is data in training and testing trees).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossValidation.cxx:68,test,testing,68,tmva/tmva/src/CrossValidation.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossValidation.cxx,1,['test'],['testing']
Testability,// Reconstruct the BUILDVECTOR to one of the legal shuffles (such as vext and; // vmovn). Empirical tests suggest this is rarely worth it for vectors of; // length <= 2.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:100,test,tests,100,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['test'],['tests']
Testability,"// Record Test vectors, executed vectors, and independence pairs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:10,Test,Test,10,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,1,['Test'],['Test']
Testability,"// Record current position in the log file at start",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLite.cxx:34,log,log,34,proof/proof/src/TProofLite.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLite.cxx,2,['log'],['log']
Testability,// Record the fact that the IR edge from the header to the bit test target; // will go through our new block. Neeeded for PHIs to have nodes added.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp:63,test,test,63,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp,1,['test'],['test']
Testability,"// Record the steps to build the new instructions.; //; // Steps to build (logic x, y)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp:75,log,logic,75,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,1,['log'],['logic']
Testability,"// Redirect logs from master to special log frame",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx:12,log,logs,12,proof/proofplayer/src/TProofPlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx,4,['log'],"['log', 'logs']"
Testability,"// Redo the test in case we have been victim of a data race on fIsCompiled.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferFile.cxx:12,test,test,12,io/io/src/TBufferFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferFile.cxx,2,['test'],['test']
Testability,// Reduce add-carry of bools to logic:; // ((zext BoolX) + (zext BoolY)) >> 1 --> zext (BoolX && BoolY),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp:32,log,logic,32,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp,1,['log'],['logic']
Testability,// Reduce the number of cr-logical ops.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCTargetMachine.cpp:27,log,logical,27,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCTargetMachine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCTargetMachine.cpp,1,['log'],['logical']
Testability,"// Regarding this assert: Even though LR is saved in the caller's frame (i.e.,; // LROffset is positive), that slot is callee-owned. Because PPC32 SVR4 has no; // Red Zone, an asynchronous event (a form of ""callee"") could claim a frame &; // overwrite it, so PPC32 SVR4 must claim at least a minimal frame to save LR.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFrameLowering.cpp:18,assert,assert,18,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFrameLowering.cpp,1,['assert'],['assert']
Testability,// Register allocator stress test. Clip register class to N registers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterClassInfo.cpp:29,test,test,29,interpreter/llvm-project/llvm/lib/CodeGen/RegisterClassInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterClassInfo.cpp,1,['test'],['test']
Testability,// Register testSetjmp function,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp:12,test,testSetjmp,12,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,1,['test'],['testSetjmp']
Testability,// Register the LTOCodeGenerator stub in the LLVMContext to forward the; // diagnostic to the external DiagHandler.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/LTOCodeGenerator.cpp:33,stub,stub,33,interpreter/llvm-project/llvm/lib/LTO/LTOCodeGenerator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/LTOCodeGenerator.cpp,1,['stub'],['stub']
Testability,"// Register the additional worker log in the session file; // (for the master this is done automatically)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:34,log,log,34,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['log'],['log']
Testability,"// Register the address in TCling::fgSetOfSpecials; // to speed-up the execution of TCling::RecursiveRemove when; // the object is not a special.; // See http://root.cern.ch/viewvc/trunk/core/meta/src/TCint.cxx?view=log#rev18109",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingCallbacks.cxx:216,log,log,216,core/metacling/src/TClingCallbacks.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingCallbacks.cxx,1,['log'],['log']
Testability,"// Register the training and test trees",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLOptimization.h:29,test,test,29,tmva/tmva/test/DNN/TestMethodDLOptimization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMethodDLOptimization.h,1,['test'],['test']
Testability,"// RegisterMapping objects are mainly used to track physical register; // definitions and resolve data dependencies.; //; // Every register declared by the Target is associated with an instance of; // RegisterMapping. RegisterMapping objects keep track of writes to a logical; // register. That information is used by class RegisterFile to resolve data; // dependencies, and correctly set latencies for register uses.; //; // This implementation does not allow overlapping register files. The only; // register file that is allowed to overlap with other register files is; // register file #0. If we exclude register #0, every register is ""owned"" by; // at most one register file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h:268,log,logical,268,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h,1,['log'],['logical']
Testability,"// Regression test for https://github.com/root-project/root/issues/12043",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_definepersample.cxx:14,test,test,14,tree/dataframe/test/dataframe_definepersample.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_definepersample.cxx,1,['test'],['test']
Testability,"// Regression test for https://github.com/root-project/root/issues/6993",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/test/regressions.cxx:14,test,test,14,tree/treeplayer/test/regressions.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/test/regressions.cxx,1,['test'],['test']
Testability,// Regular modules are greedy: They materialize as a whole and trigger; // materialization for all required symbols recursively. Lazy modules go; // through partitioning and they replace outgoing calls with reexport stubs; // that resolve on call-through.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/lli/lli.cpp:216,stub,stubs,216,interpreter/llvm-project/llvm/tools/lli/lli.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/lli/lli.cpp,1,['stub'],['stubs']
Testability,// Regular single-stub match,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:18,stub,stub,18,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,1,['stub'],['stub']
Testability,"// Reject 'typedef int y; int test(x, y)', but continue parsing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp:30,test,test,30,interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,1,['test'],['test']
Testability,// Reject constants that would be truncated if they were converted to; // the floating point type. Test by simple to/from conversion.; // FIXME: Ideally the conversion to an APFloat and from an APFloat; // could be avoided if there was a convertFromAPInt method; // which could signal back if implicit truncation occurred.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:99,Test,Test,99,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['Test'],['Test']
Testability,"// Remember the phi nodes originally in the header of FC0 in order to rewire; // them later. However, this is only necessary if the new loop carried; // values might not dominate the exiting branch. While we do not generally; // test if this is the case but simply insert intermediate phi nodes, we; // need to make sure these intermediate phi nodes have different; // predecessors. To this end, we filter the special case where the exiting; // block is the latch block of the first loop. Nothing needs to be done; // anyway as all loop carried values dominate the latch and thereby also the; // exiting branch.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp:229,test,test,229,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp,1,['test'],['test']
Testability,"// Remember the phi nodes originally in the header of FC0 in order to rewire; // them later. However, this is only necessary if the new loop carried; // values might not dominate the exiting branch. While we do not generally; // test if this is the case but simply insert intermediate phi nodes, we; // need to make sure these intermediate phi nodes have different; // predecessors. To this end, we filter the special case where the exiting; // block is the latch block of the first loop. Nothing needs to be done; // anyway as all loop carried values dominate the latch and thereby also the; // exiting branch.; // KB: This is no longer necessary because FC0.ExitingBlock == FC0.Latch; // (because the loops are rotated. Thus, nothing will ever be added to; // OriginalFC0PHIs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp:229,test,test,229,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp,1,['test'],['test']
Testability,// Remember this state to assert later that a non-infinite register; // option was available.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegAllocPBQP.h:26,assert,assert,26,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegAllocPBQP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegAllocPBQP.h,1,['assert'],['assert']
Testability,"// Remote login username",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/inc/TSecContext.h:10,log,login,10,net/net/inc/TSecContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/inc/TSecContext.h,1,['log'],['login']
Testability,"// Removal of the address space can mean there are no longer any; // non-fast qualifiers, so creating an ExtQualType isn't possible (asserts); // or required.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:133,assert,asserts,133,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['assert'],['asserts']
Testability,"// Remove all committed objects from the sandbox",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooWorkspace.cxx:41,sandbox,sandbox,41,roofit/roofitcore/src/RooWorkspace.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooWorkspace.cxx,1,['sandbox'],['sandbox']
Testability,"// Remove all logicals that don't survive a refresh.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx:14,log,logicals,14,graf3d/gl/src/TGLScene.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx,1,['log'],['logicals']
Testability,"// Remove log file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:10,log,log,10,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['log'],['log']
Testability,"// Remove log file if not passed by the user",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:10,log,log,10,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['log'],['log']
Testability,// Remove matched base functions for later reporting functions not found; // in test profile.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:80,test,test,80,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,1,['test'],['test']
Testability,"// Remove pending etc decls in case of error; the asserts in StartModule(); // will rightfully be confused otherwise, as none of the decls were; // emitted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ModuleBuilder.cpp:50,assert,asserts,50,interpreter/llvm-project/clang/lib/CodeGen/ModuleBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ModuleBuilder.cpp,1,['assert'],['asserts']
Testability,// Remove the Safe functions from the Test module,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/ExtractFunction.cpp:38,Test,Test,38,interpreter/llvm-project/llvm/tools/bugpoint/ExtractFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/ExtractFunction.cpp,1,['Test'],['Test']
Testability,// Remove the Test functions from the Safe module,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/ExtractFunction.cpp:14,Test,Test,14,interpreter/llvm-project/llvm/tools/bugpoint/ExtractFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/ExtractFunction.cpp,1,['Test'],['Test']
Testability,// Remove the original instruction to avoid potentially confusing the; // waterfall loop logic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp:89,log,logic,89,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp,2,['log'],['logic']
Testability,"// RemoveDIs debug-info transition: tests may request that we /try/ to use the; // new debug-info format, if it's built in.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llc/llc.cpp:36,test,tests,36,interpreter/llvm-project/llvm/tools/llc/llc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llc/llc.cpp,3,['test'],['tests']
Testability,"// Removing declarations when their lifetime ends serves two purposes:; // - Eliminate unnecessary clutter from `Environment::DeclToLoc`; // - Allow us to assert that, when joining two `Environment`s, the two; // `DeclToLoc` maps never contain entries that map the same declaration to; // different storage locations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/TypeErasedDataflowAnalysis.cpp:155,assert,assert,155,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/TypeErasedDataflowAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/TypeErasedDataflowAnalysis.cpp,1,['assert'],['assert']
Testability,"// Renaming would invalidate the old hash map. Test that it gets regenerated correctly:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooAbsCollection.cxx:47,Test,Test,47,roofit/roofitcore/test/testRooAbsCollection.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooAbsCollection.cxx,1,['Test'],['Test']
Testability,"// Reorder operands of bool logical op in the natural order to avoid; // possible problem with poison propagation. If not possible to reorder; // (both operands are originally RHS), emit an extra freeze instruction; // for the LHS operand.; // I.e., if we have original code like this:; // RedOp1 = select i1 ?, i1 LHS, i1 false; // RedOp2 = select i1 RHS, i1 ?, i1 false; // Then, we swap LHS/RHS to create a new op that matches the poison; // semantics of the original code.; // If we have original code like this and both values could be poison:; // RedOp1 = select i1 ?, i1 LHS, i1 false; // RedOp2 = select i1 ?, i1 RHS, i1 false; // Then, we must freeze LHS in the new op.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:28,log,logical,28,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['log'],['logical']
Testability,"// Repeatedly calling lookupPrivateMethod() is expensive, especially; // when in many cases it returns null. We cache the results so; // that repeated queries on the same ObjCIntefaceDecl and Selector; // don't incur the same cost. On some test cases, we can see the; // same query being issued thousands of times.; //; // NOTE: This cache is essentially a ""global"" variable, but it; // only gets lazily created when we get here. The value of the; // cache probably comes from it being global across ExprEngines,; // where the same queries may get issued. If we are worried about; // concurrency, or possibly loading/unloading ASTs, etc., we may; // need to revisit this someday. In terms of memory, this table; // stays around until clang quits, which also may be bad if we; // need to release memory.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/CallEvent.cpp:240,test,test,240,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/CallEvent.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/CallEvent.cpp,1,['test'],['test']
Testability,"// Repeatedly split the edge as necessary.; // This is important for nested logical expressions (||, &&, ?:) where we; // want to show all the levels of context.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporter.cpp:76,log,logical,76,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporter.cpp,1,['log'],['logical']
Testability,// Replace CMP with TEST.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:20,TEST,TEST,20,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,1,['TEST'],['TEST']
Testability,"// Replace calls to LLVM intrinsics (e.g., exp, log) operating on vector; // operands with calls to the corresponding functions in a vector library.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenPassBuilder.h:48,log,log,48,interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenPassBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenPassBuilder.h,1,['log'],['log']
Testability,"// Replace dataset with a clone where the weights are different from unity; // such that the effect of the SumW2Error option is not trivial and we test; // it correctly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:147,test,test,147,roofit/roofitcore/test/testTestStatistics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx,1,['test'],['test']
Testability,// Replace pseudo with a normal load-and-test that models the def as; // well.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp:41,test,test,41,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,1,['test'],['test']
Testability,"// Replace the stub vector node, if it was used before for one of the; // buildvector nodes already.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:15,stub,stub,15,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['stub'],['stub']
Testability,// Report elements that can be printed; ignore logical elements that; // have qualifiers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVCompare.cpp:47,log,logical,47,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVCompare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVCompare.cpp,1,['log'],['logical']
Testability,"// Represents the size of a MemoryLocation. Logically, it's an; // std::optional<uint63_t> that also carries a bit to represent whether the; // integer it contains, N, is 'precise'. Precise, in this context, means that we; // know that the area of storage referenced by the given MemoryLocation must be; // precisely N bytes. An imprecise value is formed as the union of two or more; // precise values, and can conservatively represent all of the values unioned; // into it. Importantly, imprecise values are an *upper-bound* on the size of a; // MemoryLocation.; //; // Concretely, a precise MemoryLocation is (%p, 4) in; // store i32 0, i32* %p; //; // Since we know that %p must be at least 4 bytes large at this point.; // Otherwise, we have UB. An example of an imprecise MemoryLocation is (%p, 4); // at the memcpy in; //; // %n = select i1 %foo, i64 1, i64 4; // call void @llvm.memcpy.p0i8.p0i8.i64(i8* %p, i8* %baz, i64 %n, i32 1,; // i1 false); //; // ...Since we'll copy *up to* 4 bytes into %p, but we can't guarantee that; // we'll ever actually do so.; //; // If asked to represent a pathologically large value, this will degrade to; // std::nullopt.; // Store Scalable information in bit 62 of Value. Scalable information is; // required to do Alias Analysis on Scalable quantities",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryLocation.h:44,Log,Logically,44,interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryLocation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/MemoryLocation.h,1,['Log'],['Logically']
Testability,// Required to avoid conflict with the MachineVerifier during testing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:62,test,testing,62,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['test'],['testing']
Testability,// Reserve registers for the NaCl sandbox.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsRegisterInfo.cpp:34,sandbox,sandbox,34,interpreter/llvm-project/llvm/lib/Target/Mips/MipsRegisterInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsRegisterInfo.cpp,1,['sandbox'],['sandbox']
Testability,// Reserve resources for a constant extender. Trigger an assertion if the; // reservation fails.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVLIWPacketizer.cpp:57,assert,assertion,57,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVLIWPacketizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVLIWPacketizer.cpp,1,['assert'],['assertion']
Testability,// Reserve the base register if we need to both realign the stack and; // allocate variable-sized objects at runtime. This should test the; // same conditions as MipsFrameLowering::hasBP().,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsRegisterInfo.cpp:130,test,test,130,interpreter/llvm-project/llvm/lib/Target/Mips/MipsRegisterInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsRegisterInfo.cpp,1,['test'],['test']
Testability,"// Reserved; // The record count is the number of logical records. In principle, this value; // is available as OS.logicalRecords(). However, some tools rely on this field; // being zero.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/GOFFObjectWriter.cpp:50,log,logical,50,interpreter/llvm-project/llvm/lib/MC/GOFFObjectWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/GOFFObjectWriter.cpp,2,['log'],"['logical', 'logicalRecords']"
Testability,// Reset all node's use counts to zero before deleting them to prevent an; // assertion from firing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/CallGraph.cpp:78,assert,assertion,78,interpreter/llvm-project/llvm/lib/Analysis/CallGraph.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/CallGraph.cpp,1,['assert'],['assertion']
Testability,"// Reset random generator seed to make results independent of test ordering",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooUnitTest.cxx:62,test,test,62,roofit/roofitcore/src/RooUnitTest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooUnitTest.cxx,1,['test'],['test']
Testability,// Reset the NoPHIs property if a PHI was inserted to prevent a conflict with; // the MachineVerifier during testing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86CmovConversion.cpp:109,test,testing,109,interpreter/llvm-project/llvm/lib/Target/X86/X86CmovConversion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86CmovConversion.cpp,1,['test'],['testing']
Testability,"// Resolve and fix an overloaded expression that can be resolved; // because it identifies a single function template specialization.; //; // Last three arguments should only be supplied if Complain = true; //; // Return true if it was logically possible to so resolve the; // expression, regardless of whether or not it succeeded. Always; // returns true if 'complain' is set.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp:236,log,logically,236,interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,1,['log'],['logically']
Testability,// Resolve original relocation to stub function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldCOFFAArch64.h:34,stub,stub,34,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldCOFFAArch64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldCOFFAArch64.h,1,['stub'],['stub']
Testability,// Resolve the assertion expressions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp:15,assert,assertion,15,interpreter/llvm-project/llvm/lib/TableGen/Record.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp,1,['assert'],['assertion']
Testability,"// Rest of the logic is recursive, so if it's time to give up then it's time.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineNegator.cpp:15,log,logic,15,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineNegator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineNegator.cpp,1,['log'],['logic']
Testability,// Restore ScanFrom to expected value in case next test succeeds,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp:51,test,test,51,interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp,1,['test'],['test']
Testability,"// Restore logging option",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:11,log,logging,11,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['log'],['logging']
Testability,"// Restore prompt logging (Collect leaves things as they were; // at the time it was called)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayerLite.cxx:18,log,logging,18,proof/proofplayer/src/TProofPlayerLite.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayerLite.cxx,1,['log'],['logging']
Testability,"// Restore prompt logging, for clients (Collect leaves things as they were; // at the time it was called)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx:18,log,logging,18,proof/proofplayer/src/TProofPlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx,1,['log'],['logging']
Testability,"// Resume the existing benchmark",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:23,benchmark,benchmark,23,core/base/src/TBenchmark.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx,1,['benchmark'],['benchmark']
Testability,// Retrieve the EH Guard slot.; // TODO(etienneb): Get rid of this value and change it for and assertion.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/WinException.cpp:95,assert,assertion,95,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/WinException.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/WinException.cpp,1,['assert'],['assertion']
Testability,"// Return AndOrSETCCFoldKind::{AddAnd, ABS} if its desirable to try and; // optimize LogicOp(SETCC0, SETCC1). An example (what is implemented as of; // writing this) is:; // With C as a power of 2 and C != 0 and C != INT_MIN:; // AddAnd:; // (icmp eq A, C) | (icmp eq A, -C); // -> (icmp eq and(add(A, C), ~(C + C)), 0); // (icmp ne A, C) & (icmp ne A, -C)w; // -> (icmp ne and(add(A, C), ~(C + C)), 0); // ABS:; // (icmp eq A, C) | (icmp eq A, -C); // -> (icmp eq Abs(A), C); // (icmp ne A, C) & (icmp ne A, -C)w; // -> (icmp ne Abs(A), C); //; // @param LogicOp the logic op; // @param SETCC0 the first of the SETCC nodes; // @param SETCC0 the second of the SETCC nodes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:85,Log,LogicOp,85,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,3,"['Log', 'log']","['LogicOp', 'logic']"
Testability,// Return a Comparison that tests the condition-code result of intrinsic; // node Call against constant integer CC using comparison code Cond.; // Opcode is the opcode of the SystemZISD operation for the intrinsic; // and CCValid is the set of possible condition-code results.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp:28,test,tests,28,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,1,['test'],['tests']
Testability,// Return a MachO::segment_command_64 that holds the same values as the passed; // MachO::segment_command. We do that to avoid having to duplicate the logic; // for 32bits and 64bits segments.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dsymutil/MachOUtils.cpp:151,log,logic,151,interpreter/llvm-project/llvm/tools/dsymutil/MachOUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dsymutil/MachOUtils.cpp,1,['log'],['logic']
Testability,"// Return a pathname composed by: parent_path(InputFilename)/filename(From).; // This is useful when a type server (PDB file associated with an object; // file or a precompiled header file) or a DWARF split object have been; // moved from their original location. That is the case when running; // regression tests, where object files are created in one location and; // executed in a different location.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h:309,test,tests,309,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h,1,['test'],['tests']
Testability,// Return a string representation of the operands from startIndex onwards.; // Templated to allow both MachineInstr and MCInst to use the same logic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/MCTargetDesc/SPIRVBaseInfo.h:143,log,logic,143,interpreter/llvm-project/llvm/lib/Target/SPIRV/MCTargetDesc/SPIRVBaseInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/MCTargetDesc/SPIRVBaseInfo.h,1,['log'],['logic']
Testability,"// Return an empty string if input is not a library name.; // Sometimes, libName can be the binary name (i.e. TClingTest, for this test)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/test/TClingTests.cxx:131,test,test,131,core/metacling/test/TClingTests.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/test/TClingTests.cxx,1,['test'],['test']
Testability,"// Return false for unknwon values - this implements a non-strict mode where; // unhandled IR constructs are simply considered to never produce poison. At; // some point in the future, we probably want a ""strict mode"" for testing if; // nothing else.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PoisonChecking.cpp:222,test,testing,222,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PoisonChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PoisonChecking.cpp,1,['test'],['testing']
Testability,"// Return false if the node has no operands.; // This is ""logically inconsistent"" with the definition of ""all"" but; // is probably the desired behavior.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:58,log,logically,58,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,1,['log'],['logically']
Testability,"// Return kTRUE if box has zero diagonal - kFALSE otherwise; // TODO: Round errors - should have epsilon test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLBoundingBox.h:105,test,test,105,graf3d/gl/inc/TGLBoundingBox.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLBoundingBox.h,1,['test'],['test']
Testability,"// Return test statistic operation mode of this instance (SimMaster, MPMaster or Slave)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h:10,test,test,10,roofit/roofitcore/src/RooAbsTestStatistic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h,1,['test'],['test']
Testability,// Return the 'text' section with the code for this logical scope.; // COFF: SectionIndex is zero. Use 'SectionAddresses' data.; // ELF: SectionIndex is the section index in the file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVBinaryReader.cpp:52,log,logical,52,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVBinaryReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVBinaryReader.cpp,1,['log'],['logical']
Testability,"// Return the logical operation, or abort if none exists.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVInstructionSelector.cpp:14,log,logical,14,interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVInstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVInstructionSelector.cpp,1,['log'],['logical']
Testability,// Return the number of logical bits of the extendable operand,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCInstrInfo.h:24,log,logical,24,interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCInstrInfo.h,1,['log'],['logical']
Testability,"// Return the source register of Compare, which is the unknown value; // being tested.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZElimCompare.cpp:79,test,tested,79,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZElimCompare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZElimCompare.cpp,1,['test'],['tested']
Testability,"// Return true if Load and Store are loads and stores of the same size; // and are guaranteed not to overlap. Such operations can be implemented; // using block (SS-format) instructions.; //; // Partial overlap would lead to incorrect code, since the block operations; // are logically bytewise, even though they have a fast path for the; // non-overlapping case. We also need to avoid full overlap (i.e. two; // addresses that might be equal at run time) because although that case; // would be handled correctly, it might be implemented by millicode.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp:276,log,logically,276,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp,1,['log'],['logically']
Testability,"// Return true if delete changes/poisons/taints the memory.; //; // Detect whether operator delete taints the memory. If it does, we can not rely; // on TestBit(kNotDeleted) to check if the memory has been deleted (but in case,; // like TClonesArray, where we know the destructor will be called but not operator; // delete, we can still use it to detect the cases where the destructor was called.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:153,Test,TestBit,153,core/base/src/TObject.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx,1,['Test'],['TestBit']
Testability,// Return true if the relocation R may require allocating a stub.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldImpl.h:60,stub,stub,60,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldImpl.h,1,['stub'],['stub']
Testability,// Return true if this is a load and test which can be optimized the; // same way as compare instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZElimCompare.cpp:37,test,test,37,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZElimCompare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZElimCompare.cpp,1,['test'],['test']
Testability,// Return true if this type is one which a) is a gc pointer or contains a GC; // pointer and b) is of a type this code expects to encounter as a live value.; // (The insertion code will assert that a type which matches (a) and not (b); // is not encountered.),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp:186,assert,assert,186,interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,1,['assert'],['assert']
Testability,// Return true if we can get a new shuffle mask by checking the parameter mask; // array to test whether every two adjacent mask values are continuous and; // starting from an even number.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:92,test,test,92,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['test'],['test']
Testability,// ReturnValue should be valid as long as the coroutine's return type; // is not void. The assertion could help us to reduce the check later.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp:91,assert,assertion,91,interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp,1,['assert'],['assertion']
Testability,"// Returns a pointer to the new scope, so that the caller can pass it back; // to PopScope which will check by assertion that the pushes and pops; // match up properly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.h:111,assert,assertion,111,interpreter/llvm-project/llvm/lib/TableGen/TGParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.h,1,['assert'],['assertion']
Testability,// Returns a storage location that we can use if assertions fail.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/DataflowEnvironment.cpp:49,assert,assertions,49,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/DataflowEnvironment.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/DataflowEnvironment.cpp,1,['assert'],['assertions']
Testability,"// Returns false if further emission of this log entry should be suppressed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/src/RLogger.cxx:45,log,log,45,core/foundation/src/RLogger.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/src/RLogger.cxx,1,['log'],['log']
Testability,// Returns kernel handle for HIP kernel stub function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:40,stub,stub,40,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,1,['stub'],['stub']
Testability,"// Returns ranges only for binary comparison operators (except <=>); // when left and right operands are symbolic values.; // Finds any other comparisons with the same operands.; // Then do logical calculations and refuse impossible branches.; // E.g. (x < y) and (x > y) at the same time are impossible.; // E.g. (x >= y) and (x != y) at the same time makes (x > y) true only.; // E.g. (x == y) and (y == x) are just reversed but the same.; // It covers all possible combinations (see CmpOpTable description).; // Note that `x` and `y` can also stand for subexpressions,; // not only for actual symbols.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp:190,log,logical,190,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp,1,['log'],['logical']
Testability,"// Returns replace operands for a logical operation, either single result; // for exec or two operands if source was another equivalent operation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SILowerControlFlow.cpp:34,log,logical,34,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SILowerControlFlow.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SILowerControlFlow.cpp,1,['log'],['logical']
Testability,"// Returns the condition the branch at the end of 'B' depends on and whose value; // has been evaluated within 'B'.; // In most cases, the terminator condition of 'B' will be evaluated fully in; // the last statement of 'B'; in those cases, the resolved condition is the; // given 'Condition'.; // If the condition of the branch is a logical binary operator tree, the CFG is; // optimized: in that case, we know that the expression formed by all but the; // rightmost leaf of the logical binary operator tree must be true, and thus; // the branch condition is at this point equivalent to the truth value of that; // rightmost leaf; the CFG block thus only evaluates this rightmost leaf; // expression in its final statement. As the full condition in that case was; // not evaluated, and is thus not in the SVal cache, we need to use that leaf; // expression to evaluate the truth value of the condition in the current state; // space.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp:334,log,logical,334,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp,2,['log'],['logical']
Testability,"// Returns the register pointing to scratch memory, or 0 if this target; // does not support memory operands. The benchmark function uses the; // default calling convention.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h:114,benchmark,benchmark,114,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h,1,['benchmark'],['benchmark']
Testability,"// Returns the standard expected CSEConfig for the given optimization level.; // We have this logic here so targets can make use of it from their derived; // TargetPassConfig, but can't put this logic into TargetPassConfig directly; // because the CodeGen library can't depend on GlobalISel.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h:94,log,logic,94,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h,2,['log'],['logic']
Testability,// Returns true if current element is logically equal to the given 'Element'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h:38,log,logically,38,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h,1,['log'],['logically']
Testability,// Returns true if current line is logically equal to the given 'Line'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h:35,log,logically,35,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h,3,['log'],['logically']
Testability,// Returns true if current scope is logically equal to the given 'Scope'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:36,log,logically,36,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,12,['log'],['logically']
Testability,// Returns true if current type is logically equal to the given 'Symbol'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSymbol.h:35,log,logically,35,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSymbol.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSymbol.h,1,['log'],['logically']
Testability,// Returns true if current type is logically equal to the given 'Type'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h:35,log,logically,35,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h,6,['log'],['logically']
Testability,// Returns true if the dispatch logic couldn't dispatch a full group due to; // unavailable scheduler and/or LS resources.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h:32,log,logic,32,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/Scheduler.h,1,['log'],['logic']
Testability,// Returns true if the given 'References' are logically equal to the; // given 'Targets'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h:46,log,logically,46,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h,4,['log'],['logically']
Testability,// Returns true if the pool entry's ref count is above zero (or if the entry; // is an empty or tombstone value). Useful for debugging and testing -- this; // method can be used to identify SymbolStringPtrs and; // NonOwningSymbolStringPtrs that are pointing to abandoned pool entries.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SymbolStringPool.h:139,test,testing,139,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SymbolStringPool.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/SymbolStringPool.h,1,['test'],['testing']
Testability,// Returns true if this is a type which a) is a gc pointer or contains a GC; // pointer and b) is of a type which the code doesn't expect (i.e. first class; // aggregates). Used to trip assertions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp:186,assert,assertions,186,interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,1,['assert'],['assertions']
Testability,// Reuse the iteration variable created by checkOpenMPLoop. It is also; // used by the expressions to derive the original iteration variable's; // value from the logical iteration number.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:162,log,logical,162,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['log'],['logical']
Testability,"// Reverse offloading is not supported, so just execute on the host.; // FIXME: This fallback solution is incorrect since it ignores the; // OMP_TARGET_OFFLOAD environment variable. Instead it would be better to; // assert here and ensure SEMA emits an error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:216,assert,assert,216,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,1,['assert'],['assert']
Testability,// Reverse the X86InstrInfo::setExecutionDomainCustom EVEX->VEX logic; // conversion to see if we can convert to a broadcasted (integer) logic op.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FixupVectorConstants.cpp:64,log,logic,64,interpreter/llvm-project/llvm/lib/Target/X86/X86FixupVectorConstants.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FixupVectorConstants.cpp,2,['log'],['logic']
Testability,"// Review the constraints, looking for opportunities; // to simplify a subscript pair (Src and Dst).; // Return true if some simplification occurs.; // If the simplification isn't exact (that is, if it is conservative; // in terms of dependence), set consistent to false.; // Corresponds to Figure 5 from the paper; //; // Practical Dependence Testing; // Goff, Kennedy, Tseng; // PLDI 1991",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:344,Test,Testing,344,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,1,['Test'],['Testing']
Testability,"// Rewrite the CMov to use the !ZF flag from the test, and then kill its use; // of the flags afterward.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp:49,test,test,49,interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp,1,['test'],['test']
Testability,// Rewrite the CMov to use the !ZF flag from the test.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp:49,test,test,49,interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp,1,['test'],['test']
Testability,"// Rewrite the jump to use the !ZF flag from the test, and kill its use of; // flags afterward.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp:49,test,test,49,interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp,1,['test'],['test']
Testability,"// Right icon (logo)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/GTitleFrame.h:15,log,logo,15,test/RootShower/GTitleFrame.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/GTitleFrame.h,2,['log'],['logo']
Testability,"// Right logo layout",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/GTitleFrame.h:9,log,logo,9,test/RootShower/GTitleFrame.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/GTitleFrame.h,1,['log'],['logo']
Testability,// Right now we always allocate spill slots that are of the same; // size as the value we're about to spill (the size of spillee can; // vary since we spill vectors of pointers too). At some point we; // can consider allowing spills of smaller values to larger slots; // (i.e. change the '==' in the assert below to a '>=').,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:300,assert,assert,300,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,1,['assert'],['assert']
Testability,"// Right now, we use a simple heuristic. If MBB2 ends with a call, and; // MBB1 doesn't, we prefer to fall through into MBB1. This allows us to; // optimize branches that branch to either a return block or an assert block; // into a fallthrough to the return.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/BranchFolding.cpp:209,assert,assert,209,interpreter/llvm-project/llvm/lib/CodeGen/BranchFolding.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/BranchFolding.cpp,1,['assert'],['assert']
Testability,// Right-shifting everything out but the sign bit followed by negation is; // the same as flipping arithmetic/logical shift type without the negation:; // -(X >>u 31) -> (X >>s 31); // -(X >>s 31) -> (X >>u 31),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:110,log,logical,110,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['log'],['logical']
Testability,"// RooArgSet * varSet = f.getVariables();; // RooArgList varList(*varSet);; // delete varSet;; // RooAbsArg & arg = varList[0];; // RooRealVar * vars = dynamic_cast<RooRealVar * > (&arg);; // assert(x != 0);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx:192,assert,assert,192,math/mathmore/test/testFunctor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx,1,['assert'],['assert']
Testability,// Run a second time to clean up any type tests left behind by WPD for use; // in ICP (which is performed earlier than this in the regular LTO pipeline).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:42,test,tests,42,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,1,['test'],['tests']
Testability,// Run a second time to clean up any type tests left behind by WPD for use; // in ICP (which is performed earlier than this in the regular LTO; // pipeline).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:42,test,tests,42,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,1,['test'],['tests']
Testability,// Run a second time to clean up any type tests left behind by WPD for use; // in ICP.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:42,test,tests,42,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,2,['test'],['tests']
Testability,"// Run hypothesis test(s) on the given pdf; // Uses hypoPoint binning on model parameters to determine points to scan; // if hypoPoint binning has nBins==0 then will auto-scan (assumes CL=95%, can override with setStringAttribute); // TODO: specifying number of null and alt toys per point",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooFit.h:18,test,test,18,roofit/xroofit/inc/RooFit/xRooFit/xRooFit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooFit.h,1,['test'],['test']
Testability,// Run passes which we need to test; //,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/llvm-opt-fuzzer.cpp:31,test,test,31,interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/llvm-opt-fuzzer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-opt-fuzzer/llvm-opt-fuzzer.cpp,1,['test'],['test']
Testability,// Run test,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:7,test,test,7,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,1,['test'],['test']
Testability,// Run test for each argument whose value is the exception; // type to throw.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp:7,test,test,7,interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/ExceptionDemo/ExceptionDemo.cpp,1,['test'],['test']
Testability,"// Run the RooUnitTest and assert that it succeeds with gtest",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testPlot.cxx:27,assert,assert,27,roofit/roofitcore/test/TestStatistics/testPlot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testPlot.cxx,1,['assert'],['assert']
Testability,"// Run the code generator on the `Test' code, loading the shared library.; // The function returns whether or not the new output differs from reference.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp:34,Test,Test,34,interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp,1,['Test'],['Test']
Testability,"// Run the optimization passes on ToOptimize, producing a transformed version; // of the functions being tested.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp:105,test,tested,105,interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp,1,['test'],['tested']
Testability,"// Runs the basic script and pops out the fit panel. Then it will; // initialize the FitEditorUnitTesting class and make it run all the; // tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/test/UnitTesting.cxx:140,test,tests,140,gui/fitpanel/test/UnitTesting.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/test/UnitTesting.cxx,1,['test'],['tests']
Testability,"// Rustem: please find a solution that does not use distance (it does not exist on solaris); // Log() << kINFO << ""Variable "" << vit->first; // << "" included "" << distance(beg_it, end_it) + 1; // << "" events: width = "" << std::setfill(' ') << std::setw(5) << std::setprecision(3) << rpos - lpos; // << "", (min, max) = ("" << std::setfill(' ') << std::setw(5) << std::setprecision(3) << lpos; // << "", "" << std::setfill(' ') << std::setw(5) << std::setprecision(3) << rpos << "")"" << Endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx:96,Log,Log,96,tmva/tmva/src/ModulekNN.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx,1,['Log'],['Log']
Testability,"// S c a n - l o g ( L ) v s a l p h a; // -----------------------------------------; // Show scan -log(L) of dataset w.r.t alpha",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h:100,log,log,100,roofit/roofitcore/test/stressRooFit_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h,1,['log'],['log']
Testability,"// S h o w r e s i d u a l a n d p u l l d i s t s; // -------------------------------------------------------; // Construct a histogram with the residuals of the data w.r.t. the curve; // we set `useAverage` to false for this test because this was done for the reference histogram",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h:227,test,test,227,roofit/roofitcore/test/stressRooFit_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h,1,['test'],['test']
Testability,"// SIMULTANEOUS FIT OF 2 UNBINNED DATASETS; // This is a simultaneous fit, so its likelihood has multiple components. In that case, splitting over; // components is always preferable, since it is more precise, due to component offsets matching; // the (-log) function values better.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx:254,log,log,254,roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx,1,['log'],['log']
Testability,"// SMin/SMax reduction over the vector with (potentially-extended); // i1 element type is actually a (potentially-extended); // logical `and`/`or` reduction over the original non-extended value:; // vector_reduce_s{min,max}(<n x i1>); // -->; // vector_reduce_{or,and}(<n x i1>); // and; // vector_reduce_s{min,max}(sext(<n x i1>)); // -->; // sext(vector_reduce_{or,and}(<n x i1>)); // and; // vector_reduce_s{min,max}(zext(<n x i1>)); // -->; // zext(vector_reduce_{and,or}(<n x i1>))",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp:128,log,logical,128,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,1,['log'],['logical']
Testability,// SPIR-V with logical memory layout.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:15,log,logical,15,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['log'],['logical']
Testability,// SSE/AVX supports logical shifts up to 64-bit integers - so we can just; // keep doubling the size of the integer elements up to that. We can; // then shift the elements of the integer vector by whole multiples of; // their width within the elements of the larger integer vector. Test each; // multiple to see if we can find a match with the moved element indices; // and that the shifted in elements are all zeroable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:20,log,logical,20,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,"['Test', 'log']","['Test', 'logical']"
Testability,// S_SYMBOL_STUBS always require a symbol stub size specifier.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCSectionMachO.cpp:42,stub,stub,42,interpreter/llvm-project/llvm/lib/MC/MCSectionMachO.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCSectionMachO.cpp,2,['stub'],['stub']
Testability,"// Same as TestBit(kMakeClass)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx:11,Test,TestBit,11,tree/tree/src/TBranchElement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx,1,['Test'],['TestBit']
Testability,// Same as log,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LibCallsShrinkWrap.cpp:11,log,log,11,interpreter/llvm-project/llvm/lib/Transforms/Utils/LibCallsShrinkWrap.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LibCallsShrinkWrap.cpp,11,['log'],['log']
Testability,"// Same basic logic as above, but the result is negative.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/ConstantRange.cpp:14,log,logic,14,interpreter/llvm-project/llvm/lib/IR/ConstantRange.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/ConstantRange.cpp,1,['log'],['logic']
Testability,// Same logic applies for the inverse case,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp:8,log,logic,8,interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,1,['log'],['logic']
Testability,// Same logic applies for the inverse case until we actually pick; // which operand of the compare to update.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp:8,log,logic,8,interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,1,['log'],['logic']
Testability,// Same logic as DeclRefExpr.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Syntax/BuildTree.cpp:8,log,logic,8,interpreter/llvm-project/clang/lib/Tooling/Syntax/BuildTree.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Syntax/BuildTree.cpp,1,['log'],['logic']
Testability,// Sandbox SP change.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp:3,Sandbox,Sandbox,3,interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,1,['Sandbox'],['Sandbox']
Testability,"// Sandbox calls by aligning call and branch delay to the bundle end.; // For indirect calls, emit the mask before the call.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp:3,Sandbox,Sandbox,3,interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,1,['Sandbox'],['Sandbox']
Testability,// Sandbox indirect branch or return instruction by inserting mask operation; // before it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp:3,Sandbox,Sandbox,3,interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,1,['Sandbox'],['Sandbox']
Testability,// Sandbox indirect jumps.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp:3,Sandbox,Sandbox,3,interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,1,['Sandbox'],['Sandbox']
Testability,"// Sandbox loads, stores and SP changes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp:3,Sandbox,Sandbox,3,interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,1,['Sandbox'],['Sandbox']
Testability,// Sandbox memory access or SP change. Insert mask operation before and/or; // after the instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp:3,Sandbox,Sandbox,3,interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,1,['Sandbox'],['Sandbox']
Testability,// Sandbox memory access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp:3,Sandbox,Sandbox,3,interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,1,['Sandbox'],['Sandbox']
Testability,// Sanitize user input in case of no asserts,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetMachine.cpp:37,assert,asserts,37,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetMachine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetMachine.cpp,1,['assert'],['asserts']
Testability,// Save a parent loop pointer for asserts.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopPassManager.cpp:34,assert,asserts,34,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopPassManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopPassManager.cpp,1,['assert'],['asserts']
Testability,// Save all the logs (when requested).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MLRegAllocPriorityAdvisor.cpp:16,log,logs,16,interpreter/llvm-project/llvm/lib/CodeGen/MLRegAllocPriorityAdvisor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MLRegAllocPriorityAdvisor.cpp,1,['log'],['logs']
Testability,"// Save also the logs from the workers",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:17,log,logs,17,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['log'],['logs']
Testability,"// Save info in the log file too",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx:20,log,log,20,proof/proof/src/TProofServ.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx,2,['log'],['log']
Testability,"// Save the logs into the query result instance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TQueryResultManager.cxx:12,log,logs,12,proof/proof/src/TQueryResultManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TQueryResultManager.cxx,1,['log'],['logs']
Testability,// Save the token name used for static assertion.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp:39,assert,assertion,39,interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDeclCXX.cpp,1,['assert'],['assertion']
Testability,"// Saves the CPU state that needs to be preserved when running a benchmark,; // and returns and RAII object that restores the state on destruction.; // By default no state is preserved.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h:65,benchmark,benchmark,65,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h,1,['benchmark'],['benchmark']
Testability,"// Scale linear, log.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx:17,log,log,17,hist/spectrumpainter/src/TSpectrum2Painter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx,1,['log'],['log']
Testability,// Scale the exponent by log(2).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:25,log,log,25,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,1,['log'],['log']
Testability,"// Scatter sections in all directions!; // Remaps section addresses for -verify mode. The following command line options; // can be used to customize the layout of the memory within the phony target's; // address space:; // -target-addr-start <s> -- Specify where the phony target address range starts.; // -target-addr-end <e> -- Specify where the phony target address range ends.; // -target-section-sep <d> -- Specify how big a gap should be left between the; // end of one section and the start of the next.; // Defaults to zero. Set to something big; // (e.g. 1 << 32) to stress-test stubs, GOTs, etc.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp:584,test,test,584,interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rtdyld/llvm-rtdyld.cpp,2,"['stub', 'test']","['stubs', 'test']"
Testability,"// Scope isn't fine-grained enough to explicitly list the specific cases, so; // instead, skip more than needed, then call back into here with the; // CommaVisitor in SemaStmt.cpp.; // The listed locations are the initialization and increment portions; // of a for loop. The additional checks are on the condition of; // if statements, do/while loops, and for loops.; // Differences in scope flags for C89 mode requires the extra logic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:430,log,logic,430,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['log'],['logic']
Testability,"// Search in all matches because there may be multiple decl chains,; // see ASTTests test ImportExistingFriendClassTemplateDef.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTImporter.cpp:85,test,test,85,interpreter/llvm-project/clang/lib/AST/ASTImporter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTImporter.cpp,1,['test'],['test']
Testability,"// SecToApplyRel contains a section referenced by sh_info field. It keeps; // a section to which the relocation section applies. When we remove any; // sections we also remove their relocation sections. Since we do that much; // earlier, this assert should never be triggered.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp:243,assert,assert,243,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp,1,['assert'],['assert']
Testability,"// Second : test all 8 box vertices against plane",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLBoundingBox.cxx:12,test,test,12,graf3d/gl/src/TGLBoundingBox.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLBoundingBox.cxx,1,['test'],['test']
Testability,// Second-to-last bit-test with contiguous range or omitted range; // check: fall through to the target of the final bit test.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:22,test,test,22,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,2,['test'],['test']
Testability,// Second-to-last bit-test with contiguous range: fall through to the; // target of the final bit test.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp:22,test,test,22,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp,2,['test'],['test']
Testability,"// Second: Perform more expensive 15 separating axes test; // Find translation in A's frame",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLBoundingBox.cxx:53,test,test,53,graf3d/gl/src/TGLBoundingBox.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLBoundingBox.cxx,1,['test'],['test']
Testability,// See BenchmarkKey.::Config.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/CodeTemplate.h:7,Benchmark,BenchmarkKey,7,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/CodeTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/CodeTemplate.h,1,['Benchmark'],['BenchmarkKey']
Testability,"// See comment in first EventSections test for explanation on why no EXPECT_EQ.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx:38,test,test,38,roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx,6,['test'],['test']
Testability,"// See https://github.com/olifre/root-io-bench/blob/master/benchmark.cpp",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_extended.cxx:59,benchmark,benchmark,59,tree/ntuple/v7/test/ntuple_extended.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_extended.cxx,2,['benchmark'],['benchmark']
Testability,"// See https://sft.its.cern.ch/jira/browse/ROOT-8742; // and https://sft.its.cern.ch/jira/browse/ROOT-9253; // As of commit e21b4f1a3b, removing this lock lead to a failure; // in the test testSetAddress[Loop].; // As of commit 4f8b237849, removing this lock does not lead to; // a visible failure in test. This might be due to the underlying; // problem (missing lock or ?) being solved somewhere else or some; // other perturbation reducing the failure rate.; // Having the lock here is not too costly as InitializeOffsets is; // one called once in the lifetime of the TBranch.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx:184,test,test,184,tree/tree/src/TBranchElement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx,3,['test'],"['test', 'testSetAddress']"
Testability,// See if DefMI is an instruction that loads from a GOT entry that holds the; // address of a lazy binding stub.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsOptimizePICCall.cpp:107,stub,stub,107,interpreter/llvm-project/llvm/lib/Target/Mips/MipsOptimizePICCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsOptimizePICCall.cpp,1,['stub'],['stub']
Testability,"// See if MI is an instruction with an equivalent ""logical"" opcode that can; // be used and replace MI. This is useful for EQ/NE comparisons where the; // ""nsw"" flag is missing since the ""logical"" opcode always sets CC to reflect; // the result being zero or non-zero.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZElimCompare.cpp:51,log,logical,51,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZElimCompare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZElimCompare.cpp,2,['log'],['logical']
Testability,"// See if the intrinsic is used in the following common pattern:; // br(llvm.type.test(...), thenbb, elsebb); // where nothing happens between the type test and the br.; // If so, create slightly simpler IR.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp:82,test,test,82,interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,2,['test'],['test']
Testability,"// See if we can use the CCR value from the operand instead of; // doing a separate TEST. TEST always sets OF and CF to 0, so unless; // we prove that the arithmetic won't overflow, we can't use OF or CF.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp:84,TEST,TEST,84,interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp,2,['TEST'],['TEST']
Testability,"// See if we can use the EFLAGS value from the operand instead of; // doing a separate TEST. TEST always sets OF and CF to 0, so unless; // we prove that the arithmetic won't overflow, we can't use OF or CF.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:87,TEST,TEST,87,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['TEST'],['TEST']
Testability,"// See test/CodeUnloading/PCH/VTables.cpp which implicitly compares clang; // to cling lang options. They should be the same, we should not have to; // give extra lang options to their invocations on any platform.; // Except -fexceptions -fcxx-exceptions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/CIFactory.cpp:7,test,test,7,interpreter/cling/lib/Interpreter/CIFactory.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/CIFactory.cpp,1,['test'],['test']
Testability,// See whether C can be implemented as a TEST UNDER MASK instruction.; // Update the arguments with the TM version if so.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp:41,TEST,TEST,41,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,1,['TEST'],['TEST']
Testability,// Select a good starting value using binary logarithms.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:45,log,logarithms,45,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp,1,['log'],['logarithms']
Testability,"// Select the parent expression when:; // - The string literal in ObjC string literal is selected, e.g.:; // @""test"" becomes @""test""; // ~~~~~~ ~~~~~~~",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Refactoring/ASTSelection.cpp:111,test,test,111,interpreter/llvm-project/clang/lib/Tooling/Refactoring/ASTSelection.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Refactoring/ASTSelection.cpp,2,['test'],['test']
Testability,"// Selection logic below is for V2S16 only.; // For G_BUILD_VECTOR_TRUNC, additionally check that the operands are s32.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.cpp:13,log,logic,13,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.cpp,1,['log'],['logic']
Testability,"// Selector to be used for CPU benchmarks",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/inc/TProofBench.h:31,benchmark,benchmarks,31,proof/proofbench/inc/TProofBench.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/inc/TProofBench.h,1,['benchmark'],['benchmarks']
Testability,"// Selector to be used for data benchmarks",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/inc/TProofBench.h:32,benchmark,benchmarks,32,proof/proofbench/inc/TProofBench.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/inc/TProofBench.h,1,['benchmark'],['benchmarks']
Testability,"// Selector to be used for generate data for benchmarks",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/inc/TProofBench.h:45,benchmark,benchmarks,45,proof/proofbench/inc/TProofBench.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/inc/TProofBench.h,1,['benchmark'],['benchmarks']
Testability,"// Selects operate on i1, however, CondReg is 8 bits width and may contain; // garbage. Indeed, only the less significant bit is supposed to be; // accurate. If we read more than the lsb, we may see non-zero values; // whereas lsb is zero. Therefore, we have to truncate Op0Reg to i1 for; // the select. This is achieved by performing TEST against 1.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp:335,TEST,TEST,335,interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp,1,['TEST'],['TEST']
Testability,"// Send the file to the sandbox",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:24,sandbox,sandbox,24,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['sandbox'],['sandbox']
Testability,"// Send the host name and full path to log file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TApplicationServer.cxx:39,log,log,39,net/net/src/TApplicationServer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TApplicationServer.cxx,1,['log'],['log']
Testability,"// Send to log box:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLog.cxx:11,log,log,11,proof/proof/src/TProofLog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLog.cxx,1,['log'],['log']
Testability,// SeparateConstOffsetFromGEP and SLSR creates common expressions which GVN or; // EarlyCSE can reuse. GVN generates significantly better code than EarlyCSE; // for some of our benchmarks.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXTargetMachine.cpp:177,benchmark,benchmarks,177,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXTargetMachine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXTargetMachine.cpp,1,['benchmark'],['benchmarks']
Testability,"// Sequential number for the test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:29,test,test,29,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['test'],['test']
Testability,// Set 'G' to null to flag that we've been successfully finalized.; // This allows us to assert at destruction time that a call has been made; // to either finalize or abandon.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/JITLinkMemoryManager.cpp:89,assert,assert,89,interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/JITLinkMemoryManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/JITLinkMemoryManager.cpp,2,['assert'],['assert']
Testability,"// Set High-Water-Mark or max on the sandbox size",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx:37,sandbox,sandbox,37,proof/proof/src/TProofServ.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx,1,['sandbox'],['sandbox']
Testability,"// Set UCharRangeMax to min of int or uchar maximum value.; // The C standard states that the arguments of functions like isalpha must; // be representable as an unsigned char. Their type is 'int', so the max; // value of the argument should be min(UCharMax, IntMax). This just happen; // to be true for commonly used and well tested instruction set; // architectures, but not for others.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp:327,test,tested,327,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp,1,['test'],['tested']
Testability,// Set block pointers according to Logical-AND (BO_LAnd) semantics. This; // means we need to evaluate the condition and increment the counter on TRUE:; //; // if (Cond); // goto CounterIncrBlock;; // else; // goto FalseBlock;; //; // CounterIncrBlock:; // Counter++;; // goto TrueBlock;,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:35,Log,Logical-AND,35,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,1,['Log'],['Logical-AND']
Testability,// Set block pointers according to Logical-OR (BO_LOr) semantics. This means; // we need to evaluate the condition and increment the counter on FALSE:; //; // if (Cond); // goto TrueBlock;; // else; // goto CounterIncrBlock;; //; // CounterIncrBlock:; // Counter++;; // goto FalseBlock;,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:35,Log,Logical-OR,35,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,1,['Log'],['Logical-OR']
Testability,"// Set entry number; if data iteration we may need to test the entry or event lists",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TEventIter.cxx:54,test,test,54,proof/proofplayer/src/TEventIter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TEventIter.cxx,1,['test'],['test']
Testability,"// Set for O(logN)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/Scanner.h:13,log,logN,13,core/dictgen/res/Scanner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/Scanner.h,1,['log'],['logN']
Testability,"// Set of Control Flow Equivalent (CFE) Fusion Candidates, sorted in dominance; // order. Thus, if FC0 comes *before* FC1 in a FusionCandidateSet, then FC0; // dominates FC1 and FC1 post-dominates FC0.; // std::set was chosen because we want a sorted data structure with stable; // iterators. A subsequent patch to loop fusion will enable fusing non-adjacent; // loops by moving intervening code around. When this intervening code contains; // loops, those loops will be moved also. The corresponding FusionCandidates; // will also need to be moved accordingly. As this is done, having stable; // iterators will simplify the logic. Similarly, having an efficient insert that; // keeps the FusionCandidateSet sorted will also simplify the implementation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp:625,log,logic,625,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp,1,['log'],['logic']
Testability,// Set of all temporary instructions we created.; // Note: This will include instructions that were just created during value; // numbering. The way to test if something is using them is to check; // RealToTemp.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp:152,test,test,152,interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp,1,['test'],['test']
Testability,"// Set reg to FP0, avoid hitting asserts.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp:33,assert,asserts,33,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp,4,['assert'],['asserts']
Testability,"// Set reg to FP1, avoid hitting asserts.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp:33,assert,asserts,33,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp,2,['assert'],['asserts']
Testability,// Set the amount of LDS used in bytes in the metadata. This is an optional; // advisory record for logging etc; wave dispatch actually uses the rsrc1; // register for the shader stage to determine the amount of LDS to allocate.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/Utils/AMDGPUPALMetadata.h:100,log,logging,100,interpreter/llvm-project/llvm/lib/Target/AMDGPU/Utils/AMDGPUPALMetadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/Utils/AMDGPUPALMetadata.h,1,['log'],['logging']
Testability,// Set the insertion point properly. Folding the load can cause generation of; // other random instructions (like sign extends) for addressing modes; make; // sure they get inserted in a logical place before the new instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:187,log,logical,187,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,1,['log'],['logical']
Testability,"// Set the log level",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/netxng/src/TNetXNGFile.cxx:11,log,log,11,net/netxng/src/TNetXNGFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/netxng/src/TNetXNGFile.cxx,1,['log'],['log']
Testability,// Set the number of used agprs in the metadata. This is an optional advisory; // record for logging etc;,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/Utils/AMDGPUPALMetadata.h:93,log,logging,93,interpreter/llvm-project/llvm/lib/Target/AMDGPU/Utils/AMDGPUPALMetadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/Utils/AMDGPUPALMetadata.h,1,['log'],['logging']
Testability,// Set the number of used sgprs in the metadata. This is an optional advisory; // record for logging etc; wave dispatch actually uses the rsrc1 register for; // the shader stage to determine the number of sgprs to allocate.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/Utils/AMDGPUPALMetadata.cpp:93,log,logging,93,interpreter/llvm-project/llvm/lib/Target/AMDGPU/Utils/AMDGPUPALMetadata.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/Utils/AMDGPUPALMetadata.cpp,3,['log'],['logging']
Testability,// Set the number of used vgprs in the metadata. This is an optional advisory; // record for logging etc; wave dispatch actually uses the rsrc1 register for; // the shader stage to determine the number of vgprs to allocate.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/Utils/AMDGPUPALMetadata.h:93,log,logging,93,interpreter/llvm-project/llvm/lib/Target/AMDGPU/Utils/AMDGPUPALMetadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/Utils/AMDGPUPALMetadata.h,2,['log'],['logging']
Testability,// Set the number of used vgprs in the metadata. This is an optional; // advisory record for logging etc; wave dispatch actually uses the rsrc1; // register for the shader stage to determine the number of vgprs to; // allocate.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/Utils/AMDGPUPALMetadata.cpp:93,log,logging,93,interpreter/llvm-project/llvm/lib/Target/AMDGPU/Utils/AMDGPUPALMetadata.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/Utils/AMDGPUPALMetadata.cpp,1,['log'],['logging']
Testability,"// Set up the scalar serial reference fitter, to benchmark times.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx:49,benchmark,benchmark,49,math/mathcore/test/testGradient.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx,3,['benchmark'],['benchmark']
Testability,// Set when the client has invoked this to simply drop all type test assume; // sequences.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp:64,test,test,64,interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,1,['test'],['test']
Testability,// SetCC on x86 zero extends so only act on this if it's a logical shift.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:59,log,logical,59,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['log'],['logical']
Testability,"// Setting the first and last instruction data pointers for the candidate. If; // we got through the entire for loop without hitting an assert, we know; // that both of these instructions are not nullptrs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/IRSimilarityIdentifier.cpp:136,assert,assert,136,interpreter/llvm-project/llvm/lib/Analysis/IRSimilarityIdentifier.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/IRSimilarityIdentifier.cpp,1,['assert'],['assert']
Testability,"// Setting this flag may emit false positives when the input module already; // contains dead instructions. Therefore, we set it only in unit tests that are; // free of dead code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SeparateConstOffsetFromGEP.cpp:142,test,tests,142,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SeparateConstOffsetFromGEP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SeparateConstOffsetFromGEP.cpp,1,['test'],['tests']
Testability,"// Several attributes carry different semantics than the parsing requires, so; // those are opted out of the common argument checks.; //; // We also bail on unknown and ignored attributes because those are handled; // as part of the target-specific handling logic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAttr.cpp:258,log,logic,258,interpreter/llvm-project/clang/lib/Sema/SemaAttr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAttr.cpp,1,['log'],['logic']
Testability,// Shift LSB to MSB and use VPMOVB/W2M or TESTD/Q.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:42,TEST,TESTD,42,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['TEST'],['TESTD']
Testability,"// Shift by four bits, using a complicated swap/eor/andi/eor sequence.; // It only works for logical shifts because the bits shifted in are all; // zeroes.; // To shift a single byte right, it produces code like this:; // swap r0; // andi r0, 0x0f; // For a two-byte (16-bit) shift, it adds the following instructions to shift; // the upper byte into the lower byte:; // swap r1; // eor r0, r1; // andi r1, 0x0f; // eor r0, r1; // For bigger shifts, it repeats the above sequence. For example, for a 3-byte; // (24-bit) shift it adds:; // swap r2; // eor r1, r2; // andi r2, 0x0f; // eor r1, r2",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.cpp:93,log,logical,93,interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.cpp,1,['log'],['logical']
Testability,// Shift the tested bit over the sign bit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:13,test,tested,13,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['test'],['tested']
Testability,"// Short-circuit the logic and just insert the string representation of; // the boolean value at the right index.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RDisplay.hxx:21,log,logic,21,tree/dataframe/inc/ROOT/RDF/RDisplay.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RDisplay.hxx,1,['log'],['logic']
Testability,"// Short-circuit the logic and just insert the string representation of; // the symple type at the right index.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RDisplay.hxx:21,log,logic,21,tree/dataframe/inc/ROOT/RDF/RDisplay.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RDisplay.hxx,1,['log'],['logic']
Testability,"// Shortcut: With only 1 subrange, the normal separate component tests are; // enough and we do not need to perform the union-find on the subregister; // segments.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RenameIndependentSubregs.cpp:65,test,tests,65,interpreter/llvm-project/llvm/lib/CodeGen/RenameIndependentSubregs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RenameIndependentSubregs.cpp,1,['test'],['tests']
Testability,// Should we check here and assert that the instruction has been fully; // constructed?; // FIXME: Any other checks required to be done here? Remove this method if; // none.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CSEInfo.cpp:28,assert,assert,28,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CSEInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CSEInfo.cpp,1,['assert'],['assert']
Testability,"// Shrink constant indices if they are larger than 32-bits.; // Only do this before legalize types since v2i64 could become v2i32.; // FIXME: We could check that the type is legal if we're after legalize; // types, but then we would need to construct test cases where that happens.; // FIXME: We could support more than just constant vectors, but we need to; // careful with costing. A truncate that can be optimized out would be fine.; // Otherwise we might only want to create a truncate if it avoids a split.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:251,test,test,251,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['test'],['test']
Testability,// Shrink scalar logic operations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIShrinkInstructions.cpp:17,log,logic,17,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIShrinkInstructions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIShrinkInstructions.cpp,1,['log'],['logic']
Testability,"// Sign-extend the new bits, and continue the assertion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:46,assert,assertion,46,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,1,['assert'],['assertion']
Testability,"// Signal the start of finalize for the memory log grepping",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx:47,log,log,47,proof/proofplayer/src/TProofPlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx,1,['log'],['log']
Testability,// Signbit test folds; // Fold (X u>> BitWidth - 1 Pred ZExt(i1)) --> X s< 0 Pred i1; // Fold (X s>> BitWidth - 1 Pred SExt(i1)) --> X s< 0 Pred i1,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:11,test,test,11,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['test'],['test']
Testability,// Silence unused variable warning without asserts.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp:43,assert,asserts,43,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp,1,['assert'],['asserts']
Testability,// Silence unused variables in non-asserts mode.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ModuloSchedule.cpp:35,assert,asserts,35,interpreter/llvm-project/llvm/lib/CodeGen/ModuloSchedule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ModuloSchedule.cpp,1,['assert'],['asserts']
Testability,// Silence unused warning in non-assert builds.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp:33,assert,assert,33,interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp,1,['assert'],['assert']
Testability,// Silence warning in no-asserts mode.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp:25,assert,asserts,25,interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp,1,['assert'],['asserts']
Testability,"// Similar to MVC, but for logic operations (AND, OR, XOR).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.h:27,log,logic,27,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.h,1,['log'],['logic']
Testability,"// Similar to the logic for GCC above, if we are currently running Clang; // inside of the requested system root, add its parent library path to those; // searched.; // FIXME: It's not clear whether we should use the driver's installed; // directory ('Dir' below) or the ResourceDir.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Hurd.cpp:18,log,logic,18,interpreter/llvm-project/clang/lib/Driver/ToolChains/Hurd.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Hurd.cpp,1,['log'],['logic']
Testability,"// Similar to the logic for GCC above, if we currently running Clang inside; // of the requested system root, add its parent library paths to; // those searched.; // FIXME: It's not clear whether we should use the driver's installed; // directory ('Dir' below) or the ResourceDir.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Hurd.cpp:18,log,logic,18,interpreter/llvm-project/clang/lib/Driver/ToolChains/Hurd.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Hurd.cpp,1,['log'],['logic']
Testability,"// Similarly, a logical right-shift of a constant sign-bit will have exactly; // one bit set.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:16,log,logical,16,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,1,['log'],['logical']
Testability,"// Simple template that decides whether a type T should use the format_provider; // based format() invocation. The member function takes priority, so this test; // will only be true if there is not ALSO a format member.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadicDetails.h:155,test,test,155,interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadicDetails.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadicDetails.h,1,['test'],['test']
Testability,"// Simple test case: calculate x^2 + b, where x is a vector. This case does; // both a simple calculation (squaring the input vector x) and represents; // handling of state updates in b.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/test/test_Job.cxx:10,test,test,10,roofit/multiprocess/test/test_Job.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/test/test_Job.cxx,3,['test'],['test']
Testability,// Simplify 'shl' inequality test into 'and' equality test.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:29,test,test,29,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,2,['test'],['test']
Testability,"// Simplify (fcmp cc0 x, y) & (fcmp cc1 x, y).; // Suppose the relation between x and y is R, where R is one of; // U(1000), L(0100), G(0010) or E(0001), and CC0 and CC1 are the bitmasks for; // testing the desired relations.; //; // Since (R & CC0) and (R & CC1) are either R or 0, we actually have this:; // bool(R & CC0) && bool(R & CC1); // = bool((R & CC0) & (R & CC1)); // = bool(R & (CC0 & CC1)) <= by re-association, commutation, and idempotency; //; // Since (R & CC0) and (R & CC1) are either R or 0, we actually have this:; // bool(R & CC0) || bool(R & CC1); // = bool((R & CC0) | (R & CC1)); // = bool(R & (CC0 | CC1)) <= by reversed distribution (contribution? ;)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:195,test,testing,195,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,1,['test'],['testing']
Testability,// Simplify selects that test the returned flag of cmpxchg instructions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp:25,test,test,25,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,1,['test'],['test']
Testability,"// Simplify the 1-into-3 and 3-into-1 cases with a single pshufd. For all; // such inputs we can swap two of the dwords across the half mark and end up; // with <=2 inputs to each half in each half. Once there, we can fall through; // to the generic code below. For example:; //; // Input: [a, b, c, d, e, f, g, h] -PSHUFD[0,2,1,3]-> [a, b, e, f, c, d, g, h]; // Mask: [0, 1, 2, 7, 4, 5, 6, 3] -----------------> [0, 1, 4, 7, 2, 3, 6, 5]; //; // However in some very rare cases we have a 1-into-3 or 3-into-1 on one half; // and an existing 2-into-2 on the other half. In this case we may have to; // pre-shuffle the 2-into-2 half to avoid turning it into a 3-into-1 or; // 1-into-3 which could cause us to cycle endlessly fixing each side in turn.; // Fortunately, we don't have to handle anything but a 2-into-2 pattern; // because any other situation (including a 3-into-1 or 1-into-3 in the other; // half than the one we target for fixing) will be fixed when we re-enter this; // path. We will also combine away any sequence of PSHUFD instructions that; // result into a single instruction. Here is an example of the tricky case:; //; // Input: [a, b, c, d, e, f, g, h] -PSHUFD[0,2,1,3]-> [a, b, e, f, c, d, g, h]; // Mask: [3, 7, 1, 0, 2, 7, 3, 5] -THIS-IS-BAD!!!!-> [5, 7, 1, 0, 4, 7, 5, 3]; //; // This now has a 1-into-3 in the high half! Instead, we do two shuffles:; //; // Input: [a, b, c, d, e, f, g, h] PSHUFHW[0,2,1,3]-> [a, b, c, d, e, g, f, h]; // Mask: [3, 7, 1, 0, 2, 7, 3, 5] -----------------> [3, 7, 1, 0, 2, 7, 3, 6]; //; // Input: [a, b, c, d, e, g, f, h] -PSHUFD[0,2,1,3]-> [a, b, e, g, c, d, f, h]; // Mask: [3, 7, 1, 0, 2, 7, 3, 6] -----------------> [5, 7, 1, 0, 4, 7, 5, 6]; //; // The result is fine to be handled by the generic logic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:1759,log,logic,1759,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['log'],['logic']
Testability,"// Simply multiplying by the reciprocal estimate can leave us a few ulps; // too low, so we add 2 ulps (exhaustive testing shows that this is enough,; // and that it will never cause us to return an answer too large).; // float4 result = as_float4(as_int4(xf*recip) + 2);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:115,test,testing,115,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['test'],['testing']
Testability,"// Since MSP430-GCC already generates 32-bit DWARF information, we will; // also store 16-bit pointers as 32-bit pointers in DWARF, because using; // 32-bit DWARF pointers is already a working and tested path for LLDB; // as well.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/MSP430/MCTargetDesc/MSP430MCAsmInfo.cpp:197,test,tested,197,interpreter/llvm-project/llvm/lib/Target/MSP430/MCTargetDesc/MSP430MCAsmInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/MSP430/MCTargetDesc/MSP430MCAsmInfo.cpp,1,['test'],['tested']
Testability,"// Since a projected PDF is an integral, we can use the same logic from; // RooRealIntegral via the projection integral to figure out what the; // servers are. Integration observables will be shape servers, the other; // servers are value servers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProjectedPdf.cxx:61,log,logic,61,roofit/roofitcore/src/RooProjectedPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProjectedPdf.cxx,1,['log'],['logic']
Testability,"// Since the bitmap identifies the executed test vectors for an MC/DC; // DecisionRegion, all of the information is now available to process.; // This is where the bulk of the MC/DC progressing takes place.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:44,test,test,44,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,1,['test'],['test']
Testability,"// Since this routine can be called (almost) directly from the command line and is used; // in automated test, it must return 0 in case of success",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressInterpreter.cxx:105,test,test,105,test/stressInterpreter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressInterpreter.cxx,1,['test'],['test']
Testability,// Since vectorization tree is being built recursively this assertion; // ensures that the tree entry has all operands set before reaching; // this code. Couple of exceptions known at the moment are extracts; // where their second (immediate) operand is not added. Since; // immediates do not affect scheduler behavior this is considered; // okay.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:60,assert,assertion,60,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['assert'],['assertion']
Testability,"// Since we already have logical no need for further checks.; // Done ... prepare for next object.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScenePad.cxx:25,log,logical,25,graf3d/gl/src/TGLScenePad.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScenePad.cxx,1,['log'],['logical']
Testability,"// Since we disturbed the flow (due to the double benchmark printing),; // let's repeat the header!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx:50,benchmark,benchmark,50,test/stress.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stress.cxx,1,['benchmark'],['benchmark']
Testability,"// Since we don't know ahead of time how many instructions we're going to add; // to the worklist, and migrating densemap's elements is quite expensive; // everytime we resize, only insert to the smallvector (typically during the; // initial phase of populating lists). Before the worklist can be used,; // finalize should be called. Also assert with NDEBUG if list is ever used; // without finalizing. Note that unlike insert, we won't check for duplicates; // - so the ideal place to use this is during the initial prepopulating phase; // of most passes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelWorkList.h:339,assert,assert,339,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelWorkList.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelWorkList.h,1,['assert'],['assert']
Testability,"// Since we have a valid LoopInfo we can actually leave the cached results in; // the analysis manager associated with the Loop keys, but we need to; // propagate any necessary invalidation logic into them. We'd like to; // invalidate things in roughly the same order as they were put into the; // cache and so we walk the preorder list in reverse to form a valid; // postorder.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAnalysisManager.cpp:190,log,logic,190,interpreter/llvm-project/llvm/lib/Analysis/LoopAnalysisManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAnalysisManager.cpp,1,['log'],['logic']
Testability,"// Since we're not going to use the final bit test, remove it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp:46,test,test,46,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp,2,['test'],['test']
Testability,"// Single-character command impostures, such as \t or \n, should not go; // through the fixit logic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/CommentCommandTraits.cpp:94,log,logic,94,interpreter/llvm-project/clang/lib/AST/CommentCommandTraits.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/CommentCommandTraits.cpp,1,['log'],['logic']
Testability,// Skip CUDA/HIP kernel launch stub functions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:31,stub,stub,31,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,1,['stub'],['stub']
Testability,// Skip all symbols if this is a stubs file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:33,stub,stubs,33,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,1,['stub'],['stubs']
Testability,// Skip and with constant. We have special handling for and with immediate; // during isel to generate test instructions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:103,test,test,103,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['test'],['test']
Testability,// Skip cases that are testing for only a qnan or snan.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:23,test,testing,23,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,1,['test'],['testing']
Testability,"// Skip classes without operator[] from index test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx:46,test,test,46,test/tcollbm.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx,1,['test'],['test']
Testability,// Skip custom and typed event records for v1 logs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-converter.cpp:46,log,logs,46,interpreter/llvm-project/llvm/tools/llvm-xray/xray-converter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-converter.cpp,1,['log'],['logs']
Testability,// Skip property accessor function stubs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp:35,stub,stubs,35,interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,2,['stub'],['stubs']
Testability,// Skip tests when we don't have PDT or DI,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/CodeMoverUtils.cpp:8,test,tests,8,interpreter/llvm-project/llvm/lib/Transforms/Utils/CodeMoverUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/CodeMoverUtils.cpp,1,['test'],['tests']
Testability,// Skip the register if we are about to add one of its super registers.; // TODO: Common this up with the same logic in addLineIns().,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/BranchFolding.cpp:111,log,logic,111,interpreter/llvm-project/llvm/lib/CodeGen/BranchFolding.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/BranchFolding.cpp,1,['log'],['logic']
Testability,// Skip type and table arguments when printing for tests.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/MCTargetDesc/WebAssemblyInstPrinter.cpp:51,test,tests,51,interpreter/llvm-project/llvm/lib/Target/WebAssembly/MCTargetDesc/WebAssemblyInstPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/MCTargetDesc/WebAssemblyInstPrinter.cpp,1,['test'],['tests']
Testability,"// Skips the primary input file, which is the input file that the compilation; // proccess will be executed upon (e.g. the host bitcode file) and; // adds other secondary input (e.g. device bitcode files for embedding to the; // -fembed-offload-object argument or the host IR file for proccessing; // during device compilation to the fopenmp-host-ir-file-path argument via; // OpenMPDeviceInput). This is condensed logic from the ConstructJob; // function inside of the Clang driver for pushing on further input arguments; // needed for offloading during various phases of compilation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Flang.cpp:415,log,logic,415,interpreter/llvm-project/clang/lib/Driver/ToolChains/Flang.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Flang.cpp,1,['log'],['logic']
Testability,// Slightly prefer to break before the first one in log-like statements.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp:52,log,log-like,52,interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp,1,['log'],['log-like']
Testability,"// So far, all branch instructions in Wasm take an I32 condition.; // The default TargetLowering::getSetCCResultType returns the pointer size,; // which would be useful to reduce instruction counts when testing; // against 64-bit pointers/values if at some point Wasm supports that.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyISelLowering.cpp:203,test,testing,203,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyISelLowering.cpp,1,['test'],['testing']
Testability,// So we increment a zero register and test for bits other; // than bit 0? Conservatively bail out in case the verifier; // missed this case.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:39,test,test,39,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,1,['test'],['test']
Testability,"// Solve log(eq. (4.10)) to get fX0 = N",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurate.cxx:9,log,log,9,math/mathmore/src/VavilovAccurate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurate.cxx,1,['log'],['log']
Testability,// Some architectures require special parsing logic just to compute the; // ArchType result.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TargetParser/Triple.cpp:46,log,logic,46,interpreter/llvm-project/llvm/lib/TargetParser/Triple.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TargetParser/Triple.cpp,1,['log'],['logic']
Testability,"// Some assertions to enforce that strong dependencies are relations in; // between purely modeling checkers, and weak dependencies are about; // diagnostics.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/CheckerRegistry.cpp:8,assert,assertions,8,interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/CheckerRegistry.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/CheckerRegistry.cpp,1,['assert'],['assertions']
Testability,"// Some checks and logging of used architectures",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFit/Evaluator.cxx:19,log,logging,19,roofit/roofitcore/src/RooFit/Evaluator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFit/Evaluator.cxx,1,['log'],['logging']
Testability,"// Some codegen passes should only be testable via; // `llc -{start|stop}-{before|after}=<passname>`, not via `opt -<passname>`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassSupport.h:38,test,testable,38,interpreter/llvm-project/llvm/include/llvm/PassSupport.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/PassSupport.h,1,['test'],['testable']
Testability,"// Some command line options support shortcuts. For example:; // The command line option '--print=elements' is a shortcut for:; // '--print=instructions,lines,scopes,symbols,types'.; // In the case of logical view comparison, some options related to; // attributes must be set or reset for a proper comparison.; // Resolve any dependencies between command line options.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h:201,log,logical,201,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h,1,['log'],['logical']
Testability,// Some floating point conditions can't be tested with a single condition; // code. Construct an additional comparison in this case.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:43,test,tested,43,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,2,['test'],['tested']
Testability,// Some keywords are not included here because they don't need special; // treatment like `showcancelled` or they should be treated as identifiers; // like `int` and `logic`.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/FormatToken.h:167,log,logic,167,interpreter/llvm-project/clang/lib/Format/FormatToken.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/FormatToken.h,1,['log'],['logic']
Testability,"// Some notification (useful in large logs)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TQueryResultManager.cxx:38,log,logs,38,proof/proof/src/TQueryResultManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TQueryResultManager.cxx,1,['log'],['logs']
Testability,"// Some of the tests below are recursive, so bail out if we hit the limit.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp:15,test,tests,15,interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,1,['test'],['tests']
Testability,"// Some older gcc compilers don't support straight forward tests; // for members, so test for ambiguity cause by the base and derived; // classes both defining the member.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:59,test,tests,59,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,2,['test'],"['test', 'tests']"
Testability,"// Some subtargets allow encoding 2048, but this isn't tested or supported.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/Utils/AMDGPUBaseInfo.cpp:55,test,tested,55,interpreter/llvm-project/llvm/lib/Target/AMDGPU/Utils/AMDGPUBaseInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/Utils/AMDGPUBaseInfo.cpp,1,['test'],['tested']
Testability,"// Some versions of SUSE and Fedora on ppc64 put 32-bit libs; // in what would normally be GCCInstallPath and put the 64-bit; // libs in a subdirectory named 64. The simple logic we follow is that; // *if* there is a subdirectory of the right name with crtbegin.o in it,; // we use that. If not, and if not a biarch triple alias, we look for; // crtbegin.o without the subdirectory.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.cpp:173,log,logic,173,interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.cpp,1,['log'],['logic']
Testability,"// Some weirdness here. AMDGPU::isKernelCC does not call into; // AMDGPU::isKernel with the calling conv, it instead calls into; // isModuleEntryFunction which returns true for more calling conventions; // than AMDGPU::isKernel does. There's a FIXME on AMDGPU::isKernel.; // There's also a test that checks that the LDS lowering does not hit on; // a graphics shader, denoted amdgpu_ps, so stay with the limited case.; // Putting LDS in the name of the function to draw attention to this.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp:290,test,test,290,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,1,['test'],['test']
Testability,"// Sometimes, the socket from the previous test needs some time to close, so; // we introduce a latency here. A more robust and fast approach might be to; // do the following on the bind side:; // 1. first try another port, e.g. increase by one; // 2. if that doesn't work, do the latency and retry the original port; // The connect side then also needs to change, because it doesn't know which; // port the bind side will bind to. The connect side could try connecting to; // both options asynchronously, and then in a loop check both for signs of; // life. If one comes alive, transfer ownership of that pointer to the pointer; // you want to eventually use (`socket`) and that's it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ.cpp:43,test,test,43,roofit/roofitZMQ/test/test_ZMQ.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ.cpp,1,['test'],['test']
Testability,"// Sort by descending size order so that we allocate the most important; // sets first.; // Tie-break equivalent sizes by sorting chains requiring fixups before; // those without fixups. The logic here is that we should look at the; // chains that we cannot change before we look at those we can,; // so the parity counter is updated and we know what color we should; // change them to!; // Final tie-break with instruction order so pass output is stable (i.e. not; // dependent on malloc'd pointer values).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp:191,log,logic,191,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,1,['log'],['logic']
Testability,// Sort so output is deterministic for tests. Otherwise it's sorted by pointer; // values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp:39,test,tests,39,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,1,['test'],['tests']
Testability,// Sort symbols so we get a deterministic order and can check them in tests.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/Core.cpp:70,test,tests,70,interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/Core.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/Core.cpp,1,['test'],['tests']
Testability,// Sort the contents of the buckets by hash value so that hash collisions end; // up together. Stable sort makes testing easier and doesn't cost much more.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AccelTable.cpp:113,test,testing,113,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AccelTable.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AccelTable.cpp,1,['test'],['testing']
Testability,// Sort the logical elements using the criteria specified by the; // command line option '--output-sort'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:12,log,logical,12,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,1,['log'],['logical']
Testability,// Sort the regions in an ascending order by the file id and the starting; // location. Sort by region kinds to ensure stable order for tests.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingWriter.cpp:136,test,tests,136,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingWriter.cpp,1,['test'],['tests']
Testability,"// Sort the symbols in alphabetical order, like llvm-nm (and to get; // deterministic output for testing).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dsymutil/DebugMap.cpp:97,test,testing,97,interpreter/llvm-project/llvm/tools/dsymutil/DebugMap.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dsymutil/DebugMap.cpp,1,['test'],['testing']
Testability,"// SourceManager::isBeforeInTranslationUnit tests for strict; // inequality, when we need a non-strict comparison (bug; // can be reported directly on the annotated note).; // For this reason, we use the following equivalence:; //; // A <= B <==> !(B < A); //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugSuppression.cpp:44,test,tests,44,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugSuppression.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugSuppression.cpp,1,['test'],['tests']
Testability,"// Special case 2, the two input registers used by ISEL are the same.; // Note 1: We favor merging ISEL expansions over folding a single one. If; // the passed list has multiple merge-able ISEL's, we won't fold any.; // Note 2: There is no need to test for PPC::R0/PPC::X0 because PPC::ZERO/; // PPC::ZERO8 will be used for the first operand if the value is meant to; // be zero. In this case, the useSameRegister method will return false,; // thereby preventing this ISEL from being folded.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCExpandISEL.cpp:248,test,test,248,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCExpandISEL.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCExpandISEL.cpp,1,['test'],['test']
Testability,"// Special case comparisons against NULL.; // This must come after the test if the RHS is a symbol, which is used to; // build constraints. The address of any non-symbolic region is guaranteed; // to be non-NULL, as is any label.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/SimpleSValBuilder.cpp:71,test,test,71,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/SimpleSValBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/SimpleSValBuilder.cpp,1,['test'],['test']
Testability,"// Special case comparisons to NULL.; // This must come after the test if the LHS is a symbol, which is used to; // build constraints. The address of any non-symbolic region is guaranteed; // to be non-NULL.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/SimpleSValBuilder.cpp:66,test,test,66,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/SimpleSValBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/SimpleSValBuilder.cpp,1,['test'],['test']
Testability,"// Special case fObsValue = 0 because log(0) not computable, the limit of n * log(n), n->0 must be taken",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:38,log,log,38,roofit/roostats/test/stressRooStats_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h,2,['log'],['log']
Testability,// Special case for sign bit test. We can use a v4i32 PCMPGT and shuffle; // the odd elements over the even elements.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:29,test,test,29,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['test'],['test']
Testability,"// Special case handling of ""X ? Y : Z"" where Y is empty:; // logical-OR-expression '?' ':' conditional-expression [GNU]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp:62,log,logical-OR-expression,62,interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp,1,['log'],['logical-OR-expression']
Testability,"// Special case logic goes here. At this point Arch, Vendor and OS have the; // correct values for the computed components.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TargetParser/Triple.cpp:16,log,logic,16,interpreter/llvm-project/llvm/lib/TargetParser/Triple.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TargetParser/Triple.cpp,1,['log'],['logic']
Testability,// Special case where there is no register class identifier in the set.; // An empty set of register classes means: this register file contains all; // the physical registers specified by the target.; // We optimistically assume that a register can be renamed at the cost of a; // single physical register. The constructor of RegisterFile ensures that; // a RegisterMapping exists for each logical register defined by the Target.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp:390,log,logical,390,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp,1,['log'],['logical']
Testability,// Special case. If the input fits in 8-bits we can use a single 8-bit TEST.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:71,TEST,TEST,71,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['TEST'],['TEST']
Testability,"// Special cases for instructions that can always be outlined, but will fail; // the later tests. e.g, ADRPs, which are PC-relative use LR, but can always; // be outlined because they don't require a *specific* value to be in LR.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:91,test,tests,91,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,1,['test'],['tests']
Testability,"// Special handling of this case since log(Poisson(0,0)=0 but can't be calculated with usual log-formula; // since log(mu)=0. No update of result is required since term=0.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNLLVar.cxx:39,log,log,39,roofit/roofitcore/src/RooNLLVar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNLLVar.cxx,6,['log'],"['log', 'log-formula']"
Testability,"// Special handling of this case since std::log(Poisson(0,0)=0 but can't be; // calculated with usual log-formula since std::log(mu)=0. No update of result; // is required since term=0.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h:44,log,log,44,roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h,3,['log'],"['log', 'log-formula']"
Testability,// Special logic for binary operators.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:11,log,logic,11,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['log'],['logic']
Testability,"// Special testing for the argument location. Since the fix-it needs the; // location right before the argument, the argument location can be in a; // macro only if it is at the beginning of the macro.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:11,test,testing,11,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,1,['test'],['testing']
Testability,"// Specialization of a template with an integer parameter can contain; // arithmetic, logical, comparison and ternary operators.; //; // FIXME: This also accepts sequences of operators that are not in the scope; // of a template argument list.; //; // In a C++ lambda a template type can only occur after an arrow. We use; // this as an heuristic to distinguish between Objective-C expressions; // followed by an `a->b` expression, such as:; // ([obj func:arg] + a->b); // Otherwise the code below would parse as a lambda.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineParser.cpp:86,log,logical,86,interpreter/llvm-project/clang/lib/Format/UnwrappedLineParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineParser.cpp,1,['log'],['logical']
Testability,"// Specially handle logical operators, which have a slightly; // more optimal CFG representation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp:20,log,logical,20,interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,2,['log'],['logical']
Testability,// Speculatively compile likely functions for the given Stub Address.; // destination of __orc_speculate_for jump,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Speculation.h:56,Stub,Stub,56,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Speculation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Speculation.h,1,['Stub'],['Stub']
Testability,// Split DemandedElts and test each of the demanded subvectors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:26,test,test,26,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,1,['test'],['test']
Testability,"// Split the backedge of the loop and insert the poll within that new; // basic block. This creates a loop with two latches per original; // latch (which is non-ideal), but this appears to be easier to; // optimize in practice than inserting the poll immediately before the; // latch test.; // Since this is a latch, at least one of the successors must dominate; // it. Its possible that we have a) duplicate edges to the same header; // and b) edges to distinct loop headers. We need to insert pools on; // each.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/PlaceSafepoints.cpp:284,test,test,284,interpreter/llvm-project/llvm/lib/Transforms/Scalar/PlaceSafepoints.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/PlaceSafepoints.cpp,1,['test'],['test']
Testability,"// SrcReg(GR64) -> DestReg(MaskReg); // SrcReg(GR32) -> DestReg(MaskReg); // All KMASK RegClasses hold the same k registers, can be tested against; // anyone.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp:132,test,tested,132,interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,1,['test'],['tested']
Testability,"// SrcReg(MaskReg) -> DestReg(GR64); // SrcReg(MaskReg) -> DestReg(GR32); // All KMASK RegClasses hold the same k registers, can be tested against; // anyone.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp:132,test,tested,132,interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,1,['test'],['tested']
Testability,"// Standard ROOT OpenGL scene with logial/physical shapes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLScene.h:35,log,logial,35,graf3d/gl/inc/TGLScene.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLScene.h,1,['log'],['logial']
Testability,"// Start testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testBinnedFitExecPolicy.cxx:9,test,testing,9,math/mathcore/test/fit/testBinnedFitExecPolicy.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testBinnedFitExecPolicy.cxx,1,['test'],['testing']
Testability,// Start the loop with a block that tests the condition.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:36,test,tests,36,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,2,['test'],['tests']
Testability,"// Start the loop with a block that tests the condition.; // If there's an increment, the continue scope will be overwritten; // later.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:36,test,tests,36,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,2,['test'],['tests']
Testability,// Start the sandboxing sequence by emitting call.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp:13,sandbox,sandboxing,13,interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,1,['sandbox'],['sandboxing']
Testability,"// StartMBB:; //; // Use VECTOR ELEMENT COMPARE [LOGICAL] to compare the high parts.; // Swap the inputs to get:; // CC 1 if high(Op0) > high(Op1); // CC 2 if high(Op0) < high(Op1); // CC 0 if high(Op0) == high(Op1); //; // If CC != 0, we'd done, so jump over the next instruction.; //; // VEC[L]G Op1, Op0; // JNE JoinMBB; // # fallthrough to HiEqMBB",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp:49,LOG,LOGICAL,49,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,1,['LOG'],['LOGICAL']
Testability,"// Starting with a code fragment like:; //; // test %rax, %rax; // jne LblNotNull; //; // LblNull:; // callq throw_NullPointerException; //; // LblNotNull:; // Inst0; // Inst1; // ...; // Def = Load (%rax + <offset>); // ...; //; //; // we want to end up with; //; // Def = FaultingLoad (%rax + <offset>), LblNull; // jmp LblNotNull ;; explicit or fallthrough; //; // LblNotNull:; // Inst0; // Inst1; // ...; //; // LblNull:; // callq throw_NullPointerException; //; //; // To see why this is legal, consider the two possibilities:; //; // 1. %rax is null: since we constrain <offset> to be less than PageSize, the; // load instruction dereferences the null page, causing a segmentation; // fault.; //; // 2. %rax is not null: in this case we know that the load cannot fault, as; // otherwise the load would've faulted in the original program too and the; // original program would've been undefined.; //; // This reasoning cannot be extended to justify hoisting through arbitrary; // control flow. For instance, in the example below (in pseudo-C); //; // if (ptr == null) { throw_npe(); unreachable; }; // if (some_cond) { return 42; }; // v = ptr->field; // LD; // ...; //; // we cannot (without code duplication) use the load marked ""LD"" to null check; // ptr -- clause (2) above does not apply in this case. In the above program; // the safety of ptr->field can be dependent on some_cond; and, for instance,; // ptr could be some non-null invalid reference that never gets loaded from; // because some_cond is always true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp:47,test,test,47,interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp,1,['test'],['test']
Testability,"// Statement exprs don't logically have side effects themselves, but are; // sometimes used in macros in ways that give them a type that is unused.; // For example ({ blah; foo(); }) will end up with a type if foo has a type.; // however, if the result of the stmt expr is dead, we don't want to emit a; // warning.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Expr.cpp:25,log,logically,25,interpreter/llvm-project/clang/lib/AST/Expr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Expr.cpp,1,['log'],['logically']
Testability,"// Statements to set the original iteration variable's value from the; // logical iteration number.; // Generated for loop is:; // Original_for_init;; // for (auto .tile.iv = .floor.iv; .tile.iv < min(.floor.iv + DimTileSize,; // NumIterations); ++.tile.iv) {; // Original_Body;; // Original_counter_update;; // }; // FIXME: If the innermost body is an loop itself, inserting these; // statements stops it being recognized as a perfectly nested loop (e.g.; // for applying tiling again). If this is the case, sink the expressions; // further into the inner loop.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:74,log,logical,74,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['log'],['logical']
Testability,"// Statistical tests:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:15,test,tests,15,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,3,['test'],['tests']
Testability,"// Statistical tests:; // No statistical tests possible for THnBase so far...; // if ( compareStats ); // differents += compareStatistics( h1, h2, debug, ERRORLIMIT);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:15,test,tests,15,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,['test'],['tests']
Testability,"// Steering class for PROOF benchmarks",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/inc/TProofBench.h:28,benchmark,benchmarks,28,proof/proofbench/inc/TProofBench.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/inc/TProofBench.h,1,['benchmark'],['benchmarks']
Testability,"// Step through all machine locations, look at each predecessor and test; // whether we can eliminate redundant PHIs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:68,test,test,68,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['test'],['test']
Testability,"// Steps to build hand (logic x, y), ...z",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp:24,log,logic,24,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,1,['log'],['logic']
Testability,// Still handle this case if we don't have assertions enabled.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp:43,assert,assertions,43,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp,2,['assert'],['assertions']
Testability,"// Still to do: Division for profiles; // The division methods for the profiles have to be changed to; // calculate the errors correctly.; // Test 10; // Copy Tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:142,Test,Test,142,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,['Test'],"['Test', 'Tests']"
Testability,"// Store log files during training",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyKeras.h:9,log,log,9,tmva/pymva/inc/TMVA/MethodPyKeras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyKeras.h,1,['log'],['log']
Testability,// Store the arguments right after the definition of output value.; // This should be proceeded after creating exit stubs to be ensure that invoke; // result restore will be placed in the outlined function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/CodeExtractor.cpp:116,stub,stubs,116,interpreter/llvm-project/llvm/lib/Transforms/Utils/CodeExtractor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/CodeExtractor.cpp,1,['stub'],['stubs']
Testability,"// Store the data in ten clusters to be able to test that the size is correctly computed in this way.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntupleutil/v7/test/ntuple_inspector.cxx:48,test,test,48,tree/ntupleutil/v7/test/ntuple_inspector.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntupleutil/v7/test/ntuple_inspector.cxx,2,['test'],['test']
Testability,"// Store the logged warnings for missing normalization sets",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:13,log,logged,13,roofit/roofitcore/test/testRooRealIntegral.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx,1,['log'],['logged']
Testability,"// Store total number of components p.d.f. of a RooSimultaneous in this component test statistic",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h:82,test,test,82,roofit/roofitcore/src/RooAbsTestStatistic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h,1,['test'],['test']
Testability,"// Store total number of events in this component test statistic",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h:50,test,test,50,roofit/roofitcore/src/RooAbsTestStatistic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h,1,['test'],['test']
Testability,// Store whether we inserted a new line break at the end of the previous; // logical line.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.cpp:77,log,logical,77,interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.cpp,1,['log'],['logical']
Testability,// Stress test IV chain generation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:10,test,test,10,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['test'],['test']
Testability,"// Stress test the asynchronous cluster pool by a deliberately unfavourable read pattern",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_extended.cxx:10,test,test,10,tree/ntuple/v7/test/ntuple_extended.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_extended.cxx,1,['test'],['test']
Testability,// Stress testing mode - disable heuristics.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/EarlyIfConversion.cpp:10,test,testing,10,interpreter/llvm-project/llvm/lib/CodeGen/EarlyIfConversion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/EarlyIfConversion.cpp,3,['test'],['testing']
Testability,// Stress testing mode disables all cost considerations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/EarlyIfConversion.cpp:10,test,testing,10,interpreter/llvm-project/llvm/lib/CodeGen/EarlyIfConversion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/EarlyIfConversion.cpp,2,['test'],['testing']
Testability,"// String Logical operators",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TString.h:10,Log,Logical,10,core/base/inc/TString.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TString.h,1,['Log'],['Logical']
Testability,"// Strings describing the cluster for this test (saved in the output file)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/inc/TProofBench.h:43,test,test,43,proof/proofbench/inc/TProofBench.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/inc/TProofBench.h,1,['test'],['test']
Testability,"// Struct RegisterRenamingInfo is used to map logical registers to register; // files.; //; // There is a RegisterRenamingInfo object for every logical register defined; // by the target. RegisteRenamingInfo objects are stored into vector; // `RegisterMappings`, and MCPhysReg IDs can be used to reference; // elements in that vector.; //; // Each RegisterRenamingInfo is owned by a PRF, and field `IndexPlusCost`; // specifies both the owning PRF, as well as the number of physical registers; // consumed at register renaming stage.; //; // Field `AllowMoveElimination` is set for registers that are used as; // destination by optimizable register moves.; //; // Field `AliasRegID` is set by writes from register moves that have been; // eliminated at register renaming stage. A move eliminated at register; // renaming stage is effectively bypassed, and its write aliases the source; // register definition.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h:46,log,logical,46,interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/HardwareUnits/RegisterFile.h,2,['log'],['logical']
Testability,"// Structures with flexible arrays have variable length, so really; // fail the size test above.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp:85,test,test,85,interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp,1,['test'],['test']
Testability,// Stub Arm/Thumb follows instruction set state at relocation site.; // TODO: We may reduce them at relaxation time and reuse freed slots.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/aarch32.cpp:3,Stub,Stub,3,interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/aarch32.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/aarch32.cpp,1,['Stub'],['Stub']
Testability,// Stub classes are pointer-aligned. Classrefs pointing at stub classes; // must set the least significant bit set to 1.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:3,Stub,Stub,3,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,2,"['Stub', 'stub']","['Stub', 'stub']"
Testability,"// Stub format is:; //; // .section __orc_stubs; // stub1:; // auipc t0, %hi(ptr1) ; PC-rel load of ptr1; // ld t0, %lo(t0); // jr t0 ; Jump to resolver; // .quad 0 ; Pad to 16 bytes; // stub2:; // auipc t0, %hi(ptr1) ; PC-rel load of ptr1; // ld t0, %lo(t0); // jr t0 ; Jump to resolver; // .quad 0; //; // ...; //; // .section __orc_ptrs; // ptr1:; // .quad 0x0; // ptr2:; // .quad 0x0; //; // ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/OrcABISupport.cpp:3,Stub,Stub,3,interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/OrcABISupport.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/OrcABISupport.cpp,1,['Stub'],['Stub']
Testability,// Stub format is:; //; // .section __orc_stubs; // stub1:; // jmpq *ptr1(%rip); // .byte 0xC4 ; <- Invalid opcode padding.; // .byte 0xF1; // stub2:; // jmpq *ptr2(%rip); //; // ...; //; // .section __orc_ptrs; // ptr1:; // .quad 0x0; // ptr2:; // .quad 0x0; //; // ...; // Populate the stubs page stubs and mark it executable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/OrcABISupport.cpp:3,Stub,Stub,3,interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/OrcABISupport.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/OrcABISupport.cpp,3,"['Stub', 'stub']","['Stub', 'stubs']"
Testability,// Stub format is:; //; // .section __orc_stubs; // stub1:; // jmpq *ptr1; // .byte 0xC4 ; <- Invalid opcode padding.; // .byte 0xF1; // stub2:; // jmpq *ptr2; //; // ...; //; // .section __orc_ptrs; // ptr1:; // .quad 0x0; // ptr2:; // .quad 0x0; //; // ...,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/OrcABISupport.cpp:3,Stub,Stub,3,interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/OrcABISupport.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/OrcABISupport.cpp,1,['Stub'],['Stub']
Testability,"// Stub format is:; //; // .section __orc_stubs; // stub1:; // ldr x16, ptr1 ; PC-rel load of ptr1; // br x16 ; Jump to resolver; // stub2:; // ldr x16, ptr2 ; PC-rel load of ptr2; // br x16 ; Jump to resolver; //; // ...; //; // .section __orc_ptrs; // ptr1:; // .quad 0x0; // ptr2:; // .quad 0x0; //; // ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/OrcABISupport.cpp:3,Stub,Stub,3,interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/OrcABISupport.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/OrcABISupport.cpp,1,['Stub'],['Stub']
Testability,"// Stub format is:; //; // .section __orc_stubs; // stub1:; // lui $t9, ptr1; // lw $t9, %lo(ptr1)($t9); // jr $t9; // stub2:; // lui $t9, ptr2; // lw $t9,%lo(ptr1)($t9); // jr $t9; //; // ...; //; // .section __orc_ptrs; // ptr1:; // .word 0x0; // ptr2:; // .word 0x0; //; // i..",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/OrcABISupport.cpp:3,Stub,Stub,3,interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/OrcABISupport.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/OrcABISupport.cpp,1,['Stub'],['Stub']
Testability,"// Stub format is:; //; // .section __orc_stubs; // stub1:; // lui $t9,ptr1; // dsll $t9,$t9,16; // daddiu $t9,$t9,%hi(ptr); // dsll $t9,$t9,16; // ld $t9,%lo(ptr); // jr $t9; // stub2:; // lui $t9,ptr1; // dsll $t9,$t9,16; // daddiu $t9,$t9,%hi(ptr); // dsll $t9,$t9,16; // ld $t9,%lo(ptr); // jr $t9; //; // ...; //; // .section __orc_ptrs; // ptr1:; // .dword 0x0; // ptr2:; // .dword 0x0; //; // ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/OrcABISupport.cpp:3,Stub,Stub,3,interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/OrcABISupport.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/OrcABISupport.cpp,1,['Stub'],['Stub']
Testability,"// Stub format is:; //; // .section __orc_stubs; // stub1:; // pcaddu12i $t0, %pc_hi20(ptr1) ; PC-rel load of ptr1; // ld.d $t0, $t0, %pc_lo12(ptr1); // jr $t0 ; Jump to resolver; // .dword 0 ; Pad to 16 bytes; // stub2:; // pcaddu12i $t0, %pc_hi20(ptr2) ; PC-rel load of ptr2; // ld.d $t0, $t0, %pc_lo12(ptr2); // jr $t0 ; Jump to resolver; // .dword 0 ; Pad to 16 bytes; // ...; //; // .section __orc_ptrs; // ptr1:; // .dword 0x0; // ptr2:; // .dword 0x0; // ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/OrcABISupport.cpp:3,Stub,Stub,3,interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/OrcABISupport.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/OrcABISupport.cpp,1,['Stub'],['Stub']
Testability,"// Stub only, to fill out the python function interface.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:3,Stub,Stub,3,bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx,1,['Stub'],['Stub']
Testability,// StubEnc now holds a valid incomplete TypeString.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp:3,Stub,StubEnc,3,interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp,1,['Stub'],['StubEnc']
Testability,// StubMap typedefs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldCheckerImpl.h:3,Stub,StubMap,3,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldCheckerImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldCheckerImpl.h,1,['Stub'],['StubMap']
Testability,// Stubs to keep the compiler happy while we implement the rest of the; // translation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:3,Stub,Stubs,3,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,1,['Stub'],['Stubs']
Testability,"// SubString Logical operators; // Bool_t operator==(const TSubString &s1, const TSubString &s2);; // Bool_t operator==(const TSubString &s1, const char *s2);; // Bool_t operator==(const TSubString &s1, const TString &s2);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TString.h:13,Log,Logical,13,core/base/inc/TString.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TString.h,1,['Log'],['Logical']
Testability,"// Suboptimal but hard to do differently: we load the full cage up to and including the requested page.; // In practice, individual LoadSealedPage calls are rare and usually full clusters are buffered.; // The support for extracting individual pages from a cage makes testing easier, however.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RPageStorageDaos.cxx:268,test,testing,268,tree/ntuple/v7/src/RPageStorageDaos.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RPageStorageDaos.cxx,1,['test'],['testing']
Testability,"// Subpath for this session in the fSandbox (<sandbox>/path-to-working-dir)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLite.cxx:46,sandbox,sandbox,46,proof/proof/src/TProofLite.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLite.cxx,1,['sandbox'],['sandbox']
Testability,// Subtract both polynomials and test if it is fully defined and zero.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/InterleavedLoadCombinePass.cpp:33,test,test,33,interpreter/llvm-project/llvm/lib/CodeGen/InterleavedLoadCombinePass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/InterleavedLoadCombinePass.cpp,1,['test'],['test']
Testability,"// Successors are unique, so we don't test against `Workset` before; // adding to `Worklist`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/IntervalPartition.cpp:38,test,test,38,interpreter/llvm-project/clang/lib/Analysis/IntervalPartition.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/IntervalPartition.cpp,1,['test'],['test']
Testability,// Suggest replacing the logical operator with the bitwise version,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:25,log,logical,25,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['log'],['logical']
Testability,// Sum of the total count values for the test profile.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:41,test,test,41,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,1,['test'],['test']
Testability,"// Suppress file-related warning on Windows throughout; // this entire test suite",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/test/TOffsetGeneration.cxx:71,test,test,71,tree/tree/test/TOffsetGeneration.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/test/TOffsetGeneration.cxx,1,['test'],['test']
Testability,// Switch back to the lexical context. The safety of this is; // enforced by an assert in EnterDeclaratorContext.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:80,assert,assert,80,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['assert'],['assert']
Testability,"// Symbol function stub already created, just relocate to it",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp:19,stub,stub,19,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp,1,['stub'],['stub']
Testability,"// SymbolizerSymbolLookUp is the symbol lookup function passed when creating; // the Symbolizer. It looks up the ReferenceValue using the info passed via the; // pointer to the struct DisassembleInfo that was passed when MCSymbolizer; // is created and returns the symbol name that matches the ReferenceValue or; // nullptr if none. The ReferenceType is passed in for the IN type of; // reference the instruction is making from the values in defined in the header; // ""llvm-c/Disassembler.h"". On return the ReferenceType can set to a specific; // Out type and the ReferenceName will also be set which is added as a comment; // to the disassembled instruction.; //; // If the symbol name is a C++ mangled name then the demangled name is; // returned through ReferenceName and ReferenceType is set to; // LLVMDisassembler_ReferenceType_DeMangled_Name .; //; // When this is called to get a symbol name for a branch target then the; // ReferenceType will be LLVMDisassembler_ReferenceType_In_Branch and then; // SymbolValue will be looked for in the indirect symbol table to determine if; // it is an address for a symbol stub. If so then the symbol name for that; // stub is returned indirectly through ReferenceName and then ReferenceType is; // set to LLVMDisassembler_ReferenceType_Out_SymbolStub.; //; // When this is called with an value loaded via a PC relative load then; // ReferenceType will be LLVMDisassembler_ReferenceType_In_PCrel_Load then the; // SymbolValue is checked to be an address of literal pointer, symbol pointer,; // or an Objective-C meta data reference. If so the output ReferenceType is; // set to correspond to that as well as setting the ReferenceName.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:1119,stub,stub,1119,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,2,['stub'],['stub']
Testability,"// TClass::GetClass explicitly calls gInterpreter->AutoLoad. When called from; // rootcling (in *_rdict.pcm file generation) it is a no op.; // FIXME: We should avoid calling autoload when we know we are not supposed; // to and transform this check into an assert.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx:257,assert,assert,257,core/metacling/src/TCling.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx,1,['assert'],['assert']
Testability,// TEST,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h:3,TEST,TEST,3,interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h,2,['TEST'],['TEST']
Testability,"// TEST instead of TEST_P because Display is single-thread only",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_vary.cxx:3,TEST,TEST,3,tree/dataframe/test/dataframe_vary.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_vary.cxx,1,['TEST'],['TEST']
Testability,"// TEST(RWLock, LargeconcurrentResetRestoreSpin); // {; // concurrentResetRestore(gRWMutexSpin,20,gRepetition / 1000);; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/thread/test/testRWLock.cxx:3,TEST,TEST,3,core/thread/test/testRWLock.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/thread/test/testRWLock.cxx,1,['TEST'],['TEST']
Testability,"// TEST*(~X,Y) == TEST*(X,Y)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:3,TEST,TEST,3,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['TEST'],['TEST']
Testability,// TEST+BSF+CMOV/BRANCH,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp:3,TEST,TEST,3,interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,4,['TEST'],['TEST']
Testability,"// TEST, CMP",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp:3,TEST,TEST,3,interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,1,['TEST'],['TEST']
Testability,"// TESTC(X,~X) == TESTC(X,-1)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:3,TEST,TESTC,3,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['TEST'],['TESTC']
Testability,// TESTPS/TESTPD only demands the sign bits of ALL the elements.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:3,TEST,TESTPS,3,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['TEST'],"['TESTPD', 'TESTPS']"
Testability,"// TESTZ(-1,X) == TESTZ(X,X)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:3,TEST,TESTZ,3,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['TEST'],['TESTZ']
Testability,"// TESTZ(AND(X,Y),AND(X,Y)) == TESTZ(X,Y)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:3,TEST,TESTZ,3,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['TEST'],['TESTZ']
Testability,"// TESTZ(AND(~X,Y),AND(~X,Y)) == TESTC(X,Y)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:3,TEST,TESTZ,3,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['TEST'],"['TESTC', 'TESTZ']"
Testability,"// TESTZ(OR(LO(X),HI(X)),OR(LO(Y),HI(Y))) -> TESTZ(X,Y); // TODO: Add COND_NE handling?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:3,TEST,TESTZ,3,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['TEST'],['TESTZ']
Testability,"// TESTZ(X,-1) == TESTZ(X,X)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:3,TEST,TESTZ,3,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['TEST'],['TESTZ']
Testability,"// TESTZ(X,~Y) == TESTC(Y,X)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:3,TEST,TESTZ,3,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['TEST'],"['TESTC', 'TESTZ']"
Testability,"// TGNumberEntry widget test dialog",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx:24,test,test,24,test/guitest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/guitest.cxx,1,['test'],['test']
Testability,"// TGraph 2D test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:13,test,test,13,test/stressHistoFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx,1,['test'],['test']
Testability,"// TH1 test classes -",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_THBinIterator.cxx:7,test,test,7,hist/hist/test/test_THBinIterator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_THBinIterator.cxx,1,['test'],['test']
Testability,"// TH2D tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_THBinIterator.cxx:8,test,tests,8,hist/hist/test/test_THBinIterator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_THBinIterator.cxx,1,['test'],['tests']
Testability,"// TH3D tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_THBinIterator.cxx:8,test,tests,8,hist/hist/test/test_THBinIterator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_THBinIterator.cxx,1,['test'],['tests']
Testability,"// TODO #1: VisitBinaryOperator implementation might not make a good; // use of the inferred ranges. In this case, we might be calculating; // everything for nothing. This being said, we should introduce some; // sort of laziness mechanism here.; //; // TODO #2: We didn't go into the nested expressions before, so it; // might cause us spending much more time doing the inference.; // This can be a problem for deeply nested expressions that are; // involved in conditions and get tested continuously. We definitely; // need to address this issue and introduce some sort of caching; // in here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp:482,test,tested,482,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp,1,['test'],['tested']
Testability,// TODO - bigendian once we have test coverage.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:33,test,test,33,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,2,['test'],['test']
Testability,// TODO -- move this test into llvm::isInstructionTriviallyDead,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ADCE.cpp:21,test,test,21,interpreter/llvm-project/llvm/lib/Transforms/Scalar/ADCE.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ADCE.cpp,1,['test'],['test']
Testability,// TODO Add support for big-endian when we have a test case.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:50,test,test,50,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,3,['test'],['test']
Testability,"// TODO If a block is an eh pad, or it has address taken, we don't remove; // it. Removing such blocks is possible, but it probably requires a more; // complex logic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GCEmptyBasicBlocks.cpp:160,log,logic,160,interpreter/llvm-project/llvm/lib/CodeGen/GCEmptyBasicBlocks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GCEmptyBasicBlocks.cpp,1,['log'],['logic']
Testability,// TODO Implement feature set parsing logics,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/MCTargetDesc/M68kMCTargetDesc.cpp:38,log,logics,38,interpreter/llvm-project/llvm/lib/Target/M68k/MCTargetDesc/M68kMCTargetDesc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/MCTargetDesc/M68kMCTargetDesc.cpp,1,['log'],['logics']
Testability,"// TODO Send this event to Three.js DevTools; // console.log( 'WebGLProgram', cacheKey );",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:57,log,log,57,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['log']
Testability,"// TODO Test a batch fit that uses categories once categories can be passed through the batch interface.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/testGaussBinned.cxx:8,Test,Test,8,roofit/roofit/test/vectorisedPDFs/testGaussBinned.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/testGaussBinned.cxx,1,['Test'],['Test']
Testability,// TODO test all these cases,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp:8,test,test,8,interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,1,['test'],['test']
Testability,"// TODO(deanm): Figure out this clearing vs code growth logic better. I; // have an feeling that it should just happen somewhere else, for now it; // is awkward between when we grow past the max and then hit a clear code.; // For now just check if we hit the max 12-bits (then a clear code should; // follow, also of course encoded in 12-bits).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:56,log,logic,56,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['logic']
Testability,"// TODO(jalopezg): improve test coverage by adding other field types",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_basics.cxx:27,test,test,27,tree/ntuple/v7/test/ntuple_basics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_basics.cxx,1,['test'],['test']
Testability,"// TODO(jingyue): We could trace into integer/pointer casts, such as; // inttoptr, ptrtoint, bitcast, and addrspacecast. We choose to handle only; // integers because it gives good enough results for our benchmarks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SeparateConstOffsetFromGEP.cpp:204,benchmark,benchmarks,204,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SeparateConstOffsetFromGEP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SeparateConstOffsetFromGEP.cpp,1,['benchmark'],['benchmarks']
Testability,"// TODO(mtrofin): when we support optional rewards, this can go away. In the; // meantime, we log the ""pretend"" reward (0) for the previous observation; // before starting a new one.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MLRegAllocEvictAdvisor.cpp:94,log,log,94,interpreter/llvm-project/llvm/lib/CodeGen/MLRegAllocEvictAdvisor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MLRegAllocEvictAdvisor.cpp,2,['log'],['log']
Testability,"// TODO: Add conjugated or fold, check whether it is safe for logical and/or.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:62,log,logical,62,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,1,['log'],['logical']
Testability,// TODO: Add more X86ISD opcodes once we have test coverage.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:46,test,test,46,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['test'],['test']
Testability,// TODO: Add move constructor and operator= when a testable situation arises.; /// Returns a single error that contains messages for all stored Errors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h:51,test,testable,51,interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ifs/ErrorCollector.h,1,['test'],['testable']
Testability,"// TODO: Add std::float16 tests once available (from C++23)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_types.cxx:26,test,tests,26,tree/ntuple/v7/test/ntuple_types.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_types.cxx,1,['test'],['tests']
Testability,"// TODO: Adjust states of args to constructors in the same way that arguments to; // function calls are handled.; // TODO: Use information from tests in for- and while-loop conditional.; // TODO: Add notes about the actual and expected state for; // TODO: Correctly identify unreachable blocks when chaining boolean operators.; // TODO: Adjust the parser and AttributesList class to support lists of; // identifiers.; // TODO: Warn about unreachable code.; // TODO: Switch to using a bitmap to track unreachable blocks.; // TODO: Handle variable definitions, e.g. bool valid = x.isValid();; // if (valid) ...; (Deferred); // TODO: Take notes on state transitions to provide better warning messages.; // (Deferred); // TODO: Test nested conditionals: A) Checking the same value multiple times,; // and 2) Checking different values. (Deferred)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/Consumed.cpp:144,test,tests,144,interpreter/llvm-project/clang/lib/Analysis/Consumed.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/Consumed.cpp,2,"['Test', 'test']","['Test', 'tests']"
Testability,"// TODO: Allow VPSEL and VPNOT, we currently cannot because:; // 1) It will use the VPR as a predicate operand, but doesn't have to be; // instead a VPT block, which means we can assert while building up; // the VPT block because we don't find another VPT or VPST to being a new; // one.; // 2) VPSEL still requires a VPR operand even after tail predicating,; // which means we can't remove it unless there is another; // instruction, such as vcmp, that can provide the VPR def.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMLowOverheadLoops.cpp:179,assert,assert,179,interpreter/llvm-project/llvm/lib/Target/ARM/ARMLowOverheadLoops.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMLowOverheadLoops.cpp,1,['assert'],['assert']
Testability,// TODO: Allow just 4 and 8 after all tests are fixed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h:38,test,tests,38,interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,1,['test'],['tests']
Testability,// TODO: Allow non-icmp loop test.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp:29,test,test,29,interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,1,['test'],['test']
Testability,// TODO: Assert there's exactly one result.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp:9,Assert,Assert,9,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp,1,['Assert'],['Assert']
Testability,"// TODO: Break this up and make easier to understand. This is; // pretty convoluted due to the large number of cases it has to; // deal with:; // i) existing physical and/or logical;; // ii) external provider may or may not supply bounding box;; // iii) local/global reference frame;; // iv) deferred filling of some sections of the buffer;; // v) internal or external physical IDs;; // vi) composite components as special case.; //; // The buffer filling means the function is re-entrant which adds; // to complication.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScenePad.cxx:174,log,logical,174,graf3d/gl/src/TGLScenePad.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScenePad.cxx,1,['log'],['logical']
Testability,"// TODO: Can we assert that both operands of a shuffle-select are not undef; // (otherwise, it would have been folded by instsimplify?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp:16,assert,assert,16,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,1,['assert'],['assert']
Testability,// TODO: Changed as it's implemented in the translator. See test/atomicrmw.ll; // auto ScSem =; // getMemSemanticsForStorageClass(GR.getPointerStorageClass(Ptr));,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVInstructionSelector.cpp:60,test,test,60,interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVInstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVInstructionSelector.cpp,1,['test'],['test']
Testability,"// TODO: Check more combining cases for me.; // Here we check the cmp use number to decide do combining or not.; // Currently we only get 2 tests about combining ""MOVMSK(CONCAT(..))""; // and ""MOVMSK(PCMPEQ(..))"" are fit to use this constraint.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:140,test,tests,140,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['test'],['tests']
Testability,// TODO: Copied from DAG implementation. Verify logic and document how this; // actually works.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp:48,log,logic,48,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp,1,['log'],['logic']
Testability,"// TODO: Enable this assert when targets are fixed.; //assert(isMaxCallFrameSizeComputed() && ""MaxCallFrameSize not computed yet"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFrameInfo.h:21,assert,assert,21,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFrameInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFrameInfo.h,2,['assert'],['assert']
Testability,// TODO: Enhance logic for other BinOps and remove this check.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp:17,log,logic,17,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,1,['log'],['logic']
Testability,// TODO: Enhance logic for other casts and remove this check.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp:17,log,logic,17,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,1,['log'],['logic']
Testability,"// TODO: Eventually, the lowering of these nodes should be informed by or; // deferred to the GC strategy for the function in which they appear. For; // now, however, they must be lowered to something. Since they are logically; // no-ops in the case of a null GC strategy (or a GC strategy which does not; // require special handling for these nodes), lower them as literal NOOPs for; // the time being.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:217,log,logically,217,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['log'],['logically']
Testability,"// TODO: Factor the logic of ""what constitutes as an entity being passed; // into a function call"" out by reusing the code in; // NoStoreFuncVisitor::maybeEmitNoteForParameters, maybe by incorporating; // the printing technology in UninitializedObject's FieldChainInfo.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MallocChecker.cpp:20,log,logic,20,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MallocChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MallocChecker.cpp,1,['log'],['logic']
Testability,// TODO: Finish this list and add an assert that we've handled them; // all.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.cpp:37,assert,assert,37,interpreter/llvm-project/clang/lib/Basic/Targets/PPC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/PPC.cpp,1,['assert'],['assert']
Testability,// TODO: Generate as many BenchmarkCode as needed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.cpp:26,Benchmark,BenchmarkCode,26,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.cpp,1,['Benchmark'],['BenchmarkCode']
Testability,// TODO: Handle BroadcastSizeInBits < SizeInBits when we have test; // coverage.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:62,test,test,62,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['test'],['test']
Testability,"// TODO: Ideally this would be controlled automatically by detecting that we; // are linking with an allocator that supports these interfaces, rather than; // an internal option (which would still be needed for tests, however). For; // example, if the library exported a symbol like __malloc_hot_cold the linker; // could recognize that and set a flag in the lto::Config.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/LTO.cpp:211,test,tests,211,interpreter/llvm-project/llvm/lib/LTO/LTO.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/LTO.cpp,1,['test'],['tests']
Testability,"// TODO: If BB lies in an inner loop of CurLoop, this will traverse over all; // blocks of this inner loop, even those that are always executed AFTER the; // BB. It may make our analysis more conservative than it could be, see test; // @nested and @nested_no_throw in test/Analysis/MustExecute/loop-header.ll.; // We can ignore backedge of all loops containing BB to get a sligtly more; // optimistic result.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MustExecute.cpp:227,test,test,227,interpreter/llvm-project/llvm/lib/Analysis/MustExecute.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MustExecute.cpp,2,['test'],['test']
Testability,"// TODO: If the RTLIB::Libcall-taking flavor of GetSignature remains unused; // other than here, just roll its logic into this version.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRuntimeLibcallSignatures.cpp:111,log,logic,111,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRuntimeLibcallSignatures.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRuntimeLibcallSignatures.cpp,1,['log'],['logic']
Testability,"// TODO: If the attribute's kind appears in the list of duplicates, that is; // because it is a target-specific attribute that appears multiple times.; // It would be beneficial to test whether the duplicates are ""similar; // enough"" to each other to not cause problems. For instance, check that; // the spellings are identical, and custom parsing rules match, etc.; // We need to generate struct instances based off ParsedAttrInfo from; // ParsedAttr.cpp.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:181,test,test,181,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,1,['test'],['test']
Testability,"// TODO: If we could guarantee that InstSimplify would handle all of the; // constant-value-based preconditions in the folds below, then we could assert; // those conditions rather than checking them. This is difficult because of; // undef/poison (PR34838).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:146,assert,assert,146,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['assert'],['assert']
Testability,"// TODO: Implement the rest of the logic here. For example, two accesses; // with same final access types result in an access to an object of that final; // access type regardless of their base types.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp:35,log,logic,35,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp,2,['log'],['logic']
Testability,// TODO: It is not clear whether comparing parameters is necessary (i.e.; // different functions with same params). Consider removing this (as no test; // fail w/o it).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp:146,test,test,146,interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,1,['test'],['test']
Testability,"// TODO: It turns out we need a decent amount of plumbing for the target; // specific bits to determine number of prefixes its safe to add. Various; // targets (older chips mostly, but also Atom family) encounter decoder; // stalls with too many prefixes. For testing purposes, we set the value; // externally for the moment.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86AsmBackend.cpp:260,test,testing,260,interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86AsmBackend.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86AsmBackend.cpp,1,['test'],['testing']
Testability,"// TODO: KTEST is not a replacement for TEST due to flag differences. Need; // to prove only Z flag is used.; // createReplacer(X86::TEST32rr, X86::KTESTDrr);; // createReplacer(X86::TEST64rr, X86::KTESTQrr);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86DomainReassignment.cpp:40,TEST,TEST,40,interpreter/llvm-project/llvm/lib/Target/X86/X86DomainReassignment.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86DomainReassignment.cpp,1,['TEST'],['TEST']
Testability,"// TODO: KTEST is not a replacement for TEST due to flag differences. Need; // to prove only Z flag is used.; // createReplacer(X86::TEST8rr, X86::KTESTBrr);; // createReplacer(X86::TEST16rr, X86::KTESTWrr);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86DomainReassignment.cpp:40,TEST,TEST,40,interpreter/llvm-project/llvm/lib/Target/X86/X86DomainReassignment.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86DomainReassignment.cpp,1,['TEST'],['TEST']
Testability,// TODO: Make this an assertion once RenamedOp is fully accurate.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/PredicateInfo.cpp:22,assert,assertion,22,interpreter/llvm-project/llvm/lib/Transforms/Utils/PredicateInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/PredicateInfo.cpp,3,['assert'],['assertion']
Testability,// TODO: Many of these folds could use LogicalAnd/LogicalOr.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:39,Log,LogicalAnd,39,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,2,['Log'],"['LogicalAnd', 'LogicalOr']"
Testability,// TODO: MinMax - although these haven't been encountered in the test suite.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:65,test,test,65,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['test'],['test']
Testability,// TODO: Model this case as 2 shuffles or a 'logical and' plus shuffle?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp:45,log,logical,45,interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp,1,['log'],['logical']
Testability,// TODO: More tuning on benchmarks and metrics with changes as needed; // would apply to all settings below to enable performance.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVTargetTransformInfo.cpp:24,benchmark,benchmarks,24,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVTargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVTargetTransformInfo.cpp,1,['benchmark'],['benchmarks']
Testability,// TODO: Move this logic to getReservedRegs(); // Reserve the SGPR(s) to save/restore EXEC for WWM spill/copy handling.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp:19,log,logic,19,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,1,['log'],['logic']
Testability,"// TODO: Need version fcmpToClassTest which returns implied class when the; // compare isn't a complete class test. e.g. > 1.0 implies fcPositive, but; // isn't implementable as a class call.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:110,test,test,110,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['test'],['test']
Testability,// TODO: Needs a test case once we have a pattern that uses this.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutorImpl.h:17,test,test,17,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutorImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutorImpl.h,1,['test'],['test']
Testability,"// TODO: One of these directions is fine with logical and/or, the other could; // be supported by inserting freeze.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:46,log,logical,46,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,1,['log'],['logical']
Testability,// TODO: Print out the frame on one line with to make it easier for deep; // callstacks once we have a test to check valid YAML is generated.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h:103,test,test,103,interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/MemProf.h,1,['test'],['test']
Testability,// TODO: Remove this work-around after fixing the scheduler and enable the; // assert above.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInsertWaitcnts.cpp:79,assert,assert,79,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInsertWaitcnts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInsertWaitcnts.cpp,1,['assert'],['assert']
Testability,"// TODO: Remove this work-around, enable the assert for Bug 457939; // after fixing the scheduler. Also, the Shader Compiler code is; // independent of target.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInsertWaitcnts.cpp:45,assert,assert,45,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInsertWaitcnts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInsertWaitcnts.cpp,1,['assert'],['assert']
Testability,// TODO: Replace with candidate logging for instruction grouping; // later.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInsertSingleUseVDST.cpp:32,log,logging,32,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInsertSingleUseVDST.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInsertSingleUseVDST.cpp,1,['log'],['logging']
Testability,// TODO: Revisit restricting SPIR-V to logical once we've figured out how to; // handle PhysicalStorageBuffer64 memory model,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp:39,log,logical,39,interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp,1,['log'],['logical']
Testability,// TODO: See if there is a more generic way we can test if the replacement; // instruction is supported.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FixupInstTuning.cpp:51,test,test,51,interpreter/llvm-project/llvm/lib/Target/X86/X86FixupInstTuning.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FixupInstTuning.cpp,1,['test'],['test']
Testability,// TODO: Setting the minimum jump table entries needed before a; // switch is transformed to a jump table to 100 to avoid creating jump tables; // as this was causing bad performance compared to a large group of if; // statements. Re-evaluate this on new benchmarks.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Lanai/LanaiISelLowering.cpp:255,benchmark,benchmarks,255,interpreter/llvm-project/llvm/lib/Target/Lanai/LanaiISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Lanai/LanaiISelLowering.cpp,1,['benchmark'],['benchmarks']
Testability,// TODO: Should move this logic into TargetParser,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AMDGPU.cpp:26,log,logic,26,interpreter/llvm-project/clang/lib/Basic/Targets/AMDGPU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/AMDGPU.cpp,1,['log'],['logic']
Testability,// TODO: Test dumping .debug_gnu_pubnames section.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/dwarf2yaml.cpp:9,Test,Test,9,interpreter/llvm-project/llvm/tools/obj2yaml/dwarf2yaml.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/dwarf2yaml.cpp,1,['Test'],['Test']
Testability,// TODO: Test dumping .debug_gnu_pubtypes section.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/dwarf2yaml.cpp:9,Test,Test,9,interpreter/llvm-project/llvm/tools/obj2yaml/dwarf2yaml.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/obj2yaml/dwarf2yaml.cpp,1,['Test'],['Test']
Testability,// TODO: Test this error.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h:9,Test,Test,9,interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELFObjectFile.h,22,['Test'],['Test']
Testability,"// TODO: The above 4 cases are not exhaustive. In particular, it is possible; // for Current to be incomparable with StaticLowerBound, StaticUpperBound,; // or both.; //; // For example, suppose Foo<T> and Bar<T> are unrelated types.; //; // Foo<T> *f = ...; // Bar<T> *b = ...; //; // id t1 = b;; // f = t1;; // id t2 = f; // StaticLowerBound is Foo<T>, Current is Bar<T>; //; // We should either constrain the callers of this function so that the stated; // preconditions hold (and assert it) or rewrite the function to expicitly; // handle the additional cases.; // Precondition",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DynamicTypePropagation.cpp:484,assert,assert,484,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DynamicTypePropagation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DynamicTypePropagation.cpp,1,['assert'],['assert']
Testability,"// TODO: The check for UnwindHelpFrameIdx against max() below (and the; // second check further below) can be removed if MS C++ unwinding is; // implemented for ARM, when test/CodeGen/ARM/Windows/wineh-basic.ll; // passes without the check.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/WinException.cpp:171,test,test,171,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/WinException.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/WinException.cpp,1,['test'],['test']
Testability,"// TODO: The checksum followed by the decompression means we iterate through the buffer twice.; // We should perform some performance tests to see whether we can interleave the two -- i.e., at; // what size of chunks does interleaving (avoiding two fetches from RAM) improve enough for the; // extra function call costs? NOTE that ROOT limits the buffer size to 16MB.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/lz4/src/ZipLZ4.cxx:134,test,tests,134,core/lz4/src/ZipLZ4.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/lz4/src/ZipLZ4.cxx,1,['test'],['tests']
Testability,// TODO: The default logic is inherited from code in CodeGenPrepare.; // The opcode should not make a difference by default?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:21,log,logic,21,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['log'],['logic']
Testability,"// TODO: The logic here checks only that the function is address taken,; // not that the address takers are live. This can be updated to check; // their liveness and emit fewer jumptable entries once monolithic LTO; // builds also emit summaries.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp:13,log,logic,13,interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,1,['log'],['logic']
Testability,"// TODO: The motivating case for this transform is an x86 AVX1 target. That; // target has temptingly almost legal versions of bitwise logic ops in 256-bit; // flavors, but no other 256-bit integer support. This could be extended to; // handle any binop, but that may require fixing/adding other folds to avoid; // codegen regressions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:135,log,logic,135,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['log'],['logic']
Testability,"// TODO: There are cases a local function call need a call stub.; // 1. Caller uses TOC, the callee doesn't, need a r2 save stub.; // 2. Caller doesn't use TOC, the callee does, need a r12 setup stub.; // 3. Branching target is out of range.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ppc64.h:59,stub,stub,59,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ppc64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/JITLink/ppc64.h,3,['stub'],['stub']
Testability,"// TODO: There are many more machine instruction opcodes to match:; // 1. Other data types (integer, vectors); // 2. Other math / logic operations (xor, or); // 3. Other forms of the same operation (intrinsics and other variants)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:130,log,logic,130,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,2,['log'],['logic']
Testability,"// TODO: There is only ARM far stub now. We should add the Thumb stub,; // and stubs for branches Thumb - ARM and ARM - Thumb.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp:31,stub,stub,31,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp,3,['stub'],"['stub', 'stubs']"
Testability,"// TODO: These asserts should be updated as more support for the toc data; // transformation is added (struct support, etc.).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:15,assert,asserts,15,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,1,['assert'],['asserts']
Testability,"// TODO: These control memcmp expansion in CGP and could be raised higher, but; // that needs to benchmarked and balanced with the potential use of vector; // load/store types (PR33329, PR33914).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:97,benchmark,benchmarked,97,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['benchmark'],['benchmarked']
Testability,"// TODO: These just exist to reduce test diff, we can drop them if we like.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp:36,test,test,36,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,1,['test'],['test']
Testability,"// TODO: This is experimental and in particular, we do not model; // the live range splitting done by spilling correctly.; // We would need a deep integration with the spiller to do the; // right thing here. Anyway, that is still good for early testing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocGreedy.cpp:245,test,testing,245,interpreter/llvm-project/llvm/lib/CodeGen/RegAllocGreedy.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocGreedy.cpp,1,['test'],['testing']
Testability,"// TODO: This logic could be encoded into the table above and handled in the; // switch below.; // If either of the casts are a bitcast from scalar to vector, disallow the; // merging. However, any pair of bitcasts are allowed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Instructions.cpp:14,log,logic,14,interpreter/llvm-project/llvm/lib/IR/Instructions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Instructions.cpp,1,['log'],['logic']
Testability,// TODO: This logic is the same as in Malloc checker.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MacOSKeychainAPIChecker.cpp:14,log,logic,14,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MacOSKeychainAPIChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MacOSKeychainAPIChecker.cpp,1,['log'],['logic']
Testability,// TODO: This may be worth removing. Check regression tests for diffs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:54,test,tests,54,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,3,['test'],['tests']
Testability,"// TODO: This switch could include FNEG and the x86-specific FP logic ops; // (FAND, FANDN, FOR, FXOR). But that may require enhancements to avoid; // missed load folding and fma+fneg combining.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:64,log,logic,64,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['log'],['logic']
Testability,// TODO: Try inverting the test with getInvertedFPClassTest like the DAG; // version,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp:27,test,test,27,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,1,['test'],['test']
Testability,// TODO: Use isNullOrNullSplat() to distinguish constants with undefs?; // TODO: Can we assert that both operands are not zeros (because that should; // get simplified at node creation time)?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:88,assert,assert,88,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['assert'],['assert']
Testability,// TODO: Use signatures in WebAssemblyMachineFunctionInfo too and unify; // the param logic here with ComputeSignatureVTs,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyISelLowering.cpp:86,log,logic,86,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyISelLowering.cpp,1,['log'],['logic']
Testability,// TODO: Verify whether this is safe for logical and/or.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:41,log,logical,41,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,1,['log'],['logical']
Testability,"// TODO: We can add more logic to computeInfo to improve performance.; // Example: For aggregate arguments that fit in a register, we could; // use getDirectInReg (as is done below for structs containing a single; // floating-point value) to avoid pushing them to memory on function; // entry. This would require changing the logic in PPCISelLowering; // when lowering the parameters in the caller and args in the callee.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp:25,log,logic,25,interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp,2,['log'],['logic']
Testability,"// TODO: We can do arbitrary slidedowns, but for now only support extracting; // the upper half of a vector until we have more test coverage.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:127,test,test,127,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['test'],['test']
Testability,"// TODO: We could add the byref attribute if not byval, but it would; // require updating many testcases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:95,test,testcases,95,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,1,['test'],['testcases']
Testability,// TODO: We don't currently have any tests that exercise this code path.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:37,test,tests,37,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,1,['test'],['tests']
Testability,// TODO: We may be able to use this for types other than scalable; // vectors and fix those tests that expect BUILD_VECTOR to be used,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:92,test,tests,92,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,1,['test'],['tests']
Testability,// TODO: We might be able to relax the VT check but we don't currently; // have any isBinOp() that has different result/ops VTs so play safe until; // we have test coverage.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:159,test,test,159,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['test'],['test']
Testability,// TODO: We probably ought to revisit cases where the select and FP; // instructions have different flags and add tests to ensure the; // behaviour is correct.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp:114,test,tests,114,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,1,['test'],['tests']
Testability,// TODO: We should generate better code and update the cost model for; // predicated uniform stores. Today they are treated as any other; // predicated store (see added test cases in; // invariant-store-vectorization.ll).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:169,test,test,169,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['test'],['test']
Testability,// TODO: When more complex cases are handled VarLoc.Expr should be; // built appropriately rather than always using an empty DIExpression.; // The assert below is a reminder.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:147,assert,assert,147,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['assert'],['assert']
Testability,"// TODO: Why are some tests have ""mingw"" listed as OS?; // assert(STI.getTargetTriple().getOS() == Triple::UnknownOS);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/MCTargetDesc/AMDGPUTargetStreamer.cpp:22,test,tests,22,interpreter/llvm-project/llvm/lib/Target/AMDGPU/MCTargetDesc/AMDGPUTargetStreamer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/MCTargetDesc/AMDGPUTargetStreamer.cpp,2,"['assert', 'test']","['assert', 'tests']"
Testability,"// TODO: Why are some tests have ""mingw"" listed as OS?; // llvm_unreachable(""Unsupported OS"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/MCTargetDesc/AMDGPUTargetStreamer.cpp:22,test,tests,22,interpreter/llvm-project/llvm/lib/Target/AMDGPU/MCTargetDesc/AMDGPUTargetStreamer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/MCTargetDesc/AMDGPUTargetStreamer.cpp,1,['test'],['tests']
Testability,"// TODO: add error handling tests that trigger the RooNaNPacker error handling paths (see testNaNPacker for example; // setups). In particular a fit of a simultaneous or constrained likelihood to trigger the RooSumL path which has; // additional handling of the packed NaNs that isn't tested now.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:28,test,tests,28,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,3,['test'],"['testNaNPacker', 'tested', 'tests']"
Testability,// TODO: add support for big-endian when we have a test case.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:51,test,test,51,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['test'],['test']
Testability,"// TODO: add tests covering all constOptimizeTestStatistic opcode cases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx:13,test,tests,13,roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx,1,['test'],['tests']
Testability,"// TODO: address the below limitation to handle GFX11 BVH instructions; // Bail if address is not a VGPR32. That should be possible to extend the; // optimization to work with subregs of a wider register tuples, but the; // logic to find free registers will be much more complicated with much; // less chances for success. That seems reasonable to assume that in most; // cases a tuple is used because a vector variable contains different; // parts of an address and it is either already consecutive or cannot; // be reassigned if not. If needed it is better to rely on register; // coalescer to process such address tuples.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNNSAReassign.cpp:224,log,logic,224,interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNNSAReassign.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNNSAReassign.cpp,1,['log'],['logic']
Testability,// TODO: assert Regions are sorted descending by pressure,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNIterativeScheduler.cpp:9,assert,assert,9,interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNIterativeScheduler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNIterativeScheduler.cpp,1,['assert'],['assert']
Testability,"// TODO: assert based on the load type:; // ldb needs no alignment,; // ldh needs 2 byte alignment; // ld needs 4 byte alignment",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARC/ARCRegisterInfo.cpp:9,assert,assert,9,interpreter/llvm-project/llvm/lib/Target/ARC/ARCRegisterInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARC/ARCRegisterInfo.cpp,1,['assert'],['assert']
Testability,"// TODO: assert(!Dbg->isInvalidated() && ""Transfer of invalid dbg value"");; // Create a new location ops vector that is equal to the old vector, but; // with each instance of FromLocOp replaced with ToLocOp.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:9,assert,assert,9,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,1,['assert'],['assert']
Testability,"// TODO: else we should assert that there was, in fact, a policy choice to; // not insert a entry safepoint poll.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/PlaceSafepoints.cpp:24,assert,assert,24,interpreter/llvm-project/llvm/lib/Transforms/Scalar/PlaceSafepoints.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/PlaceSafepoints.cpp,1,['assert'],['assert']
Testability,"// TODO: handle conditional operators here; // For calls and message sends, use the retained-call logic.; // Delegate inits are a special case in that they're the only; // returns-retained expression that *isn't* surrounded by; // a consume.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:98,log,logic,98,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,1,['log'],['logic']
Testability,"// TODO: implement something along these lines (the following is pseudocode); // TEST(worker, loop); //{; // do_fork();; // if (on_master()) {; // wait();; // terminate_worker();; // } else if (on_worker()) {; // worker_loop();; // }; //}",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/test/test_worker.cxx:81,TEST,TEST,81,roofit/multiprocess/test/test_worker.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/test/test_worker.cxx,1,['TEST'],['TEST']
Testability,// TODO: isKnownPredicate doesnt work well when one SCEV is loop carried (by; // L0) and the other is not. We could check if it is monotone and test; // the beginning and end value instead.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp:144,test,test,144,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFuse.cpp,1,['test'],['test']
Testability,"// TODO: make TestGaussWeighted work on Windows",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/testGauss.cxx:14,Test,TestGaussWeighted,14,roofit/roofit/test/vectorisedPDFs/testGauss.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/testGauss.cxx,2,['Test'],['TestGaussWeighted']
Testability,// TODO: make condition below an assert after fixing ballot bitwidth.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUISelDAGToDAG.cpp:33,assert,assert,33,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUISelDAGToDAG.cpp,1,['assert'],['assert']
Testability,"// TODO: merge with the previous HFFixtureFix test suite once the codegen AD; // supports all of HistFactory",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/testHistFactory.cxx:46,test,test,46,roofit/histfactory/test/testHistFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/testHistFactory.cxx,1,['test'],['test']
Testability,"// TODO: need to add a test case for ""Unknown"" and other SMC.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/BinaryFormat/XCOFF.cpp:23,test,test,23,interpreter/llvm-project/llvm/lib/BinaryFormat/XCOFF.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/BinaryFormat/XCOFF.cpp,1,['test'],['test']
Testability,"// TODO: passing a scalar root to toYAML() asserts:; // (PolymorphicTraits<T>::getKind(Val) != NodeKind::Scalar &&; // ""plain scalar documents are not supported""); // To avoid this crash we print the raw data instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp:43,assert,asserts,43,interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,1,['assert'],['asserts']
Testability,// TODO: should we care about decl qualifiers?; // Check whether the declarator has the expected form. We walk; // from the inside out in order to make the block logic work.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:162,log,logic,162,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,1,['log'],['logic']
Testability,// TODO: sync the logic between instrHasImmForm() and ImmToIdxMap.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp:18,log,logic,18,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,1,['log'],['logic']
Testability,"// TODO: test reading of ""klassVec.v1""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/rfield_vector.cxx:9,test,test,9,tree/ntuple/v7/test/rfield_vector.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/rfield_vector.cxx,1,['test'],['test']
Testability,// TODO: test this error.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/ELFDump.cpp:9,test,test,9,interpreter/llvm-project/llvm/tools/llvm-objdump/ELFDump.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/ELFDump.cpp,1,['test'],['test']
Testability,// TODO: test using android subtarget when we support @llvm.thread.pointer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp:9,test,test,9,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp,1,['test'],['test']
Testability,// TODO: the following blocks of logic when we have fence.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInsertWaitcnts.cpp:33,log,logic,33,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInsertWaitcnts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInsertWaitcnts.cpp,1,['log'],['logic']
Testability,"// TODO: this environment is not implemented in Triple, we need to decide; // how to standardize its support. For now, let's assume SPIR-V with physical; // addressing is OpenCL, and Logical addressing is Vulkan.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVSubtarget.h:183,Log,Logical,183,interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVSubtarget.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVSubtarget.h,1,['Log'],['Logical']
Testability,// TODO: this implementation is a temporary placeholder which does just; // enough to allow other aspects of code generation to be tested.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/LoongArch/LoongArchRegisterInfo.cpp:131,test,tested,131,interpreter/llvm-project/llvm/lib/Target/LoongArch/LoongArchRegisterInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/LoongArch/LoongArchRegisterInfo.cpp,1,['test'],['tested']
Testability,// TODO: this is too restrictive; lifting this restriction requires more tests,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:73,test,tests,73,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['test'],['tests']
Testability,"// TODO: this probably needs to be revisited:; // Logical SPIR-V has no pointer size, so any fixed pointer size would be; // wrong. The choice to default to 32 or 64 is just motivated by another; // memory model used for graphics: PhysicalStorageBuffer64. But it shouldn't; // mean anything.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVTargetMachine.cpp:50,Log,Logical,50,interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVTargetMachine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVTargetMachine.cpp,1,['Log'],['Logical']
Testability,"// TODO: we could use Ahmes multiplication; // and the Miller & Brown algorithm; // for linear recurrences to get O(log n) steps, but it's unclear if; // it'd be beneficial in this case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/__clang_hip_math.h:116,log,log,116,interpreter/llvm-project/clang/lib/Headers/__clang_hip_math.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/__clang_hip_math.h,1,['log'],['log']
Testability,"// TODO: we could use Ahmes multiplication; // and the Miller & Brown algorithm; // for linear recurrences to get O(log n) steps, but it's unclear if; // it'd be beneficial in this case. Placeholder until OCML adds; // support.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/__clang_hip_math.h:116,log,log,116,interpreter/llvm-project/clang/lib/Headers/__clang_hip_math.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/__clang_hip_math.h,3,['log'],['log']
Testability,// TODO: write a graphviz dumper for SCCs (see ModuleSummaryIndex::exportToDot); // then delete this function and update its tests,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/ModuleSummaryIndex.cpp:125,test,tests,125,interpreter/llvm-project/llvm/lib/IR/ModuleSummaryIndex.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/ModuleSummaryIndex.cpp,1,['test'],['tests']
Testability,"// TODO:; // Additional cases that we need to add to this file:; //; // cbrt:; // * cbrt(expN(X)) -> expN(x/3); // * cbrt(sqrt(x)) -> pow(x,1/6); // * cbrt(cbrt(x)) -> pow(x,1/9); //; // exp, expf, expl:; // * exp(log(x)) -> x; //; // log, logf, logl:; // * log(exp(x)) -> x; // * log(exp(y)) -> y*log(e); // * log(exp10(y)) -> y*log(10); // * log(sqrt(x)) -> 0.5*log(x); //; // pow, powf, powl:; // * pow(sqrt(x),y) -> pow(x,y*0.5); // * pow(pow(x,y),z)-> pow(x,y*z); //; // signbit:; // * signbit(cnst) -> cnst'; // * signbit(nncst) -> 0 (if pstv is a non-negative constant); //; // sqrt, sqrtf, sqrtl:; // * sqrt(expN(x)) -> expN(x*0.5); // * sqrt(Nroot(x)) -> pow(x,1/(2*N)); // * sqrt(pow(x,y)) -> pow(|x|,y*0.5); //; //===----------------------------------------------------------------------===//; // Fortified Library Call Optimizations; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp:214,log,log,214,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp,11,['log'],"['log', 'logf', 'logl']"
Testability,"// TODOD FIXME: Enable feature predicate checks once all the test pass.; // ARM_MC::verifyInstructionPredicates(MI->getOpcode(),; // getSubtargetInfo().getFeatureBits());",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMAsmPrinter.cpp:61,test,test,61,interpreter/llvm-project/llvm/lib/Target/ARM/ARMAsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMAsmPrinter.cpp,1,['test'],['test']
Testability,"// TObject* o = fRootBaseDir->FindObject(outputDir);; // if (o != 0) {; // Log() << kFATAL << ""A "" << o->ClassName() << "" with name "" << o->GetName() << "" already exists in ""; // << fRootBaseDir->GetPath() << ""(""<<outputDir<<"")"" << Endl;; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:75,Log,Log,75,tmva/tmva/src/TransformationHandler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx,1,['Log'],['Log']
Testability,// Take over the existing function. The frontend emits a weak stub so that the; // linker knows about the symbol; this pass replaces the function body.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/CrossDSOCFI.cpp:62,stub,stub,62,interpreter/llvm-project/llvm/lib/Transforms/IPO/CrossDSOCFI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/CrossDSOCFI.cpp,1,['stub'],['stub']
Testability,// Take/Create the indirect stubs manager builder.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/LLJIT.cpp:28,stub,stubs,28,interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/LLJIT.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/LLJIT.cpp,1,['stub'],['stubs']
Testability,// Takes no arguments. Set the is_stmt register of the state; // machine to the logical negation of its current value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFDebugLine.cpp:80,log,logical,80,interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFDebugLine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFDebugLine.cpp,1,['log'],['logical']
Testability,"// Takes the log base 2 of the alignment and shifts the result into the 5 most; // significant bits of a byte, then or's in the csect type into the least; // significant 3 bits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/XCOFFObjectWriter.cpp:13,log,log,13,interpreter/llvm-project/llvm/lib/MC/XCOFFObjectWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/XCOFFObjectWriter.cpp,1,['log'],['log']
Testability,// Targets can implement their own snippet generators/benchmarks runners by; // implementing these.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h:54,benchmark,benchmarks,54,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Target.h,1,['benchmark'],['benchmarks']
Testability,"// Technically, these are handled the same way as e.g. defines, but; // the way we consistently unescape the unix way breaks windows paths; // with single backslashes. Alternatively, our unescape function would; // need to mimic the platform specific command line parsing/unescaping; // logic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/llvm-rc.cpp:287,log,logic,287,interpreter/llvm-project/llvm/tools/llvm-rc/llvm-rc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/llvm-rc.cpp,1,['log'],['logic']
Testability,"// Temporally disables all the loggers (Caution! Use with care !)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MsgLogger.h:31,log,loggers,31,tmva/tmva/inc/TMVA/MsgLogger.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MsgLogger.h,1,['log'],['loggers']
Testability,// Temporary option added for the purpose of testing functionality added; // to DAGCombiner.cpp in D92230. It is expected that this can be removed; // in future when both implementations will be based off MGATHER rather; // than the GLD1 nodes added for the SVE gather load intrinsics.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:45,test,testing,45,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['test'],['testing']
Testability,"// Tentatively insert the instructions into the block so that they; // look ""normal"" to the transformation logic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp:107,log,logic,107,interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp,1,['log'],['logic']
Testability,"// Terminate the draw if over opaque fraction timeout.; // Only test every 2000 objects as this is somewhat costly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx:64,test,test,64,graf3d/gl/src/TGLScene.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx,1,['test'],['test']
Testability,"// Terminate the traversal if over scene rendering limit.; // Only test every 5000 objects as this is somewhat costly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx:67,test,test,67,graf3d/gl/src/TGLScene.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx,1,['test'],['test']
Testability,"// Test ""0 + x = x""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/add.cxx:3,Test,Test,3,hist/histv7/test/add.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/add.cxx,1,['Test'],['Test']
Testability,"// Test ""x + 0 = x""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/add.cxx:3,Test,Test,3,hist/histv7/test/add.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/add.cxx,1,['Test'],['Test']
Testability,"// Test ""x + x = 2*x""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/add.cxx:3,Test,Test,3,hist/histv7/test/add.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/add.cxx,1,['Test'],['Test']
Testability,"// Test ""x + y"" with less STAT",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/add.cxx:3,Test,Test,3,hist/histv7/test/add.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/add.cxx,1,['Test'],['Test']
Testability,"// Test ""x - x = 0""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/add.cxx:3,Test,Test,3,hist/histv7/test/add.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/add.cxx,1,['Test'],['Test']
Testability,"// Test 'cp' and 'md5sum;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Test,Test,3,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability,"// Test 'ls'",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Test,Test,3,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability,"// Test 'more'",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Test,Test,3,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability,"// Test 'stat'",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Test,Test,3,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability,"// Test 1",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Test,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Test']
Testability,"// Test 11; // WriteRead Tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Test,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,['Test'],"['Test', 'Tests']"
Testability,"// Test 12; // Merge Tests same axis",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Test,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,['Test'],"['Test', 'Tests']"
Testability,"// Test 13; // Merge Tests with labels",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Test,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,['Test'],"['Test', 'Tests']"
Testability,"// Test 14; // Merge Tests with differen axes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Test,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,['Test'],"['Test', 'Tests']"
Testability,"// Test 15; // Merge Tests with extendable axes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Test,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,['Test'],"['Test', 'Tests']"
Testability,"// Test 16; // Label Tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Test,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,['Test'],"['Test', 'Tests']"
Testability,"// Test 17; // Interpolation Tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Test,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,['Test'],"['Test', 'Tests']"
Testability,"// Test 18; // Scale Tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Test,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,['Test'],"['Test', 'Tests']"
Testability,"// Test 19; // Integral Tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Test,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,['Test'],"['Test', 'Tests']"
Testability,"// Test 20; // Histogram buffer Tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Test,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,['Test'],"['Test', 'Tests']"
Testability,"// Test 21; // Histogram extend axis Tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Test,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,['Test'],"['Test', 'Tests']"
Testability,"// Test 22; // TH1-THn[Sparse] Conversions Tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Test,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,['Test'],"['Test', 'Tests']"
Testability,"// Test 23; // FillData Tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Test,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,['Test'],"['Test', 'Tests']"
Testability,"// Test 24; // Reference Tests: compare with a reference old file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Test,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,['Test'],"['Test', 'Tests']"
Testability,"// Test 3-4",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Test,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Test']
Testability,"// Test 5; // Range Tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Test,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,['Test'],"['Test', 'Tests']"
Testability,"// Test 6",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Test,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Test']
Testability,"// Test 7; // Add Tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Test,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,['Test'],"['Test', 'Tests']"
Testability,"// Test 8; // Multiply Tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Test,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,['Test'],"['Test', 'Tests']"
Testability,"// Test 9; // Divide Tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Test,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,['Test'],"['Test', 'Tests']"
Testability,// Test = X == 0.0,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,1,['Test'],['Test']
Testability,"// Test CallArgs.size to make sure an additional argument (the value); // has been pushed on, if not than we didn't know how to handle the type",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/ValueExtractionSynthesizer.cpp:3,Test,Test,3,interpreter/cling/lib/Interpreter/ValueExtractionSynthesizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/ValueExtractionSynthesizer.cpp,1,['Test'],['Test']
Testability,"// Test D(tj,THETA). A is set to (Y(tj+s)-Y(tj))/s.b is; // set to (X(tj+s)-X(tj))/s.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/TGraphPainter.cxx:3,Test,Test,3,hist/histpainter/src/TGraphPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/TGraphPainter.cxx,1,['Test'],['Test']
Testability,// Test Data Class.; //; // Operand 0: the value to test; // Operand 1: the bit mask,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.h:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.h,2,"['Test', 'test']","['Test', 'test']"
Testability,"// Test Data hist and such.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataSet.cxx:3,Test,Test,3,roofit/roofitcore/test/testRooDataSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataSet.cxx,1,['Test'],['Test']
Testability,"// Test EvalChi2Gradient and outputs its speedup against the scalar serial case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx:3,Test,Test,3,math/mathcore/test/testGradient.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx,3,['Test'],['Test']
Testability,"// Test Fill() with NaN and GetBinContent()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/fill.cxx:3,Test,Test,3,hist/histv7/test/fill.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/fill.cxx,2,['Test'],['Test']
Testability,"// Test Fill() with NaN and GetBinUncertainty()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/fill.cxx:3,Test,Test,3,hist/histv7/test/fill.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/fill.cxx,2,['Test'],['Test']
Testability,"// Test Fill() with NaN and GetEntries()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/fill.cxx:3,Test,Test,3,hist/histv7/test/fill.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/fill.cxx,2,['Test'],['Test']
Testability,"// Test Fill() with weight and GetBinContent()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/fill.cxx:3,Test,Test,3,hist/histv7/test/fill.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/fill.cxx,3,['Test'],['Test']
Testability,"// Test Fill() with weight and GetBinUncertainty()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/fill.cxx:3,Test,Test,3,hist/histv7/test/fill.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/fill.cxx,3,['Test'],['Test']
Testability,"// Test Fill() with weight and GetEntries()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/fill.cxx:3,Test,Test,3,hist/histv7/test/fill.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/fill.cxx,3,['Test'],['Test']
Testability,"// Test Fill() without weight and GetBinContent()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/fill.cxx:3,Test,Test,3,hist/histv7/test/fill.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/fill.cxx,3,['Test'],['Test']
Testability,"// Test Fill() without weight and GetBinUncertainty()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/fill.cxx:3,Test,Test,3,hist/histv7/test/fill.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/fill.cxx,3,['Test'],['Test']
Testability,"// Test Fill(), FillN(), GetEntries(), GetBinContent(), GetBinUncertainty(); // RHist::Fill for 1D; // Test Fill() without weight and GetEntries()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/fill.cxx:3,Test,Test,3,hist/histv7/test/fill.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/fill.cxx,2,['Test'],['Test']
Testability,"// Test FillN() and GetBinUncertainty()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/fill.cxx:3,Test,Test,3,hist/histv7/test/fill.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/fill.cxx,3,['Test'],['Test']
Testability,"// Test FillN() with weights and GetBinContent()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/fill.cxx:3,Test,Test,3,hist/histv7/test/fill.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/fill.cxx,3,['Test'],['Test']
Testability,"// Test FillN() with weights and GetEntries()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/fill.cxx:3,Test,Test,3,hist/histv7/test/fill.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/fill.cxx,3,['Test'],['Test']
Testability,"// Test FillN() without weights and GetBinContent()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/fill.cxx:3,Test,Test,3,hist/histv7/test/fill.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/fill.cxx,3,['Test'],['Test']
Testability,"// Test FillN() without weights and GetBinUncertainty()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/fill.cxx:3,Test,Test,3,hist/histv7/test/fill.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/fill.cxx,3,['Test'],['Test']
Testability,"// Test FillN() without weights and GetEntries()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/fill.cxx:3,Test,Test,3,hist/histv7/test/fill.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/fill.cxx,3,['Test'],['Test']
Testability,"// Test IO of RooSetProxy and RooListProxy if they were written to file before; // they became aliases for template specifications of RooCollectionProxy",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooCollectionProxy.cxx:3,Test,Test,3,roofit/roofitcore/test/testRooCollectionProxy.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooCollectionProxy.cxx,1,['Test'],['Test']
Testability,"// Test Info level verbosity.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/test/testLogger.cxx:3,Test,Test,3,core/foundation/test/testLogger.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/test/testLogger.cxx,1,['Test'],['Test']
Testability,"// Test RAxisConfig and conversion to concrete axis types",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/axis.cxx:3,Test,Test,3,hist/histv7/test/axis.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/axis.cxx,1,['Test'],['Test']
Testability,"// Test RBox API",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/primitivesv7/test/primitives.cxx:3,Test,Test,3,graf2d/primitivesv7/test/primitives.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/primitivesv7/test/primitives.cxx,1,['Test'],['Test']
Testability,"// Test RH.. constructors and especially GetNBins(), GetNDim() and GetBinContent() from RHistImpl.hxx; // Test RH1F constructor",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/constructors.cxx:3,Test,Test,3,hist/histv7/test/constructors.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/constructors.cxx,2,['Test'],['Test']
Testability,"// Test RH1C constructor",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/constructors.cxx:3,Test,Test,3,hist/histv7/test/constructors.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/constructors.cxx,1,['Test'],['Test']
Testability,"// Test RH1D constructor",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/constructors.cxx:3,Test,Test,3,hist/histv7/test/constructors.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/constructors.cxx,1,['Test'],['Test']
Testability,"// Test RH1I constructor",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/constructors.cxx:3,Test,Test,3,hist/histv7/test/constructors.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/constructors.cxx,1,['Test'],['Test']
Testability,"// Test RH1LL constructor",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/constructors.cxx:3,Test,Test,3,hist/histv7/test/constructors.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/constructors.cxx,1,['Test'],['Test']
Testability,"// Test RH2C constructor",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/constructors.cxx:3,Test,Test,3,hist/histv7/test/constructors.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/constructors.cxx,1,['Test'],['Test']
Testability,"// Test RH2D constructor",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/constructors.cxx:3,Test,Test,3,hist/histv7/test/constructors.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/constructors.cxx,1,['Test'],['Test']
Testability,"// Test RH2F constructor",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/constructors.cxx:3,Test,Test,3,hist/histv7/test/constructors.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/constructors.cxx,1,['Test'],['Test']
Testability,"// Test RH2I constructor",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/constructors.cxx:3,Test,Test,3,hist/histv7/test/constructors.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/constructors.cxx,1,['Test'],['Test']
Testability,"// Test RH2LL constructor",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/constructors.cxx:3,Test,Test,3,hist/histv7/test/constructors.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/constructors.cxx,1,['Test'],['Test']
Testability,"// Test RH3C constructor",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/constructors.cxx:3,Test,Test,3,hist/histv7/test/constructors.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/constructors.cxx,1,['Test'],['Test']
Testability,"// Test RH3D constructor",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/constructors.cxx:3,Test,Test,3,hist/histv7/test/constructors.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/constructors.cxx,1,['Test'],['Test']
Testability,"// Test RH3F constructor",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/constructors.cxx:3,Test,Test,3,hist/histv7/test/constructors.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/constructors.cxx,1,['Test'],['Test']
Testability,"// Test RH3I constructor",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/constructors.cxx:3,Test,Test,3,hist/histv7/test/constructors.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/constructors.cxx,1,['Test'],['Test']
Testability,"// Test RH3LL constructor",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/constructors.cxx:3,Test,Test,3,hist/histv7/test/constructors.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/constructors.cxx,1,['Test'],['Test']
Testability,"// Test RHist constructor with 4 dimensions",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/constructors.cxx:3,Test,Test,3,hist/histv7/test/constructors.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/constructors.cxx,1,['Test'],['Test']
Testability,"// Test RHist constructor with title",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/constructors.cxx:3,Test,Test,3,hist/histv7/test/constructors.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/constructors.cxx,1,['Test'],['Test']
Testability,"// Test RLegend API",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/primitivesv7/test/primitives.cxx:3,Test,Test,3,graf2d/primitivesv7/test/primitives.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/primitivesv7/test/primitives.cxx,1,['Test'],['Test']
Testability,"// Test RLine API",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/primitivesv7/test/primitives.cxx:3,Test,Test,3,graf2d/primitivesv7/test/primitives.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/primitivesv7/test/primitives.cxx,1,['Test'],['Test']
Testability,"// Test RMarker API",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/primitivesv7/test/primitives.cxx:3,Test,Test,3,graf2d/primitivesv7/test/primitives.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/primitivesv7/test/primitives.cxx,1,['Test'],['Test']
Testability,"// Test ROOT-6967",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/test/TClingTests.cxx:3,Test,Test,3,core/metacling/test/TClingTests.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/test/TClingTests.cxx,1,['Test'],['Test']
Testability,"// Test RPave API",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpadv7/test/rpave.cxx:3,Test,Test,3,graf2d/gpadv7/test/rpave.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpadv7/test/rpave.cxx,1,['Test'],['Test']
Testability,"// Test RPaveText API",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/primitivesv7/test/primitives.cxx:3,Test,Test,3,graf2d/primitivesv7/test/primitives.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/primitivesv7/test/primitives.cxx,1,['Test'],['Test']
Testability,"// Test RText API",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/primitivesv7/test/primitives.cxx:3,Test,Test,3,graf2d/primitivesv7/test/primitives.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/primitivesv7/test/primitives.cxx,1,['Test'],['Test']
Testability,"// Test RooCacheManager::selectFromSet1 and RooCacheManager::selectFromSet2.; // the cached class doesn't matter for this test, it just has to be an object that the cache is going to own",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooCacheManager.cxx:3,Test,Test,3,roofit/roofitcore/test/testRooCacheManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooCacheManager.cxx,2,"['Test', 'test']","['Test', 'test']"
Testability,"// Test TPacketizerFile and TTree friends in same file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Test,Test,3,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability,"// Test TPacketizerFile and TTree friends in separate files",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Test,Test,3,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,2,['Test'],['Test']
Testability,"// Test TProofOutputFile technology for dataset creation (tests TProofDraw too)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Test,Test,3,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,2,"['Test', 'test']","['Test', 'tests']"
Testability,"// Test TProofOutputFile technology for ntuple creation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Test,Test,3,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability,"// Test TProofOutputFile technology for ntuple creation using submergers",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Test,Test,3,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability,"// Test UNC syntax",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx:3,Test,Test,3,core/winnt/src/TWinNTSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx,1,['Test'],['Test']
Testability,"// Test a conditional fit with batch mode; //; // In a conditional fit, it happens that the value normalization integrals can; // be different for every event because a pdf is conditional on another; // observable. That's why the integral also has to be evaluated with the batch; // interface in general.; //; // This test checks if the results of a conditional fit are the same for batch; // and scalar mode. It also verifies that for non-conditional fits, the batch; // mode recognizes that the integral only needs to be evaluated once. This is; // checked by hijacking the FastEvaluations log. If a RooRealIntegral is; // evaluated in batch mode and data size is greater than one, the batch mode; // will inform that a batched evaluation function is missing.; //; // This test is disabled if the legacy backend is not available, because then; // we don't have any reference to compare to.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooAbsPdf.cxx:3,Test,Test,3,roofit/roofitcore/test/testRooAbsPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooAbsPdf.cxx,4,"['Test', 'log', 'test']","['Test', 'log', 'test']"
Testability,"// Test a value against our fit range",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsRealLValue.h:3,Test,Test,3,roofit/roofitcore/inc/RooAbsRealLValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsRealLValue.h,1,['Test'],['Test']
Testability,"// Test adding an offset",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx:3,Test,Test,3,math/mathcore/test/testKahan.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx,1,['Test'],['Test']
Testability,"// Test addition / subtraction of coords",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpadv7/test/coords.cxx:3,Test,Test,3,graf2d/gpadv7/test/coords.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpadv7/test/coords.cxx,1,['Test'],['Test']
Testability,"// Test addition of Extents",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpadv7/test/extent.cxx:3,Test,Test,3,graf2d/gpadv7/test/extent.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpadv7/test/extent.cxx,1,['Test'],['Test']
Testability,"// Test admin functionality",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Test,Test,3,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability,"// Test again as another thread may have set fClassInfo to nullptr.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx:3,Test,Test,3,core/metacling/src/TCling.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx,1,['Test'],['Test']
Testability,"// Test again just in case, another thread did the work while we were; // waiting.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:3,Test,Test,3,core/base/src/TROOT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx,1,['Test'],['Test']
Testability,"// Test against camera frustum planes (here mode is Outside; // implicitly).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx:3,Test,Test,3,graf3d/gl/src/TGLScene.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLScene.cxx,1,['Test'],['Test']
Testability,// Test against each of the exception types we claim to catch.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp:3,Test,Test,3,interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGException.cpp,3,['Test'],['Test']
Testability,"// Test against https://github.com/root-project/root/issues/13691; // At destruction time TDirectoryFile called the destructor of; // TDirectory, thus:; // - inadvertently triggered initialization of gROOT; // - called TDirectory::RecursiveRemove which didn't check for the validity; // of the `fList` data member, which had already been deleted in the; // TDirectoryFile destructor; //; // NOTE: In order for the segfault to actually be triggered, this test needs; // to link against some library that is not in the list of globally ignored; // PCMs (gIgnoredPCMNames in TCling.cxx). The loading of a PCM is what; // actually triggers the call to TDirectory::RecursiveRemove in the end.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/tdirectoryfile_destructor_segfault.cxx:3,Test,Test,3,hist/hist/test/tdirectoryfile_destructor_segfault.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/tdirectoryfile_destructor_segfault.cxx,2,"['Test', 'test']","['Test', 'test']"
Testability,// Test all conditions for this pattern.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCInstPrinter.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/MC/MCInstPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCInstPrinter.cpp,1,['Test'],['Test']
Testability,// Test all regunits of the super register that are not part of the; // sub register. If none of them are live then the super register is safe to; // use.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FixupBWInsts.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Target/X86/X86FixupBWInsts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FixupBWInsts.cpp,1,['Test'],['Test']
Testability,"// Test asynchronous running",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Test,Test,3,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability,"// Test bounds for =, *, *, ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,1,['Test'],['Test']
Testability,"// Test calling Train/Test with output file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/envelope/testClassification.cxx:3,Test,Test,3,tmva/tmva/test/envelope/testClassification.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/envelope/testClassification.cxx,2,['Test'],['Test']
Testability,"// Test calling Train/Test without call evaluation method and without output file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/envelope/testClassification.cxx:3,Test,Test,3,tmva/tmva/test/envelope/testClassification.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/envelope/testClassification.cxx,2,['Test'],['Test']
Testability,"// Test channel specific suppression given global higher verbosity.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/test/testLogger.cxx:3,Test,Test,3,core/foundation/test/testLogger.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/test/testLogger.cxx,1,['Test'],['Test']
Testability,"// Test class: creates a reference solution (computing the gradient with scalar; // values in a serial scenario), and; // compares its values and its performance against the evaluation of the; // gradient specified by the GradientTestTraits; // type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx:3,Test,Test,3,math/mathcore/test/testGradient.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx,3,['Test'],['Test']
Testability,"// Test cleanup",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Test,Test,3,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability,"// Test consistancy of the hist after concurrentfill",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/concurrentfill.cxx:3,Test,Test,3,hist/histv7/test/concurrentfill.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/concurrentfill.cxx,1,['Test'],['Test']
Testability,"// Test construction and destruction if the URL is never opened",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/davix/test/RRawFileDavix.cxx:3,Test,Test,3,net/davix/test/RRawFileDavix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/davix/test/RRawFileDavix.cxx,2,['Test'],['Test']
Testability,"// Test constructors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_resptr.cxx:3,Test,Test,3,tree/dataframe/test/dataframe_resptr.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_resptr.cxx,1,['Test'],['Test']
Testability,"// Test creation of LineSet",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/test/lineset.cxx:3,Test,Test,3,graf3d/eve7/test/lineset.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/test/lineset.cxx,1,['Test'],['Test']
Testability,"// Test creation of RHistImpl with atomic precision.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/atomics.cxx:3,Test,Test,3,hist/histv7/test/atomics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/atomics.cxx,1,['Test'],['Test']
Testability,// Test data class instructions store results in CR bits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['Test'],['Test']
Testability,"// Test data from only the first mapping;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMinimization.h:3,Test,Test,3,tmva/tmva/test/DNN/TestMinimization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMinimization.h,1,['Test'],['Test']
Testability,"// Test data is saved as:; // 0 : <N> num of events, type float, 4 bytes; // 1-N : First variable for all events; // N+1-2N : Second variable...; // ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitAPI.cxx:3,Test,Test,3,tmva/tmva/src/RuleFitAPI.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitAPI.cxx,1,['Test'],['Test']
Testability,"// Test dataset creationg with a ntuple",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Test,Test,3,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability,"// Test dependencies, e.g. ""1,3""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Test,Test,3,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability,"// Test description string, if any",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/src/TProofBench.cxx:3,Test,Test,3,proof/proofbench/src/TProofBench.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/src/TProofBench.cxx,1,['Test'],['Test']
Testability,"// Test different diag levels, in channel and global, before and after RAII.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/test/testLogger.cxx:3,Test,Test,3,core/foundation/test/testLogger.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/test/testLogger.cxx,1,['Test'],['Test']
Testability,"// Test different filling methods",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx:3,Test,Test,3,math/mathcore/test/testKahan.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx,1,['Test'],['Test']
Testability,"// Test different values for ""lowestOrder""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/test/testRooFitHS3.cxx:3,Test,Test,3,roofit/hs3/test/testRooFitHS3.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/test/testRooFitHS3.cxx,2,['Test'],['Test']
Testability,"// Test drawing of histograms.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histdrawv7/test/draw.cxx:3,Test,Test,3,hist/histdrawv7/test/draw.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histdrawv7/test/draw.cxx,1,['Test'],['Test']
Testability,"// Test evaluating the model:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/testHistFactory.cxx:3,Test,Test,3,roofit/histfactory/test/testHistFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/testHistFactory.cxx,1,['Test'],['Test']
Testability,"// Test filling of RHistImpl with atomic precision.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/atomics.cxx:3,Test,Test,3,hist/histv7/test/atomics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/atomics.cxx,1,['Test'],['Test']
Testability,"// Test first with a chain",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Test,Test,3,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability,"// Test fitting the model to data",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/testHistFactory.cxx:3,Test,Test,3,roofit/histfactory/test/testHistFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/testHistFactory.cxx,1,['Test'],['Test']
Testability,// Test floating-point data class for vectors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.h:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.h,1,['Test'],['Test']
Testability,"// Test flush and fill manually",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/concurrentfill.cxx:3,Test,Test,3,hist/histv7/test/concurrentfill.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/concurrentfill.cxx,1,['Test'],['Test']
Testability,// Test for 'CGCF'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/RetainSummaryManager.cpp:3,Test,Test,3,interpreter/llvm-project/clang/lib/Analysis/RetainSummaryManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/RetainSummaryManager.cpp,1,['Test'],['Test']
Testability,// Test for -fno-rtti + explicit -fsanitizer=vptr before expanding groups; // so we don't error out if -fno-rtti and -fsanitize=undefined were; // passed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:3,Test,Test,3,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,1,['Test'],['Test']
Testability,// Test for Floating type first as LongDouble can pass isUnsignedIntegerType,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp:3,Test,Test,3,interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/PrintfFormatString.cpp,1,['Test'],['Test']
Testability,"// Test for ROOT-9122",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_snapshot.cxx:3,Test,Test,3,tree/dataframe/test/dataframe_snapshot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_snapshot.cxx,1,['Test'],['Test']
Testability,"// Test for ROOT-9210",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_snapshot.cxx:3,Test,Test,3,tree/dataframe/test/dataframe_snapshot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_snapshot.cxx,1,['Test'],['Test']
Testability,"// Test for RooBernstein; // Authors: Rahul Balasubramanian, CERN 05/2020",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooBernstein.cxx:3,Test,Test,3,roofit/roofit/test/testRooBernstein.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooBernstein.cxx,1,['Test'],['Test']
Testability,"// Test for RooRecursiveFraction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx:3,Test,Test,3,roofit/roofitcore/test/testRooFuncWrapper.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx,1,['Test'],['Test']
Testability,"// Test for SP6 versus SP6a.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx:3,Test,Test,3,core/winnt/src/TWinNTSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx,1,['Test'],['Test']
Testability,// Test for a bogus zero-shift-guard-op around funnel-shift or rotate.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['Test'],['Test']
Testability,"// Test for a zero-shift-guard-op around rotates. These are used to; // avoid UB from oversized shifts in raw IR rotate patterns, but the; // intrinsics do not have that problem.; // We do not allow this transform for the general funnel shift case because; // that would not preserve the poison safety of the original code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['Test'],['Test']
Testability,"// Test for converting a string to a valid C/C++ variable name",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/test/TClingUtilsTests.cxx:3,Test,Test,3,core/clingutils/test/TClingUtilsTests.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/test/TClingUtilsTests.cxx,1,['Test'],['Test']
Testability,// Test for deadness.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/UnreachableBlockElim.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/CodeGen/UnreachableBlockElim.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/UnreachableBlockElim.cpp,1,['Test'],['Test']
Testability,"// Test for displacements, which aren't supported in fast mode.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranch.cxx:3,Test,Test,3,tree/tree/src/TBranch.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranch.cxx,2,['Test'],['Test']
Testability,// Test for exit as back edge,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/StructurizeCFG.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Transforms/Scalar/StructurizeCFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/StructurizeCFG.cpp,1,['Test'],['Test']
Testability,"// Test for https://github.com/root-project/root/issues/10233",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_snapshot.cxx:3,Test,Test,3,tree/dataframe/test/dataframe_snapshot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_snapshot.cxx,1,['Test'],['Test']
Testability,"// Test for https://github.com/root-project/root/issues/6881",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/test/leafs.cxx:3,Test,Test,3,tree/treeplayer/test/leafs.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/test/leafs.cxx,1,['Test'],['Test']
Testability,"// Test for issue #6455, ""RDS does not early-quit event loops when all Ranges are exhausted""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/datasource_trivial.cxx:3,Test,Test,3,tree/dataframe/test/datasource_trivial.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/datasource_trivial.cxx,1,['Test'],['Test']
Testability,// Test for no method in the pool which should not trigger any warning by; // caller.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp:3,Test,Test,3,interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,1,['Test'],['Test']
Testability,// Test for operand that defines something aliasing RegToSeek.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineFunction.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/CodeGen/MachineFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineFunction.cpp,1,['Test'],['Test']
Testability,"// Test for ordinal notation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/test/testRooFitHS3.cxx:3,Test,Test,3,roofit/hs3/test/testRooFitHS3.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/test/testRooFitHS3.cxx,1,['Test'],['Test']
Testability,// Test for placeholders.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:3,Test,Test,3,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['Test'],['Test']
Testability,// Test for shuffle mask legality over both commutations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['Test'],['Test']
Testability,"// Test for specific product on Windows NT 4.0 SP5 and earlier",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx:3,Test,Test,3,core/winnt/src/TWinNTSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx,1,['Test'],['Test']
Testability,"// Test for specific product on Windows NT 4.0 SP6 and later.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx:3,Test,Test,3,core/winnt/src/TWinNTSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx,1,['Test'],['Test']
Testability,"// Test for stability",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/vecops/test/vecops_rvec.cxx:3,Test,Test,3,math/vecops/test/vecops_rvec.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/vecops/test/vecops_rvec.cxx,1,['Test'],['Test']
Testability,// Test for successors as back edge,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/StructurizeCFG.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Transforms/Scalar/StructurizeCFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/StructurizeCFG.cpp,1,['Test'],['Test']
Testability,"// Test for the JSON IO of a full workspace with a multi-channel model and; // data.; // Author: Jonas Rembser, CERN 02/2023",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/test/testHS3SimultaneousFit.cxx:3,Test,Test,3,roofit/hs3/test/testHS3SimultaneousFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/test/testHS3SimultaneousFit.cxx,1,['Test'],['Test']
Testability,// Test for the Microsoft extension of /##/ turning into // here on the; // error path.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/TokenLexer.cpp:3,Test,Test,3,interpreter/llvm-project/clang/lib/Lex/TokenLexer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/TokenLexer.cpp,1,['Test'],['Test']
Testability,"// Test for the Windows Me/98/95.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx:3,Test,Test,3,core/winnt/src/TWinNTSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx,1,['Test'],['Test']
Testability,"// Test for the Windows NT product family.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx:3,Test,Test,3,core/winnt/src/TWinNTSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx,1,['Test'],['Test']
Testability,"// Test for the server type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx:3,Test,Test,3,core/winnt/src/TWinNTSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx,1,['Test'],['Test']
Testability,"// Test for the specific product.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx:3,Test,Test,3,core/winnt/src/TWinNTSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx,1,['Test'],['Test']
Testability,"// Test for the uniform pdf. Since it doesn't depend on any parameters, we need; // to add it to some other model like a Gaussian to get a meaningful fit model.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx:3,Test,Test,3,roofit/roofitcore/test/testRooFuncWrapper.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx,1,['Test'],['Test']
Testability,"// Test for the workstation type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx:3,Test,Test,3,core/winnt/src/TWinNTSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx,1,['Test'],['Test']
Testability,"// Test for unbalanced classes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx:3,Test,Test,3,tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx,1,['Test'],['Test']
Testability,// Test for upgrading !llvm.loop.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Reader/MetadataLoader.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Bitcode/Reader/MetadataLoader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Reader/MetadataLoader.cpp,1,['Test'],['Test']
Testability,"// Test for variable names with numbers and extra whitespaces in it",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/test/testRooFitHS3.cxx:3,Test,Test,3,roofit/hs3/test/testRooFitHS3.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/test/testRooFitHS3.cxx,1,['Test'],['Test']
Testability,"// Test for very old ROOT files.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranch.cxx:3,Test,Test,3,tree/tree/src/TBranch.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranch.cxx,2,['Test'],['Test']
Testability,"// Test frame evolution",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_serialize.cxx:3,Test,Test,3,tree/ntuple/v7/test/ntuple_serialize.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_serialize.cxx,1,['Test'],['Test']
Testability,"// Test function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/test/treeprocs/treeprocessors.cxx:3,Test,Test,3,tree/treeplayer/test/treeprocs/treeprocessors.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/test/treeprocs/treeprocessors.cxx,1,['Test'],['Test']
Testability,"// Test functions",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Test,Test,3,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability,"// Test functions:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/TKDTree.h:3,Test,Test,3,math/mathcore/inc/TKDTree.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/TKDTree.h,1,['Test'],['Test']
Testability,"// Test generation with proto data, covering GitHub issue #12286.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooKeysPdf.cxx:3,Test,Test,3,roofit/roofit/test/testRooKeysPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooKeysPdf.cxx,1,['Test'],['Test']
Testability,"// Test handling output via file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Test,Test,3,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability,"// Test how many workers got everything successfully",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Test,Test,3,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,3,['Test'],['Test']
Testability,// Test if A contains B.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h:3,Test,Test,3,interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h,1,['Test'],['Test']
Testability,// Test if BlockScalarTraits<T> is defined on type T.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:3,Test,Test,3,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,1,['Test'],['Test']
Testability,// Test if CSRs have changed from the previous function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterClassInfo.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/CodeGen/RegisterClassInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterClassInfo.cpp,1,['Test'],['Test']
Testability,// Test if CustomMappingTraits<T> is defined on type T.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:3,Test,Test,3,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,1,['Test'],['Test']
Testability,// Test if DocumentListTraits<T> is defined on type T,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:3,Test,Test,3,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,1,['Test'],['Test']
Testability,// Test if MappingContextTraits<T> is defined on type T.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:3,Test,Test,3,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,1,['Test'],['Test']
Testability,// Test if MappingContextTraits<T>::enumInput() is defined on type T.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:3,Test,Test,3,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,1,['Test'],['Test']
Testability,// Test if MappingContextTraits<T>::validate() is defined on type T.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:3,Test,Test,3,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,1,['Test'],['Test']
Testability,// Test if MappingTraits<T> is defined on type T.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:3,Test,Test,3,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,1,['Test'],['Test']
Testability,// Test if MappingTraits<T>::enumInput() is defined on type T.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:3,Test,Test,3,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,1,['Test'],['Test']
Testability,// Test if MappingTraits<T>::validate() is defined on type T.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:3,Test,Test,3,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,1,['Test'],['Test']
Testability,// Test if ScalarBitSetTraits<T> is defined on type T.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:3,Test,Test,3,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,1,['Test'],['Test']
Testability,// Test if ScalarEnumerationTraits<T> is defined on type T.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:3,Test,Test,3,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,1,['Test'],['Test']
Testability,// Test if ScalarTraits<T> is defined on type T.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:3,Test,Test,3,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,1,['Test'],['Test']
Testability,// Test if SequenceTraits<T> is defined on type T,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:3,Test,Test,3,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,1,['Test'],['Test']
Testability,// Test if SequenceTraits<T> is defined on type T.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:3,Test,Test,3,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,1,['Test'],['Test']
Testability,// Test if TaggedScalarTraits<T> is defined on type T.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h:3,Test,Test,3,interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/YAMLTraits.h,1,['Test'],['Test']
Testability,"// Test if V1 is a BUILD_VECTOR and the lane being referenced is a non-; // constant. If so, we can just reference the lane's definition directly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['Test'],['Test']
Testability,// Test if V1 is a BUILD_VECTOR which is equivalent to a SCALAR_TO_VECTOR; // (and probably will turn into a SCALAR_TO_VECTOR once legalization; // reaches it).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['Test'],['Test']
Testability,// Test if V1 is a SCALAR_TO_VECTOR.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['Test'],['Test']
Testability,"// Test if a FCmpInst instruction is used exclusively by a select as; // part of a minimum or maximum operation. If so, refrain from doing; // any other folding. This helps out other analyses which understand; // non-obfuscated minimum and maximum idioms. And in this case, at; // least one of the comparison operands has at least one user besides; // the compare (the select), which would often largely negate the; // benefit of folding anyway.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,1,['Test'],['Test']
Testability,"// Test if a bit is clear/set using a shifted-one mask:; // zext (icmp eq (and X, (1 << ShAmt)), 0) --> and (lshr (not X), ShAmt), 1; // zext (icmp ne (and X, (1 << ShAmt)), 0) --> and (lshr X, ShAmt), 1",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,1,['Test'],['Test']
Testability,"// Test if a formula with linear terms in each parameter is correctly expanded,; // even if some earlier terms are substrings of later terms.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Test,Test,3,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['Test'],['Test']
Testability,"// Test if all participating instruction will be dead after the; // transformation. If intermediate results are used, no performance gain can; // be expected. Also sum the cost of the Instructions beeing left dead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/InterleavedLoadCombinePass.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/CodeGen/InterleavedLoadCombinePass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/InterleavedLoadCombinePass.cpp,1,['Test'],['Test']
Testability,"// Test if format_provider<T> is defined on T and contains a member function; // with the signature:; // static void format(const T&, raw_stream &, StringRef);; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadicDetails.h:3,Test,Test,3,interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadicDetails.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadicDetails.h,1,['Test'],['Test']
Testability,// Test if in transactional execution.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,1,['Test'],['Test']
Testability,"// Test if point is on fRmax boundary",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoSphere.cxx:3,Test,Test,3,geom/geom/src/TGeoSphere.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoSphere.cxx,1,['Test'],['Test']
Testability,"// Test if point is on fRmin boundary",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoSphere.cxx:3,Test,Test,3,geom/geom/src/TGeoSphere.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoSphere.cxx,1,['Test'],['Test']
Testability,// Test if raw_ostream& << T -> raw_ostream& is findable via ADL.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadicDetails.h:3,Test,Test,3,interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadicDetails.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadicDetails.h,1,['Test'],['Test']
Testability,"// Test if the FCmpInst instruction is used exclusively by a select as; // part of a minimum or maximum operation. If so, refrain from doing; // any other folding. This helps out other analyses which understand; // non-obfuscated minimum and maximum idioms, such as ScalarEvolution; // and CodeGen. And in this case, at least one of the comparison; // operands has at least one user besides the compare (the select),; // which would often largely negate the benefit of folding anyway.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['Test'],['Test']
Testability,"// Test if the ICmpInst instruction is used exclusively by a select as; // part of a minimum or maximum operation. If so, refrain from doing; // any other folding. This helps out other analyses which understand; // non-obfuscated minimum and maximum idioms, such as ScalarEvolution; // and CodeGen. And in this case, at least one of the comparison; // operands has at least one user besides the compare (the select),; // which would often largely negate the benefit of folding anyway.; //; // Do the same for the other patterns recognized by matchSelectPattern.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['Test'],['Test']
Testability,"// Test if the LHS is a BUILD_VECTOR. If it is, then we can just reference the; // lane's definition directly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64PostLegalizerLowering.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64PostLegalizerLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64PostLegalizerLowering.cpp,1,['Test'],['Test']
Testability,// Test if the LHS of the sub can be folded.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,1,['Test'],['Test']
Testability,// Test if the Trunc can be convertable to a VMOVN with this shuffle. We are; // looking for patterns of:; // !rev: 0 N/2 1 N/2+1 2 N/2+2 ...; // rev: N/2 0 N/2+1 1 N/2+2 2 ...,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['Test'],['Test']
Testability,"// Test if the Trunc will be convertable to a VMOVN with a shuffle, and if so; // use the VMOVN over splitting the store. We are looking for patterns of:; // !rev: 0 N 1 N+1 2 N+2 ...; // rev: N 0 N+1 1 N+2 2 ...; // The shuffle may either be a single source (in which case N = NumElts/2) or; // two inputs extended with concat to the same size (in which case N =; // NumElts).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['Test'],['Test']
Testability,"// Test if the data can be correctly reset for both individual and simultaneous; // pdfs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:3,Test,Test,3,roofit/roofitcore/test/testTestStatistics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx,1,['Test'],['Test']
Testability,"// Test if the found instruction is a reduction, and if not return an invalid; // cost specifying the parent to use the original cost modelling.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['Test'],['Test']
Testability,"// Test if the given object is of a CPPScope derived type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/API.cxx:3,Test,Test,3,bindings/pyroot/cppyy/CPyCppyy/src/API.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/API.cxx,1,['Test'],['Test']
Testability,"// Test if the given object is of a CPPScope type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/API.cxx:3,Test,Test,3,bindings/pyroot/cppyy/CPyCppyy/src/API.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/API.cxx,1,['Test'],['Test']
Testability,"// Test if the given pyobject is of CPPInstance derived type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/API.cxx:3,Test,Test,3,bindings/pyroot/cppyy/CPyCppyy/src/API.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/API.cxx,1,['Test'],['Test']
Testability,"// Test if the given pyobject is of CPPInstance type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/API.cxx:3,Test,Test,3,bindings/pyroot/cppyy/CPyCppyy/src/API.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/API.cxx,1,['Test'],['Test']
Testability,"// Test if the given pyobject is of CPPOverload derived type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/API.cxx:3,Test,Test,3,bindings/pyroot/cppyy/CPyCppyy/src/API.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/API.cxx,1,['Test'],['Test']
Testability,"// Test if the given pyobject is of CPPOverload type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/API.cxx:3,Test,Test,3,bindings/pyroot/cppyy/CPyCppyy/src/API.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/API.cxx,1,['Test'],['Test']
Testability,// Test if the index field is free for use.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,1,['Test'],['Test']
Testability,// Test if the location terminates before the end of the scope.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp,1,['Test'],['Test']
Testability,// Test if the offset is computed,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/InterleavedLoadCombinePass.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/CodeGen/InterleavedLoadCombinePass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/InterleavedLoadCombinePass.cpp,1,['Test'],['Test']
Testability,// Test if the previous node was as the same expression. This can happen; // when the expression fails to evaluate to anything meaningful and; // (as an optimization) we don't generate a node.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp:3,Test,Test,3,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp,1,['Test'],['Test']
Testability,// Test if the result will be zero,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/InterleavedLoadCombinePass.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/CodeGen/InterleavedLoadCombinePass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/InterleavedLoadCombinePass.cpp,1,['Test'],['Test']
Testability,// Test if the significand excluding the integral bit is all ones except for; // the least significant bit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,1,['Test'],['Test']
Testability,// Test if the significand excluding the integral bit is all ones. This allows; // us to test for binade boundaries.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,2,"['Test', 'test']","['Test', 'test']"
Testability,// Test if the significand excluding the integral bit is all zeros. This; // allows us to test for binade boundaries.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,2,"['Test', 'test']","['Test', 'test']"
Testability,"// Test if the trunc is the user of a select which is part of a; // minimum or maximum operation. If so, don't do any more simplification.; // Even simplifying demanded bits can break the canonical form of a; // min/max.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,1,['Test'],['Test']
Testability,// Test if the underlying call site operand is argument number u of the; // callback callee.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/Attributor.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Transforms/IPO/Attributor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/Attributor.cpp,1,['Test'],['Test']
Testability,// Test if the use is reachable from the exiting block. This dominator; // query is a conservative approximation of reachability.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['Test'],['Test']
Testability,// Test if the value is already loop-invariant.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopInfo.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Analysis/LoopInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopInfo.cpp,1,['Test'],['Test']
Testability,// Test if the values are trivially equivalent.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp,2,['Test'],['Test']
Testability,"// Test if the values come form identical arithmetic instructions.; // This uses isIdenticalToWhenDefined instead of isIdenticalTo because; // its only used to compare two uses within the same basic block, which; // means that they'll always either have the same value or one of them; // will have an undefined value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineLoadStoreAlloca.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineLoadStoreAlloca.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineLoadStoreAlloca.cpp,1,['Test'],['Test']
Testability,"// Test if the values come from identical arithmetic instructions.; // Use isIdenticalToWhenDefined instead of isIdenticalTo because; // this function is only used when one address use dominates the; // other, which means that they'll always either have the same; // value or one of them will have an undefined value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp,1,['Test'],['Test']
Testability,// Test if there is an appropriate addressing mode and check if the; // immediate fits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,1,['Test'],['Test']
Testability,"// Test if this function contributes to the fit",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:3,Test,Test,3,hist/hist/src/TMultiDimFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx,1,['Test'],['Test']
Testability,// Test if this instruction is one of our post load instructions (and; // remove it from the set if so).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,1,['Test'],['Test']
Testability,"// Test if this scope represents a namespace.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:3,Test,Test,3,bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx,1,['Test'],['Test']
Testability,"// Test if this type has a default constructor or is a ""plain old data"" type",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:3,Test,Test,3,bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx,1,['Test'],['Test']
Testability,"// Test if this type is an aggregate type",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:3,Test,Test,3,bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx,1,['Test'],['Test']
Testability,"// Test if this type may not be instantiated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:3,Test,Test,3,bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx,1,['Test'],['Test']
Testability,"// Test if we can pack floats into NaNs, and recover them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testNaNPacker.cxx:3,Test,Test,3,roofit/roofitcore/test/testNaNPacker.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testNaNPacker.cxx,1,['Test'],['Test']
Testability,"// Test if we can skip writing out the offset map.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBasket.cxx:3,Test,Test,3,tree/tree/src/TBasket.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBasket.cxx,1,['Test'],['Test']
Testability,// Test immediate,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64MCCodeEmitter.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64MCCodeEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64MCCodeEmitter.cpp,1,['Test'],['Test']
Testability,"// Test initializer list",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_resptr.cxx:3,Test,Test,3,tree/dataframe/test/dataframe_resptr.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_resptr.cxx,1,['Test'],['Test']
Testability,"// Test input data propagation (it only works in the static startup mode)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Test,Test,3,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability,// Test inside range constraints.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp:3,Test,Test,3,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp,1,['Test'],['Test']
Testability,"// Test instance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx:3,Test,Test,3,proof/proof/src/TProofServ.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx,1,['Test'],['Test']
Testability,"// Test integral in the high tails.; // Implementation should switch to cdf_c here to avoid catastrophic cancellation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooPoisson.cxx:3,Test,Test,3,roofit/roofit/test/testRooPoisson.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooPoisson.cxx,1,['Test'],['Test']
Testability,"// Test materials in G4 units against materials in TGeo units",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/test/test_material_units.cxx:3,Test,Test,3,geom/test/test_material_units.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/test/test_material_units.cxx,1,['Test'],['Test']
Testability,"// Test merging via submergers",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Test,Test,3,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability,// Test objects,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/GlViewerRCore.js:3,Test,Test,3,ui5/eve7/lib/GlViewerRCore.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/GlViewerRCore.js,1,['Test'],['Test']
Testability,"// Test of Physics Vector (GenVector package)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testGenVector.cxx:3,Test,Test,3,math/mathcore/test/stress/testGenVector.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testGenVector.cxx,1,['Test'],['Test']
Testability,"// Test of TSpline5 with non equidistant double knots follows",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSpline.cxx:3,Test,Test,3,hist/hist/src/TSpline.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSpline.cxx,1,['Test'],['Test']
Testability,"// Test of TSpline5 with non equidistant knots, two double knots,; // one triple knot,follows.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSpline.cxx:3,Test,Test,3,hist/hist/src/TSpline.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSpline.cxx,1,['Test'],['Test']
Testability,"// Test of a Composite Object (containing Vector's and Matrices)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testVector.cxx:3,Test,Test,3,math/mathcore/test/stress/testVector.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testVector.cxx,1,['Test'],['Test']
Testability,"// Test of data set handling with the H1 http files",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Test,Test,3,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability,"// Test on ApplicationImp not being 0 is needed because only at end of; // TApplication ctor the IsLineProcessing flag is set to 0, so before; // we can not use it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx:3,Test,Test,3,core/metacling/src/TCling.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx,1,['Test'],['Test']
Testability,"// Test only differentiable activation functions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDerivatives.h:3,Test,Test,3,tmva/tmva/test/DNN/TestDerivatives.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestDerivatives.h,1,['Test'],['Test']
Testability,// Test out of range constraints.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp:3,Test,Test,3,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp,1,['Test'],['Test']
Testability,"// Test overload with size as input",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/vecops/test/vecops_rvec.cxx:3,Test,Test,3,math/vecops/test/vecops_rvec.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/vecops/test/vecops_rvec.cxx,1,['Test'],['Test']
Testability,"// Test package argument passing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Test,Test,3,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability,"// Test package management with 'event'",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Test,Test,3,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability,"// Test palette interpolation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpadv7/test/palette.cxx:3,Test,Test,3,graf2d/gpadv7/test/palette.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpadv7/test/palette.cxx,1,['Test'],['Test']
Testability,"// Test pdg against materials in G4 units",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/test/test_material_units.cxx:3,Test,Test,3,geom/test/test_material_units.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/test/test_material_units.cxx,1,['Test'],['Test']
Testability,"// Test pdg against materials in TGeo units",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/test/test_material_units.cxx:3,Test,Test,3,geom/test/test_material_units.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/test/test_material_units.cxx,1,['Test'],['Test']
Testability,// Test predicate subsumption.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/IfConversion.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/CodeGen/IfConversion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/IfConversion.cpp,1,['Test'],['Test']
Testability,"// Test projection from 2D hist for labels/nbins",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_projections.cxx:3,Test,Test,3,hist/hist/test/test_projections.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_projections.cxx,1,['Test'],['Test']
Testability,"// Test projection from 3D hist for labels/nbins",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_projections.cxx:3,Test,Test,3,hist/hist/test/test_projections.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_projections.cxx,1,['Test'],['Test']
Testability,"// Test projection from Profile2D hist for labels/nbins",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_projections.cxx:3,Test,Test,3,hist/hist/test/test_projections.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_projections.cxx,1,['Test'],['Test']
Testability,"// Test push_back and emplace_back",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_resptr.cxx:3,Test,Test,3,tree/dataframe/test/dataframe_resptr.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_resptr.cxx,1,['Test'],['Test']
Testability,"// Test range chain and dataset processing EventProc",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Test,Test,3,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability,"// Test range chain and dataset processing EventProc with TPacketizerAdaptive",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Test,Test,3,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability,// Test range kind.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp:3,Test,Test,3,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp,1,['Test'],['Test']
Testability,"// Test ranged integration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooBernstein.cxx:3,Test,Test,3,roofit/roofit/test/testRooBernstein.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooBernstein.cxx,1,['Test'],['Test']
Testability,"// Test reading back with TTreeReader+TChain",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/test/regressions.cxx:3,Test,Test,3,tree/treeplayer/test/regressions.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/test/regressions.cxx,1,['Test'],['Test']
Testability,"// Test reading back with TTreeReader+TTree",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/test/regressions.cxx:3,Test,Test,3,tree/treeplayer/test/regressions.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/test/regressions.cxx,1,['Test'],['Test']
Testability,"// Test removal",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Test,Test,3,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability,"// Test same diag level as verbosity, in channel and global, before and after RAII.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/test/testLogger.cxx:3,Test,Test,3,core/foundation/test/testLogger.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/test/testLogger.cxx,1,['Test'],['Test']
Testability,"// Test sample",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:3,Test,Test,3,hist/hist/src/TMultiDimFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx,1,['Test'],['Test']
Testability,"// Test scalar arguments for conversion. B has been validated earlier to be a; // negative power of two and thus is guaranteed to have one or more contiguous; // ones starting from the MSB followed by zero or more contiguous zeros. D has; // been validated earlier to be a shifted set of one or more contiguous ones.; // In order to match, B leading ones and D leading zeros should be equal. The; // predicate that B be a negative power of 2 prevents the condition of there; // ever being zero leading ones. Thus 0 == 0 cannot occur. The predicate that; // D always be a shifted mask prevents the condition of D equaling 0. This; // prevents matching the condition where B contains the maximum number of; // leading one bits (-1) and D contains the maximum number of leading zero; // bits (0).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,1,['Test'],['Test']
Testability,// Test scalar type arguments for conversion.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,1,['Test'],['Test']
Testability,"// Test selecting different TTrees in same files",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Test,Test,3,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Test']
Testability,"// Test selector",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/test/treeprocs/treeprocessors.cxx:3,Test,Test,3,tree/treeplayer/test/treeprocs/treeprocessors.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/test/treeprocs/treeprocessors.cxx,1,['Test'],['Test']
Testability,"// Test shape against each plane in frustum - returning overlap result; // This method can result in kFALSE positives, where shape lies outside; // frustum, but not outside a single plane of it. In this case the shape; // will be regarded incorrectly as intersecting (kPartial); // TODO: Improve this - have a reliable test (separating axes).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLCamera.cxx:3,Test,Test,3,graf3d/gl/src/TGLCamera.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLCamera.cxx,2,"['Test', 'test']","['Test', 'test']"
Testability,// Test shift,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64MCCodeEmitter.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64MCCodeEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/MCTargetDesc/AArch64MCCodeEmitter.cpp,1,['Test'],['Test']
Testability,"// Test simple suppression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/test/testLogger.cxx:3,Test,Test,3,core/foundation/test/testLogger.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/test/testLogger.cxx,1,['Test'],['Test']
Testability,"// Test src1 first, since we canonicalize simpler expressions to the RHS.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/GISelKnownBits.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/GISelKnownBits.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/GISelKnownBits.cpp,2,['Test'],['Test']
Testability,"// Test statistics",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFactoryWSTool.cxx:3,Test,Test,3,roofit/roofitcore/src/RooFactoryWSTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFactoryWSTool.cxx,1,['Test'],['Test']
Testability,"// Test storing RCanvas with two RHistDrawable, referencing same histo",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histdrawv7/test/io.cxx:3,Test,Test,3,hist/histdrawv7/test/io.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histdrawv7/test/io.cxx,1,['Test'],['Test']
Testability,"// Test storing of 1D histogram",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histdrawv7/test/io.cxx:3,Test,Test,3,hist/histdrawv7/test/io.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histdrawv7/test/io.cxx,1,['Test'],['Test']
Testability,"// Test storing of 2D histogram",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histdrawv7/test/io.cxx:3,Test,Test,3,hist/histdrawv7/test/io.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histdrawv7/test/io.cxx,1,['Test'],['Test']
Testability,"// Test streamer field with polymorphic type",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/StreamerField.hxx:3,Test,Test,3,tree/ntuple/v7/test/StreamerField.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/StreamerField.hxx,1,['Test'],['Test']
Testability,"// Test syst down:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/testHistFactory.cxx:3,Test,Test,3,roofit/histfactory/test/testHistFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/testHistFactory.cxx,1,['Test'],['Test']
Testability,"// Test syst up:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/testHistFactory.cxx:3,Test,Test,3,roofit/histfactory/test/testHistFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/testHistFactory.cxx,1,['Test'],['Test']
Testability,"// Test tableinfo:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/sqlitetest.cxx:3,Test,Test,3,test/sqlitetest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/sqlitetest.cxx,1,['Test'],['Test']
Testability,// Test that InstallDir is indeed there before keeping this index.; // Open the chosen key path remainder.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/WindowsDriver/MSVCPaths.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/WindowsDriver/MSVCPaths.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/WindowsDriver/MSVCPaths.cpp,1,['Test'],['Test']
Testability,"// Test that InstallDir is indeed there before keeping this index.; // Open the chosen key path remainder.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Utils/PlatformWin.cpp:3,Test,Test,3,interpreter/cling/lib/Utils/PlatformWin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Utils/PlatformWin.cpp,1,['Test'],['Test']
Testability,"// Test that ROOT::Join behaves like str.join from Python.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/test/testStringUtils.cxx:3,Test,Test,3,core/foundation/test/testStringUtils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/test/testStringUtils.cxx,1,['Test'],['Test']
Testability,"// Test that ROOT::Split behaves like str.split from Python.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/test/testStringUtils.cxx:3,Test,Test,3,core/foundation/test/testStringUtils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/test/testStringUtils.cxx,1,['Test'],['Test']
Testability,"// Test that autoloading works (ROOT-9840)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_TFormula.cxx:3,Test,Test,3,hist/hist/test/test_TFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_TFormula.cxx,1,['Test'],['Test']
Testability,"// Test that both value and range have been updated correctly:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooAbsCollection.cxx:3,Test,Test,3,roofit/roofitcore/test/testRooAbsCollection.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooAbsCollection.cxx,1,['Test'],['Test']
Testability,"// Test that callbacks are executed in the order they are registered",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_callbacks.cxx:3,Test,Test,3,tree/dataframe/test/dataframe_callbacks.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_callbacks.cxx,1,['Test'],['Test']
Testability,"// Test that generation compiles",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/TestRandomGenerator.cxx:3,Test,Test,3,tmva/tmva/test/TestRandomGenerator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/TestRandomGenerator.cxx,1,['Test'],['Test']
Testability,"// Test that importing a RooDataHist to a RooDataSet works and that it gives; // the right weight() and weightSquared().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataSet.cxx:3,Test,Test,3,roofit/roofitcore/test/testRooDataSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataSet.cxx,1,['Test'],['Test']
Testability,"// Test that it also works with index notation builtin to TFormula",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/test/testRooFitHS3.cxx:3,Test,Test,3,roofit/hs3/test/testRooFitHS3.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/test/testRooFitHS3.cxx,1,['Test'],['Test']
Testability,"// Test that legacy implementation does better",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx:3,Test,Test,3,math/mathcore/test/testKahan.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx,1,['Test'],['Test']
Testability,"// Test that normal summation has catastrophic cancellation, we are actually testing something here:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx:3,Test,Test,3,math/mathcore/test/testKahan.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx,2,"['Test', 'test']","['Test', 'testing']"
Testability,"// Test that shape uncertainties have an effect:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/testHistFactory.cxx:3,Test,Test,3,roofit/histfactory/test/testHistFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/testHistFactory.cxx,1,['Test'],['Test']
Testability,"// Test that splitting a RooDataSet by index category does preserve the sum of; // weights squared and weight errors.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx:3,Test,Test,3,roofit/roofitcore/test/testRooDataHist.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx,1,['Test'],['Test']
Testability,"// Test that splitting a RooDataSet by index category does preserve the weight; // errors. Covers GitHub issue #12453.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataSet.cxx:3,Test,Test,3,roofit/roofitcore/test/testRooDataSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataSet.cxx,1,['Test'],['Test']
Testability,"// Test that the NSUM is normalized as we'd expect",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tf1.cxx:3,Test,Test,3,hist/hist/test/test_tf1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tf1.cxx,1,['Test'],['Test']
Testability,"// Test that the NSUM names are copied correctly",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tf1.cxx:3,Test,Test,3,hist/hist/test/test_tf1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tf1.cxx,1,['Test'],['Test']
Testability,// Test that the field is the last in the structure.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclBase.cpp:3,Test,Test,3,interpreter/llvm-project/clang/lib/AST/DeclBase.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclBase.cpp,1,['Test'],['Test']
Testability,"// Test that the loop-vectorizer can legalize all operations for this MaxVF.; // FIXME: While for scalable vectors this is currently sufficient, this should; // be replaced by a more detailed mechanism that filters out specific VFs,; // instead of invalidating vectorization for a whole set of VFs based on the; // MaxVF.; // Disable scalable vectorization if the loop contains unsupported reductions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['Test'],['Test']
Testability,"// Test that the new model_constrained has been altered",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx:3,Test,Test,3,roofit/roofitcore/test/testWorkspace.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx,2,['Test'],['Test']
Testability,"// Test that the old model still exists suffixed with _orig",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx:3,Test,Test,3,roofit/roofitcore/test/testWorkspace.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx,2,['Test'],['Test']
Testability,// Test that the use is dominated by the one selected use.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRegStackify.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRegStackify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRegStackify.cpp,1,['Test'],['Test']
Testability,"// Test that the voigt can be expressed as a convolution of a gaussian and lorentzian; // Check that the values match to within 1%",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tf1.cxx:3,Test,Test,3,hist/hist/test/test_tf1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tf1.cxx,1,['Test'],['Test']
Testability,"// Test that vectorisable Kahan yields identical results when used with 1 accumulator",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx:3,Test,Test,3,math/mathcore/test/testKahan.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx,1,['Test'],['Test']
Testability,"// Test that we can change the range of TF1NormSum and TF1Convolution",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tf1.cxx:3,Test,Test,3,hist/hist/test/test_tf1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tf1.cxx,1,['Test'],['Test']
Testability,"// Test that we can copy and clone TF1 objects based on NSUM and CONV",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tf1.cxx:3,Test,Test,3,hist/hist/test/test_tf1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tf1.cxx,1,['Test'],['Test']
Testability,"// Test that we cast this function to the right function type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/test/TClingCallFuncTests.cxx:3,Test,Test,3,core/metacling/test/TClingCallFuncTests.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/test/TClingCallFuncTests.cxx,3,['Test'],['Test']
Testability,"// Test that we cast this template function to the right function type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/test/TClingCallFuncTests.cxx:3,Test,Test,3,core/metacling/test/TClingCallFuncTests.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/test/TClingCallFuncTests.cxx,1,['Test'],['Test']
Testability,"// Test that we don't cast the function because otherwise we lose the information; // about the default call.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/test/TClingCallFuncTests.cxx:3,Test,Test,3,core/metacling/test/TClingCallFuncTests.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/test/TClingCallFuncTests.cxx,1,['Test'],['Test']
Testability,"// Test that we error out gracefully in case the output file specified for a Snapshot cannot be opened",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_snapshot.cxx:3,Test,Test,3,tree/dataframe/test/dataframe_snapshot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_snapshot.cxx,2,['Test'],['Test']
Testability,"// Test the *, *, *, ... case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,1,['Test'],['Test']
Testability,"// Test the C++ validity of saved objects' names",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_MapCppName.cxx:3,Test,Test,3,hist/hist/test/test_MapCppName.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_MapCppName.cxx,1,['Test'],['Test']
Testability,"// Test the `Offset(""bin"")` feature of RooAbsPdf::createNLL. Doing the; // bin-by-bin offset is equivalent to calculating the likelihood ratio with the; // NLL of a template histogram that is based of the dataset, so we use this; // relation to do a cross check: if we create a template pdf from the fit data; // and fit this template to the data with the `Offset(""bin"")` option, the; // resulting NLL should always be zero (within some numerical errors).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:3,Test,Test,3,roofit/roofitcore/test/testTestStatistics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx,1,['Test'],['Test']
Testability,// Test the application of cases.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp:3,Test,Test,3,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp,1,['Test'],['Test']
Testability,// Test the attribute values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmtAttr.cpp:3,Test,Test,3,interpreter/llvm-project/clang/lib/Sema/SemaStmtAttr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmtAttr.cpp,1,['Test'],['Test']
Testability,"// Test the canonical case: main tree and friend trees have all equal size.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_datasetspec.cxx:3,Test,Test,3,tree/dataframe/test/dataframe_datasetspec.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_datasetspec.cxx,1,['Test'],['Test']
Testability,"// Test the case where the friend trees are shorter than the main one.; // This should throw an exception.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_datasetspec.cxx:3,Test,Test,3,tree/dataframe/test/dataframe_datasetspec.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_datasetspec.cxx,1,['Test'],['Test']
Testability,"// Test the case where there are still entries in the friend trees after; // processing of the main tree finishes. This should issue a warning",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_datasetspec.cxx:3,Test,Test,3,tree/dataframe/test/dataframe_datasetspec.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_datasetspec.cxx,1,['Test'],['Test']
Testability,"// Test the expected return address against our actual address. If we can; // form this basic block's address as an immediate, this is easy. Otherwise; // we compute it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,1,['Test'],['Test']
Testability,"// Test the fitting using the gradient is successful",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradientFitting.cxx:3,Test,Test,3,math/mathcore/test/testGradientFitting.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradientFitting.cxx,1,['Test'],['Test']
Testability,"// Test the moments for a TF2 function - a bi-variate gaussian with correlation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_TF123_Moments.cxx:3,Test,Test,3,hist/hist/test/test_TF123_Moments.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_TF123_Moments.cxx,1,['Test'],['Test']
Testability,"// Test the other code path in RooCustomizer::CustIFace::create.; // Edit the top-level pdf in-place, replacing all existing conflicting nodes in the workspace by <node>_orig",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx:3,Test,Test,3,roofit/roofitcore/test/testWorkspace.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx,2,['Test'],['Test']
Testability,// Test the path based on the version in /etc/env.d/gcc/config-{tuple}.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.cpp:3,Test,Test,3,interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.cpp,1,['Test'],['Test']
Testability,"// Test the recursion anchors of the Romberg integration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx:3,Test,Test,3,roofit/roofitcore/test/testRooRombergIntegrator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx,1,['Test'],['Test']
Testability,// Test the shuffle mask to see if it splices the inserted scalar into the; // operand 1 vector of the shuffle.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,1,['Test'],['Test']
Testability,"// Test the support of RooKeysPdf and RooNDKeysPdf for weighted datasets.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooKeysPdf.cxx:3,Test,Test,3,roofit/roofit/test/testRooKeysPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooKeysPdf.cxx,1,['Test'],['Test']
Testability,// Test this to see if it is the oprofile daemon,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/OProfileJIT/OProfileWrapper.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/ExecutionEngine/OProfileJIT/OProfileWrapper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/OProfileJIT/OProfileWrapper.cpp,1,['Test'],['Test']
Testability,// Test to see if the function is misoptimized if we ONLY run it on the; // functions listed in Funcs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp,2,['Test'],['Test']
Testability,// Test to see if two machine operands are of the same type. This test is less; // strict than the MachineOperand::isIdenticalTo function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Lanai/LanaiMemAluCombiner.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Target/Lanai/LanaiMemAluCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Lanai/LanaiMemAluCombiner.cpp,2,"['Test', 'test']","['Test', 'test']"
Testability,// Test to see if we have a code generator crash.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/BugDriver.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/tools/bugpoint/BugDriver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/BugDriver.cpp,1,['Test'],['Test']
Testability,// Test under mask. The first operand is ANDed with the second operand; // and the condition codes are set on the result. The third operand is; // a boolean that is true if the condition codes need to distinguish; // between CCMASK_TM_MIXED_MSB_0 and CCMASK_TM_MIXED_MSB_1 (which the; // register forms do but the memory forms don't).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.h:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.h,1,['Test'],['Test']
Testability,"// Test usage of color components",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpadv7/test/rcolor.cxx:3,Test,Test,3,graf2d/gpadv7/test/rcolor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpadv7/test/rcolor.cxx,1,['Test'],['Test']
Testability,"// Test usage of empty color",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpadv7/test/rcolor.cxx:3,Test,Test,3,graf2d/gpadv7/test/rcolor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpadv7/test/rcolor.cxx,2,['Test'],['Test']
Testability,"// Test variable parsing when using form x[N]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Test,Test,3,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['Test'],['Test']
Testability,"// Test variable/parameter parsing for parametrized functions",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,Test,Test,3,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['Test'],['Test']
Testability,// Test vector type arguments for conversion.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,1,['Test'],['Test']
Testability,"// Test verbosity change on other channel not influcing this one.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/test/testLogger.cxx:3,Test,Test,3,core/foundation/test/testLogger.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/test/testLogger.cxx,1,['Test'],['Test']
Testability,"// Test views that cast to a different type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_view.cxx:3,Test,Test,3,tree/ntuple/v7/test/ntuple_view.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_view.cxx,1,['Test'],['Test']
Testability,// Test whether Def is safe and profitable to rematerialize.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRegStackify.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRegStackify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRegStackify.cpp,1,['Test'],['Test']
Testability,// Test whether N is the bitwise inverse of OfNode.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEISelLowering.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEISelLowering.cpp,1,['Test'],['Test']
Testability,"// Test whether P(k) is a cusp.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/TGraphPainter.cxx:3,Test,Test,3,hist/histpainter/src/TGraphPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/TGraphPainter.cxx,1,['Test'],['Test']
Testability,"// Test whether Reg, as defined at Def, has exactly one use. This is a; // generalization of MachineRegisterInfo::hasOneNonDBGUse that uses; // LiveIntervals to handle complex cases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRegStackify.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRegStackify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRegStackify.cpp,1,['Test'],['Test']
Testability,"// Test whether Y(X) is sufficiently small.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:3,Test,Test,3,hist/hist/src/TGraph.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx,1,['Test'],['Test']
Testability,"// Test whether a bracket has been found .; // If not,continue the search",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:3,Test,Test,3,hist/hist/src/TGraph.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx,1,['Test'],['Test']
Testability,// Test whether a main function with type FuncTy should be rewritten to have; // type MainTy.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyFixFunctionBitcasts.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyFixFunctionBitcasts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyFixFunctionBitcasts.cpp,1,['Test'],['Test']
Testability,// Test whether it's safe to move Def to just before Insert.; // TODO: Compute memory dependencies in a way that doesn't require always; // walking the block.; // TODO: Compute memory dependencies in a way that uses AliasAnalysis to be; // more precise.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRegStackify.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRegStackify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRegStackify.cpp,1,['Test'],['Test']
Testability,"// Test whether the RooSTLRefCountList by RooAbsArg::namePtr() still works; // after renaming the arguments.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooSTLRefCountList.cxx:3,Test,Test,3,roofit/roofitcore/test/testRooSTLRefCountList.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooSTLRefCountList.cxx,1,['Test'],['Test']
Testability,"// Test whether the difference is known to be great enough that memory of; // the given sizes don't overlap. This assumes that ASizeInt and BSizeInt; // are non-zero, which is special-cased above.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolutionAliasAnalysis.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolutionAliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolutionAliasAnalysis.cpp,2,['Test'],['Test']
Testability,// Test whether the given calling convention is supported.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyISelLowering.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyISelLowering.cpp,1,['Test'],['Test']
Testability,"// Test whether the given instance can safely return to C++",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/API.cxx:3,Test,Test,3,bindings/pyroot/cppyy/CPyCppyy/src/API.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/API.cxx,1,['Test'],['Test']
Testability,// Test whether the given node is an all-ones build_vector.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEISelLowering.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEISelLowering.cpp,1,['Test'],['Test']
Testability,// Test whether the given register has an ARGUMENT def.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyFixIrreducibleControlFlow.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyFixIrreducibleControlFlow.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyFixIrreducibleControlFlow.cpp,1,['Test'],['Test']
Testability,// Test whether the high bit of the byte is clear.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,1,['Test'],['Test']
Testability,// Test whether the high bit of the byte is set.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,1,['Test'],['Test']
Testability,"// Test whether the last symbol of the directory is a separator",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx:3,Test,Test,3,core/winnt/src/TWinNTSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx,1,['Test'],['Test']
Testability,// Test whether the physreg survives from the definition to the DBG_VALUE.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocFast.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/CodeGen/RegAllocFast.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocFast.cpp,1,['Test'],['Test']
Testability,"// Test whether the signs of Y(AZ) and Y(BZ) are different.; // if not, begin the binary subdivision.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx:3,Test,Test,3,hist/hist/src/TGraph.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraph.cxx,1,['Test'],['Test']
Testability,"// Test whether the summed total of multiple sections gives the same result; // as an evaluation with a single section over the whole event range.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx:3,Test,Test,3,roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx,2,['Test'],['Test']
Testability,// Test whether the two functions have equivalent behaviour.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/FunctionComparator.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Transforms/Utils/FunctionComparator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/FunctionComparator.cpp,1,['Test'],['Test']
Testability,"// Test whether the variable has completed initialization.; //; // Itanium C++ ABI 3.3.2:; // The following is pseudo-code showing how these functions can be used:; // if (obj_guard.first_byte == 0) {; // if ( __cxa_guard_acquire (&obj_guard) ) {; // try {; // ... initialize the object ...;; // } catch (...) {; // __cxa_guard_abort (&obj_guard);; // throw;; // }; // ... queue object destructor with __cxa_atexit() ...;; // __cxa_guard_release (&obj_guard);; // }; // }; //; // If threadsafe statics are enabled, but we don't have inline atomics, just; // call __cxa_guard_acquire unconditionally. The ""inline"" check isn't; // actually inline, and the user might not expect calls to __atomic libcalls.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:3,Test,Test,3,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,1,['Test'],['Test']
Testability,"// Test whether this location is legal with the given subreg. If the; // subregister has a nonzero offset, drop this location, it's too complex; // to describe. (TODO: future work).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp,1,['Test'],['Test']
Testability,// Test whether two basic blocks have equivalent behaviour.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/FunctionComparator.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Transforms/Utils/FunctionComparator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/FunctionComparator.cpp,1,['Test'],['Test']
Testability,"// Test whether we depend on (ie, are served by) any object in the; // specified collection. Uses the dependsOn(RooAbsArg&) member function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:3,Test,Test,3,roofit/roofitcore/src/RooAbsArg.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx,1,['Test'],['Test']
Testability,// Test whether we should ignore a def of this register due to it being part; // of the stack pointer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['Test'],['Test']
Testability,// Test whether we've already computed the most relevant loop for this SCEV.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp:3,Test,Test,3,interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp,1,['Test'],['Test']
Testability,"// Test with 2 accumulators",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx:3,Test,Test,3,math/mathcore/test/testKahan.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx,1,['Test'],['Test']
Testability,"// Test with 4 accumulators",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx:3,Test,Test,3,math/mathcore/test/testKahan.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx,1,['Test'],['Test']
Testability,"// Test with 8 accumulators",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx:3,Test,Test,3,math/mathcore/test/testKahan.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx,1,['Test'],['Test']
Testability,// Test with basic arguments.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Testing/CommandLineArgs.cpp:3,Test,Test,3,interpreter/llvm-project/clang/lib/Testing/CommandLineArgs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Testing/CommandLineArgs.cpp,1,['Test'],['Test']
Testability,"// Test writing index32/64 columns",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_packing.cxx:3,Test,Test,3,tree/ntuple/v7/test/ntuple_packing.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_packing.cxx,1,['Test'],['Test']
Testability,"// Test, Reset, and Set a bit in the bitmap.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h:3,Test,Test,3,interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SparseBitVector.h,1,['Test'],['Test']
Testability,"// TestTimer(const std::string & s = """") :; // fName(s), fTime(0), fRep(0); // {; // fWatch.Start();; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/stressKalman.cxx:3,Test,TestTimer,3,math/smatrix/test/stressKalman.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/stressKalman.cxx,1,['Test'],['TestTimer']
Testability,"// TestVoxelGrid();",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoParallelWorld.cxx:3,Test,TestVoxelGrid,3,geom/geom/src/TGeoParallelWorld.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoParallelWorld.cxx,1,['Test'],['TestVoxelGrid']
Testability,"// Testing and recording whether we already called HasInconstistentTObjectHash; // for this object could save some cpu cycles in some circuntances (at the cost; // of reserving yet another bit).; // For each insert (CheckedHash is called only for insert in THashList/THashTable), it; // cost one memory fetch, one arithmetic operation and one branching.; // This save a virtual function call which itself contains a static variable memory; // fetch, a branching (of whether the static was already set or not).; // Given that a virtual function call is essentially 2 memory fetches (virtual table; // location and then content), one arithmetic operation and one function call/jump),; // we guess-estimate that the version recording-then-testing-prior-check would start; // saving cpu cycle when each object is inserted in average 1.5 times in a THashList/THashTable.; // if ( !fBits & kCheckedHash) {",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:3,Test,Testing,3,core/base/inc/TObject.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h,2,"['Test', 'test']","['Testing', 'testing-prior-check']"
Testability,// Testing for a single bit; just compare the shift count with what it; // would need to be to shift a 1 bit in that position.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp:3,Test,Testing,3,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp,2,['Test'],['Testing']
Testability,"// Testing for the End of a File; // https://msdn.microsoft.com/en-us/library/windows/desktop/aa365690(v=vs.85).aspx",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/StreamReaderWin.cpp:3,Test,Testing,3,core/textinput/src/textinput/StreamReaderWin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/StreamReaderWin.cpp,1,['Test'],['Testing']
Testability,// Testing it with denormal inputs to avoid wrong estimate.; //; // Test = fabs(X) < SmallestNormal,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:3,Test,Testing,3,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,2,['Test'],"['Test', 'Testing']"
Testability,"// Testing recursive enabling via dependencies: upload packtest3",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Test,Testing,3,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['Test'],['Testing']
Testability,"// Testing the actual and expected output sizes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromROOT.cxx:3,Test,Testing,3,tmva/sofie/test/TestCustomModelsFromROOT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromROOT.cxx,1,['Test'],['Testing']
Testability,"// Testing the actual and expected output values",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromROOT.cxx:3,Test,Testing,3,tmva/sofie/test/TestCustomModelsFromROOT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestCustomModelsFromROOT.cxx,1,['Test'],['Testing']
Testability,"// Testing the std output printing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_display.cxx:3,Test,Testing,3,tree/dataframe/test/dataframe_display.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_display.cxx,14,['Test'],['Testing']
Testability,"// Testing the string returned",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_display.cxx:3,Test,Testing,3,tree/dataframe/test/dataframe_display.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_display.cxx,6,['Test'],['Testing']
Testability,// Testing which overloaded version we should generate the call for.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:3,Test,Testing,3,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,1,['Test'],['Testing']
Testability,"// Tests #7159",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/test/TChainParsing.cxx:3,Test,Tests,3,tree/tree/test/TChainParsing.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/test/TChainParsing.cxx,1,['Test'],['Tests']
Testability,"// Tests ROOT-6378",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testSimple.cxx:3,Test,Tests,3,roofit/roofitcore/test/testSimple.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testSimple.cxx,1,['Test'],['Tests']
Testability,"// Tests ROOT-8367",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/test/TBufferFileTests.cxx:3,Test,Tests,3,io/io/test/TBufferFileTests.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/test/TBufferFileTests.cxx,1,['Test'],['Tests']
Testability,"// Tests ROOT-9857",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/test/TFileTests.cxx:3,Test,Tests,3,io/io/test/TFileTests.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/test/TFileTests.cxx,1,['Test'],['Tests']
Testability,"// Tests ReadV() in RColumn.hxx (the case where a std::string overflows to the next page)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/rfield_string.cxx:3,Test,Tests,3,tree/ntuple/v7/test/rfield_string.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/rfield_string.cxx,1,['Test'],['Tests']
Testability,// Tests Types Of a FP Values for packed types.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h:3,Test,Tests,3,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,1,['Test'],['Tests']
Testability,// Tests Types Of a FP Values for scalar types.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h:3,Test,Tests,3,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,1,['Test'],['Tests']
Testability,"// Tests consistency with a reference file for 1D Histogram",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests consistency with a reference file for 1D Profile",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests consistency with a reference file for 2D Histogram",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests consistency with a reference file for 2D Profile",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests consistency with a reference file for 3D Histogram",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests consistency with a reference file for 3D Profile",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests consistency with a reference file for Sparse Histogram",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:3,Test,Tests,3,roofit/roostats/test/stressRooStats.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx,1,['Test'],['Tests']
Testability,"// Tests for RooAbsCollectionProxy; // Authors: Jonas Rembser, CERN 02/2022",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooCollectionProxy.cxx:3,Test,Tests,3,roofit/roofitcore/test/testRooCollectionProxy.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooCollectionProxy.cxx,1,['Test'],['Tests']
Testability,"// Tests for RooAbsPdf; // Authors: Stephan Hageboeck, CERN 04/2020; // Jonas Rembser, CERN 04/2021",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooAbsPdf.cxx:3,Test,Tests,3,roofit/roofitcore/test/testRooAbsPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooAbsPdf.cxx,1,['Test'],['Tests']
Testability,"// Tests for RooAbsReal; // Authors: Stephan Hageboeck, CERN 05/2020; // Jonas Rembser, CERN 09/2022",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooAbsReal.cxx:3,Test,Tests,3,roofit/roofitcore/test/testRooAbsReal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooAbsReal.cxx,1,['Test'],['Tests']
Testability,"// Tests for RooAddPdf; // Authors: Jonas Rembser, CERN 07/2022",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooAddPdf.cxx:3,Test,Tests,3,roofit/roofitcore/test/testRooAddPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooAddPdf.cxx,1,['Test'],['Tests']
Testability,"// Tests for RooNLLVar and the other test statistics; // Authors: Stephan Hageboeck, CERN 10/2020; // Jonas Rembser, CERN 10/2022",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:3,Test,Tests,3,roofit/roofitcore/test/testTestStatistics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx,2,"['Test', 'test']","['Tests', 'test']"
Testability,"// Tests for RooParamHistFunc; // Author: Jonas Rembser, CERN 03/2020",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooParamHistFunc.cxx:3,Test,Tests,3,roofit/roofit/test/testRooParamHistFunc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooParamHistFunc.cxx,1,['Test'],['Tests']
Testability,"// Tests for RooRealIntegral; // Authors: Jonas Rembser, CERN 10/2022",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:3,Test,Tests,3,roofit/roofitcore/test/testRooRealIntegral.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx,1,['Test'],['Tests']
Testability,"// Tests for TFoam; // Author: Stephan Hageboeck, CERN 04/2020",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/foam/test/testTFoam.cxx:3,Test,Tests,3,math/foam/test/testTFoam.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/foam/test/testTFoam.cxx,1,['Test'],['Tests']
Testability,"// Tests for global observables; // Authors: Jonas Rembser, CERN 08/2021",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testGlobalObservables.cxx:3,Test,Tests,3,roofit/roofitcore/test/testGlobalObservables.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testGlobalObservables.cxx,1,['Test'],['Tests']
Testability,"// Tests for the GenericPdf; // Authors: Stephan Hageboeck, CERN 05/2019; // Jonas Rembser, CERN 06/2022",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testGenericPdf.cxx:3,Test,Tests,3,roofit/roofitcore/test/testGenericPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testGenericPdf.cxx,1,['Test'],['Tests']
Testability,"// Tests for the HistFactory; // Authors: Stephan Hageboeck, CERN 01/2019; // Jonas Rembser, CERN 06/2023",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/testHistFactory.cxx:3,Test,Tests,3,roofit/histfactory/test/testHistFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/testHistFactory.cxx,1,['Test'],['Tests']
Testability,"// Tests for the ParamHistFunc; // Authors: Jonas Rembser, CERN 08/2022",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/testParamHistFunc.cxx:3,Test,Tests,3,roofit/histfactory/test/testParamHistFunc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/testParamHistFunc.cxx,1,['Test'],['Tests']
Testability,"// Tests for the ParamHistFunc; // Authors: Jonas Rembser, CERN 08/2023",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/testHistFactoryPlotting.cxx:3,Test,Tests,3,roofit/histfactory/test/testHistFactoryPlotting.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/testHistFactoryPlotting.cxx,1,['Test'],['Tests']
Testability,"// Tests for the RooAbsCollection and derived classes; // Authors: Stephan Hageboeck, CERN 05/2020",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooAbsCollection.cxx:3,Test,Tests,3,roofit/roofitcore/test/testRooAbsCollection.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooAbsCollection.cxx,1,['Test'],['Tests']
Testability,"// Tests for the RooBifurGauss; // Authors: Jonas Rembser, CERN 2023",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooBifurGauss.cxx:3,Test,Tests,3,roofit/roofit/test/testRooBifurGauss.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooBifurGauss.cxx,1,['Test'],['Tests']
Testability,"// Tests for the RooBinSamplingPdf; // Authors: Jonas Rembser, CERN 03/2022",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooBinSamplingPdf.cxx:3,Test,Tests,3,roofit/roofitcore/test/testRooBinSamplingPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooBinSamplingPdf.cxx,1,['Test'],['Tests']
Testability,"// Tests for the RooCacheManager; // Author: Jonas Rembser, CERN, May 2021",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooCacheManager.cxx:3,Test,Tests,3,roofit/roofitcore/test/testRooCacheManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooCacheManager.cxx,1,['Test'],['Tests']
Testability,"// Tests for the RooCategory; // Author: Jonas Rembser, CERN 04/2021",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooCategory.cxx:3,Test,Tests,3,roofit/roofitcore/test/testRooCategory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooCategory.cxx,1,['Test'],['Tests']
Testability,"// Tests for the RooDataHist; // Authors: Stephan Hageboeck, CERN 01/2019; // Jonas Rembser, CERN 02/2021",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx:3,Test,Tests,3,roofit/roofitcore/test/testRooDataHist.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx,1,['Test'],['Tests']
Testability,"// Tests for the RooDataSet; // Authors: Stephan Hageboeck, CERN 04/2020; // Jonas Rembser, CERN 04/2022",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataSet.cxx:3,Test,Tests,3,roofit/roofitcore/test/testRooDataSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataSet.cxx,1,['Test'],['Tests']
Testability,"// Tests for the RooFormula; // Authors: Stephan Hageboeck, CERN 2020; // Jonas Rembser, CERN 2023",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFormula.cxx:3,Test,Tests,3,roofit/roofitcore/test/testRooFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFormula.cxx,1,['Test'],['Tests']
Testability,"// Tests for the RooGaussian; // Authors: Stephan Hageboeck, CERN 01/2019",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooGaussian.cxx:3,Test,Tests,3,roofit/roofit/test/testRooGaussian.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooGaussian.cxx,1,['Test'],['Tests']
Testability,"// Tests for the RooHist; // Authors: Jonas Rembser, CERN 12/2022",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooHist.cxx:3,Test,Tests,3,roofit/roofitcore/test/testRooHist.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooHist.cxx,1,['Test'],['Tests']
Testability,"// Tests for the RooHistPdf; // Authors: Jonas Rembser, CERN 03/2023",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooHistPdf.cxx:3,Test,Tests,3,roofit/roofitcore/test/testRooHistPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooHistPdf.cxx,1,['Test'],['Tests']
Testability,"// Tests for the RooJSONFactoryWSTool; // Authors: Carsten D. Burgard, DESY/ATLAS, 12/2021; // Jonas Rembser, CERN 12/2022",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/test/testRooFitHS3.cxx:3,Test,Tests,3,roofit/hs3/test/testRooFitHS3.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/test/testRooFitHS3.cxx,1,['Test'],['Tests']
Testability,"// Tests for the RooJohnson; // Author: Stephan Hageboeck, CERN 05/2019",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooExponential.cxx:3,Test,Tests,3,roofit/roofit/test/testRooExponential.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooExponential.cxx,2,['Test'],['Tests']
Testability,"// Tests for the RooKeysPdf and friends; // Authors: Jonas Rembser, CERN 07/2022",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooKeysPdf.cxx:3,Test,Tests,3,roofit/roofit/test/testRooKeysPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooKeysPdf.cxx,1,['Test'],['Tests']
Testability,"// Tests for the RooNaNPacker; // Authors: Stephan Hageboeck, CERN 04/2020",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testNaNPacker.cxx:3,Test,Tests,3,roofit/roofitcore/test/testNaNPacker.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testNaNPacker.cxx,1,['Test'],['Tests']
Testability,"// Tests for the RooPoisson; // Authors: Stephan Hageboeck, CERN 01/2019; // Jonas Rembser, CERN 11/2022",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooPoisson.cxx:3,Test,Tests,3,roofit/roofit/test/testRooPoisson.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooPoisson.cxx,1,['Test'],['Tests']
Testability,"// Tests for the RooProdPdf; // Author: Jonas Rembser, CERN, October 2024",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooMinimizer.cxx:3,Test,Tests,3,roofit/roofitcore/test/testRooMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooMinimizer.cxx,1,['Test'],['Tests']
Testability,"// Tests for the RooProdPdf; // Authors: Stephan Hageboeck, CERN 02/2019; // Jonas Rembser, CERN, June 2021",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooProdPdf.cxx:3,Test,Tests,3,roofit/roofitcore/test/testRooProdPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooProdPdf.cxx,1,['Test'],['Tests']
Testability,"// Tests for the RooRealVar; // Authors: Stephan Hageboeck, CERN 07/2020",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealVar.cxx:3,Test,Tests,3,roofit/roofitcore/test/testRooRealVar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealVar.cxx,1,['Test'],['Tests']
Testability,"// Tests for the RooRombergIntegrator.; // Authors: Stephan Hageboeck, CERN 05/2020; // Jonas Rembser, CERN 08/2023",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx:3,Test,Tests,3,roofit/roofitcore/test/testRooRombergIntegrator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRombergIntegrator.cxx,1,['Test'],['Tests']
Testability,"// Tests for the RooSTLRefCountList; // Author: Jonas Rembser, CERN 2021",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooSTLRefCountList.cxx:3,Test,Tests,3,roofit/roofitcore/test/testRooSTLRefCountList.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooSTLRefCountList.cxx,1,['Test'],['Tests']
Testability,"// Tests for the RooSimultaneous; // Authors: Jonas Rembser, CERN 06/2021",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooSimultaneous.cxx:3,Test,Tests,3,roofit/roofitcore/test/testRooSimultaneous.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooSimultaneous.cxx,1,['Test'],['Tests']
Testability,"// Tests for the RooTemplateProxy and RooCategory, and if they work together; // Author: Stephan Hageboeck, CERN 01/2019",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testProxiesAndCategories.cxx:3,Test,Tests,3,roofit/roofitcore/test/testProxiesAndCategories.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testProxiesAndCategories.cxx,1,['Test'],['Tests']
Testability,"// Tests for the RooTruthModel; // Authors: Jonas Rembser, CERN 11/2023",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooTruthModel.cxx:3,Test,Tests,3,roofit/roofitcore/test/testRooTruthModel.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooTruthModel.cxx,1,['Test'],['Tests']
Testability,"// Tests for the RooWorkspace; // Authors: Stephan Hageboeck, CERN 01/2019",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx:3,Test,Tests,3,roofit/roofitcore/test/testWorkspace.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx,1,['Test'],['Tests']
Testability,"// Tests for the RooWrapperPdf; // Author: Stephan Hageboeck, CERN 09/2019",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooWrapperPdf.cxx:3,Test,Tests,3,roofit/roofitcore/test/testRooWrapperPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooWrapperPdf.cxx,1,['Test'],['Tests']
Testability,"// Tests for the SumW2Error correction; // Author: Jonas Rembser, CERN 10/2021",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testSumW2Error.cxx:3,Test,Tests,3,roofit/roofitcore/test/testSumW2Error.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testSumW2Error.cxx,1,['Test'],['Tests']
Testability,"// Tests functions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:3,Test,Tests,3,test/stressGUI.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx,1,['Test'],['Tests']
Testability,// Tests if any two `FixItHint`s in `FixIts` conflict. Two `FixItHint`s; // conflict if they have overlapping source ranges.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/UnsafeBufferUsage.h:3,Test,Tests,3,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/UnsafeBufferUsage.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/UnsafeBufferUsage.h,1,['Test'],['Tests']
Testability,"// Tests interpolation method for 1D Histogram",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests interpolation method for 1D Histogram with variable bin size",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests interpolation method for 2D Histogram",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests interpolation method for 3D Histogram",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests labelling a 1D Histogram, test ordering of labels (TH1::LabelsOption); // build histogram with extra labels to test also TH1::LabelsDeflate",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,9,"['Test', 'test']","['Tests', 'test']"
Testability,"// Tests labelling a 1D Profile",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests labelling a 1D Profile, test only ordering of labels with content; // test case when profile have weights (issue #)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,3,"['Test', 'test']","['Tests', 'test']"
Testability,"// Tests labelling a 1D Profile, test ordering of labels (TH1::LabelsOption); // build histogram with extra labels to test also TH1::LabelsDeflate; // test also case of labels not ordered (bug present in LabelsOptions before Sep2020)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,4,"['Test', 'test']","['Tests', 'test']"
Testability,"// Tests labelling a 2D Histogram and test ordering of labels in Y axis (TH1::LabelsOption); // build histogram with extra labels to test also TH1::LabelsDeflate",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,6,"['Test', 'test']","['Tests', 'test']"
Testability,"// Tests labelling a 2D Histogram with labels in the X axis (TH1::LabelsOption); // build histogram with extra labels to test also TH1::LabelsDeflate",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,4,"['Test', 'test']","['Tests', 'test']"
Testability,"// Tests labelling a 3D Histogram, test ordering of labels (TH1::LabelsOption); // build histogram with extra labels to test also TH1::LabelsDeflate",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,3,"['Test', 'test']","['Tests', 'test']"
Testability,"// Tests multiplexsor",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx:3,Test,Tests,3,test/tcollbm.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx,1,['Test'],['Tests']
Testability,"// Tests rebin method for 2D Histogram",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,['Test'],['Tests']
Testability,"// Tests rebin method for 2D Profile Histogram",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests rebin method for n-dim Histogram",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests rebin method with an array as input for 1D Histogram",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests rebin method with an array as input for 1D Profile",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests rebin method with an integer as input and without name for 1D Histogram",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests rebin method with an integer as input and without name for 1D Profile",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests rebin method with an integer as input for 1D Histogram",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests rebin method with an integer as input for 1D Profile",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,// Tests that involve more than one class should be processed first.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp:3,Test,Tests,3,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,2,['Test'],['Tests']
Testability,"// Tests the Add method for n-dimensional Histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the Multiply method for Sparse Histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the bin ref: fill, retrieve.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/biniter.cxx:3,Test,Tests,3,hist/histv7/test/biniter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/biniter.cxx,1,['Test'],['Tests']
Testability,"// Tests the clone method for 1D Histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the clone method for 1D Histograms with variable bin size",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the clone method for 1D Profiles",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the clone method for 1D Profiles with variable bin size",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the clone method for 2D Histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the clone method for 2D Profiles",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the clone method for 3D Histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the clone method for 3D Profiles",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the clone method for Sparse histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the copy constructor for 1D Histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the copy constructor for 1D Histograms with variable bin size",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the copy constructor for 1D Profiles",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the copy constructor for 1D Profiles with variable bin size",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the copy constructor for 2D Histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the copy constructor for 2D Profiles",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the copy constructor for 3D Histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the copy constructor for 3D Profiles",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the first Add method for 1D Histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the first Add method for 1D Profiles",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,['Test'],['Tests']
Testability,"// Tests the first Add method for 1D Profiles with variable bin size",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the first Add method for 2D Histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the first Add method for 3D Histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the first Divide method for 1D Histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the first Divide method for 1D Histograms with variable bin size",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the first Divide method for 1D Profiles",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the first Divide method for 2D Histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the first Divide method for 3D Histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,['Test'],['Tests']
Testability,"// Tests the first Multiply method for 1D Histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the first Multiply method for 1D Histograms with variable bin size",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the first Multiply method for 2D Histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the first Multiply method for 3D Histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the first add method to do scalation of 1D Histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the first add method to do scalation of 3D Histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the first add method to do scale of 1D Histograms with variable bin width",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the first add method to do scale of 2D Histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the merge method for 1D Histograms with variable bin size",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the merge method for 1D Histograms; // simpel merge but histogram to merge is not weighted",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the merge method for 1D Histograms; // simple merge with histogram with same limits",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the merge method for 1D Profiles",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the merge method for 1D Profiles with variable bin size",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the merge method for 2D Histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the merge method for 2D Profiles",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the merge method for 3D Histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the merge method for 3D Profiles",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the merge method for diferent 1D Histograms; // when axis can be extended (e.g. for time histograms)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,['Test'],['Tests']
Testability,"// Tests the merge method for diferent 1D Histograms; // when axis can rebin (e.g. for time histograms)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,['Test'],['Tests']
Testability,"// Tests the merge method for different 1D Histograms; // where different axis are used, BUT the largest bin width must be; // a multiple of the smallest bin width",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the merge method for n-dim Histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the merge method with different binned 1D Histograms; // test also case when the first histogram is empty (bug Savannah 95190)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,"['Test', 'test']","['Tests', 'test']"
Testability,"// Tests the merge method with different binned 1D Profile; // Stats fail, for a reason I do not know :S",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the merge method with different binned 2D Histograms; //LM. t.b.u.: for 1D can make h3 with 330 bins , while in 2D if I make h3 with 33 bins; // routine which check axis fails. Needs to be improved ???",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the merge method with different binned 2D Profile; // This tests fails! It should not!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"// Tests the merge method with different binned 3D Histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the merge method with different binned 3D Profile; // This tests fails! Segmentation Fault!!It should not!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"// Tests the merge method with differently labelled 2D Histograms in one axis; // and with new limits in the other axis (see issue 10928)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the merge method with differently labelled 2D Histograms; // This tests verify to perforl a merge using labels for the X axis and; // a numeric merge for the Y axis.; // Note: in case of underflow/overflow in x axis not clear how merge should proceed; // when merging with labels underflow/overflow will not be considered",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"// Tests the merge method with fully differently labelled 1D Histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the merge method with fully differently labelled 1D Profiles",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the merge method with fully differently labelled 2D Profiles; // use less bins",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the merge method with fully differently labelled 3D Histograms; // Make the tests such that merge is done withouy using labels for all axis.; // All label sizes are less than number of bins, therefore axis cannot be extended; // and merge is done then numerically and not in label mode; // use smaller numberOfBins to have all labels filled in h4",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"// Tests the merge method with fully differently labelled 3D Profiles; // use less bins",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the merge method with fully differently labelled 3D weighted; // histograms; // This tests use first axis numerically and then set labels; // and it is different than wiorkflow in previous one; // It is the same as in TProfile3D test case, where we do not have support for filling with labels; // use less bins",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,3,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"// Tests the merge method with fully equally labelled 1D Histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the merge method with fully equally labelled 1D Profiles",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the merge method with fully equally labelled 2D Histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the merge method with fully equally labelled 2D Profiles",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the merge method with fully equally labelled 3D Histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the merge method with fully equally labelled 3D Profiles",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the merge with some different labels for 1D Histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,['Test'],['Tests']
Testability,"// Tests the merge with some different labels method for 1D Profiles",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the merge with some different labels method for 2D Histograms; // It does not work properly! Look, the bins with the same labels; // are different ones and still the tests passes! This is not; // consistent with TH1::Merge()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"// Tests the merge with some different labels method for 2D Profiles",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the merge with some different labels method for 3D Histograms; // It does not work properly! Look, the bins with the same labels; // are different ones and still the tests passes! This is not; // consistent with TH1::Merge()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"// Tests the merge with some different labels method for 3D Profiles",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the merge with some equal labels method for 1D Histograms; // number of labels used = number of bins",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the merge with some equal labels method for 1D Histograms; // number of labels used = number of bins; // This test uses SetBinCOntent instead of Fill and ResetStats after to; // test th ebug in TH1::Merge reported in ROOT-9336; // since we do not set bin errors; // make sure we have not stored Sumw2 otherwise all bin errors; // will be zero. This needs to be done before constructing the histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,3,"['Test', 'test']","['Tests', 'test']"
Testability,"// Tests the merge with some equal labels method for 1D Profiles",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the merge with some equal labels method for 2D Histograms; // Note by LM (Dec 2010); // In reality in 2D histograms the Merge does not support; // histogram with labels - just merges according to the x-values; // This test is basically useless",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,"['Test', 'test']","['Tests', 'test']"
Testability,"// Tests the merge with some equal labels method for 2D Profiles",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the merge with some equal labels method for 3D Histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the merge with some equal labels method for 3D Profiles",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the number of bins",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/biniter.cxx:3,Test,Tests,3,hist/histv7/test/biniter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/test/biniter.cxx,1,['Test'],['Tests']
Testability,"// Tests the operator=() method for 1D Histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the operator=() method for 1D Histograms with variable bin size",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the operator=() method for 1D Profiles",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the operator=() method for 1D Profiles with variable bin size",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the operator=() method for 2D Histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the operator=() method for 2D Profiles",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the operator=() method for 3D Histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the operator=() method for 3D Profiles",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the second Add method for 1D Histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the second Add method for 1D Histograms with variable bin size",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,['Test'],['Tests']
Testability,"// Tests the second Add method for 1D Profiles",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the second Add method for 1D Profiles with variable bin size",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the second Add method for 2D Histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the second Add method for 2D Profiles",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the second Add method for 3D Histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the second Add method for 3D Profiles",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,['Test'],['Tests']
Testability,"// Tests the second Divide method for 1D Histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the second Divide method for 1D Histograms with variable bin size",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the second Divide method for 2D Histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the second Divide method for 3D Histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,['Test'],['Tests']
Testability,"// Tests the second Multiply method for 1D Histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the second Multiply method for 1D Histograms with variable bin size",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the second Multiply method for 2D Histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the second Multiply method for 3D Histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,// Tests the single-subscript MIV pair (Src and Dst) for dependence.; // Return true if dependence disproved.; // Can sometimes refine direction vectors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:3,Test,Tests,3,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,1,['Test'],['Tests']
Testability,"// Tests the write and read methods for 1D Histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the write and read methods for 1D Histograms with variable bin size",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the write and read methods for 1D Profiles",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the write and read methods for 1D Profiles with variable bin size",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the write and read methods for 2D Histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the write and read methods for 2D Profiles",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the write and read methods for 3D Histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the write and read methods for 3D Profile",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,"// Tests the write and read methods for n-dim Histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,Test,Tests,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['Test'],['Tests']
Testability,// Tests whether the target is CSKY,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:3,Test,Tests,3,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['Test'],['Tests']
Testability,"// Tets recurrent network; // test with avg pooling",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx:30,test,test,30,tmva/sofie/test/TestSofieModels.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx,1,['test'],['test']
Testability,// Text-based Dynamic Library Stub file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Binary.h:30,Stub,Stub,30,interpreter/llvm-project/llvm/include/llvm/Object/Binary.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/Binary.h,2,['Stub'],['Stub']
Testability,"// The ""simple"" format is designed to be parsed by the; // layout-override testing code. There shouldn't be any external; // uses of this format --- when LLDB overrides a layout, it sets up; // the data structures directly --- so feel free to adjust this as; // you like as long as you also update the rudimentary parser for it; // in libFrontend.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:75,test,testing,75,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,1,['test'],['testing']
Testability,"// The 'prettyPrintRegisterOp' function uses the DWARFUnit to support; // DW_OP_regval_type. At this point we are operating on a logical view; // item, with no access to the underlying DWARF data used by LLVM.; // We do not support DW_OP_regval_type here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVELFReader.cpp:129,log,logical,129,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVELFReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVELFReader.cpp,1,['log'],['logical']
Testability,"// The 'processLines()' function will move each created logical line; // to its enclosing logical scope, using the debug ranges information; // and they will be released when its scope parent is deleted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewReader.cpp:56,log,logical,56,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewReader.cpp,2,['log'],['logical']
Testability,"// The 'self' clause is a var-list instead of a 'condition' in the case of; // the 'update' clause, so we have to handle it here. U se an assert to; // make sure we get the right differentiator.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseOpenACC.cpp:138,assert,assert,138,interpreter/llvm-project/clang/lib/Parse/ParseOpenACC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseOpenACC.cpp,1,['assert'],['assert']
Testability,"// The -O[12xd] flag actually expands to several flags. We must desugar the; // flags so that options embedded can be negated. For example, the '-O2' flag; // enables '-Oy'. Expanding '-O2' into its constituent flags allows us to; // correctly handle '-O2 -Oy-' where the trailing '-Oy-' disables a single; // aspect of '-O2'.; //; // Note that this expansion logic only applies to the *last* of '[12xd]'.; // First step is to search for the character we'd like to expand.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/MSVC.cpp:360,log,logic,360,interpreter/llvm-project/clang/lib/Driver/ToolChains/MSVC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/MSVC.cpp,1,['log'],['logic']
Testability,// The .crash file can be found on at ~/Library/Logs/DiagnosticReports/; // (or /Library/Logs/DiagnosticReports for root) and has the filename pattern; // clang-<VERSION>_<YYYY-MM-DD-HHMMSS>_<hostname>.crash.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:48,Log,Logs,48,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,2,['Log'],['Logs']
Testability,// The ArmThumbv5LdrPc stub has 2 entrypoints: Thumb at offset 0 is taken only; // for Thumb B instructions. Thumb BL is rewritten to BLX and takes the Arm; // entrypoint at offset 4. Arm branches always use that one.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/aarch32.cpp:23,stub,stub,23,interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/aarch32.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/aarch32.cpp,2,['stub'],['stub']
Testability,"// The CC users in CCUsers are testing the result of a comparison of some; // value X against zero and we know that any CC value produced by MI would; // also reflect the value of X. ConvOpc may be used to pass the transfomed; // opcode MI will have if this succeeds. Try to adjust CCUsers so that they; // test the result of MI directly, returning true on success. Leave; // everything unchanged on failure.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZElimCompare.cpp:31,test,testing,31,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZElimCompare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZElimCompare.cpp,2,['test'],"['test', 'testing']"
Testability,"// The CFG of probing stack looks as; // +-----+; // | MBB |; // +--+--+; // |; // +----v----+; // +--->+ TestMBB +---+; // | +----+----+ |; // | | |; // | +-----v----+ |; // +---+ BlockMBB | |; // +----------+ |; // |; // +---------+ |; // | TailMBB +<--+; // +---------+; // In MBB, calculate previous frame pointer and final stack pointer.; // In TestMBB, test if sp is equal to final stack pointer, if so, jump to; // TailMBB. In BlockMBB, update the sp atomically and jump back to TestMBB.; // TailMBB is spliced via \p MI.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:106,Test,TestMBB,106,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,4,"['Test', 'test']","['TestMBB', 'test']"
Testability,"// The Compile unit contains comdat functions. Traverse the collected; // debug lines and identify logical groups based on their start and; // address. Each group starts with a zero address.; // Begin, End, Address, IsDone.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVBinaryReader.cpp:99,log,logical,99,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVBinaryReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVBinaryReader.cpp,1,['log'],['logical']
Testability,"// The DIAssignID tracking infrastructure doesn't support RAUWing temporary; // nodes with DIAssignIDs. The cast_or_null below would also catch this, but; // having a dedicated assert helps make this obvious.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Metadata.cpp:177,assert,assert,177,interpreter/llvm-project/llvm/lib/IR/Metadata.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Metadata.cpp,1,['assert'],['assert']
Testability,"// The DWARF 'extern' attribute is generated at the class level.; // 0000003f DW_TAG_class_type ""CLASS""; // 00000048 DW_TAG_subprogram ""bar""; //	 DW_AT_external DW_FORM_flag_present; // 00000070 DW_TAG_subprogram ""bar""; // DW_AT_specification DW_FORM_ref4 0x00000048; // CodeView does not include any information at the class level to; // mark the member function as external.; // If there is a reference linking the declaration and definition, mark; // the definition as extern, to facilitate the logical view comparison.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVScope.cpp:498,log,logical,498,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVScope.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVScope.cpp,1,['log'],['logical']
Testability,// The DXILAsmPrinter is mostly a stub because DXIL is just LLVM bitcode which; // gets embedded into a DXContainer file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/DirectX/DirectXAsmPrinter.cpp:34,stub,stub,34,interpreter/llvm-project/llvm/lib/Target/DirectX/DirectXAsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/DirectX/DirectXAsmPrinter.cpp,1,['stub'],['stub']
Testability,"// The ELF reader uses the DWARF constants to create the logical elements.; // The DW_TAG_* and DW_AT_* are used to select the logical object and to; // set specific attributes, such as name, type, etc.; // As the CodeView constants are different to the DWARF constants, the; // CodeView reader will map them to the DWARF ones.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h:57,log,logical,57,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h,2,['log'],['logical']
Testability,"// The GOFFOstream is responsible to write the data into the fixed physical; // records of the format. A user of this class announces the start of a new; // logical record and the size of its content. While writing the content, the; // physical records are created for the data. Possible fill bytes at the end of; // a physical record are written automatically. In principle, the GOFFOstream; // is agnostic of the endianness of the content. However, it also supports; // writing data in big endian byte order.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/GOFFObjectWriter.cpp:157,log,logical,157,interpreter/llvm-project/llvm/lib/MC/GOFFObjectWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/GOFFObjectWriter.cpp,1,['log'],['logical']
Testability,"// The GOFFOstream is responsible to write the data into the fixed physical; // records of the format. A user of this class announces the start of a new; // logical record and the size of its payload. While writing the payload, the; // physical records are created for the data. Possible fill bytes at the end of; // a physical record are written automatically.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/GOFFEmitter.cpp:157,log,logical,157,interpreter/llvm-project/llvm/lib/ObjectYAML/GOFFEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/GOFFEmitter.cpp,1,['log'],['logical']
Testability,"// The Itanium ABI specifies that type_info objects must be globally; // unique, with one exception: if the type is an incomplete class; // type or a (possibly indirect) pointer to one. That exception; // affects the general case of comparing type_info objects produced; // by the typeid operator, which is why the comparison operators on; // std::type_info generally use the type_info name pointers instead; // of the object addresses. However, the language's built-in uses; // of RTTI generally require class types to be complete, even when; // manipulating pointers to those class types. This allows the; // implementation of dynamic_cast to rely on address equality tests,; // which is much faster.; // All of this is to say that it's important that both the type_info; // object and the type_info name be uniqued when weakly emitted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:670,test,tests,670,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,1,['test'],['tests']
Testability,"// The K and L constraints apply *only* to logical immediates, including; // what used to be the MOVI alias for ORR (though the MOVI alias has now; // been removed and MOV should be used). So these constraints have to; // distinguish between bit patterns that are valid 32-bit or 64-bit; // ""bitmask immediates"": for example 0xaaaaaaaa is a valid bimm32 (K), but; // not a valid bimm64 (L) where 0xaaaaaaaaaaaaaaaa would be valid, and vice; // versa.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:43,log,logical,43,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['log'],['logical']
Testability,"// The KahanAddSubtractAssignTest suite tests some edge cases of operator+= and operator-= with another KahanSum as parameter",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx:40,test,tests,40,math/mathcore/test/testKahan.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx,1,['test'],['tests']
Testability,// The LogAlignment info is unused.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:7,Log,LogAlignment,7,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,1,['Log'],['LogAlignment']
Testability,"// The LogicalVisitor connects the CodeViewReader with the visitors that; // traverse the types, symbols, etc. Do any initialization that is needed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp:7,Log,LogicalVisitor,7,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp,1,['Log'],['LogicalVisitor']
Testability,// The LowerTypeTestsPass needs to run to lower type metadata and the; // type.test intrinsics. The pass does nothing if CFI is disabled.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:79,test,test,79,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,1,['test'],['test']
Testability,"// The M and N constraints are a superset of K and L respectively, for use; // with the MOV (immediate) alias. As well as the logical immediates they; // also match 32 or 64-bit immediates that can be loaded either using a; // *single* MOVZ or MOVN , such as 32-bit 0x12340000, 0x00001234, 0xffffedca; // (M) or 64-bit 0x1234000000000000 (N) etc.; // As a note some of this code is liberally stolen from the asm parser.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:126,log,logical,126,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['log'],['logical']
Testability,"// The MemProfImportSummary should only be used for testing ThinLTO; // distributed backend handling via opt, in which case we don't have a; // summary from the pass pipeline.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/MemProfContextDisambiguation.cpp:52,test,testing,52,interpreter/llvm-project/llvm/lib/Transforms/IPO/MemProfContextDisambiguation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/MemProfContextDisambiguation.cpp,1,['test'],['testing']
Testability,"// The MemoryAccess we actually got called with, used to test local domination",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp:57,test,test,57,interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,1,['test'],['test']
Testability,// The Mips N64 ABI allows up to three operations to be specified per; // relocation record. Unfortunately there's no easy way to test for the; // presence of N64 ELFs as they have no special flag that identifies them; // as being N64. We can safely assume at the moment that all Mips; // ELFCLASS64 ELFs are N64. New Mips64 ABIs should provide enough; // information to disambiguate between old vs new ABIs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h:130,test,test,130,interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Object/ELF.h,1,['test'],['test']
Testability,// The NSW flag of a subtract does not always survive the conversion to; // A + (-1)*B. By pushing sign extension onto its operands we are much; // more likely to preserve NSW and allow later AddRec optimisations.; //; // NOTE: This is effectively duplicating this logic from getSignExtend:; // sext((A + B + ...)<nsw>) --> (sext(A) + sext(B) + ...)<nsw>; // but by that point the NSW information has potentially been lost.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:265,log,logic,265,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['log'],['logic']
Testability,"// The Null output is intended for use for performance analysis and testing,; // not real users.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LLVMTargetMachine.cpp:68,test,testing,68,interpreter/llvm-project/llvm/lib/CodeGen/LLVMTargetMachine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LLVMTargetMachine.cpp,1,['test'],['testing']
Testability,// The PE signature bytes that follows the DOS stub header.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/COFF.h:47,stub,stub,47,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/COFF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/COFF.h,1,['stub'],['stub']
Testability,"// The Preprocessor will try to set the NumCreatedFIDs but we are; // reparsing and this value was already set. Force reset it to avoid; // triggering an assertion in the setNumCreatedFIDsForFileID routine.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/LookupHelper.cpp:154,assert,assertion,154,interpreter/cling/lib/Interpreter/LookupHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/LookupHelper.cpp,1,['assert'],['assertion']
Testability,"// The ProdOV computation fails on divide by 0 and divide by -1. Cases with; // INT_MIN will also fail if the divisor is 1. Although folds of all these; // division-by-constant cases should be present, we can not assert that they; // have happened before we reach this icmp instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:213,assert,assert,213,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['assert'],['assert']
Testability,"// The ProducerOpIsMemIndex logic checks for the index of the producer; // register operand. Z-reg load instructions have an implicit operand; // that's not encoded, so the producer won't appear as the 1-th def, it; // will be at the 0-th.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCChecker.cpp:28,log,logic,28,interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCChecker.cpp,1,['log'],['logic']
Testability,"// The RHS is not a nested logical operation. Don't push the terminator; // down further, but instead visit RHS and construct the respective; // pieces of the CFG, and link up the RHSBlock with the terminator; // we have been provided.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp:27,log,logical,27,interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,1,['log'],['logical']
Testability,"// The Reader is the module that creates the logical view using the debug; // information contained in the binary file specified in the command line.; // This is the main entry point for the Reader and performs the following; // steps:; // - Process any patterns collected from the '--select' options.; // - For each compile unit in the debug information:; // * Create the logical elements (scopes, symbols, types, lines).; // * Collect debug ranges and debug locations.; // * Move the collected logical lines to their associated scopes.; // - Once all the compile units have been processed, traverse the scopes; // tree in order to:; // * Calculate symbol coverage.; // * Detect invalid ranges and locations.; // * ""resolve"" the logical elements. During this pass, the names and; // file information are updated, to reflect any dependency with other; // logical elements.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVReader.cpp:45,log,logical,45,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVReader.cpp,5,['log'],['logical']
Testability,"// The RooDataHit can be analytically integrated with the RooDataHist::sum(); // member functions. This functionality is used in the analytical; // integration capabilities of RooHistPdf and RooHistFunc. Therefore, to; // test these two classes at the same time, this tests validated; // RooDataHist::sum() via the RooHistPdf and RooHistFunc interfaces.; // The histograms for this example are kept simple such that one can easily; // calculate the expected values with a calculator.; // We first create an easy non-uniform histogram for the x variable so we; // can know what we expect as test results analytically. The histogram will; // have the following bins with contents:; // - bin1 [0.0, 1.0]: 3 counts (bin volume x counts = 3); // - bin2 [1.0, 3.0]: 1 count (bin volume x counts = 2); // - bin3 [3.0, 3.5]: 8 counts (bin volume x counts = 4)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx:222,test,test,222,roofit/roofitcore/test/testRooDataHist.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx,3,['test'],"['test', 'tests']"
Testability,"// The RooProdPdf model_1 will contain all the constraints, also the one; // that applies to g_main_1. This is the corner case that this test is; // covering.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:137,test,test,137,roofit/roofitcore/test/testTestStatistics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx,1,['test'],['test']
Testability,"// The SIGSTOP test failed spuriously on CI at some point. We suspected this was due to some; // improbable race condition caused in some place where SIGSTOP/SIGCONT crashes a process.; // To find this crash, we bombard the processes with signals in this test.; // We were not able to trigger the crash, so we disabled the test, but leave it in for when; // the spurious test resurfaces.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/test/test_Messenger.cxx:15,test,test,15,roofit/multiprocess/test/test_Messenger.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/test/test_Messenger.cxx,4,['test'],['test']
Testability,// The SYM64 format is used when an archive's member offsets are larger than; // 32-bits can hold. The need for this shift in format is detected by; // writeArchive. To test this we need to generate a file with a member that; // has an offset larger than 32-bits but this demands a very slow test. To; // speed the test up we use this environment variable to pretend like the; // cutoff happens before 32-bits and instead happens at some much smaller; // value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp:169,test,test,169,interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp,3,['test'],['test']
Testability,"// The TRACE macro is used to print internal information about the; // HTML layout engine during testing and debugging. The amount of; // information printed is governed by a global variable named; // HtmlTraceMask. If bits in the first argument to the TRACE macro; // match any bits in HtmlTraceMask variable, then the trace message; // is printed.; //; // All of this is completely disabled, of course, if the DEBUG macro; // is not defined.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/inc/TGHtml.h:97,test,testing,97,gui/guihtml/inc/TGHtml.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/inc/TGHtml.h,1,['test'],['testing']
Testability,"// The TypeIndex returned by 'getUDT()' must point to an already; // created logical element. If no logical element is found, it means; // the LF_UDT_SRC_LINE is associated with a system TypeIndex.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp:77,log,logical,77,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp,2,['log'],['logical']
Testability,"// The above is why we need _minuitExternalX. The _minuitExternalX vector can also be passed to; // LikelihoodWrappers, if needed, but typically they will make use of the RooFit parameters directly. However,; // we log in the flag below whether they are different so that calculators can use this information.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/MinuitFcnGrad.cxx:215,log,log,215,roofit/roofitcore/src/TestStatistics/MinuitFcnGrad.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/MinuitFcnGrad.cxx,1,['log'],['log']
Testability,"// The actual cancel logic is shared with others, e.g., cancel_barriers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp:21,log,logic,21,interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,1,['log'],['logic']
Testability,// The actual logical value of the comparison is same as IsTrue.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstPropagation.cpp:14,log,logical,14,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstPropagation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstPropagation.cpp,2,['log'],['logical']
Testability,"// The analyzer may stop exploring if it sees a state it has previously; // visited (""cache out""). The early return here is a defensive check to; // prevent accidental caching out by checker API clients. Unless there is a; // tag or the client checker has requested that the generated node be; // marked as a sink, we assume that a client requesting a transition to a; // state that is the same as the predecessor state has made a mistake. We; // return the predecessor rather than cache out.; //; // TODO: We could potentially change the return to an assertion to alert; // clients to their mistake, but several checkers (including; // DereferenceChecker, CallAndMessageChecker, and DynamicTypePropagation); // rely upon the defensive behavior and would need to be updated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h:552,assert,assertion,552,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h,1,['assert'],['assertion']
Testability,"// The assert above should make this ""safer"" to satisfy the YAMLTraits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkSerializer.cpp:7,assert,assert,7,interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkSerializer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkSerializer.cpp,1,['assert'],['assert']
Testability,// The assert in EnterCachingLexMode should prevent this from happening.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPCaching.cpp:7,assert,assert,7,interpreter/llvm-project/clang/lib/Lex/PPCaching.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPCaching.cpp,1,['assert'],['assert']
Testability,// The assert looks nicer if we don't need to do &N,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp:7,assert,assert,7,interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSA.cpp,1,['assert'],['assert']
Testability,"// The association between kernel function and LDS struct is done by; // symbol name, which only works if the function in question has a; // name This is not expected to be a problem in practice as kernels; // are called by name making anonymous ones (which are named by the; // backend) difficult to use. This does mean that llvm test cases need; // to name the kernels.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp:331,test,test,331,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,1,['test'],['test']
Testability,// The backedge doesn't exit the loop; treat this as a head-tested loop.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:60,test,tested,60,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['test'],['tested']
Testability,// The base phi insertion logic (for any safepoint) may have inserted new; // instructions which are now live at some safepoint. The simplest such; // example is:; // loop:; // phi a <-- will be a new base_phi here; // safepoint 1 <-- that needs to be live here; // gep a + 1; // safepoint 2; // br loop; // We insert some dummy calls after each safepoint to definitely hold live; // the base pointers which were identified for that safepoint. We'll then; // ask liveness for _every_ base inserted to see what is now live. Then we; // remove the dummy calls.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp:26,log,logic,26,interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,1,['log'],['logic']
Testability,"// The basic pattern for R = P.Q is:; // for i = 0..31; // R = phi (0, R'); // if (P & (1 << i)) ; test-bit(P, i); // R' = R ^ (Q << i); //; // Similarly, the basic pattern for R = (P/Q).Q - P; // for i = 0..31; // R = phi(P, R'); // if (R & (1 << i)); // R' = R ^ (Q << i); // There exist idioms, where instead of Q being shifted left, P is shifted; // right. This produces a result that is shifted right by 32 bits (the; // non-shifted result is 64-bit).; //; // For R = P.Q, this would be:; // for i = 0..31; // R = phi (0, R'); // if ((P >> i) & 1); // R' = (R >> 1) ^ Q ; R is cycled through the loop, so it must; // else ; be shifted by 1, not i.; // R' = R >> 1; //; // And for the inverse:; // for i = 0..31; // R = phi (P, R'); // if (R & 1); // R' = (R >> 1) ^ Q; // else; // R' = R >> 1; // The left-shifting idioms share the same pattern:; // select (X & (1 << i)) ? R ^ (Q << i) : R; // Similarly for right-shifting idioms:; // select (X & 1) ? (R >> 1) ^ Q",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonLoopIdiomRecognition.cpp:99,test,test-bit,99,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonLoopIdiomRecognition.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonLoopIdiomRecognition.cpp,1,['test'],['test-bit']
Testability,"// The below check is quadratic. Check we're not going to do too many tests.; // FIXME: Even though this will always have worst-case quadratic time, we; // could put effort into minimizing the average time by putting stores that; // have been shown to dominate at least one load at the beginning of the; // Stores array, making subsequent dominance checks more likely to succeed; // early.; //; // The threshold here is fairly large because global->local demotion is a; // very powerful optimization should it fire.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp:70,test,tests,70,interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp,1,['test'],['tests']
Testability,"// The below routines verify the correctness of the dominator tree relative to; // the CFG it's coming from. A tree is a dominator tree iff it has two; // properties, called the parent property and the sibling property. Tarjan; // and Lengauer prove (but don't explicitly name) the properties as part of; // the proofs in their 1972 paper, but the proofs are mostly part of proving; // things about semidominators and idoms, and some of them are simply asserted; // based on even earlier papers (see, e.g., lemma 2). Some papers refer to; // these properties as ""valid"" and ""co-valid"". See, e.g., ""Dominators,; // directed bipolar orders, and independent spanning trees"" by Loukas; // Georgiadis and Robert E. Tarjan, as well as ""Dominator Tree Verification; // and Vertex-Disjoint Paths "" by the same authors.; // A very simple and direct explanation of these properties can be found in; // ""An Experimental Study of Dynamic Dominators"", found at; // https://arxiv.org/abs/1604.02711; // The easiest way to think of the parent property is that it's a requirement; // of being a dominator. Let's just take immediate dominators. For PARENT to; // be an immediate dominator of CHILD, all paths in the CFG must go through; // PARENT before they hit CHILD. This implies that if you were to cut PARENT; // out of the CFG, there should be no paths to CHILD that are reachable. If; // there are, then you now have a path from PARENT to CHILD that goes around; // PARENT and still reaches CHILD, which by definition, means PARENT can't be; // a dominator of CHILD (let alone an immediate one).; // The sibling property is similar. It says that for each pair of sibling; // nodes in the dominator tree (LEFT and RIGHT) , they must not dominate each; // other. If sibling LEFT dominated sibling RIGHT, it means there are no; // paths in the CFG from sibling LEFT to sibling RIGHT that do not go through; // LEFT, and thus, LEFT is really an ancestor (in the dominator tree) of; // RIGHT, not a sibling.; // It i",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:453,assert,asserted,453,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,1,['assert'],['asserted']
Testability,// The bit test blocks haven't been inserted yet; insert them here.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp:11,test,test,11,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp,2,['test'],['test']
Testability,"// The branch ""b1"" of the test tree holds integers in the range [0, 20); // multiplied by 10. We traverse the tree with the entry numbers in the; // TEntryList and check that they have the expected value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/test/entrylist_enterrange.cxx:26,test,test,26,tree/tree/test/entrylist_enterrange.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/test/entrylist_enterrange.cxx,1,['test'],['test']
Testability,"// The button for test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:18,test,test,18,test/stressGUI.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx,1,['test'],['test']
Testability,"// The callee promoted the return value, so insert an Assert?ext SDNode so; // we won't promote the value again in this function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/SparcISelLowering.cpp:54,Assert,Assert,54,interpreter/llvm-project/llvm/lib/Target/Sparc/SparcISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/SparcISelLowering.cpp,2,['Assert'],['Assert']
Testability,"// The caller promoted the argument, so insert an Assert?ext SDNode so we; // won't promote the value again in this function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/SparcISelLowering.cpp:50,Assert,Assert,50,interpreter/llvm-project/llvm/lib/Target/Sparc/SparcISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/SparcISelLowering.cpp,2,['Assert'],['Assert']
Testability,"// The caller should guarantee that we have at least 1 byte available, so; // we just assert instead of revalidate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFDebugRnglists.cpp:86,assert,assert,86,interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFDebugRnglists.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFDebugRnglists.cpp,1,['assert'],['assert']
Testability,"// The capture logic needs the destructor, so make sure we mark it.; // Usually this is unnecessary because most local variables have; // their destructors marked at declaration time, but parameters are; // an exception because it's technically only the call site that; // actually requires the destructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:15,log,logic,15,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['log'],['logic']
Testability,"// The case where Op == SymbolicPHI (that is, with no type conversions on; // the way) is handled by the regular add recurrence creating logic and; // would have already been triggered in createAddRecForPHI. Reaching it here; // means that createAddRecFromPHI had failed for this PHI before (e.g.,; // because one of the other operands of the SCEVAddExpr updating this PHI is; // not invariant).; //; // Here we look for the case where Op = (ext(trunc(SymbolicPHI))), and in; // this case predicates that allow us to prove that Op == SymbolicPHI will; // be added.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:137,log,logic,137,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['log'],['logic']
Testability,"// The check below for i386 was copied from clang's cpuid.h (__get_cpuid_max).; // Check motivated by bug reports for OpenSSL crashing on CPUs without CPUID; // support. Consequently, for i386, the presence of CPUID is checked first; // via the corresponding eflags bit.; // Removal of cpuid.h header motivated by PR30384; // Header cpuid.h and method __get_cpuid_max are not used in llvm, clang, openmp; // or test-suite, but are used in external projects e.g. libstdcxx",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TargetParser/Host.cpp:411,test,test-suite,411,interpreter/llvm-project/llvm/lib/TargetParser/Host.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TargetParser/Host.cpp,1,['test'],['test-suite']
Testability,"// The choice to exclude all things constant here is slightly subtle.; // There are two independent reasons:; // - We assume that things which are constant (from LLVM's definition); // do not move at runtime. For example, the address of a global; // variable is fixed, even though it's contents may not be.; // - Second, we can't disallow arbitrary inttoptr constants even; // if the language frontend does. Optimization passes are free to; // locally exploit facts without respect to global reachability. This; // can create sections of code which are dynamically unreachable and; // contain just about anything. (see constants.ll in tests)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp:635,test,tests,635,interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,1,['test'],['tests']
Testability,"// The cmpxchg return value is the only place we need more than one; // contained type ID, however the second one will always be the same (i1),; // so we don't need to include it in the cache key. This asserts that the; // contained types are indeed as expected and there are no collisions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Reader/BitcodeReader.cpp:202,assert,asserts,202,interpreter/llvm-project/llvm/lib/Bitcode/Reader/BitcodeReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Reader/BitcodeReader.cpp,1,['assert'],['asserts']
Testability,"// The code below generates two loads, both aligned as NeedAlign, and; // with the distance of NeedAlign between them. For that to cover the; // bits that need to be loaded (and without overlapping), the size of; // the loads should be equal to NeedAlign. This is true for all loadable; // types, but add an assertion in case something changes in the future.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLowering.cpp:308,assert,assertion,308,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLowering.cpp,1,['assert'],['assertion']
Testability,"// The code below is a unit test for a function called `ProgressHelper_Existence_MT` in the `RDFHelpers` class.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_helpers.cxx:28,test,test,28,tree/dataframe/test/dataframe_helpers.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_helpers.cxx,1,['test'],['test']
Testability,// The code extractor introduces a new root and exit stub blocks with; // additional unconditional branches. Those branches will be eliminated; // later with bb layout. The cost should be adjusted accordingly:,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/PartialInlining.cpp:53,stub,stub,53,interpreter/llvm-project/llvm/lib/Transforms/IPO/PartialInlining.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/PartialInlining.cpp,1,['stub'],['stub']
Testability,"// The code transformation here is a modified version of the sinking; // transformation in CodeGenPrepare::optimizeSelectInst with a more; // aggressive strategy of which instructions to sink.; //; // TODO: eliminate the redundancy of logic transforming selects to branches; // by removing CodeGenPrepare::optimizeSelectInst and optimizing here; // selects for all cases (with and without profile information).; // Transform a sequence like this:; // start:; // %cmp = cmp uge i32 %a, %b; // %sel = select i1 %cmp, i32 %c, i32 %d; //; // Into:; // start:; // %cmp = cmp uge i32 %a, %b; // %cmp.frozen = freeze %cmp; // br i1 %cmp.frozen, label %select.true, label %select.false; // select.true:; // br label %select.end; // select.false:; // br label %select.end; // select.end:; // %sel = phi i32 [ %c, %select.true ], [ %d, %select.false ]; //; // %cmp should be frozen, otherwise it may introduce undefined behavior.; // In addition, we may sink instructions that produce %c or %d into the; // destination(s) of the new branch.; // If the true or false blocks do not contain a sunken instruction, that; // block and its branch may be optimized away. In that case, one side of the; // first branch will point directly to select.end, and the corresponding PHI; // predecessor block will be the start block.; // Find all the instructions that can be soundly sunk to the true/false; // blocks. These are instructions that are computed solely for producing the; // operands of the select instructions in the group and can be sunk without; // breaking the semantics of the LLVM IR (e.g., cannot sink instructions; // with side effects).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectOptimize.cpp:235,log,logic,235,interpreter/llvm-project/llvm/lib/CodeGen/SelectOptimize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectOptimize.cpp,1,['log'],['logic']
Testability,"// The collected type records, will be use to create the logical elements; // during the symbols traversal when a type is referenced.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp:57,log,logical,57,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp,1,['log'],['logical']
Testability,"// The command line is unusual compared to other fuzzers due to the need to; // specify the target. Options like -triple, -mcpu, and -mattr work like; // their counterparts in llvm-mc, while -fuzzer-args collects options for the; // fuzzer itself.; //; // Examples:; //; // Fuzz the big-endian MIPS32R6 disassembler using 100,000 inputs of up to; // 4-bytes each and use the contents of ./corpus as the test corpus:; // llvm-mc-fuzzer -triple mips-linux-gnu -mcpu=mips32r6 -disassemble \; // -fuzzer-args -max_len=4 -runs=100000 ./corpus; //; // Infinitely fuzz the little-endian MIPS64R2 disassembler with the MSA; // feature enabled using up to 64-byte inputs:; // llvm-mc-fuzzer -triple mipsel-linux-gnu -mcpu=mips64r2 -mattr=msa \; // -disassemble -fuzzer-args ./corpus; //; // If your aim is to find instructions that are not tested, then it is; // advisable to constrain the maximum input size to a single instruction; // using -max_len as in the first example. This results in a test corpus of; // individual instructions that test unique paths. Without this constraint,; // there will be considerable redundancy in the corpus.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mc-assemble-fuzzer/llvm-mc-assemble-fuzzer.cpp:403,test,test,403,interpreter/llvm-project/llvm/tools/llvm-mc-assemble-fuzzer/llvm-mc-assemble-fuzzer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mc-assemble-fuzzer/llvm-mc-assemble-fuzzer.cpp,8,['test'],"['test', 'tested']"
Testability,// The condition can be modified by removePredecessor's PHI simplification; // logic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/CorrelatedValuePropagation.cpp:79,log,logic,79,interpreter/llvm-project/llvm/lib/Transforms/Scalar/CorrelatedValuePropagation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/CorrelatedValuePropagation.cpp,1,['log'],['logic']
Testability,"// The core logic from this function is taken from; // SIInsertWaitcnts::updateEventWaitcntAfter() In that pass, the instructions; // that are being looked at are in the MachineInstr format, whereas we have; // access to the MCInst format. The side effects of this are that we can't use; // the mayAccessVMEMThroughFlat(Inst) or mayAccessLDSThroughFlat(Inst); // functions. Therefore, we conservatively assume that these functions will; // return true. This may cause a few instructions to be incorrectly tagged; // with an extra CNT. However, these are instructions that do interact with at; // least one CNT so giving them an extra CNT shouldn't cause issues in most; // scenarios.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/MCA/AMDGPUCustomBehaviour.cpp:12,log,logic,12,interpreter/llvm-project/llvm/lib/Target/AMDGPU/MCA/AMDGPUCustomBehaviour.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/MCA/AMDGPUCustomBehaviour.cpp,1,['log'],['logic']
Testability,"// The cost tables include both specific, custom (non-legal) src/dst type; // conversions and generic, legalized types. We test for customs first, before; // falling back to legalization.; // FIXME: Need a better design of the cost table to handle non-simple types of; // potential massive combinations (elem_num x src_type x dst_type).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp:123,test,test,123,interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,1,['test'],['test']
Testability,"// The current CU can be a normal compile unit (standard) or a skeleton; // compile unit (split). For both cases, the returned die, will be used; // to create the logical scopes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVELFReader.cpp:163,log,logical,163,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVELFReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVELFReader.cpp,1,['log'],['logical']
Testability,// The current testing format version is Version2.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:15,test,testing,15,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,1,['test'],['testing']
Testability,"// The declaration of the value may rely on a pointer so take its l-value.; // FIXME: As seen in VisitCommonDeclRefExpr, sometimes DeclRefExpr may; // evaluate to a FieldRegion when it refers to a declaration of a lambda; // capture variable. We most likely need to duplicate that logic here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp:281,log,logic,281,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp,1,['log'],['logic']
Testability,// The default case when not handling logical operators.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp:38,log,logical,38,interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,2,['log'],['logical']
Testability,"// The default logic bothers to analyze impossible alternative mappings. We; // want the most straightforward mapping, so just directly handle this.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp:15,log,logic,15,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp,1,['log'],['logic']
Testability,"// The delinearization transforms a single-subscript MIV dependence test into; // a multi-subscript SIV dependence test that is easier to compute. So we; // resize Pair to contain as many pairs of subscripts as the delinearization; // has found, and then initialize the pairs following the delinearization.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:68,test,test,68,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,2,['test'],['test']
Testability,"// The destructor will close the TFitEditor and terminate the; // application. Unfortunately, the application must be run from; // main, otherwise, the test will make a segmentation fault while; // trying to retrieve the TFitEditor singleton. If the user wants; // to play a bit with the fitpanel once the tests have finised,; // then they should comment this method.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/test/UnitTesting.cxx:152,test,test,152,gui/fitpanel/test/UnitTesting.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/test/UnitTesting.cxx,2,['test'],"['test', 'tests']"
Testability,// The dispatch logic doesn't internally buffer instructions. It only accepts; // instructions that can be successfully moved to the next stage during this; // same cycle.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp:16,log,logic,16,interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp,1,['log'],['logic']
Testability,// The dispatch logic internally doesn't buffer instructions. So there is; // never work to do at the beginning of every cycle.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/DispatchStage.h:16,log,logic,16,interpreter/llvm-project/llvm/include/llvm/MCA/Stages/DispatchStage.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MCA/Stages/DispatchStage.h,1,['log'],['logic']
Testability,// The enum contains logical module sections for the instruction collection.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVModuleAnalysis.h:21,log,logical,21,interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVModuleAnalysis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVModuleAnalysis.h,1,['log'],['logical']
Testability,"// The expanded token stream consists of runs of tokens that came from; // the same source (a macro expansion, part of a file etc).; // Between these runs are the logical positions of spelled tokens that; // didn't expand to anything.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Syntax/Tokens.cpp:163,log,logical,163,interpreter/llvm-project/clang/lib/Tooling/Syntax/Tokens.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Syntax/Tokens.cpp,1,['log'],['logical']
Testability,"// The expression emitters assume (reasonably!) that the insertion; // point is always set. To maintain that, the call-emission code; // for noreturn functions has to enter a new block with no; // predecessors. We want to kill that block and mark the current; // insertion point unreachable in the common case of a call like; // ""exit();"". Since expression emission doesn't otherwise create; // blocks with no predecessors, we can just test for that.; // However, we must be careful not to do this to our incoming; // block, because *statement* emission does sometimes create; // reachable blocks which will have no predecessors until later in; // the function. This occurs with, e.g., labels that are not; // reachable by fallthrough.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:436,test,test,436,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,1,['test'],['test']
Testability,// The expression in a static assertion is a constant expression.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:30,assert,assertion,30,interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,1,['assert'],['assertion']
Testability,"// The factory creates all MVA methods, and performs their training and testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h:72,test,testing,72,tmva/tmva/inc/TMVA/Factory.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h,1,['test'],['testing']
Testability,"// The final definition will reside in this linkage unit if the symbol is; // defined and local to the module. This only checks for bitcode files,; // full assertion will require complete symbol resolution.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp:156,assert,assertion,156,interpreter/llvm-project/clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp,1,['assert'],['assertion']
Testability,"// The first instruction loads a PC-relative address into %r11 which is a; // GOT entry for this stub. This initially contains the address to the; // IFunc resolver. We can use %r11 here as it's caller saved but not used; // to pass any arguments. In fact, x86_64 ABI even suggests using %r11 for; // code in the PLT. The IFunc resolver will use %r11 to update the GOT; // entry.; //; // The next instruction just jumps to the address contained in the GOT; // entry. As mentioned above, we do this two-step jump by first setting; // %r11 so that the IFunc resolver has access to it.; //; // The IFunc resolver of course also needs to know the actual address of; // the actual IFunc resolver function. This will be stored in a GOT entry; // right next to the first one for this stub. So, the IFunc resolver will; // be able to call it with %r11+8.; //; // In total, two adjacent GOT entries (+relocation) and one additional; // relocation are required:; // GOT1: Address of the IFunc resolver.; // GOT2: Address of the IFunc resolver function.; // IFuncStubOffset+3: 32-bit PC-relative address of GOT1.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp:97,stub,stub,97,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp,2,['stub'],['stub']
Testability,// The first operand of Ashr comes from logical shift left.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonOptimizeSZextends.cpp:40,log,logical,40,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonOptimizeSZextends.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonOptimizeSZextends.cpp,1,['log'],['logical']
Testability,"// The first specification takes the first two files and reads them both from beginning to end.; // The second specification takes the second and third file, but only reads the third one.; // This simulates two tasks that might be created when logically splitting the input dataset.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_cloning.cxx:244,log,logically,244,tree/dataframe/test/dataframe_cloning.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_cloning.cxx,1,['log'],['logically']
Testability,"// The first version's number corresponds to the string ""testdata"" in; // little-endian. This is for a historical reason.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h:57,test,testdata,57,interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h,1,['test'],['testdata']
Testability,"// The fit range needs to be a multi-range to trigger the problem that is covered by this test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooProdPdf.cxx:90,test,test,90,roofit/roofitcore/test/testRooProdPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooProdPdf.cxx,1,['test'],['test']
Testability,"// The following assert is important to ensure a lack of infinite loops.; // This transforms is (intentionally) the inverse of the one just above.; // If they don't agree on the definition of an increment, we'd alternate; // back and forth indefinitely.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:17,assert,assert,17,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,1,['assert'],['assert']
Testability,"// The following callbacks implement operating system specific functionality. In contrast to the previous callbacks,; // there is no need to implement any customized logic for the following ones. An implementation has to be; // provided nevertheless to have a fully functional VFS module.; ////////////////////////////////////////////////////////////////////////////; /// This VFS module cannot remove files",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RSqliteDS.cxx:166,log,logic,166,tree/dataframe/src/RSqliteDS.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RSqliteDS.cxx,1,['log'],['logic']
Testability,"// The following class implements a function executor that executes the; // benchmark code within a subprocess rather than within the main llvm-exegesis; // process. This allows for much more control over the execution context of the; // snippet, particularly with regard to memory. This class performs all the; // necessary functions to create the subprocess, execute the snippet in the; // subprocess, and report results/handle errors.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp:76,benchmark,benchmark,76,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp,1,['benchmark'],['benchmark']
Testability,"// The following code is ported from AArch64ISelLowering.; // Multiplication of a power of two plus/minus one can be done more; // cheaply as shift+add/sub. For now, this is true unilaterally. If; // future CPUs have a cheaper MADD instruction, this may need to be; // gated on a subtarget feature. For Cyclone, 32-bit MADD is 4 cycles and; // 64-bit is 5 cycles, so this is always a win.; // More aggressively, some multiplications N0 * C can be lowered to; // shift+add+shift if the constant C = A * B where A = 2^N + 1 and B = 2^M,; // e.g. 6=3*2=(2+1)*2.; // TODO: consider lowering more cases, e.g. C = 14, -6, -14 or even 45; // which equals to (1+2)*16-(1+2).; // TrailingZeroes is used to test if the mul can be lowered to; // shift+add+shift.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64PostLegalizerCombiner.cpp:697,test,test,697,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64PostLegalizerCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64PostLegalizerCombiner.cpp,1,['test'],['test']
Testability,"// The following data keeps forward information, type records, names for; // namespace deduction, strings records, line records.; // It is shared by the type visitor, symbol visitor and logical visitor and; // it is independent from the CodeViewReader.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp:186,log,logical,186,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp,1,['log'],['logical']
Testability,"// The following getters are used for testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h:38,test,testing,38,tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/CNN/ConvLayer.h,2,['test'],['testing']
Testability,// The following is safe because we only use this method for; // non-overloadable operands.; // C++ [expr.log.and]p1; // C++ [expr.log.or]p1; // The operands are both contextually converted to type bool.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:106,log,log,106,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,2,['log'],['log']
Testability,"// The following needs to be a loop, as for now, we do allow needing to; // go over ""Unsupported"" bit sizes before finding a legalizable bit size.; // e.g. (s8, WidenScalar), (s9, Unsupported), (s32, Legal). if Size==8,; // we need to iterate over s9, and then to s32 to return (s32, Legal).; // If we want to get rid of the below loop, we should have stronger asserts; // when building the SizeAndActionsVecs, probably not allowing; // ""Unsupported"" unless at the ends of the vector.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegacyLegalizerInfo.cpp:361,assert,asserts,361,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegacyLegalizerInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegacyLegalizerInfo.cpp,1,['assert'],['asserts']
Testability,// The following occurs within the benchmarking subprocess,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp:35,benchmark,benchmarking,35,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkRunner.cpp,1,['benchmark'],['benchmarking']
Testability,// The following section will be LFENCEing before groups of terminators; // that include branches. This will close the branch prediction side; // channels since we will prevent code executing after misspeculation as; // a result of the LFENCEs placed with this logic.; // Keep track of the first terminator in a basic block since if we need; // to LFENCE the terminators in this basic block we must add the; // instruction before the first terminator in the basic block (as; // opposed to before the terminator that indicates an LFENCE is; // required). An example of why this is necessary is that the; // X86InstrInfo::analyzeBranch method assumes all terminators are grouped; // together and terminates it's analysis once the first non-termintor; // instruction is found.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeExecutionSideEffectSuppression.cpp:261,log,logic,261,interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeExecutionSideEffectSuppression.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeExecutionSideEffectSuppression.cpp,1,['log'],['logic']
Testability,// The following transforms are only worth it if the only user of the subtract; // is the icmp.; // TODO: This is an artificial restriction for all of the transforms below; // that only need a single replacement icmp. Can these use the phi test; // like the transform above here?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:240,test,test,240,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['test'],['test']
Testability,// The frontend that generates that parses the memory mapping information; // from the user should validate that the requested address is a multiple; // of the page size. Assert that this is true here.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Assembler.cpp:171,Assert,Assert,171,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Assembler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Assembler.cpp,1,['Assert'],['Assert']
Testability,"// The function definition has parameters, so this will change behavior; // in C23. If there is a possible prototype, it comes before the; // function definition.; // FIXME: The declaration may have already been diagnosed as being; // deprecated in GetFullTypeForDeclarator() if it had no arguments, but; // there's no way to test for the ""changes behavior"" condition in; // SemaType.cpp when forming the declaration's function type. So, we do; // this awkward dance instead.; //; // If we have a possible prototype and it declares a function with a; // prototype, we don't want to diagnose it; if we have a possible; // prototype and it has no prototype, it may have already been; // diagnosed in SemaType.cpp as deprecated depending on whether; // -Wstrict-prototypes is enabled. If we already warned about it being; // deprecated, add a note that it also changes behavior. If we didn't; // warn about it being deprecated (because the diagnostic is not; // enabled), warn now that it is deprecated and changes behavior.; // This K&R C function definition definitely changes behavior in C23,; // so diagnose it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:326,test,test,326,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['test'],['test']
Testability,// The function is now a stub we want to inline.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURewriteOutArguments.cpp:25,stub,stub,25,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURewriteOutArguments.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURewriteOutArguments.cpp,1,['stub'],['stub']
Testability,"// The general case for select-of-constants:; // vselect <N x i1> Cond, C1, C2 --> xor (and (sext Cond), (C1^C2)), C2; // ...but that only makes sense if a vselect is slower than 2 logic ops, so; // leave that to a machine-specific pass.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:181,log,logic,181,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['log'],['logic']
Testability,"// The getMatchingSuper asserts guarantee that the register class projected; // by SubRegB is compatible with RegA with no subregister. So regardless of; // whether the dest oper writes a subreg, the source oper should not.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp:24,assert,asserts,24,interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp,1,['assert'],['asserts']
Testability,"// The global_ctor array elements are a struct [Priority, Fn *, COMDat].; // HLSL neither supports priorities or COMDat values, so we will check those; // in an assert but not handle them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGHLSLRuntime.cpp:161,assert,assert,161,interpreter/llvm-project/clang/lib/CodeGen/CGHLSLRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGHLSLRuntime.cpp,1,['assert'],['assert']
Testability,// The header is basically 'struct { int; int; generic void *;; // custom_fields; }'. Assert that struct is packed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:86,Assert,Assert,86,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,1,['Assert'],['Assert']
Testability,// The header is basically 'struct { void *; int; int; void *; void *; }'.; // Assert that the struct is packed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:79,Assert,Assert,79,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,1,['Assert'],['Assert']
Testability,"// The hwloop intrinsics that we're interested are used for control-flow,; // either for entering or exiting the loop:; // - test.start.loop.iterations will test whether its operand is zero. If it; // is zero, the proceeding branch should not enter the loop.; // - loop.decrement.reg also tests whether its operand is zero. If it is; // zero, the proceeding branch should not branch back to the beginning of; // the loop.; // So here, we need to check that how the brcond is using the result of each; // of the intrinsics to ensure that we're branching to the right place at the; // right time.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:125,test,test,125,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,3,['test'],"['test', 'tests']"
Testability,"// The idea here is to check whether this is equivalent to:; // (c1 & m) | (x & ~m); // where m is a run-of-ones mask. The logic here is that, for each bit in; // c1 and c2:; // - if both are 1, then the output will be 1.; // - if both are 0, then the output will be 0.; // - if the bit in c1 is 0, and the bit in c2 is 1, then the output will; // come from x.; // - if the bit in c1 is 1, and the bit in c2 is 0, then the output will; // be 0.; // If that last condition is never the case, then we can form m from the; // bits that are the same between c1 and c2.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:123,log,logic,123,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,1,['log'],['logic']
Testability,// The inMips16Mode() test is not permanent.; // Some instructions are marked as pseudo right now which; // would make the test fail for the wrong reason but; // that will be fixed soon. We need this here because we are; // removing another test for this situation downstream in the; // callchain.; //,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsAsmPrinter.cpp:22,test,test,22,interpreter/llvm-project/llvm/lib/Target/Mips/MipsAsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsAsmPrinter.cpp,3,['test'],['test']
Testability,"// The incoming value is defined in the outer loop latch. Currently we; // only support that in case the outer loop latch has a single predecessor.; // This guarantees that the outer loop latch is executed if and only if; // the inner loop is executed (because tightlyNested() guarantees that the; // outer loop header only branches to the inner loop or the outer loop; // latch).; // FIXME: We could weaken this logic and allow multiple predecessors,; // if the values are produced outside the loop latch. We would need; // additional logic to update the PHI nodes in the exit block as; // well.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopInterchange.cpp:413,log,logic,413,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopInterchange.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopInterchange.cpp,2,['log'],['logic']
Testability,"// The inline deferral logic is used to avoid losing some; // inlining chance in future. It is helpful in SCC inliner, in which; // inlining is processed in bottom-up order.; // While in module inliner, the inlining order is a priority-based order; // by default. The inline deferral is unnecessary there. So we disable the; // inline deferral logic in module inliner.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:23,log,logic,23,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,2,['log'],['logic']
Testability,// The inner logic op must have a matching fcmp operand.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:13,log,logic,13,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,1,['log'],['logic']
Testability,// The insertion point is the LoadInst which loads the first values. The; // following tests are used to proof that the combined load can be inserted; // just before InsertionPoint.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/InterleavedLoadCombinePass.cpp:87,test,tests,87,interpreter/llvm-project/llvm/lib/CodeGen/InterleavedLoadCombinePass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/InterleavedLoadCombinePass.cpp,1,['test'],['tests']
Testability,"// The instance typically gets created by some Job. Once all Jobs are gone, the; // JM will get destroyed. In this case, the job_objects map should have; // been emptied.; // The second case is when the program ends, at which time the static instance; // is destroyed. Jobs may still be present, for instance, the Job subclass; // RooFit::TestStatistics::LikelihoodGradientJob, will have; // been put into RooMinimizer::_theFitter->fObjFunction, as the gradient; // member. Because _theFitter is also a global static member, we cannot; // guarantee destruction order, and so the JobManager may be destroyed before; // all Jobs are destroyed. We cannot therefore make sure that the first; // condition is met. However, the Job objects stuck in _theFitter are not; // meant to be run again, because the program is ending anyway. So also in this; // case, we can safely shut down.; // There used to be an assert statement that checked whether the job_objects; // map was empty at destruction time, but that neglected the second possibility; // and led to assertion failures, which left the Messenger and ProcessManager; // objects intact, leading to the forked processes and their ZeroMQ resources; // to remain after exiting the main/master/parent process.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/src/JobManager.cxx:339,Test,TestStatistics,339,roofit/multiprocess/src/JobManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/src/JobManager.cxx,3,"['Test', 'assert']","['TestStatistics', 'assert', 'assertion']"
Testability,// The instruction defining an assumption's condition itself is always; // considered ephemeral to that assumption (even if it has other; // non-ephemeral users). See r246696's test case for an example.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp:177,test,test,177,interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,1,['test'],['test']
Testability,"// The instruction doesn't differentiate between signaling or quiet NaN. Test; // the rest first, and test if it 'is NaN and is signaling/quiet'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:73,Test,Test,73,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,2,"['Test', 'test']","['Test', 'test']"
Testability,"// The intention here is to find diamonds or triangles (see below) where each; // conditional block contains a store to the same address. Both of these; // stores are conditional, so they can't be unconditionally sunk. But it may; // be profitable to speculatively sink the stores into one merged store at the; // end, and predicate the merged store on the union of the two conditions of; // PBI and QBI.; //; // This can reduce the number of stores executed if both of the conditions are; // true, and can allow the blocks to become small enough to be if-converted.; // This optimization will also chain, so that ladders of test-and-set; // sequences can be if-converted away.; //; // We only deal with simple diamonds or triangles:; //; // PBI or PBI or a combination of the two; // / \ | \; // PTB PFB | PFB; // \ / | /; // QBI QBI; // / \ | \; // QTB QFB | QFB; // \ / | /; // PostBB PostBB; //; // We model triangles as a type of diamond with a nullptr ""true"" block.; // Triangles are canonicalized so that the fallthrough edge is represented by; // a true condition, as in the diagram above.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp:625,test,test-and-set,625,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,1,['test'],['test-and-set']
Testability,"// The kinds of expressions that we have special-case logic here for; // should be kept up to date with the special checks for those; // expressions in Sema.; // alignof decl is always accepted, even if it doesn't make sense: we default; // to 1 in those cases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:54,log,logic,54,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['log'],['logic']
Testability,"// The kinds of expressions that we have special-case logic here for; // should be kept up to date with the special checks for those; // expressions in Sema.; // alignof decl is always accepted, even if it doesn't make sense: we; // default to 1 in those cases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp:54,log,logic,54,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,1,['log'],['logic']
Testability,"// The leading underscore of ""_hh"" tests against ROOT-10305.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_simple.cxx:35,test,tests,35,tree/dataframe/test/dataframe_simple.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_simple.cxx,1,['test'],['tests']
Testability,"// The line in which we collect the resulting reconstructed output.; // To reduce special cases in the algorithm, the first level of the line; // contains a single null token that has the reconstructed incoming; // lines as children.; // In the end, we stich the lines together so that each subsequent line; // is a child of the last token of the previous line. This is necessary; // in order to format the overall expression as a single logical line -; // if we created separate lines, we'd format them with their own top-level; // indent depending on the semantic structure, which is not desired.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/Macros.h:438,log,logical,438,interpreter/llvm-project/clang/lib/Format/Macros.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/Macros.h,1,['log'],['logical']
Testability,// The list of llvm.type.test type identifiers used by the following function; // that are used other than by an llvm.assume.; // [n x typeid],MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitcode/LLVMBitCodes.h:25,test,test,25,interpreter/llvm-project/llvm/include/llvm/Bitcode/LLVMBitCodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitcode/LLVMBitCodes.h,1,['test'],['test']
Testability,"// The list of virtual calls made by this function using; // llvm.assume(llvm.type.test) intrinsics that do not have all constant; // integer arguments.; // [n x (typeid, offset)]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitcode/LLVMBitCodes.h:83,test,test,83,interpreter/llvm-project/llvm/include/llvm/Bitcode/LLVMBitCodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitcode/LLVMBitCodes.h,1,['test'],['test']
Testability,"// The log file is send either in HandleProcess or HandleSubmergers.; // The reason is that the order of various messages depend on the; // processing mode (sync/async) and/or merging mode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx:7,log,log,7,proof/proof/src/TProofServ.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx,1,['log'],['log']
Testability,"// The logic for ObjC instance method calls is more complicated,; // as the return value is nil when the receiver is nil.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/TrustNonnullChecker.cpp:7,log,logic,7,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/TrustNonnullChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/TrustNonnullChecker.cpp,1,['log'],['logic']
Testability,"// The logic for non-templates is handled in ASTContext::isSameEntity, so we; // don't have to bother checking 'DependsOnEnclosingTemplate' for a; // non-function-template.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaConcept.cpp:7,log,logic,7,interpreter/llvm-project/clang/lib/Sema/SemaConcept.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaConcept.cpp,1,['log'],['logic']
Testability,"// The logic for summing over the histogram is borrowed from RooHistPdf with some differences:; //; // - a lambda function is used to inject the parameters for bin scaling into the RooDataHist::sum method; //; // - for simplicity, there is no check for the possibility of full-range integration with another overload of; // RooDataHist::sum",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooParamHistFunc.cxx:7,log,logic,7,roofit/roofit/src/RooParamHistFunc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooParamHistFunc.cxx,1,['log'],['logic']
Testability,// The logic here is derived from gcc's behavior; most of which; // comes from specs (starting with link_command). Consult gcc for; // more information.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Darwin.cpp:7,log,logic,7,interpreter/llvm-project/clang/lib/Driver/ToolChains/Darwin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Darwin.cpp,1,['log'],['logic']
Testability,"// The logic here should be correct for any real-world personality function.; // However if that turns out not to be true, the offending logic can always; // be conditioned on the personality function, like the catch-all logic is.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp:7,log,logic,7,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,3,['log'],['logic']
Testability,"// The logic in this function assumes we can represent a positive stride.; // If we can't, the backedge-taken count must be zero.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:7,log,logic,7,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['log'],['logic']
Testability,// The logic is same as in DefaultABIInfo with an exception on the kernel; // arguments handling.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SPIR.cpp:7,log,logic,7,interpreter/llvm-project/clang/lib/CodeGen/Targets/SPIR.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SPIR.cpp,1,['log'],['logic']
Testability,"// The logic is the reverse of what we need for WLS, so find the other; // basic block target: the target of the proceeding br.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:7,log,logic,7,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['log'],['logic']
Testability,"// The loop exit instruction we check first (as a quick test) but add last. We; // check the opcode is correct (and dont allow them to be Subs) and that they; // have expected to have the expected number of uses. They will have one use; // from the phi and one from a LCSSA value, no matter the type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp:56,test,test,56,interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp,1,['test'],['test']
Testability,// The mach-o version of this method defaults to returning a stub reference.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp:61,stub,stub,61,interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp,2,['stub'],['stub']
Testability,// The main purpose of this operator is to assert with bad argument.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitTracker.cpp:43,assert,assert,43,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitTracker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitTracker.cpp,1,['assert'],['assert']
Testability,// The main topological sort logic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyCFGSort.cpp:29,log,logic,29,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyCFGSort.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyCFGSort.cpp,1,['log'],['logic']
Testability,"// The maximum number of memoization entries to store.; // 10k has been experimentally found to give a good trade-off; // of performance vs. memory consumption by running matcher; // that match on every statement over a very large codebase.; //; // FIXME: Do some performance optimization in general and; // revisit this number; also, put up micro-benchmarks that we can; // optimize this on.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp:348,benchmark,benchmarks,348,interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp,1,['benchmark'],['benchmarks']
Testability,"// The message is logged for debugging purposes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:18,log,logged,18,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['log'],['logged']
Testability,// The messages logged in the current context but not yet written.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/HTMLLogger.cpp:16,log,logged,16,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/HTMLLogger.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/HTMLLogger.cpp,1,['log'],['logged']
Testability,// The new inst needs a DIAssignID unique metadata tag (if OldInst has; // one). It shouldn't already have one: assert this assumption.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:112,assert,assert,112,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['assert'],['assert']
Testability,"// The new, countable, loop will certainly only run a known number of; // iterations, It won't be infinite. But the old loop might be infinite; // under certain conditions. For logical shifts, the value will become zero; // after at most bitwidth(%Val) loop iterations. However, for arithmetic; // right-shift, iff the sign bit was set, the value will never become zero,; // and the loop may never finish.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopIdiomRecognize.cpp:177,log,logical,177,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopIdiomRecognize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopIdiomRecognize.cpp,1,['log'],['logical']
Testability,// The non-asserted capability is the one we want to track.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp:11,assert,asserted,11,interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,1,['assert'],['asserted']
Testability,// The number of columns left in the current logical line after TailOffset.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.cpp:45,log,logical,45,interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.cpp,1,['log'],['logical']
Testability,// The number of logical records emitted so far.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/GOFFEmitter.cpp:17,log,logical,17,interpreter/llvm-project/llvm/lib/ObjectYAML/GOFFEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/GOFFEmitter.cpp,1,['log'],['logical']
Testability,"// The number of tied operand combinations will be small in practice,; // but just add the assert to be sure.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:91,assert,assert,91,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,1,['assert'],['assert']
Testability,"// The offset calculation does not include sandboxing instructions; // that will be added later in the MC layer. Since at this point we; // don't know the exact amount of code that ""sandboxing"" will add, we; // conservatively estimate that code will not grow more than 100%.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsBranchExpansion.cpp:43,sandbox,sandboxing,43,interpreter/llvm-project/llvm/lib/Target/Mips/MipsBranchExpansion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsBranchExpansion.cpp,2,['sandbox'],['sandboxing']
Testability,"// The offset of a store will put restrictions on how wide the store can be.; // Offsets in stores of size 2^n bytes need to have the n lowest bits be 0.; // If the first store already exhausts the offset limits, quit. Test this; // by checking if the next wider size would exceed the limit.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonStoreWidening.cpp:219,Test,Test,219,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonStoreWidening.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonStoreWidening.cpp,1,['Test'],['Test']
Testability,"// The only case a 256-bit wide vector could be used is when the array; // contains a single 256-bit element. Since Lo and Hi logic isn't extended; // to work for sizes wider than 128, early check and fallback to memory.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:126,log,logic,126,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,1,['log'],['logic']
Testability,"// The only loops we can vectorize without a scalar epilogue, are loops with; // a bottom-test and a single exiting block. We'd have to handle the fact; // that not every instruction executes on the last iteration. This will; // require a lane mask which varies through the vector loop body. (TODO)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:90,test,test,90,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['test'],['test']
Testability,// The only terminator (if there is one) that makes sense is a logical op.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineC.cpp:63,log,logical,63,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineC.cpp,1,['log'],['logical']
Testability,"// The only way to get a GsymReader is from GsymReader::openFile(...) or; // GsymReader::copyBuffer() and the header must be valid and initialized to; // a valid pointer value, so the assert below should not trigger.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/GSYM/GsymReader.cpp:184,assert,assert,184,interpreter/llvm-project/llvm/lib/DebugInfo/GSYM/GsymReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/GSYM/GsymReader.cpp,1,['assert'],['assert']
Testability,"// The order in which these are registered determines their priority when; // being queried.; // First we register the basic alias analysis that provides the majority of; // per-function local AA logic. This is a stateless, on-demand local set of; // AA techniques.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:196,log,logic,196,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,1,['log'],['logic']
Testability,"// The order of fields in this struct depends on the order of; // varables in the argument which varies when changing how they; // are identified, leading to spurious test breakage.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp:167,test,test,167,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,1,['test'],['test']
Testability,"// The order the tests is not entirely arbitrary. There is one conversion; // that can be handled in two different ways. Given:; // struct A {};; // struct B : public A {; // B(); B(const A&);; // };; // const A &a = B();; // the cast static_cast<const B&>(a) could be seen as either a static; // reference downcast, or an explicit invocation of the user-defined; // conversion using B's conversion constructor.; // DR 427 specifies that the downcast is to be applied here.; // C++ 5.2.9p4: Any expression can be explicitly converted to type ""cv void"".; // Done outside this function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp:17,test,tests,17,interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp,1,['test'],['tests']
Testability,"// The original scalar reduction is expected to have no remaining; // uses outside the reduction tree itself. Assert that we got this; // correct, replace internal uses with undef, and mark for eventual; // deletion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:110,Assert,Assert,110,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['Assert'],['Assert']
Testability,"// The parameter mu values in this test were selected because they were shown to generate deviant values; // for the LikelihoodJob in other tests.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx:35,test,test,35,roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx,2,['test'],"['test', 'tests']"
Testability,// The pattern was found. Create a masked compare that replaces all of the; // shift and logic ops.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/AggressiveInstCombine/AggressiveInstCombine.cpp:89,log,logic,89,interpreter/llvm-project/llvm/lib/Transforms/AggressiveInstCombine/AggressiveInstCombine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/AggressiveInstCombine/AggressiveInstCombine.cpp,1,['log'],['logic']
Testability,// The preceding values are available since PGO_HASH_V2.; // Keep this last. It's for the static assert that follows.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:97,assert,assert,97,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,1,['assert'],['assert']
Testability,// The previous assert ensures the number of entries in getInputs() is; // consistent with what we are doing here.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Action.cpp:16,assert,assert,16,interpreter/llvm-project/clang/lib/Driver/Action.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Action.cpp,1,['assert'],['assert']
Testability,// The previous token does not open a block. Nothing to do. We don't; // assert so that we can simply call this function for all tokens.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineFormatter.cpp:73,assert,assert,73,interpreter/llvm-project/clang/lib/Format/UnwrappedLineFormatter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineFormatter.cpp,1,['assert'],['assert']
Testability,"// The public names are indexed by 'LVScope *'. We want to print; // them by logical element address, to show the scopes layout.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVScope.cpp:77,log,logical,77,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVScope.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVScope.cpp,1,['log'],['logical']
Testability,// The range test idiom can use either ult or ugt. Arbitrarily canonicalize; // to the ult form.; // X+C2 >u C -> X+(C2-C-1) <u ~C,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:13,test,test,13,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['test'],['test']
Testability,"// The reference likelihood is using the legacy evaluation backend, because; // the multiprocess test statistics classes were designed to give values; // that are bit-by-bit identical with the old test statistics based on; // RooAbsTestStatistic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooRealL.cxx:97,test,test,97,roofit/roofitcore/test/TestStatistics/testRooRealL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooRealL.cxx,4,['test'],['test']
Testability,"// The remaining operators just wrap the logic of APInt, but retain the; // signedness information.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APSInt.h:41,log,logic,41,interpreter/llvm-project/llvm/include/llvm/ADT/APSInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/APSInt.h,1,['log'],['logic']
Testability,"// The remaining size of this logical record, including fill bytes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/GOFFEmitter.cpp:30,log,logical,30,interpreter/llvm-project/llvm/lib/ObjectYAML/GOFFEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/GOFFEmitter.cpp,1,['log'],['logical']
Testability,"// The remaining tests are all recursive, so bail out if we hit the limit.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp:17,test,tests,17,interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,4,['test'],['tests']
Testability,"// The rest of the logic assumes the LHS condition is true. If that's not the; // case, invert the predicate to make it so.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp:19,log,logic,19,interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,1,['log'],['logic']
Testability,// The rest of the logic is only relevant for updating the loop structures.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp:19,log,logic,19,interpreter/llvm-project/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/BasicBlockUtils.cpp,1,['log'],['logic']
Testability,"// The result needs scalarizing, but it's not a given that the source does.; // See similar logic in ScalarizeVecRes_UnaryOp.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:92,log,logic,92,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,1,['log'],['logic']
Testability,"// The result needs scalarizing, but it's not a given that the source does.; // This is a workaround for targets where it's impossible to scalarize the; // result of a conversion, because the source type is legal.; // For instance, this happens on AArch64: v1i1 is illegal but v1i{8,16,32}; // are widened to v8i8, v4i16, and v2i32, which is legal, because v1i64 is; // legal and was not scalarized.; // See the similar logic in ScalarizeVecRes_SETCC",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:420,log,logic,420,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,1,['log'],['logic']
Testability,// The result of an instruction benchmark.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h:32,benchmark,benchmark,32,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h,1,['benchmark'],['benchmark']
Testability,// The return type for each function when doing covariant testcase generation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/VtableTest/gen.cc:58,test,testcase,58,interpreter/llvm-project/clang/utils/VtableTest/gen.cc,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/VtableTest/gen.cc,1,['test'],['testcase']
Testability,// The roots of the dependency DAG of AST files. This is used; // to implement short-circuiting logic when running DFS over the dependencies.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h:96,log,logic,96,interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Serialization/ModuleManager.h,1,['log'],['logic']
Testability,"// The same extra argument may be used several times, so log each attempt; // to use it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:57,log,log,57,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['log'],['log']
Testability,// The same is true of Logical And; // TODO: This could share the logic of the version above if there was a; // version of LogicalAnd that allowed more than just i1 types.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:23,Log,Logical,23,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,3,"['Log', 'log']","['Logical', 'LogicalAnd', 'logic']"
Testability,"// The same logic as above, but check pointer with constant offset here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp:12,log,logic,12,interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,1,['log'],['logic']
Testability,"// The sandbox for this session",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLite.cxx:7,sandbox,sandbox,7,proof/proof/src/TProofLite.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLite.cxx,1,['sandbox'],['sandbox']
Testability,"// The second half of this loop condition is always true, and we just; // asserted it above. But GCC can't tell that it's always true, and if NDEBUG; // is set on platforms where MAX_SIMD_DEGREE_OR_2 == 2, GCC emits spurious; // warnings here. GCC 8.5 is particularly sensitive, so if you're changing; // this code, test it against that version.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:74,assert,asserted,74,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,2,"['assert', 'test']","['asserted', 'test']"
Testability,"// The second nasty issue we must deal with in the JIT is that the Safe; // module cannot directly reference any functions defined in the test; // module. Instead, we use a JIT API call to dynamically resolve the; // symbol.; // Add the resolver to the Safe module.; // Prototype: void *getPointerToNamedFunction(const char* Name)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp:138,test,test,138,interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp,1,['test'],['test']
Testability,"// The select's condition is true if the tested bit is 0.; // TrueV must be the shift, FalseV must be the xor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonLoopIdiomRecognition.cpp:41,test,tested,41,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonLoopIdiomRecognition.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonLoopIdiomRecognition.cpp,1,['test'],['tested']
Testability,"// The select's condition is true if the tested bit is 1.; // TrueV must be the xor, FalseV must be the shift.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonLoopIdiomRecognition.cpp:41,test,tested,41,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonLoopIdiomRecognition.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonLoopIdiomRecognition.cpp,1,['test'],['tested']
Testability,// The sequence for detecting a sysroot here should be kept in sync with; // the testTriple function below.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/MinGW.cpp:81,test,testTriple,81,interpreter/llvm-project/clang/lib/Driver/ToolChains/MinGW.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/MinGW.cpp,1,['test'],['testTriple']
Testability,// The st_other field has 2 logical parts. The first two bits hold the symbol; // visibility (STV_*) and the remainder hold other platform-specific values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp:28,log,logical,28,interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,1,['log'],['logical']
Testability,"// The stack probing code for the dynamically allocated outgoing arguments; // area assumes that the stack is probed at the top - either by the prologue; // code, which issues a probe if `hasVarSizedObjects` return true, or by the; // most recent variable-sized object allocation. Changing the condition here; // may need to be followed up by changes to the probe issuing logic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:372,log,logic,372,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,1,['log'],['logic']
Testability,// The static large model never uses stubs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86Subtarget.cpp:37,stub,stubs,37,interpreter/llvm-project/llvm/lib/Target/X86/X86Subtarget.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86Subtarget.cpp,1,['stub'],['stubs']
Testability,"// The symbol table extracted from the object file always contains a; // non-empty name (linkage name). However, the logical scope does not; // guarantee to have a name for the linkage name (main is one case).; // For those cases, set the linkage name the same as the name.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVBinaryReader.cpp:117,log,logical,117,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVBinaryReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVBinaryReader.cpp,1,['log'],['logical']
Testability,"// The table of encodings for these banked registers comes from B9.2.3 of the; // ARM ARM. There are patterns, but nothing regular enough to make this logic; // neater. So by fiat, these values are UNPREDICTABLE:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/Disassembler/ARMDisassembler.cpp:151,log,logic,151,interpreter/llvm-project/llvm/lib/Target/ARM/Disassembler/ARMDisassembler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/Disassembler/ARMDisassembler.cpp,1,['log'],['logic']
Testability,"// The temporary buffer can't be emptied, so for now just assert that nothing; // has been emitted to it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfExpression.cpp:58,assert,assert,58,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfExpression.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfExpression.cpp,1,['assert'],['assert']
Testability,"// The test 'fMethod[keep] == 0' fails to detect a variable size array; // if the counter happens to have an offset of zero, so let's explicitly; // prevent for here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TStreamerInfoActions.cxx:7,test,test,7,io/io/src/TStreamerInfoActions.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TStreamerInfoActions.cxx,1,['test'],['test']
Testability,"// The test might seem contrived, because it is. We want to check:; // - that we read the correct entries from the correct trees, so we need to read different entries per tree; // - that TTreeProcessorMT re-builds TEntryLists correctly for each file/cluster, so we need a different number; // of entries and we need to select, via TEntryList, entries of tree2 that do not exist in tree1",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_entrylist.cxx:7,test,test,7,tree/dataframe/test/dataframe_entrylist.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_entrylist.cxx,1,['test'],['test']
Testability,// The test.set iteration could live in the pre-preheader.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MVETailPredication.cpp:7,test,test,7,interpreter/llvm-project/llvm/lib/Target/ARM/MVETailPredication.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MVETailPredication.cpp,1,['test'],['test']
Testability,// The then action is optional in Verilog assert statements.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineParser.cpp:42,assert,assert,42,interpreter/llvm-project/clang/lib/Format/UnwrappedLineParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineParser.cpp,1,['assert'],['assert']
Testability,// The type of the current (logical) record.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/GOFFEmitter.cpp:28,log,logical,28,interpreter/llvm-project/llvm/lib/ObjectYAML/GOFFEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/GOFFEmitter.cpp,1,['log'],['logical']
Testability,// The type that was sign-extended to get the AssertSext must be; // narrower than the type of N (so that N has still the same value; // as the original).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLowering.cpp:46,Assert,AssertSext,46,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLowering.cpp,1,['Assert'],['AssertSext']
Testability,// The underlying objects alias; test accesses for dependence.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:33,test,test,33,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,1,['test'],['test']
Testability,"// The user can annotate variable declarations with cleanup functions, which; // essentially imposes a custom destructor logic on that variable.; // It is possible to use it, however, to call tracked parameters on all exits; // from the function. For this reason, we track the fact that the function; // actually has these.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CalledOnceCheck.cpp:121,log,logic,121,interpreter/llvm-project/clang/lib/Analysis/CalledOnceCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CalledOnceCheck.cpp,1,['log'],['logic']
Testability,"// The value of __cplusplus in GCC < 5.0 (e.g. 4.9.3) when; // either -std=c++1y or -std=c++14 is specified is 201300L, which fails; // the test for C++14 or more (201402L) as previously specified.; // I would claim that the check should be relaxed to:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/CIFactory.cpp:140,test,test,140,interpreter/cling/lib/Interpreter/CIFactory.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/CIFactory.cpp,1,['test'],['test']
Testability,"// The verbosity: debug wins over quiet; //std::string verbosityOption(""-v4""); // To be uncommented for the testing phase. It should be -v",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:108,test,testing,108,core/dictgen/src/rootcling_impl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx,1,['test'],['testing']
Testability,"// The volatile store here is intended to escape the local variable, to; // prevent the compiler from optimizing CharOnStack into anything other; // than a char on the stack.; //; // Tested on: MSVC 2015 - 2019, GCC 4.9 - 9, Clang 3.2 - 9, ICC 13 - 19.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Stack.cpp:183,Test,Tested,183,interpreter/llvm-project/clang/lib/Basic/Stack.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Stack.cpp,1,['Test'],['Tested']
Testability,"// The vselect result and true/value operands needs scalarizing, but it's; // not a given that the Cond does. For instance, in AVX512 v1i1 is legal.; // See the similar logic in ScalarizeVecRes_SETCC",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:169,log,logic,169,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,1,['log'],['logic']
Testability,"// The way the PLT relocations normally work is that the linker allocates; // the; // PLT and this relocation makes a PC-relative call into the PLT. The PLT; // entry will then jump to an address provided by the GOT. On first call,; // the; // GOT address will point back into PLT code that resolves the symbol. After; // the first call, the GOT entry points to the actual function.; //; // For local functions we're ignoring all of that here and just replacing; // the PLT32 relocation type with PC32, which will translate the relocation; // into a PC-relative call directly to the function. For external symbols we; // can't be sure the function will be within 2^32 bytes of the call site, so; // we need to create a stub, which calls into the GOT. This case is; // equivalent to the usual PLT implementation except that we use the stub; // mechanism in RuntimeDyld (which puts stubs at the end of the section); // rather than allocating a PLT section.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp:719,stub,stub,719,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp,3,['stub'],"['stub', 'stubs']"
Testability,// The weak function target may be zero; in that case we must use indirect; // addressing via a stub on windows as it may be out of range for a; // PC-relative jump.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:96,stub,stub,96,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,1,['stub'],['stub']
Testability,// The widening or narrowing is expected to be free.; // Counting widening or narrowing as a saved operation will result in; // preferring an R*SBG over a simple shift/logical instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp:168,log,logical,168,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp,1,['log'],['logical']
Testability,// Then lazy symbol pointers and symbol stubs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MachObjectWriter.cpp:40,stub,stubs,40,interpreter/llvm-project/llvm/lib/MC/MachObjectWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MachObjectWriter.cpp,1,['stub'],['stubs']
Testability,// Then test all of the components in the path to see if any of them are; // using another kind of reserved or invalid identifier.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaModule.cpp:8,test,test,8,interpreter/llvm-project/clang/lib/Sema/SemaModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaModule.cpp,1,['test'],['test']
Testability,"// Theorem(1): (B + A + E*2^(n-e)) >> 1 => (B >> 1) + (A >> 1) + E'*2^(n-e'); // where; // e' = e + 1,; // E is a e-bit number,; // E' is a e'-bit number,; // holds under the following precondition:; // pre(1): A % 2 = 0; // pre(2): e < n, (see Theorem(2) for the trivial case with e=n); // where >> expresses a logical shift to the right, with adding zeros.; //; // We need to show that for every, E there is a E'; //; // B = b_h * 2^(n-1) + b_m * 2 + b_l; // A = a_h * 2^(n-1) + a_m * 2 (pre(1)); //; // where a_h, b_h, b_l are single bits, and a_m, b_m are (n-2) bit numbers; //; // Let X = (B + A + E*2^(n-e)) >> 1; // Let Y = (B >> 1) + (A >> 1) + E*2^(n-e) >> 1; //; // X = [B + A + E*2^(n-e)] >> 1 =; // = [ b_h * 2^(n-1) + b_m * 2 + b_l +; // + a_h * 2^(n-1) + a_m * 2 +; // + E * 2^(n-e) ] >> 1 =; //; // The sum is built by putting the overflow of [a_m + b+n] into the term; // 2^(n-1). As there are no more bits beyond 2^(n-1) the overflow within; // this bit is discarded. This is expressed by % 2.; //; // The bit in position 0 cannot overflow into the term (b_m + a_m).; //; // = [ ([b_h + a_h + (b_m + a_m) >> (n-2)] % 2) * 2^(n-1) +; // + ((b_m + a_m) % 2^(n-2)) * 2 +; // + b_l + E * 2^(n-e) ] >> 1 =; //; // The shift is computed by dividing the terms by 2 and by cutting off; // b_l.; //; // = ([b_h + a_h + (b_m + a_m) >> (n-2)] % 2) * 2^(n-2) +; // + ((b_m + a_m) % 2^(n-2)) +; // + E * 2^(n-(e+1)) =; //; // by the definition in the Theorem e+1 = e'; //; // = ([b_h + a_h + (b_m + a_m) >> (n-2)] % 2) * 2^(n-2) +; // + ((b_m + a_m) % 2^(n-2)) +; // + E * 2^(n-e') =; //; // Compute Y by applying distributivity first; //; // Y = (B >> 1) + (A >> 1) + E*2^(n-e') =; // = (b_h * 2^(n-1) + b_m * 2 + b_l) >> 1 +; // + (a_h * 2^(n-1) + a_m * 2) >> 1 +; // + E * 2^(n-e) >> 1 =; //; // Again, the shift is computed by dividing the terms by 2 and by cutting; // off b_l.; //; // = b_h * 2^(n-2) + b_m +; // + a_h * 2^(n-2) + a_m +; // + E * 2^(n-(e+1)) =; //; // Again, the sum is buil",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/InterleavedLoadCombinePass.cpp:312,log,logical,312,interpreter/llvm-project/llvm/lib/CodeGen/InterleavedLoadCombinePass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/InterleavedLoadCombinePass.cpp,1,['log'],['logical']
Testability,// There are 4 commuted variants of the pattern. Canonicalize operands of this; // logic op so an fcmp is operand 0 and a matching logic op is operand 1.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:83,log,logic,83,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,2,['log'],['logic']
Testability,"// There are cases where the section size is smaller than the [LowPC,HighPC]; // range; it causes us to decode invalid addresses. The recorded size in the; // logical scope is one less than the real size.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVBinaryReader.cpp:159,log,logical,159,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVBinaryReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVBinaryReader.cpp,1,['log'],['logical']
Testability,"// There are instruction for this macros, but they must; // always be at the function end, and we can't emit and; // break with BB logic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsAsmPrinter.cpp:131,log,logic,131,interpreter/llvm-project/llvm/lib/Target/Mips/MipsAsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsAsmPrinter.cpp,1,['log'],['logic']
Testability,"// There are some cases where the user may set up a pointer in the (default); // constructor but not mark this pointer as transient. Sometime the value; // of this pointer is the address of one of the object with just created; // and the following delete would result in the deletion (possibly of the; // top level object we are goint to return!).; // Eventhough this is a user error, we could prevent the crash by simply; // adding:; // && !CheckObject(start[j],cl); // However this can increase the read time significantly (10% in the case; // of one TLine pointer in the test/Track and run ./Event 200 0 0 20 30000; //; // If ReadObjectAny returned the same value as we previous had, this means; // that when writing this object (start[j] had already been written and; // is indeed pointing to the same object as the object the user set up; // in the default constructor).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferFile.cxx:574,test,test,574,io/io/src/TBufferFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferFile.cxx,2,['test'],['test']
Testability,"// There are three cases for the receiver:; // (1) it is definitely nil,; // (2) it is definitely non-nil, and; // (3) we don't know.; //; // If the receiver is definitely nil, we skip the pre/post callbacks and; // instead call the ObjCMessageNil callbacks and return.; //; // If the receiver is definitely non-nil, we call the pre- callbacks,; // evaluate the call, and call the post- callbacks.; //; // If we don't know, we drop the potential nil flow and instead; // continue from the assumed non-nil state as in (2). This approach; // intentionally drops coverage in order to prevent false alarms; // in the following scenario:; //; // id result = [o someMethod]; // if (result) {; // if (!o) {; // // <-- This program point should be unreachable because if o is nil; // // it must the case that result is nil as well.; // }; // }; //; // However, it also loses coverage of the nil path prematurely,; // leading to missed reports.; //; // It's possible to handle this by performing a state split on every call:; // explore the state where the receiver is non-nil, and independently; // explore the state where it's nil. But this is not only slow, but; // completely unwarranted. The mere presence of the message syntax in the code; // isn't sufficient evidence that nil is a realistic possibility.; //; // An ideal solution would be to add the following constraint that captures; // both possibilities without splitting the state:; //; // ($x == 0) => ($y == 0) (1); //; // where in our case '$x' is the receiver symbol, '$y' is the returned symbol,; // and '=>' is logical implication. But RangeConstraintManager can't handle; // such constraints yet, so for now we go with a simpler, more restrictive; // constraint: $x != 0, from which (1) follows as a vacuous truth.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineObjC.cpp:1571,log,logical,1571,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineObjC.cpp,1,['log'],['logical']
Testability,"// There are two possible boolean constructors, depending on which; // version of gtest is being used:; //; // v1.7 and earlier:; // AssertionResult(bool success); //; // v1.8 and greater:; // template <typename T>; // AssertionResult(const T& success,; // typename internal::EnableIf<; // !internal::ImplicitlyConvertible<T,; // AssertionResult>::value>::type*); //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GTestChecker.cpp:133,Assert,AssertionResult,133,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GTestChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GTestChecker.cpp,3,['Assert'],['AssertionResult']
Testability,"// There are up to five conditions we need to test for:; // 1) if isSigned, we need to check whether numElements is negative;; // 2) if numElementsWidth > sizeWidth, we need to check whether; // numElements is larger than something representable in size_t;; // 3) if minElements > 0, we need to check whether numElements is smaller; // than that.; // 4) we need to compute; // sizeWithoutCookie := numElements * typeSizeMultiplier; // and check whether it overflows; and; // 5) if we need a cookie, we need to compute; // size := sizeWithoutCookie + cookieSize; // and check whether it overflows.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp:46,test,test,46,interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,1,['test'],['test']
Testability,"// There could be subfolders like ""wdf"" in the ""Include"" directory, so only; // test names that start with ""10."" or match input.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Utils/PlatformWin.cpp:80,test,test,80,interpreter/cling/lib/Utils/PlatformWin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Utils/PlatformWin.cpp,1,['test'],['test']
Testability,"// There is content - a memory buffer or a file.; // We know it's a file because we started off the FileEntry.; // FIXME: LLVM will completely migrate to FileEntryRef.; // We added `isOpen()` in our commit:; // `Accessor to ""is file opened""; this is crucial info for us.`; // Move this logic to FileEntryRef or have a workaround.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/ClangInternalState.cpp:286,log,logic,286,interpreter/cling/lib/Interpreter/ClangInternalState.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/ClangInternalState.cpp,1,['log'],['logic']
Testability,"// There is no Multiply method to tests. And the errors are wrongly; // calculated in the TProfile::Division method, so there is no; // point to make the tests. Once the method is fixed, the tests; // will be finished.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:34,test,tests,34,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,3,['test'],['tests']
Testability,// There is no noticable performance difference here between Lazy and Eager; // UpdateStrategy based on some test results. It is feasible to switch the; // UpdateStrategy to Lazy if we find it profitable later.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/TailRecursionElimination.cpp:109,test,test,109,interpreter/llvm-project/llvm/lib/Transforms/Scalar/TailRecursionElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/TailRecursionElimination.cpp,2,['test'],['test']
Testability,// There is no symbol in the nlist symbol table for this so we set; // Sym effectivly to null and the rest of code in here must test for; // it and not do things like Sym.getFlags() for it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp:128,test,test,128,interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-nm/llvm-nm.cpp,5,['test'],['test']
Testability,"// There is only one zero bit in the range, test for it directly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp:44,test,test,44,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp,2,['test'],['test']
Testability,"// There must be a dataset 'testNtuple' already registered and validated",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:28,test,testNtuple,28,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['test'],['testNtuple']
Testability,"// There used to be a ""if (fe)"" test ... Keep this assert until we are sure that fe is never null",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TChain.cxx:32,test,test,32,tree/tree/src/TChain.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TChain.cxx,4,"['assert', 'test']","['assert', 'test']"
Testability,"// There used to be a warning printed here when:; // obj && isTObject && !((TObject*)obj)->IsA()->InheritsFrom(clReq); // however isTObject was based on clReq (now clCast).; // If the test was to fail, then it is as likely that the object is not a TObject; // and then we have a potential core dump.; // At this point (missing clRef), we do NOT have enough information to really; // answer the question: is the object read of the type I requested.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferFile.cxx:184,test,test,184,io/io/src/TBufferFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferFile.cxx,1,['test'],['test']
Testability,// There's no need to assert on a byte-aligned pointer. All pointers are at; // least byte aligned.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:22,assert,assert,22,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,1,['assert'],['assert']
Testability,// There's nothing to test that ActOnExceptionDecl didn't already test.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp:22,test,test,22,interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,2,['test'],['test']
Testability,"// These are folded out, but on the chance it happens don't assert.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp:60,assert,assert,60,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,1,['assert'],['assert']
Testability,// These are functions that are known to not need any argument extension; // on any target: A size_t argument (which may be an i32 on some targets); // should not trigger the assert below.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/BuildLibCalls.cpp:175,assert,assert,175,interpreter/llvm-project/llvm/lib/Transforms/Utils/BuildLibCalls.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/BuildLibCalls.cpp,1,['assert'],['assert']
Testability,// These are likely runtime calls. Should we assert that via calling; // convention or something?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/PlaceSafepoints.cpp:45,assert,assert,45,interpreter/llvm-project/llvm/lib/Transforms/Scalar/PlaceSafepoints.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/PlaceSafepoints.cpp,1,['assert'],['assert']
Testability,// These are non-commutative binops.; // TODO: Add more X86ISD opcodes once we have test coverage.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:84,test,test,84,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['test'],['test']
Testability,// These are special since they are only for testing purposes.; /// No-op module pass which does nothing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h:45,test,testing,45,interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Passes/PassBuilder.h,1,['test'],['testing']
Testability,"// These are tests that need to 'always win', as they are special in that they; // disable based on certain conditions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/IdentifierTable.cpp:13,test,tests,13,interpreter/llvm-project/clang/lib/Basic/IdentifierTable.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/IdentifierTable.cpp,1,['test'],['tests']
Testability,"// These are the event lists for the mlp train method; // first events in the tree are for training; // the rest for internal testing (cross validation)...; // NOTE: the training events are ordered: first part is signal, second part background",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx:126,test,testing,126,tmva/tmva/src/MethodTMlpANN.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodTMlpANN.cxx,1,['test'],['testing']
Testability,"// These are the values assigned to the debug location record IDs.; // See DebugInfo/CodeView/CodeViewSymbols.def.; // S_DEFRANGE 0x113f; // S_DEFRANGE_SUBFIELD 0x1140; // S_DEFRANGE_REGISTER 0x1141; // S_DEFRANGE_FRAMEPOINTER_REL 0x1142; // S_DEFRANGE_SUBFIELD_REGISTER 0x1143; // S_DEFRANGE_FRAMEPOINTER_REL_FULL_SCOPE 0x1144; // S_DEFRANGE_REGISTER_REL 0x1145; // When recording CodeView debug location, the above values are truncated; // to a uint8_t value in order to fit the 'OpCode' used for the logical; // debug location operations.; // Return the original CodeView enum value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSupport.h:503,log,logical,503,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSupport.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSupport.h,1,['log'],['logical']
Testability,// These asserts test different things. A record has a definition; // as soon as we begin to parse the definition. That definition is; // not a complete definition (which is what isDefinition() tests); // until we *finish* parsing the definition.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:9,assert,asserts,9,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,3,"['assert', 'test']","['asserts', 'test', 'tests']"
Testability,// These bits are known to be zero but the AssertZext may be from a value; // that already has some constant zero bits (i.e. from a masking and).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:43,Assert,AssertZext,43,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,1,['Assert'],['AssertZext']
Testability,"// These comparisons are nontrivial, so assert that equality implies; // hash equality (DenseMap demands this as an invariant).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp:40,assert,assert,40,interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/EarlyCSE.cpp,2,['assert'],['assert']
Testability,// These fields are used during the export phase of ThinLTO and reflect; // information collected from function summaries.; /// Whether any function summary contains an llvm.assume(llvm.type.test) for; /// this slot.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp:191,test,test,191,interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp,1,['test'],['test']
Testability,"// These files need to be available everywhere, cache and sandbox",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:58,sandbox,sandbox,58,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['sandbox'],['sandbox']
Testability,// These have been substituted from template parameters; // and appear as literals in the static assert error.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:97,assert,assert,97,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['assert'],['assert']
Testability,// These instructions clear the overflow flag just like TEST.; // FIXME: These are not the only instructions in this switch that clear the; // overflow flag.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp:56,TEST,TEST,56,interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,1,['TEST'],['TEST']
Testability,"// These passes import type identifier resolutions for whole-program; // devirtualization and CFI. They must run early because other passes may; // disturb the specific instruction patterns that these passes look for,; // creating dependencies on resolutions that may not appear in the summary.; //; // For example, GVN may transform the pattern assume(type.test) appearing in; // two basic blocks into assume(phi(type.test, type.test)), which would; // transform a dependency on a WPD resolution into a dependency on a type; // identifier resolution for CFI.; //; // Also, WPD has access to more precise information than ICP and can; // devirtualize more effectively, so it should operate on the IR first.; //; // The WPD and LowerTypeTest passes need to run at -O0 to lower type; // metadata and intrinsics.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:358,test,test,358,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,3,['test'],['test']
Testability,// These structures may cause binary compat warnings on AIX. Suppress the; // warning since we are only using these types for the static assertions below.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SmallVector.cpp:137,assert,assertions,137,interpreter/llvm-project/llvm/lib/Support/SmallVector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SmallVector.cpp,1,['assert'],['assertions']
Testability,"// These stub helpers are only ever called once, so here we're optimizing for; // minimum size by using the pre-indexed store variants, which saves a few; // bytes of instructions to bump & restore sp.; // _ifunc.stub_helper:; // stp	fp, lr, [sp, #-16]!; // mov	fp, sp; // stp	x1, x0, [sp, #-16]!; // stp	x3, x2, [sp, #-16]!; // stp	x5, x4, [sp, #-16]!; // stp	x7, x6, [sp, #-16]!; // stp	d1, d0, [sp, #-16]!; // stp	d3, d2, [sp, #-16]!; // stp	d5, d4, [sp, #-16]!; // stp	d7, d6, [sp, #-16]!; // bl	_resolver; // adrp	x16, lazy_pointer@GOTPAGE; // ldr	x16, [x16, lazy_pointer@GOTPAGEOFF]; // str	x0, [x16]; // mov	x16, x0; // ldp	d7, d6, [sp], #16; // ldp	d5, d4, [sp], #16; // ldp	d3, d2, [sp], #16; // ldp	d1, d0, [sp], #16; // ldp	x7, x6, [sp], #16; // ldp	x5, x4, [sp], #16; // ldp	x3, x2, [sp], #16; // ldp	x1, x0, [sp], #16; // ldp	fp, lr, [sp], #16; // br	x16",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp:9,stub,stub,9,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp,1,['stub'],['stub']
Testability,"// These tests are disabled if the legacy backend is not available, because; // then we don't have any reference to compare to.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testSumW2Error.cxx:9,test,tests,9,roofit/roofitcore/test/testSumW2Error.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testSumW2Error.cxx,1,['test'],['tests']
Testability,"// These tests check the generated wrapper functions that allow calling C++ functions.; // via C interface.; // Usually we only test that a wrapper function compiles correctly, but sometimes; // we also do some further checks on the wrapper here. See the specific assertions for more; // explanation on this.; // NOTE: This wrapper interface should be replaced in the future with a proper; // way of calling these functions that doesn't require parsing generated strings; // of C++ code, so if these tests fail because this interface was replaced by another; // system, feel free to delete them as these tests here don't represent things the user; // should do in his code.; // A class that creates a CallFunc and deletes it at the end of its scope.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/test/TClingCallFuncTests.cxx:9,test,tests,9,core/metacling/test/TClingCallFuncTests.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/test/TClingCallFuncTests.cxx,5,"['assert', 'test']","['assertions', 'test', 'tests']"
Testability,"// These tests use the columns that contain std::array data on disk as RVecs; // checking the size of the collection with the R_rdf_sizeof_* columns",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/datasource_ntuple.cxx:9,test,tests,9,tree/dataframe/test/datasource_ntuple.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/datasource_ntuple.cxx,1,['test'],['tests']
Testability,"// These tests use the columns that contain std::array data on disk as RVecs; // passing them as arguments to functions that expect RVecs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/datasource_ntuple.cxx:9,test,tests,9,tree/dataframe/test/datasource_ntuple.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/datasource_ntuple.cxx,1,['test'],['tests']
Testability,"// These tests use the columns that contain std::array data on disk as RVecs; // reading them into RVecs and checking their values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/datasource_ntuple.cxx:9,test,tests,9,tree/dataframe/test/datasource_ntuple.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/datasource_ntuple.cxx,1,['test'],['tests']
Testability,"// These two lines would make the test fail because of two reasons:; // - An assertion failure ""Assertion failed: (detail::isPresent(Val) && ""dyn_cast on a non-existent value""), function dyn_cast, file Casting.h, line 662.""; // - An error ""Error in <TInterpreter::RefreshClassInfo>: Should not need to update the classInfo a non type decl: Detail""; // This is why there is no check performed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/test/TClingTests.cxx:34,test,test,34,core/metacling/test/TClingTests.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/test/TClingTests.cxx,3,"['Assert', 'assert', 'test']","['Assertion', 'assertion', 'test']"
Testability,"// Third, collect conditions from dominating branches. Starting at the loop; // predecessor, climb up the predecessor chain, as long as there are; // predecessors that can be found that have unique successors leading to the; // original header.; // TODO: share this logic with isLoopEntryGuardedByCond.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:266,log,logic,266,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['log'],['logic']
Testability,"// This abstracts the logic for generating and updating S_WAIT* instructions; // away from the analysis that determines where they are needed. This was; // done because the set of counters and instructions for waiting on them; // underwent a major shift with gfx12, sufficiently so that having this; // abstraction allows the main analysis logic to be simpler than it would; // otherwise have had to become.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInsertWaitcnts.cpp:22,log,logic,22,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInsertWaitcnts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInsertWaitcnts.cpp,2,['log'],['logic']
Testability,"// This assert",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/src/TFitEditor.cxx:8,assert,assert,8,gui/fitpanel/src/TFitEditor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/src/TFitEditor.cxx,1,['assert'],['assert']
Testability,// This assert added because NumCtorInitializers is stored; // in CXXConstructorDeclBits as a bitfield and its width has; // been shrunk from 32 bits to fit into CXXConstructorDeclBitfields.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h:8,assert,assert,8,interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DeclCXX.h,1,['assert'],['assert']
Testability,// This assert is duplicated here to leave a breadcrumb of the places that need; // to be updated if flags grow past 64-bits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/DXContainerYAML.cpp:8,assert,assert,8,interpreter/llvm-project/llvm/lib/ObjectYAML/DXContainerYAML.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/DXContainerYAML.cpp,1,['assert'],['assert']
Testability,// This assertion also guarantees that all indices in are <= NumberOfArrows.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/HTMLDiagnostics.cpp:8,assert,assertion,8,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/HTMLDiagnostics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/HTMLDiagnostics.cpp,1,['assert'],['assertion']
Testability,"// This assertion currently fails because of; // TClass *c1 = TClass::GetClass(""basic_iostream<char,char_traits<char> >"");; // TClass *c2 = TClass::GetClass(""std::iostream"");; // where the TClassEdit normalized name of iostream is basic_iostream<char>; // i.e missing the addition of the default parameter. This is because TClingLookupHelper; // uses only 'part' of TMetaUtils::GetNormalizedName.; // if (!cl) {; // TDataType* dataType = (TDataType*)gROOT->GetListOfTypes()->FindObject(name);; // TClass *altcl = dataType ? (TClass*)gROOT->GetListOfClasses()->FindObject(dataType->GetFullTypeName()) : 0;; // if (altcl && normalizedName != altcl->GetName()); // ::Fatal(""TClass::GetClass"",""The existing name (%s) for %s is different from the normalized name: %s\n"",; // altcl->GetName(), name, normalizedName.c_str());; // }; // We want to avoid auto-parsing due to intentionally missing dictionary for std::pair.; // However, we don't need this special treatement in rootcling (there is no auto-parsing); // and we want to make that the TClass for the pair goes through the regular creation; // mechanism (i.e. in rootcling they should be in kInterpreted state and never in; // kEmulated state) so that they have proper interpreter (ClassInfo) information which; // will be used to create the TProtoClass (if one is requested for the pair).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:8,assert,assertion,8,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,1,['assert'],['assertion']
Testability,// This assertion should never fail. Otherwise we have a bug.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp:8,assert,assertion,8,interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,1,['assert'],['assertion']
Testability,// This attempts to lower part of LCMTy merge/unmerge sequence. Intended use; // is for old mir tests. Since the changes to more/fewer elements it should no; // longer be possible to generate MIR like this when starting from llvm-ir; // because LCMTy approach was replaced with merge/unmerge to vector elements.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp:96,test,tests,96,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,1,['test'],['tests']
Testability,"// This bug is related to the implementation details of the old test; // statistics, so the EvalBackend is forced to be Legacy",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:64,test,test,64,roofit/roofitcore/test/testTestStatistics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx,1,['test'],['test']
Testability,"// This can happen from recv if ppoll initially gets a read-ready signal for a socket,; // but the received data does not pass the checksum test, so the socket becomes unreadable; // again or from non-blocking send if the socket becomes unwritable either due to the HWM; // being reached or the socket not being connected (anymore). The latter case usually means; // the connection has been severed from the other side, meaning it has probably been killed; // and in that case the next ppoll call will probably also receive a SIGTERM, ending the; // loop. In case something else is wrong, this message will print multiple times, which; // should be taken as a cue for writing a bug report :)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/src/util.cxx:140,test,test,140,roofit/multiprocess/src/util.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/src/util.cxx,1,['test'],['test']
Testability,"// This can happen when switching from lin to log scale.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:46,log,log,46,hist/hist/src/TF1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx,1,['log'],['log']
Testability,"// This check is here to avoid asserts in debug mode (LLVMDEV env variable set)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:31,assert,asserts,31,core/dictgen/src/rootcling_impl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx,1,['assert'],['asserts']
Testability,// This checks against logic errors in the MCJIT implementation.; // This function should never be called with either a Module that MCJIT; // does not own or a Module that has already been loaded and/or finalized.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/MCJIT/MCJIT.h:23,log,logic,23,interpreter/llvm-project/llvm/lib/ExecutionEngine/MCJIT/MCJIT.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/MCJIT/MCJIT.h,1,['log'],['logic']
Testability,"// This checks against logic errors in the MCJIT implementation.; // This function should never be called with either a Module that MCJIT; // does not own, a Module that has not been loaded or a Module that has; // already been finalized.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/MCJIT/MCJIT.h:23,log,logic,23,interpreter/llvm-project/llvm/lib/ExecutionEngine/MCJIT/MCJIT.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/MCJIT/MCJIT.h,1,['log'],['logic']
Testability,"// This class contains all the info necessary for running the provided; // interesting-ness test, as well as the most reduced module and its; // respective filename.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.h:92,test,test,92,interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/TestRunner.h,1,['test'],['test']
Testability,"// This class implements the tests for all types of projections of; // all the classes tested in this file.; //public:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:29,test,tests,29,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,['test'],"['tested', 'tests']"
Testability,"// This class performs the following tasks:; // - Creates a logical reader for every binary file in the command line,; // that parses the debug information and creates a high level logical; // view representation containing scopes, symbols, types and lines.; // - Prints and compares the logical views.; //; // The supported binary formats are: ELF, Mach-O and CodeView.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/LVReaderHandler.h:60,log,logical,60,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/LVReaderHandler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/LVReaderHandler.h,3,['log'],['logical']
Testability,"// This condition tests whether L.adj == R.adj. If this isn't; // true, the pointers are unequal unless they're both null.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:18,test,tests,18,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,1,['test'],['tests']
Testability,// This condition tests whether L.ptr == R.ptr. This must always be; // true for equality to hold.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:18,test,tests,18,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,1,['test'],['tests']
Testability,"// This condition, together with the assumption that L.ptr == R.ptr,; // tests whether the pointers are both null. ARM imposes an extra; // condition.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:73,test,tests,73,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,1,['test'],['tests']
Testability,"// This disables the removal of registers when lowering into MC, as required; // by some current tests.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyMCInstLower.cpp:97,test,tests,97,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyMCInstLower.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyMCInstLower.cpp,1,['test'],['tests']
Testability,// This flag enables the stress testing of the VPlan H-CFG construction in the; // VPlan-native vectorization path. It must be used in conjuction with; // -enable-vplan-native-path. -vplan-verify-hcfg can also be used to enable the; // verification of the H-CFGs built.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:32,test,testing,32,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['test'],['testing']
Testability,// This flag is used for testing and can cause correctness problems.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp:25,test,testing,25,interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp,1,['test'],['testing']
Testability,"// This from remote login",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:20,log,login,20,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,1,['log'],['login']
Testability,"// This function assumes that InductionPhi is called only on Phi nodes; // present inside loop headers. Check for the same, and throw an assert if; // the current Phi is not present inside the loop header.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp:137,assert,assert,137,interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp,1,['assert'],['assert']
Testability,"// This function compares the parameters stored in the TFitEditor; // with the ones passed by the test functions. Normally, if the; // function return 0, it means all the parameters are equal up to a; // certain limit, thus the test was successful.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/test/UnitTesting.cxx:98,test,test,98,gui/fitpanel/test/UnitTesting.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/test/UnitTesting.cxx,2,['test'],['test']
Testability,"// This function copies an attribute Attr from a previous declaration to the; // new declaration D if the new declaration doesn't itself have that attribute; // yet or if that attribute allows duplicates.; // If you're adding a new attribute that requires logic different from; // ""use explicit attribute on decl if present, else use attribute from; // previous decl"", for example if the attribute needs to be consistent; // between redeclarations, you need to call a custom merge function here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:256,log,logic,256,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['log'],['logic']
Testability,"// This function does a whole lot of voodoo to determine if the tests are; // equivalent without and with a mask. Essentially what happens is that given a; // DAG resembling:; //; // +-------------+ +-------------+ +-------------+ +-------------+; // | Input | | AddConstant | | CompConstant| | CC |; // +-------------+ +-------------+ +-------------+ +-------------+; // | | | |; // V V | +----------+; // +-------------+ +----+ | |; // | ADD | |0xff| | |; // +-------------+ +----+ | |; // | | | |; // V V | |; // +-------------+ | |; // | AND | | |; // +-------------+ | |; // | | |; // +-----+ | |; // | | |; // V V V; // +-------------+; // | CMP |; // +-------------+; //; // The AND node may be safely removed for some combinations of inputs. In; // particular we need to take into account the extension type of the Input,; // the exact values of AddConstant, CompConstant, and CC, along with the nominal; // width of the input (this can work for any width inputs, the above graph is; // specific to 8 bits.; //; // The specific equations were worked out by generating output tables for each; // AArch64CC value in terms of and AddConstant (w1), CompConstant(w2). The; // problem was simplified by working with 4 bit inputs, which means we only; // needed to reason about 24 distinct bit patterns: 8 patterns unique to zero; // extension (8,15), 8 patterns unique to sign extensions (-8,-1), and 8; // patterns present in both extensions (0,7). For every distinct set of; // AddConstant and CompConstants bit patterns we can consider the masked and; // unmasked versions to be equivalent if the result of this function is true for; // all 16 distinct bit patterns of for the current extension type of Input (w0).; //; // sub w8, w0, w1; // and w10, w8, #0x0f; // cmp w8, w2; // cset w9, AArch64CC; // cmp w10, w2; // cset w11, AArch64CC; // cmp w9, w11; // cset w0, eq; // ret; //; // Since the above function shows when the outputs are equivalent it defines; // when it is safe to remove the A",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:64,test,tests,64,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['test'],['tests']
Testability,"// This function does roughly the same thing as GenerateThunk, but in a; // very different way, so that va_start and va_end work correctly.; // FIXME: This function assumes ""this"" is the first non-sret LLVM argument of; // a function, and that there is an alloca built in the entry block; // for all accesses to ""this"".; // FIXME: This function assumes there is only one ""ret"" statement per function.; // FIXME: Cloning isn't correct in the presence of indirect goto!; // FIXME: This implementation of thunks bloats codesize by duplicating the; // function definition. There are alternatives:; // 1. Add some sort of stub support to LLVM for cases where we can; // do a this adjustment, then a sibcall.; // 2. We could transform the definition to take a va_list instead of an; // actual variable argument list, then have the thunks (including a; // no-op thunk for the regular definition) call va_start/va_end.; // There's a bit of per-call overhead for this solution, but it's; // better for codesize if the definition is long.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp:617,stub,stub,617,interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp,1,['stub'],['stub']
Testability,"// This function doesn't mutate the return type, only the function; // type. Seems broken, but I'm just gonna stick an assert in for now.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h:119,assert,assert,119,interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/InstrTypes.h,1,['assert'],['assert']
Testability,"// This function emits appropriate linkage directives for; // functions and global variables.; //; // extern function declaration -> .extern; // extern function definition -> .visible; // external global variable with init -> .visible; // external without init -> .extern; // appending -> not allowed, assert.; // for any linkage other than; // internal, private, linker_private,; // linker_private_weak, linker_private_weak_def_auto,; // we emit -> .weak.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp:302,assert,assert,302,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp,1,['assert'],['assert']
Testability,"// This function has nine cases, the cartesian product of range-testing; // both the upper and lower bounds against the symbol's type.; // Each case requires a different pinning operation.; // The function returns false if the described range is entirely outside; // the range of values for the associated symbol.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp:64,test,testing,64,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp,1,['test'],['testing']
Testability,// This function is called from the raw_ostream implementation if:; // - The internal buffer is full. Size is excactly the size of the buffer.; // - Data larger than the internal buffer is written. Size is a multiple of the; // buffer size.; // - flush() has been called. Size is at most the buffer size.; // The GOFFOstream implementation ensures that flush() is called before a new; // logical record begins. Therefore it is sufficient to check for a new block; // only once.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/GOFFObjectWriter.cpp:388,log,logical,388,interpreter/llvm-project/llvm/lib/MC/GOFFObjectWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/GOFFObjectWriter.cpp,1,['log'],['logical']
Testability,"// This function is no good!; // First test is in MakeGramSchmidt",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:39,test,test,39,hist/hist/src/TMultiDimFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx,1,['test'],['test']
Testability,"// This function is normally used with SP which is Address Register, but AND,; // or any other logical instructions in M68k do not support ARs so we need; // to use a temp Data Register to perform the op.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kFrameLowering.cpp:95,log,logical,95,interpreter/llvm-project/llvm/lib/Target/M68k/M68kFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kFrameLowering.cpp,1,['log'],['logical']
Testability,// This function is only used for assertions at the moment.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVectorCombine.cpp:34,assert,assertions,34,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVectorCombine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVectorCombine.cpp,2,['assert'],['assertions']
Testability,"// This function is to check whether the ""Offset"" is in the correct range of; // the given ""Opcode"". If ""Offset"" is not in the correct range, ""A2_addi"" is; // inserted to calculate the final address. Due to this reason, the function; // assumes that the ""Offset"" has correct alignment.; // We used to assert if the offset was not properly aligned, however,; // there are cases where a misaligned pointer recast can cause this; // problem, and we need to allow for it. The front end warns of such; // misaligns with respect to load size.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp:301,assert,assert,301,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,1,['assert'],['assert']
Testability,"// This function prints the logical view to an output stream.; // Split: Prints the compilation unit view to a file.; // Match: Prints the object only if it satisfies the patterns collected; // from the command line. See the '--select' option.; // Print: Print the object only if satisfies the conditions specified by; // the different '--print' options.; // Full: Prints full information for objects representing debug locations,; // aggregated scopes, compile unit, functions and namespaces.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVObject.h:28,log,logical,28,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVObject.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVObject.h,1,['log'],['logical']
Testability,// This function stub exists for parity with the declaration checking code so; // that checkCommonAttributeFeatures() can work generically on declarations; // or statements.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h:17,stub,stub,17,interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ParsedAttr.h,1,['stub'],['stub']
Testability,// This function tests whether a gcc installation is present either; // through gcc-toolchain argument or in the same prefix where clang; // is installed. This helps decide whether to instantiate this toolchain; // or Baremetal toolchain.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/RISCVToolchain.cpp:17,test,tests,17,interpreter/llvm-project/clang/lib/Driver/ToolChains/RISCVToolchain.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/RISCVToolchain.cpp,1,['test'],['tests']
Testability,"// This handling of the time stamp assumes that the host system's time_t is; // compatible with AIX time_t. If a platform is not compatible, the lit; // tests will let us know.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/XCOFFDumper.cpp:153,test,tests,153,interpreter/llvm-project/llvm/tools/llvm-readobj/XCOFFDumper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/XCOFFDumper.cpp,1,['test'],['tests']
Testability,// This happens on gcc/testsuite/gcc.dg/pr8788-1.c,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:23,test,testsuite,23,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,1,['test'],['testsuite']
Testability,// This heuristic was chosen using a empirical testing on a; // reasonably high core machine (iMacPro 18 cores / 36 threads). The cache; // sharding gives a performance edge by reducing the lock contention.; // FIXME: A better heuristic might also consider the OS to account for; // the different cost of lock contention on different OSes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/DependencyScanning/DependencyScanningFilesystem.cpp:47,test,testing,47,interpreter/llvm-project/clang/lib/Tooling/DependencyScanning/DependencyScanningFilesystem.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/DependencyScanning/DependencyScanningFilesystem.cpp,1,['test'],['testing']
Testability,// This indirection exists so we can keep assertModuleIsMaterializedImpl(); // around in release builds of Value.cpp to be linked with other code built; // in debug mode. But this avoids calling it in any of the release built code.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h:42,assert,assertModuleIsMaterializedImpl,42,interpreter/llvm-project/llvm/include/llvm/IR/Value.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h,1,['assert'],['assertModuleIsMaterializedImpl']
Testability,"// This intentionally only looks at -nostdinc++, and not -nostdinc or; // -nostdlibinc. The purpose of -stdlib++-isystem is to support toolchain; // setups with non-standard search logic for the C++ headers, while still; // allowing users of the toolchain to bring their own C++ headers. Such a; // toolchain likely also has non-standard search logic for the C headers and; // uses -nostdinc to suppress the default logic, but -stdlib++-isystem should; // still work in that case and only be suppressed by an explicit -nostdinc++; // in a project using the toolchain.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp:181,log,logic,181,interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp,3,['log'],['logic']
Testability,"// This is a bitvector because, on larger functions, we may have; // thousands of touched instructions at once (entire blocks,; // instructions with hundreds of uses, etc). Even with optimization; // for when we mark whole blocks as touched, when this was a; // SmallPtrSet or DenseSet, for some functions, we spent >20% of all; // the time in GVN just managing this list. The bitvector, on the; // other hand, efficiently supports test/set/clear of both; // individual and ranges, as well as ""find next element"" This; // enables us to use it as a worklist with essentially 0 cost.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp:432,test,test,432,interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp,1,['test'],['test']
Testability,// This is a call to an external function.; // Look for an existing stub.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp:68,stub,stub,68,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp,1,['stub'],['stub']
Testability,// This is a debug option to test small pieces of code to ensure that outlining; // works correctly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/IROutliner.cpp:29,test,test,29,interpreter/llvm-project/llvm/lib/Transforms/IPO/IROutliner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/IROutliner.cpp,1,['test'],['test']
Testability,"// This is a debuggin method used to print the parameter values; // stored in the fitpanel. This is useful when performing a fit, to; // know against which values the test should be compare to.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/test/UnitTesting.cxx:167,test,test,167,gui/fitpanel/test/UnitTesting.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/test/UnitTesting.cxx,1,['test'],['test']
Testability,"// This is a generic method to make the output of all the tests; // consistent. T is a function pointer to one of the tests; // function. It has been implemented through templates to permit; // more test types than the originally designed.; // @ str : Name of the test; // @ func : Member function pointer to the real implementation of; // the test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/test/UnitTesting.cxx:58,test,tests,58,gui/fitpanel/test/UnitTesting.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/test/UnitTesting.cxx,5,['test'],"['test', 'tests']"
Testability,"// This is a non-standard eliminator. The normal way to eliminate is; // to walk the dominator tree in order, keeping track of available; // values, and eliminating them. However, this is mildly; // pointless. It requires doing lookups on every instruction,; // regardless of whether we will ever eliminate it. For; // instructions part of most singleton congruence classes, we know we; // will never eliminate them.; // Instead, this eliminator looks at the congruence classes directly, sorts; // them into a DFS ordering of the dominator tree, and then we just; // perform elimination straight on the sets by walking the congruence; // class member uses in order, and eliminate the ones dominated by the; // last member. This is worst case O(E log E) where E = number of; // instructions in a single congruence class. In theory, this is all; // instructions. In practice, it is much faster, as most instructions are; // either in singleton congruence classes or can't possibly be eliminated; // anyway (if there are no overlapping DFS ranges in class).; // When we find something not dominated, it becomes the new leader; // for elimination purposes.; // TODO: If we wanted to be faster, We could remove any members with no; // overlapping ranges while sorting, as we will never eliminate anything; // with those members, as they don't dominate anything else in our set.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp:746,log,log,746,interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp,1,['log'],['log']
Testability,"// This is a simultaneous fit, so its likelihood has multiple components. In that case, splitting over; // components is always preferable, since it is more precise, due to component offsets matching; // the (-log) function values better.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:210,log,log,210,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,1,['log'],['log']
Testability,// This is a special format used for testing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp:37,test,testing,37,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp,1,['test'],['testing']
Testability,"// This is actually an interesting policy decision. We don't; // *have* to delay immediately here: we can do the full access; // calculation in the hope that friendship on some intermediate; // class will make the declaration accessible non-dependently.; // But that's not cheap, and odds are very good (note: assertion; // made without data) that the friend declaration will determine; // access.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp:310,assert,assertion,310,interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,1,['assert'],['assertion']
Testability,"// This is almost certainly not another line table but some alignment; // padding. This assumes the alignments tested are ordered, and are; // smaller than the header size (which is true for 4 and 8).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFDebugLine.cpp:111,test,tested,111,interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFDebugLine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFDebugLine.cpp,1,['test'],['tested']
Testability,"// This is an ARM branch relocation, need to use a stub function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp:51,stub,stub,51,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp,1,['stub'],['stub']
Testability,"// This is an ARM branch relocation, need to use a stub function.; // Look up for existing stub.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldMachOARM.h:51,stub,stub,51,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldMachOARM.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldMachOARM.h,2,['stub'],['stub']
Testability,"// This is an Mips branch relocation, need to use a stub function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp:52,stub,stub,52,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp,2,['stub'],['stub']
Testability,// This is an anonymous namespace. Adopt an existing anonymous; // namespace if we can.; // FIXME: Not testable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTImporter.cpp:103,test,testable,103,interpreter/llvm-project/clang/lib/AST/ASTImporter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTImporter.cpp,1,['test'],['testable']
Testability,// This is an internal ID used for debugging logical elements. It is used; // for cases where an unique offset within the binary input file is not; // available.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVObject.h:45,log,logical,45,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVObject.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVObject.h,1,['log'],['logical']
Testability,// This is an option used by testing:,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/PartialInlining.cpp:29,test,testing,29,interpreter/llvm-project/llvm/lib/Transforms/IPO/PartialInlining.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/PartialInlining.cpp,1,['test'],['testing']
Testability,// This is different depending on the type of xray record. The naive format; // stores a Wallclock timespec. FDR logging stores the size of a thread; // buffer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/XRayRecord.h:113,log,logging,113,interpreter/llvm-project/llvm/include/llvm/XRay/XRayRecord.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/XRayRecord.h,1,['log'],['logging']
Testability,"// This is essentially a reduced version of hasFP for entry functions. Since the; // stack pointer is known 0 on entry to kernels, we never really need an FP; // register. We may need to initialize the stack pointer depending on the frame; // properties, which logically overlaps many of the cases where an ordinary; // function would require an FP.; // Also used for chain functions. While not technically entry functions, chain; // functions may need to set up a stack pointer in some situations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIFrameLowering.cpp:261,log,logically,261,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIFrameLowering.cpp,1,['log'],['logically']
Testability,"// This is intentionally placed after the narrowing transforms for; // efficiency (transform directly to the narrow logic op if possible).; // If the mask is only needed on one incoming arm, push the 'and' op up.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:116,log,logic,116,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,1,['log'],['logic']
Testability,"// This is just so the can use the protected DiagProd funciton in the test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/matrix/test/testMatrixTDecomp.cxx:70,test,test,70,math/matrix/test/testMatrixTDecomp.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/test/testMatrixTDecomp.cxx,1,['test'],['test']
Testability,"// This is mostly for passing tests which uses llvm::vfs::InMemoryFileSystem,; // which is not ""real"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Distro.cpp:30,test,tests,30,interpreter/llvm-project/clang/lib/Driver/Distro.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Distro.cpp,1,['test'],['tests']
Testability,// This is necessary for correctness for C++ with modules.; // FIXME: Come up with a test case that breaks without definition.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp:85,test,test,85,interpreter/llvm-project/clang/lib/AST/Decl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp,1,['test'],['test']
Testability,// This is not crashing on bad input: we should only reach this if the; // internal compiler logic is faulty; see getFormForIdxParent.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AccelTable.cpp:93,log,logic,93,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AccelTable.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AccelTable.cpp,1,['log'],['logic']
Testability,"// This is only applicable to log(), log2(), log10().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp:30,log,log,30,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp,1,['log'],['log']
Testability,"// This is only used for loops with a ""x != y"" exit test. The exit condition; // is now expressed as a single expression, V = x-y. So the exit test is; // effectively V != 0. We know and take advantage of the fact that this; // expression only being used in a comparison by zero context.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:52,test,test,52,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,2,['test'],['test']
Testability,"// This is only used for testing the function import pass via opt, where we; // don't have prevailing information from the LTO context available, so just; // conservatively assume everything is prevailing (which is fine for the very; // limited use of prevailing checking in this pass).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp:25,test,testing,25,interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp,1,['test'],['testing']
Testability,"// This is private state used by DiagnosticBuilder. We put it here instead of; // in DiagnosticBuilder in order to keep DiagnosticBuilder a small lightweight; // object. This implementation choice means that we can only have one; // diagnostic ""in flight"" at a time, but this seems to be a reasonable; // tradeoff to keep these objects small. Assertions verify that only one; // diagnostic is in flight at a time.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:343,Assert,Assertions,343,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,1,['Assert'],['Assertions']
Testability,// This is really only to keep valgrind quiet.; // The logic in isLive() is too much for it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FloatingPoint.cpp:55,log,logic,55,interpreter/llvm-project/llvm/lib/Target/X86/X86FloatingPoint.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FloatingPoint.cpp,1,['log'],['logic']
Testability,// This is temporary solution to test performance. Float should be; // replaced with round independent type (based on integers) to avoid; // different results for different target builds.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:33,test,test,33,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['test'],['test']
Testability,// This is the current maximum for LAST_VALUETYPE.; // MVT::MAX_ALLOWED_VALUETYPE is used for asserts and to size bit vectors; // This value must be a multiple of 32.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h:94,assert,asserts,94,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h,1,['assert'],['asserts']
Testability,"// This is the fallback handling for the old format bitcode that; // didn't contain the function index in the VST, or when we have; // an anonymous function which would not have a VST entry.; // Assert that we have one of those two cases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Reader/BitcodeReader.cpp:195,Assert,Assert,195,interpreter/llvm-project/llvm/lib/Bitcode/Reader/BitcodeReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Reader/BitcodeReader.cpp,1,['Assert'],['Assert']
Testability,"// This is the function class mangling. These stubs are global, non-variadic,; // cdecl functions that return void and take no args.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp:46,stub,stubs,46,interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,1,['stub'],['stubs']
Testability,"// This is the key in this test: the mathematically direct value server of; // the integral is the derived ""mu_mod"", and not the leaf of the computation; // graph ""mu"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:27,test,test,27,roofit/roofitcore/test/testRooRealIntegral.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx,1,['test'],['test']
Testability,"// This is the main test, which checks the offset values and the loop; // increment value to determine if the accesses may be loop carried.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp:20,test,test,20,interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp,1,['test'],['test']
Testability,"// This is the point where 'as' creates actual symbols for indirect symbols; // (in the following two passes). It would be easier for us to do this sooner; // when we see the attribute, but that makes getting the order in the symbol; // table much more complicated than it is worth.; //; // FIXME: Revisit this when the dust settles.; // Report errors for use of .indirect_symbol not in a symbol pointer section; // or stub section.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MachObjectWriter.cpp:419,stub,stub,419,interpreter/llvm-project/llvm/lib/MC/MachObjectWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MachObjectWriter.cpp,1,['stub'],['stub']
Testability,"// This is used in debug builds only for now because some downstream users; // may hit this assert in their subsequent merges.; // There are still places in the analyzer where equal bitwidth Locs; // are compared, and need to be found and corrected. Recent previous fixes have; // addressed the known problems of making NULLs with specific bitwidths; // for Loc comparisons along with deprecation of APIs for the same purpose.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/SimpleSValBuilder.cpp:92,assert,assert,92,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/SimpleSValBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/SimpleSValBuilder.cpp,1,['assert'],['assert']
Testability,// This is used just for the assert in convertMask(). Check that this either; // a SETCC or a previously handled SETCC by convertMask().,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:29,assert,assert,29,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,1,['assert'],['assert']
Testability,"// This is where all the tests are called. If the user wants to add; // new tests or avoid executing one of the existing ones, it is; // here where they should do it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/test/UnitTesting.cxx:25,test,tests,25,gui/fitpanel/test/UnitTesting.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/test/UnitTesting.cxx,2,['test'],['tests']
Testability,"// This logic assumes that writes and reads are contributed by a register move; // or a register swap operation. In particular, it assumes a simple register; // move if there is only one write. It assumes a swap operation if there are; // exactly two writes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp:8,log,logic,8,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp,1,['log'],['logic']
Testability,// This logic is shamelessly borrowed from Esprima; // https://github.com/ariya/esprimas; //,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:8,log,logic,8,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['logic']
Testability,"// This macro loads the shared library libEvent.so provided in $ROOTSYS/test.; // Before executing this macro, we assume that:; // - you have changed your current directory to $ROOTSYS/test.; // - you have executed Event.; // If not, go to directory test and issue the commands:; // make Event to generate the executable module and shared library; // Event to produce the file Event.root; //; // Load shared library created in $ROOTSYS/test/libEvent.so",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/eventload.cxx:72,test,test,72,test/eventload.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/eventload.cxx,4,['test'],['test']
Testability,"// This macro read all events generated by the test program Event; // provided in $ROOTSYS/test.; //; // NOTE: Before executing this macro, you must have executed the macro eventload.; //; // This small program simply counts the number of bytes read and dump; // the first 3 events.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/eventa.cxx:47,test,test,47,test/eventa.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/eventa.cxx,2,['test'],['test']
Testability,"// This map keeps track of the number of ""unsafe"" uses of a loaded function; // pointer. The key is the associated llvm.type.test intrinsic call generated; // by this pass. An unsafe use is one that calls the loaded function pointer; // directly. Every time we eliminate an unsafe use (for example, by; // devirtualizing it or by applying virtual constant propagation), we; // decrement the value stored in this map. If a value reaches zero, we can; // eliminate the type check by RAUWing the associated llvm.type.test call with; // true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp:125,test,test,125,interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp,2,['test'],['test']
Testability,// This matches patterns corresponding to tests of the signbit as well as:; // (trunc X) u< C --> (X & -C) == 0 (are all masked-high-bits clear?); // (trunc X) u> C --> (X & ~C) != 0 (are any masked-high-bits set?),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:42,test,tests,42,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['test'],['tests']
Testability,// This may be analysis pass that is initialized on the fly.; // If that is not the case then it will raise an assert when it is used.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/LegacyPassManager.cpp:111,assert,assert,111,interpreter/llvm-project/llvm/lib/IR/LegacyPassManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/LegacyPassManager.cpp,1,['assert'],['assert']
Testability,"// This method acts upon CFG elements for logical operators && and ||; // and attaches the value (true or false) to them as expressions.; // It doesn't produce any state splits.; // If we made it that far, we're past the point when we modeled the short; // circuit. It means that we should have precise knowledge about whether; // we've short-circuited. If we did, we already know the value we need to; // bind. If we didn't, the value of the RHS (casted to the boolean type); // is the answer.; // Currently this method tries to figure out whether we've short-circuited; // by looking at the ExplodedGraph. This method is imperfect because there; // could inevitably have been merges that would have resulted in multiple; // potential path traversal histories. We bail out when we fail.; // Due to this ambiguity, a more reliable solution would have been to; // track the short circuit operation history path-sensitively until; // we evaluate the respective logical operator.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineC.cpp:42,log,logical,42,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineC.cpp,2,['log'],['logical']
Testability,"// This method mangles in USR information for types. It can possibly; // just reuse the naming-mangling logic used by codegen, although the; // requirements for USRs might not be the same.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Index/USRGeneration.cpp:104,log,logic,104,interpreter/llvm-project/clang/lib/Index/USRGeneration.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Index/USRGeneration.cpp,1,['log'],['logic']
Testability,"// This might possibly be a type with a dependent scope specifier and; // a missing 'typename' keyword. Don't use TryAnnotateName in this case,; // since it will annotate as a primary expression, and we want to use the; // ""missing 'typename'"" logic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseTentative.cpp:244,log,logic,244,interpreter/llvm-project/clang/lib/Parse/ParseTentative.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseTentative.cpp,1,['log'],['logic']
Testability,// This must be a cast from an integer or integer vector source type to allow; // transformation of the logic operation to the source type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:104,log,logic,104,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,1,['log'],['logic']
Testability,"// This must be a logic bug. ProcessMiss should return false if (pos, len); // wasn't put into fEntries.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx:18,log,logic,18,tree/tree/src/TTreeCache.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx,1,['log'],['logic']
Testability,"// This must be a module which has already been added but not loaded to this; // MCJIT instance, since these conditions are tested by our caller,; // generateCodeForModule.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/MCJIT/MCJIT.cpp:124,test,tested,124,interpreter/llvm-project/llvm/lib/ExecutionEngine/MCJIT/MCJIT.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/MCJIT/MCJIT.cpp,1,['test'],['tested']
Testability,"// This needs to be the inverse of logic in foldSignChangeInBitcast.; // FIXME: I don't think looking for bitcast intrinsically makes sense, but; // removing this would require more changes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:35,log,logic,35,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['log'],['logic']
Testability,// This needs to stay in sync with the logic in buildModuleSummaryIndex.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/FunctionImportUtils.cpp:39,log,logic,39,interpreter/llvm-project/llvm/lib/Transforms/Utils/FunctionImportUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/FunctionImportUtils.cpp,1,['log'],['logic']
Testability,"// This number is the largest round number that which meets the criteria:; // (1) addresses PR18825; // (2) generates better code in some test cases (like vldm-shed-a9.ll); // (3) Doesn't regress any test cases (in-tree, test-suite, and SPEC); // In practice the SizeMultiplier will only factor in for straight line code; // that uses a lot of NEON vectors, which isn't terribly common.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseRegisterInfo.cpp:138,test,test,138,interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseRegisterInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseRegisterInfo.cpp,3,['test'],"['test', 'test-suite']"
Testability,"// This only checks for bitwise-or and bitwise-and, but not bitwise-xor and; // not any of the logical operators. Bitwise-xor is commonly used as a; // logical-xor because there is no logical-xor operator. The logical; // operators, including uses of xor, have a high false positive rate for; // precedence warnings.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:95,log,logical,95,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,4,['log'],"['logical', 'logical-xor']"
Testability,// This operation is logically const; we're just changing how we represent; // the header information for this file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/ModuleMap.cpp:21,log,logically,21,interpreter/llvm-project/clang/lib/Lex/ModuleMap.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/ModuleMap.cpp,1,['log'],['logically']
Testability,// This option is used in simplifying testing SampleFDO optimizations for; // profile loading.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:38,test,testing,38,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,1,['test'],['testing']
Testability,// This overloads expiry testing with all the hazard detection,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNHazardRecognizer.cpp:25,test,testing,25,interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNHazardRecognizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNHazardRecognizer.cpp,2,['test'],['testing']
Testability,"// This parses and writes out the testcase into a temporary file copy for the; // test, rather than evaluating the source IR directly. This is for the; // convenience of lit tests; the stripped out comments may have broken the; // interestingness checks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp:34,test,testcase,34,interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-reduce/llvm-reduce.cpp,3,['test'],"['test', 'testcase', 'tests']"
Testability,"// This part uses a genetic alg. to evaluate the optimal sig eff * sig pur.; // This is why it is disabled for now.; // Find approximate optimal working point w.r.t. signalEfficiency * signalPurity.; // theMethod->TestMulticlass(); // This is where the actual GA calc is done; // multiclass_testEff.push_back(theMethod->GetMulticlassEfficiency(multiclass_testPur));",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:214,Test,TestMulticlass,214,tmva/tmva/src/Factory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx,1,['Test'],['TestMulticlass']
Testability,"// This part uses a genetic alg. to evaluate the optimal sig eff * sig pur.; // This is why it is disabled for now.; //; // // --- Acheivable signal efficiency * signal purity; // // --------------------------------------------------------------------; // Log() << kINFO << Endl;; // Log() << kINFO << ""Evaluation results ranked by best signal efficiency times signal purity "" << Endl;; // Log() << kINFO << hLine << Endl;; // // iterate over methods and evaluate; // for (MVector::iterator itrMethod = methods->begin(); itrMethod != methods->end(); itrMethod++) {; // MethodBase *theMethod = dynamic_cast<MethodBase *>(*itrMethod);; // if (theMethod == 0) {; // continue;; // }; // TString header = ""DataSet Name MVA Method "";; // for (UInt_t icls = 0; icls < theMethod->fDataSetInfo.GetNClasses(); ++icls) {; // header += TString::Format(""%-12s "", theMethod->fDataSetInfo.GetClassInfo(icls)->GetName());; // }; // Log() << kINFO << header << Endl;; // Log() << kINFO << hLine << Endl;; // for (Int_t i = 0; i < nmeth_used[0]; i++) {; // TString res = TString::Format(""[%-14s] %-15s"", theMethod->fDataSetInfo.GetName(), mname[0][i].Data());; // for (UInt_t icls = 0; icls < theMethod->fDataSetInfo.GetNClasses(); ++icls) {; // res += TString::Format(""%#1.3f "", (multiclass_testEff[i][icls]) * (multiclass_testPur[i][icls]));; // }; // Log() << kINFO << res << Endl;; // }; // Log() << kINFO << hLine << Endl;; // Log() << kINFO << Endl;; // }; // --- 1 vs Rest ROC AUC, signal efficiency @ given background efficiency; // --------------------------------------------------------------------",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:256,Log,Log,256,tmva/tmva/src/Factory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx,8,['Log'],['Log']
Testability,// This pass is used to annotate instructions during the inline process for; // debugging and analysis. The main purpose of the pass is to see and test; // inliner's decisions when creating new optimizations to InlineCost.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InlineCost.h:147,test,test,147,interpreter/llvm-project/llvm/include/llvm/Analysis/InlineCost.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InlineCost.h,1,['test'],['test']
Testability,"// This pass only makes sense when the underlying chip has floating point but; // we are compiling as mips16.; // For all mips16 functions (that are not stubs we have already generated), or; // declared via attributes as nomips16, we must:; // 1) fixup all returns of float, double, single and double complex; // by calling a helper function before the actual return.; // 2) generate helper functions (stubs) that can be called by mips32; // functions that will move parameters passed normally passed in; // floating point; // registers the soft float equivalents.; // 3) in the case of static relocation, generate helper functions so that; // mips16 functions can call extern functions of unknown type (mips16 or; // mips32).; // 4) TBD. For pic, calls to extern functions of unknown type are handled by; // predefined helper functions in libc but this work is currently done; // during call lowering but it should be moved here in the future.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/Mips16HardFloat.cpp:153,stub,stubs,153,interpreter/llvm-project/llvm/lib/Target/Mips/Mips16HardFloat.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/Mips16HardFloat.cpp,2,['stub'],['stubs']
Testability,"// This prevents generating extract instructions that have the offset of 0.; // One of the reasons for ""extract"" is to put a sequence of bits in a regis-; // ter, starting at offset 0 (so that these bits can then be used by an; // ""insert""). If the bits are already at offset 0, it is better not to gene-; // rate ""extract"", since logical bit operations can be merged into compound; // instructions (as opposed to ""extract"").",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonGenExtract.cpp:331,log,logical,331,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonGenExtract.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonGenExtract.cpp,1,['log'],['logical']
Testability,// This recursion depth limit is arbitrary. It's just great; // enough to cover known interesting testcases.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCAPElim.cpp:98,test,testcases,98,interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCAPElim.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCAPElim.cpp,1,['test'],['testcases']
Testability,// This relocation type is used for handling long branch instruction; // through the Stub.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldCOFFAArch64.h:85,Stub,Stub,85,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldCOFFAArch64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldCOFFAArch64.h,1,['Stub'],['Stub']
Testability,"// This replaces llvm::orc::ExecutionSession::logErrorsToStdErr:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp:46,log,logErrorsToStdErr,46,interpreter/cling/lib/Interpreter/IncrementalJIT.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp,1,['log'],['logErrorsToStdErr']
Testability,"// This routine could be enhanced to also support:; //; // testAlloc: if true, we test allocator, if it is not default result is negative; // result: 0 : not stl container; // abs(result): code of container 1=vector,2=list,3=deque,4=map; // 5=multimap,6=set,7=multiset; // positive val: we have a vector or list with default allocator to any depth; // like vector<list<vector<int>>>; // negative val: STL container other than vector or list, or non default allocator; // For example: vector<deque<int>> has answer -1",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:59,test,testAlloc,59,core/clingutils/src/TClingUtils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx,2,['test'],"['test', 'testAlloc']"
Testability,"// This section contains an implementation of struct layout that is, up to the; // included tests, compatible with cl.exe (2013). The layout produced is; // significantly different than those produced by the Itanium ABI. Here we note; // the most important differences.; //; // * The alignment of bitfields in unions is ignored when computing the; // alignment of the union.; // * The existence of zero-width bitfield that occurs after anything other than; // a non-zero length bitfield is ignored.; // * There is no explicit primary base for the purposes of layout. All bases; // with vfptrs are laid out first, followed by all bases without vfptrs.; // * The Itanium equivalent vtable pointers are split into a vfptr (virtual; // function pointer) and a vbptr (virtual base pointer). They can each be; // shared with a, non-virtual bases. These bases need not be the same. vfptrs; // always occur at offset 0. vbptrs can occur at an arbitrary offset and are; // placed after the lexicographically last non-virtual base. This placement; // is always before fields but can be in the middle of the non-virtual bases; // due to the two-pass layout scheme for non-virtual-bases.; // * Virtual bases sometimes require a 'vtordisp' field that is laid out before; // the virtual base and is used in conjunction with virtual overrides during; // construction and destruction. This is always a 4 byte value and is used as; // an alternative to constructor vtables.; // * vtordisps are allocated in a block of memory with size and alignment equal; // to the alignment of the completed structure (before applying __declspec(; // align())). The vtordisp always occur at the end of the allocation block,; // immediately prior to the virtual base.; // * vfptrs are injected after all bases and fields have been laid out. In; // order to guarantee proper alignment of all fields, the vfptr injection; // pushes all bases and fields back by the alignment imposed by those bases; // and fields. This can potentially a",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:92,test,tests,92,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,1,['test'],['tests']
Testability,"// This should be a no-op in most sane cases: the RJittedFilter should already have been deregistered in SetFilter.; // However, in the edge case in which the branch of the computation graph that included this RJittedFilter went out; // of scope before any event loop ran (e.g. because of bad code logic or a user that changed their mind during; // interactive usage), we need to make sure RJittedFilters get properly deregistered.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RJittedFilter.cxx:298,log,logic,298,tree/dataframe/src/RJittedFilter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RJittedFilter.cxx,1,['log'],['logic']
Testability,"// This should be always the case, as this is tested in readInputBinaries",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lipo/llvm-lipo.cpp:46,test,tested,46,interpreter/llvm-project/llvm/tools/llvm-lipo/llvm-lipo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-lipo/llvm-lipo.cpp,1,['test'],['tested']
Testability,// This should be an assert in the frontend.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonAsmPrinter.cpp:21,assert,assert,21,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonAsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonAsmPrinter.cpp,1,['assert'],['assert']
Testability,// This should be guaranteed given that the entire expression is used; // at each instruction in Refs. Add an assertion just in case.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp:110,assert,assertion,110,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp,1,['assert'],['assertion']
Testability,"// This should force the JIT to recompile the function. But the stubs stay,; // and the JIT reuses the stubs now pointing nowhere, i.e. without updating; // the machine code address. Fix the JIT, or hope that MCJIT helps.; //engine->freeMachineCodeForFunction(*I);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/IncrementalExecutor.cpp:64,stub,stubs,64,interpreter/cling/lib/Interpreter/IncrementalExecutor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/IncrementalExecutor.cpp,2,['stub'],['stubs']
Testability,// This should never happen since we asserted that the stream length was; // an exact multiple of the element size.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/BinaryStreamArray.h:37,assert,asserted,37,interpreter/llvm-project/llvm/include/llvm/Support/BinaryStreamArray.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/BinaryStreamArray.h,1,['assert'],['asserted']
Testability,"// This should only be called when using deferred_insert.; // This asserts that the WorklistMap is empty, and then; // inserts all the elements in the Worklist into the map.; // It also asserts if there are any duplicate elements found.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelWorkList.h:67,assert,asserts,67,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelWorkList.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelWorkList.h,2,['assert'],['asserts']
Testability,// This stream is used to collect all of the declaration attribute merging; // logic for performing mutual exclusion checks. This gets emitted at the; // end of the file in a helper function of its own.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:79,log,logic,79,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,1,['log'],['logic']
Testability,"// This stub has to be able to access the full address space,; // since symbol lookup won't necessarily find a handy, in-range,; // PLT stub for functions which could be anywhere.; // Stub can use ip0 (== x16) to calculate address",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp:8,stub,stub,8,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp,3,"['Stub', 'stub']","['Stub', 'stub']"
Testability,"// This symbol is used in testcases, but we're not reflecting process; // symbols so we'll need to make it available some other way.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:26,test,testcases,26,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,1,['test'],['testcases']
Testability,// This syscall signals a driver assertion failure in x86 NT kernels.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:33,assert,assertion,33,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,1,['assert'],['assertion']
Testability,"// This target-overriden function exists to maintain current behaviour for; // e.g.; // dahi $3, $3, 0x5678; // as tested in test/MC/Mips/mips64r6/valid.s.; // FIXME: Should this test actually fail with an error? If so, then remove; // this overloaded method.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp:115,test,tested,115,interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp,3,['test'],"['test', 'tested']"
Testability,"// This test aims to exercise some limits of RNTuple that are expected to be upper bounds for realistic applications.; // The theoretical limits may be higher: for example, the specification supports up to 4B clusters per group, but the; // expectation is less than 10k. For good measure, we test up to 100k clusters per group below.; //; // By nature, such limit tests will use considerable resources. For that reason, we disable the tests by default to; // avoid running them in our CI. Locally they can be run by passing `--gtest_also_run_disabled_tests` to the gtest; // executable. This may be combined with `--gtest_filter` to select a particular test. For example, to run said test; // for many clusters in a single group, the invocation would be; // ```; // ./tree/ntuple/v7/test/ntuple_limits --gtest_also_run_disabled_tests --gtest_filter=*Limits_ManyClusters; // ```",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_limits.cxx:8,test,test,8,tree/ntuple/v7/test/ntuple_limits.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_limits.cxx,7,['test'],"['test', 'tests']"
Testability,"// This test checks if RooProdPdf::getPartIntList factorizes the integrals; // as expected, for the example of a three dimensional RooProdPdf.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooProdPdf.cxx:8,test,test,8,roofit/roofitcore/test/testRooProdPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooProdPdf.cxx,1,['test'],['test']
Testability,"// This test doesn't actually represent a current usecase in RooFit, but let's; // showcase the possibility anyway for future reference.; // first create a regular pm like in the birthAndDeath test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/test/test_ProcessManager.cxx:8,test,test,8,roofit/multiprocess/test/test_ProcessManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/test/test_ProcessManager.cxx,2,['test'],['test']
Testability,"// This test fails, as expected! That is why it is not run in the tests suite.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:8,test,test,8,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,['test'],"['test', 'tests']"
Testability,"// This test has been disabled in favor of the pub-sub connection check in the Messenger ctor, which is more robust",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/test/test_Messenger.cxx:8,test,test,8,roofit/multiprocess/test/test_Messenger.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/test/test_Messenger.cxx,1,['test'],['test']
Testability,"// This test is cheaper compared to the big matcher in the next if.; // Therefore, please keep this order.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:8,test,test,8,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['test'],['test']
Testability,"// This test is here to check that emplace_back works; // also for T==bool. Indeed, on some platform, vector<bool>; // has no emplace_back. Notable examples are osx 10.14 and gcc 4.8",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/vecops/test/vecops_rvec.cxx:8,test,test,8,math/vecops/test/vecops_rvec.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/vecops/test/vecops_rvec.cxx,1,['test'],['test']
Testability,"// This test is outside everything else because it's the only case where; // a non-lvalue-reference target type does not lead to decay.; // C++ 5.2.9p4: Any expression can be explicitly converted to type ""cv void"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp:8,test,test,8,interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp,1,['test'],['test']
Testability,"// This test necessary to read very old Root files (NvE).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranch.cxx:8,test,test,8,tree/tree/src/TBranch.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranch.cxx,1,['test'],['test']
Testability,"// This test needs to stay disabled until ROOT-10144 in TFormula v5 is fixed; // or until RooFit is updated to use TFormula v6 (ROOT-10164)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooJohnson.cxx:8,test,test,8,roofit/roofit/test/testRooJohnson.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooJohnson.cxx,1,['test'],['test']
Testability,"// This test verifies that the correct method is called and there is no ambiguity between the JIT call to Cache using; // a column list as a parameter and the JIT call to Cache using the Regexp.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_cache.cxx:8,test,test,8,tree/dataframe/test/dataframe_cache.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_cache.cxx,1,['test'],['test']
Testability,"// This test verifies that the correct method is called and there is no ambiguity between the JIT call to Display; // using a column list as a parameter and the JIT call to Display using the Regexp.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_display.cxx:8,test,test,8,tree/dataframe/test/dataframe_display.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_display.cxx,1,['test'],['test']
Testability,"// This test was disabled because it was occasionally timing out on the CI.; // Evaluating the same likelihood twice should not be a problem anymore, and if; // it would be it would also manifest in other tests.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx:8,test,test,8,roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodJob.cxx,2,['test'],"['test', 'tests']"
Testability,"// This test will crash if the cached normalization sets are not reset; // correctly after servers are redirected. This is a reduced version of a code; // provided in the ROOT forum that originally unveiled this problem:; // https://root-forum.cern.ch/t/problems-with-2d-simultaneous-fit/48249/4",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooAbsPdf.cxx:8,test,test,8,roofit/roofitcore/test/testRooAbsPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooAbsPdf.cxx,1,['test'],['test']
Testability,"// This tests both correct pre-caching of constant terms and (if false) that all doEval() are correct.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/testHistFactory.cxx:8,test,tests,8,roofit/histfactory/test/testHistFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/testHistFactory.cxx,1,['test'],['tests']
Testability,"// This tests that at least one bit in the bitset is available.; // When we are down to one bitset, we'll have to expand the field.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/test/TBasket.cxx:8,test,tests,8,tree/tree/test/TBasket.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/test/TBasket.cxx,1,['test'],['tests']
Testability,"// This tests that variable-length arrays still work -- make sure various modifications; // haven't messed up this basic case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/test/TBasket.cxx:8,test,tests,8,tree/tree/test/TBasket.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/test/TBasket.cxx,1,['test'],['tests']
Testability,"// This tests the analytical integration of RooParamHistFunc,; // inspired by this issue on GitHub:; // https://github.com/root-project/root/issues/7182",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooParamHistFunc.cxx:8,test,tests,8,roofit/roofit/test/testRooParamHistFunc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooParamHistFunc.cxx,1,['test'],['tests']
Testability,"// This tests the analytical integration of RooParamHistFunc; // after the RooParamHistFunc has been cloned.; // The test was inspired by this error reported on the forum:; // https://root-forum.cern.ch/t/barlow-beeston-in-subrange/43909/5",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooParamHistFunc.cxx:8,test,tests,8,roofit/roofit/test/testRooParamHistFunc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooParamHistFunc.cxx,2,['test'],"['test', 'tests']"
Testability,// This trait is implemented by MSVC 2012 and needed to parse the; // standard library headers. Specifically it is used as the logic; // behind std::is_trivially_move_assignable (20.9.4.3),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp:127,log,logic,127,interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,1,['log'],['logic']
Testability,// This trait is implemented by MSVC 2012 and needed to parse the; // standard library headers. Specifically this is used as the logic; // behind std::is_nothrow_move_assignable (20.9.4.3).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp:129,log,logic,129,interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,1,['log'],['logic']
Testability,// This trait is implemented by MSVC 2012 and needed to parse the; // standard library headers. Specifically this is used as the logic; // behind std::is_trivially_move_constructible (20.9.4.3).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp:129,log,logic,129,interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,1,['log'],['logic']
Testability,// This transform is not valid for a logical select.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:37,log,logical,37,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,1,['log'],['logical']
Testability,"// This unrolling functionality is target independent, but to provide some; // motivation for its intended use, for x86:; // According to the Intel 64 and IA-32 Architectures Optimization Reference; // Manual, Intel Core models and later have a loop stream detector (and; // associated uop queue) that can benefit from partial unrolling.; // The relevant requirements are:; // - The loop must have no more than 4 (8 for Nehalem and later) branches; // taken, and none of them may be calls.; // - The loop can have no more than 18 (28 for Nehalem and later) uops.; // According to the Software Optimization Guide for AMD Family 15h; // Processors, models 30h-4fh (Steamroller and later) have a loop predictor; // and loop buffer which can benefit from partial unrolling.; // The relevant requirements are:; // - The loop must have fewer than 16 branches; // - The loop must have less than 40 uops in all executed loop branches; // The number of taken branches in a loop is hard to estimate here, and; // benchmarking has revealed that it is better not to be conservative when; // estimating the branch count. As a result, we'll ignore the branch limits; // until someone finds a case where it matters in practice.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/BasicTTIImpl.h:1003,benchmark,benchmarking,1003,interpreter/llvm-project/llvm/include/llvm/CodeGen/BasicTTIImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/BasicTTIImpl.h,1,['benchmark'],['benchmarking']
Testability,// This used to trigger an assertion,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-c-test/metadata.c:27,assert,assertion,27,interpreter/llvm-project/llvm/tools/llvm-c-test/metadata.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-c-test/metadata.c,2,['assert'],['assertion']
Testability,"// This uses a ""dominates"" query instead of ""properly dominates"" query; // to test for proper dominance too, because the instruction which; // produces the addrec's value is a PHI, and a PHI effectively properly; // dominates its entire containing block.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:78,test,test,78,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['test'],['test']
Testability,// This variable (and its dummy usage) is to participate in the assert at; // the end of the function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCAssembler.cpp:64,assert,assert,64,interpreter/llvm-project/llvm/lib/MC/MCAssembler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCAssembler.cpp,1,['assert'],['assert']
Testability,"// This warning is deliberately made very specific to reduce false; // positives with logic that uses '&' for hashing. This logic mainly; // looks for code trying to introspect into tagged pointers, which; // code should generally never do.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:86,log,logic,86,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,2,['log'],['logic']
Testability,"// This will only catch ExceptionX but not RException. In case rv mistakenly throws an exception,; // we would notice the test failure by a crash of the unit test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/v7/test/base_exception.cxx:122,test,test,122,core/foundation/v7/test/base_exception.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/v7/test/base_exception.cxx,2,['test'],['test']
Testability,"// This will result in a trellis after tail duplication, so we don't; // need to copy Succ into this predecessor. In the presence; // of a trellis tail duplication can continue to be profitable.; // For example:; // A A; // |\ |\; // | \ | \; // | C | C+BB; // | / | |; // |/ | |; // BB => BB |; // |\ |\/|; // | \ |/\|; // | D | D; // | / | /; // |/ |/; // Succ Succ; //; // After BB was duplicated into C, the layout looks like the one on the; // right. BB and C now have the same successors. When considering; // whether Succ can be duplicated into all its unplaced predecessors, we; // ignore C.; // We can do this because C already has a profitable fallthrough, namely; // D. TODO(iteratee): ignore sufficiently cold predecessors for; // duplication and for this test.; //; // This allows trellises to be laid out in 2 separate chains; // (A,B,Succ,...) and later (C,D,...) This is a reasonable heuristic; // because it allows the creation of 2 fallthrough paths with links; // between them, and we correctly identify the best layout for these; // CFGs. We want to extend trellises that the user created in addition; // to trellises created by tail-duplication, so we just look for the; // CFG.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp:768,test,test,768,interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp,1,['test'],['test']
Testability,"// This works differently than annotateAndAdvanceTokens; because expanded; // macro arguments can have arbitrary translation-unit source order, we do not; // advance the token index one by one until a token fails the range test.; // We only advance once past all of the macro arg tokens if all of them; // pass the range test. If one of them fails we keep the token index pointing; // at the start of the macro arg tokens so that the failing token will be; // annotated by a subsequent annotation try.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:223,test,test,223,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,2,['test'],['test']
Testability,"// This would be the logical way to do things, but floating point errors.; // return Math.round( value / this._step ) * this._step;; // Using inverse step solves a lot of them, but not all; // const inverseStep = 1 / this._step;; // return Math.round( value * inverseStep ) / inverseStep;; // Not happy about this, but haven't seen it break.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:21,log,logical,21,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['logical']
Testability,"// Throwing ExceptionX will destruct rv along the way. Since rv carries an error state, it would normally; // throw an exception itself. In this test, we verify that rv surpresses throwing an exception if another; // exception is currently active.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/v7/test/base_exception.cxx:145,test,test,145,core/foundation/v7/test/base_exception.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/v7/test/base_exception.cxx,1,['test'],['test']
Testability,"// To aviod triggering crash if there is no test tree",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/Method/TestMethodDNNValidationSize.cxx:44,test,test,44,tmva/tmva/test/Method/TestMethodDNNValidationSize.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/Method/TestMethodDNNValidationSize.cxx,1,['test'],['test']
Testability,// To avoid triggering an assertion in the lazy call graph we will not delete; // any internal library functions. We should modify the assertion though and; // allow internals to be deleted.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/Attributor.cpp:26,assert,assertion,26,interpreter/llvm-project/llvm/lib/Transforms/IPO/Attributor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/Attributor.cpp,2,['assert'],['assertion']
Testability,"// To be safe that the loads can be combined, iterate over all loads and test; // that the corresponding defining access dominates first LI. This guarantees; // that there are no aliasing stores in between the loads.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/InterleavedLoadCombinePass.cpp:73,test,test,73,interpreter/llvm-project/llvm/lib/CodeGen/InterleavedLoadCombinePass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/InterleavedLoadCombinePass.cpp,1,['test'],['test']
Testability,"// To build the package we execute PROOF-INF/BUILD.sh via a pipe; // so that we can send back the log in (almost) real-time to the; // (impatient) client. Note that this operation will block, so; // the messages from builds on the workers will reach the client; // shortly after the master ones.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TPackMgr.cxx:98,log,log,98,proof/proof/src/TPackMgr.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TPackMgr.cxx,1,['log'],['log']
Testability,"// To consider a PHI profitable to break, we need to see some interesting; // incoming values. At least 2/3rd (rounded up) of all PHIs in the worklist; // must have one to consider all PHIs breakable.; //; // This threshold has been determined through performance testing.; //; // Note that the computation below is equivalent to; //; // (unsigned)ceil((K / 3.0) * 2); //; // It's simply written this way to avoid mixing integral/FP arithmetic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUCodeGenPrepare.cpp:264,test,testing,264,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUCodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUCodeGenPrepare.cpp,1,['test'],['testing']
Testability,"// To control if an individual test failed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:31,test,test,31,test/stressHistoFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx,3,['test'],['test']
Testability,"// To do the logarithm inplace if necessary.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooSpline.cxx:13,log,logarithm,13,roofit/roofit/src/RooSpline.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooSpline.cxx,1,['log'],['logarithm']
Testability,"// To insert an ABS instruction, we have to insert the; // diamond control-flow pattern. The incoming instruction knows the; // source vreg to test against 0, the destination vreg to set,; // the condition code register to branch on, the; // true/false values to select between, and a branch opcode to use.; // It transforms; // V1 = ABS V0; // into; // V2 = MOVS V0; // BCC (branch to SinkBB if V0 >= 0); // RSBBB: V3 = RSBri V2, 0 (compute ABS if V2 < 0); // SinkBB: V1 = PHI(V2, V3)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:143,test,test,143,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['test'],['test']
Testability,"// To make sure that the bin width is unity and we don't have to worry about; // bin width corrections in the test model.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:110,test,test,110,roofit/roofitcore/test/testTestStatistics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx,1,['test'],['test']
Testability,"// To match InstCombine logic, we only need sext if both fptosi and; // sitofp are used. If one of them is unsigned, then we can use zext.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp:24,log,logic,24,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,1,['log'],['logic']
Testability,"// To perform the test, it's easier to sort",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_simple.cxx:18,test,test,18,tree/dataframe/test/dataframe_simple.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_simple.cxx,1,['test'],['test']
Testability,"// To prevent poison from leaking across what used to be sequential,; // safe, scalar boolean logic operations, the reduction operand must be; // frozen.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:94,log,logic,94,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['log'],['logic']
Testability,"// To prevent poison from leaking across what used to be; // sequential, safe, scalar boolean logic operations, the; // reduction operand must be frozen.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:94,log,logic,94,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['log'],['logic']
Testability,"// To prevent the invalid transformation of the following code:; //; // mov %rax, %rcx; // test %rax, %rax; // %rax = ...; // je throw_npe; // mov(%rcx), %r9; // mov(%rax), %r10; //; // into:; //; // mov %rax, %rcx; // %rax = ....; // faulting_load_op(""movl (%rax), %r10"", throw_npe); // mov(%rcx), %r9; //; // we must ensure that there are no instructions between the 'test' and; // conditional jump that modify %rax.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp:91,test,test,91,interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp,2,['test'],['test']
Testability,"// To test double TTree in the same file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/proof/ProofNtuple.h:6,test,test,6,tutorials/proof/ProofNtuple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/proof/ProofNtuple.h,1,['test'],['test']
Testability,// To test if the start location of the found region precedes `Loc`:,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/Preprocessor.cpp:6,test,test,6,interpreter/llvm-project/clang/lib/Lex/Preprocessor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/Preprocessor.cpp,1,['test'],['test']
Testability,"// To use Lookup::Named we need to fit the assertion:; // ((!isa<TagDecl>(LookupCtx) || LookupCtx->isDependentContext(); // || cast<TagDecl>(LookupCtx)->isCompleteDefinition(); // || cast<TagDecl>(LookupCtx)->isBeingDefined()) &&; // ""Declaration context must already be complete!""),; // function LookupQualifiedName, file SemaLookup.cpp, line 1614.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/LookupHelper.cpp:43,assert,assertion,43,interpreter/cling/lib/Interpreter/LookupHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/LookupHelper.cpp,1,['assert'],['assertion']
Testability,"// Torture Power complex - complex; //; // Important note on the following tests. The operation of raising a complex; // number to a power does not yet a single value, but rather an infinite; // number of values, particularly if the number is non rational.; // For a real number a, you can define a^(b+ic) by writing a = e^(ln a):; //; // b+ic (ln a)(b+ic) (b ln a) + i(c ln a); // a = e = e; //; // (b ln a); // = e ( cos (c ln a) + i sin (c ln a) ); //; // b; // = a ( cos (c ln a) + i sin (c ln a) ).; //; // Now, if a is a complex number instead of a real number, there is no; // single value to ""ln a"": there are lots of different complex numbers z; // for which e^z = a, and for any such complex number z, you could define; // a^(b+ic) to be e^(z(b+ic)) and use the above technique to calculate it.; //; // In fact, the same thing is true even when a is a real number. The; // expression a^(b+ic) has many possible values (infinite except when b; // and c are both rational numbers), because instead of doing the calculation; // writing a = e^(ln a), you could also do it by writing a = e^(ln a + 2pi i); // or by writing a = e^(ln a + 4 pi i), or a = e^(ln a + 6 pi i), and so on.; // Each of these equalities is true (in fact e^(2pi n i)=1 for integer n).; //; // When a is real it is more ""natural"" to use the ordinary real-valued; // logarithm ln a rather than than something like ln a + 2 pi i.; // Technically, this value is called the principal value. This is what; // the formula up above gives you. Unfortunately this alone does not; // guarantees that the inverse operation brings you back where you; // started from.; //; // When a is not real there is no one natural choice of logarithm to prefer; // over any other, so in those cases we have to say that an expression like; // a^(b+ic) has many different values.; //; // This is because in these tests we exclude from the error output the; // results where we ended up very far from the initial value, and the; // difference is more",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/ctorture.cxx:75,test,tests,75,test/ctorture.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/ctorture.cxx,1,['test'],['tests']
Testability,"// Torture exp and log",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/ctorture.cxx:19,log,log,19,test/ctorture.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/ctorture.cxx,1,['log'],['log']
Testability,"// TraceGVPlacement controls messages for all builds. For builds with assertions; // (debug or release), messages are also controlled by the usual debug flags; // (e.g. -debug and -debug-only=globallayout)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonTargetObjectFile.cpp:70,assert,assertions,70,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonTargetObjectFile.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonTargetObjectFile.cpp,1,['assert'],['assertions']
Testability,"// Track cycles contributed by resources that are in a ""Super"" relationship.; // This is required if we want to correctly match the behavior of method; // SubtargetEmitter::ExpandProcResource() in Tablegen. When computing the set; // of ""consumed"" processor resources and resource cycles, the logic in; // ExpandProcResource() doesn't update the number of resource cycles; // contributed by a ""Super"" resource to a group.; // We need to take this into account when we find that a processor resource is; // part of a group, and it is also used as the ""Super"" of other resources.; // This map stores the number of cycles contributed by sub-resources that are; // part of a ""Super"" resource. The key value is the ""Super"" resource mask ID.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp:293,log,logic,293,interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp,1,['log'],['logic']
Testability,"// Track the index->register mapping because AllocationOrder doesn't do that; // and we'd have to scan it.; // Also track their mask, to write asserts/debug.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MLRegAllocEvictAdvisor.cpp:143,assert,asserts,143,interpreter/llvm-project/llvm/lib/CodeGen/MLRegAllocEvictAdvisor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MLRegAllocEvictAdvisor.cpp,1,['assert'],['asserts']
Testability,"// Train/Test/Evaluation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:9,Test,Test,9,tmva/tmva/src/Factory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx,6,['Test'],['Test']
Testability,// Transfer and jump:; // Rd=#U6 ; jump #r9:2; // Rd=Rs ; jump #r9:2; // Do not test for jump range here.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp:80,test,test,80,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,2,['test'],['test']
Testability,"// Transform to an x86-specific ALU node with flags if there is a chance of; // using an RMW op or only the flags are used. Otherwise, leave; // the node alone and emit a 'cmp' or 'test' instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:181,test,test,181,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['test'],['test']
Testability,"// Translate the CCMask into its ""logical"" value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZElimCompare.cpp:34,log,logical,34,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZElimCompare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZElimCompare.cpp,1,['log'],['logical']
Testability,// Trap BB will causes trap like `assert(0)`.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/VE/VEISelLowering.cpp:34,assert,assert,34,interpreter/llvm-project/llvm/lib/Target/VE/VEISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/VE/VEISelLowering.cpp,1,['assert'],['assert']
Testability,// Traverse the collected LF_UDT_SRC_LINE records and add the source line; // information to the logical elements.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp:97,log,logical,97,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp,1,['log'],['logical']
Testability,// Traverse through functions in base profile but not in test profile.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp:57,test,test,57,interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-profdata/llvm-profdata.cpp,1,['test'],['test']
Testability,// Treat AssertingVH<T> like T* inside maps. This also allows using find_as(); // to look up a value without constructing a value handle.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h:9,Assert,AssertingVH,9,interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueHandle.h,1,['Assert'],['AssertingVH']
Testability,"// Trivial constructor, interesting logic in the factory functions below.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InlineCost.h:36,log,logic,36,interpreter/llvm-project/llvm/include/llvm/Analysis/InlineCost.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/InlineCost.h,1,['log'],['logic']
Testability,"// True if the hardware rewinds and replays GWS operations if a wave is; // preempted.; //; // If this is false, a GWS operation requires testing if a nack set the; // MEM_VIOL bit, and repeating if so.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNSubtarget.h:138,test,testing,138,interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNSubtarget.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNSubtarget.h,1,['test'],['testing']
Testability,"// True if this class has no members left. This is mainly used for assertion; // purposes, and for skipping empty classes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp:67,assert,assertion,67,interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp,1,['assert'],['assertion']
Testability,// Try again to find a 'not' op.; // TODO: Should we favor test+set even with two 'not' ops?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:59,test,test,59,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['test'],['test']
Testability,"// Try calling SimplifyDemandedBits, converting demanded elts to the bits; // of the large element.; // TODO - bigendian once we have test coverage.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:134,test,test,134,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,1,['test'],['test']
Testability,// Try the default logic for non-generic instructions that are either copies; // or already have some operands assigned to banks.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64RegisterBankInfo.cpp:19,log,logic,19,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64RegisterBankInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64RegisterBankInfo.cpp,5,['log'],['logic']
Testability,// Try the target specific test first.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:27,test,test,27,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['test'],['test']
Testability,// Try to adjust CC masks for the LOAD AND TEST opcode that could replace MI.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZElimCompare.cpp:43,TEST,TEST,43,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZElimCompare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZElimCompare.cpp,1,['TEST'],['TEST']
Testability,// Try to canonicalize bswap-of-logical-shift-by-8-bit-multiple as; // inverse-shift-of-bswap:; // bswap (X u<< C) --> (bswap X) u>> C; // bswap (X u>> C) --> (bswap X) u<< C,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:32,log,logical-shift-by-,32,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['log'],['logical-shift-by-']
Testability,"// Try to canonicalize bswap-of-logical-shift-by-8-bit-multiple as; // inverse-shift-of-bswap:; // bswap (shl X, Y) --> lshr (bswap X), Y; // bswap (lshr X, Y) --> shl (bswap X), Y",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp:32,log,logical-shift-by-,32,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,1,['log'],['logical-shift-by-']
Testability,// Try to clean up the testcase by running funcresolve and globaldce...,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/CrashDebugger.cpp:23,test,testcase,23,interpreter/llvm-project/llvm/tools/bugpoint/CrashDebugger.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/CrashDebugger.cpp,1,['test'],['testcase']
Testability,// Try to detect mistyped 'range:' comments to ensure tests don't miss; // anything.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/TestSupport.cpp:54,test,tests,54,interpreter/llvm-project/clang/tools/clang-refactor/TestSupport.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/TestSupport.cpp,1,['test'],['tests']
Testability,"// Try to detect the case where the current inlining candidate caller (call; // it B) is a static or linkonce-ODR function and is an inlining candidate; // elsewhere, and the current candidate callee (call it C) is large enough; // that inlining it into B would make B too big to inline later. In these; // circumstances it may be best not to inline C into B, but to inline B into; // its callers.; //; // This only applies to static and linkonce-ODR functions because those are; // expected to be available for inlining in the translation units where they; // are used. Thus we will always have the opportunity to make local inlining; // decisions. Importantly the linkonce-ODR linkage covers inline functions; // and templates in C++.; //; // FIXME: All of this logic should be sunk into getInlineCost. It relies on; // the internal implementation of the inline cost metrics rather than; // treating them as truly abstract units etc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineAdvisor.cpp:764,log,logic,764,interpreter/llvm-project/llvm/lib/Analysis/InlineAdvisor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineAdvisor.cpp,1,['log'],['logic']
Testability,"// Try to determine the return value if we can. This is mainly here to; // simplify the writing of unit tests, but also helps to enable IPO by; // constant folding the return values of callees.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/CorrelatedValuePropagation.cpp:104,test,tests,104,interpreter/llvm-project/llvm/lib/Transforms/Scalar/CorrelatedValuePropagation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/CorrelatedValuePropagation.cpp,1,['test'],['tests']
Testability,"// Try to eliminate a power-of-2 mask constant by converting to a signbit; // test in a narrow type that we can truncate to with no cost. Examples:; // (i32 X & 32768) == 0 --> (trunc X to i16) >= 0; // (i32 X & 32768) != 0 --> (trunc X to i16) < 0; // TODO: This conservatively checks for type legality on the source and; // destination types. That may inhibit optimizations, but it also; // allows setcc->shift transforms that may be more beneficial.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:78,test,test,78,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,1,['test'],['test']
Testability,"// Try to fold the comparison into the select arms, which will cause the; // select to be converted into a logical and/or.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:107,log,logical,107,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['log'],['logical']
Testability,// Try to form loop invariant tests for loop exits by changing how many; // iterations of the loop run when that is unobservable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp:30,test,tests,30,interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,1,['test'],['tests']
Testability,"// Try to improve a sequence of srl (and X, C1), C2 by inverting the order.; // TODO: This is a generic DAG combine that became an x86-only combine to; // avoid shortcomings in other folds such as bswap, bit-test ('bt'), and; // and-not ('andn').",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:208,test,test,208,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['test'],['test']
Testability,"// Try to make this an AddRec using runtime tests, in the first X; // iterations of this loop, where X is the SCEV expression found by the; // algorithm below.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:44,test,tests,44,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,3,['test'],['tests']
Testability,// Try to match (-1 '[outer] logical shift' y),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:29,log,logical,29,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['log'],['logical']
Testability,"// Try to match OR(AND(~MASK,X),AND(MASK,Y)) logic pattern.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:45,log,logic,45,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['log'],['logic']
Testability,// Try to match comparison as a sign bit test. Intentionally do this after; // foldICmpInstWithConstant() to potentially let other folds to happen first.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:41,test,test,41,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['test'],['test']
Testability,"// Try to match one of following patterns:; // LOGIC (LOGIC (SH X0, Y), Z), (LOGIC (SH X1, Y), W); // LOGIC (LOGIC (SH X0, Y), Z), (LOGIC W, (SH X1, Y)); // Note that foldLogicOfShifts will handle commuted versions of the left hand; // itself.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:47,LOG,LOGIC,47,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,6,['LOG'],['LOGIC']
Testability,// Try to match two logic ops to a VPTERNLOG.; // FIXME: Handle more complex patterns that use an operand more than once?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:20,log,logic,20,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,1,['log'],['logic']
Testability,// Try to optimize cases where comparison instruction Compare is testing; // a value against zero. Return true on success and if Compare should be; // deleted as dead. CCUsers is the list of instructions that use the CC; // value produced by Compare.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZElimCompare.cpp:65,test,testing,65,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZElimCompare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZElimCompare.cpp,1,['test'],['testing']
Testability,// Try to perform the memcmp when the result is tested for [in]equality with 0,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:48,test,tested,48,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['test'],['tested']
Testability,"// Try to prove that there is aliasing, or that there is no aliasing. Either; // way, we can return now. If nothing can be proved, proceed with more tests.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LoadStoreOpt.cpp:149,test,tests,149,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LoadStoreOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LoadStoreOpt.cpp,2,['test'],['tests']
Testability,"// Try to recognize table-based ctz implementation.; // E.g., an example in C (for more cases please see the llvm/tests):; // int f(unsigned x) {; // static const char table[32] =; // {0, 1, 28, 2, 29, 14, 24, 3, 30,; // 22, 20, 15, 25, 17, 4, 8, 31, 27,; // 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9};; // return table[((unsigned)((x & -x) * 0x077CB531U)) >> 27];; // }; // this can be lowered to `cttz` instruction.; // There is also a special case when the element is 0.; //; // Here are some examples or LLVM IR for a 64-bit target:; //; // CASE 1:; // %sub = sub i32 0, %x; // %and = and i32 %sub, %x; // %mul = mul i32 %and, 125613361; // %shr = lshr i32 %mul, 27; // %idxprom = zext i32 %shr to i64; // %arrayidx = getelementptr inbounds [32 x i8], [32 x i8]* @ctz1.table, i64 0,; // i64 %idxprom; // %0 = load i8, i8* %arrayidx, align 1, !tbaa !8; //; // CASE 2:; // %sub = sub i32 0, %x; // %and = and i32 %sub, %x; // %mul = mul i32 %and, 72416175; // %shr = lshr i32 %mul, 26; // %idxprom = zext i32 %shr to i64; // %arrayidx = getelementptr inbounds [64 x i16], [64 x i16]* @ctz2.table,; // i64 0, i64 %idxprom; // %0 = load i16, i16* %arrayidx, align 2, !tbaa !8; //; // CASE 3:; // %sub = sub i32 0, %x; // %and = and i32 %sub, %x; // %mul = mul i32 %and, 81224991; // %shr = lshr i32 %mul, 27; // %idxprom = zext i32 %shr to i64; // %arrayidx = getelementptr inbounds [32 x i32], [32 x i32]* @ctz3.table,; // i64 0, i64 %idxprom; // %0 = load i32, i32* %arrayidx, align 4, !tbaa !8; //; // CASE 4:; // %sub = sub i64 0, %x; // %and = and i64 %sub, %x; // %mul = mul i64 %and, 283881067100198605; // %shr = lshr i64 %mul, 58; // %arrayidx = getelementptr inbounds [64 x i8], [64 x i8]* @table, i64 0,; // i64 %shr; // %0 = load i8, i8* %arrayidx, align 1, !tbaa !8; //; // All this can be lowered to @llvm.cttz.i32/64 intrinsic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/AggressiveInstCombine/AggressiveInstCombine.cpp:114,test,tests,114,interpreter/llvm-project/llvm/lib/Transforms/AggressiveInstCombine/AggressiveInstCombine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/AggressiveInstCombine/AggressiveInstCombine.cpp,1,['test'],['tests']
Testability,// Try to relax logical op to binary op.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp:16,log,logical,16,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,1,['log'],['logical']
Testability,"// Try to use EFLAGS from the instruction defining %SrcReg. Example:; // %eax = addl ...; // ... // EFLAGS not changed; // testl %eax, %eax // <-- can be removed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp:123,test,testl,123,interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,1,['test'],['testl']
Testability,"// Try to use EFLAGS produced by an instruction reading %SrcReg.; // Example:; // %eax = ...; // ...; // popcntl %eax; // ... // EFLAGS not changed; // testl %eax, %eax // <-- can be removed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp:152,test,testl,152,interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,1,['test'],['testl']
Testability,"// Try to widen AND, OR and XOR nodes to VT in order to remove casts around; // logical operations, like in the example below.; // or (and (truncate x, truncate y)),; // (xor (truncate z, build_vector (constants))); // Given a target type \p VT, we generate; // or (and x, y), (xor z, zext(build_vector (constants))); // given x, y and z are of type \p VT. We can do so, if operands are either; // truncates from VT types, the second operand is a vector of constants or can; // be recursively promoted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:80,log,logical,80,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['log'],['logical']
Testability,"// Turn at least two fcmps with constants into llvm.is.fpclass.; //; // If we can represent a combined value test with one class call, we can; // potentially eliminate 4-6 instructions. If we can represent a test with a; // single fcmp with fneg and fabs, that's likely a better canonical form.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:109,test,test,109,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,2,['test'],['test']
Testability,// Turn logical shift right of a constant into a unsigned divide.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:8,log,logical,8,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['log'],['logical']
Testability,"// Turn on staged cluster committing to logically append staged clusters with an explicit call.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_parallel_writer.cxx:40,log,logically,40,tree/ntuple/v7/test/ntuple_parallel_writer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_parallel_writer.cxx,1,['log'],['logically']
Testability,"// Turn this into a bit-test pattern using mask op + setcc:; // and (not (srl X, C)), 1 --> (and X, 1<<C) == 0; // and (srl (not X), C)), 1 --> (and X, 1<<C) == 0",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:24,test,test,24,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['test'],['test']
Testability,// Two is chosen to allow one negation and a logical combine.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp:45,log,logical,45,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,1,['log'],['logical']
Testability,"// Two logical shifts in the same direction:; // shl (shl X, C1), C2 --> shl X, C1 + C2; // lshr (lshr X, C1), C2 --> lshr X, C1 + C2",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp:7,log,logical,7,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp,2,['log'],['logical']
Testability,"// Two scalars (radians); // NOTE: These tests include the checks of the poundary effects",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/vecops/test/vecops_rvec.cxx:41,test,tests,41,math/vecops/test/vecops_rvec.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/vecops/test/vecops_rvec.cxx,1,['test'],['tests']
Testability,// Type assertions ('<type>expr') are not followed by whitespace. Other; // locations that should have whitespace following are identified by the; // above set of follower tokens.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp:8,assert,assertions,8,interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp,1,['assert'],['assertions']
Testability,"// Type information ""parsing"" is very primitive:; // - The `RawData` is copied to a buffer owned by `BTFParser` instance.; // - The buffer is treated as an array of `uint32_t` values, each value; // is swapped to use native endianness. This is possible, because; // according to BTF spec all buffer elements are structures comprised; // of `uint32_t` fields.; // - `BTFParser::Types` vector is filled with pointers to buffer; // elements, using `byteSize()` function to slice the buffer at type; // record boundaries.; // - If at some point a type definition with incorrect size (logical size; // exceeding buffer boundaries) is reached it is not added to the; // `BTFParser::Types` vector and the process stops.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/BTF/BTFParser.cpp:580,log,logical,580,interpreter/llvm-project/llvm/lib/DebugInfo/BTF/BTFParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/BTF/BTFParser.cpp,1,['log'],['logical']
Testability,"// Type of test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:11,test,test,11,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,3,['test'],['test']
Testability,"// Types to instantiate Chi2FCN: the gradient function interface handles the; // parameters, so its base typedef; // has to be always a double; the parametric function interface is templated; // to test both serial and vectorial; // cases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx:198,test,test,198,math/mathcore/test/testGradient.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx,1,['test'],['test']
Testability,"// Types used by Google Test to instantiate the tests.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx:24,Test,Test,24,math/mathcore/test/testGradient.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx,4,"['Test', 'test']","['Test', 'tests']"
Testability,"// UB = TestIsLessOp.getValue() ? max(UB(MinVal), UB(MaxVal)) :; // min(UB(MinVal), UB(MaxVal))",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:8,Test,TestIsLessOp,8,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['Test'],['TestIsLessOp']
Testability,"// UMin/UMax reduction over the vector with (potentially-extended); // i1 element type is actually a (potentially-extended); // logical `and`/`or` reduction over the original non-extended value:; // vector_reduce_u{min,max}(?ext(<n x i1>)); // -->; // ?ext(vector_reduce_{and,or}(<n x i1>))",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp:128,log,logical,128,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,1,['log'],['logical']
Testability,"// URL test; // TODO: The URL test is to support remote PoD servers (not managed by pod-remote)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:7,test,test,7,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,2,['test'],['test']
Testability,"// USe the sandbox",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLite.cxx:11,sandbox,sandbox,11,proof/proof/src/TProofLite.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLite.cxx,1,['sandbox'],['sandbox']
Testability,"// Under the hood, ON_CALL is expanded to a call to `InternalDefaultActionSetAt`; // to set a default action spec to the underlying function mocker, while; // EXPECT_CALL is expanded to a call to `InternalExpectedAt` to set a new; // expectation spec.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/GtestMatchers.cpp:141,mock,mocker,141,interpreter/llvm-project/clang/lib/ASTMatchers/GtestMatchers.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/GtestMatchers.cpp,1,['mock'],['mocker']
Testability,"// Under-approximation, but always available for assertions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h:49,assert,assertions,49,interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/ilist_node.h,1,['assert'],['assertions']
Testability,"// Unexpected message, just receive log file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TApplicationRemote.cxx:36,log,log,36,net/net/src/TApplicationRemote.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TApplicationRemote.cxx,2,['log'],['log']
Testability,// Unfold; // x & (-1 'logical shift' y); // To; // (x 'opposite logical shift' y) 'logical shift' y; // if it is better for performance.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:23,log,logical,23,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,3,['log'],['logical']
Testability,"// Unfortunately placeDebugValues incorrectly modifies RegionEnd, restore; // assert(R.End == RegionEnd);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNIterativeScheduler.cpp:78,assert,assert,78,interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNIterativeScheduler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNIterativeScheduler.cpp,1,['assert'],['assert']
Testability,"// Unfortunately, Objective-C does not enforce that overridden methods have; // covariant return types, so we can't assert that that never happens.; // Be safe and return UnknownVal().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineCallAndReturn.cpp:116,assert,assert,116,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineCallAndReturn.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineCallAndReturn.cpp,1,['assert'],['assert']
Testability,// Unique string pool instance used by all logical readers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVSupport.cpp:43,log,logical,43,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVSupport.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVSupport.cpp,1,['log'],['logical']
Testability,"// Unit test corresponding to the rf601 tutorial, but parametrized for the; // different evaluation backends.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooMinimizer.cxx:8,test,test,8,roofit/roofitcore/test/testRooMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooMinimizer.cxx,1,['test'],['test']
Testability,"// Unitialized max number of workers; ////////////////////////////////////////////////////////////////////////////////; /// Create a PROOF environment. Starting PROOF involves either connecting; /// to a master server, which in turn will start a set of slave servers, or; /// directly starting as master server (if master = """"). Masterurl is of; /// the form: [proof[s]://]host[:port]. Conffile is the name of the config; /// file describing the remote PROOF cluster (this argument alows you to; /// describe different cluster configurations).; /// The default is proof.conf. Confdir is the directory where the config; /// file and other PROOF related files are (like motd and noproof files).; /// Loglevel is the log level (default = 1). User specified custom config; /// files will be first looked for in $HOME/.conffile.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLite.cxx:698,Log,Loglevel,698,proof/proof/src/TProofLite.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLite.cxx,2,"['Log', 'log']","['Loglevel', 'log']"
Testability,"// Unless noted otherwise, an instruction is considered; // safe for the optimization. There are a large number of; // such true-SIMD instructions (all vector math, logical,; // select, compare, etc.). However, if the instruction; // mentions a partial vector register and does not have; // special handling defined, it is not swappable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCVSXSwapRemoval.cpp:165,log,logical,165,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCVSXSwapRemoval.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCVSXSwapRemoval.cpp,1,['log'],['logical']
Testability,"// Unless the macro indicates that the intended type is clearly not; // a pointer type, we should avoid warning on comparing pointers; // to zero literals in non-pedantic mode.; // FIXME: Introduce an AST matcher to implement the macro-related logic?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/NumberObjectConversionChecker.cpp:244,log,logic,244,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/NumberObjectConversionChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/NumberObjectConversionChecker.cpp,1,['log'],['logic']
Testability,"// Unlike in the TreeVectorStore case, we don't log the event; // number here because we don't know it anyway, because of; // RDataFrame slots and multithreading.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsDataHelper.cxx:48,log,log,48,roofit/roofitcore/src/RooAbsDataHelper.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsDataHelper.cxx,1,['log'],['log']
Testability,"// Unlike the other cases, we don't assert that we actually get a decl.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/DeclSpec.cpp:36,assert,assert,36,interpreter/llvm-project/clang/lib/Sema/DeclSpec.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/DeclSpec.cpp,1,['assert'],['assert']
Testability,"// Unrolling can do several things to introduce new loops into a loop nest:; // - Full unrolling clones child loops within the current loop but then; // removes the current loop making all of the children appear to be new; // sibling loops.; //; // When a new loop appears as a sibling loop after fully unrolling,; // its nesting structure has fundamentally changed and we want to revisit; // it to reflect that.; //; // When unrolling has removed the current loop, we need to tell the; // infrastructure that it is gone.; //; // Finally, we support a debugging/testing mode where we revisit child loops; // as well. These are not expected to require further optimizations as either; // they or the loop they were cloned from have been directly visited already.; // But the debugging mode allows us to check this assumption.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopUnrollPass.cpp:562,test,testing,562,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopUnrollPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopUnrollPass.cpp,1,['test'],['testing']
Testability,"// Unsorted to also test sorting the final list of globbed files.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/test/TChainParsing.cxx:20,test,test,20,tree/tree/test/TChainParsing.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/test/TChainParsing.cxx,1,['test'],['test']
Testability,// Update AssertingVH<> with new instruction so it doesn't assert.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DivRemPairs.cpp:10,Assert,AssertingVH,10,interpreter/llvm-project/llvm/lib/Transforms/Scalar/DivRemPairs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DivRemPairs.cpp,4,"['Assert', 'assert']","['AssertingVH', 'assert']"
Testability,"// Update BI to jump to NewBB instead of OldBB. Records updates to the; // dominator tree in DTUpdates. If \p MustUpdateOnce is true, assert that; // \p OldBB is exactly once in BI's successor list.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopInterchange.cpp:134,assert,assert,134,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopInterchange.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopInterchange.cpp,1,['assert'],['assert']
Testability,// Update a recorded entry with its logical scope and section index.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVBinaryReader.cpp:36,log,logical,36,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVBinaryReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVBinaryReader.cpp,1,['log'],['logical']
Testability,"// Update a recorded entry with its logical scope, only if the scope has; // ranges. That is the case when in DWARF there are 2 DIEs connected via; // the DW_AT_specification.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVBinaryReader.cpp:36,log,logical,36,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVBinaryReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVBinaryReader.cpp,1,['log'],['logical']
Testability,// Update a recorded symbol name with its logical scope.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVBinaryReader.cpp:42,log,logical,42,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVBinaryReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVBinaryReader.cpp,1,['log'],['logical']
Testability,"// Update counter in loop for unrolling.; // Use an incrementing IV. Pre-incr/post-incr is backedge/trip count.; // Subtle: TestVal can be 0 if we wrapped when computing the trip count,; // thus we must compare the post-increment (wrapping) value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUnrollRuntime.cpp:124,Test,TestVal,124,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUnrollRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUnrollRuntime.cpp,1,['Test'],['TestVal']
Testability,"// Update ids on the allocation nodes before calling the recursive; // update along caller edges, since this simplifies the logic during; // that traversal.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/MemProfContextDisambiguation.cpp:124,log,logic,124,interpreter/llvm-project/llvm/lib/Transforms/IPO/MemProfContextDisambiguation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/MemProfContextDisambiguation.cpp,1,['log'],['logic']
Testability,// Update the CFG and domtree. We chose to special case a couple of; // of common cases for code quality and test readability reasons.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp:109,test,test,109,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp,1,['test'],['test']
Testability,// Update the default block in case explicit case range tests have; // been chained on top.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:56,test,tests,56,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,1,['test'],['tests']
Testability,"// Update the linkage name to reflect the modified symbol name. It; // is necessary to update the linkage name in Swift, since the; // mangling changes for resume functions. It might also be the; // right thing to do in C++, but due to a limitation in LLVM's; // AsmPrinter we can only do this if the function doesn't have an; // abstract specification, since the DWARF backend expects the; // abstract specification to contain the linkage name and asserts; // that they are identical.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroSplit.cpp:449,assert,asserts,449,interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroSplit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroSplit.cpp,1,['assert'],['asserts']
Testability,// Update the trip count. Note that the remainder has already logic; // computing it in `UnrollRuntimeLoopRemainder`.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUnroll.cpp:62,log,logic,62,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUnroll.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUnroll.cpp,1,['log'],['logic']
Testability,"// Updates X with the intersection; // of the Constraints X and Y. Returns true if X has changed.; // Corresponds to Figure 4 from the paper; //; // Practical Dependence Testing; // Goff, Kennedy, Tseng; // PLDI 1991",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:170,Test,Testing,170,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,1,['Test'],['Testing']
Testability,// Use BT if the immediate can't be encoded in a TEST instruction or we; // are optimizing for size and the immedaite won't fit in a byte.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:49,TEST,TEST,49,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['TEST'],['TEST']
Testability,// Use BTST if the immediate can't be encoded in a TEST instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp:51,TEST,TEST,51,interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kISelLowering.cpp,1,['TEST'],['TEST']
Testability,"// Use C++ overloaded-operator rules if either operand has record; // type. The spec says to do this if either type is *overloadable*,; // but enum types can't declare subscript operators or conversion; // operators, so there's nothing interesting for overload resolution; // to do if there aren't any record types involved.; //; // ObjC pointers have their own subscripting logic that is not tied; // to overload resolution and so should not take this path.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:375,log,logic,375,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['log'],['logic']
Testability,"// Use InclusiveOr, the precedence just after '&&' to not parse the; // next arguments to the logical and.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp:94,log,logical,94,interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExpr.cpp,1,['log'],['logical']
Testability,"// Use LogicalOr (accept `or i1` as well as `select i1 Op0, true, Op1`)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFAdjustOpt.cpp:7,Log,LogicalOr,7,interpreter/llvm-project/llvm/lib/Target/BPF/BPFAdjustOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFAdjustOpt.cpp,1,['Log'],['LogicalOr']
Testability,"// Use TESTD/Q, extended vector to packed dword/qword.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:7,TEST,TESTD,7,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['TEST'],['TESTD']
Testability,// Use VECTOR TEST UNDER MASK for i128 operations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp:14,TEST,TEST,14,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,1,['TEST'],['TEST']
Testability,"// Use Wilks' theorem to translate -2 log lambda into a significance/p-value",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx:38,log,log,38,roofit/roostats/src/ProfileLikelihoodCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx,1,['log'],['log']
Testability,// Use XOR (plus OR) and PTEST after SSE4.1 for 128/256-bit operands.; // Use PCMPNEQ (plus OR) and KORTEST for 512-bit operands.; // Otherwise use PCMPEQ (plus AND) and mask testing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:175,test,testing,175,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['test'],['testing']
Testability,// Use an explicit peel count that has been specified for testing. In this; // case it's not permitted to also specify an explicit unroll count.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopUnrollPass.cpp:58,test,testing,58,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopUnrollPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopUnrollPass.cpp,1,['test'],['testing']
Testability,"// Use assert, so that this line (slow because of the TClassEdit) is completely; // removed in optimized code.; //assert(TestBit(kLoading) || !TClassEdit::IsSTLCont(fName) || fCollectionProxy || 0 == ""The TClass for the STL collection has no collection proxy!"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:7,assert,assert,7,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,3,"['Test', 'assert']","['TestBit', 'assert']"
Testability,// Use custom logic if this should be the pseudo-object subscript; // expression.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:14,log,logic,14,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['log'],['logic']
Testability,// Use expand's logic which is used for reusing a previous Value in; // ExprValueMap. Note that we don't currently model the cost of; // needing to drop poison generating flags on the instruction if we; // want to reuse it. We effectively assume that has zero cost.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp:16,log,logic,16,interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp,1,['log'],['logic']
Testability,// Use fake syntax because it is for testing and debugging purpose only.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/AttrImpl.cpp:37,test,testing,37,interpreter/llvm-project/clang/lib/AST/AttrImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/AttrImpl.cpp,1,['test'],['testing']
Testability,"// Use for verification. Its a big table. Its difficult to go from Imm ->; // logic ops, but easy to verify that a set of logic ops is correct. We track; // the logic ops through the second value in the pair. At the end it should; // equal Imm.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp:78,log,logic,78,interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp,3,['log'],['logic']
Testability,// Use hasNUsesOrMore to bound the cost of this assertion for complex CFGs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/BasicBlock.cpp:48,assert,assertion,48,interpreter/llvm-project/llvm/lib/IR/BasicBlock.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/BasicBlock.cpp,1,['assert'],['assertion']
Testability,// Use logical and to avoid propagating poison from later conditions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/ControlHeightReduction.cpp:7,log,logical,7,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/ControlHeightReduction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/ControlHeightReduction.cpp,1,['log'],['logical']
Testability,"// Use test on entries rather than bytes; // subsequently in run",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:7,test,test,7,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['test'],['test']
Testability,// Use the base test vector to build the list of all possible test vectors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:16,test,test,16,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,2,['test'],['test']
Testability,"// Use the collected exceptions to build up a detailed error log.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Utility.cxx:61,log,log,61,bindings/pyroot/cppyy/CPyCppyy/src/Utility.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Utility.cxx,1,['log'],['log']
Testability,"// Use the default in the sandbox",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLite.cxx:26,sandbox,sandbox,26,proof/proof/src/TProofLite.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLite.cxx,2,['sandbox'],['sandbox']
Testability,// Use the generic unfold logic now that we know we're dealing with; // expected instructions.; // FIXME: We don't have test coverage for all of these!,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp:26,log,logic,26,interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,2,"['log', 'test']","['logic', 'test']"
Testability,"// Use the previous operand to get the vXi64 VT. The result might be a mask; // VT for compares. Using the previous operand assumes that the previous; // operand will never have a smaller element size than a scalar operand and; // that a widening operation never uses SEW=64.; // NOTE: If this fails the below assert, we can probably just find the; // element count from any operand or result and use it to construct the VT.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:310,assert,assert,310,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['assert'],['assert']
Testability,"// Use this syntax to avoid the redudant tests in substr.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/LookupHelper.cpp:41,test,tests,41,interpreter/cling/lib/Interpreter/LookupHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/LookupHelper.cpp,1,['test'],['tests']
Testability,// Used by target parser tests,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/AArch64TargetParser.h:25,test,tests,25,interpreter/llvm-project/llvm/include/llvm/TargetParser/AArch64TargetParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/AArch64TargetParser.h,1,['test'],['tests']
Testability,// Used for pseudo-indexing an array of type records. An array of such records; // sorted by TypeIndex can allow log(N) lookups even though such a type record; // stream does not provide random access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeIndex.h:113,log,log,113,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeIndex.h,1,['log'],['log']
Testability,"// Used for testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/Tetris.cxx:12,test,testing,12,test/Tetris.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Tetris.cxx,1,['test'],['testing']
Testability,// Used for testing purpose only.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h:12,test,testing,12,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProfReader.h,2,['test'],['testing']
Testability,// Used only in asserts.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ASanStackFrameLayout.cpp:16,assert,asserts,16,interpreter/llvm-project/llvm/lib/Transforms/Utils/ASanStackFrameLayout.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ASanStackFrameLayout.cpp,1,['assert'],['asserts']
Testability,"// Used to eliminate datetime and PID from workdir to obtain log file name",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:61,log,log,61,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['log'],['log']
Testability,"// Used to test the dependence analyzer.; // Looks through the function, noting instructions that may access memory.; // Calls depends() on every possible pair and prints out the result.; // Ignores all other instructions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:11,test,test,11,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,1,['test'],['test']
Testability,// Useful for testing purposes. Prints vs{31-63} as v{0-31} respectively.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/MCTargetDesc/PPCInstPrinter.cpp:14,test,testing,14,interpreter/llvm-project/llvm/lib/Target/PowerPC/MCTargetDesc/PPCInstPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/MCTargetDesc/PPCInstPrinter.cpp,1,['test'],['testing']
Testability,"// Useful if you want to keep a test file after the test has finished running; // for debugging purposes. Should only be used locally and never pushed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_test.hxx:32,test,test,32,tree/ntuple/v7/test/ntuple_test.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_test.hxx,2,['test'],['test']
Testability,// User level interrupts - testui,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h:27,test,testui,27,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,1,['test'],['testui']
Testability,// Users of this node should have already been instruction selected; // FIXME: Can we turn that into an assert?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp:104,assert,assert,104,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,1,['assert'],['assert']
Testability,"// Using Profile Bitmap from runtime, mark the executed test vectors.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:56,test,test,56,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,1,['test'],['test']
Testability,"// Using a magic EPSILON value (makes sense for the existing tests).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNet.h:61,test,tests,61,tmva/tmva/test/DNN/CNN/TestConvNet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNet.h,1,['test'],['tests']
Testability,"// V is a predecessor of W. eval() returns V if V < W, otherwise the minimum; // of sdom(U), where U > W and there is a virtual forest path from U to V. The; // virtual forest consists of linked edges of processed vertices.; //; // We can follow Parent pointers (virtual forest edges) to determine the; // ancestor U with minimum sdom(U). But it is slow and thus we employ the path; // compression technique to speed up to O(m*log(n)). Theoretically the virtual; // forest can be organized as balanced trees to achieve almost linear; // O(m*alpha(m,n)) running time. But it requires two auxiliary arrays (Size; // and Child) and is unlikely to be faster than the simple implementation.; //; // For each vertex V, its Label points to the vertex with the minimal sdom(U); // (Semi) in its path from V (included) to NodeToInfo[V].Parent (excluded).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:427,log,log,427,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,1,['log'],['log']
Testability,"// VDT stops computing exponentials below exp(-708) = 3.3075530e-308; // Since this test runs Gaussians far from their mean, we need to be a bit more forgiving",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/testAddPdf.cxx:84,test,test,84,roofit/roofit/test/vectorisedPDFs/testAddPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/testAddPdf.cxx,1,['test'],['test']
Testability,// VECTOR UNPACK LOGICAL HIGH,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp:17,LOG,LOGICAL,17,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,2,['LOG'],['LOGICAL']
Testability,// VECTOR UNPACK LOGICAL LOW,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp:17,LOG,LOGICAL,17,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,2,['LOG'],['LOGICAL']
Testability,"// VPDPBUSD(<16 x i32>C, <16 x i8>A, <16 x i8>B). For each dst element; // C[0] = C[0] + A[0]B[0] + A[1]B[1] + A[2]B[2] + A[3]B[3].; // The src A, B element type is i8, but the dst C element type is i32.; // When we calculate the reduce stage, we use src vector type vXi8 for it; // so we need logbias 2 to avoid extra 2 stages.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:294,log,logbias,294,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['log'],['logbias']
Testability,// VPPERM Operation; // Bits[4:0] - Byte Index (0 - 31); // Bits[7:5] - Permute Operation; //; // Permute Operation:; // 0 - Source byte (no logical operation).; // 1 - Invert source byte.; // 2 - Bit reverse of source byte.; // 3 - Bit reverse of inverted source byte.; // 4 - 00h (zero - fill).; // 5 - FFh (ones - fill).; // 6 - Most significant bit of source byte replicated in all bit positions.; // 7 - Invert most significant bit of source byte and replicate in all bit positions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86ShuffleDecode.cpp:141,log,logical,141,interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86ShuffleDecode.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86ShuffleDecode.cpp,1,['log'],['logical']
Testability,// VPPERM Operation; // Bits[4:0] - Byte Index (0 - 31); // Bits[7:5] - Permute Operation; //; // Permute Operation:; // 0 - Source byte (no logical operation).; // 1 - Invert source byte.; // 2 - Bit reverse of source byte.; // 3 - Bit reverse of inverted source byte.; // 4 - 00h (zero - fill).; // 5 - FFh (ones - fill).; // 6 - Most significant bit of source byte replicated in all bit positions.; // 7 - Invert most significant bit of source byte and replicate in all bit; // positions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ShuffleDecodeConstantPool.cpp:141,log,logical,141,interpreter/llvm-project/llvm/lib/Target/X86/X86ShuffleDecodeConstantPool.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ShuffleDecodeConstantPool.cpp,1,['log'],['logical']
Testability,// Values that will be used to determine if result of logical; // operator is always true/false,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp:54,log,logical,54,interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,1,['log'],['logical']
Testability,// Variable is used in assert only.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineCombiner.cpp:23,assert,assert,23,interpreter/llvm-project/llvm/lib/CodeGen/MachineCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineCombiner.cpp,1,['assert'],['assert']
Testability,// Variables with external linkage are analyzed in FinalizeDeclaratorGroup.; // FIXME: The test for external storage here seems wrong? We still; // need to check for mismatches.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:91,test,test,91,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['test'],['test']
Testability,// Vector logical not returns the signed variant of the operand type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:10,log,logical,10,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,2,['log'],['logical']
Testability,"// Vector of elements (types, scopes and symbols).; // It is the union of (*Types, *Symbols and *Scopes) to be used for; // the following reasons:; // - Preserve the order the logical elements are read in.; // - To have a single container with all the logical elements, when; // the traversal does not require any specific element kind.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:176,log,logical,176,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,2,['log'],['logical']
Testability,"// Vector of pointers to all known types, index in this vector; // equals to logical type BTF id.; // Pointers point to memory owned by `TypesBuffer`; // (except pointer at index 0, which is statically allocated).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFParser.h:77,log,logical,77,interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFParser.h,1,['log'],['logical']
Testability,// Vector test bits.; // Vector shift by vector,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.h:10,test,test,10,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.h,1,['test'],['test']
Testability,"// Verify Test set",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx:10,Test,Test,10,tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/crossvalidation/TestCrossValidationSplitting.cxx,1,['Test'],['Test']
Testability,"// Verify test is valid and has a stream:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:10,test,test,10,tmva/tmva/test/stressTMVA.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx,1,['test'],['test']
Testability,"// Verify that a call site info is at valid state. This assertion should; // be triggered during the implementation of support for the; // call site info of a new architecture. If the assertion is triggered,; // back trace will tell where to insert a call to updateCallSiteInfo().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineFunction.cpp:56,assert,assertion,56,interpreter/llvm-project/llvm/lib/CodeGen/MachineFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineFunction.cpp,2,['assert'],['assertion']
Testability,"// Verify that each inlinable callsite of a debug-info-bearing function in a; // debug-info-bearing function has a debug location attached to it. Failure to; // do so causes assertion failures when the inliner sets up inline scope info; // (Interposable functions are not inlinable, neither are functions without; // definitions.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp:174,assert,assertion,174,interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,1,['assert'],['assertion']
Testability,"// Verify that fitting an empty RooDataSet or a RooDataHist with only empty; // bins does not do anything to the parameters. The point of this test is to; // validate that the new CPU backend behaves the same as the legacy evaluation; // backend for empty data objects.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:143,test,test,143,roofit/roofitcore/test/testTestStatistics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx,1,['test'],['test']
Testability,"// Verify that the combination of GenTypes in a signature is supported.; // To simplify the logic for creating overloads in SemaLookup, only allow; // a signature to contain different GenTypes if these GenTypes represent; // the same number of actual scalar or vector types.; //; // Exit with a fatal error if an unsupported construct is encountered.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp:92,log,logic,92,interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangOpenCLBuiltinEmitter.cpp,1,['log'],['logic']
Testability,"// Verify the that the memory equivalence table makes sense relative to the; // congruence classes. Note that this checking is not perfect, and is currently; // subject to very rare false negatives. It is only useful for; // testing/debugging.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp:225,test,testing,225,interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/NewGVN.cpp,1,['test'],['testing']
Testability,// Verify there are no duplicate function argument debug info entries.; // These will cause hard-to-debug assertions in the DWARF backend.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp:106,assert,assertions,106,interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,1,['assert'],['assertions']
Testability,// Visit implicit @synthesize property implementations first as their; // location is reported at the name of the @implementation block. This; // serves no purpose other than to simplify the FileCheck-based tests.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Index/IndexDecl.cpp:207,test,tests,207,interpreter/llvm-project/clang/lib/Index/IndexDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Index/IndexDecl.cpp,1,['test'],['tests']
Testability,// WARNING: this logic must be kept in sync with EliminateDuplicatePHINodes()!,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Instruction.cpp:17,log,logic,17,interpreter/llvm-project/llvm/lib/IR/Instruction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Instruction.cpp,1,['log'],['logic']
Testability,// WARNING: this logic must be kept in sync with; // Instruction::isIdenticalToWhenDefined()!,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp:17,log,logic,17,interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp,1,['log'],['logic']
Testability,"// Walk the Record's BranchRegions (representing Conditions) in order to:; // - Hash the condition based on its corresponding ID. This will be used to; // calculate the test vectors.; // - Keep a map of the condition's ordinal position (1, 2, 3, 4) to its; // actual ID. This will be used to visualize the conditions in the; // correct order.; // - Keep track of the condition source location. This will be used to; // visualize where the condition is.; // - Record whether the condition is constant folded so that we exclude it; // from being measured.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:169,test,test,169,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,1,['test'],['test']
Testability,"// Walk the block backwards, move PSEUDO_PROBE before the first real; // instruction to fix out-of-order probes. There is a problem with probes; // as the terminator of the block. During the offline counts processing,; // the samples collected on the first physical instruction following a; // probe will be counted towards the probe. This logically equals to; // treating the instruction next to a probe as if it is from the same; // block of the probe. This is accurate most of the time unless the; // instruction can be reached from multiple flows, which means it actually; // starts a new block. Samples collected on such probes may cause; // imprecision with the counts inference algorithm. Fortunately, if; // there are still other native instructions preceding the probe we can; // use them as a place holder to collect samples for the probe.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PseudoProbeInserter.cpp:340,log,logically,340,interpreter/llvm-project/llvm/lib/CodeGen/PseudoProbeInserter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PseudoProbeInserter.cpp,1,['log'],['logically']
Testability,"// Warn about arg1 || arg2 && arg3, as GCC 4.3+ does.; // We don't warn for 'assert(a || b && ""bad"")' since this is safe.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:77,assert,assert,77,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['assert'],['assert']
Testability,"// Warn on string literal to bool. Checks for string literals in logical; // and expressions, for instance, assert(0 && ""error here""), are; // prevented by a check in AnalyzeImplicitConversions().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp:65,log,logical,65,interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,2,"['assert', 'log']","['assert', 'logical']"
Testability,"// We *allow* stripped template names / ObjectiveC names as extra entries into; // the table, but we don't *require* them to pass the completeness test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFVerifier.cpp:147,test,test,147,interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFVerifier.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFVerifier.cpp,1,['test'],['test']
Testability,// We *must* use the full CG function call building logic here because the; // complex type has special ABI handling. We also should not forget about; // special calling convention which may be used for compiler builtins.; // We create a function qualified type to state that this call does not have; // any exceptions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp:52,log,logic,52,interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprComplex.cpp,1,['log'],['logic']
Testability,"// We already did this testing for this class.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TCheckHashRecursiveRemoveConsistency.h:23,test,testing,23,core/meta/src/TCheckHashRecursiveRemoveConsistency.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TCheckHashRecursiveRemoveConsistency.h,1,['test'],['testing']
Testability,// We also want to be able to mask out the preserved bits for asserts.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerEmbeddedInt.h:62,assert,asserts,62,interpreter/llvm-project/llvm/include/llvm/ADT/PointerEmbeddedInt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/PointerEmbeddedInt.h,1,['assert'],['asserts']
Testability,"// We always log the output; in particular, if we're not evaluating, we; // don't have an output spec json file. That's why we handle the; // 'normal' output separately.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MLRegAllocEvictAdvisor.cpp:13,log,log,13,interpreter/llvm-project/llvm/lib/CodeGen/MLRegAllocEvictAdvisor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MLRegAllocEvictAdvisor.cpp,2,['log'],['log']
Testability,"// We are *not* a top-level branch and we are *not* a pointer to an STL container.; // Case of an embedded STL container.; // Note: We test for the kObject and kAny types to support; // the (unwise) choice of inheriting from an STL container.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx:135,test,test,135,tree/tree/src/TBranchElement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx,2,['test'],['test']
Testability,"// We are about to create a new guaranteed use for RHS2 which might not exist; // before (if it was a non-taken input of logical and/or instruction). If it; // was poison, we need to freeze it. Note that no new use for LHS and RHS1 are; // introduced, so they don't need this.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LICM.cpp:121,log,logical,121,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LICM.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LICM.cpp,1,['log'],['logical']
Testability,"// We are applying the transformation; // Invoke instructions are special in that their result value is not; // available along their unwind edge. The code below tests to see whether; // DomBB dominates the value, so adjust DomBB to the normal destination; // block, which is effectively where the value is first usable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LCSSA.cpp:162,test,tests,162,interpreter/llvm-project/llvm/lib/Transforms/Utils/LCSSA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LCSSA.cpp,1,['test'],['tests']
Testability,"// We are done if not dataset test possible",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:30,test,test,30,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['test'],['test']
Testability,"// We are going to split every outgoing edges.; // Check that this is possible.; // FIXME: The machine representation is currently broken; // since it also several terminators in one basic block.; // Because of that we would technically need a way to get; // the targets of just one terminator to know which edges; // we have to split.; // Assert that we do not hit the ill-formed representation.; // If there are other terminators before that one, some of; // the outgoing edges may not be dominated by this definition.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/RegBankSelect.cpp:340,Assert,Assert,340,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/RegBankSelect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/RegBankSelect.cpp,1,['Assert'],['Assert']
Testability,"// We are going to test validity during the packetizer initialization",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TPacketizerMulti.cxx:19,test,test,19,proof/proofplayer/src/TPacketizerMulti.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TPacketizerMulti.cxx,3,['test'],['test']
Testability,"// We are looking for a pattern of, and finding the minimal acceptable cost:; // reduce(mul(ext(A), ext(B))) or; // reduce(mul(A, B)) or; // reduce(ext(A)) or; // reduce(A).; // The basic idea is that we walk down the tree to do that, finding the root; // reduction instruction in InLoopReductionImmediateChains. From there we find; // the pattern of mul/ext and test the cost of the entire pattern vs the cost; // of the components. If the reduction cost is lower then we return it for the; // reduction instruction and 0 for the other instructions in the pattern. If; // it is not we return an invalid cost specifying the orignal cost method; // should be used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:363,test,test,363,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['test'],['test']
Testability,// We aren't supposed to apply this logic if there's an '&' involved.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:36,log,logic,36,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['log'],['logic']
Testability,// We assert at the end of the function since IP might point to an; // instruction with different dominance properties than a cast; // (an invoke for example) and not dominate BIP (but the cast does).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp:6,assert,assert,6,interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp,1,['assert'],['assert']
Testability,"// We assume instructions do not raise floating-point exceptions by default,; // and only those marked explicitly may do so. We could choose to represent; // this via a positive ""FPExcept"" flags like on the MI level, but having a; // negative ""NoFPExcept"" flag here makes the flag intersection logic more; // straightforward.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:294,log,logic,294,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,1,['log'],['logic']
Testability,"// We assume that objects with a constant base (e.g. a global) can't move; // and don't need to be reported to the collector because they are always; // live. Besides global references, all kinds of constants (e.g. undef,; // constant expressions, null pointers) can be introduced by the inliner or; // the optimizer, especially on dynamically dead paths.; // Here we treat all of them as having single null base. By doing this we; // trying to avoid problems reporting various conflicts in a form of; // ""phi (const1, const2)"" or ""phi (const, regular gc ptr)"".; // See constant.ll file for relevant test cases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp:600,test,test,600,interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,1,['test'],['test']
Testability,"// We can build the appropriate control immediate by performing the logic; // operation we're matching using these constants for A, B, and C.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:68,log,logic,68,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,1,['log'],['logic']
Testability,// We can decode 'whole byte' logical bit shifts as shuffles.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:30,log,logical,30,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['log'],['logical']
Testability,"// We can handle STXSDX and STXSSPX similarly to LXSDX and LXSSPX,; // by adding special handling for narrowing copies as well as; // widening ones. However, I've experimented with this, and in; // practice we currently do not appear to use STXSDX fed by; // a narrowing copy from a full vector register. Since I can't; // generate any useful test cases, I've left this alone for now.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCVSXSwapRemoval.cpp:343,test,test,343,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCVSXSwapRemoval.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCVSXSwapRemoval.cpp,1,['test'],['test']
Testability,// We can only fold the load if it is from a constant global with definitive; // initializer. Skip expensive logic if this is not the case.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:109,log,logic,109,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,2,['log'],['logic']
Testability,"// We can only remove test when AND32ri or AND64ri32 whose imm can fit 16bit; // size, others 32/64 bit ops would test higher bits which test16rr don't; // want to.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp:22,test,test,22,interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,2,['test'],['test']
Testability,// We can only use 1 << X without more sophisticated analysis. C << X where; // C is a power of 2 but not 1 can result in zero which cannot be translated; // to bittest. Likewise any C >> X (either arith or logical) can be zero.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:207,log,logical,207,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['log'],['logical']
Testability,"// We can sometimes end up with duplicate poll locations. This happens if; // a single loop is visited more than once. The fact this happens seems; // wrong, but it does happen for the split-backedge.ll test case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/PlaceSafepoints.cpp:203,test,test,203,interpreter/llvm-project/llvm/lib/Transforms/Scalar/PlaceSafepoints.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/PlaceSafepoints.cpp,1,['test'],['test']
Testability,"// We can test against either of the addition operands.; // x <= x+y ? x+y : ~0 --> uaddsat x, y; // x+y >= x ? x+y : ~0 --> uaddsat x, y",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:10,test,test,10,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['test'],['test']
Testability,"// We can treat logical like bitwise here, because both operands are used on; // the LHS, and as such poison from both will propagate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:16,log,logical,16,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,1,['log'],['logical']
Testability,// We can use ANDI+SEQZ/SNEZ as a bit test. Y contains the bit position.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:38,test,test,38,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['test'],['test']
Testability,"// We can use ANDI+SLTIU as a bit test. Y contains the bit position.; // For MIPSR2 or later, we may be able to use the `ext` instruction or its'; // double-word variants.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp:34,test,test,34,interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp,1,['test'],['test']
Testability,"// We can't actually test that if we still have a placeholder,; // though. Fortunately, none of the exceptions we see in that; // code below are valid when the LHS is an overload set. Note; // that an overload set can be dependently-typed, but it never; // instantiates to having an overloadable type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:21,test,test,21,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['test'],['test']
Testability,"// We can't extract the stride if the arithmetic is done at a different size; // than the pointer type. Adding the stride later may not wrap correctly.; // Technically we could handle wider indices, but I don't expect that in; // practice. Handle one special case here - constants. This simplifies; // writing test cases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVGatherScatterLowering.cpp:310,test,test,310,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVGatherScatterLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVGatherScatterLowering.cpp,1,['test'],['test']
Testability,// We can't handle only some out of range values with generic logical shifts.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp:62,log,logical,62,interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp,1,['log'],['logical']
Testability,"// We can't represent values of this type, but we still need to set a value; // to record that the region has been initialized.; // If this assertion ever fires, a new case should be added above -- we; // should know how to default-initialize any value we can symbolicate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp:140,assert,assertion,140,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp,1,['assert'],['assertion']
Testability,"// We can't use ""assert.h"" because it is defined in the resource dir, too.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/CIFactory.cpp:17,assert,assert,17,interpreter/cling/lib/Interpreter/CIFactory.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/CIFactory.cpp,1,['assert'],['assert']
Testability,"// We cannot EXPECT_EQ in this test, because we compare actually different; // calculations. The multiple additions and FMA operations involved in the; // calculation of the multiple parts introduces different rounding errors; // on the CPU level than the single calculation over all events at once.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx:31,test,test,31,roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx,1,['test'],['test']
Testability,// We cannot have the case of neither inference nor logging.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DevelopmentModeInlineAdvisor.cpp:52,log,logging,52,interpreter/llvm-project/llvm/lib/Analysis/DevelopmentModeInlineAdvisor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DevelopmentModeInlineAdvisor.cpp,1,['log'],['logging']
Testability,// We cannot optimize if there are multiple case labels jumping to; // this block. This check may get expensive when there are many; // case labels so we test for it last.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:154,test,test,154,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,1,['test'],['test']
Testability,// We cannot swap the operands of logical and/or.; // TODO: Can we swap the operands by inserting a freeze?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp:34,log,logical,34,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,1,['log'],['logical']
Testability,// We care about logical not only if we care about comparisons.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CalledOnceCheck.cpp:17,log,logical,17,interpreter/llvm-project/clang/lib/Analysis/CalledOnceCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CalledOnceCheck.cpp,1,['log'],['logical']
Testability,// We check the preconditions for the function prior to calling this to avoid; // the cost of building up a reversible post-order list. We assert them here; // to make sure none of the invariants this relies on were violated.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionAttrs.cpp:139,assert,assert,139,interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionAttrs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionAttrs.cpp,1,['assert'],['assert']
Testability,"// We could add the block length, but that would take; // a bit of work and not add a lot of uniqueness; // to the hash in some way we could test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.cpp:141,test,test,141,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DIEHash.cpp,1,['test'],['test']
Testability,"// We could copy the data only if we need to apply a relocation to it. After; // testing, it seems there is no performance downside to doing the copy; // unconditionally, and it makes the code simpler.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Classic/DWARFLinker.cpp:81,test,testing,81,interpreter/llvm-project/llvm/lib/DWARFLinker/Classic/DWARFLinker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Classic/DWARFLinker.cpp,2,['test'],['testing']
Testability,"// We could explicitly handle all the types of the MachineOperand,; // here but we can just return a common number until we find a; // compelling test case where this is bad. The only side effect here; // is contributing to a hash collision but there's enough information; // (Opcodes,other registers etc) that this will likely not be a problem.; // TODO: Handle the following Index/ID/Predicate cases. They can; // be hashed on in a stable manner.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MIRVRegNamerUtils.cpp:146,test,test,146,interpreter/llvm-project/llvm/lib/CodeGen/MIRVRegNamerUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MIRVRegNamerUtils.cpp,1,['test'],['test']
Testability,"// We could try to replicate the logic from; // ASTContext::getTypeAlignIfKnown, but nothing uses the alignment if the; // type is incomplete, so it's impossible to test. We could try to reuse; // getTypeAlignIfKnown, but that doesn't return the information we need; // to set BaseInfo. So just ignore the possibility that the alignment is; // greater than one.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:33,log,logic,33,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,2,"['log', 'test']","['logic', 'test']"
Testability,"// We currently don't do any PHI insertion and so we require that the; // test basic block dominates all of the use basic blocks. Further, we; // can't have a cycle from the test block back to itself as that would; // create a cycle requiring a PHI to break it.; //; // We could in theory do PHI insertion here if it becomes useful by; // just taking undef values in along every edge that we don't trace; // this EFLAGS copy along. This isn't as bad as fully general PHI; // insertion, but still seems like a great deal of complexity.; //; // Because it is theoretically possible that some earlier MI pass or; // other lowering transformation could induce this to happen, we do; // a hard check even in non-debug builds here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp:74,test,test,74,interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp,2,['test'],['test']
Testability,// We do allow diagnostics from unit test/example dependency checkers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/CheckerRegistry.cpp:37,test,test,37,interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/CheckerRegistry.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/CheckerRegistry.cpp,1,['test'],['test']
Testability,// We do not allow more than one in-class declaration of a function. This is; // because AST clients like VTableBuilder asserts on this. VTableBuilder; // assumes there is only one in-class declaration. Building a redecl; // chain would result in more than one in-class declaration for; // overrides (even if they are part of the same redecl chain inside the; // derived class.),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTImporter.cpp:120,assert,asserts,120,interpreter/llvm-project/clang/lib/AST/ASTImporter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTImporter.cpp,1,['assert'],['asserts']
Testability,"// We do not need to (and in fact, cannot) convert possibly throwing calls; // to @llvm.experimental_deoptimize (resp. @llvm.experimental.guard) into; // invokes. The caller's ""segment"" of the deoptimization continuation; // attached to the newly inlined @llvm.experimental_deoptimize; // (resp. @llvm.experimental.guard) call should contain the exception; // handling logic, if any.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp:369,log,logic,369,interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp,1,['log'],['logic']
Testability,// We do not support targeting NVPTX/AMDGCN for host compilation. Throw; // an error and abort pipeline construction early so we don't trip; // asserts that assume device-side compilation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:144,assert,asserts,144,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,1,['assert'],['asserts']
Testability,"// We do not use AlignInBits in hashing function here on purpose:; // in most cases this param for local variable is zero (for function param; // it is always zero). This leads to lots of hash collisions and errors on; // cases with lots of similar variables.; // clang/test/CodeGen/debug-info-257-args.c is an example of this problem,; // generated IR is random for each run and test fails with Align included.; // TODO: make hashing work fine with such situations",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/LLVMContextImpl.h:270,test,test,270,interpreter/llvm-project/llvm/lib/IR/LLVMContextImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/LLVMContextImpl.h,4,['test'],['test']
Testability,// We don't call initialize here since there is no raw profile to read. The; // test should pass in the raw profile as structured data.; // If there is an error here then the mock symbolizer has not been; // initialized properly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h:80,test,test,80,interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/RawMemProfReader.h,2,"['mock', 'test']","['mock', 'test']"
Testability,"// We don't check for an invalid 'self' in an obj-c message expression to cut; // down false positives where logging functions get information from self; // (like its class) or doing ""invalidation"" on self when the initialization; // fails.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ObjCSelfInitChecker.cpp:109,log,logging,109,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ObjCSelfInitChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ObjCSelfInitChecker.cpp,1,['log'],['logging']
Testability,"// We don't expect EH pads to ever be reached via an indirect branch. If; // this is desired for some reason, we could simply skip them here rather; // than asserting.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp:157,assert,asserting,157,interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,1,['assert'],['asserting']
Testability,"// We don't handle undef/constant-fold cases below, as they should have; // already been taken care of (e.g. and of 0, test of undefined shifted bits,; // etc.); // (tbz (trunc x), b) -> (tbz x, b); // This case is just here to enable more of the below cases to be caught.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:119,test,test,119,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['test'],['test']
Testability,"// We don't have -tailcallopt, so we're allowed to change the ABI (sibcall).; // Try to find cases where we can do that.; // I want anyone implementing a new calling convention to think long and hard; // about this assert.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64CallLowering.cpp:215,assert,assert,215,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64CallLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64CallLowering.cpp,1,['assert'],['assert']
Testability,"// We don't need to emit the original name if we are writing the index for; // distributed backends (in which case ModuleToSummariesForIndex is; // non-null). The original name is only needed during the thin link, since; // for SamplePGO the indirect call targets for local functions have; // have the original name annotated in profile.; // Continue to emit it when writing out the entire combined index, which is; // used in testing the thin link via llvm-lto.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp:427,test,testing,427,interpreter/llvm-project/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Writer/BitcodeWriter.cpp,1,['test'],['testing']
Testability,// We don't want to copy the linkage of the vtable exactly because we still; // want the stub/proxy to be emitted for properly calculating the offset.; // Examples where there would be no symbol emitted are available_externally; // and private linkages.; //; // `internal` linkage results in STB_LOCAL Elf binding while still manifesting a; // local symbol.; //; // `linkonce_odr` linkage results in a STB_DEFAULT Elf binding but also allows for; // the rtti_proxy to be transparently replaced with a GOTPCREL reloc by a; // target that supports this replacement.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp:89,stub,stub,89,interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp,1,['stub'],['stub']
Testability,"// We don't want to just add the cloned loop blocks based on how we; // discovered them. The original order of blocks was carefully built in; // a way that doesn't rely on predecessor ordering. Rather than re-invent; // that logic, we just re-walk the original blocks (and those of the child; // loops) and filter them as we add them into the cloned loop.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp:225,log,logic,225,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,1,['log'],['logic']
Testability,// We don't want to report on short-curcuit logical operations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CalledOnceCheck.cpp:44,log,logical,44,interpreter/llvm-project/clang/lib/Analysis/CalledOnceCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CalledOnceCheck.cpp,1,['log'],['logical']
Testability,"// We expect the number of assumptions to be small, so in an asserts build; // check that we don't accumulate duplicates and that all assumptions point; // to the same function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/AssumptionCache.cpp:61,assert,asserts,61,interpreter/llvm-project/llvm/lib/Analysis/AssumptionCache.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/AssumptionCache.cpp,1,['assert'],['asserts']
Testability,"// We expect to be the only consumer of the two temporary statement maps,; // assert that they are empty.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriterStmt.cpp:78,assert,assert,78,interpreter/llvm-project/clang/lib/Serialization/ASTWriterStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriterStmt.cpp,1,['assert'],['assert']
Testability,// We explicitly allow unknown phis as long as they are already used by; // the loop exit test. This is legal since performing LFTR could not; // increase the number of undef users.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp:90,test,test,90,interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,1,['test'],['test']
Testability,"// We found a viable location, hoist our test position to it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp:41,test,test,41,interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp,1,['test'],['test']
Testability,"// We have AssertionResult(bool &, ...)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GTestChecker.cpp:11,Assert,AssertionResult,11,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GTestChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GTestChecker.cpp,1,['Assert'],['AssertionResult']
Testability,// We have AssertionResult(bool),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GTestChecker.cpp:11,Assert,AssertionResult,11,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GTestChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GTestChecker.cpp,1,['Assert'],['AssertionResult']
Testability,"// We have a SELECT_CCMASK or BR_CCMASK comparing the condition code; // set by the CCReg instruction using the CCValid / CCMask masks,; // If the CCReg instruction is itself a ICMP testing the condition; // code set by some other instruction, see whether we can directly; // use that condition code.; // Verify that we have an ICMP against some constant.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp:182,test,testing,182,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,1,['test'],['testing']
Testability,"// We have a class type.; // Note: This cannot happen due to the rd->IsObject() test above.; // FIXME: Put an error message here just in case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:80,test,test,80,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['test'],['test']
Testability,"// We have a similar situation as the decoder, where we want to store; // variable length entries (code table entries), but we want to do in a; // faster manner than an array of arrays. The code below stores sort of a; // linked list within the code table, and then ""chases"" through it to; // construct the dictionary entries. When a new entry is created, just the; // last byte is stored, and the rest (prefix) of the entry is only; // referenced by its table entry. Then the code chases through the; // prefixes until it reaches a single byte code. We have to chase twice,; // first to compute the length, and then to actually copy the data to the; // output (backwards, since we know the length). The alternative would be; // storing something in an intermediate stack, but that doesn't make any; // more sense. I implemented an approach where it also stored the length; // in the code table, although it's a bit tricky because you run out of; // bits (12 + 12 + 8), but I didn't measure much improvements (the table; // entries are generally not the long). Even when I created benchmarks for; // very long table entries the complexity did not seem worth it.; // The code table stores the prefix entry in 12 bits and then the suffix; // byte in 8 bits, so each entry is 20 bits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:1081,benchmark,benchmarks,1081,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['benchmark'],['benchmarks']
Testability,"// We have a subtraction/addition between a (potentially truncated) *logical*; // right-shift of X and a ""select"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp:69,log,logical,69,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp,1,['log'],['logical']
Testability,"// We have an assert, truncate, assert sandwich. Make one stronger assert; // by asserting on the smallest asserted type to the larger source type.; // This eliminates the later assert:; // assert (trunc (assert X, i8) to iN), i1 --> trunc (assert X, i1) to iN; // assert (trunc (assert X, i1) to iN), i8 --> trunc (assert X, i1) to iN",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:14,assert,assert,14,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,12,['assert'],"['assert', 'asserted', 'asserting']"
Testability,"// We have dedicated lowering for unpredicated uniform loads and; // stores. Note that even with tail folding we know that at least; // one lane is active (i.e. generalized predication is not possible; // here), and the logic below depends on this fact.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:220,log,logic,220,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['log'],['logic']
Testability,"// We have found a preprocessing directive. Annotate the tokens; // appropriately.; //; // FIXME: Some simple tests here could identify macro definitions and; // #undefs, to provide specific cursor kinds for those.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:110,test,tests,110,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,1,['test'],['tests']
Testability,// We have functions as operands in tests with blocks of instruction e.g. in; // transcoding/global_block.ll. These operands are not used and should be; // substituted by zero constants. Their type is expected to be always; // OpTypePointer Function %uchar.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVInstructionSelector.cpp:36,test,tests,36,interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVInstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVInstructionSelector.cpp,1,['test'],['tests']
Testability,"// We have gone through all the branches in this file and the requested basket; // doesn't appear to be in any of them. Likely a logic error / bug.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx:129,log,logic,129,tree/tree/src/TTreeCache.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx,1,['log'],['logic']
Testability,// We have identified namespaces that are generated by MSVC. Mark them; // as 'system' so they will be excluded from the logical view.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp:121,log,logical,121,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp,1,['log'],['logical']
Testability,"// We have matched a recurrence of the form:; // %iv = [R, %entry], [%iv.next, %backedge]; // %iv.next = shift_op %iv, L; // Recurse with the phi context to avoid concern about whether facts; // inferred hold at original context instruction. TODO: It may be; // correct to use the original context. IF warranted, explore and; // add sufficient tests to cover.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp:344,test,tests,344,interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,1,['test'],['tests']
Testability,"// We have passed the test above that both instructions have the same; // opcode, so we know that both instructions are bundles here. Let's compare; // MIs inside the bundle.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineInstr.cpp:22,test,test,22,interpreter/llvm-project/llvm/lib/CodeGen/MachineInstr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineInstr.cpp,1,['test'],['test']
Testability,"// We have to decide what format to generate; // (for numeric labels only); // Test the magnitude, decide format",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TGaxis.cxx:79,Test,Test,79,graf2d/graf/src/TGaxis.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TGaxis.cxx,1,['Test'],['Test']
Testability,"// We have to exit early if the message stream is not active. Otherwise it's; // possible that this function skips logging because it thinks it has; // already logged, but actually it didn't.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFit/Evaluator.cxx:115,log,logging,115,roofit/roofitcore/src/RooFit/Evaluator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFit/Evaluator.cxx,2,['log'],"['logged', 'logging']"
Testability,"// We have to put the alignment matrix on top of the left branch; // of the composite shape. The node is already decoupled from logical tree.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoPhysicalNode.cxx:128,log,logical,128,geom/geom/src/TGeoPhysicalNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoPhysicalNode.cxx,1,['log'],['logical']
Testability,"// We just test that the wrapper compiles. This is a regression test to make sure; // we never try to cast a member function as we do above.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/test/TClingCallFuncTests.cxx:11,test,test,11,core/metacling/test/TClingCallFuncTests.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/test/TClingCallFuncTests.cxx,2,['test'],['test']
Testability,// We know that these reloation types won't need a stub function. This list; // can be extended as needed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp:51,stub,stub,51,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp,1,['stub'],['stub']
Testability,"// We logically split the layout down into a series of chunks of this size,; // which is generally the size of a pointer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp:6,log,logically,6,interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp,1,['log'],['logically']
Testability,"// We may get non-CompoundVal accidentally due to imprecise cast logic or; // that we are binding symbolic struct value. Kill the field values, and if; // the value is symbolic go and bind it as a ""default"" binding.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp:65,log,logic,65,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp,2,['log'],['logic']
Testability,"// We may need to reschedule this region if it wasn't rescheduled in the last; // stage, or if we found it was testing critical register pressure limits in; // the unclustered reschedule stage. The later is because we may not have been; // able to raise the min occupancy in the previous stage so the region may be; // overly constrained even if it was already rescheduled.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNSchedStrategy.cpp:111,test,testing,111,interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNSchedStrategy.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNSchedStrategy.cpp,1,['test'],['testing']
Testability,"// We may now overlap, although the overlap is not complete. There might also; // be other incomplete overlaps, and together, they might cover the complete; // dead store.; // Note: The correctness of this logic depends on the fact that this function; // is not even called providing DepWrite when there are any intervening reads.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp:206,log,logic,206,interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DeadStoreElimination.cpp,1,['log'],['logic']
Testability,"// We must be careful with atomic accesses, as they may allow another thread; // to touch this location, clobbering it. We are conservative: if the; // QueryInst is not a simple (non-atomic) memory access, we automatically; // return getClobber.; // If it is simple, we know based on the results of; // ""Compiler testing via a theory of sound optimisations in the C11/C++11; // memory model"" in PLDI 2013, that a non-atomic location can only be; // clobbered between a pair of a release and an acquire action, with no; // access to the location in between.; // Here is an example for giving the general intuition behind this rule.; // In the following code:; // store x 0;; // release action; [1]; // acquire action; [4]; // %val = load x;; // It is unsafe to replace %val by 0 because another thread may be running:; // acquire action; [2]; // store x 42;; // release action; [3]; // with synchronization from 1 to 2 and from 3 to 4, resulting in %val; // being 42. A key property of this program however is that if either; // 1 or 4 were missing, there would be a race between the store of 42; // either the store of 0 or the load (making the whole program racy).; // The paper mentioned above shows that the same property is respected; // by every program that can detect any optimization of that kind: either; // it is racy (undefined) or there is a release followed by an acquire; // between the pair of accesses under consideration.; // If the load is invariant, we ""know"" that it doesn't alias *any* write. We; // do want to respect mustalias results since defs are useful for value; // forwarding, but any mayalias write can be assumed to be noalias.; // Arguably, this logic should be pushed inside AliasAnalysis itself.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemoryDependenceAnalysis.cpp:313,test,testing,313,interpreter/llvm-project/llvm/lib/Analysis/MemoryDependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemoryDependenceAnalysis.cpp,2,"['log', 'test']","['logic', 'testing']"
Testability,"// We must include it even when we have modules because it is marked as; // textual in the modulemap due to the nature of the assert header.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx:126,assert,assert,126,core/metacling/src/TCling.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx,1,['assert'],['assert']
Testability,"// We must not add instrumentation to the BB representing the; // ""suspend"" path, else CoroSplit won't be able to lower; // llvm.coro.suspend to a tail call. We do want profiling info for; // the other branches (resume/destroy). So we do 2 things:; // 1. we prefer instrumenting those other edges by setting the weight; // of the ""suspend"" edge to max, and; // 2. we mark the edge as ""Removed"" to guarantee it is not considered; // for instrumentation. That could technically happen:; // (from test/Transforms/Coroutines/coro-split-musttail.ll); //; // %suspend = call i8 @llvm.coro.suspend(token %save, i1 false); // switch i8 %suspend, label %exit [; // i8 0, label %await.ready; // i8 1, label %exit; // ]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/CFGMST.h:494,test,test,494,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/CFGMST.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/CFGMST.h,1,['test'],['test']
Testability,"// We need a constant operand for the add/sub, and the other operand is a; // logical shift right: add (srl), C or sub C, (srl).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:78,log,logical,78,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['log'],['logical']
Testability,"// We need a softer way to reason about equality in 32 bits; // Being this a quick test, doing the check at runtime is really no problem.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:83,test,test,83,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['test'],['test']
Testability,"// We need changed elements sorted by their ""render object"" as we do; // parallel iteration over this list and the list of logical shapes; // in every scene.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveScene.cxx:123,log,logical,123,graf3d/eve/src/TEveScene.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/src/TEveScene.cxx,1,['log'],['logical']
Testability,// We need the order of list to be stable so that naming ends up stable; // when we split edges. This makes test cases much easier to write.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/PlaceSafepoints.cpp:108,test,test,108,interpreter/llvm-project/llvm/lib/Transforms/Scalar/PlaceSafepoints.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/PlaceSafepoints.cpp,1,['test'],['test']
Testability,// We need the sequence defined by AR to strictly increase in the; // unsigned integer domain for the logic below to hold.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:102,log,logic,102,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['log'],['logic']
Testability,"// We need to be very careful here because: if the pointer does not have the; // asserted alignment, then the behavior is undefined, and undefined; // behavior is non-constant.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:81,assert,asserted,81,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['assert'],['asserted']
Testability,// We need to have logged a step for this to count as a legal index sequence.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:19,log,logged,19,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['log'],['logged']
Testability,"// We need to move the CR field that contains the CR bit we are spilling.; // The super register may not be explicitly defined (i.e. it can be defined; // by a CR-logical that only defines the subreg) so we state that the CR; // field is undef. Also, in order to preserve the kill flag on the CR bit,; // we add it as an implicit use.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCRegisterInfo.cpp:163,log,logical,163,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCRegisterInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCRegisterInfo.cpp,1,['log'],['logical']
Testability,"// We need to pass setjmpTable and setjmpTableSize to testSetjmp function.; // These values are defined in the beginning of the function and also in each; // setjmp callsite, but we don't know which values we should use at this; // point. So here we arbitraily use the ones defined in the beginning of the; // function, and SSAUpdater will later update them to the correct values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp:54,test,testSetjmp,54,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,1,['test'],['testSetjmp']
Testability,// We need to return the rewritten expression to handle cases where the; // BlockDeclRefExpr is embedded in another expression being rewritten.; // For example:; //; // int main() {; // __block Foo *f;; // __block int i;; //; // void (^myblock)() = ^() {; // [f test]; // f is a BlockDeclRefExpr embedded in a message (which is being rewritten).; // i = 77;; // };; //},MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteObjC.cpp:262,test,test,262,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteObjC.cpp,1,['test'],['test']
Testability,// We need to return the rewritten expression to handle cases where the; // DeclRefExpr is embedded in another expression being rewritten.; // For example:; //; // int main() {; // __block Foo *f;; // __block int i;; //; // void (^myblock)() = ^() {; // [f test]; // f is a DeclRefExpr embedded in a message (which is being rewritten).; // i = 77;; // };; //},MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:257,test,test,257,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,1,['test'],['test']
Testability,"// We need to scavenge a register but have no spill slot, the target; // must know how to do it (if not, we'll assert below).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterScavenging.cpp:111,assert,assert,111,interpreter/llvm-project/llvm/lib/CodeGen/RegisterScavenging.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterScavenging.cpp,1,['assert'],['assert']
Testability,"// We need to set the range also for ""mean"", because this test also checks; // the analytical integral over the mean variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooBifurGauss.cxx:58,test,test,58,roofit/roofit/test/testRooBifurGauss.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooBifurGauss.cxx,1,['test'],['test']
Testability,"// We need to tak the lock since we are test and then setting fBits; // and TStreamerInfo::fBits (and the StreamerInfo state in general); // which can also be modified by another thread.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:40,test,test,40,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,1,['test'],['test']
Testability,// We need to worry about replacing the default register with itself in case; // of MIR testcases missing the MFI.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp:88,test,testcases,88,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,1,['test'],['testcases']
Testability,"// We need valid source locations to avoid assert(InitList.isExplicit()...)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DynamicLookup.cpp:43,assert,assert,43,interpreter/cling/lib/Interpreter/DynamicLookup.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DynamicLookup.cpp,1,['assert'],['assert']
Testability,"// We needs only one static object of this class; //_______________________________________________________________; //; // Just for fun, I introduce the class 'Tester' to collect; // a 'TNamed' objects. I use a objects of this class to perform a real; // tests.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx:161,Test,Tester,161,test/tcollbm.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx,2,"['Test', 'test']","['Tester', 'tests']"
Testability,"// We never want to inline functions that contain an indirectbr. This is; // incorrect because all the blockaddress's (in static global initializers; // for example) would be referring to the original function, and this indirect; // jump would jump from the inlined copy of the function into the original; // function which is extremely undefined behavior.; // FIXME: This logic isn't really right; we can safely inline functions; // with indirectbr's as long as no other function or global references the; // blockaddress of a block within the current function. And as a QOI issue,; // if someone is using a blockaddress without an indirectbr, and that; // reference somehow ends up in another function or global, we probably; // don't want to inline this function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/CodeMetrics.cpp:373,log,logic,373,interpreter/llvm-project/llvm/lib/Analysis/CodeMetrics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/CodeMetrics.cpp,1,['log'],['logic']
Testability,"// We never want to inline functions that contain an indirectbr. This is; // incorrect because all the blockaddress's (in static global initializers; // for example) would be referring to the original function, and this; // indirect jump would jump from the inlined copy of the function into the; // original function which is extremely undefined behavior.; // FIXME: This logic isn't really right; we can safely inline functions with; // indirectbr's as long as no other function or global references the; // blockaddress of a block within the current function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp:373,log,logic,373,interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,1,['log'],['logic']
Testability,// We no longer need the assumes or the type test.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp:45,test,test,45,interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp,1,['test'],['test']
Testability,// We now know whether all the uses of the CR logical are in the same block.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCReduceCRLogicals.cpp:46,log,logical,46,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCReduceCRLogicals.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCReduceCRLogicals.cpp,1,['log'],['logical']
Testability,"// We only handle bottom-tested loop, i.e. loop in which the condition is; // checked at the end of each iteration. With that we can assume that all; // instructions in the loop are executed the same number of times.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopVersioningLICM.cpp:25,test,tested,25,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopVersioningLICM.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopVersioningLICM.cpp,1,['test'],['tested']
Testability,// We only have VSX Vector Test for software Square Root.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:27,Test,Test,27,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['Test'],['Test']
Testability,// We only infer things using the prototype and the name; we don't need; // definitions. This ensures libfuncs are annotated and also allows our; // CGSCC inference to avoid needing to duplicate the inference from other; // attribute logic on all calls to declarations (as declarations aren't; // explicitly visited by CGSCC passes in the new pass manager.),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/InferFunctionAttrs.cpp:234,log,logic,234,interpreter/llvm-project/llvm/lib/Transforms/IPO/InferFunctionAttrs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/InferFunctionAttrs.cpp,1,['log'],['logic']
Testability,// We partially support vectors of gc pointers. The code will assert if it; // can't handle something.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp:62,assert,assert,62,interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,1,['assert'],['assert']
Testability,"// We process the set twice: first we process read-write pointers, last we; // process read-only pointers. This allows us to skip dependence tests for; // read-only pointers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:141,test,tests,141,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,1,['test'],['tests']
Testability,"// We provide those C++23 features as extensions in earlier language modes, so; // we also define their feature test macros.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/InitPreprocessor.cpp:112,test,test,112,interpreter/llvm-project/clang/lib/Frontend/InitPreprocessor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/InitPreprocessor.cpp,1,['test'],['test']
Testability,"// We provoke a lot of evaluation errors in this test. Don't print those.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testNaNPacker.cxx:49,test,test,49,roofit/roofitcore/test/testNaNPacker.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testNaNPacker.cxx,1,['test'],['test']
Testability,"// We rely on not being able to reach an exiting block on a later iteration; // then it's statically compute exit count. The implementaton of; // getExitCount currently has this invariant, but assert it here so that; // breakage is obvious if this ever changes..",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp:193,assert,assert,193,interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,1,['assert'],['assert']
Testability,// We rely on topological ordering of node ids for checking for; // cycles when fusing nodes during selection. All unselected nodes; // successors of an already selected node should have a negative id.; // This assertion will catch such cases. If this assertion triggers; // it is likely you using DAG-level Value/Node replacement functions; // (versus equivalent ISEL replacement) in backend-specific; // selections. See comment in EnforceNodeIdInvariant for more; // details.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:211,assert,assertion,211,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,2,['assert'],['assertion']
Testability,"// We require DT so it's available when LI is available. The LI updating code; // asserts that DT is also present so if we don't make sure that we have DT; // here, that assert will trigger.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BranchProbabilityInfo.cpp:82,assert,asserts,82,interpreter/llvm-project/llvm/lib/Analysis/BranchProbabilityInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BranchProbabilityInfo.cpp,6,['assert'],"['assert', 'asserts']"
Testability,"// We require that the loop has at most one exit block. Otherwise, we'd be in; // the situation of needing to be able to solve statically which exit block; // will be branched to, or trying to preserve the branching logic in a loop; // invariant manner.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopDeletion.cpp:216,log,logic,216,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopDeletion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopDeletion.cpp,1,['log'],['logic']
Testability,// We reuse the logic that associates callback calles to arguments of a; // call site here to identify the callback callee as the associated; // function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h:16,log,logic,16,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/Attributor.h,1,['log'],['logic']
Testability,// We should be emitting a constructor; GlobalDecl will assert this,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp:56,assert,assert,56,interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprCXX.cpp,1,['assert'],['assert']
Testability,// We should have sorted all of the subjects into two lists.; // FIXME: this assertion will be wrong if we ever add type attribute subjects.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:77,assert,assertion,77,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,1,['assert'],['assertion']
Testability,"// We should have this assert, but there may be dead SDNodes that never; // materialize as SUnits, so they don't appear to generate liveness.; //assert(SU->NumRegDefsLeft == 0 && ""not all regdefs have scheduled uses"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:23,assert,assert,23,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,2,['assert'],['assert']
Testability,// We shouldn't even be testing this unless the arguments are otherwise; // compatible.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExceptionSpec.cpp:24,test,testing,24,interpreter/llvm-project/clang/lib/Sema/SemaExceptionSpec.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExceptionSpec.cpp,1,['test'],['testing']
Testability,"// We test again on fCanLoadClassInfo has another thread may have executed it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:6,test,test,6,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,1,['test'],['test']
Testability,// We test only the i1 bit. Skip the AND if UNDEF or another AND.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:6,test,test,6,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,1,['test'],['test']
Testability,"// We translate this by hand to the -cc1 argument, since nightly test uses; // it and developers have been trained to spell it with -mllvm. Both; // spellings are now deprecated and should be removed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:65,test,test,65,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,1,['test'],['test']
Testability,"// We traverse the given scopes tree ('Reference' and 'Target') twice.; // The first time we look for missing items from the 'Reference' and the; // second time we look for items added to the 'Target'.; // The comparison test includes the name, lexical level, type, source; // location, etc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVCompare.cpp:221,test,test,221,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVCompare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVCompare.cpp,1,['test'],['test']
Testability,"// We use 30 epsilon below because some platforms (ARM64, x86_64); // have rounding errors exceeding a few ulps and make the test fail.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:125,test,test,125,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['test'],['test']
Testability,// We use a local ValueHandleBase as an iterator so that ValueHandles can add; // and remove themselves from the list without breaking our iteration. This; // is not really an AssertingVH; we just have to give ValueHandleBase a kind.; // Note that we deliberately do not the support the case when dropping a value; // handle results in a new value handle being permanently added to the list; // (as might occur in theory for CallbackVH's): the new value handle will not; // be processed and the checking code will mete out righteous punishment if; // the handle is still present once we have finished processing all the other; // value handles (it is fine to momentarily add then remove a value handle).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Value.cpp:176,Assert,AssertingVH,176,interpreter/llvm-project/llvm/lib/IR/Value.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Value.cpp,1,['Assert'],['AssertingVH']
Testability,// We use a local ValueHandleBase as an iterator so that; // ValueHandles can add and remove themselves from the list without; // breaking our iteration. This is not really an AssertingVH; we; // just have to give ValueHandleBase some kind.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Value.cpp:176,Assert,AssertingVH,176,interpreter/llvm-project/llvm/lib/IR/Value.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Value.cpp,1,['Assert'],['AssertingVH']
Testability,"// We use a pointer use visitor to track how an alloca is being used.; // The goal is to be able to answer the following three questions:; // 1. Should this alloca be allocated on the frame instead.; // 2. Could the content of the alloca be modified prior to CoroBegn, which would; // require copying the data from alloca to the frame after CoroBegin.; // 3. Is there any alias created for this alloca prior to CoroBegin, but used; // after CoroBegin. In that case, we will need to recreate the alias after; // CoroBegin based off the frame. To answer question 1, we track two things:; // a. List of all BasicBlocks that use this alloca or any of the aliases of; // the alloca. In the end, we check if there exists any two basic blocks that; // cross suspension points. If so, this alloca must be put on the frame. b.; // Whether the alloca or any alias of the alloca is escaped at some point,; // either by storing the address somewhere, or the address is used in a; // function call that might capture. If it's ever escaped, this alloca must be; // put on the frame conservatively.; // To answer quetion 2, we track through the variable MayWriteBeforeCoroBegin.; // Whenever a potential write happens, either through a store instruction, a; // function call or any of the memory intrinsics, we check whether this; // instruction is prior to CoroBegin. To answer question 3, we track the offsets; // of all aliases created for the alloca prior to CoroBegin but used after; // CoroBegin. std::optional is used to be able to represent the case when the; // offset is unknown (e.g. when you have a PHINode that takes in different; // offset values). We cannot handle unknown offsets and will assert. This is the; // potential issue left out. An ideal solution would likely require a; // significant redesign.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroFrame.cpp:1690,assert,assert,1690,interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroFrame.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroFrame.cpp,1,['assert'],['assert']
Testability,"// We use branch weights for the slow path check, to indicate that the slow; // path is rarely taken. This seems to be the case for SPEC benchmarks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp:137,benchmark,benchmarks,137,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,1,['benchmark'],['benchmarks']
Testability,"// We use memoization to avoid running the same matcher on the same; // AST node twice. This struct is the key for looking up match; // result. It consists of an ID of the MatcherInterface (for; // identifying the matcher), a pointer to the AST node and the; // bound nodes before the matcher was executed.; //; // We currently only memoize on nodes whose pointers identify the; // nodes (\c Stmt and \c Decl, but not \c QualType or \c TypeLoc).; // For \c QualType and \c TypeLoc it is possible to implement; // generation of keys for each type.; // FIXME: Benchmark whether memoization of non-pointer typed nodes; // provides enough benefit for the additional amount of code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp:558,Benchmark,Benchmark,558,interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchFinder.cpp,1,['Benchmark'],['Benchmark']
Testability,// We use posix style here because the tests (specifically; // darwin-dsymutil.c) demonstrate that posix style paths are acceptable; // even on Windows and if we don't then the similar test covering this; // fails.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:39,test,tests,39,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,2,['test'],"['test', 'tests']"
Testability,"// We use the SSAUpdater to insert PHI nodes for the target addresses of; // indirect branches. We don't actually need the full power of the SSA updater; // in this particular case as we always have immediately available values, but; // this avoids us having to re-implement the PHI construction logic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp:296,log,logic,296,interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,1,['log'],['logic']
Testability,// We use this for clang tests.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:25,test,tests,25,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,2,['test'],['tests']
Testability,"// We used ATLAS fully-split xAOD for testing, which is a rather unbalanced TTree, 10K branches,; // with 8K having baskets smaller than 512 bytes. To achieve good I/O performance ATLAS uses auto-flush 100,; // resulting in the smallest baskets being ~300-400 bytes, so this change increases their memory by about 8k*150B =~ 1MB,; // at the same time it significantly reduces the number of total baskets because it ensures that all 100 entries can be; // stored in a single basket (the old optimization tended to make baskets too small). In a toy example with fixed sized; // structures we found a factor of 2 fewer baskets needed in the new scheme.; // rounds up, increases basket size to ensure all entries fit into single basket as intended",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx:38,test,testing,38,tree/tree/src/TTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTree.cxx,1,['test'],['testing']
Testability,// We want the new block to have no code in it other than the definition; // of the input to the CR logical and the CR logical itself. So we move; // those to the bottom of the block (just before the branch). Then we; // will split before the CR logical.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCReduceCRLogicals.cpp:100,log,logical,100,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCReduceCRLogicals.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCReduceCRLogicals.cpp,3,['log'],['logical']
Testability,"// We want the value in a GPR if it is being extended, used for a select, or; // used in logical operations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:89,log,logical,89,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,1,['log'],['logical']
Testability,"// We want to assert there is only one wrapper per transaction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/Transaction.cpp:14,assert,assert,14,interpreter/cling/lib/Interpreter/Transaction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/Transaction.cpp,1,['assert'],['assert']
Testability,"// We want to avoid useless duplication.; // TODO: This is done automatically for binary operations. As UADDO_CARRY is; // not a binary operation, this is not really possible to leverage this; // existing mechanism for it. However, if more operations require the same; // deduplication logic, then it may be worth generalize.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:286,log,logic,286,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['log'],['logic']
Testability,"// We will need to check if log-likelihood evaluation left an error status.; // Now using faster eval error logging with CountErrors.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx:28,log,log-likelihood,28,roofit/roostats/src/MetropolisHastings.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx,2,['log'],"['log-likelihood', 'logging']"
Testability,"// We would like to assert that we actually read / wrote all the bytes that we; // expected to for this record, but unfortunately we can't do this. Some; // producers such as MASM over-allocate for certain types of records and; // commit the extraneous data, so when reading we can't be sure every byte; // will have been read. And when writing we over-allocate temporarily since; // we don't know how big the record is until we're finished writing it, so; // even though we don't commit the extraneous data, we still can't guarantee; // we're at the end of the allocated data.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/CodeView/CodeViewRecordIO.cpp:20,assert,assert,20,interpreter/llvm-project/llvm/lib/DebugInfo/CodeView/CodeViewRecordIO.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/CodeView/CodeViewRecordIO.cpp,1,['assert'],['assert']
Testability,// We'd like to keep a stable iteration order for FunctionInfos to help; // FileCheck based testing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/FaultMaps.h:92,test,testing,92,interpreter/llvm-project/llvm/include/llvm/CodeGen/FaultMaps.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/FaultMaps.h,1,['test'],['testing']
Testability,"// We'd like to list the prologue as ""not statements"" but GDB behaves; // poorly if we do that. Revisit this with caution/GDB (7.5+) testing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp:133,test,testing,133,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp,1,['test'],['testing']
Testability,"// We're checking for profile read errors in CompilerInvocation, so if; // there was an error it should've already been caught. If it hasn't been; // somehow, trip an assertion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:167,assert,assertion,167,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,1,['assert'],['assertion']
Testability,// We're creating a completely different type of load/store - LDM from LDR.; // For this reason we can't reuse the logic at the end of this function; we; // have to implement the MI building here.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/Thumb2SizeReduction.cpp:115,log,logic,115,interpreter/llvm-project/llvm/lib/Target/ARM/Thumb2SizeReduction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/Thumb2SizeReduction.cpp,1,['log'],['logic']
Testability,"// We're going to use the condition bit in math or logic ops. We could allow; // this with a wider condition value (post-legalization it becomes an i8),; // but if nothing is creating selects that late, it doesn't matter.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:51,log,logic,51,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['log'],['logic']
Testability,// We're in -harness mode. Use a custom interface for this; // test object.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp:63,test,test,63,interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlink/llvm-jitlink.cpp,1,['test'],['test']
Testability,"// We're now done, and we have a series of segments each beginning at an; // offset specified in the SegmentOffsets array. We now need to iterate; // over each segment and post-process them in the following two ways:; // 1) Each top-level record has a RecordPrefix whose type is either; // LF_FIELDLIST or LF_METHODLIST, but the Length field is still 0.; // Those should all be set to the correct length now.; // 2) Each continuation record has an IndexRef field which we set to the; // magic value 0xB0C0B0C0. Now that the caller has told us the TypeIndex; // they want this sequence to start from, we can go through and update; // each one.; //; // Logically, the sequence of records we've built up looks like this:; //; // SegmentOffsets[0]: <Length> (Initially: uninitialized); // SegmentOffsets[0]+2: LF_FIELDLIST; // SegmentOffsets[0]+4: Member[0]; // SegmentOffsets[0]+?: ...; // SegmentOffsets[0]+?: Member[4]; // SegmentOffsets[1]-8: LF_INDEX; // SegmentOffsets[1]-6: 0; // SegmentOffsets[1]-4: <Type Index of Next Record> (Initially: 0xB0C0B0C0); //; // SegmentOffsets[1]: <Length> (Initially: uninitialized); // SegmentOffsets[1]+2: LF_FIELDLIST; // SegmentOffsets[1]+4: Member[0]; // SegmentOffsets[1]+?: ...; // SegmentOffsets[1]+?: Member[s]; // SegmentOffsets[2]-8: LF_INDEX; // SegmentOffsets[2]-6: 0; // SegmentOffsets[2]-4: <Type Index of Next Record> (Initially: 0xB0C0B0C0); //; // ...; //; // SegmentOffsets[N]: <Length> (Initially: uninitialized); // SegmentOffsets[N]+2: LF_FIELDLIST; // SegmentOffsets[N]+4: Member[0]; // SegmentOffsets[N]+?: ...; // SegmentOffsets[N]+?: Member[t]; //; // And this is the way we have laid them out in the serialization buffer. But; // we cannot actually commit them to the underlying stream this way, due to; // the topological sorting requirement of a type stream (specifically,; // TypeIndex references can only point backwards, not forwards). So the; // sequence that we return to the caller contains the records in reverse; // order, which",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/CodeView/ContinuationRecordBuilder.cpp:651,Log,Logically,651,interpreter/llvm-project/llvm/lib/DebugInfo/CodeView/ContinuationRecordBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/CodeView/ContinuationRecordBuilder.cpp,1,['Log'],['Logically']
Testability,// We're now examining a PHI to see whether it's un-necessary. Loop around; // the other live-in values and test whether they're all the same.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:108,test,test,108,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['test'],['test']
Testability,"// We're testing several Landau configurations, because the underlying; // ROOT::Math::landau_cdf is defined piecewise. Like this, we're covering; // all possible code paths in the pullback.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx:9,test,testing,9,roofit/roofitcore/test/testRooFuncWrapper.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx,1,['test'],['testing']
Testability,"// We're trying to match the following pattern with any of; // G_SHL/G_ASHR/G_LSHR/G_USHLSAT/G_SSHLSAT shift instructions in combination; // with any of G_AND/G_OR/G_XOR logic instructions.; // %t1 = SHIFT %X, G_CONSTANT C0; // %t2 = LOGIC %t1, %Y; // %root = SHIFT %t2, G_CONSTANT C1; // -->; // %t3 = SHIFT %X, G_CONSTANT (C0+C1); // %t4 = SHIFT %Y, G_CONSTANT C1; // %root = LOGIC %t3, %t4",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp:170,log,logic,170,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,3,"['LOG', 'log']","['LOGIC', 'logic']"
Testability,"// We've been divorced from our compare! Our block was split, and; // now our compare lives in a predecessor block. We musn't; // re-compare here, as the children of the compare aren't guaranteed; // live across the block boundary (we *could* check for this).; // Regardless, the compare has been done in the predecessor block,; // and it left a value for us in a virtual register. Ergo, we test; // the one-bit value left in the virtual register.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFastISel.cpp:391,test,test,391,interpreter/llvm-project/llvm/lib/Target/ARM/ARMFastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFastISel.cpp,1,['test'],['test']
Testability,// WebAssembly tables can't be used with logical operators.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:41,log,logical,41,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['log'],['logical']
Testability,// What follows are specific Metadata record types which encapsulate the; // information associated with specific metadata record types in an FDR mode; // log.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/FDRRecords.h:155,log,log,155,interpreter/llvm-project/llvm/include/llvm/XRay/FDRRecords.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/XRay/FDRRecords.h,1,['log'],['log']
Testability,"// What we need to test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx:19,test,test,19,test/tcollbm.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx,1,['test'],['test']
Testability,"// What's important here is to select the right set of nodes. The main; // selection algorithm loops over nodes in a topological order, i.e. users; // are visited before their operands.; //; // It is an error to have an unselected node with a selected operand, and; // there is an assertion in the main selector code to enforce that.; //; // Such a situation could occur if we selected a node, which is both a; // subnode of ISelN, and a subnode of an unrelated (and yet unselected); // node in the DAG.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelDAGToDAGHVX.cpp:281,assert,assertion,281,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelDAGToDAGHVX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelDAGToDAGHVX.cpp,1,['assert'],['assertion']
Testability,"// When 'FillDelaySlot' is true, the existing logic will add; // noreorder before instruction and reorder after it. So there; // need exclude this case avoiding two '.set reorder'.; // The format of the first case is:; // .set noreorder; // bnezc; // nop; // .set reorder",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp:46,log,logic,46,interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp,1,['log'],['logic']
Testability,"// When C is not 0.0 and infinities are not allowed:; // (C / X) < 0.0 is a sign-bit test of X; // (C / X) < 0.0 --> X < 0.0 (if C is positive); // (C / X) < 0.0 --> X > 0.0 (if C is negative, swap the predicate); //; // Proof:; // Multiply (C / X) < 0.0 by X * X / C.; // - X is non zero, if it is the flag 'ninf' is violated.; // - C defines the sign of X * X * C. Thus it also defines whether to swap; // the predicate. C is also non zero by definition.; //; // Thus X * X / C is non zero and the transformation is valid. [qed]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:85,test,test,85,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['test'],['test']
Testability,"// When IPI.first is a terminator instruction, DT may think that; // the result is defined on the edge.; // Here we are testing the insertion point, not the definition.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64PromoteConstant.cpp:120,test,testing,120,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64PromoteConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64PromoteConstant.cpp,1,['test'],['testing']
Testability,"// When a call receives a reference to 'self', [Pre/Post]Call pass; // the SelfFlags from the object 'self' points to before the call to the new; // object after the call. This is to avoid invalidation of 'self' by logging; // functions.; // Another common pattern in classes with multiple initializers is to put the; // subclass's common initialization bits into a static function that receives; // the value of 'self', e.g:; // @code; // if (!(self = [super init])); // return nil;; // if (!(self = _commonInit(self))); // return nil;; // @endcode; // Until we can use inter-procedural analysis, in such a call, transfer the; // SelfFlags to the result of the call.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ObjCSelfInitChecker.cpp:215,log,logging,215,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ObjCSelfInitChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ObjCSelfInitChecker.cpp,1,['log'],['logging']
Testability,"// When comparing logical elements, ignore any difference in the children.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVScope.cpp:18,log,logical,18,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVScope.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVScope.cpp,1,['log'],['logical']
Testability,"// When compiling for device, host functions are never emitted. Similarly,; // when compiling for host, device and global functions are never emitted.; // (Technically, we do emit a host-side stub for global functions, but this; // doesn't count for our purposes here.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:192,stub,stub,192,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['stub'],['stub']
Testability,"// When converting the deduced template argument, append it to the; // general output list. We need to do this so that the template argument; // checking logic has all of the prior template arguments available.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp:154,log,logic,154,interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp,1,['log'],['logic']
Testability,"// When finding devirtualizable calls, it's possible to find the same; // vtable passed to multiple llvm.type.test or llvm.type.checked.load; // calls, which can cause duplicate call sites to be recorded in; // [Const]CallSites. If we've already found one of these; // call instances, just ignore it. It will be replaced later.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp:110,test,test,110,interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/WholeProgramDevirt.cpp,1,['test'],['test']
Testability,// When it's cheaper or necessary to test reverse flags.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:37,test,test,37,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['test'],['test']
Testability,"// When measuring MC/DC, always fully evaluate the condition up front using; // EvaluateExprAsBool() so that the test vector bitmap can be updated prior to; // executing the body of the if.then or if.else. This is useful for when; // there is a 'return' within the body, but this is particularly beneficial; // when one if-stmt is nested within another if-stmt so that all of the MC/DC; // updates are kept linear and consistent.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:113,test,test,113,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,1,['test'],['test']
Testability,"// When not asking for a specific benchmark mode,; // we'll analyse the results.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/llvm-exegesis.cpp:34,benchmark,benchmark,34,interpreter/llvm-project/llvm/tools/llvm-exegesis/llvm-exegesis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/llvm-exegesis.cpp,1,['benchmark'],['benchmark']
Testability,"// When on the master, the master and/or slaves may share; // their file systems and cache. Therefore always make a; // check for the file. If the file already exists with the; // expected md5 the kPROOF_CHECKFILE command will cause the; // file to be copied from cache to slave sandbox.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:279,sandbox,sandbox,279,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['sandbox'],['sandbox']
Testability,"// When specifying ""instcombine"" in -passes enable fix-point verification by; // default, as this is what most tests should use.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:111,test,tests,111,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,1,['test'],['tests']
Testability,"// When targeting a 32-bit platform, try the special directory used on; // 64-bit hosts, and only fall back to the main library directory if that; // doesn't work.; // FIXME: It'd be nicer to test if this directory exists, but I'm not sure; // what all logic is needed to emulate the '=' prefix here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/NetBSD.cpp:192,test,test,192,interpreter/llvm-project/clang/lib/Driver/ToolChains/NetBSD.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/NetBSD.cpp,2,"['log', 'test']","['logic', 'test']"
Testability,"// When the format argument is an argument of this function, and this; // function also has the format attribute, there are several interactions; // for which there shouldn't be a warning. For instance, when calling; // v*printf from a function that has the printf format attribute, we; // should not emit a warning about using `fmt`, even though it's not; // constant, because the arguments have already been checked for the; // caller of `logmessage`:; //; // __attribute__((format(printf, 1, 2))); // void logmessage(char const *fmt, ...) {; // va_list ap;; // va_start(ap, fmt);; // vprintf(fmt, ap); /* do not emit a warning about ""fmt"" */; // ...; // }; //; // Another interaction that we need to support is calling a variadic; // format function from a format function that has fixed arguments. For; // instance:; //; // __attribute__((format(printf, 1, 2))); // void logstring(char const *fmt, char const *str) {; // printf(fmt, str); /* do not emit a warning about ""fmt"" */; // }; //; // Same (and perhaps more relatably) for the variadic template case:; //; // template<typename... Args>; // __attribute__((format(printf, 1, 2))); // void log(const char *fmt, Args&&... args) {; // printf(fmt, forward<Args>(args)...);; // /* do not emit a warning about ""fmt"" */; // }; //; // Due to implementation difficulty, we only check the format, not the; // format arguments, in all cases.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp:441,log,logmessage,441,interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,4,['log'],"['log', 'logmessage', 'logstring']"
Testability,"// When the input is extended (i.e. single vector becomes a pair),; // this is done by using an ""undef"" vector as the second input.; // However, then we get; // input 1: GOODBITS; // input 2: ........; // but we need; // input 1: ....BITS; // input 2: ....GOOD; // Then at the end, this needs to be undone. To accomplish this,; // artificially add ""LogLen-1"" at both ends of the sequence.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelDAGToDAGHVX.cpp:349,Log,LogLen-,349,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelDAGToDAGHVX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelDAGToDAGHVX.cpp,1,['Log'],['LogLen-']
Testability,"// When the mask is a power-of-2 constant and op0 is a shifted-power-of-2; // constant, test if the shift amount equals the offset bit index:; // (ShiftC << X) & C --> X == (log2(C) - log2(ShiftC)) ? C : 0; // (ShiftC >> X) & C --> X == (log2(ShiftC) - log2(C)) ? C : 0",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:88,test,test,88,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,1,['test'],['test']
Testability,"// When the test register is a 64-bit register, we have to narrow to make; // TBNZW work.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp:12,test,test,12,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,1,['test'],['test']
Testability,// When using a test instruction AVRcc is already set.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.cpp:16,test,test,16,interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.cpp,1,['test'],['test']
Testability,"// When using binned data, reducing and expecting the ame number of entries as in the unbinned case is not; // possible, since information is lost if entries to the left and right of the cut end up in the same bin.; // Therefore, can only test <=",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataSet.cxx:239,test,test,239,roofit/roofitcore/test/testRooDataSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataSet.cxx,1,['test'],['test']
Testability,"// When we can emit a TB(N)Z, prefer that.; //; // Handle non-commutative condition codes first.; // Note that we don't want to do this when we have a G_AND because it can; // become a tst. The tst will make the test bit in the TB(N)Z redundant.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp:212,test,test,212,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,1,['test'],['test']
Testability,"// When we encounter a logical operator (&& or ||) as a CFG terminator,; // then the condition is actually its LHS; otherwise, we'd encounter; // the parent, such as if-statement, as a terminator.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp:23,log,logical,23,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp,1,['log'],['logical']
Testability,"// When we get SIGUSR1 from child (i.e. ROOT) then pop down logo.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootx.cxx:60,log,logo,60,rootx/src/rootx.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/rootx/src/rootx.cxx,1,['log'],['logo']
Testability,"// When we have a greater-than comparison, we can just test if the msb is; // zero.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp:55,test,test,55,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,1,['test'],['test']
Testability,"// When we have a less than comparison, we can just test if the msb is not; // zero.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp:52,test,test,52,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,1,['test'],['test']
Testability,"// Where in the prologue we move the CR fields depends on how many scratch; // registers we have, and if we need to save the link register or not. This; // lambda is to avoid duplicating the logic in 2 places.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFrameLowering.cpp:191,log,logic,191,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFrameLowering.cpp,1,['log'],['logic']
Testability,"// Whether to compress function names in profile records, and filenames in; // code coverage mappings. Used by the Instrumentation library and unit tests.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:148,test,tests,148,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,1,['test'],['tests']
Testability,"// Whether to save received logs to TMacro fMacroLog (use with care)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TProof.h:28,log,logs,28,proof/proof/inc/TProof.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TProof.h,1,['log'],['logs']
Testability,// Whether we started the sandboxing sequence for calls. Calls are bundled; // with branch delays and aligned to the bundle end.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp:26,sandbox,sandboxing,26,interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,1,['sandbox'],['sandboxing']
Testability,// Which instruction is being benchmarked here?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h:30,benchmark,benchmarked,30,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/BenchmarkResult.h,1,['benchmark'],['benchmarked']
Testability,"// While globals are generally bad, this one allows us to perform assertions; // liberally and somehow still trace them back to the def they indirectly; // came from.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:66,assert,assertions,66,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,1,['assert'],['assertions']
Testability,"// While in practice we should never encounter a string table even; // though the string table is already initialized, in theory it's; // possible. PDBs are supposed to have one global string table and; // then this subsection should not appear. Whereas object files are; // supposed to have this subsection appear exactly once. However,; // for testing purposes it's nice to be able to test this subsection; // independently of one format or the other, so for some tests we; // manually construct a PDB that contains this subsection in addition; // to a global string table.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/StringsAndChecksums.h:346,test,testing,346,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/StringsAndChecksums.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/StringsAndChecksums.h,3,['test'],"['test', 'testing', 'tests']"
Testability,"// While interface stubs are in the development stage, it's probably best to; // catch anything that's not a VarDecl or Template/FunctionDecl.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/InterfaceStubFunctionsConsumer.cpp:19,stub,stubs,19,interpreter/llvm-project/clang/lib/Frontend/InterfaceStubFunctionsConsumer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/InterfaceStubFunctionsConsumer.cpp,1,['stub'],['stubs']
Testability,// Widen scalar fp logic ops to vector to reduce isel patterns.; // FIXME: Can we do this during lowering/combine.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:19,log,logic,19,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,1,['log'],['logic']
Testability,// Widening the PHI requires us to insert a trunc. The logical place; // for this trunc is in the same BB as the PHI. This is not possible if; // the BB is terminated by a catchswitch.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp:55,log,logical,55,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,1,['log'],['logical']
Testability,"// Width in pixels of this chunk. Used; // when hit testing the invisible spaces at; // the end of a chunk.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGFont.cxx:52,test,testing,52,gui/gui/src/TGFont.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGFont.cxx,1,['test'],['testing']
Testability,// Windows Itanium support allows for testing the SCEI flavour of; // dllimport/export handling on a Windows system.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:38,test,testing,38,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,1,['test'],['testing']
Testability,"// Windows headers use '__declspec(dllexport) __cdecl' for most funcs; // causing a lot of warnings for different redeclarations (eg. coming from; // the test suite).; // Do not warn about such cases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/CIFactory.cpp:154,test,test,154,interpreter/cling/lib/Interpreter/CIFactory.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/CIFactory.cpp,1,['test'],['test']
Testability,"// With a matching no-overflow guarantee, fold the constants:; // (X * MulC) < C --> X < (C / MulC); // (X * MulC) > C --> X > (C / MulC); // TODO: Assert that Pred is not equal to SGE, SLE, UGE, ULE?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:148,Assert,Assert,148,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['Assert'],['Assert']
Testability,"// With fast, caller promises that layout of `coords` is identical to our internal `vars`.; // Previously, this was verified with an assert in debug mode like this:; //; // assert(!fast || coords.hasSameLayout(_vars));; //; // However, there are usecases where the externally provided `coords` have; // different names than the internal variables, even though they correspond; // to each other. For example, if the observables in the computation graph; // are renamed with `redirectServers`. Hence, we can't do a meaningful assert; // here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:133,assert,assert,133,roofit/roofitcore/src/RooDataHist.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx,3,['assert'],['assert']
Testability,"// With optimization, dead code should already be eliminated. However; // there is one known exception: lowered code for arguments that are only; // used by tail calls, where the tail calls reuse the incoming stack; // arguments directly (see t11 in test/CodeGen/X86/sibcall.ll).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenPassBuilder.h:250,test,test,250,interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenPassBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenPassBuilder.h,3,['test'],['test']
Testability,"// With the next part of the test, we want to cover the closure of; // coefficient normalization reference observables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/test/testRooFitHS3.cxx:29,test,test,29,roofit/hs3/test/testRooFitHS3.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/test/testRooFitHS3.cxx,1,['test'],['test']
Testability,"// Work around by setting Node to have a null call, so it gets; // skipped during cloning. Otherwise assignFunctions will assert; // because its data structures are not designed to handle this case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/MemProfContextDisambiguation.cpp:122,assert,assert,122,interpreter/llvm-project/llvm/lib/Transforms/IPO/MemProfContextDisambiguation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/MemProfContextDisambiguation.cpp,1,['assert'],['assert']
Testability,// Workaround for LegalizeDAG asserting on expansion of i1 vector loads.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600ISelLowering.cpp:30,assert,asserting,30,interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600ISelLowering.cpp,1,['assert'],['asserting']
Testability,// Workaround for LegalizeDAG asserting on expansion of i1 vector stores.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600ISelLowering.cpp:30,assert,asserting,30,interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600ISelLowering.cpp,1,['assert'],['asserting']
Testability,"// Worker method for lexPreprocessor() to skip lines after some; // preprocessing directive up to the buffer end or to the directive; // that re-enables token processing. The method returns true; // upon processing the next directive that re-enables tokens; // processing. False is returned if an error was encountered.; //; // Note that prepSkipRegion() calls lexPreprocessor() to process; // encountered preprocessing directives. In this case, the second; // parameter to lexPreprocessor() is set to false. Being passed; // false ReturnNextLiveToken, lexPreprocessor() must never call; // prepSkipRegion(). We assert this by passing ReturnNextLiveToken; // to prepSkipRegion() and checking that it is never set to false.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h:612,assert,assert,612,interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h,1,['assert'],['assert']
Testability,"// Would need SumW2 or asymptotic error correction, but that's not in test macro.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/testGauss.cxx:70,test,test,70,roofit/roofit/test/vectorisedPDFs/testGauss.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/testGauss.cxx,1,['test'],['test']
Testability,// Write Stub to memory first.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/InterfaceStub/ELFObjHandler.cpp:9,Stub,Stub,9,interpreter/llvm-project/llvm/lib/InterfaceStub/ELFObjHandler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/InterfaceStub/ELFObjHandler.cpp,1,['Stub'],['Stub']
Testability,// Write loop test,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp:14,test,test,14,interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/BrainF/BrainF.cpp,1,['test'],['test']
Testability,// Write out our DOS stub.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/COFFEmitter.cpp:21,stub,stub,21,interpreter/llvm-project/llvm/lib/ObjectYAML/COFFEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/COFFEmitter.cpp,1,['stub'],['stub']
Testability,// Write out the declaration merging check logic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:43,log,logic,43,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,1,['log'],['logic']
Testability,// Write out the statement merging check logic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:41,log,logic,41,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,1,['log'],['logic']
Testability,"// Write the first key, with part of the data and the pointers to (logically) following keys appended.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RMiniFile.cxx:67,log,logically,67,tree/ntuple/v7/src/RMiniFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RMiniFile.cxx,1,['log'],['logically']
Testability,"// Write to output unit (stdout or a log file)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:37,log,log,37,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['log'],['log']
Testability,"// Write two test ntuples to be merged",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_merger.cxx:13,test,test,13,tree/ntuple/v7/test/ntuple_merger.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_merger.cxx,4,['test'],['test']
Testability,"// Write two test ntuples to be merged, with different models.; // Use EMergingMode::kUnion so the output ntuple has all the fields of its inputs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_merger.cxx:13,test,test,13,tree/ntuple/v7/test/ntuple_merger.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_merger.cxx,1,['test'],['test']
Testability,"// Write two test ntuples to be merged; // These files are practically identical except that filed indices are interchanged",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_merger.cxx:13,test,test,13,tree/ntuple/v7/test/ntuple_merger.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_merger.cxx,4,['test'],['test']
Testability,"// X - Y == 0 --> X == Y.; // X - Y != 0 --> X != Y.; // TODO: We allow this with multiple uses as long as the other uses are not; // in phis. The phi use check is guarding against a codegen regression; // for a loop test. If the backend could undo this (and possibly; // subsequent transforms), we would not need this hack.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:217,test,test,217,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['test'],['test']
Testability,// XOP arithmetic/logical shifts.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h:18,log,logical,18,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,1,['log'],['logical']
Testability,// XOP has 128-bit variable logical/arithmetic shifts.; // +ve/-ve Amt = shift left/right.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:28,log,logical,28,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['log'],['logical']
Testability,"// XXX: We are running this after RA, so creating virtual registers will; // cause an assertion failure in the PostRA scheduling pass.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600MachineCFGStructurizer.cpp:86,assert,assertion,86,interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600MachineCFGStructurizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600MachineCFGStructurizer.cpp,1,['assert'],['assertion']
Testability,"// Y0 for test 1 (parabola); // these are value which gave problems in 5.26 for gamma_cdf",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx:10,test,test,10,math/mathcore/test/testRootFinder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx,1,['test'],['test']
Testability,"// Y0 for test 2 (gamma cdf)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx:10,test,test,10,math/mathcore/test/testRootFinder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx,1,['test'],['test']
Testability,"// YetAnotherMatrix class for indexing tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/operators.h:39,test,tests,39,bindings/pyroot/cppyy/cppyy/test/operators.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/operators.h,1,['test'],['tests']
Testability,"// You can also validate by comparing with the RooDSCBShape and RooSDSCBShape; // classes that are floating around in the RooFit user community.; // Some commented-out lines are kept on purpose in this test to make this as; // easy as possible.; //; // #include ""RooDSCBShape.h""; // #include ""RooSDSCBShape.h""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooCrystalBall.cxx:202,test,test,202,roofit/roofit/test/testRooCrystalBall.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooCrystalBall.cxx,1,['test'],['test']
Testability,"// You can implement all the usual fixture class members here.; // To access the test parameter, call GetParam() from class; // TestWithParam<T>.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/test/test_Job.cxx:81,test,test,81,roofit/multiprocess/test/test_Job.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/test/test_Job.cxx,2,"['Test', 'test']","['TestWithParam', 'test']"
Testability,"// You might think that it would be ok to set DebugInfoKind outside of; // the guard for source type, however there is a test which asserts; // that some assembler invocation receives no -debug-info-kind,; // and it's not clear whether that test is just overly restrictive.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:121,test,test,121,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,3,"['assert', 'test']","['asserts', 'test']"
Testability,"// Yup, it does, we delete the old module, and continue trying; // to reduce the testcase...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/CrashDebugger.cpp:81,test,testcase,81,interpreter/llvm-project/llvm/tools/bugpoint/CrashDebugger.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/CrashDebugger.cpp,1,['test'],['testcase']
Testability,"// Z-matrix here - production of first derivatives; // of log-likelihood function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumili.cxx:58,log,log-likelihood,58,math/fumili/src/TFumili.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumili.cxx,2,['log'],['log-likelihood']
Testability,"// Zbs provides BEXT[_I], which can be used with SEQZ/SNEZ as a bit test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:68,test,test,68,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['test'],['test']
Testability,"// Zero the new bits, and continue the assertion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:39,assert,assertion,39,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,1,['assert'],['assertion']
Testability,"// [cstdarg.syn]p1 defers the C++ behavior to what the C standard says,; // and C23 7.16.1.1p2 says, in part:; // If type is not compatible with the type of the actual next argument; // (as promoted according to the default argument promotions), the; // behavior is undefined, except for the following cases:; // - both types are pointers to qualified or unqualified versions of; // compatible types;; // - one type is compatible with a signed integer type, the other; // type is compatible with the corresponding unsigned integer type,; // and the value is representable in both types;; // - one type is pointer to qualified or unqualified void and the; // other is a pointer to a qualified or unqualified character type;; // - or, the type of the next argument is nullptr_t and type is a; // pointer type that has the same representation and alignment; // requirements as a pointer to a character type.; // Given that type compatibility is the primary requirement (ignoring; // qualifications), you would think we could call typesAreCompatible(); // directly to test this. However, in C++, that checks for *same type*,; // which causes false positives when passing an enumeration type to; // va_arg. Instead, get the underlying type of the enumeration and pass; // that.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:1064,test,test,1064,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['test'],['test']
Testability,"// [module.interface]p7; // Class and enumeration member names can be found by name lookup in any; // context in which a definition of the type is reachable.; //; // FIXME: The current implementation didn't consider about scope. For example,; // ```; // // m.cppm; // export module m;; // enum E1 { e1 };; // // Use.cpp; // import m;; // void test() {; // auto a = E1::e1; // Error as expected.; // auto b = e1; // Should be error. namespace-scope name e1 is not visible; // }; // ```; // For the above example, the current implementation would emit error for `a`; // correctly. However, the implementation wouldn't diagnose about `b` now.; // Since we only check the reachability for the parent only.; // See clang/test/CXX/module/module.interface/p7.cpp for example.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp:343,test,test,343,interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp,2,['test'],['test']
Testability,"// \Rightarrow fPixeltoYk = ymin - pylow \times\frac{yrange}{pyrange}; /// \f]; /// \f[; /// fPixeltoY = \frac{yrange}{pyrange}; /// \f]; ///; /// ### Computation of the coefficients in case of LOG scales; ///; /// #### Conversion from pixel coordinates to world coordinates; ///; /// \f[; /// u = \frac{Log(x) - Log(xmin)}{Log(xmax) - Log(xmin)} = \frac{Log(x/xmin)}{Log(xmax/xmin)} = \frac{px - pxlow}{pxrange}; /// \f]; ///; /// \f[ \Rightarrow Log(\frac{x}{xmin}) = u \times Log(\frac{xmax}{xmin}) \f]; /// \f[ x = xmin \times e^{(u \times Log(\frac{xmax}{xmin})} \f]; /// Let:; /// \f[ alfa = \frac{Log(\frac{xmax}{xmin})}{fAbsWNDC} \f]; ///; /// \f[ x = xmin \times e^{(-alfa \times pxlow)} + e^{(alfa \times px)} \f]; /// \f[ x = fPixeltoXk \times e^{(fPixeltoX \times px)} \f]; /// \f[ ==> fPixeltoXk = xmin \times e^{(-alfa*pxlow)} \f]; /// \f[ fPixeltoX = alfa \f]; ///; /// \f[; /// v = \frac{Log(y) - Log(ymin)}{Log(ymax) - Log(ymin)} = \frac{Log(y/ymin)}{Log(ymax/ymin)} = \frac{py - pylow}{pyrange}; /// \f]; /// Let:; /// \f[ beta = Log(\frac{ymax}{ymin}) \f]; /// \f[ Log(\frac{y}{ymin}) = beta \times pylow - beta \times py \f]; /// \f[ \frac{y}{ymin} = e^{(beta \times pylow - beta \times py)} \f]; /// \f[ y = ymin \times e^{(beta \times pylow)} \times e^{(-beta \times py)}\f]; /// \f[ \Rightarrow y = fPixeltoYk \times e^{(fPixeltoY \times py)} \f]; /// \f[ fPixeltoYk = ymin \times e^{(beta \times pylow)} \f]; /// \f[ fPixeltoY = -beta \f]; ///; /// #### Conversion from World coordinates to pixel coordinates; ///; /// \f[ px = pxlow + u*pxrange \f]; /// \f[ = pxlow + Log(x/xmin)/alfa \f]; /// \f[ = pxlow -Log(xmin)/alfa + Log(x)/alfa \f]; /// \f[ = fXtoPixelk + fXtoPixel*Log(x) \f]; /// \f[ \Rightarrow fXtoPixelk = pxlow -Log(xmin)/alfa \f]; /// \f[ \Rightarrow fXtoPixel = 1/alfa \f]; ///; /// \f[ py = pylow - Log(y/ymin)/beta \f]; /// \f[ = fYtoPixelk + fYtoPixel*Log(y) \f]; /// \f[ \Rightarrow fYtoPixelk = pylow - Log(ymin)/beta \f]; /// \f[ fYtoPixel = 1/beta \f]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx:2782,Log,Log,2782,graf2d/gpad/src/TPad.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TPad.cxx,10,['Log'],['Log']
Testability,// __assertfail() used to have a `noreturn` attribute. Unfortunately that; // contributed to triggering the longstanding bug in ptxas when assert was used; // in sufficiently convoluted code. See; // https://bugs.llvm.org/show_bug.cgi?id=27738 for the details.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/__clang_cuda_runtime_wrapper.h:139,assert,assert,139,interpreter/llvm-project/clang/lib/Headers/__clang_cuda_runtime_wrapper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/__clang_cuda_runtime_wrapper.h,1,['assert'],['assert']
Testability,"// __builtin_isfpclass has integer parameter that specify test mask. It is; // passed in (...), so it should be analyzed completely here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp:58,test,test,58,interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,1,['test'],['test']
Testability,"// __cplusplus > 201402L; // helper for exception base class testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/stltypes.cxx:61,test,testing,61,bindings/pyroot/cppyy/cppyy/test/stltypes.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/stltypes.cxx,1,['test'],['testing']
Testability,// __real is valid on scalars. This is a faster way of testing that.; // __imag can only produce an rvalue on scalars.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:55,test,testing,55,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,1,['test'],['testing']
Testability,"// `-analyzer-config optin.cplusplus.UninitializedObject:Pedantic=true`.; //; // - ""NotesAsWarnings"" (boolean). If set to true, the checker will emit a; // warning for each uninitialized field, as opposed to emitting one warning; // per constructor call, and listing the uninitialized fields that belongs; // to it in notes. Defaults to false.; //; // `-analyzer-config \; // optin.cplusplus.UninitializedObject:NotesAsWarnings=true`.; //; // - ""CheckPointeeInitialization"" (boolean). If set to false, the checker will; // not analyze the pointee of pointer/reference fields, and will only check; // whether the object itself is initialized. Defaults to false.; //; // `-analyzer-config \; // optin.cplusplus.UninitializedObject:CheckPointeeInitialization=true`.; //; // TODO: With some clever heuristics, some pointers should be dereferenced; // by default. For example, if the pointee is constructed within the; // constructor call, it's reasonable to say that no external object; // references it, and we wouldn't generate multiple report on the same; // pointee.; //; // - ""IgnoreRecordsWithField"" (string). If supplied, the checker will not; // analyze structures that have a field with a name or type name that; // matches the given pattern. Defaults to """".; //; // `-analyzer-config \; // optin.cplusplus.UninitializedObject:IgnoreRecordsWithField=""[Tt]ag|[Kk]ind""`.; //; // - ""IgnoreGuardedFields"" (boolean). If set to true, the checker will analyze; // _syntactically_ whether the found uninitialized object is used without a; // preceding assert call. Defaults to false.; //; // `-analyzer-config \; // optin.cplusplus.UninitializedObject:IgnoreGuardedFields=true`.; //; // Most of the following methods as well as the checker itself is defined in; // UninitializedObjectChecker.cpp.; //; // Some methods are implemented in UninitializedPointee.cpp, to reduce the; // complexity of the main checker file.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/UninitializedObject/UninitializedObject.h:2370,assert,assert,2370,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/UninitializedObject/UninitializedObject.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/UninitializedObject/UninitializedObject.h,1,['assert'],['assert']
Testability,"// `ReturnVal` might not always get set -- for example if we have a return; // statement of the form `return some_other_func()` and we decide not to; // analyze `some_other_func()`.; // In this case, we can't say anything about the joined return value -- we; // don't simply want to propagate the return value that we do have, because; // it might not be the correct one.; // This occurs for example in the test `ContextSensitiveMutualRecursion`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/DataflowEnvironment.cpp:407,test,test,407,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/DataflowEnvironment.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/DataflowEnvironment.cpp,1,['test'],['test']
Testability,// `SubExpr` and its parent logic operator might be part of different basic; // blocks. We try to access the value that is assigned to `SubExpr` in the; // corresponding environment.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/Transfer.cpp:28,log,logic,28,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/Transfer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/Transfer.cpp,1,['log'],['logic']
Testability,"// `regparm` is a special case: It's a type attribute but we still want; // to treat it as if it had been written on the declaration because that; // way we'll be able to handle it directly in `processTypeAttr()`.; // If we treated `regparm` it as if it had been written on the; // `DeclSpec`, the logic in `distributeFunctionTypeAttrFromDeclSepc()`; // would try to move it to the declarator, but that doesn't work: We; // can't remove the attribute from the list of declaration attributes; // because it might be needed by other declarators in the same; // declaration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp:298,log,logic,298,interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,1,['log'],['logic']
Testability,"// a ? b : false and a ? true : b are the canonical form of logical and/or.; // This includes !a ? b : false and !a ? true : b. Absorbing the not into; // the select by swapping operands would break recognition of this pattern; // in other analyses, so don't do that.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h:60,log,logical,60,interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/InstCombine/InstCombiner.h,1,['log'],['logical']
Testability,"// a couple of globals for access testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/advancedcpp.cxx:34,test,testing,34,bindings/pyroot/cppyy/cppyy/test/advancedcpp.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/advancedcpp.cxx,2,['test'],['testing']
Testability,"// a cylinderical logical shape",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLCylinder.h:18,log,logical,18,graf3d/gl/inc/TGLCylinder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLCylinder.h,1,['log'],['logical']
Testability,"// a faceset logical shape",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLFaceSet.h:13,log,logical,13,graf3d/gl/inc/TGLFaceSet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLFaceSet.h,1,['log'],['logical']
Testability,"// a logical (non-placed, local frame) drawable object",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLLogicalShape.h:5,log,logical,5,graf3d/gl/inc/TGLLogicalShape.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLLogicalShape.h,1,['log'],['logical']
Testability,"// a polyline logical shape",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLPolyLine.h:14,log,logical,14,graf3d/gl/inc/TGLPolyLine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLPolyLine.h,1,['log'],['logical']
Testability,"// a polymarker logical shape",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLPolyMarker.h:16,log,logical,16,graf3d/gl/inc/TGLPolyMarker.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLPolyMarker.h,1,['log'],['logical']
Testability,"// a spherical logical shape",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLSphere.h:15,log,logical,15,graf3d/gl/inc/TGLSphere.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLSphere.h,1,['log'],['logical']
Testability,"// accumulate MC experiments. Hold the test statistic function fixed, but; // fluctuate s and b within syst. errors for computing probabilities of; // having that outcome. (Alex Read's prescription -- errors are on the ensemble,; // not on the observed test statistic. This technique does not split outcomes.); // keep the tstats as sum log(1+s/b). convert to -2lnQ when preparing the results; // (reason -- like to keep the < signs right)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TLimit.cxx:39,test,test,39,hist/hist/src/TLimit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TLimit.cxx,3,"['log', 'test']","['log', 'test']"
Testability,// acosh(x) == log(x + sqrt(x*x - 1)),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULibCalls.cpp:15,log,log,15,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULibCalls.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULibCalls.cpp,1,['log'],['log']
Testability,"// actual logon security level",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/inc/TAuthenticate.h:10,log,logon,10,net/auth/inc/TAuthenticate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/inc/TAuthenticate.h,1,['log'],['logon']
Testability,"// actual test of profile projections",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:10,test,test,10,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['test'],['test']
Testability,"// actual test, basically see if either of the most extreme of the triangle points intersects r",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:10,test,test,10,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['test'],['test']
Testability,"// add ""Retrieve"", ""Finalize"" and ""Show Log"" buttons",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:40,Log,Log,40,gui/sessionviewer/src/TSessionViewer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx,1,['Log'],['Log']
Testability,"// add Log Level label and text entry",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:7,Log,Log,7,gui/sessionviewer/src/TSessionViewer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx,1,['Log'],['Log']
Testability,"// add N0, (and (AssertSext X, i1), 1) --> sub N0, X; // sub N0, (and (AssertSext X, i1), 1) --> add N0, X",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:17,Assert,AssertSext,17,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,2,['Assert'],['AssertSext']
Testability,"// add a dummy test to have the same outputfile for roottest; // otherwise it will complain that the output is different !",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/testGenVector.cxx:15,test,test,15,math/genvector/test/testGenVector.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/testGenVector.cxx,1,['test'],['test']
Testability,"// add events to training and testing trees",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataLoader.h:30,test,testing,30,tmva/tmva/inc/TMVA/DataLoader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataLoader.h,1,['test'],['testing']
Testability,// add more logic when FileDialog embed into main window,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/browser/controller/FileDialog.controller.js:12,log,logic,12,ui5/browser/controller/FileDialog.controller.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/browser/controller/FileDialog.controller.js,1,['log'],['logic']
Testability,"// add one empty label; // should be added in underflow bin; // to test merge of underflows",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:67,test,test,67,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['test'],['test']
Testability,"// add test of vector * matrix multiplication with aliasing; // bug #6157",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:7,test,test,7,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,1,['test'],['test']
Testability,"// add test with weights",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:7,test,test,7,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['test'],['test']
Testability,"// add transpose test; // see bug #65531",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:17,test,test,17,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,1,['test'],['test']
Testability,"// adding central is actually useless here but so we test this",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_TEfficiency.cxx:53,test,test,53,hist/hist/test/test_TEfficiency.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_TEfficiency.cxx,1,['test'],['test']
Testability,"// adjust min so if user activates log scale it isn't bad",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:35,log,log,35,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['log'],['log']
Testability,// adjust relocation info so resolution writes to the stub function,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldCOFFX86_64.h:54,stub,stub,54,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldCOFFX86_64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldCOFFX86_64.h,1,['stub'],['stub']
Testability,// adjust relocation info so resolution writes to the stub function; // Here an internal relocation type is used for resolving long branch via; // stub instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldCOFFAArch64.h:54,stub,stub,54,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldCOFFAArch64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldCOFFAArch64.h,2,['stub'],['stub']
Testability,"// after the method name is read, the testvar can be set",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:38,test,testvar,38,tmva/tmva/src/MethodBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx,1,['test'],['testvar']
Testability,"// alias; /// It's not easy to guarantee that this test always passes. It is not; /// deterministic because we time something across multiple processes and; /// sometimes some processes might be doing something else during the running; /// of these tests. That's why the test is disabled for now.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/test/test_ProcessTimer.cxx:51,test,test,51,roofit/multiprocess/test/test_ProcessTimer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/test/test_ProcessTimer.cxx,3,['test'],"['test', 'tests']"
Testability,// all log ticks (major or minor) created centrally,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:7,log,log,7,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,4,['log'],['log']
Testability,"// all normal ROOT methods uses indx+1 logic, but RHist has no underflow/overflow bins now",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:39,log,logic,39,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,6,['log'],['logic']
Testability,"// all unspecified are assigned to the smaller of training / testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:61,test,testing,61,tmva/tmva/src/DataSetFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx,1,['test'],['testing']
Testability,"// also test move-assignment",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_resptr.cxx:8,test,test,8,tree/dataframe/test/dataframe_resptr.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_resptr.cxx,1,['test'],['test']
Testability,"// also test that out-of-bound and repeated indices are ignored",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/vecops/test/vecops_rvec.cxx:8,test,test,8,math/vecops/test/vecops_rvec.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/vecops/test/vecops_rvec.cxx,1,['test'],['test']
Testability,"// also tests returning a type convertible to bool",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_simple.cxx:8,test,tests,8,tree/dataframe/test/dataframe_simple.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_simple.cxx,1,['test'],['tests']
Testability,"// altname now contains the full name of the class including a possible; // namespace if there has been a using namespace statement.; // At least in the case C<string [2]> (normalized) vs C<string[2]> (altname); // the TClassEdit normalization and the TMetaUtils normalization leads to; // two different space layout. To avoid an infinite recursion, we also; // add the test on (altname != name)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:370,test,test,370,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,1,['test'],['test']
Testability,"// always start from top level (testing only)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geompainter/src/TGeoChecker.cxx:32,test,testing,32,geom/geompainter/src/TGeoChecker.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geompainter/src/TGeoChecker.cxx,1,['test'],['testing']
Testability,"// and test [p0] notation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:7,test,test,7,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['test'],['test']
Testability,"// animation logo handling",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RootShower.cxx:13,log,logo,13,test/RootShower/RootShower.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RootShower.cxx,1,['log'],['logo']
Testability,// anonymous namespace; // Test whether a type name could be rebuilt from emitted debug info.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:27,Test,Test,27,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,1,['Test'],['Test']
Testability,"// any change in logical node visibility erase individual physical node settings",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/webviewer/src/RGeomData.cxx:17,log,logical,17,geom/webviewer/src/RGeomData.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/webviewer/src/RGeomData.cxx,1,['log'],['logical']
Testability,"// apply chi2 test to href",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranHist.cxx:14,test,test,14,math/unuran/test/unuranHist.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranHist.cxx,2,['test'],['test']
Testability,"// apply correction for weight square; // Compute Hessian of the loglikelihood function using the sum of the weight squared; // This method assumes:; // - a fit has been done before and a covariance matrix exists; // - the objective function is a likelihood function and Likelihood::UseSumOfWeightSquare(); // has been called before",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:65,log,loglikelihood,65,math/mathcore/src/Fitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx,1,['log'],['loglikelihood']
Testability,"// apply log level button",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/inc/TSessionViewer.h:9,log,log,9,gui/sessionviewer/inc/TSessionViewer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/inc/TSessionViewer.h,1,['log'],['log']
Testability,"// apply log transform on the bin data values",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx:9,log,log,9,math/mathcore/src/BinData.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx,1,['log'],['log']
Testability,"// apply range filter logic, cache the result",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RRange.hxx:22,log,logic,22,tree/dataframe/inc/ROOT/RDF/RRange.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RRange.hxx,1,['log'],['logic']
Testability,"// arm64_32 has to be compatible with the ARM logic here, which allows huge; // vectors for some reason.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/AArch64.cpp:46,log,logic,46,interpreter/llvm-project/clang/lib/CodeGen/Targets/AArch64.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/AArch64.cpp,1,['log'],['logic']
Testability,"// as an extra test, make sure that the vector reallocates between first and second entry",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_snapshot.cxx:15,test,test,15,tree/dataframe/test/dataframe_snapshot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_snapshot.cxx,1,['test'],['test']
Testability,"// as part of setting up a random test problem, generate a random; // set of upper, lower, and two-sided bounds",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/quadp/inc/TQpDataBase.h:34,test,test,34,math/quadp/inc/TQpDataBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/quadp/inc/TQpDataBase.h,1,['test'],['test']
Testability,// asinh(x) == log(x + sqrt(x*x + 1)),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULibCalls.cpp:15,log,log,15,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULibCalls.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULibCalls.cpp,1,['log'],['log']
Testability,// assert,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h:3,assert,assert,3,interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Sequence.h,1,['assert'],['assert']
Testability,"// assert (classLabledWidth >= valueLabelWidth + 2); // if (...) {Log() << kWARN << ""..."" << Endl; }; // TODO: Ensure matrices are same size.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:3,assert,assert,3,tmva/tmva/src/Factory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx,2,"['Log', 'assert']","['Log', 'assert']"
Testability,// assert OutLiveOut is a subset of LiveOut,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp:3,assert,assert,3,interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,1,['assert'],['assert']
Testability,"// assert non-existence",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx:3,assert,assert,3,tmva/tmva/src/Reader.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx,1,['assert'],['assert']
Testability,// assert okay,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Constants.cpp:3,assert,assert,3,interpreter/llvm-project/llvm/lib/IR/Constants.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Constants.cpp,1,['assert'],['assert']
Testability,"// assert required",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:3,assert,assert,3,tmva/tmva/src/MethodFisher.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx,3,['assert'],['assert']
Testability,"// assert that MBBI is a ""restore %g0, %g0, %g0"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/DelaySlotFiller.cpp:3,assert,assert,3,interpreter/llvm-project/llvm/lib/Target/Sparc/DelaySlotFiller.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/DelaySlotFiller.cpp,1,['assert'],['assert']
Testability,"// assert that the variables are either real values or categories",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:3,assert,assert,3,roofit/roofitcore/src/RooDataHist.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx,1,['assert'],['assert']
Testability,"// assert that the vector time is roughly Vc::double_v::Size times smaller than the scalar time; // allow 25% for 'safety'; // if (std::fabs((best_time_vector * Vc::double_v::Size) - best_time_scalar) > 0.25 * best_time_scalar) {; // ++ret;; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/testGenVectorVc.cxx:3,assert,assert,3,test/testGenVectorVc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/testGenVectorVc.cxx,1,['assert'],['assert']
Testability,"// assert(!Parts.empty() && ""need to have at least some parts"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ConstraintSystem.cpp:3,assert,assert,3,interpreter/llvm-project/llvm/lib/Analysis/ConstraintSystem.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ConstraintSystem.cpp,1,['assert'],['assert']
Testability,"// assert(!seed.Error().IsPosDef());",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/VariableMetricBuilder.cxx:3,assert,assert,3,math/minuit2/src/VariableMetricBuilder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/VariableMetricBuilder.cxx,1,['assert'],['assert']
Testability,// assert(ASan.UseAfterReturn == AsanDetectStackUseAfterReturnMode:Always); // void *FakeStack = __asan_stack_malloc_N(LocalStackSize);; // void *LocalStackBase = (FakeStack) ? FakeStack :; // alloca(LocalStackSize);,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp:3,assert,assert,3,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,1,['assert'],['assert']
Testability,// assert(ActiveMLocs[Dst].size() == 0);; //^^^ Legitimate scenario on account of un-clobbered slot being assigned to?; // Move set of active variables from one location to another.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:3,assert,assert,3,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['assert'],['assert']
Testability,"// assert(Neighbors.capacity() == (Points_.size() - 1));; // ^ True, but it is not quaranteed to be true in all the cases.; // Add noisy points to noise cluster.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp:3,assert,assert,3,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/Clustering.cpp,1,['assert'],['assert']
Testability,"// assert(end != endbuf);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TVirtualCollectionIterators.h:3,assert,assert,3,io/io/inc/TVirtualCollectionIterators.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TVirtualCollectionIterators.h,10,['assert'],['assert']
Testability,"// assert(fSize>0);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/LASymMatrix.h:3,assert,assert,3,math/minuit2/inc/Minuit2/LASymMatrix.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/LASymMatrix.h,2,['assert'],['assert']
Testability,"// assert(ifail == 0);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/matrix_op.h:3,assert,assert,3,math/smatrix/test/matrix_op.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/matrix_op.h,1,['assert'],['assert']
Testability,"// assert(iret == 0);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testFitPerf.cxx:3,assert,assert,3,roofit/roofit/test/testFitPerf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testFitPerf.cxx,1,['assert'],['assert']
Testability,"// assert(n >= 2);; // create the gaussians",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooFit.cxx:3,assert,assert,3,roofit/roofit/test/testRooFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooFit.cxx,1,['assert'],['assert']
Testability,"// assert(npar > 0);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnApplication.cxx:3,assert,assert,3,math/minuit2/src/MnApplication.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnApplication.cxx,2,['assert'],['assert']
Testability,"// assert(probValues.size() == 2*mvaValues.size());; // std::copy(probValues.begin()+nEvents, probValues.end(), mvaValues.begin() ); ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/MethodRSNNS.cxx:3,assert,assert,3,tmva/rmva/src/MethodRSNNS.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/src/MethodRSNNS.cxx,1,['assert'],['assert']
Testability,// assert: OldLiveIn is a subset of LiveTmp,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp:3,assert,assert,3,interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,1,['assert'],['assert']
Testability,"// assertIsChecked() happens very frequently, but under normal circumstances; // is supposed to be a no-op. So we want it to be inlined, but having a bunch; // of debug prints can cause the function to be too large for inlining. So; // it's important that we define this function out of line so that it can't be; // inlined.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h:3,assert,assertIsChecked,3,interpreter/llvm-project/llvm/include/llvm/Support/Error.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Error.h,1,['assert'],['assertIsChecked']
Testability,// assertion prevents us from needing llvm_unreachable in the StringSwitch; // below,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/MCA/RISCVCustomBehaviour.cpp:3,assert,assertion,3,interpreter/llvm-project/llvm/lib/Target/RISCV/MCA/RISCVCustomBehaviour.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/MCA/RISCVCustomBehaviour.cpp,2,['assert'],['assertion']
Testability,"// asymptotic formula for pnull and from paper Eur.Phys.J C 2011 71:1554; // we have 4 different cases:; // t(mu), t_tilde(mu) for the 2-sided; // q(mu) and q_tilde(mu) for the one -sided test statistics",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:188,test,test,188,roofit/roostats/src/AsymptoticCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx,1,['test'],['test']
Testability,// atanh(x) == (log(x+1) - log(x-1))/2;,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULibCalls.cpp:16,log,log,16,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULibCalls.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULibCalls.cpp,2,['log'],['log']
Testability,"// auto frame = x.frame();; // pol.plotOn(frame);; // polPdf.plotOn(frame);; // TCanvas canv;; // frame->Draw();; // canv.SaveAs(""/tmp/testWrapperPdf.png"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooWrapperPdf.cxx:135,test,testWrapperPdf,135,roofit/roofitcore/test/testRooWrapperPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooWrapperPdf.cxx,1,['test'],['testWrapperPdf']
Testability,"// auto opt = TestOptimizeConfigParameters(""BkgEffAtSigEff1"", GetMethod());; // auto opt = TestOptimizeConfigParameters(""BkgEffAtSigEff10"", GetMethod());; // Expect crash",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/TestOptimizeConfigParameters.cxx:14,Test,TestOptimizeConfigParameters,14,tmva/tmva/test/TestOptimizeConfigParameters.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/TestOptimizeConfigParameters.cxx,2,['Test'],['TestOptimizeConfigParameters']
Testability,"// auto opt = TestOptimizeConfigParameters(""BkgRejAtSigEff1"", GetMethod());; // auto opt = TestOptimizeConfigParameters(""BkgRejAtSigEff10"", GetMethod());; // Expect crash",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/TestOptimizeConfigParameters.cxx:14,Test,TestOptimizeConfigParameters,14,tmva/tmva/test/TestOptimizeConfigParameters.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/TestOptimizeConfigParameters.cxx,2,['Test'],['TestOptimizeConfigParameters']
Testability,"// auto opt = TestOptimizeConfigParameters(""SigEffAtBkg1"", GetMethod());; // auto opt = TestOptimizeConfigParameters(""SigEffAtBkg10"", GetMethod());; // Expect crash",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/TestOptimizeConfigParameters.cxx:14,Test,TestOptimizeConfigParameters,14,tmva/tmva/test/TestOptimizeConfigParameters.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/TestOptimizeConfigParameters.cxx,2,['Test'],['TestOptimizeConfigParameters']
Testability,"// auto-log the pad",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:8,log,log,8,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['log'],['log']
Testability,"// avoid cleaning histogram when running a single test suite",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:50,test,test,50,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['test'],['test']
Testability,"// bad tolerance for this test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testPolynomialRoots.cxx:26,test,test,26,math/mathmore/test/testPolynomialRoots.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testPolynomialRoots.cxx,1,['test'],['test']
Testability,"// be sure to have some underflow/overflow before expanding; // to test that case",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:67,test,test,67,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['test'],['test']
Testability,"// benchmark access by index",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx:3,benchmark,benchmark,3,test/tcollbm.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx,1,['benchmark'],['benchmark']
Testability,"// benchmark access by name",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx:3,benchmark,benchmark,3,test/tcollbm.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx,1,['benchmark'],['benchmark']
Testability,"// benchmark by index",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx:3,benchmark,benchmark,3,test/tcollbm.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx,1,['benchmark'],['benchmark']
Testability,"// benchmark by name",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx:3,benchmark,benchmark,3,test/tcollbm.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx,1,['benchmark'],['benchmark']
Testability,"// benchmark memory allocation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx:3,benchmark,benchmark,3,test/tcollbm.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx,1,['benchmark'],['benchmark']
Testability,"// benchmark results",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx:3,benchmark,benchmark,3,test/tcollbm.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollbm.cxx,1,['benchmark'],['benchmark']
Testability,"// bind is on the master process to avoid zombie children to hold on to binds; // start test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ.cpp:88,test,test,88,roofit/roofitZMQ/test/test_ZMQ.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ.cpp,1,['test'],['test']
Testability,"// bind is on the master process to avoid zombie children to hold on to binds; // start test: send 2 things, receive 1, send 1 more, finish",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ.cpp:88,test,test,88,roofit/roofitZMQ/test/test_ZMQ.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ.cpp,2,['test'],['test']
Testability,"// binomial log-like",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TRolke.cxx:12,log,log-like,12,math/physics/src/TRolke.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TRolke.cxx,1,['log'],['log-like']
Testability,"// bitcast (logic X, C) --> logic (bitcast X, C')",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp:12,log,logic,12,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,2,['log'],['logic']
Testability,"// bitcast(logic(X, bitcast(Y))) --> logic'(bitcast(X), Y)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:11,log,logic,11,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['log'],['logic']
Testability,"// bitcast(logic(Y, bitcast(X))) --> logic'(bitcast(Y), X)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp:11,log,logic,11,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,2,['log'],['logic']
Testability,"// bitcast(logic(bitcast(X), Y)) --> logic'(X, bitcast(Y))",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:11,log,logic,11,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,4,['log'],['logic']
Testability,"// bitcast(logic(bitcast(X), bitcast(Y))) -> bitcast'(logic(bitcast'(X), Y))",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp:11,log,logic,11,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,2,['log'],['logic']
Testability,"// boundary Poisson value; // 11-13 TEST PLC CONFINT PRODUCT POISSON : Observed value range is [0,30] for x=s+b and [0,80] for y=2*s*1.2^beta",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:36,TEST,TEST,36,roofit/roostats/test/stressRooStats.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx,1,['TEST'],['TEST']
Testability,"// boundary case CL -> 0; // 6-10 TEST PLC CONFINT SIMPLE POISSON : Observed value range is [0,1000]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:34,TEST,TEST,34,roofit/roostats/test/stressRooStats.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx,1,['TEST'],['TEST']
Testability,"// box/frustum overlap test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLCamera.h:23,test,test,23,graf3d/gl/inc/TGLCamera.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLCamera.h,1,['test'],['test']
Testability,"// box/viewport overlap test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLCamera.h:24,test,test,24,graf3d/gl/inc/TGLCamera.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLCamera.h,1,['test'],['test']
Testability,"// br(!x, t, f) -> br(x, f, t); // Avoid doing this optimization when instrumenting a condition for MC/DC.; // LNot is taken as part of the condition for simplicity, and changing its; // sense negatively impacts test vector tracking.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:212,test,test,212,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,1,['test'],['test']
Testability,"// build classifier name in Test tree; // MVA prefix (e.g., ""TMVA_"")",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:28,Test,Test,28,tmva/tmva/inc/TMVA/MethodBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h,1,['Test'],['Test']
Testability,"// build test statistic",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:9,test,test,9,roofit/roostats/test/stressRooStats_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h,1,['test'],['test']
Testability,// buildInlinerPipeline in the pass builder sets HotCallSiteThreshold to 0; // for the prelink phase of the AutoFDO + ThinLTO build. Honor the logic by; // falling back to the cost-based metric.; // TODO: Improve this hacky condition.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp:143,log,logic,143,interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,1,['log'],['logic']
Testability,"// button being tested",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:16,test,tested,16,test/stressGUI.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx,1,['test'],['tested']
Testability,"// by top node visibility always enabled and harm logic; // later visibility can be controlled by other means; // mgr->GetTopNode()->GetVolume()->SetVisibility(kFALSE);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/webviewer/src/RGeomData.cxx:50,log,logic,50,geom/webviewer/src/RGeomData.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/webviewer/src/RGeomData.cxx,1,['log'],['logic']
Testability,"// cached reshaped data tensor; // counter of trained batches for computing testing and variance means",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/BatchNormLayer.h:76,test,testing,76,tmva/tmva/inc/TMVA/DNN/BatchNormLayer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/BatchNormLayer.h,1,['test'],['testing']
Testability,"// calculate data element and gradient: returns derivative of log(pdf)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliFCNAdapter.h:62,log,log,62,math/minuit2/inc/Minuit2/FumiliFCNAdapter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliFCNAdapter.h,1,['log'],['log']
Testability,"// calculate the MVA value; // the argument is used for internal ranking tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodLikelihood.h:73,test,tests,73,tmva/tmva/inc/TMVA/MethodLikelihood.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodLikelihood.h,1,['test'],['tests']
Testability,"// cannot test on exe - use read instead",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx:10,test,test,10,core/winnt/src/TWinNTSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx,1,['test'],['test']
Testability,"// case of 2 sided test statistic; // need to compute numerically",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:19,test,test,19,roofit/roostats/src/AsymptoticCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx,1,['test'],['test']
Testability,"// case of 3D (needs to be tested)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:27,test,tested,27,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['test'],['tested']
Testability,"// case systematic is a log-normal constraint",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx:24,log,log-normal,24,roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx,1,['log'],['log-normal']
Testability,"// case to catch the delta function that ends up at exactly 0 for the one-sided tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/Asymptotics.cxx:80,test,tests,80,roofit/xroofit/src/Asymptotics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/Asymptotics.cxx,1,['test'],['tests']
Testability,"// case user provides log of pdf",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/src/TUnuran.cxx:22,log,log,22,math/unuran/src/TUnuran.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/src/TUnuran.cxx,1,['log'],['log']
Testability,"// catches case where pyROOT has converted TestStatistic enum to int",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:43,Test,TestStatistic,43,roofit/xroofit/src/xRooNLLVar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx,1,['Test'],['TestStatistic']
Testability,"// change cdf for tester",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranDistr.cxx:18,test,tester,18,math/unuran/test/unuranDistr.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranDistr.cxx,1,['test'],['tester']
Testability,// check AvailableExternallyLinkage here as getKindForGlobal() asserts,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZSubtarget.cpp:63,assert,asserts,63,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZSubtarget.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZSubtarget.cpp,1,['assert'],['asserts']
Testability,"// check fit result to test data",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/stressHistFactory.cxx:23,test,test,23,roofit/histfactory/test/stressHistFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/stressHistFactory.cxx,1,['test'],['test']
Testability,"// check for each class the number of training and testing events, the requested number and the available number",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:51,test,testing,51,tmva/tmva/src/DataSetFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx,1,['test'],['testing']
Testability,"// check format after log step",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGNumberEntry.cxx:22,log,log,22,gui/gui/src/TGNumberEntry.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGNumberEntry.cxx,1,['log'],['log']
Testability,"// check if enough or too many events are already in the training/testing eventvectors of the class cls",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:66,test,testing,66,tmva/tmva/src/DataSetFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx,1,['test'],['testing']
Testability,"// check if exists a log-normal constraint",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx:21,log,log-normal,21,roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx,1,['log'],['log-normal']
Testability,"// check if log-likelihood for xprime had an error status",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx:12,log,log-likelihood,12,roofit/roostats/src/MetropolisHastings.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx,1,['log'],['log-likelihood']
Testability,"// check if same toys have been used for the test statistic distribution",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:45,test,test,45,roofit/roostats/src/HypoTestInverterResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx,1,['test'],['test']
Testability,"// check test sanity",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_snapshot.cxx:9,test,test,9,tree/dataframe/test/dataframe_snapshot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_snapshot.cxx,1,['test'],['test']
Testability,"// check whether all intervals not including tau=nullptr; // have the same (logarithmic) size",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx:76,log,logarithmic,76,hist/unfold/src/TUnfold.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx,1,['log'],['logarithmic']
Testability,"// check whether test point is actually inside the bin boundaries; // is not necessarily the case if the point as the range of the bin which is NOT determined by a splitting but by the minimum coordinate of points inside the bin",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/newKDTreeTest.cxx:17,test,test,17,math/mathcore/test/newKDTreeTest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/newKDTreeTest.cxx,1,['test'],['test']
Testability,"// checkSspMBB:; // xor vreg1, vreg1; // rdssp vreg1; // test vreg1, vreg1; // je sinkMBB # Jump if Shadow Stack is not supported; // fallMBB:; // mov buf+24/12(%rip), vreg2; // sub vreg1, vreg2; // jbe sinkMBB # No need to fix the Shadow Stack; // fixShadowMBB:; // shr 3/2, vreg2; // incssp vreg2 # fix the SSP according to the lower 8 bits; // shr 8, vreg2; // je sinkMBB; // fixShadowLoopPrepareMBB:; // shl vreg2; // mov 128, vreg3; // fixShadowLoopMBB:; // incssp vreg3; // dec vreg2; // jne fixShadowLoopMBB # Iterate until you finish fixing; // # the Shadow Stack; // sinkMBB:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:57,test,test,57,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['test'],['test']
Testability,// cl.exe existing isn't a conclusive test for a VC toolchain; clang also; // has a cl.exe. So let's check for link.exe too.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/WindowsDriver/MSVCPaths.cpp:38,test,test,38,interpreter/llvm-project/llvm/lib/WindowsDriver/MSVCPaths.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/WindowsDriver/MSVCPaths.cpp,1,['test'],['test']
Testability,"// clang-format off; /**; \class ROOT::Experimental::EColumnType; \ingroup NTuple; \brief The available trivial, native content types of a column. More complex types, such as classes, get translated into columns of such simple types by the RField.; When changed, remember to update; - RColumnElement::Generate(); - RColumnElement::GetTypeName(); - RColumnElement::GetValidBitRange(); - RColumnElement template specializations / packing & unpacking; - If necessary, endianess handling for the packing + unit test in ntuple_endian; - RNTupleSerializer::[Des|S]erializeColumnType; */; // clang-format on",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleUtil.hxx:507,test,test,507,tree/ntuple/v7/inc/ROOT/RNTupleUtil.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleUtil.hxx,1,['test'],['test']
Testability,"// clang-format off; /**; \class ROOT::Experimental::Internal::RClusterPool; \ingroup NTuple; \brief Managed a set of clusters containing compressed and packed pages. The cluster pool steers the preloading of (partial) clusters. There is a two-step pipeline: in a first step,; compressed pages are read from clusters into a memory buffer. The second pipeline step decompresses the pages; and pushes them into the page pool. The actual logic of reading and unzipping is implemented by the page source.; The cluster pool only orchestrates the work queues for reading and unzipping. It uses one extra I/O thread for; reading waits for data from storage and generates no CPU load. The unzipping step of the pipeline therefore behaves differently depending on whether or not implicit multi-threading; is turned on. If it is turned off, i.e. in a single-threaded environment, the cluster pool will only read the; compressed pages and the page source has to uncompresses pages at a later point when data from the page is requested.; */; // clang-format on",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RClusterPool.hxx:435,log,logic,435,tree/ntuple/v7/inc/ROOT/RClusterPool.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RClusterPool.hxx,1,['log'],['logic']
Testability,"// class StandaloneMenu; /** @summary Create JSROOT menu; * @desc See {@link JSRootMenu} class for detailed list of methods; * @param {object} [evnt] - event object like mouse context menu event; * @param {object} [handler] - object with handling function, in this case one not need to bind function; * @param {string} [menuname] - optional menu name; * @example; * import { createMenu } from 'https://root.cern/js/latest/modules/gui/menu.mjs';; * let menu = await createMenu());; * menu.add('First', () => console.log('Click first'));; * let flag = true;; * menu.addchk(flag, 'Checked', arg => console.log(`Now flag is ${arg}`));; * menu.show(); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:515,log,log,515,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,4,['log'],['log']
Testability,"// class TFile; /** @summary Reconstruct ROOT object from binary buffer; * @desc Method can be used to reconstruct ROOT objects from binary buffer; * which can be requested from running THttpServer, using **root.bin** request; * To decode data, one has to request streamer infos data __after__ object data; * as it shown in example.; *; * Method provided for convenience only to see how binary IO works.; * It is strongly recommended to use **root.json** request to get data directly in; * JSON format; *; * @param {string} class_name - Class name of the object; * @param {binary} obj_rawdata - data of object root.bin request; * @param {binary} sinfo_rawdata - data of streamer info root.bin request; * @return {object} - created JavaScript object; * @example; *; * import { httpRequest } from 'http://localhost:8080/jsrootsys/modules/core.mjs';; * import { reconstructObject } from 'http://localhost:8080/jsrootsys/modules/io.mjs';; *; * let obj_data = await httpRequest('http://localhost:8080/Files/job1.root/hpx/root.bin', 'buf');; * let si_data = await httpRequest('http://localhost:8080/StreamerInfo/root.bin', 'buf');; * let histo = await reconstructObject('TH1F', obj_data, si_data);; * console.log(`Get histogram with title = ${histo.fTitle}`);; *; * // request same data via root.json request; * httpRequest('http://localhost:8080/Files/job1.root/hpx/root.json', 'object'); * .then(histo => console.log(`Get histogram with title = ${histo.fTitle}`)); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/modules/io.mjs:1203,log,log,1203,js/modules/io.mjs,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/modules/io.mjs,2,['log'],['log']
Testability,"// class TProxyFile; /** @summary Open ROOT file for reading; * @desc Generic method to open ROOT file for reading; * Following kind of arguments can be provided:; * - string with file URL (see example). In node.js environment local file like 'file://hsimple.root' can be specified; * - [File]{@link https://developer.mozilla.org/en-US/docs/Web/API/File} instance which let read local files from browser; * - [ArrayBuffer]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer} instance with complete file content; * - [FileProxy]{@link FileProxy} let access arbitrary files via tiny proxy API; * @param {string|object} arg - argument for file open like url, see details; * @return {object} - Promise with {@link TFile} instance when file is opened; * @example; *; * import { openFile } from 'https://root.cern/js/latest/modules/io.mjs';; * let f = await openFile('https://root.cern/js/files/hsimple.root');; * console.log(`Open file ${f.getFileName()}`); */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:964,log,log,964,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['log']
Testability,"// class to load basic configuration for all classification tests,; // like environment variables and data in the DataLoader.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/envelope/testClassification.cxx:60,test,tests,60,tmva/tmva/test/envelope/testClassification.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/envelope/testClassification.cxx,1,['test'],['tests']
Testability,"// class to test unuran dist",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/UnuRanDist.h:12,test,test,12,math/mathmore/test/UnuRanDist.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/UnuRanDist.h,1,['test'],['test']
Testability,"// classifier response distributions for test sample",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:41,test,test,41,tmva/tmva/src/MethodBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx,1,['test'],['test']
Testability,"// clip rect in logo",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/Win32Splash.cxx:16,log,logo,16,core/winnt/src/Win32Splash.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/Win32Splash.cxx,2,['log'],['logo']
Testability,"// co_await promise.final_suspend() could end up calling; // __builtin_coro_resume for symmetric transfer if await_suspend(); // returns a handle. In that case, even __builtin_coro_resume is not; // declared as noexcept and may throw, it does not throw _into_ the; // coroutine that just suspended, but rather throws back out from; // whoever called coroutine_handle::resume(), hence we claim that; // logically it does not throw.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCoroutine.cpp:402,log,logically,402,interpreter/llvm-project/clang/lib/Sema/SemaCoroutine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCoroutine.cpp,1,['log'],['logically']
Testability,"// code from kSamples (R) F. Scholz; /* computes the k-sample Anderson-Darling test statistics in both original ; and alternative versions for the nonparametric (rank) test described in; Scholz F.W. and Stephens M.A. (1987), K-sample Anderson-Darling Tests,; Journal of the American Statistical Association, Vol 82, No. 399,; pp. 918-924. Arguments:; adk: double array with length 2, stores AkN2 and AakN2; k: integer, number of samples being compared; x: double array storing the concatenated samples in the same order as ns; ns: integer array storing the k sample sizes, corresponding to x; zstar: double array storing the l distinct ordered observations in the; pooled sample; l: integer, length of zstar. Outputs:; when the computation ends, AkN2 and AakN2 are stored in the given memory; pointed by adk; */; /* counts and returns the number of occurrence of a given number ; in a double array */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx:79,test,test,79,math/mathcore/src/GoFTest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx,3,"['Test', 'test']","['Tests', 'test']"
Testability,"// command_line->AppendSwitch(""allow-file-access-from-files"");; // command_line->AppendSwitch(""disable-web-security"");; // if (fBatch) {; // command_line->AppendSwitch(""disable-gpu"");; // command_line->AppendSwitch(""disable-gpu-compositing"");; // command_line->AppendSwitch(""disable-gpu-sandbox"");; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/cefdisplay/src/simple_app.cxx:287,sandbox,sandbox,287,gui/cefdisplay/src/simple_app.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/cefdisplay/src/simple_app.cxx,1,['sandbox'],['sandbox']
Testability,"// comparison for test purposes; // std::cout << ""lb "" << lowerBin << "" hb "" << higherBin << "" lbv "" << lowerBinValue << "" hbv "" << higherBinValue << "" frac "" << fraction << std::endl;; // std::cout << ""y "" << y << "" inv x "" << x << "" straight y "" << GetVal(x) << std::endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx:18,test,test,18,tmva/tmva/src/PDF.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx,1,['test'],['test']
Testability,"// complete type in Binned test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:27,test,test,27,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,4,['test'],['test']
Testability,"// complete type in MultiBinnedConstraint test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:42,test,test,42,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,4,['test'],['test']
Testability,"// complex data tests Fisher for comparison",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:16,test,tests,16,tmva/tmva/test/stressTMVA.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx,1,['test'],['tests']
Testability,"// complex data tests with MLP",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:16,test,tests,16,tmva/tmva/test/stressTMVA.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx,1,['test'],['tests']
Testability,"// complex logic with intermediate update; // while TTree reading not synchronized with drawing,; // next portion can appear before previous is drawn; // critical is last drawing which should wait for previous one; // therefore last_pr is kept as indication that promise is not yet processed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:11,log,logic,11,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['logic']
Testability,"// compute KS test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tkde.cxx:14,test,test,14,hist/hist/test/test_tkde.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tkde.cxx,1,['test'],['test']
Testability,"// compute loss in training or at test time",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:34,test,test,34,tmva/tmva/src/MethodDL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx,1,['test'],['test']
Testability,// compute stub buffer size for the given section,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp:11,stub,stub,11,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp,1,['stub'],['stub']
Testability,"// compute test error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h:11,test,test,11,tmva/tmva/test/DNN/TestOptimization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h,1,['test'],['test']
Testability,"// compute the normalized test statistic ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx:26,test,test,26,math/mathcore/src/GoFTest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx,2,['test'],['test']
Testability,// computeDeadSymbolsAndUpdateIndirectCalls should have marked all; // copies live. Note that it is possible that there is a GUID collision; // between internal symbols with the same name in different files of the; // same name but not enough distinguishing path. Because; // computeDeadSymbolsAndUpdateIndirectCalls should conservatively mark; // all copies live we can assert here that all are dead if any copy is; // dead.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/ModuleSummaryIndex.cpp:371,assert,assert,371,interpreter/llvm-project/llvm/lib/IR/ModuleSummaryIndex.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/ModuleSummaryIndex.cpp,1,['assert'],['assert']
Testability,"// concrete classes in getParameters (testing, remove later)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/RooAbsL.cxx:38,test,testing,38,roofit/roofitcore/src/TestStatistics/RooAbsL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/RooAbsL.cxx,1,['test'],['testing']
Testability,"// configure symlog scale with 10 for linear range, rest will be logarithmic, including negative",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/symlog.cxx:65,log,logarithmic,65,tutorials/rcanvas/symlog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/symlog.cxx,1,['log'],['logarithmic']
Testability,"// console.log( '*VERTEX*', vertexGlsl );; // console.log( '*FRAGMENT*', fragmentGlsl );",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:11,log,log,11,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,4,['log'],['log']
Testability,"// console.log( 'THREE.Cache', 'Adding key:', key );",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:11,log,log,11,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['log']
Testability,"// console.log( 'THREE.Cache', 'Checking key:', key );",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:11,log,log,11,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['log']
Testability,"// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:11,log,log,11,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['log']
Testability,"// console.log("">>>table scene"", scene);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/controller/EveTable.controller.js:11,log,log,11,ui5/eve7/controller/EveTable.controller.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/controller/EveTable.controller.js,1,['log'],['log']
Testability,"// console.log(""CHECK select IMPLIED"", pthis);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveScene.js:11,log,log,11,ui5/eve7/lib/EveScene.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveScene.js,1,['log'],['log']
Testability,"// console.log(""EveElements.prototype.makeFlatBox triangulate"", idxBegin, idxEnd);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveElements.js:11,log,log,11,ui5/eve7/lib/EveElements.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveElements.js,2,['log'],['log']
Testability,"// console.log(""EveManager web socket opened."");; // Presumably not needed at this point - known places where issues; // can cause server-client protocol breach are handled.; // window.onerror = this.globExceptionHandler.bind(this);; // console.log(""EveManager registered global error handler in window.onerror"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveManager.js:11,log,log,11,ui5/eve7/lib/EveManager.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveManager.js,2,['log'],['log']
Testability,"// console.log(""EveManager.ParseUpdateTriggersAndProcessPostStream"", el.UT_PostStream, this[el.UT_PostStream]);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveManager.js:11,log,log,11,ui5/eve7/lib/EveManager.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveManager.js,1,['log'],['log']
Testability,"// console.log(""EveManager.SelectElement"", element, scene.$receivers[0].viewer.outline_pass.id2obj_map);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveManager.js:11,log,log,11,ui5/eve7/lib/EveManager.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveManager.js,1,['log'],['log']
Testability,"// console.log(""EveManager.UT_Selection_Refresh_State identical sets for primary"", id);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveManager.js:11,log,log,11,ui5/eve7/lib/EveManager.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveManager.js,1,['log'],['log']
Testability,"// console.log(""EveManager.UnselectElement"", element, scene.$receivers[0].viewer.outline_pass.id2obj_map);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveManager.js:11,log,log,11,ui5/eve7/lib/EveManager.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveManager.js,1,['log'],['log']
Testability,"// console.log(""EveScene.SelectElement "", selection_obj.fName, element_id, selection_obj.fElementId, outline_map);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveScene.js:11,log,log,11,ui5/eve7/lib/EveScene.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveScene.js,1,['log'],['log']
Testability,"// console.log(""EveScene.UnselectElement "", selection_obj.fName, element_id, selection_obj.fElementId, outline_map);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveScene.js:11,log,log,11,ui5/eve7/lib/EveScene.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveScene.js,1,['log'],['log']
Testability,"// console.log(""EveScene.processElementSelected"", obj3d, col, index, evnt);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveScene.js:11,log,log,11,ui5/eve7/lib/EveScene.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveScene.js,1,['log'],['log']
Testability,"// console.log(""GLC::keydown"", event.key, event.code, event);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/GlViewerRCore.js:11,log,log,11,ui5/eve7/lib/GlViewerRCore.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/GlViewerRCore.js,1,['log'],['log']
Testability,"// console.log(""GLC::mousedown"", this, glc, event, event.offsetX, event.offsetY);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/GlViewerRCore.js:11,log,log,11,ui5/eve7/lib/GlViewerRCore.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/GlViewerRCore.js,1,['log'],['log']
Testability,"// console.log(""GLC::onMouseMoveTimeout"", this, event, x, y);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/GlViewerThree.js:11,log,log,11,ui5/eve7/lib/GlViewerThree.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/GlViewerThree.js,1,['log'],['log']
Testability,"// console.log(""GLC::showContextMenu"", this, menu); // See js/modules/gui/menu.mjs createMenu(), menu.add()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/GlViewerThree.js:11,log,log,11,ui5/eve7/lib/GlViewerThree.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/GlViewerThree.js,1,['log'],['log']
Testability,"// console.log(""GLC::showContextMenu"", this, menu); // See js/modules/menu/menu.mjs createMenu(), menu.add()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/GlViewerRCore.js:11,log,log,11,ui5/eve7/lib/GlViewerRCore.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/GlViewerRCore.js,1,['log'],['log']
Testability,"// console.log(""Holes first"", holesFirst);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:11,log,log,11,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['log']
Testability,"// console.log(""ImportSceneChange"", scene.fName, msg);; // notify scenes for beginning of changes and; // notify for element removal",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveManager.js:11,log,log,11,ui5/eve7/lib/EveManager.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveManager.js,1,['log'],['log']
Testability,"// console.log(""LEGO element selected"", element_id);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/controller/Lego.controller.js:11,log,log,11,ui5/eve7/controller/Lego.controller.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/controller/Lego.controller.js,1,['log'],['log']
Testability,"// console.log(""LEGO onSceneCreate"", id);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/controller/Lego.controller.js:11,log,log,11,ui5/eve7/controller/Lego.controller.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/controller/Lego.controller.js,1,['log'],['log']
Testability,"// console.log(""RENDER FOR PICKING"", this.scene, this.camera, this.canvas, this.renderer);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/GlViewerRCore.js:11,log,log,11,ui5/eve7/lib/GlViewerRCore.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/GlViewerRCore.js,2,['log'],['log']
Testability,"// console.log(""RENDER"", this.scene, this.camera, this.canvas, this.renderer);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/GlViewerRCore.js:11,log,log,11,ui5/eve7/lib/GlViewerRCore.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/GlViewerRCore.js,1,['log'],['log']
Testability,"// console.log(""REQUEST RENDER"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/GlViewerRCore.js:11,log,log,11,ui5/eve7/lib/GlViewerRCore.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/GlViewerRCore.js,1,['log'],['log']
Testability,"// console.log(""SN"", SN, ""texture dim ="", boxset.texX, boxset.texY);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveElementsRCore.js:11,log,log,11,ui5/eve7/lib/EveElementsRCore.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveElementsRCore.js,1,['log'],['log']
Testability,"// console.log(""ServerEndRedrawCallback "", this.listScenesToRedraw);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveManager.js:11,log,log,11,ui5/eve7/lib/EveManager.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveManager.js,1,['log'],['log']
Testability,"// console.log(""VIEW DATA"", data);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/controller/GL.controller.js:11,log,log,11,ui5/eve7/controller/GL.controller.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/controller/GL.controller.js,1,['log'],['log']
Testability,"// console.log(""Warning: lines are a straight sequence"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:11,log,log,11,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['log']
Testability,"// console.log(""Warning: lines are a straight spike"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:11,log,log,11,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['log']
Testability,"// console.log(""attachRowSelectionChange no path "", oData);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/controller/EveTable.controller.js:11,log,log,11,ui5/eve7/controller/EveTable.controller.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/controller/EveTable.controller.js,1,['log'],['log']
Testability,"// console.log(""collectionChanged "", oEvent.getSource());",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/controller/EveTable.controller.js:11,log,log,11,ui5/eve7/controller/EveTable.controller.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/controller/EveTable.controller.js,1,['log'],['log']
Testability,"// console.log(""color mir - .... "", mir);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/controller/Ged.controller.js:11,log,log,11,ui5/eve7/controller/Ged.controller.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/controller/Ged.controller.js,1,['log'],['log']
Testability,"// console.log(""createThreejsRenderer"", this.controller.kind, ""w="", w, ""h="", h);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/GlViewerThree.js:11,log,log,11,ui5/eve7/lib/GlViewerThree.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/GlViewerThree.js,1,['log'],['log']
Testability,"// console.log(""idx ="", idx, ""path idx = "", ui);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/controller/EveTable.controller.js:11,log,log,11,ui5/eve7/controller/EveTable.controller.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/controller/EveTable.controller.js,1,['log'],['log']
Testability,"// console.log(""make jet "", jet);; // let jet_ro = new RC.Object3D();",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveElementsRCore.js:11,log,log,11,ui5/eve7/lib/EveElementsRCore.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveElementsRCore.js,1,['log'],['log']
Testability,"// console.log(""make jet "", jet);; // let jet_ro = new THREE.Object3D();",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveElements.js:11,log,log,11,ui5/eve7/lib/EveElements.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveElements.js,1,['log'],['log']
Testability,"// console.log(""makeStraightLineSet ..."");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveElementsRCore.js:11,log,log,11,ui5/eve7/lib/EveElementsRCore.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveElementsRCore.js,1,['log'],['log']
Testability,"// console.log(""manager updated"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/controller/Main.controller.js:11,log,log,11,ui5/eve7/controller/Main.controller.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/controller/Main.controller.js,1,['log'],['log']
Testability,"// console.log(""picked point >>> "", x, y, data.p.depth);; // console.log(""picked camera vector "", e);; // pthis.camera.testMtx.dump();",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/GlViewerRCore.js:11,log,log,11,ui5/eve7/lib/GlViewerRCore.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/GlViewerRCore.js,3,"['log', 'test']","['log', 'testMtx']"
Testability,"// console.log(""picked word view coordinates "", e);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/GlViewerRCore.js:11,log,log,11,ui5/eve7/lib/GlViewerRCore.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/GlViewerRCore.js,1,['log'],['log']
Testability,"// console.log(""resetRenderer 3D scene bbox "", sbbox, "", look_at "", this.rot_center);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/GlViewerRCore.js:11,log,log,11,ui5/eve7/lib/GlViewerRCore.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/GlViewerRCore.js,1,['log'],['log']
Testability,"// console.log(""resetThreejsRenderer 2D scene bbox ex ey"", sbbox, ex, ey, "", camera_pos "", posC, "", look_at "", this.rot_center);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/GlViewerThree.js:11,log,log,11,ui5/eve7/lib/GlViewerThree.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/GlViewerThree.js,1,['log'],['log']
Testability,"// console.log(""resetThreejsRenderer 3D scene bbox "", sbbox, "", camera_pos "", posC, "", look_at "", this.rot_center);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/GlViewerThree.js:11,log,log,11,ui5/eve7/lib/GlViewerThree.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/GlViewerThree.js,1,['log'],['log']
Testability,"// console.log(""set index "", nt,"":"", idxBuff[nt*3], idxBuff[nt*3+1],idxBuff[nt*3+2]);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveElements.js:11,log,log,11,ui5/eve7/lib/EveElements.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveElements.js,2,['log'],['log']
Testability,"// console.log(""set splitter height >>> "" , height);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/controller/Main.controller.js:11,log,log,11,ui5/eve7/controller/Main.controller.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/controller/Main.controller.js,1,['log'],['log']
Testability,"// console.log(""table found "",product.childs[0] );",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/controller/EveTable.controller.js:11,log,log,11,ui5/eve7/controller/EveTable.controller.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/controller/EveTable.controller.js,1,['log'],['log']
Testability,"// console.log('ArrayBuffer size ',; // msg.byteLength, 'offset', offset);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveManager.js:11,log,log,11,ui5/eve7/lib/EveManager.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveManager.js,1,['log'],['log']
Testability,"// console.log('GET_MSG ' + msg.slice(0,30));",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:11,log,log,11,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['log']
Testability,"// console.log('MSG', msg.substr(0,20));",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/browser/controller/Browser.controller.js:11,log,log,11,ui5/browser/controller/Browser.controller.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/browser/controller/Browser.controller.js,1,['log'],['log']
Testability,"// console.log('ON MATCHED', args.viewName);; // console.log('MORE DATA', EVE.$eve7tmp);; // console.log('COMPONENT DATA', Component.getOwnerComponentFor(this.getView()).getComponentData());",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/controller/GL.controller.js:11,log,log,11,ui5/eve7/controller/GL.controller.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/controller/GL.controller.js,3,['log'],['log']
Testability,"// console.log('SUMMURY: detect changed', elem.id, elem.path);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/controller/Summary.controller.js:11,log,log,11,ui5/eve7/controller/Summary.controller.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/controller/Summary.controller.js,1,['log'],['log']
Testability,"// console.log('Sending request ', msg.slice(0,60));",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:11,log,log,11,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['log']
Testability,"// console.log('get JSON ', msg.length-4, obj._typename);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:11,log,log,11,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['log']
Testability,// console.log('ignore hist title in online canvas');,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/modules/hist2d/TH2Painter.mjs:11,log,log,11,js/modules/hist2d/TH2Painter.mjs,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/modules/hist2d/TH2Painter.mjs,1,['log'],['log']
Testability,"// console.log('item pressed', item.getText(), elem);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/controller/Main.controller.js:11,log,log,11,ui5/eve7/controller/Main.controller.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/controller/Main.controller.js,2,['log'],['log']
Testability,// console.log(`Add branch ${branch.fName}`);,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:11,log,log,11,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['log']
Testability,// console.log(`Change maxranges to ${file.fMaxRanges} last ${last}`);,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:11,log,log,11,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['log']
Testability,// console.log(`Collect visibles in worker ${e.data.new_nodes.length} takes ${e.data.tm2-e.data.tm1}`);,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/scripts/geoworker.js:11,log,log,11,js/scripts/geoworker.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/scripts/geoworker.js,1,['log'],['log']
Testability,"// console.log(`GET MSG len:${msg.length} ${msg.slice(0,60)}`);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:11,log,log,11,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['log']
Testability,// console.log(`GET chid=0 message ${msg}`);,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/modules/webwindow.mjs:11,log,log,11,js/modules/webwindow.mjs,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/modules/webwindow.mjs,1,['log'],['log']
Testability,// console.log(`Limit for camera ${camVol} faces in camera view ${arg.totalcam}`);,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:11,log,log,11,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['log']
Testability,"// console.log(`RECV ${mhdr} len: ${msg.length} ${msg.slice(0,70)} ...`);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/geom/controller/GeomHierarchy.controller.js:11,log,log,11,ui5/geom/controller/GeomHierarchy.controller.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/geom/controller/GeomHierarchy.controller.js,2,['log'],['log']
Testability,"// console.log(`Sending ${msg.length} ${msg.slice(0,40)}`);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:11,log,log,11,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['log']
Testability,// console.log(`Volume boundary ${currNode.vol} cnt=${cnt} faces=${facecnt}`);,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:11,log,log,11,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['log']
Testability,// console.log(`attr ${name} = ${value}`);,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:11,log,log,11,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['log']
Testability,// console.log(`get clones ${nodes.length}`);,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/scripts/geoworker.js:11,log,log,11,js/scripts/geoworker.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/scripts/geoworker.js,1,['log'],['log']
Testability,// console.log(`polygon closed!!! nvertices = ${polygon.vertices.length}`);,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:11,log,log,11,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['log']
Testability,// console.log(`reject point ${poly.fLastPoint}`);,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/modules/hist2d/TH2Painter.mjs:11,log,log,11,js/modules/hist2d/TH2Painter.mjs,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/modules/hist2d/TH2Painter.mjs,1,['log'],['log']
Testability,// console.log(`start worker ${e.data.tm1 - e.data.tm0}`);,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/scripts/geoworker.js:11,log,log,11,js/scripts/geoworker.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/scripts/geoworker.js,1,['log'],['log']
Testability,// console.log(`style ${name} = ${value}`);,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:11,log,log,11,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['log']
Testability,"// console.log(mhdr, msg.length, msg.substr(0,70), '...');",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/tree/controller/TreeViewer.controller.js:11,log,log,11,ui5/tree/controller/TreeViewer.controller.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/tree/controller/TreeViewer.controller.js,1,['log'],['log']
Testability,"// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:11,log,log,11,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['log']
Testability,"// console.log(this.get_name() + "" - constructor"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/GlViewer.js:11,log,log,11,ui5/eve7/lib/GlViewer.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/GlViewer.js,1,['log'],['log']
Testability,"// console.log(this.get_name() + "".cleanup()"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/GlViewer.js:11,log,log,11,ui5/eve7/lib/GlViewer.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/GlViewer.js,1,['log'],['log']
Testability,"// console.log(this.get_name() + "".init()"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/GlViewer.js:11,log,log,11,ui5/eve7/lib/GlViewer.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/GlViewer.js,1,['log'],['log']
Testability,// console.log(this.selectedObjects);; // debugger;,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/OutlinePassEve.js:11,log,log,11,ui5/eve7/lib/OutlinePassEve.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/OutlinePassEve.js,1,['log'],['log']
Testability,"// const pair<TString,Double_t> defconsts[] = { {""pi"",TMath::Pi()}, {""sqrt2"",TMath::Sqrt2()},; // {""infinity"",TMath::Infinity()}, {""ln10"",TMath::Ln10()},; // {""loge"",TMath::LogE()}, {""true"",1},{""false"",0} };",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:160,log,loge,160,hist/hist/src/TFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx,2,"['Log', 'log']","['LogE', 'loge']"
Testability,"// constructor used for Testing + Application of the MVA, only (no training),; // using given weight file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/PyMethodBase.h:24,Test,Testing,24,tmva/pymva/inc/TMVA/PyMethodBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/PyMethodBase.h,3,['Test'],['Testing']
Testability,"// convert Name into external number of Parameter (will assert if parameter is not found)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserTransformation.h:56,assert,assert,56,math/minuit2/inc/Minuit2/MnUserTransformation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserTransformation.h,1,['assert'],['assert']
Testability,"// convert external number into Name of Parameter (will assert if index is out of range)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserTransformation.h:56,assert,assert,56,math/minuit2/inc/Minuit2/MnUserTransformation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserTransformation.h,1,['assert'],['assert']
Testability,"// convert to log ....",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:14,log,log,14,roofit/xroofit/src/xRooHypoSpace.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx,1,['log'],['log']
Testability,"// coordinates of piece boxes at test position",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/Tetris.cxx:33,test,test,33,test/Tetris.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/Tetris.cxx,1,['test'],['test']
Testability,"// correlation of the regression on test data; // same as above but for 'truncated' quantities (computed for events within 2sigma of RMS)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:36,test,test,36,tmva/tmva/src/Factory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx,1,['test'],['test']
Testability,"// could also add more detailed test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TRolke.cxx:32,test,test,32,math/physics/src/TRolke.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TRolke.cxx,3,['test'],['test']
Testability,"// counts the number of toys in the limits set for adaptive sampling; // (taking weights into account; always on first test statistic)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:119,test,test,119,roofit/roostats/src/ToyMCSampler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx,1,['test'],['test']
Testability,// cr logicals,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCHazardRecognizers.cpp:6,log,logicals,6,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCHazardRecognizers.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCHazardRecognizers.cpp,1,['log'],['logicals']
Testability,"// create LogLikelihood FCN function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnSim/PaulTest4.cxx:10,Log,LogLikelihood,10,math/minuit2/test/MnSim/PaulTest4.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnSim/PaulTest4.cxx,1,['Log'],['LogLikelihood']
Testability,// create a stub definition this NSNumber factory method.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprObjC.cpp:12,stub,stub,12,interpreter/llvm-project/clang/lib/Sema/SemaExprObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprObjC.cpp,1,['stub'],['stub']
Testability,"// create the ToyMC test statistic sampler",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx:20,test,test,20,roofit/roostats/src/FeldmanCousins.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx,1,['test'],['test']
Testability,"// create the test TGraph",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/fit/fitEllipseTGraphDLSF.cxx:14,test,test,14,tutorials/fit/fitEllipseTGraphDLSF.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/fit/fitEllipseTGraphDLSF.cxx,2,['test'],['test']
Testability,"// create the test statistic sampler (private data member fTestStatSampler)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx:14,test,test,14,roofit/roostats/src/FeldmanCousins.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx,1,['test'],['test']
Testability,"// createTH3();; // test 60% of histogram; // test 60% of histogram",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_THBinIterator.cxx:20,test,test,20,hist/hist/test/test_THBinIterator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_THBinIterator.cxx,2,['test'],['test']
Testability,"// dataset dir is in the user sandbox (simplified naming)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TDataSetManager.h:30,sandbox,sandbox,30,proof/proof/inc/TDataSetManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TDataSetManager.h,1,['sandbox'],['sandbox']
Testability,"// debug mode (print test results)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:21,test,test,21,test/stressHistoFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx,1,['test'],['test']
Testability,"// default test suite, using websockets",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/webgui/ping/ping.cxx:11,test,test,11,tutorials/webgui/ping/ping.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/webgui/ping/ping.cxx,1,['test'],['test']
Testability,"// define a new benchmark to Start",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx:16,benchmark,benchmark,16,core/base/src/TBenchmark.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TBenchmark.cxx,1,['benchmark'],['benchmark']
Testability,"// define the range; /// Suppress the task arena diagnostics for tests where we try to create the task arena multiple times.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/imt/test/testRTaskArena.cxx:65,test,tests,65,core/imt/test/testRTaskArena.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/imt/test/testRTaskArena.cxx,1,['test'],['tests']
Testability,"// define the test ellipse",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/fit/fitEllipseTGraphDLSF.cxx:14,test,test,14,tutorials/fit/fitEllipseTGraphDLSF.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/fit/fitEllipseTGraphDLSF.cxx,2,['test'],['test']
Testability,"// define useful typedef's; // using LogLikelihoodFunction_v = LogLikelihoodFCN<ROOT::Math::IMultiGenFunction, ROOT::Math::IParametricFunctionMultiDimTempl<T>>;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/LogLikelihoodFCN.h:63,Log,LogLikelihoodFCN,63,math/mathcore/inc/Fit/LogLikelihoodFCN.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/LogLikelihoodFCN.h,1,['Log'],['LogLikelihoodFCN']
Testability,"// delete all methods and recreate them from weight file - this ensures that the application; // of the methods (in TMVAClassificationApplication) is consistent with the results obtained; // in the testing; // Log() << Endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:198,test,testing,198,tmva/tmva/src/Factory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx,2,"['Log', 'test']","['Log', 'testing']"
Testability,"// delete histogram after testing (swicth off in case of debugging)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:26,test,testing,26,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['test'],['testing']
Testability,"// delete successful tests, keep only the failing ones (for verification)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:21,test,tests,21,test/stressGUI.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx,1,['test'],['tests']
Testability,"// depends -; // Returns NULL if there is no dependence.; // Otherwise, return a Dependence with as many details as possible.; // Corresponds to Section 3.1 in the paper; //; // Practical Dependence Testing; // Goff, Kennedy, Tseng; // PLDI 1991; //; // Care is required to keep the routine below, getSplitIteration(),; // up to date with respect to this routine.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:199,Test,Testing,199,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,1,['Test'],['Testing']
Testability,"// depends on function shape; // test ROOT finder algorithm function with derivative",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.cxx:33,test,test,33,math/mathmore/test/StatFunction.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.cxx,1,['test'],['test']
Testability,"// depth test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/inc/TEveText.h:9,test,test,9,graf3d/eve/inc/TEveText.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve/inc/TEveText.h,1,['test'],['test']
Testability,"// determine axes options to create log axes if needed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx:36,log,log,36,graf2d/gpad/src/TRatioPlot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx,1,['log'],['log']
Testability,"// device user is logged in on",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/unix/src/TUnixSystem.cxx:18,log,logged,18,core/unix/src/TUnixSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/unix/src/TUnixSystem.cxx,1,['log'],['logged']
Testability,"// discovery test statistics",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooFit.h:13,test,test,13,roofit/xroofit/inc/RooFit/xRooFit/xRooFit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooFit.h,1,['test'],['test']
Testability,"// display logs button",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/inc/TProofProgressLog.h:11,log,logs,11,gui/sessionviewer/inc/TProofProgressLog.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/inc/TProofProgressLog.h,1,['log'],['logs']
Testability,"// distribute test values evenly below and above the median",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurate.cxx:14,test,test,14,math/mathmore/src/VavilovAccurate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurate.cxx,1,['test'],['test']
Testability,"// divide gradient by function value since returning the logs",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:57,log,logs,57,math/mathcore/src/FitUtil.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx,1,['log'],['logs']
Testability,"// division ratio in units of 1/fNBin, testing; // jDivi = jLow;; // if(jLow == 0 ) jDivi=jUp+1;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/foam/src/TFoam.cxx:39,test,testing,39,math/foam/src/TFoam.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/foam/src/TFoam.cxx,1,['test'],['testing']
Testability,// dllimport stub.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.h:13,stub,stub,13,interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.h,1,['stub'],['stub']
Testability,"// do a Chi2 test; // switch off printing of info messages from chi2 test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testDistSampler.cxx:13,test,test,13,math/mathcore/test/testDistSampler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testDistSampler.cxx,4,['test'],['test']
Testability,"// do a chi2 binned test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testMathRandom.cxx:20,test,test,20,math/mathcore/test/testMathRandom.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testMathRandom.cxx,1,['test'],['test']
Testability,"// do a minimization (e.g. like in GradMinimizer_Gaussian1D test)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooRealL.cxx:60,test,test,60,roofit/roofitcore/test/TestStatistics/testRooRealL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooRealL.cxx,1,['test'],['test']
Testability,"// do a minimization, but now using GradMinimizer and its MP version; // in the 1D Gaussian tests, we suppress the positive definiteness; // warnings coming from Minuit2 with offsetting; they are errors both; // in serial RooFit and in the MultiProcess-enabled back-end",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:92,test,tests,92,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,2,['test'],['tests']
Testability,"// do an evaluation of the network to compute initial minimum test error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:62,test,test,62,tmva/tmva/src/MethodDL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx,1,['test'],['test']
Testability,"// do linear interpolation to find right lp value for given observed test staistic value; //auto it = std::lower_bound(ts2.begin(), ts2.end(), tx ); ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx:69,test,test,69,math/mathcore/src/GoFTest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx,1,['test'],['test']
Testability,"// do multiple minimizations using MP::GradMinimizer, testing breakdown and rebuild; // parameters",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:54,test,testing,54,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,1,['test'],['testing']
Testability,"// do not accept string to fill std::vector<char>; // TODO: this only tests for new-style buffers, which is too strict, but a; // generic check for Py_TYPE(fi)->tp_as_buffer is too loose (note that the; // main use case is numpy, which offers the new interface)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Pythonize.cxx:70,test,tests,70,bindings/pyroot/cppyy/CPyCppyy/src/Pythonize.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Pythonize.cxx,1,['test'],['tests']
Testability,// do not allow log scale for labels,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:16,log,log,16,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['log']
Testability,"// do not count the skipped tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx:28,test,tests,28,roofit/roostats/test/stressRooStats.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats.cxx,1,['test'],['tests']
Testability,"// do not run by default tests on 32 bit architecture; // since extended precision will make it difficult",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/rotationApplication.cxx:25,test,tests,25,math/genvector/test/rotationApplication.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/rotationApplication.cxx,1,['test'],['tests']
Testability,"// do not test RooCategory",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/stressHistFactory.cxx:10,test,test,10,roofit/histfactory/test/stressHistFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/stressHistFactory.cxx,1,['test'],['test']
Testability,"// do not use online context menu for frame - make it fully client side; /* auto is_x = items.GetSpecifier() == ""x"";; auto is_y = items.GetSpecifier() == ""y"";. if (is_x || is_y) {; RAttrAxis &attr = is_x ? x : y;; std::string name = is_x ? ""x"" : ""y"";; auto cl = TClass::GetClass<RAttrAxis>();; auto log = attr.GetLog();; items.AddChkMenuItem(""Linear scale"", ""Set linear scale"", !log, name + "".log = 0"", cl);; items.AddChkMenuItem(""Log scale"", ""Logarithmic scale"", !log, name + "".log = 10"", cl);; }; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpadv7/src/RFrame.cxx:299,log,log,299,graf2d/gpadv7/src/RFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpadv7/src/RFrame.cxx,7,"['Log', 'log']","['Log', 'Logarithmic', 'log']"
Testability,"// don't have access to a 64-bit machine at the moment so long test would be; // pointless...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/testbits.cxx:63,test,test,63,test/testbits.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/testbits.cxx,1,['test'],['test']
Testability,"// don't use tanh in test due to limited vdt precision",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/TestRecurrentBackpropagation.h:21,test,test,21,tmva/tmva/test/DNN/RNN/TestRecurrentBackpropagation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/TestRecurrentBackpropagation.h,1,['test'],['test']
Testability,"// double DoDerivative(const double *x, unsigned int icoord = 0) const {; // assert(icoord <= 1);; // if (icoord == 0); // return 2. * fp[0] * x[0] + fp[1];; // else; // return 2. * fp[2] * x[1] + fp[3];; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:77,assert,assert,77,math/mathcore/test/fit/testFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx,1,['assert'],['assert']
Testability,"// double GausImpl(TRandomEngine * r, double mean, double sigma) {; // double y = r->Rndm();; // double z = r->Rndm();; // double x = z * 6.28318530717958623;; // double radius = std::sqrt(-2*std::log(y));; // double g = radius * std::sin(x);; // return mean + g * sigma; ; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RandomFunctions.cxx:197,log,log,197,math/mathcore/src/RandomFunctions.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RandomFunctions.cxx,1,['log'],['log']
Testability,"// double nGFlops = (double)(settings.testInterval * batchesInEpoch * settings.batchSize)*1.E-9;; // nGFlops *= deepnet.GetNFlops() * 1e-9;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:38,test,testInterval,38,tmva/tmva/src/MethodDL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx,1,['test'],['testInterval']
Testability,"// double operator() (double *x, double * p = 0) {; // if (p != 0) SetParameters(p);; // // iterate on observables; // TIterator* itr = fX->createIterator() ;; // RooRealVar* var = 0;; // while( ( var = dynamic_cast<RooRealVar*>(itr->Next() ) ) ) {; // assert(var != 0);; // var->setVal(*x++);; // }; // // debug; // //fX->Print(""v"");; // if (fNorm); // return fPdf->getVal(fX);; // else; // return fPdf->getVal(); // get unnormalized value; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/WrapperRooPdf.h:253,assert,assert,253,roofit/roofit/test/WrapperRooPdf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/WrapperRooPdf.h,1,['assert'],['assert']
Testability,"// double s = sqrt(-2.*log(1.-r1))*sin(2.*M_PI*r2);; // scale to desired gauss",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnSim/GaussRandomGen.h:23,log,log,23,math/minuit2/test/MnSim/GaussRandomGen.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnSim/GaussRandomGen.h,1,['log'],['log']
Testability,"// double testDot_S(const std::vector<V*> & w1, const std::vector<V*> & w2, double & time) {; // test::Timer t(time,""dot "");; // double result=0;; // for (int l = 0; l < NLOOP; l++); // {; // V & v1 = *w1[l];; // V & v2 = *w2[l];; // result = Dot(v1,v2);; // }; // return result;; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/matrix_op.h:97,test,test,97,math/smatrix/test/matrix_op.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/matrix_op.h,1,['test'],['test']
Testability,"// draw 1s on test fail (always); //Draw stencil pattern",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPadPainter.cxx:14,test,test,14,graf3d/gl/src/TGLPadPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLPadPainter.cxx,1,['test'],['test']
Testability,"// dummy for testing; // iret |= FitUsingNewFitter<DUMMY>(h1,f1);; // use simply TF1 wrapper; // ROOT::Math::WrappedMultiTF1 f2(*f1);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testFitPerf.cxx:13,test,testing,13,roofit/roofit/test/testFitPerf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testFitPerf.cxx,1,['test'],['testing']
Testability,"// dummy track class for testing I/o of matric",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/Track.h:25,test,testing,25,math/genvector/test/Track.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/Track.h,2,['test'],['testing']
Testability,"// dummy track class for testing I/o of matric; //#ifdef USE_REFLEX; //#define G__DICTIONARY; //#endif",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TrackMathCore.h:25,test,testing,25,test/TrackMathCore.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TrackMathCore.h,1,['test'],['testing']
Testability,"// dummy track class for testing I/o of matrix",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/TrackMathCore.h:25,test,testing,25,math/mathcore/test/stress/TrackMathCore.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/TrackMathCore.h,1,['test'],['testing']
Testability,"// empty histogram in log scale",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:22,log,log,22,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,2,['log'],['log']
Testability,"// empty the buffer. Probably we could add as an unbinned test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:58,test,test,58,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,2,['test'],['test']
Testability,"// encoding = 'Unicode'; // NOT UTF8, NOT UTF16BE/LE, NOT UCS2BE/LE. NO clever BOM behavior; // Actual 16bit char codes used.; // no multi-byte logic here; // Unicode characters to WinAnsiEncoding:; // {402: 131, 8211: 150, 8212: 151, 8216: 145, 8217: 146, 8218: 130, 8220: 147, 8221: 148, 8222: 132, 8224: 134, 8225: 135, 8226: 149, 8230: 133, 8364: 128, 8240:137, 8249: 139, 8250: 155, 710: 136, 8482: 153, 338: 140, 339: 156, 732: 152, 352: 138, 353: 154, 376: 159, 381: 142, 382: 158}; // as you can see, all Unicode chars are outside of 0-255 range. No char code conflicts.; // this means that you can give Win cp1252 encoded strings to jsPDF for rendering directly; // as well as give strings with some (supported by these fonts) Unicode characters and; // these will be mapped to win cp1252; // for example, you can send char code (cp1252) 0x80 or (unicode) 0x20AC, getting ""Euro"" glyph displayed in both cases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:144,log,logic,144,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['logic']
Testability,"// end anonymous namespace.; // Helper to skip (select x, true, false), which matches both a logical AND and; // OR and can confuse code that tries to determine if \p Cond is either a; // logical AND or OR but not both.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp:93,log,logical,93,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,2,['log'],['logical']
Testability,"// end anonymous namespace; // The set (BIT_TRUE, BIT_FALSE, BIT_UNSET) represents a ternary logic system; // for a bit value.; //; // BIT_UNFILTERED is used as the init value for a filter position. It is used; // only for filter processings.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:93,log,logic,93,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,1,['log'],['logic']
Testability,"// end anonymous namespace; /// TestFuncs - Extract all blocks for the miscompiled functions except for the; /// specified blocks. If the problem still exists, return true.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp:32,Test,TestFuncs,32,interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp,1,['Test'],['TestFuncs']
Testability,"// end anonymous namespace; /// TestResult - After passes have been split into a test group and a control; /// group, see if they still break the program.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp:32,Test,TestResult,32,interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp,2,"['Test', 'test']","['TestResult', 'test']"
Testability,// end anonymous namespace; //===----------------------------------------------------------------------===//; // Logical line.; //===----------------------------------------------------------------------===//; // Return a string representation for the line kind.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVLine.cpp:113,Log,Logical,113,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVLine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVLine.cpp,1,['Log'],['Logical']
Testability,"// end for MinuitFcnGrad test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:25,test,test,25,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,1,['test'],['test']
Testability,"// end is contained in begin -> test = ""A::B"" sub-patterns = ""A::"", ""::"" will return false",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/BaseSelectionRule.cxx:32,test,test,32,core/dictgen/src/BaseSelectionRule.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/BaseSelectionRule.cxx,1,['test'],['test']
Testability,"// end loop on iterations; // ? need a maximum here (or max of function calls is enough ? ); // continnue iteration (re-calculate function Minimum if edm IS NOT sufficient); // no need to check that hesse calculation is done (if isnot done edm is OK anyway); // count the pass to exit second time when function Minimum is invalid; // increase by 20% maxfcn for doing some more tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliBuilder.cxx:377,test,tests,377,math/minuit2/src/FumiliBuilder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliBuilder.cxx,2,['test'],['tests']
Testability,"// end namespace cling; // TODO: Make the build system in the testsuite aware how to build that class; // and extract it out there again.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/InterpreterCallbacks.h:62,test,testsuite,62,interpreter/cling/include/cling/Interpreter/InterpreterCallbacks.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/InterpreterCallbacks.h,2,['test'],['testsuite']
Testability,"// end namespace detail; /// This class implements a switch-like dispatch statement for a value of 'T'; /// using dyn_cast functionality. Each `Case<T>` takes a callable to be invoked; /// if the root value isa<T>, the callable is invoked with the result of; /// dyn_cast<T>() as a parameter.; ///; /// Example:; /// Operation *op = ...;; /// LogicalResult result = TypeSwitch<Operation *, LogicalResult>(op); /// .Case<ConstantOp>([](ConstantOp op) { ... }); /// .Default([](Operation *op) { ... });; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/TypeSwitch.h:343,Log,LogicalResult,343,interpreter/llvm-project/llvm/include/llvm/ADT/TypeSwitch.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/TypeSwitch.h,2,['Log'],['LogicalResult']
Testability,// end namespace llvm; /// Attempt to determine if a Text stub uses target triple.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/InterfaceStub/IFSHandler.cpp:58,stub,stub,58,interpreter/llvm-project/llvm/lib/InterfaceStub/IFSHandler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/InterfaceStub/IFSHandler.cpp,1,['stub'],['stub']
Testability,// end namespace logicalview,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/LVReaderHandler.h:17,log,logicalview,17,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/LVReaderHandler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/LVReaderHandler.h,16,['log'],['logicalview']
Testability,"// end test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/InterpreterCallbacks.h:7,test,test,7,interpreter/cling/include/cling/Interpreter/InterpreterCallbacks.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/include/cling/Interpreter/InterpreterCallbacks.h,2,['test'],['test']
Testability,"// enough unspecified are available to equal training and testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:58,test,testing,58,tmva/tmva/src/DataSetFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx,1,['test'],['testing']
Testability,"// ensure statusbar visible for interactive plot; // turned this off for now ... as not needed if doing through browser, status bar already there; // if (gPad->GetCanvas() && !gPad->GetCanvas()->TestBit(TCanvas::kShowEventStatus)) {; // gPad->GetCanvas()->ToggleEventStatus();; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:195,Test,TestBit,195,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['Test'],['TestBit']
Testability,"// ensure that ranges are properly handled, even if the ranges are invalid; // let: start = desired start, end = desired end, last = actually last entry; // possible cases: default: 0 = start < last < end = max (already implicitly tested above); // 0. start < end <= last; // 1. similar to above but test the case the start is after the first tree); // * In MT runs, there is the additional optimization: once the desired end is reached,; // stop processing further trees, i.e. range asked is [1, 3] and the df has 2 trees; // of 5 entries each -> the second tree is not open.; // 2. 0 = start < last < end < max; // 3. 0 < start < last < end < max; // 4. start = end <= last -> enter the RLoopManager and do no work there (no sanity checks); // 5. start = end > last -> enter the RLoopManager and do no work there (no sanity checks); // 6. last = start < end -> error after getting the number of entries; // 7. last + 1 = start < end -> error after getting the number of entries; // 8. last < start < end -> error after getting the number of entries; // start > end -> error in the spec directly",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_datasetspec.cxx:231,test,tested,231,tree/dataframe/test/dataframe_datasetspec.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_datasetspec.cxx,2,['test'],"['test', 'tested']"
Testability,"// enum TOF; /// Return true if the specified TargetFlag operand is a reference to a stub; /// for a global, not the global itself.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/MCTargetDesc/M68kBaseInfo.h:85,stub,stub,85,interpreter/llvm-project/llvm/lib/Target/M68k/MCTargetDesc/M68kBaseInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/MCTargetDesc/M68kBaseInfo.h,1,['stub'],['stub']
Testability,"// enum for vector of enums setitem tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/stltypes.h:36,test,tests,36,bindings/pyroot/cppyy/cppyy/test/stltypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/stltypes.h,1,['test'],['tests']
Testability,"// error = testRelu<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testReluDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing ReLU activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // // Sigmoid.; // error = testSigmoid<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // error = testSigmoidDerivative<TCuda<Scalar_t>>(10);; // std::cout << ""Testing Sigmoid activation derivative: "";; // std::cout << ""maximum relative error = "" << error << std::endl;; // if (error > 1e-5); // return 1;; // return 0;; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx:11,test,testRelu,11,tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestActivationFunctionsCuda.cxx,8,"['Test', 'test']","['Testing', 'testRelu', 'testReluDerivative', 'testSigmoid', 'testSigmoidDerivative']"
Testability,"// error level: 1 (2*log(L) fit",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MinuitFitter.cxx:21,log,log,21,tmva/tmva/src/MinuitFitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MinuitFitter.cxx,1,['log'],['log']
Testability,// eslint-disable-next-line @typescript-eslint/no-non-null-assertion,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:59,assert,assertion,59,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,4,['assert'],['assertion']
Testability,"// estimate gradient numerically with simple 2 point rule; // should probably calculate gradient of log(pdf) is more stable numerically",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:100,log,log,100,math/mathcore/src/FitUtil.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx,1,['log'],['log']
Testability,// estimate quantiles... simple function... not so nice as GetQuantiles; // exclude points with negative y when log scale is specified,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:112,log,log,112,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['log']
Testability,"// estimates where corresponding pValues graph becomes equal to 0.05; // linearly interpolates log(pVal) when obtaining limits.; // returns value and error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h:95,log,log,95,roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,1,['log'],['log']
Testability,"// estimator for test sample",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:17,test,test,17,tmva/tmva/src/MethodMLP.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx,1,['test'],['test']
Testability,"// estimator for test sample //zjh",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx:17,test,test,17,tmva/tmva/src/MethodMLP.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodMLP.cxx,3,['test'],['test']
Testability,"// evaluate test statistic on data",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestCalculatorGeneric.cxx:12,test,test,12,roofit/roostats/src/HypoTestCalculatorGeneric.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestCalculatorGeneric.cxx,1,['test'],['test']
Testability,"// evaluate the LogLikelihood",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitUtil.h:16,Log,LogLikelihood,16,math/mathcore/inc/Fit/FitUtil.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitUtil.h,2,['Log'],['LogLikelihood']
Testability,"// evaluate the Poisson Log Likelihood; // for binned likelihood fits; // this is Sum ( f(x_i) - y_i * log( f (x_i) ) ); // add as well constant term for saturated model to make it like a Chi2/2; // by default is extended. If extended is false the fit is not extended and; // the global poisson term is removed (i.e is a binomial fit); // (remember that in this case one needs to have a function with a fixed normalization; // like in a non extended binned fit); //; // if use Weight use a weighted dataset; // iWeight = 1 ==> logL = Sum( w f(x_i) ); // case of iWeight==1 is actually identical to weight==0; // iWeight = 2 ==> logL = Sum( w*w * f(x_i) ); //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitUtil.h:24,Log,Log,24,math/mathcore/inc/Fit/FitUtil.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitUtil.h,4,"['Log', 'log']","['Log', 'log', 'logL']"
Testability,"// evaluate the Poisson Log Likelihood; // for binned likelihood fits; // this is Sum ( f(x_i) - y_i * log( f (x_i) ) ); // add as well constant term for saturated model to make it like a Chi2/2; // by default is extended. If extended is false the fit is not extended and; // the global poisson term is removed (i.e is a binomial fit); // (remember that in this case one needs to have a function with a fixed normalization; // like in a non extended unbinned fit); //; // if use Weight use a weighted dataset; // iWeight = 1 ==> logL = Sum( w f(x_i) ); // case of iWeight==1 is actually identical to weight==0; // iWeight = 2 ==> logL = Sum( w*w * f(x_i) ); //; // nPoints returns the points where bin content is not zero",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:24,Log,Log,24,math/mathcore/src/FitUtil.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx,4,"['Log', 'log']","['Log', 'log', 'logL']"
Testability,"// evaluate the gradient of the Poisson log likelihood function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:40,log,log,40,math/mathcore/src/FitUtil.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx,1,['log'],['log']
Testability,"// evaluate the gradient of the log likelihood function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:32,log,log,32,math/mathcore/src/FitUtil.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx,1,['log'],['log']
Testability,"// evaluate the pdf contribution to the generic logl function in case of bin data; // return actually the log of the pdf and its derivatives; //func.SetParameters(p);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:48,log,logl,48,math/mathcore/src/FitUtil.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx,2,['log'],"['log', 'logl']"
Testability,"// exactRDIVtest - Tests the RDIV subscript pair for dependence.; // Things of the form [c1 + a*i] and [c2 + b*j],; // where i and j are induction variable, c1 and c2 are loop invariant,; // and a and b are constants.; // Returns true if any possible dependence is disproved.; // Marks the result as inconsistent.; // Works in some cases that symbolicRDIVtest doesn't, and vice versa.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:19,Test,Tests,19,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,1,['Test'],['Tests']
Testability,"// exactSIVtest -; // When we have a pair of subscripts of the form [c1 + a1*i] and [c2 + a2*i],; // where i is an induction variable, c1 and c2 are loop invariant, and a1; // and a2 are constant, we can solve it exactly using an algorithm developed; // by Banerjee and Wolfe. See Algorithm 6.2.1 (case 2.5) in:; //; // Dependence Analysis for Supercomputing; // Utpal Banerjee; // Kluwer Academic Publishers, 1988; //; // It's slower than the specialized tests (strong SIV, weak-zero SIV, etc),; // so use them if possible. They're also a bit better with symbolics and,; // in the case of the strong SIV test, can compute Distances.; //; // Return true if dependence disproved.; //; // This is a modified version of the original Banerjee algorithm. The original; // only tested whether Dst depends on Src. This algorithm extends that and; // returns all the dependencies that exist between Dst and Src.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:456,test,tests,456,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,3,['test'],"['test', 'tested', 'tests']"
Testability,"// exception handling testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/advancedcpp.cxx:22,test,testing,22,bindings/pyroot/cppyy/cppyy/test/advancedcpp.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/advancedcpp.cxx,2,['test'],['testing']
Testability,"// exclude statistics in comparison since chi2 test will fail with low; // bin statistics",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:47,test,test,47,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['test'],['test']
Testability,"// execute also the logon macro specified by ""Rint.Logon""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/rint/src/TRint.cxx:20,log,logon,20,core/rint/src/TRint.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/rint/src/TRint.cxx,4,"['Log', 'log']","['Logon', 'logon']"
Testability,// exp(log(x)) -> x,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:7,log,log,7,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['log'],['log']
Testability,"// expected-warning@27 {{'TEST' macro redefined}}; // expected-note@26 {{previous definition is here}}",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/test/CodeUnloading/Macros.h:26,TEST,TEST,26,interpreter/cling/test/CodeUnloading/Macros.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/test/CodeUnloading/Macros.h,1,['TEST'],['TEST']
Testability,"// expected-warning@3 {{'TEST' macro redefined}}; // expected-note@2 {{previous definition is here}}; // expected-warning@4 {{'TEST' macro redefined}}; // expected-note@3 {{previous definition is here}}; // expected-warning@5 {{'TEST' macro redefined}}; // expected-note@4 {{previous definition is here}}; // expected-warning@6 {{'TEST' macro redefined}}; // expected-note@5 {{previous definition is here}}",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/test/CodeUnloading/Macros.h:25,TEST,TEST,25,interpreter/cling/test/CodeUnloading/Macros.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/test/CodeUnloading/Macros.h,4,['TEST'],['TEST']
Testability,"// extractelt (select %x, %vec1, %vec2), %const ->; // select %x, %vec1[%const], %vec2[%const]; // TODO: Support constant folding of multiple select operands:; // extractelt (select %x, %vec1, %vec2), (select %x, %c1, %c2); // If the extractelement will for instance try to do out of bounds accesses; // because of the values of %c1 and/or %c2, the sequence could be optimized; // early. This is currently not possible because constant folding will reach; // an unreachable assertion if it doesn't find a constant operand.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp:474,assert,assertion,474,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,1,['assert'],['assertion']
Testability,"// extrapolating above based on last two points; // in fact, if 2nd last point is a p=1 (log(p)=0) then go back",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:89,log,log,89,roofit/xroofit/src/xRooHypoSpace.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx,1,['log'],['log']
Testability,"// fH[1] = kappa*(2+beta2*eu) -ln(fEpsilon) + ln(2/pi**2); // fH[2] = beta2*kappa; // fH[3] = omwga/kappa; // fH[4] = pi/2 *fOmega; // log of Eq. (4.10)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurate.cxx:135,log,log,135,math/mathmore/src/VavilovAccurate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurate.cxx,1,['log'],['log']
Testability,"// fH[5] = 1-beta2*(1-eu)-logEpsilonPM/kappa; // eq. 3.9; // fH[6] = beta2;; // fH[7] = 1-beta2;; // Eq. 3.7 of Schorr; // return fH[5]-x+fH[6]*(std::log(std::fabs(x))-ROOT::Math::expint (-x))-fH[7]*std::exp(-x);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurate.cxx:26,log,logEpsilonPM,26,math/mathmore/src/VavilovAccurate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurate.cxx,2,['log'],"['log', 'logEpsilonPM']"
Testability,// fake use to avoid build failure when assertions disabled,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:40,assert,assertions,40,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,1,['assert'],['assertions']
Testability,// fcZero | fcSubnormal => test all exponent bits are 0; // TODO: Handle sign bit specific cases,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:27,test,test,27,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,1,['test'],['test']
Testability,// fcZero | fcSubnormal => test all exponent bits are 0; // TODO: Handle sign bit specific cases; // TODO: Handle inverted case,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp:27,test,test,27,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,1,['test'],['test']
Testability,"// few tests fail here",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStress.cxx:7,test,tests,7,math/mathmore/test/testStress.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStress.cxx,2,['test'],['tests']
Testability,"// few tests fail here; // vary shape of gamma parameter",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:7,test,tests,7,test/stressMathMore.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx,1,['test'],['tests']
Testability,"// fill all testing events into histos",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:12,test,testing,12,tmva/tmva/src/MethodPDEFoam.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx,1,['test'],['testing']
Testability,"// fill and test 2D variable bins histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:12,test,test,12,test/stressHistoFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx,1,['test'],['test']
Testability,"// fill some vector with RooAbsReals for testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooCacheManager.cxx:41,test,testing,41,roofit/roofitcore/test/testRooCacheManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooCacheManager.cxx,1,['test'],['testing']
Testability,"// fill test tree with classification or regression results",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:8,test,test,8,tmva/tmva/inc/TMVA/MethodBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h,1,['test'],['test']
Testability,// finally testing the face normal of the triangle; // use already existing triangle edge vectors here,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:11,test,testing,11,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['test'],['testing']
Testability,"// find cut off as test size",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:19,test,test,19,roofit/roostats/src/BayesianCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx,1,['test'],['test']
Testability,"// find out if logx has changed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx:15,log,logx,15,graf2d/gpad/src/TRatioPlot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx,1,['log'],['logx']
Testability,"// first set the IsSet flag of all declared options to false; // that is only necessary in our factory, when we test right; // after the training",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Configurable.cxx:112,test,test,112,tmva/tmva/src/Configurable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Configurable.cxx,1,['test'],['test']
Testability,"// first, test if daughters extrude their container",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geompainter/src/TGeoChecker.cxx:10,test,test,10,geom/geompainter/src/TGeoChecker.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geompainter/src/TGeoChecker.cxx,1,['test'],['test']
Testability,"// fit using a 2d parabola (test also gradient)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:28,test,test,28,math/mathcore/test/fit/testFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx,1,['test'],['test']
Testability,"// fixture for all tests in this file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_definepersample.cxx:19,test,tests,19,tree/dataframe/test/dataframe_definepersample.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_definepersample.cxx,2,['test'],['tests']
Testability,"// flag for using logarithmic step",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGNumberEntry.cxx:18,log,logarithmic,18,gui/gui/src/TGNumberEntry.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGNumberEntry.cxx,1,['log'],['logarithmic']
Testability,"// fold (assert?ext (assert?ext x, vt), vt) -> (assert?ext x, vt)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:9,assert,assert,9,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,3,['assert'],['assert']
Testability,"// fold (conv (logicop (conv x), (c))) -> (logicop x, (conv c)); // iff the current bitwise logicop type isn't legal",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:15,log,logicop,15,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,3,['log'],['logicop']
Testability,"// fold (fshl ld1, ld0, c) -> (ld0[ofs]) iff ld0 and ld1 are consecutive.; // fold (fshr ld1, ld0, c) -> (ld0[ofs]) iff ld0 and ld1 are consecutive.; // TODO - bigendian support once we have test coverage.; // TODO - can we merge this with CombineConseutiveLoads/MatchLoadCombine?; // TODO - permit LHS EXTLOAD if extensions are shifted out.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:191,test,test,191,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['test'],['test']
Testability,"// fold (select_cc seteq (and x, y), 0, 0, A) -> (and (sra (shl x)) A); // where y is has a single bit set.; // A plaintext description would be, we can turn the SELECT_CC into an AND; // when the condition can be materialized as an all-ones register. Any; // single bit-test can be materialized as an all-ones register with; // shift-left and shift-right-arith.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:271,test,test,271,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['test'],['test']
Testability,"// fold (shl (sext (add_nsw x, c1)), c2) -> (add (shl (sext x), c2), c1 << c2); // TODO: Add zext/add_nuw variant with suitable test coverage; // TODO: Should we limit this with isLegalAddImmediate?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:128,test,test,128,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['test'],['test']
Testability,"// fold logic(cast(A), cast(B)) -> cast(logic(A, B))",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:8,log,logic,8,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,2,['log'],['logic']
Testability,"// following code required to support toggle of lin/log scales",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TGaxis.cxx:52,log,log,52,graf2d/graf/src/TGaxis.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TGaxis.cxx,1,['log'],['log']
Testability,"// for 2 sided bounded test statistic (N.B there is no one sided discovery qtilde); // t_mu_tilde: equations 43,44 in asymptotic paper",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:23,test,test,23,roofit/roostats/src/AsymptoticCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx,1,['test'],['test']
Testability,"// for 8 core testing use 1M points",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/testUnbinGausFit.cxx:14,test,testing,14,math/minuit2/test/testUnbinGausFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/testUnbinGausFit.cxx,1,['test'],['testing']
Testability,"// for MinuitFcnGrad test:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:21,test,test,21,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,1,['test'],['test']
Testability,"// for NullResultPtr test case",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_resptr.cxx:21,test,test,21,tree/dataframe/test/dataframe_resptr.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_resptr.cxx,1,['test'],['test']
Testability,"// for any used ROOT header files activate the line below, comment the line above; //if (bc->TestBitNumber(k) == 0) {",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGFrame.cxx:93,Test,TestBitNumber,93,gui/gui/src/TGFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGFrame.cxx,2,['Test'],['TestBitNumber']
Testability,"// for assignment by-ref testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/advancedcpp.h:25,test,testing,25,bindings/pyroot/cppyy/cppyy/test/advancedcpp.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/advancedcpp.h,1,['test'],['testing']
Testability,// for batch testing provide approx estimation,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:13,test,testing,13,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['test'],['testing']
Testability,"// for binned case each entry is: -(-N + Nlog(N) - std::lgamma(N+1)); // for unbinned case each entry is: -(N*log(N/(sumN*binW))) = -N*logN + N*log(sumN) + N*log(binW); // but unbinned gets extendedTerm = sumN - sumN*log(sumN); // so resulting sum is just sumN - sum[ N*logN - N*log(binW) ]; // which is the same as the binned case without the LnGamma part and with the extra sum[N*log(binW)] part",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:110,log,log,110,roofit/xroofit/src/xRooNLLVar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx,8,['log'],"['log', 'logN']"
Testability,"// for data member reuse testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/advancedcpp.h:25,test,testing,25,bindings/pyroot/cppyy/cppyy/test/advancedcpp.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/advancedcpp.h,1,['test'],['testing']
Testability,"// for debugging/testing:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/res/RooFit/MultiProcess/ProcessManager.h:17,test,testing,17,roofit/multiprocess/res/RooFit/MultiProcess/ProcessManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/res/RooFit/MultiProcess/ProcessManager.h,1,['test'],['testing']
Testability,"// for duplicate testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/fragile.cxx:17,test,testing,17,bindings/pyroot/cppyy/cppyy/test/fragile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/fragile.cxx,2,['test'],['testing']
Testability,"// for each mu construct the ranked table of probabilities and test the; // observed number of events with the upper limit",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TFeldmanCousins.cxx:63,test,test,63,math/physics/src/TFeldmanCousins.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/physics/src/TFeldmanCousins.cxx,1,['test'],['test']
Testability,"// for esoteric inheritance testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/advancedcpp.cxx:28,test,testing,28,bindings/pyroot/cppyy/cppyy/test/advancedcpp.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/advancedcpp.cxx,2,['test'],['testing']
Testability,"// for indexing tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/operators.cxx:16,test,tests,16,bindings/pyroot/cppyy/cppyy/test/operators.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/operators.cxx,1,['test'],['tests']
Testability,"// for life-line and identity testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/advancedcpp.cxx:30,test,testing,30,bindings/pyroot/cppyy/cppyy/test/advancedcpp.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/advancedcpp.cxx,2,['test'],['testing']
Testability,"// for math conversions testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/advancedcpp.cxx:24,test,testing,24,bindings/pyroot/cppyy/cppyy/test/advancedcpp.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/advancedcpp.cxx,2,['test'],['testing']
Testability,"// for mirror case KS test is not so good but Chi2 is better; // test both p-values",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tkde.cxx:22,test,test,22,hist/hist/test/test_tkde.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tkde.cxx,2,['test'],['test']
Testability,// for n=1 the primitive of 1/x is log(x),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:35,log,log,35,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['log']
Testability,"// for n=1 the primitive of 1/x is log(x)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/ProbFuncMathCore.cxx:35,log,log,35,math/mathcore/src/ProbFuncMathCore.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/ProbFuncMathCore.cxx,1,['log'],['log']
Testability,"// for namespace testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/advancedcpp.cxx:17,test,testing,17,bindings/pyroot/cppyy/cppyy/test/advancedcpp.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/advancedcpp.cxx,4,['test'],['testing']
Testability,"// for protected member testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/crossinheritance.cxx:24,test,testing,24,bindings/pyroot/cppyy/cppyy/test/crossinheritance.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/crossinheritance.cxx,2,['test'],['testing']
Testability,"// for row wise; //assert(GetLayout() == MemoryLayout::RowMajor);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaTensor.h:19,assert,assert,19,tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaTensor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaTensor.h,1,['assert'],['assert']
Testability,"// for safe log(x)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:12,log,log,12,math/mathcore/src/FitUtil.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx,1,['log'],['log']
Testability,"// for signal -> exception testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/fragile.cxx:27,test,testing,27,bindings/pyroot/cppyy/cppyy/test/fragile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/fragile.cxx,2,['test'],['testing']
Testability,"// for simple inheritance testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/advancedcpp.h:26,test,testing,26,bindings/pyroot/cppyy/cppyy/test/advancedcpp.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/advancedcpp.h,1,['test'],['testing']
Testability,"// for std::function testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/cpp11features.cxx:21,test,testing,21,bindings/pyroot/cppyy/cppyy/test/cpp11features.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/cpp11features.cxx,1,['test'],['testing']
Testability,"// for std::function<> testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/cpp11features.h:23,test,testing,23,bindings/pyroot/cppyy/cppyy/test/cpp11features.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/cpp11features.h,1,['test'],['testing']
Testability,"// for std::hash<> testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/cpp11features.h:19,test,testing,19,bindings/pyroot/cppyy/cppyy/test/cpp11features.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/cpp11features.h,1,['test'],['testing']
Testability,"// for std::shared/unique_ptr<> testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/cpp11features.cxx:32,test,testing,32,bindings/pyroot/cppyy/cppyy/test/cpp11features.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/cpp11features.cxx,2,['test'],['testing']
Testability,"// for template testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/advancedcpp.cxx:16,test,testing,16,bindings/pyroot/cppyy/cppyy/test/advancedcpp.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/advancedcpp.cxx,2,['test'],['testing']
Testability,// for testing,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/IntelJITEvents/IntelJITEventListener.cpp:7,test,testing,7,interpreter/llvm-project/llvm/lib/ExecutionEngine/IntelJITEvents/IntelJITEventListener.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/IntelJITEvents/IntelJITEventListener.cpp,1,['test'],['testing']
Testability,"// for testing all generators",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/LCGEngine.h:7,test,testing,7,math/mathcore/inc/Math/LCGEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/LCGEngine.h,1,['test'],['testing']
Testability,"// for testing calls to overloaded new",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/advancedcpp.cxx:7,test,testing,7,bindings/pyroot/cppyy/cppyy/test/advancedcpp.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/advancedcpp.cxx,2,['test'],['testing']
Testability,"// for testing multiple inheritance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/advancedcpp.cxx:7,test,testing,7,bindings/pyroot/cppyy/cppyy/test/advancedcpp.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/advancedcpp.cxx,2,['test'],['testing']
Testability,"// for testing of default arguments",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/advancedcpp.cxx:7,test,testing,7,bindings/pyroot/cppyy/cppyy/test/advancedcpp.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/advancedcpp.cxx,2,['test'],['testing']
Testability,"// for testing passing of void*'s",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/advancedcpp.h:7,test,testing,7,bindings/pyroot/cppyy/cppyy/test/advancedcpp.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/advancedcpp.h,1,['test'],['testing']
Testability,"// for testing the case of virtual operator==",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/operators.cxx:7,test,testing,7,bindings/pyroot/cppyy/cppyy/test/operators.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/operators.cxx,1,['test'],['testing']
Testability,"// for testing user-defined implicit casts",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/operators.h:7,test,testing,7,bindings/pyroot/cppyy/cppyy/test/operators.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/operators.h,1,['test'],['testing']
Testability,"// for testing, pretend we have an Intel Parallel Amplifier XE 2011; // instance attached",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlistener/llvm-jitlistener.cpp:7,test,testing,7,interpreter/llvm-project/llvm/tools/llvm-jitlistener/llvm-jitlistener.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-jitlistener/llvm-jitlistener.cpp,1,['test'],['testing']
Testability,"// for tests uncomment this:; // iBlock=iDiagonal;; // conditioning of the iBlock part",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx:7,test,tests,7,hist/unfold/src/TUnfold.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx,1,['test'],['tests']
Testability,"// for the log",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BernsteinCorrection.cxx:11,log,log,11,roofit/roostats/src/BernsteinCorrection.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BernsteinCorrection.cxx,1,['log'],['log']
Testability,"// for the parabola test cases find also second root",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx:20,test,test,20,math/mathcore/test/testRootFinder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx,1,['test'],['test']
Testability,"// for the sourceforge version, including $ROOTSYS/tmva/test in the; // macro path is a mistake, especially if ""./"" was not part of path; // add ../macros to the path (comment out next line for the ROOT version of TMVA); // gROOT->SetMacroPath(curMacroPath+"":../macros:"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/TMVAGui.cxx:56,test,test,56,tmva/tmvagui/src/TMVAGui.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/TMVAGui.cxx,3,['test'],['test']
Testability,"// for using directives testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/advancedcpp.cxx:24,test,testing,24,bindings/pyroot/cppyy/cppyy/test/advancedcpp.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/advancedcpp.cxx,2,['test'],['testing']
Testability,"// for(const obj of this._selectedObjects); // 	if(obj.sel_type === 0) console.log(""$"", obj.geom[0].fRnrSelf);; // fetch objects that were created after secondary selection",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/OutlinePassEve.js:79,log,log,79,ui5/eve7/lib/OutlinePassEve.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/OutlinePassEve.js,1,['log'],['log']
Testability,"// force use of two-sided test statistic for any new points",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:26,test,test,26,roofit/xroofit/src/xRooHypoSpace.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx,1,['test'],['test']
Testability,"// found the minimum test error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h:21,test,test,21,tmva/tmva/test/DNN/TestOptimization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestOptimization.h,1,['test'],['test']
Testability,// fp.logx,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:6,log,logx,6,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['logx']
Testability,"// fprintf(stderr,""Running Compile for %s %d %d req=%d,%d\n"",GetName(),fClassVersion,fOptimized,CanOptimize(),TestBit(kCannotOptimize));; // if (IsCompiled() && (!fOptimized || (CanOptimize() && !TestBit(kCannotOptimize)))) return;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TStreamerInfoActions.cxx:110,Test,TestBit,110,io/io/src/TStreamerInfoActions.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TStreamerInfoActions.cxx,2,['Test'],['TestBit']
Testability,"// frame->GetYaxis()->SetTitle(""- log profile likelihood ratio"");; // plot",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodIntervalPlot.cxx:34,log,log,34,roofit/roostats/src/LikelihoodIntervalPlot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodIntervalPlot.cxx,1,['log'],['log']
Testability,"// frame->x.log = 2.;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rframe.cxx:12,log,log,12,tutorials/rcanvas/rframe.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rframe.cxx,1,['log'],['log']
Testability,"// function actually running the test.; // We define here the condition to say that the test is valid",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradientFitting.cxx:33,test,test,33,math/mathcore/test/testGradientFitting.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradientFitting.cxx,2,['test'],['test']
Testability,"// function building string with optimizer parameters values for logging",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:65,log,logging,65,tmva/tmva/src/MethodDL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx,1,['log'],['logging']
Testability,"// function called to evaluate the FCN at the value x; // calculates also the matrices of the second derivatives of the objective function needed by FUMILI; //typedef FumiliFCNAdapter::Function Function;; // reset; // assert(grad.size() == npar);; // grad.assign( npar, 0.0);; // hess.assign( hess.size(), 0.0);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumiliMinimizer.cxx:218,assert,assert,218,math/fumili/src/TFumiliMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumiliMinimizer.cxx,1,['assert'],['assert']
Testability,"// function to test if a point with barycentric coordinates (a,b,c) is inside the triangle; // If the point is outside one or more of the coordinate are negative.; // If the point is on a triangle edge, one of the coordinate (the one not part of the edge) is zero.; // Due to numerical error, it can happen that if the point is at the edge the result is a small negative value.; // Use then a tolerance (of - eps) to still consider the point within the triangle",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Delaunay2D.cxx:15,test,test,15,math/mathcore/src/Delaunay2D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Delaunay2D.cxx,1,['test'],['test']
Testability,"// function to test using R interface",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx:15,test,test,15,math/mathcore/test/stressGoFTest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx,1,['test'],['test']
Testability,"// functions used for testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/MersenneTwisterEngine.h:22,test,testing,22,math/mathcore/inc/Math/MersenneTwisterEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/MersenneTwisterEngine.h,1,['test'],['testing']
Testability,"// gBenchmark->Start(TString::Format(""Adding %d variables\n"",n));; // test->AddVariables(vars,n);; // gBenchmark->Show(TString::Format(""Adding %d variables\n"",n));",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaTests.cxx:70,test,test,70,test/TFormulaTests.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaTests.cxx,2,['test'],['test']
Testability,"// gGeoManager is defined in the Geom libraries and we want to make sure we; // do not load it when autoloading is off. We can only test this in modules; // mode because gGeoManager is not part of the PCH and non-modular ROOT has; // header parsing and autoloading coupled leading to redundant load of; // libGeom at gROOT->GetGlobal time.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/test/TClingDataMemberInfoTests.cxx:132,test,test,132,core/metacling/test/TClingDataMemberInfoTests.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/test/TClingDataMemberInfoTests.cxx,1,['test'],['test']
Testability,"// gPrintLevel must be thread-local, because it may be manipulated by a thread to; // temporarily turn logging on or off; Minuit2Minimizer does this, for example",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPrint.cxx:103,log,logging,103,math/minuit2/src/MnPrint.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPrint.cxx,1,['log'],['logging']
Testability,"// generate numbers on a log distribution to decide; // whether to go to xPrime or stay at x; //double rand = fGen.Uniform(1.0);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx:25,log,log,25,roofit/roostats/src/MetropolisHastings.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx,1,['log'],['log']
Testability,"// generate the files; // 1000 for testing 1000 for training",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMethodDLCNN.h:35,test,testing,35,tmva/tmva/test/DNN/CNN/TestMethodDLCNN.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestMethodDLCNN.h,1,['test'],['testing']
Testability,"// get a good starting point for x; // for fType == kLog, this means that fFunction->getVal() did not cause; // an eval error; // for fType == kRegular this means fFunction->getVal() != 0; //; // kbelasco: i < 1000 is sort of arbitrary, but way higher than the number of; // steps we should have to take for any reasonable (log) likelihood function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx:324,log,log,324,roofit/roostats/src/MetropolisHastings.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx,1,['log'],['log']
Testability,"// get a parameter point from the list of points to test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx:52,test,test,52,roofit/roostats/src/NeymanConstruction.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx,1,['test'],['test']
Testability,"// get the poi value that defines the test statistic, and the poi_prime hypothesis we are testing; // when setting limits, these are often the same value",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/Asymptotics.cxx:38,test,test,38,roofit/xroofit/src/Asymptotics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/Asymptotics.cxx,2,['test'],"['test', 'testing']"
Testability,"// get the value of the test statistic for this data set",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx:24,test,test,24,roofit/roostats/src/NeymanConstruction.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx,1,['test'],['test']
Testability,"// getters to inspect logfiles",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/inc/RooFit/MultiProcess/HeatmapAnalyzer.h:22,log,logfiles,22,roofit/multiprocess/inc/RooFit/MultiProcess/HeatmapAnalyzer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/inc/RooFit/MultiProcess/HeatmapAnalyzer.h,1,['log'],['logfiles']
Testability,"// give notice that cut method has been excluded from this test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx:59,test,test,59,tmva/tmva/src/Classification.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx,2,['test'],['test']
Testability,"// global test variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:10,test,test,10,test/stressMathCore.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx,1,['test'],['test']
Testability,"// goto L50;; // An easy first check is to see if point z is inside the triangle; // (if it's in the triangle it's also in the circle); // point z cannot be inside the triangle if it's further from (xx,yy); // than the furthest pointing making up the triangle - test this",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:262,test,test,262,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['test'],['test']
Testability,"// h0 train-all, h1 train-90%, h2 test-all, h3 test-90%",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/regression_averagedevs.cxx:34,test,test-all,34,tmva/tmvagui/src/regression_averagedevs.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/regression_averagedevs.cxx,2,['test'],"['test-', 'test-all']"
Testability,"// have to protect bin case where get() is null (could change but then must change logic above too)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:83,log,logic,83,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['log'],['logic']
Testability,"// helper for exception base class testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/stltypes.h:35,test,testing,35,bindings/pyroot/cppyy/cppyy/test/stltypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/stltypes.h,1,['test'],['testing']
Testability,"// helper to factor out return logic of mp_call / mp_vectorcall",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:31,log,logic,31,bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx,1,['log'],['logic']
Testability,"// helper to test whether a method is used in a pseudo-function modus",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:13,test,test,13,bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx,1,['test'],['test']
Testability,"// helpers for string testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/stltypes.cxx:22,test,testing,22,bindings/pyroot/cppyy/cppyy/test/stltypes.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/stltypes.cxx,1,['test'],['testing']
Testability,"// helpers for string_view testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/stltypes.cxx:27,test,testing,27,bindings/pyroot/cppyy/cppyy/test/stltypes.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/stltypes.cxx,2,['test'],['testing']
Testability,// here invert logic with 0,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:15,log,logic,15,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['logic']
Testability,"// here start testing of HMAC in the begin of the message",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx:14,test,testing,14,gui/webdisplay/src/RWebWindow.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebWindow.cxx,1,['test'],['testing']
Testability,"// here the training starts; // Log() << kINFO << "" "" << Endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:32,Log,Log,32,tmva/tmva/src/Factory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx,1,['Log'],['Log']
Testability,"// https://hur.st/bloomfilter; //; // n = ceil(m / (-k / log(1 - exp(log(p) / k)))); // p = pow(1 - exp(-k / (m / n)), k); // m = ceil((n * log(p)) / log(1 / pow(2, log(2))));; // k = round((m / n) * log(2));; //; // n = symbolsCount; // p = 0.02; // k = 2 (k1=GNUHash and k2=GNUHash >> bloomShift); // m = ceil((symbolsCount * log(p)) / log(1 / pow(2, log(2))));; // bloomShift = min(5 for bits=32 or 6 for bits=64, log2(symbolsCount)); // bloomSize = ceil((-1.44 * n * log2f(p)) / bits)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DynamicLibraryManagerSymbol.cpp:57,log,log,57,interpreter/cling/lib/Interpreter/DynamicLibraryManagerSymbol.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DynamicLibraryManagerSymbol.cpp,9,['log'],['log']
Testability,"// i1 conditions come as i32 values, test the lowest bit with tb(n)z.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:37,test,test,37,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,1,['test'],['test']
Testability,"// iOS always has a FP for backtracking, force other targets to keep their FP; // when doing FastISel. The emitted code is currently superior, and in cases; // like test-suite's lencod FastISel isn't quite correct when FP is eliminated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp:165,test,test-suite,165,interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp,1,['test'],['test-suite']
Testability,"// if (!TestBit(kNotDeleted)); // Fatal(""~TObject"", ""object deleted twice"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:8,Test,TestBit,8,core/base/src/TObject.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx,1,['Test'],['TestBit']
Testability,"// if (_ul->getVal()<1){; // RooStats::LikelihoodIntervalPlot plotpll((RooStats::LikelihoodInterval*) pllint);; // TCanvas c1;; // plotpll.Draw();; // c1.Print(""test.ps"");; // std::cout<<"" UL<1 whats going on here?""<<std::endl;; // abort();; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/UpperLimitMCSModule.cxx:161,test,test,161,roofit/roostats/src/UpperLimitMCSModule.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/UpperLimitMCSModule.cxx,1,['test'],['test']
Testability,"// if (fitter == ""Minuit2"") {; // // increase print level; // TVirtualFitter * tvf = TVirtualFitter::GetFitter();; // TFitterMinuit * minuit2 = dynamic_cast<TFitterMinuit * >(tvf);; // assert (minuit2 != 0);; // minuit2->SetPrintLevel(3);; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testFitPerf.cxx:185,assert,assert,185,roofit/roofit/test/testFitPerf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testFitPerf.cxx,1,['assert'],['assert']
Testability,"// if (gDebug > 2) {; // for (const auto &data : fPRealData) {; // const auto classType = dataPtr->IsA();; // const auto dataName = data.fName;; // const auto dataClass = data.fClass;; // Info(""TProtoClass"",""Data is a protorealdata: %s - class %s - transient %d"", dataName.Data(),dataClass.Data(),data.fIsTransient);; //if (!dataClass.IsNull(); // if (classType == TProtoRealData::Class()); // Info(""TProtoClass"",""Data is a protorealdata: %s"", dataPtrName);; // if (classType == TObjString::Class()); // Info(""TProtoClass"",""Data is a objectstring: %s"", dataPtrName);; // if (dataPtr->TestBit(TRealData::kTransient)); // Info(""TProtoClass"",""And is transient"");; // }; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TProtoClass.cxx:584,Test,TestBit,584,core/meta/src/TProtoClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TProtoClass.cxx,1,['Test'],['TestBit']
Testability,"// if (ievt<3) std::cout << ""i=""<<iTest<<"", readerVal=""<<readerVal<<"" testTarget""<<testTarget<<""; // diff=""<<diff<<std::endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:70,test,testTarget,70,tmva/tmva/test/stressTMVA.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx,2,['test'],['testTarget']
Testability,"// if (o->TestBit(1<<20)==val) return; // do nothing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:10,Test,TestBit,10,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['Test'],['TestBit']
Testability,"// if (opts.Contains(""vartransform"")) Log() << kFATAL << ""It is not possible to use boost in conjunction with variable transform. Please remove either Boost_Num or VarTransform from the option string""<< methodTitle<<Endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx:38,Log,Log,38,tmva/tmva/src/MethodBoost.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx,1,['Log'],['Log']
Testability,"// if (pind==0) impref =; // Log() << kmtype << ""Rule #"" <<; // Log() << kmtype << *fRules[ind] << Endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleEnsemble.cxx:29,Log,Log,29,tmva/tmva/src/RuleEnsemble.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleEnsemble.cxx,2,['Log'],['Log']
Testability,"// if (this.TestRnr(""jet"", el, rnr_data)) return null;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveElementsRCore.js:12,Test,TestRnr,12,ui5/eve7/lib/EveElementsRCore.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveElementsRCore.js,1,['Test'],['TestRnr']
Testability,"// if (title.Length() == 0); // title = ""- log profile likelihood ratio"";",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodIntervalPlot.cxx:43,log,log,43,roofit/roostats/src/LikelihoodIntervalPlot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodIntervalPlot.cxx,1,['log'],['log']
Testability,// if AttributesCloner.getOutOffset() == 0 then we need to add; // 1 to avoid assertion for zero size. We will subtract it back later.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DWARFLinkerCompileUnit.cpp:78,assert,assertion,78,interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DWARFLinkerCompileUnit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DWARFLinkerCompileUnit.cpp,1,['assert'],['assertion']
Testability,"// if done an expected limit, assume data is like expected and choose expected limit point as first test point",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:100,test,test,100,roofit/xroofit/src/xRooHypoSpace.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx,1,['test'],['test']
Testability,"// if enlarge scale test fails",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testStat.cxx:20,test,test,20,math/mathcore/test/stress/testStat.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testStat.cxx,4,['test'],['test']
Testability,"// if it is true test should fail",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:17,test,test,17,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['test'],['test']
Testability,"// if it was successfully removed from the AST we have to check whether; // code was generated and remove it.; // From llvm's mailing list, explanation of the RAUW'd assert:; //; // The problem isn't with your call to; // replaceAllUsesWith per se, the problem is that somebody (I would guess; // the JIT?) is holding it in a ValueMap.; //; // We used to have a problem that some parts of the code would keep a; // mapping like so:; // std::map<Value *, ...>; // while somebody else would modify the Value* without them noticing,; // leading to a dangling pointer in the map. To fix that, we invented the; // ValueMap which puts a Use that doesn't show up in the use_iterator on; // the Value it holds. When the Value is erased or RAUW'd, the ValueMap is; // notified and in this case decides that's not okay and terminates the; // program.; //; // Probably what's happened here is that the calling function has had its; // code generated by the JIT, but not the callee. Thus the JIT emitted a; // call to a generated stub, and will do the codegen of the callee once; // that stub is reached. Of course, once the JIT is in this state, it holds; // on to the Function with a ValueMap in order to prevent things from; // getting out of sync.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DeclUnloader.cpp:166,assert,assert,166,interpreter/cling/lib/Interpreter/DeclUnloader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DeclUnloader.cpp,3,"['assert', 'stub']","['assert', 'stub']"
Testability,"// if log scale in X, replace xmin,max by the log",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:6,log,log,6,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,4,['log'],['log']
Testability,"// if log scale in Y, replace ymin,max by the log",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:6,log,log,6,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,4,['log'],['log']
Testability,"// if logical and physical page size differ, we may have to adjust; // m_nPgPerGrp to make things fit",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:6,log,logical,6,roofit/roofitcore/src/BidirMMapPipe.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx,1,['log'],['logical']
Testability,"// if logx, we must bin in logx and not in x !!!; // otherwise if several decades, one gets crazy results",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSpline.cxx:6,log,logx,6,hist/hist/src/TSpline.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSpline.cxx,2,['log'],['logx']
Testability,"// if not initialized, first create contour array; // difference from ROOT - fContour includes also last element with maxbin, which makes easier to build logz; // when no same0 draw option specified, use main painter for creating contour, also ignore scatter drawing for main painter",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:154,log,logz,154,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['logz']
Testability,"// if the first sub-pattern isn't found in test or if it is found but the; // pattern doesn't start with '*' and the sub-pattern is not at the first position; //std::cout<<""\tNo match!""<<std::endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/BaseSelectionRule.cxx:43,test,test,43,core/dictgen/src/BaseSelectionRule.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/BaseSelectionRule.cxx,1,['test'],['test']
Testability,"// if the pattern doesn't end with '*', the match has to be complete; // i.e. if the last sub-pattern is ""sub"" the test string should end in ""sub"" (""1111sub"" is OK, ""1111sub1"" is not OK)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/BaseSelectionRule.cxx:115,test,test,115,core/dictgen/src/BaseSelectionRule.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/BaseSelectionRule.cxx,1,['test'],['test']
Testability,"// if valid Proof session, set log level",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:31,log,log,31,gui/sessionviewer/src/TSessionViewer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx,1,['log'],['log']
Testability,"// if y is log normal, u = exp(y) is log-normal distributed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/QuantFuncMathCore.cxx:11,log,log,11,math/mathcore/src/QuantFuncMathCore.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/QuantFuncMathCore.cxx,4,['log'],"['log', 'log-normal']"
Testability,"// if( TMath::Abs(vmax[ivar]-vmin[ivar]) <= FLT_MIN ); // Log() << kWARNING << ""Spectator variable "" << dsi.GetSpectatorInfo(ivar).GetExpression().Data() << "" is constant."" << Endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:58,Log,Log,58,tmva/tmva/src/DataSetFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx,1,['Log'],['Log']
Testability,"// if( std::distance( itTarget, testingEventVector->end()) < Int_t(cls+1) ) {",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:32,test,testingEventVector,32,tmva/tmva/src/DataSetFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx,1,['test'],['testingEventVector']
Testability,// ignore b << TestBit(kAutoExec);,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:15,Test,TestBit,15,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['Test'],['TestBit']
Testability,// ignore b << TestBit(kMenuBar);,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:15,Test,TestBit,15,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['Test'],['TestBit']
Testability,// ignore b << TestBit(kMoveOpaque);,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:15,Test,TestBit,15,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['Test'],['TestBit']
Testability,// ignore b << TestBit(kResizeOpaque);,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:15,Test,TestBit,15,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['Test'],['TestBit']
Testability,// ignore b << TestBit(kShowEventStatus);,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:15,Test,TestBit,15,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['Test'],['TestBit']
Testability,"// implements the minimum NLL as a test statistic to be used with several tools",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MinNLLTestStat.h:35,test,test,35,roofit/roostats/inc/RooStats/MinNLLTestStat.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/MinNLLTestStat.h,1,['test'],['test']
Testability,"// implements the profile likelihood ratio as a test statistic to be used with several tools",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProfileLikelihoodTestStat.h:48,test,test,48,roofit/roostats/inc/RooStats/ProfileLikelihoodTestStat.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ProfileLikelihoodTestStat.h,1,['test'],['test']
Testability,"// implements the ratio of profiled likelihood as test statistic",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/RatioOfProfiledLikelihoodsTestStat.h:50,test,test,50,roofit/roostats/inc/RooStats/RatioOfProfiledLikelihoodsTestStat.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/RatioOfProfiledLikelihoodsTestStat.h,1,['test'],['test']
Testability,"// important to cache the paramPoint b/c test statistic might; // modify it from event to event",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:41,test,test,41,roofit/roostats/src/ToyMCSampler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx,1,['test'],['test']
Testability,"// in case it is implicit we don't create a builder; // [Note: Can N be nullptr?, is so 'ShouldVisitDecl' should test or we should test sooner]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/Scanner.cxx:113,test,test,113,core/dictgen/src/Scanner.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/Scanner.cxx,2,['test'],['test']
Testability,"// in the unit test, we set the ""rntuple.streamerMode"" class attribute of CyclicMember",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/StreamerField.hxx:15,test,test,15,tree/ntuple/v7/test/StreamerField.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/StreamerField.hxx,1,['test'],['test']
Testability,"// including file stressTMVA.cxx; // Authors: Christoph Rosemann, Eckhard von Toerne July 2010; // TMVA unit tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:109,test,tests,109,tmva/tmva/test/stressTMVA.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx,1,['test'],['tests']
Testability,"// increase tolerance when using Cephes (test values are correctly checked with Mathematica; // GSL was more precise in this case; // Adapt also to 32 bits architectures",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testSpecFunc.cxx:41,test,test,41,math/mathmore/test/testSpecFunc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testSpecFunc.cxx,1,['test'],['test']
Testability,"// increment retVal for every failed test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit.cxx:37,test,test,37,roofit/roofitcore/test/stressRooFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit.cxx,1,['test'],['test']
Testability,"// inference code for gInterpreter->Declare + gROOT->ProcessLine; // one could also use TMacro build with correct signature; // TMacro m(""testSofie""); m.AddLine(""std::vector<float> testSofie(float *x) { return s.infer(x);}""); // std::vector<float> * result = (std::vector<float> *)m.Exec(Form(float*)0x%lx , xinput.data));",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx:138,test,testSofie,138,tmva/sofie/test/TestSofieModels.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx,2,['test'],['testSofie']
Testability,"// init...; // loop over test tree",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx:25,test,test,25,tmva/tmva/src/Classification.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx,2,['test'],['test']
Testability,"// insert additional points such that large log(tau) intervals; // near the minimum rho are divided into two",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldDensity.cxx:44,log,log,44,hist/unfold/src/TUnfoldDensity.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldDensity.cxx,1,['log'],['log']
Testability,"// insert additional points; // points are inserted such that the largest interval in log(tau); // is divided into two smaller intervals; // however, there is a penalty term for subdividing intervals; // which are far away from the minimum",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldDensity.cxx:86,log,log,86,hist/unfold/src/TUnfoldDensity.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfoldDensity.cxx,1,['log'],['log']
Testability,"// insertion cursor test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtml.cxx:20,test,test,20,gui/guihtml/src/TGHtml.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtml.cxx,1,['test'],['test']
Testability,"// instantiate multi-thread tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_datasetspec.cxx:28,test,tests,28,tree/dataframe/test/dataframe_datasetspec.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_datasetspec.cxx,4,['test'],['tests']
Testability,"// instantiate single-thread tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_datasetspec.cxx:29,test,tests,29,tree/dataframe/test/dataframe_datasetspec.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_datasetspec.cxx,2,['test'],['tests']
Testability,"// int i0=0, i1=fNQuant, i;; // for (int it = 0; it < LOG2fNQuant; ++it) {; // i = (i0+i1)/2;; // if (z > fQuant[i]) i0 = i;; // else i1 = i;; // }; // assert (i1-i0 == 1);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurate.cxx:152,assert,assert,152,math/mathmore/src/VavilovAccurate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurate.cxx,1,['assert'],['assert']
Testability,// integer logic,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/GISel/X86LegalizerInfo.cpp:11,log,logic,11,interpreter/llvm-project/llvm/lib/Target/X86/GISel/X86LegalizerInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/GISel/X86LegalizerInfo.cpp,1,['log'],['logic']
Testability,// inverts the predication logic.; // p -> NotP; // NotP -> P,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp:27,log,logic,27,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,2,['log'],['logic']
Testability,"// iret |= FitUsingNewFitter<GSL_BFGS2>(&t1,f2); // Too long for a test!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testFitPerf.cxx:67,test,test,67,roofit/roofit/test/testFitPerf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testFitPerf.cxx,1,['test'],['test']
Testability,"// iret |= FitUsingNewFitter<GSL_BFGS2>(h2,f2); // Too long for a test!; // test also fitting a TGraphErrors with histogram data",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testFitPerf.cxx:66,test,test,66,roofit/roofit/test/testFitPerf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testFitPerf.cxx,2,['test'],['test']
Testability,"// iret |= FitUsingNewFitter<GSL_BFGS2>(h2,f2,useGrad); // Too long for a test!; // test LS algorithm",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testFitPerf.cxx:74,test,test,74,roofit/roofit/test/testFitPerf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testFitPerf.cxx,2,['test'],['test']
Testability,"// iret |= testChebyQuad();; // iret |= testTrigoFletcher();",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testMinim.cxx:11,test,testChebyQuad,11,math/mathcore/test/fit/testMinim.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testMinim.cxx,2,['test'],"['testChebyQuad', 'testTrigoFletcher']"
Testability,"// iret |= testChebyQuad();; // iret |= testTrigoFletcher();; // iret |= testWood();; // iret |= testPowell();; // iret |= testQuadFunc();",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/testADMinim.cxx:11,test,testChebyQuad,11,math/minuit2/test/testADMinim.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/testADMinim.cxx,5,['test'],"['testChebyQuad', 'testPowell', 'testQuadFunc', 'testTrigoFletcher', 'testWood']"
Testability,"// iret |= testNewMinimizer(fRB,xRB,s0,""GSLMultiMin"",""ConjugateFR"");; // iret |= testNewMinimizer(fRB,xRB,s0,""GSLMultiMin"",""ConjugatePR"");; // iret |= testNewMinimizer(fRB,xRB,s0,""GSLMultiMin"",""BFGS"");; // iret |= testNewMinimizer(fRB,xRB,s0,""GSLMultiMin"",""BFGS2"");; // iret |= testOldMinimizer(RosenBrock,""Minuit"",2);; // iret |= testOldMinimizer(RosenBrock,""Minuit2"",2);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/testMinimizer.cxx:11,test,testNewMinimizer,11,math/minuit2/test/testMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/testMinimizer.cxx,6,['test'],"['testNewMinimizer', 'testOldMinimizer']"
Testability,"// iret |= testNewMinimizer(fTrigo,xTrigo,sTrigo,""GSLMultiMin"",""ConjugateFR"");; // iret |= testNewMinimizer(fTrigo,xTrigo,sTrigo,""GSLMultiMin"",""ConjugatePR"");; // iret |= testNewMinimizer(fTrigo,xTrigo,sTrigo,""GSLMultiMin"",""BFGS"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/testADMinim.cxx:11,test,testNewMinimizer,11,math/minuit2/test/testADMinim.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/testADMinim.cxx,6,['test'],['testNewMinimizer']
Testability,"// iret |= testNewMinimizer(func,x0,s0, ""GSLMultiMin"",""ConjugateFR"");; // iret |= testNewMinimizer(func,x0,s0, ""GSLMultiMin"",""ConjugatePR"");; // iret |= testNewMinimizer(func,x0,s0, ""GSLMultiMin"",""BFGS"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/testADMinim.cxx:11,test,testNewMinimizer,11,math/minuit2/test/testADMinim.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/testADMinim.cxx,6,['test'],['testNewMinimizer']
Testability,"// is fEND really EOF or logical EOF?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx:25,log,logical,25,io/io/src/TFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx,3,['log'],['logical']
Testability,// is it a Delaunay triangle? (ie. are there any other points; // inside the circle that is defined by its vertices?); // test the triangle for Delaunay'ness; // loop over all other points testing each to see if it's; // inside the triangle's circle,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:122,test,test,122,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,4,['test'],"['test', 'testing']"
Testability,"// is it a Delaunay triangle? (ie. are there any other points; // inside the circle that is defined by its vertices?); // test the triangle for Delaunay'ness; // loop over all other points testing each to see if it's; // inside the triangle's circle",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphDelaunay.cxx:122,test,test,122,hist/hist/src/TGraphDelaunay.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TGraphDelaunay.cxx,2,['test'],"['test', 'testing']"
Testability,// isInt32Immediate - This method tests to see if a constant operand.; // If so Imm will receive the 32 bit value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelDAGToDAG.cpp:34,test,tests,34,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelDAGToDAG.cpp,2,['test'],['tests']
Testability,// isIntImmediate - This method tests to see if a constant operand.; // If so Imm will receive the value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp:32,test,tests,32,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,1,['test'],['tests']
Testability,// isIntImmediate - This method tests to see if the node is a constant; // operand. If so Imm will receive the value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:32,test,tests,32,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['test'],['tests']
Testability,// isIntImmediateEq - This method tests to see if N is a constant operand that; // is equivalent to 'ImmExpected'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp:34,test,tests,34,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,1,['test'],['tests']
Testability,// isOpcWithIntImmediate - This method tests to see if the node is a specific; // opcode and that it has a immediate integer right operand.; // If so Imm will receive the 32 bit value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp:39,test,tests,39,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,3,['test'],['tests']
Testability,// isOpcWithIntImmediate - This method tests to see if the node is a specific; // opcode and that it has a immediate integer right operand.; // If so Imm will receive the value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:39,test,tests,39,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['test'],['tests']
Testability,// isa - Provide some specializations of isa so that we don't have to include; // the subtype header files to test to see if the value is a subclass...; //,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h:110,test,test,110,interpreter/llvm-project/llvm/include/llvm/IR/Value.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Value.h,1,['test'],['test']
Testability,// isa<ParenExpr> by assertion at function entrance,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:21,assert,assertion,21,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['assert'],['assertion']
Testability,"// it will assert otherwise later in GetPoint",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitUtil.h:11,assert,assert,11,math/mathcore/inc/Fit/FitUtil.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitUtil.h,3,['assert'],['assert']
Testability,"// it's important to have values of nL and nR close to one to hit the log computations",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooCrystalBall.cxx:70,log,log,70,roofit/roofit/test/testRooCrystalBall.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooCrystalBall.cxx,1,['log'],['log']
Testability,"// iterate over methods and test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:28,test,test,28,tmva/tmva/src/Factory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx,1,['test'],['test']
Testability,// just a stub to make base class happy,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNIterativeScheduler.cpp:10,stub,stub,10,interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNIterativeScheduler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNIterativeScheduler.cpp,1,['stub'],['stub']
Testability,"// kTRUE if logging is ON",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQCommand.h:12,log,logging,12,core/base/inc/TQCommand.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TQCommand.h,1,['log'],['logging']
Testability,"// kTRUE if the file is in the sandbox",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TProofOutputFile.h:31,sandbox,sandbox,31,proof/proof/inc/TProofOutputFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TProofOutputFile.h,1,['sandbox'],['sandbox']
Testability,"// kTRUE if this test is enabled",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:17,test,test,17,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['test'],['test']
Testability,"// kalman test with matrices (normal and sym) from TMatrix",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/stressKalman.cxx:10,test,test,10,math/smatrix/test/stressKalman.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/stressKalman.cxx,1,['test'],['test']
Testability,"// kalman test with normal matrices from SMatrix",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/stressKalman.cxx:10,test,test,10,math/smatrix/test/stressKalman.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/stressKalman.cxx,1,['test'],['test']
Testability,"// kalman test with sym matrices from SMatrix",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/stressKalman.cxx:10,test,test,10,math/smatrix/test/stressKalman.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/stressKalman.cxx,1,['test'],['test']
Testability,"// kbelasco: should this be changed to just (-rand > a) for logical; // consistency with below test when fType == kRegular?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx:60,log,logical,60,roofit/roostats/src/MetropolisHastings.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MetropolisHastings.cxx,2,"['log', 'test']","['logical', 'test']"
Testability,// kernarg_segment_alignment is specified as log of the alignment.; // The minimum alignment is 16.; // FIXME: The metadata treats the minimum as 4?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUAsmPrinter.cpp:45,log,log,45,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUAsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUAsmPrinter.cpp,1,['log'],['log']
Testability,"// lambdas and arrow functions are expressions, thus their r_brace is not; // on its own line, and thus not covered by UnwrappedLineFormatter's logic; // about removing empty lines on closing blocks. Special case them here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.cpp:144,log,logic,144,interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/ContinuationIndenter.cpp,1,['log'],['logic']
Testability,"// larger value test tolerance especially when using toys (difference of <~ 0.1 observed between using Minuit or; // Minuit2); // (inherited default value is 1e-3)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:16,test,test,16,roofit/roostats/test/stressRooStats_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h,2,['test'],['test']
Testability,"// last delta x; // current Deltax = p/q; // take a parabolic step only if:; // Deltax < 0.5* (DeltaX before last) && Deltax > a && Deltax < b; // (a BUG in testing this condition is fixed 11/3/2010 (with revision 32544)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BrentMethods.cxx:157,test,testing,157,math/mathcore/src/BrentMethods.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BrentMethods.cxx,1,['test'],['testing']
Testability,"// lc[2].position.set( 0, 0, -extR);; // console.log(""resetRenderer 2D scene bbox ex ey"", sbbox, ex, ey, "", camera_pos "", posC, "", look_at "", this.rot_center);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/GlViewerRCore.js:49,log,log,49,ui5/eve7/lib/GlViewerRCore.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/GlViewerRCore.js,1,['log'],['log']
Testability,"// length of log to capture and save",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:13,log,log,13,roofit/xroofit/src/xRooFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx,1,['log'],['log']
Testability,"// let box2 = new THREE.Box3().makeEmpty();; // box2.expandByObject(this._toplevel, true);; // console.log('min,max', box.min.x, box.max.x, box.min.y, box.max.y, box.min.z, box.max.z );; // if detect of coordinates fails - ignore",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:103,log,log,103,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['log']
Testability,// let three.js calculate our faces; // console.log(`triangulate polygon ${shape.fShapeId}`);,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:48,log,log,48,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['log']
Testability,"// let's do some tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoParallelWorld.cxx:17,test,tests,17,geom/geom/src/TGeoParallelWorld.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoParallelWorld.cxx,1,['test'],['tests']
Testability,"// libstdc++4.6 marks the vector default constructor as explicit in; // _GLIBCXX_DEBUG mode, so recover using the C++03 logic in that case.; // stlport does so too. Look for std::__debug for libstdc++, and for; // std:: for stlport. This is effectively a compiler-side implementation of; // LWG2193.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:120,log,logic,120,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,1,['log'],['logic']
Testability,// list-ilp is currently an experimental scheduler that allows various; // heuristics to be enabled prior to the normal register reduction logic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:139,log,logic,139,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,1,['log'],['logic']
Testability,"// little benchmark - child as sink",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:10,benchmark,benchmark,10,roofit/roofitcore/src/BidirMMapPipe.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx,1,['benchmark'],['benchmark']
Testability,"// little benchmark - child as source",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:10,benchmark,benchmark,10,roofit/roofitcore/src/BidirMMapPipe.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx,1,['benchmark'],['benchmark']
Testability,"// little benchmark - round trip time",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:10,benchmark,benchmark,10,roofit/roofitcore/src/BidirMMapPipe.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx,1,['benchmark'],['benchmark']
Testability,// log,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/tgmath.h:3,log,log,3,interpreter/llvm-project/clang/lib/Headers/tgmath.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/tgmath.h,2,['log'],['log']
Testability,"// log",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/TASPaletteEditor.cxx:3,log,log,3,graf2d/asimage/src/TASPaletteEditor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/TASPaletteEditor.cxx,1,['log'],['log']
Testability,"// log ( p / (1-p) )",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx:3,log,log,3,math/mathcore/src/GoFTest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx,1,['log'],['log']
Testability,"// log (debug) level",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/inc/TSessionViewer.h:3,log,log,3,gui/sessionviewer/inc/TSessionViewer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/inc/TSessionViewer.h,1,['log'],['log']
Testability,"// log (debug) level selector",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/inc/TSessionViewer.h:3,log,log,3,gui/sessionviewer/inc/TSessionViewer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/inc/TSessionViewer.h,1,['log'],['log']
Testability,"// log file for SQL statements",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/sql/inc/TSQLFile.h:3,log,log,3,io/sql/inc/TSQLFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/sql/inc/TSQLFile.h,1,['log'],['log']
Testability,"// log in case of looping on all the events",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:3,log,log,3,tmva/tmva/src/MethodBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx,1,['log'],['log']
Testability,"// log in tau",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx:3,log,log,3,hist/unfold/src/TUnfold.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx,1,['log'],['log']
Testability,"// log level",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:3,log,log,3,gui/sessionviewer/src/TSessionViewer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx,1,['log'],['log']
Testability,"// log level number entry",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/inc/TSessionViewer.h:3,log,log,3,gui/sessionviewer/inc/TSessionViewer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/inc/TSessionViewer.h,1,['log'],['log']
Testability,"// log normal constraint for parameter",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx:3,log,log,3,roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx,1,['log'],['log']
Testability,// log the error and returns an empty vector;,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-repl/ClangRepl.cpp:3,log,log,3,interpreter/llvm-project/clang/tools/clang-repl/ClangRepl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-repl/ClangRepl.cpp,1,['log'],['log']
Testability,// log(+inf) -> +inf; // log([+-]0.0) -> -inf; // log(-inf) -> nan; // log(-x) -> nan,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp:3,log,log,3,interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,4,['log'],['log']
Testability,// log(2**32) / log(36) ~= 7,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:3,log,log,3,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,2,['log'],['log']
Testability,// log(exp(x)) -> x,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:3,log,log,3,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['log'],['log']
Testability,"// log(exp{,2,10}(y)) -> y*log({e,2,10}); // TODO: There is no exp10() intrinsic yet.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp:3,log,log,3,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp,2,['log'],['log']
Testability,"// log(pow(x,y)) -> y*log(x)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp:3,log,log,3,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyLibCalls.cpp,2,['log'],['log']
Testability,"// log-normal PDF",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/inc/RooLognormal.h:3,log,log-normal,3,roofit/roofit/inc/RooLognormal.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/inc/RooLognormal.h,1,['log'],['log-normal']
Testability,"// logKappa=log(kappa)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurate.cxx:3,log,logKappa,3,math/mathmore/src/VavilovAccurate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurate.cxx,2,['log'],"['log', 'logKappa']"
Testability,"// logPdf for Poisson: ignore constant term depending on N",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:3,log,logPdf,3,math/mathcore/src/FitUtil.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx,1,['log'],['logPdf']
Testability,"// logarithmic plot. we find the pixel for the bin; // pixel = eta * log10(V) - alpha; // where eta = nPixels/(log10(Vmax)-log10(Vmin)); // and alpha = nPixels*log10(Vmin)/(log10(Vmax)-log10(Vmin)); // and V is axis value",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:3,log,logarithmic,3,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,1,['log'],['logarithmic']
Testability,"// logarithmic step flag",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGNumberEntry.cxx:3,log,logarithmic,3,gui/gui/src/TGNumberEntry.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGNumberEntry.cxx,1,['log'],['logarithmic']
Testability,// logb,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/tgmath.h:3,log,logb,3,interpreter/llvm-project/clang/lib/Headers/tgmath.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/tgmath.h,1,['log'],['logb']
Testability,"// logger << kINFO << "" "" << Endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx:3,log,logger,3,tmva/tmva/src/Tools.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx,1,['log'],['logger']
Testability,"// logical negation; // Unlike +/-/~, integer promotions aren't done here (C99 6.5.3.3p5).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:3,log,logical,3,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['log'],['logical']
Testability,"// logical to toggle whether the internal method for stopping boosting should be used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h:3,log,logical,3,tmva/rmva/inc/TMVA/MethodC50.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/rmva/inc/TMVA/MethodC50.h,1,['log'],['logical']
Testability,"// logl fit (error should be 0.5) set if different than default values (of 1)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:3,log,logl,3,math/mathcore/src/Fitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx,2,['log'],['logl']
Testability,"// lognormal_pdf uses same definition of http://en.wikipedia.org/wiki/Log-normal_distribution; // where mu = log(m)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:70,Log,Log-,70,math/mathcore/src/TMath.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx,2,"['Log', 'log']","['Log-', 'log']"
Testability,"// logon details (method dependent ...)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/inc/TAuthenticate.h:3,log,logon,3,net/auth/inc/TAuthenticate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/inc/TAuthenticate.h,1,['log'],['logon']
Testability,"// looking output for the first tested method",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/envelope/testClassification.cxx:32,test,tested,32,tmva/tmva/test/envelope/testClassification.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/envelope/testClassification.cxx,1,['test'],['tested']
Testability,"// loop over all logfiles stored in durations_",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/src/HeatmapAnalyzer.cxx:17,log,logfiles,17,roofit/multiprocess/src/HeatmapAnalyzer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/src/HeatmapAnalyzer.cxx,1,['log'],['logfiles']
Testability,"// loop over points to test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx:23,test,test,23,roofit/roostats/src/NeymanConstruction.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx,1,['test'],['test']
Testability,"// loops over all evaluated partitions in logfile",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/src/HeatmapAnalyzer.cxx:42,log,logfile,42,roofit/multiprocess/src/HeatmapAnalyzer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/src/HeatmapAnalyzer.cxx,1,['log'],['logfile']
Testability,"// low level logging",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnPrint.h:13,log,logging,13,math/minuit2/inc/Minuit2/MnPrint.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnPrint.h,1,['log'],['logging']
Testability,"// lower limit on test statistic",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ConfidenceBelt.h:18,test,test,18,roofit/roostats/inc/RooStats/ConfidenceBelt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/ConfidenceBelt.h,1,['test'],['test']
Testability,"// lrs and lrb are the LR's (no logs) = prob(s+b)/prob(b) for; // that choice of s and b within syst. errors in the ensemble. These are; // the MC experiment weights for relating the s+b and b PDF's of the unsmeared; // test statistic (in which cas one can use another test statistic if one likes).; // Now produce the output object.; // The final quantities are computed on-demand form the arrays tss, tsb, lrs and lrb.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TLimit.cxx:32,log,logs,32,hist/hist/src/TLimit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TLimit.cxx,3,"['log', 'test']","['logs', 'test']"
Testability,"// m->SetTestvarName(testvarName);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCrossValidation.cxx:21,test,testvarName,21,tmva/tmva/src/MethodCrossValidation.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCrossValidation.cxx,1,['test'],['testvarName']
Testability,"// make as a weighted histo to test weighted fits",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:31,test,test,31,test/stressHistoFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx,2,['test'],['test']
Testability,"// make chi2 test; //double pvalChi2 = h1->Chi2Test(h2,""WW P"");; // note Chisquare called SetParameters and delete histogram returned from the function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tkde.cxx:13,test,test,13,hist/hist/test/test_tkde.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tkde.cxx,1,['test'],['test']
Testability,"// making our convolution much more accurate; // Numeric integration of this function suffers from roundoff errors, so the default 1.E-12 accuracy won't be reached.; // By reducing the tolerance, we get rid of a GSL warning, which was picked up by the log checkers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tf1.cxx:252,log,log,252,hist/hist/test/test_tf1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tf1.cxx,1,['log'],['log']
Testability,"// mark if we are in an actual training or ""evaluation/testing"" phase --> ignoreNegWeights only in actual training !",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Event.h:55,test,testing,55,tmva/tmva/inc/TMVA/Event.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Event.h,1,['test'],['testing']
Testability,"// mask linear test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:15,test,test,15,test/stressHistoFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx,1,['test'],['test']
Testability,"// matrix-vector product:; // use apply(i) function for matrices. Tested (11/05/06) with using (i,j) but; // performances are slightly worse (not clear why); //==============================================================================; // meta_row_dot; //==============================================================================",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/MatrixFunctions.h:66,Test,Tested,66,math/smatrix/inc/Math/MatrixFunctions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/inc/Math/MatrixFunctions.h,1,['Test'],['Tested']
Testability,"// maximum weight; // test MC loop exit condition",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/foam/src/TFoam.cxx:22,test,test,22,math/foam/src/TFoam.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/foam/src/TFoam.cxx,2,['test'],['test']
Testability,"// may be overwritten by derived classes; // ---------- main training and testing methods ------------------------------; // prepare tree branch with the method's discriminating variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:74,test,testing,74,tmva/tmva/inc/TMVA/MethodBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h,1,['test'],['testing']
Testability,"// maybe later on this should be done a bit more clever (time consuming) by; // first determining proper ranges, removing outliers, as we do in the; // MVA output calculation in MethodBase::TestClassifier...; // --> then it might be possible also to use the splined PDF's which currently; // doesn't seem to work",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx:190,Test,TestClassifier,190,tmva/tmva/src/OptimizeConfigParameters.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx,1,['Test'],['TestClassifier']
Testability,"// message logger",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Interval.cxx:11,log,logger,11,tmva/tmva/src/Interval.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Interval.cxx,3,['log'],['logger']
Testability,"// methodName.Data(), (htype == kCompareType ? ""training"" : ""test"" )) );",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/deviations.cxx:61,test,test,61,tmva/tmvagui/src/deviations.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/deviations.cxx,1,['test'],['test']
Testability,"// mimic the logic of RVecInlineStorageSize, but at runtime",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RField.cxx:13,log,logic,13,tree/ntuple/v7/src/RField.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RField.cxx,1,['log'],['logic']
Testability,"// missing LV test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/testGenVector.cxx:14,test,test,14,math/genvector/test/testGenVector.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/testGenVector.cxx,1,['test'],['test']
Testability,"// mock Filter logic -- validity checks and Define-ition of RDataSource columns",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/InterfaceUtils.hxx:3,mock,mock,3,tree/dataframe/inc/ROOT/RDF/InterfaceUtils.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/InterfaceUtils.hxx,2,"['log', 'mock']","['logic', 'mock']"
Testability,"// modular test statistic non parallel",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMinimizer.cxx:11,test,test,11,roofit/roofitcore/src/RooMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMinimizer.cxx,1,['test'],['test']
Testability,"// monitors convergence of independent test sample; // monitoring histograms (not available for regression)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h:39,test,test,39,tmva/tmva/inc/TMVA/MethodANNBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h,1,['test'],['test']
Testability,"// more template testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/advancedcpp.h:17,test,testing,17,bindings/pyroot/cppyy/cppyy/test/advancedcpp.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/advancedcpp.h,1,['test'],['testing']
Testability,"// multi-dim test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx:13,test,test,13,math/mathmore/test/testFunctor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx,1,['test'],['test']
Testability,// must be a logical shift.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:13,log,logical,13,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,1,['log'],['logical']
Testability,"// must have a valid decision tree to prune, and if the prune strength; // is to be chosen automatically, must have a test sample from; // which to calculate the quality of the pruned tree(s)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CostComplexityPruneTool.cxx:118,test,test,118,tmva/tmva/src/CostComplexityPruneTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CostComplexityPruneTool.cxx,2,['test'],['test']
Testability,"// must update this test when https://github.com/root-project/root/issues/9894 is addressed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_vary.cxx:20,test,test,20,tree/dataframe/test/dataframe_vary.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_vary.cxx,1,['test'],['test']
Testability,"// mutable MsgLogger* fLogger; ///<! output stream to save logging information; // MsgLogger& Log() const { return *fLogger; }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IPruneTool.h:59,log,logging,59,tmva/tmva/inc/TMVA/IPruneTool.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/IPruneTool.h,2,"['Log', 'log']","['Log', 'logging']"
Testability,"// n/= 100;; // method = ""vnrou"";; // iret |= testUnuran(unr, method, dist100, hN, hrefN,100);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranMultiDim.cxx:46,test,testUnuran,46,math/unuran/test/unuranMultiDim.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranMultiDim.cxx,1,['test'],['testUnuran']
Testability,"// names of tested variables must be the same in write / comparison modes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:12,test,tested,12,roofit/roostats/test/stressRooStats_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h,1,['test'],['tested']
Testability,"// namespace ArrayTest; // helpers for string testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/stltypes.h:46,test,testing,46,bindings/pyroot/cppyy/cppyy/test/stltypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/stltypes.h,1,['test'],['testing']
Testability,"// namespace Experimental; /// Log channel for Browsable diagnostics.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/browsable/inc/ROOT/Browsable/RHolder.hxx:31,Log,Log,31,gui/browsable/inc/ROOT/Browsable/RHolder.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/browsable/inc/ROOT/Browsable/RHolder.hxx,1,['Log'],['Log']
Testability,"// namespace Experimental; /// Log channel for Browser diagnostics.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/browserv7/inc/ROOT/RBrowserData.hxx:31,Log,Log,31,gui/browserv7/inc/ROOT/RBrowserData.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/browserv7/inc/ROOT/RBrowserData.hxx,1,['Log'],['Log']
Testability,"// namespace Experimental; /// Log channel for Geomviewer diagnostics.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/webviewer/inc/ROOT/RGeomData.hxx:31,Log,Log,31,geom/webviewer/inc/ROOT/RGeomData.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/webviewer/inc/ROOT/RGeomData.hxx,1,['Log'],['Log']
Testability,"// namespace Experimental; /// Log channel for WebGUI diagnostics.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/inc/ROOT/RWebDisplayArgs.hxx:31,Log,Log,31,gui/webdisplay/inc/ROOT/RWebDisplayArgs.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/inc/ROOT/RWebDisplayArgs.hxx,1,['Log'],['Log']
Testability,"// namespace GraphDrawing; // clang-format off; /**; * \class ROOT::Internal::RDF::RAction; * \ingroup dataframe; * \brief A RDataFrame node that produces a result; * \tparam Helper The action helper type, which implements the concrete action logic (e.g. FillHelper, SnapshotHelper); * \tparam PrevNode The type of the parent node in the computation graph; * \tparam ColumnTypes_t A TypeList with the types of the input columns; *; */; // clang-format on",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RAction.hxx:243,log,logic,243,tree/dataframe/inc/ROOT/RDF/RAction.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RAction.hxx,1,['log'],['logic']
Testability,"// namespace ROOT::TestSupport",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/testsupport/inc/ROOT/TestSupport.hxx:19,Test,TestSupport,19,core/testsupport/inc/ROOT/TestSupport.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/testsupport/inc/ROOT/TestSupport.hxx,1,['Test'],['TestSupport']
Testability,// namespace StubParser,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TextAPI/TextStubV5.cpp:13,Stub,StubParser,13,interpreter/llvm-project/llvm/lib/TextAPI/TextStubV5.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TextAPI/TextStubV5.cpp,1,['Stub'],['StubParser']
Testability,"// namespace T_WithRValue; // The following is hidden from the Cling interpreter, but available to the; // linker; it allows for testing whether a function return is picked up from; // the compiled instantation or from the interpreter.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/templates.cxx:129,test,testing,129,bindings/pyroot/cppyy/cppyy/test/templates.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/templates.cxx,1,['test'],['testing']
Testability,"// namespace TestStatistics",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/buildLikelihood.h:13,Test,TestStatistics,13,roofit/roofitcore/inc/RooFit/TestStatistics/buildLikelihood.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/buildLikelihood.h,28,['Test'],['TestStatistics']
Testability,"// namespace X86; /// isGlobalStubReference - Return true if the specified TargetFlag operand is; /// a reference to a stub for a global, not the global itself.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.h:119,stub,stub,119,interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.h,1,['stub'],['stub']
Testability,"// namespace bitfields_details; /// Holds functions to get, set or test bitfields.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Bitfields.h:67,test,test,67,interpreter/llvm-project/llvm/include/llvm/ADT/Bitfields.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/Bitfields.h,1,['test'],['test']
Testability,"// namespace detail; /// Determine if all types in Ts are distinct.; ///; /// Useful to statically assert when Ts is intended to describe a non-multi set; /// of types.; ///; /// Expensive (currently quadratic in sizeof(Ts...)), and so should only be; /// asserted once per instantiation of a type which requires it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:99,assert,assert,99,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,2,['assert'],"['assert', 'asserted']"
Testability,"// namespace detail; /// Support for printing to std::ostream, for use with e.g. producing more; /// useful error messages with Google Test.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/ADT/StringMapEntry.h:135,Test,Test,135,interpreter/llvm-project/llvm/include/llvm/Testing/ADT/StringMapEntry.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Testing/ADT/StringMapEntry.h,1,['Test'],['Test']
Testability,"// namespace detail; /// dyn_cast<X> - Return the argument parameter cast to the specified type. This; /// casting operator returns null if the argument is of the wrong type, so it; /// can be used to test for a type as well as cast if successful. The value; /// passed in must be present, if not, use dyn_cast_if_present. This should be; /// used in the context of an if statement like this:; ///; /// if (const Instruction *I = dyn_cast<Instruction>(myVal)) { ... }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Casting.h:201,test,test,201,interpreter/llvm-project/llvm/include/llvm/Support/Casting.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Casting.h,1,['test'],['test']
Testability,// namespace logicalview,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h:13,log,logicalview,13,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h,6,['log'],['logicalview']
Testability,"// namespace; /** \class HeatmapAnalyzer; *; * \brief Reads and processes logfiles produced by RooFit::MultiProcess::ProcessTimer; *; * RooFit::MultiProcess::ProcessTimer records timings of multiple processes simultaneously; * and allows for these timings to be written out in json format, one for each process.; * This class, the HeatmapAnalyzer, can read these json files and produce a heatmap from; * them with partial derivatives on the y-axis, likelihood evaluations on the x-axis, and; * time expenditures on the z-axis. This class also contains some convenience functions; * for inspecting these log files.; *; * Note that this class requires the logfiles to contain three specific keys in the json:; * - `master:gradient` containing an array of gradient timestamps; * - `*eval_task*<task_number>` containing an array of task evaluation timestamps.; * - `*eval_partition*` containing an array of partition evaluation timestamps; */; ////////////////////////////////////////////////////////////////////////////////; /// HeatmapAnalyzer Constructor. This method reads the input files in the folder; /// specified by the user and creates internal attributes used by the other; /// methods in this class.; /// \param[in] logs_dir Directory where log files are stored in the format; /// outputted by RooFit::MultiProcess::ProcessTimer.; /// There can be other files in this directory as well.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/src/HeatmapAnalyzer.cxx:74,log,logfiles,74,roofit/multiprocess/src/HeatmapAnalyzer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/src/HeatmapAnalyzer.cxx,4,['log'],"['log', 'logfiles']"
Testability,"// namespace; // Test TPython::Exec from multiple threads.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/tpython/test/testTPython.cxx:17,Test,Test,17,bindings/tpython/test/testTPython.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/tpython/test/testTPython.cxx,1,['Test'],['Test']
Testability,"// namespace; // Test environment to verify that if we use the feature of storing global; // observables in a RooDataSet, we can reproduce the same fit results as when; // we track the global observables separately.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testGlobalObservables.cxx:17,Test,Test,17,roofit/roofitcore/test/testGlobalObservables.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testGlobalObservables.cxx,1,['Test'],['Test']
Testability,"// namespace; // Test that a simple fit with Gauss and Voigt yields the same values as with; // ROOT 6.18. The fit requires numeric integration for the Voigt. To suppress; // false positives, the precision for numeric integrals was increased by 1000x.; // This test uses Minuit2.; //; // Previously in: roottest/root/roofitstats/stabilityTests.cxx",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/stabilityTests.cxx:17,Test,Test,17,roofit/roofit/test/stabilityTests.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/stabilityTests.cxx,2,"['Test', 'test']","['Test', 'test']"
Testability,"// namespace; // Test that the IO of attributes and string attributes works.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/test/testRooFitHS3.cxx:17,Test,Test,17,roofit/hs3/test/testRooFitHS3.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/test/testRooFitHS3.cxx,1,['Test'],['Test']
Testability,"// namespace; /// Private modules are canonicalized as Foo_Private. Clang provides extra; /// module map search logic to find the appropriate private module when PCH; /// is used with implicit module maps. Warn when private modules are written; /// in other ways (FooPrivate and Foo.Private), providing notes and fixits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/ModuleMap.cpp:112,log,logic,112,interpreter/llvm-project/clang/lib/Lex/ModuleMap.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/ModuleMap.cpp,1,['log'],['logic']
Testability,"// namespace; /// Test based on rf706 tutorial",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx:18,Test,Test,18,roofit/roofitcore/test/testRooFuncWrapper.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx,1,['Test'],['Test']
Testability,"// namespace; /// Test based on the simultaneous fit shown in CHEP'23 results",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx:18,Test,Test,18,roofit/roofitcore/test/testRooFuncWrapper.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx,1,['Test'],['Test']
Testability,// namespace; /// Test whether the given value is an Alloca-derived function argument.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp:18,Test,Test,18,interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,1,['Test'],['Test']
Testability,// namespace; /// Tests whether a pass name starts with a valid prefix for a default pipeline; /// alias.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:18,Test,Tests,18,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,1,['Test'],['Tests']
Testability,"// namespace; ////////////////////////////////////////////////////////////////////////////////; /// Create the parameter constraint sum to add to the negative log-likelihood.; /// \return If there are constraints, returns a pointer to the constraint NLL.; /// Returns a `nullptr` if the parameters are unconstrained.; /// \param[in] name Name of the created RooConstraintSum object.; /// \param[in] pdf The PDF model whose parameters should be constrained.; /// Constraint terms will be extracted from RooProdPdf instances; /// that are servers of the PDF (internal constraints).; /// \param[in] data Dataset used in the fit with the constraint sum. It is; /// used to figure out which are the observables and also to get the; /// global observables definition and values if they are stored in; /// the dataset.; /// \param[in] constrainedParameters Set of parameters to constrain. If `nullptr`, all; /// parameters will be considered.; /// \param[in] externalConstraints Set of constraint terms that are not; /// embedded in the PDF (external constraints).; /// \param[in] globalObservables The normalization set for the constraint terms.; /// If it is `nullptr`, the set of all constrained parameters will; /// be used as the normalization set.; /// \param[in] globalObservablesTag Alternative to define the normalization set; /// for the constraint terms. All constrained parameters that have; /// the attribute with the tag defined by `globalObservablesTag` are; /// used. The `globalObservables` and `globalObservablesTag`; /// parameters are mutually exclusive, meaning at least one of them; /// has to be `nullptr`.; /// \param[in] takeGlobalObservablesFromData If the dataset should be used to automatically; /// define the set of global observables. If this is the case and the; /// set of global observables is still defined manually with the; /// `globalObservables` or `globalObservablesTag` parameters, the; /// values of all global observables that are not stored in the; /// dataset are",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ConstraintHelpers.cxx:159,log,log-likelihood,159,roofit/roofitcore/src/ConstraintHelpers.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ConstraintHelpers.cxx,1,['log'],['log-likelihood']
Testability,"// namespace; ////////////////////////////////////////////////////////////////////////////////; /// Return true if this fit result is identical to other within tolerances, ignoring the correlation matrix.; /// \param[in] other Fit result to test against.; /// \param[in] tol **Relative** tolerance for parameters and NLL.; /// \param[in] tolErr **Relative** tolerance for parameter errors.; /// \param[in] verbose If this function will log to the standard output when comparisons fail.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFitResult.cxx:241,test,test,241,roofit/roofitcore/src/RooFitResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFitResult.cxx,2,"['log', 'test']","['log', 'test']"
Testability,"// need do find minimum of log-likelihood in the range to shift function; // to avoid numerical errors when we compute the likelihood (overflows in the exponent); // N.B.: this works for only 1 parameter of interest otherwise Minuit should be used for finding the minimum",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx:27,log,log-likelihood,27,roofit/roostats/src/BayesianCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BayesianCalculator.cxx,1,['log'],['log-likelihood']
Testability,"// need to add test for GSL algorithms with derivatives",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx:15,test,test,15,math/mathcore/test/testRootFinder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx,1,['test'],['test']
Testability,"// need to create a new multi-dim distribution with log of pdf",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranMulti2D.cxx:52,log,log,52,math/unuran/test/unuranMulti2D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranMulti2D.cxx,2,['log'],['log']
Testability,"// need to test mag since order can change",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:11,test,test,11,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,1,['test'],['test']
Testability,"// needed to test whether ret is indeed an object with a vtable!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/html/src/TDocDirective.cxx:13,test,test,13,html/src/TDocDirective.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/html/src/TDocDirective.cxx,1,['test'],['test']
Testability,"// needs resetting between sequential and MT tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_vary.cxx:45,test,tests,45,tree/dataframe/test/dataframe_vary.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_vary.cxx,1,['test'],['tests']
Testability,"// negative loglikelihood",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitUtil.h:12,log,loglikelihood,12,math/mathcore/inc/Fit/FitUtil.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitUtil.h,2,['log'],['loglikelihood']
Testability,"// new test statistic with multiprocessing library with; // parallel likelihood or parallel gradient",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMinimizer.cxx:7,test,test,7,roofit/roofitcore/src/RooMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMinimizer.cxx,1,['test'],['test']
Testability,"// no need to add in this case n log(nu) since is already computed before",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitUtil.h:33,log,log,33,math/mathcore/inc/Fit/FitUtil.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitUtil.h,2,['log'],['log']
Testability,"// no ranking test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx:14,test,test,14,tmva/tmva/src/MethodLikelihood.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx,1,['test'],['test']
Testability,"// no test results printing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx:6,test,test,6,math/mathcore/test/stressGoFTest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx,1,['test'],['test']
Testability,"// no unary, but is stubbed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Utility.cxx:20,stub,stubbed,20,bindings/pyroot/cppyy/CPyCppyy/src/Utility.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Utility.cxx,1,['stub'],['stubbed']
Testability,"// nomenclature r = available training; // s = available testing; // u = available undefined; // R = requested training; // S = requested testing; // nR = to be used to select training events; // nS = to be used to select test events; // we have the constraint: nR + nS < r+s+u,; // since we can not use more events than we have; // free events: Nfree = u-Thet(R-r)-Thet(S-s); // nomenclature: Thet(x) = x, if x>0 else 0; // nR = max(R,r) + 0.5 * Nfree; // nS = max(S,s) + 0.5 * Nfree; // nR +nS = R+S + u-R+r-S+s = u+r+s= ok! for R>r; // nR +nS = r+S + u-S+s = u+r+s= ok! for r>R; // three different cases might occur here; //; // Case a; // requestedTraining and requestedTesting >0; // free events: Nfree = u-Thet(R-r)-Thet(S-s); // nR = Max(R,r) + 0.5 * Nfree; // nS = Max(S,s) + 0.5 * Nfree; //; // Case b; // exactly one of requestedTraining or requestedTesting >0; // assume training R >0; // nR = max(R,r); // nS = s+u+r-nR; // and s=nS; //; // Case c; // requestedTraining=0, requestedTesting=0; // Nfree = u-|r-s|; // if NFree >=0; // R = Max(r,s) + 0.5 * Nfree = S; // else if r>s; // R = r; S=s+u; // else; // R = r+u; S=s; //; // Next steps:; // Determination of Event numbers R,S, nR, nS; // distribute undefined events according to nR, nS; // finally determine actual sub samples from nR and nS to be used in training / testing; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:57,test,testing,57,tmva/tmva/src/DataSetFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx,4,['test'],"['test', 'testing']"
Testability,// noop assertion.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:8,assert,assertion,8,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,1,['assert'],['assertion']
Testability,"// not needed but just to test vectorized ctor of TF1",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testLogLExecPolicy.cxx:26,test,test,26,math/mathcore/test/fit/testLogLExecPolicy.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testLogLExecPolicy.cxx,1,['test'],['test']
Testability,"// not needed; /// set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverter.h:39,test,test,39,roofit/roostats/inc/RooStats/HypoTestInverter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HypoTestInverter.h,1,['test'],['test']
Testability,"// not really options but here for logging purposes; // extraOpts->SetValue(""ROOTVersion"",ROOT_VERSION_CODE); - not needed as should by part of the ROOT TFile definition; // extraOpts->SetValue(""HessianStepTolerance"",0.);; // extraOpts->SetValue(""HessianG2Tolerance"",0.);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:35,log,logging,35,roofit/xroofit/src/xRooFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx,1,['log'],['logging']
Testability,"// note ... it may be sufficient here to do:; // nll.constOptimizeTestStatistic(RooAbsArg::ConfigChange, constOptimize>1 /* do tracking too if >1 */); //; // trigger a re-evaluate of which nodes to cache-and-track nll.constOptimizeTestStatistic(RooAbsArg::ValueChange,; // constOptimize>1); // update the cache values -- is this needed??; // this forces the optimization to be redone; // for now leave as a reinitialize though, until had a chance to test this properly",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:450,test,test,450,roofit/xroofit/src/xRooNLLVar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx,1,['test'],['test']
Testability,"// note in this test label axis (y) is not extendable because labels are matching the bins; // and we can test also the Mean and RMS",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:16,test,test,16,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,['test'],['test']
Testability,"// note in this test label axis (y) is not extendable because labels are matching the bins; // and we can test also the Mean and RMS; // reset stats so h2 will have a fake mean,stddev; // by setting labels in h1 we make its axis extendable and we get zero statistics in Y",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:16,test,test,16,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,['test'],['test']
Testability,"// note that Operand shouldn't be null, but the test helps make dump(); // more tolerant of malformed IR",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AsmWriter.cpp:48,test,test,48,interpreter/llvm-project/llvm/lib/IR/AsmWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/AsmWriter.cpp,1,['test'],['test']
Testability,"// note that with different numbers of accumulators we expect floating-point equality,; // like in the legacy test above, not exact equality",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx:110,test,test,110,math/mathcore/test/testKahan.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx,1,['test'],['test']
Testability,"// note: this is valid for simultaneous likelihoods, not for other test statistic types (e.g. chi2) for which this; // should return true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/buildLikelihood.cxx:67,test,test,67,roofit/roofitcore/src/TestStatistics/buildLikelihood.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/buildLikelihood.cxx,1,['test'],['test']
Testability,"// now compute rmin and rmax and test the value of r",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoPgon.cxx:33,test,test,33,geom/geom/src/TGeoPgon.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoPgon.cxx,1,['test'],['test']
Testability,"// now compute the sums for the tests ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx:32,test,tests,32,math/mathcore/src/GoFTest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx,1,['test'],['tests']
Testability,"// now run some timing tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/testGenVectorVc.cxx:23,test,tests,23,test/testGenVectorVc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/testGenVectorVc.cxx,1,['test'],['tests']
Testability,// now test each instance,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:7,test,test,7,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['test'],['test']
Testability,"// now test if the match is unambiguous by checking for another match",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:7,test,test,7,core/dictgen/res/OptionParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h,1,['test'],['test']
Testability,"// now test inversion of general",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:7,test,test,7,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,2,['test'],['test']
Testability,"// now test saved at middle of bins",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tf1.cxx:7,test,test,7,hist/hist/test/test_tf1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tf1.cxx,1,['test'],['test']
Testability,"// now test that functions are consistent; //itest = (h1->GetMean() != h2->GetMean() );",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:7,test,test,7,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['test'],['test']
Testability,"// number of bins in histos; // loop over all testing signal and BG events and clac minimal and; // maximal value of every variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:46,test,testing,46,tmva/tmva/src/MethodPDEFoam.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx,1,['test'],['testing']
Testability,"// number of selected test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:22,test,test,22,test/stressHistoFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx,1,['test'],['test']
Testability,"// number of tests to run; // scalar data",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/testGenVectorVc.cxx:13,test,tests,13,test/testGenVectorVc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/testGenVectorVc.cxx,1,['test'],['tests']
Testability,"// numerically very difficult test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h:30,test,test,30,roofit/roofitcore/test/stressRooFit_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h,1,['test'],['test']
Testability,"// observed test statistic value",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h:12,test,test,12,roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,1,['test'],['test']
Testability,"// old directory where test is started",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/stressHistFactory.cxx:23,test,test,23,roofit/histfactory/test/stressHistFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/stressHistFactory.cxx,1,['test'],['test']
Testability,"// one worker to keep it light, it's really irrelevant in this test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/test/test_Queue.cxx:63,test,test,63,roofit/multiprocess/test/test_Queue.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/test/test_Queue.cxx,2,['test'],['test']
Testability,"// only Gamma, Uniform, LogNormal and NoConstraint are valid types",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/ConfigParser.cxx:24,Log,LogNormal,24,roofit/histfactory/src/ConfigParser.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/ConfigParser.cxx,1,['Log'],['LogNormal']
Testability,"// only Logistic Regression Layer",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:8,Log,Logistic,8,tmva/tmva/inc/TMVA/DNN/DeepNet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h,1,['Log'],['Logistic']
Testability,"// only because of logger channel",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/qt5webdisplay/rooturlschemehandler.cpp:19,log,logger,19,gui/qt5webdisplay/rooturlschemehandler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/qt5webdisplay/rooturlschemehandler.cpp,1,['log'],['logger']
Testability,// only get basic properties like log scale,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:34,log,log,34,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['log'],['log']
Testability,"// only run test if it was selected",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressInterpreter.cxx:12,test,test,12,test/stressInterpreter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressInterpreter.cxx,1,['test'],['test']
Testability,// only used inside assert.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/Attributor.cpp:20,assert,assert,20,interpreter/llvm-project/llvm/lib/Transforms/IPO/Attributor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/Attributor.cpp,1,['assert'],['assert']
Testability,"// operator == fails for numerical precision; //iret |= compare( (rot2==rot),true,""Get/SetComponens"");; // test get/set with a matrix",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/testGenVector.cxx:107,test,test,107,math/genvector/test/testGenVector.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/testGenVector.cxx,1,['test'],['test']
Testability,"// operator delete tainted the memory, we can not rely on TestBit(kNotDeleted)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx:58,Test,TestBit,58,core/base/src/TObject.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TObject.cxx,1,['Test'],['TestBit']
Testability,"// original test:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:12,test,test,12,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,3,['test'],['test']
Testability,"// otherwise something is wrong; // std::cout << ""n variables "" << fVarIndices.size() << std::endl;; // std::ostream_iterator<int> oi(std::cout,"" "");; // std::copy(fVarIndices.begin(), fVarIndices.end(), oi);; // std::cout << std::endl;; // assert( fVarIndices.size() == fDim);; // std::cout << this << std::endl;; // set parameter values in fX",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h:241,assert,assert,241,math/mathcore/inc/Math/WrappedParamFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h,1,['assert'],['assert']
Testability,"// output logging verbosity",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:10,log,logging,10,tmva/tmva/src/DataSetFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx,1,['log'],['logging']
Testability,"// overload order testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/advancedcpp.cxx:18,test,testing,18,bindings/pyroot/cppyy/cppyy/test/advancedcpp.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/advancedcpp.cxx,2,['test'],['testing']
Testability,"// p-value for velues of testStat >= testStat_data (or testStat <= testStat_data)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridResult.h:25,test,testStat,25,roofit/roostats/inc/RooStats/HybridResult.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridResult.h,2,['test'],['testStat']
Testability,"// page()->runJavaScript(""var jsroot_qt5_identifier = true;"");; // page()->runJavaScript(""window.jsroot_qt5_identifier = true;"");; // page()->runJavaScript(""console.log('window type = ' + typeof window + ' 1: ' + typeof jsroot_qt5_identifier + ' 2: ' + typeof window.jsroot_qt5_identifier);"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/qt5webdisplay/rootwebview.cpp:165,log,log,165,gui/qt5webdisplay/rootwebview.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/qt5webdisplay/rootwebview.cpp,1,['log'],['log']
Testability,"// parabolic version of log-normal",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h:24,log,log-normal,24,roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h,1,['log'],['log-normal']
Testability,"// parent; // start test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_HWM.cxx:20,test,test,20,roofit/roofitZMQ/test/test_HWM.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_HWM.cxx,1,['test'],['test']
Testability,"// parse DIExpressions inline as a special case. They are still MDNodes,; // so they can still appear in named metadata. Remove this logic if they; // become plain Metadata.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/AsmParser/LLParser.cpp:133,log,logic,133,interpreter/llvm-project/llvm/lib/AsmParser/LLParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/AsmParser/LLParser.cpp,1,['log'],['logic']
Testability,"// partial heatmap is the heatmap that will be filled in for the current durations logfile",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/src/HeatmapAnalyzer.cxx:83,log,logfile,83,roofit/multiprocess/src/HeatmapAnalyzer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/src/HeatmapAnalyzer.cxx,1,['log'],['logfile']
Testability,"// perform K-S test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/mvas.cxx:15,test,test,15,tmva/tmvagui/src/mvas.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/mvas.cxx,2,['test'],['test']
Testability,"// perform a log binning if specified by user (option=""Log"") or if some conditions are met; // and the user explicitly does not specify a Linear binning option",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:13,log,log,13,hist/hist/src/TF1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx,2,"['Log', 'log']","['Log', 'log']"
Testability,"// perform login",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx:11,log,login,11,net/rpdutils/src/rpdutils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/rpdutils/src/rpdutils.cxx,1,['log'],['login']
Testability,"// perform series of validation tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h:32,test,tests,32,tmva/tmva/inc/TMVA/PDF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h,1,['test'],['tests']
Testability,"// perform the minimization initializing the minimizer starting from a given obj function; // and apply afterwards the correction for weights. This applies only for logL fitting",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:165,log,logL,165,math/mathcore/src/Fitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx,1,['log'],['logL']
Testability,"// performPRE() will trigger assert if it comes across an instruction without; // associated val-num. As it normally has far more live instructions than dead; // instructions, it makes more sense just to ""fabricate"" a val-number for the; // dead code than checking if instruction involved is dead or not.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp:29,assert,assert,29,interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp,1,['assert'],['assert']
Testability,"// performs classifier testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyAdaBoost.h:23,test,testing,23,tmva/pymva/inc/TMVA/MethodPyAdaBoost.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyAdaBoost.h,7,['test'],['testing']
Testability,"// performs multiclass classifier testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:34,test,testing,34,tmva/tmva/inc/TMVA/MethodBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h,1,['test'],['testing']
Testability,"// performs regression testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:23,test,testing,23,tmva/tmva/inc/TMVA/MethodBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h,1,['test'],['testing']
Testability,"// performs the MethodBase testing + testing of each boosted classifier",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBoost.h:27,test,testing,27,tmva/tmva/inc/TMVA/MethodBoost.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBoost.h,2,['test'],['testing']
Testability,"// piece-wise log",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h:14,log,log,14,roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h,1,['log'],['log']
Testability,"// plotFile = std::string(gSystem->TempDirectory())+std::string(""/test-stdsort.pdf"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stdsort.cxx:66,test,test-stdsort,66,math/mathcore/test/stdsort.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stdsort.cxx,1,['test'],['test-stdsort']
Testability,"// precompute the log(1+s/b)'s in an array to speed up computation; // background-free bins are set to have a maximum t.s. value; // for protection (corresponding to s/b of about 5E8)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TLimit.cxx:18,log,log,18,hist/hist/src/TLimit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TLimit.cxx,1,['log'],['log']
Testability,"// prevent divide by zero, should not happen if matrix is orthogonal and should be; // caught by singularity test above, but I've left it in just in case",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:109,test,test,109,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['test'],['test']
Testability,"// print all chi2 test info",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranDiscrete.cxx:18,test,test,18,math/unuran/test/unuranDiscrete.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranDiscrete.cxx,8,['test'],['test']
Testability,"// print out reason of test failures",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:23,test,test,23,test/stressMathCore.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx,2,['test'],['test']
Testability,"// printf(""ProcessMiss: pos %ld does not appear to correspond to a buffer in this file.\n"", pos);; // We have gone through all the branches in this file and the requested basket; // doesn't appear to be in any of them. Likely a logic error / bug.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx:228,log,logic,228,tree/tree/src/TTreeCache.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TTreeCache.cxx,1,['log'],['logic']
Testability,"// prints either ""OK"" or ""FAIL"" test results",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx:32,test,test,32,math/mathcore/test/stressGoFTest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx,1,['test'],['test']
Testability,"// prints summarized test results",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx:21,test,test,21,math/mathcore/test/stressGoFTest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx,1,['test'],['test']
Testability,"// profile-sample-accurate is a user assertion which has a higher precedence; // than symbol list. When profile-sample-accurate is on, ignore symbol list.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/SampleProfile.cpp:37,assert,assertion,37,interpreter/llvm-project/llvm/lib/Transforms/IPO/SampleProfile.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/SampleProfile.cpp,1,['assert'],['assertion']
Testability,"// program to test distribution sampling",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testDistSampler.cxx:14,test,test,14,math/mathcore/test/testDistSampler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testDistSampler.cxx,1,['test'],['test']
Testability,"// protected functions used for testing the generator; /// get the state of the generator",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/MixMaxEngine.h:32,test,testing,32,math/mathcore/inc/Math/MixMaxEngine.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/MixMaxEngine.h,1,['test'],['testing']
Testability,"// qtilde is not a discovery test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:29,test,test,29,roofit/roostats/src/AsymptoticCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx,1,['test'],['test']
Testability,"// quick test that works because utf8width <= len (all wide chars have at least 2 bytes)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h:9,test,test,9,core/dictgen/res/OptionParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/OptionParser.h,1,['test'],['test']
Testability,"// read '// @(#)root/test:$Id: tstring.cxx 38977...""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/tstring.cxx:21,test,test,21,test/tstring.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tstring.cxx,1,['test'],['test']
Testability,"// read and write test tree with RDF",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_snapshot.cxx:18,test,test,18,tree/dataframe/test/dataframe_snapshot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_snapshot.cxx,1,['test'],['test']
Testability,"// read and write test tree with RDF (in parallel)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_snapshot.cxx:18,test,test,18,tree/dataframe/test/dataframe_snapshot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_snapshot.cxx,1,['test'],['test']
Testability,"// read reference value from test file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx:29,test,test,29,tmva/sofie/test/TestSofieModels.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx,4,['test'],['test']
Testability,"// reader tests; // setup test tree access",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:10,test,tests,10,tmva/tmva/test/stressTMVA.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx,2,['test'],"['test', 'tests']"
Testability,"// reassign logical nodes, used together with full model",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/geom/controller/GeomHierarchy.controller.js:12,log,logical,12,ui5/geom/controller/GeomHierarchy.controller.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/geom/controller/GeomHierarchy.controller.js,1,['log'],['logical']
Testability,"// redirect log",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:12,log,log,12,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['log'],['log']
Testability,"// reference histogram to test with option W.; // need to use bin center for the weight",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:26,test,test,26,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['test'],['test']
Testability,"// regression test for ROOT-9232; // reaching stop with multiple actions to be processed, remaining actions must be processed for this last entry",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_ranges.cxx:14,test,test,14,tree/dataframe/test/dataframe_ranges.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_ranges.cxx,1,['test'],['test']
Testability,"// regression test for ROOT-9272",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_ranges.cxx:14,test,test,14,tree/dataframe/test/dataframe_ranges.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_ranges.cxx,1,['test'],['test']
Testability,"// regression test: this used to fail to compile",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/vecops/test/vecops_rvec.cxx:14,test,test,14,math/vecops/test/vecops_rvec.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/vecops/test/vecops_rvec.cxx,1,['test'],['test']
Testability,"// relax test tolelrance. Method is Markov-Chain method",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranSampler.cxx:9,test,test,9,math/unuran/test/unuranSampler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranSampler.cxx,2,['test'],['test']
Testability,"// remove file with redirected logs",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:31,log,logs,31,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['log'],['logs']
Testability,"// removeOperand doesn't fixup tied operand indexes as it goes, so; // it asserts. Untie vdst_in for now and retie them afterwards.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIRegisterInfo.cpp:74,assert,asserts,74,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIRegisterInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIRegisterInfo.cpp,1,['assert'],['asserts']
Testability,"// removeOperand doesn't try to fixup tied operand indexes at it goes, so; // it asserts. Untie the operands for now and retie them afterwards.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp:81,assert,asserts,81,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp,1,['assert'],['asserts']
Testability,"// renormFactor.at(cls) = ( (trainingSizePerClass.at(cls) + testingSizePerClass.at(cls))/; // (trainingSumWeightsPerClass.at(cls) + testingSumWeightsPerClass.at(cls)) );; //changed by Helge 27.5.2013",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:60,test,testingSizePerClass,60,tmva/tmva/src/DataSetFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx,2,['test'],"['testingSizePerClass', 'testingSumWeightsPerClass']"
Testability,"// replace just in mainTerm ... note to self: why not just replace in all like above? should test!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:93,test,test,93,roofit/xroofit/src/xRooNLLVar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx,1,['test'],['test']
Testability,"// reset map with cached limits - called every time the test size or CL has been changed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx:56,test,test,56,roofit/roostats/src/LikelihoodInterval.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx,1,['test'],['test']
Testability,"// results (test statistics) evaluated for data",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridResult.h:12,test,test,12,roofit/roostats/inc/RooStats/HybridResult.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/HybridResult.h,1,['test'],['test']
Testability,"// results depends on the files in $ROOTSYS/test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx:44,test,test,44,test/stressGUI.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressGUI.cxx,1,['test'],['test']
Testability,// ret = tmp 'logical shift' y,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:14,log,logical,14,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['log'],['logical']
Testability,"// return - ( p * log (p) + (1-p)*log(1-p) );",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossEntropy.cxx:18,log,log,18,tmva/tmva/src/CrossEntropy.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CrossEntropy.cxx,2,['log'],['log']
Testability,"// return ROC integral on training/testing sample",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBoost.h:35,test,testing,35,tmva/tmva/inc/TMVA/MethodBoost.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBoost.h,1,['test'],['testing']
Testability,"// return the separation Index -p log (p) - (1-p)log(1-p); p=purity = s/(s+b) ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CrossEntropy.h:34,log,log,34,tmva/tmva/inc/TMVA/CrossEntropy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/CrossEntropy.h,2,['log'],['log']
Testability,"// return the size of the first dimension (if in row order) or last dimension if in column order; // Tensor is F x H x W x...for row order layout FHWC; // or H x W x ... x F for column order layout CHWF; // logic copied from TCudaTensor",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuTensor.h:207,log,logic,207,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuTensor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuTensor.h,1,['log'],['logic']
Testability,"// returns Nexp - Nobs*log(Nexp)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:23,log,log,23,roofit/xroofit/src/xRooNLLVar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx,1,['log'],['log']
Testability,"// returns the PruningInfo object for a given tree and test sample",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h:55,test,test,55,tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h,2,['test'],['test']
Testability,// returns true if TestFeatures are all present in FeaturesRequired,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/Utils/ARMBaseInfo.h:19,Test,TestFeatures,19,interpreter/llvm-project/llvm/lib/Target/ARM/Utils/ARMBaseInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/Utils/ARMBaseInfo.h,1,['Test'],['TestFeatures']
Testability,"// reverse left/right rather than simply !SortFunc(left, right); // to expose different paths in the comparison logic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:112,log,logic,112,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,1,['log'],['logic']
Testability,"// rho == 0 tests the beyon-eta-max cases of cylindricalEta",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/coordinates3D.cxx:12,test,tests,12,math/genvector/test/coordinates3D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/coordinates3D.cxx,1,['test'],['tests']
Testability,"// rotation x translation; //s1=a.testTransformProd (v1, r2, tf, t, t1, ""Delta * Rot TVector3 "" );",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/stress3D.cxx:34,test,testTransformProd,34,math/genvector/test/stress3D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/stress3D.cxx,1,['test'],['testTransformProd']
Testability,"// run Hesse on the log-likelihood build using sum of weight squared",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:20,log,log-likelihood,20,math/mathcore/src/Fitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx,1,['log'],['log-likelihood']
Testability,"// run multi-thread tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_incomplete_entries.cxx:20,test,tests,20,tree/dataframe/test/dataframe_incomplete_entries.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_incomplete_entries.cxx,3,['test'],['tests']
Testability,"// run rf_go.exe with the test data",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitAPI.h:26,test,test,26,tmva/tmva/inc/TMVA/RuleFitAPI.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitAPI.h,1,['test'],['test']
Testability,"// run single-thread tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_incomplete_entries.cxx:21,test,tests,21,tree/dataframe/test/dataframe_incomplete_entries.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_incomplete_entries.cxx,3,['test'],['tests']
Testability,"// run testOperations in loop mode from size 2x2 up to 30x30",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/stressOperations.cxx:7,test,testOperations,7,math/smatrix/test/stressOperations.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/stressOperations.cxx,1,['test'],['testOperations']
Testability,"// run the all tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/stressKalman.cxx:15,test,tests,15,math/smatrix/test/stressKalman.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/stressKalman.cxx,1,['test'],['tests']
Testability,"// run the reader application and compare to test tree",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:45,test,test,45,tmva/tmva/test/stressTMVA.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx,2,['test'],['test']
Testability,"// runs and allocated as a single storage type for the run. ASTRecordLayout; /// contains enough information to determine where the runs break. Microsoft; /// and Itanium follow different rules and use different codepaths.; /// * It is desired that, when possible, bitfields use the appropriate iN type; /// when lowered to llvm types. For example unsigned x : 24 gets lowered to; /// i24. This isn't always possible because i24 has storage size of 32 bit; /// and if it is possible to use that extra byte of padding we must use; /// [i8 x 3] instead of i24. The function clipTailPadding does this.; /// C++ examples that require clipping:; /// struct { int a : 24; char b; }; // a must be clipped, b goes at offset 3; /// struct A { int a : 24; }; // a must be clipped because a struct like B; // could exist: struct B : A { char b; }; // b goes at offset 3; /// * Clang ignores 0 sized bitfields and 0 sized bases but *not* zero sized; /// fields. The existing asserts suggest that LLVM assumes that *every* field; /// has an underlying storage type. Therefore empty structures containing; /// zero sized subobjects such as empty records or zero sized arrays still get; /// a zero sized (empty struct) storage type.; /// * Clang reads the complete type rather than the base type when generating; /// code to access fields. Bitfields in tail position with tail padding may; /// be clipped in the base class but not the complete class (we may discover; /// that the tail padding is not used in the complete class.) However,; /// because LLVM reads from the complete type it can generate incorrect code; /// if we do not clip the tail padding off of the bitfield in the complete; /// layout. This introduces a somewhat awkward extra unnecessary clip stage.; /// The location of the clip is stored internally as a sentinel of type; /// SCISSOR. If LLVM were updated to read base types (which it probably; /// should because locations of things such as VBases are bogus in the llvm; /// type anyway) then",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp:1451,assert,asserts,1451,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,1,['assert'],['asserts']
Testability,"// s3=a.testDotProduct (v3, t, t3, ""DotProduct Polar2DVector "" );",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/stress2D.cxx:8,test,testDotProduct,8,math/genvector/test/stress2D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/stress2D.cxx,1,['test'],['testDotProduct']
Testability,"// same logic as in JSROOT ClonedNodes.scanVisible",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/webviewer/src/RGeomData.cxx:8,log,logic,8,geom/webviewer/src/RGeomData.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/webviewer/src/RGeomData.cxx,1,['log'],['logic']
Testability,"// sanity test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx:10,test,test,10,hist/unfold/src/TUnfold.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/src/TUnfold.cxx,1,['test'],['test']
Testability,"// save logs to StringVar in constPars list",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:8,log,logs,8,roofit/xroofit/src/xRooFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx,1,['log'],['logs']
Testability,"// save previous axis range and bits; // Int_t iminOld1 = axis1->GetFirst();; // Int_t imaxOld1 = axis1->GetLast();; // Int_t iminOld2 = axis2->GetFirst();; // Int_t imaxOld2 = axis2->GetLast();; // Bool_t hadRange1 = axis1->TestBit(TAxis::kAxisRange);; // Bool_t hadRange2 = axis2->TestBit(TAxis::kAxisRange);; // need to cast-away constness to set range",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:225,Test,TestBit,225,hist/hist/src/TH3.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx,2,['Test'],['TestBit']
Testability,"// scale for cdf test (integral)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/StatFunction.h:17,test,test,17,math/mathcore/test/stress/StatFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/StatFunction.h,1,['test'],['test']
Testability,"// scale for der test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.h:17,test,test,17,math/mathmore/test/StatFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.h,1,['test'],['test']
Testability,"// scale for integral test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.h:22,test,test,22,math/mathmore/test/StatFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.h,1,['test'],['test']
Testability,"// scale for inverse test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.h:21,test,test,21,math/mathmore/test/StatFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.h,1,['test'],['test']
Testability,"// scale for quantile test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/StatFunction.h:22,test,test,22,math/mathcore/test/stress/StatFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/StatFunction.h,1,['test'],['test']
Testability,// scale{5} is asserted as 1 in tblgen.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/Disassembler/AArch64Disassembler.cpp:15,assert,asserted,15,interpreter/llvm-project/llvm/lib/Target/AArch64/Disassembler/AArch64Disassembler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/Disassembler/AArch64Disassembler.cpp,1,['assert'],['asserted']
Testability,"// scan in log x",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:11,log,log,11,roofit/roostats/src/HypoTestInverter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx,1,['log'],['log']
Testability,"// sdiv X, C -> adds log(C) sign bits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp:21,log,log,21,interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,1,['log'],['log']
Testability,"// sdiv, srem -> sdivrem; // If the divisor is constant, then return DIVREM only if isIntDivCheap() is; // true. Otherwise, we break the simplification logic in visitREM().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:152,log,logic,152,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,2,['log'],['logic']
Testability,"// second AddSample overload: 1 tree, many files; files passed as a vector; testing with 1 specTestFile",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_datasetspec.cxx:76,test,testing,76,tree/dataframe/test/dataframe_datasetspec.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_datasetspec.cxx,1,['test'],['testing']
Testability,"// second pad with log scales, negative values missing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/symlog.cxx:19,log,log,19,tutorials/rcanvas/symlog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/symlog.cxx,1,['log'],['log']
Testability,"// seconds between output to log of evaluation progress",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:29,log,log,29,roofit/xroofit/src/xRooFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx,1,['log'],['log']
Testability,"// seeds with the i-th unit vector, i = 0..N-1, for testing only; // FUNCTIONS FOR GETTING RANDOM NUMBERS",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/mixmax.h:52,test,testing,52,math/mathcore/src/mixmax.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/mixmax.h,1,['test'],['testing']
Testability,"// sel - rep of a REveSelection object.; // console.log(""UpdateTrigger UT_Selection_Refresh_State called for "", sel.fName);; // XXXX Hack to assign global selection / highlight ids.; // This would be more properly done by having REveWorld : public REveScene and store; // ids there. These will also be needed for viewers, scenes, cameras etc.; // I somewhat dislike setting this through name match (and class::WriteCoreJson() as; // it defines the UT function so we sort of know what kind of objects this function; // will be called for.; // We shall see -- but it would better be soon as things are getting messy :); //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveManager.js:52,log,log,52,ui5/eve7/lib/EveManager.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/eve7/lib/EveManager.js,1,['log'],['log']
Testability,"// select i1 X, i1 X, i1 false --> X (logical-and)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:38,log,logical-and,38,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['log'],['logical-and']
Testability,"// select i1 X, i1 true, i1 X --> X (logical-or)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:37,log,logical-or,37,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['log'],['logical-or']
Testability,"// send end changes message and log messages",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveManager.cxx:32,log,log,32,graf3d/eve7/src/REveManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveManager.cxx,1,['log'],['log']
Testability,"// set a small tolerance for the tests; // The default of 10*-2 make sometimes Simplex do not converge; //const double gDefaultTolerance = 1.E-4;; // Options to indicate how the test has to be run",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:33,test,tests,33,test/stressHistoFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx,2,['test'],"['test', 'tests']"
Testability,"// set bin label in random order in bins to test ordering when labels are filled randomly",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:44,test,test,44,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,8,['test'],['test']
Testability,"// set data sample training / testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx:30,test,testing,30,tmva/tmva/src/MethodBoost.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx,1,['test'],['testing']
Testability,"// set in test statistics conditional and global observables; // (needed to get correct model likelihood)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx:10,test,test,10,roofit/roostats/src/FrequentistCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx,2,['test'],['test']
Testability,"// set log level",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:7,log,log,7,gui/sessionviewer/src/TSessionViewer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx,1,['log'],['log']
Testability,"// set log to pads",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx:7,log,log,7,graf2d/gpad/src/TRatioPlot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/gpad/src/TRatioPlot.cxx,1,['log'],['log']
Testability,"// set log window position at the bottom of Session Viewer",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:7,log,log,7,gui/sessionviewer/src/TSessionViewer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx,1,['log'],['log']
Testability,"// set parameters back ... in case the evaluation of the test statistic; // modified something (e.g. a nuisance parameter that is not randomized; // must be set here)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestCalculatorGeneric.cxx:57,test,test,57,roofit/roostats/src/HypoTestCalculatorGeneric.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestCalculatorGeneric.cxx,1,['test'],['test']
Testability,"// set size of test; // nc.SetParameters( fModel.GetParametersOfInterest);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx:15,test,test,15,roofit/roostats/src/FeldmanCousins.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx,1,['test'],['test']
Testability,"// set test stat sampler to use this point",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx:7,test,test,7,roofit/roostats/src/NeymanConstruction.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx,1,['test'],['test']
Testability,"// set up test stat sampler in case of asymptotic calculator",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:10,test,test,10,roofit/roostats/src/HypoTestInverter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx,1,['test'],['test']
Testability,"// setting the default bin num... maybe should be static ? ==> Please no static (JS); // You can't use the logger in the constructor!!! Log() << kINFO << ""Create PDFs"" << Endl;; // reading every PDF's definition and passing the option string to the next one to be read and marked",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:107,log,logger,107,tmva/tmva/src/MethodBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx,2,"['Log', 'log']","['Log', 'logger']"
Testability,"// setup a log",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BernsteinCorrection.cxx:11,log,log,11,roofit/roostats/src/BernsteinCorrection.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/BernsteinCorrection.cxx,2,['log'],['log']
Testability,"// setup test tree access",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:9,test,test,9,tmva/tmva/test/stressTMVA.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx,1,['test'],['test']
Testability,"// shift (logic (shift X, C0), Y), C1 -> logic (shift X, C0+C1), (shift Y, C1)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:10,log,logic,10,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,2,['log'],['logic']
Testability,"// should add out-of bound test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TBranchProxy.h:27,test,test,27,tree/treeplayer/inc/TBranchProxy.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TBranchProxy.h,2,['test'],['test']
Testability,"// should add static assert that A has not to be same type as B; // this copying tensors from different architectures",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h:21,assert,assert,21,tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/TCudnn.h,1,['assert'],['assert']
Testability,"// should change test to use Minimizer interface",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testGraphFit.cxx:17,test,test,17,math/mathcore/test/fit/testGraphFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testGraphFit.cxx,1,['test'],['test']
Testability,"// should test also the Delta ??",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFinder.cxx:10,test,test,10,math/mathmore/src/GSLMultiRootFinder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFinder.cxx,1,['test'],['test']
Testability,"// should try to add also lognormal case ?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:26,log,lognormal,26,roofit/roostats/src/AsymptoticCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx,1,['log'],['lognormal']
Testability,"// show log button",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/inc/TSessionViewer.h:8,log,log,8,gui/sessionviewer/inc/TSessionViewer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/inc/TSessionViewer.h,2,['log'],['log']
Testability,"// side, respectively. One can rotate the 3-d space around vertical axis going; /// through the center of it employing the view parameter.; /// Allowed values are 0, 90, 180 and 270 degrees respectively.; ///; /// Default values:; ///; /// - ` alpha = 20`; /// - ` beta = 60`; /// - ` view = 0`; ///; /// \image html spectrumpainter024.jpg; ///; /// Light modes group, display mode = surface, 256 x 256 channels. Angles are; /// set as follows: alpha=40, beta=30, view=0.; /// \image html spectrumpainter025.jpg; ///; /// Light modes group, display mode = surface, 256 x 256 channels. Angles are; /// set as follows: alpha=30, beta=30, view=90.; ///; /// #### Function: TSpectrum2Painter::SetZScale(Int_t scale); ///; /// One can change the scale of z-axis. Possible values are:; ///; /// - ` kZScaleLinear`; /// - ` kZScaleLog`; /// - ` kZScaleSqrt`; ///; /// Default value is:; ///; /// - ` scale = kZScaleLinear`; ///; /// \image html spectrumpainter026.jpg; ///; /// Height modes group, display mode = surface, 64 x 64 channels, log scale.; ///; /// #### Function: TSpectrum2Painter::SetColorIncrements(Double_t r,Double_t g,Double_t b);; ///; /// For sophisticated shading (in kModeGroupLight, kModeGroupHeight; /// and kModeGroupLightHeight display modes groups) the color palette starts; /// from the basic pen color (see SetPenAttr function). There is a predefined number; /// of color levels (256). Color in every level is calculated by adding the; /// increments of the r, g, b components to the previous level. Using this function; /// one can change the color increments between two neighbouring color levels. The; /// function does not apply for kModeGroupSimple display modes group.; /// Default values: r=1, g=1, b=1;; /// \image html spectrumpainter027.jpg; ///; /// Light modes group, display mode = surface, 64 x 64 channels, color increments; /// r=1, g=2, b=3.; /// \image html spectrumpainter028.jpg; ///; /// Light modes group, display mode = surface, 64 x 64 channels, color; /",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx:7487,log,log,7487,hist/spectrumpainter/src/TSpectrum2Painter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/spectrumpainter/src/TSpectrum2Painter.cxx,1,['log'],['log']
Testability,"// silence log output",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testGlobalObservables.cxx:11,log,log,11,roofit/roofitcore/test/testGlobalObservables.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testGlobalObservables.cxx,2,['log'],['log']
Testability,"// silence logs from RLoopManager::Jit: RunGraphs does its own logging",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDFHelpers.cxx:11,log,logs,11,tree/dataframe/src/RDFHelpers.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDFHelpers.cxx,2,['log'],"['logging', 'logs']"
Testability,"// simple echo loop test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:20,test,test,20,roofit/roofitcore/src/BidirMMapPipe.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx,1,['test'],['test']
Testability,"// simple heuristics here for considering potential register; // pressure, the logics here is that the differnce are used; // to measure the distance between def and use, the longer distance; // more likely cause register pressure.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp:79,log,logics,79,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp,1,['log'],['logics']
Testability,"// simple poll test - children send 5 results in random intervals",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:15,test,test,15,roofit/roofitcore/src/BidirMMapPipe.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx,1,['test'],['test']
Testability,"// simple test of fitting a Tgraph",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:10,test,test,10,math/mathcore/test/fit/testFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx,1,['test'],['test']
Testability,"// simple test of unuran",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranDistr.cxx:10,test,test,10,math/unuran/test/unuranDistr.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranDistr.cxx,4,['test'],['test']
Testability,"// simply don't know; // the instance fails the lively test if it owns the C++ object while having a; // reference count of 1 (meaning: it could delete the C++ instance any moment)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/API.cxx:55,test,test,55,bindings/pyroot/cppyy/CPyCppyy/src/API.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/API.cxx,1,['test'],['test']
Testability,"// since we are plotting -log LR",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodIntervalPlot.cxx:26,log,log,26,roofit/roostats/src/LikelihoodIntervalPlot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodIntervalPlot.cxx,1,['log'],['log']
Testability,"// since we are using -log LR",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx:23,log,log,23,roofit/roostats/src/LikelihoodInterval.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/LikelihoodInterval.cxx,2,['log'],['log']
Testability,// since we do the conflict marking as part of the fixpoint iteration this; // loop only asserts that invariants are met,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp:89,assert,asserts,89,interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,1,['assert'],['asserts']
Testability,"// size_t n1 = (gwm.GetNDim() == 2 ) ? gwm.GetNrows() : gwm.GetCSize();; // size_t n1b = (gwb.GetNDim() == 2 ) ? gwb.GetNrows() : gwb.GetCSize();; // assert(n1 == n1b);; // size_t n2 = (gwm.GetNDim() == 2 ) ? gwm.GetNcols() : gwm.GetHSize()*gwm.GetWSize();",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNet.h:150,assert,assert,150,tmva/tmva/test/DNN/CNN/TestConvNet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvNet.h,1,['assert'],['assert']
Testability,"// skip cdf test when Mathcore is missing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStatFunc.cxx:12,test,test,12,math/mathmore/test/testStatFunc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStatFunc.cxx,2,['test'],['test']
Testability,"// skip the conditional ML (the numerator) only when fit value is smaller than test value",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodTestStat.cxx:79,test,test,79,roofit/roostats/src/ProfileLikelihoodTestStat.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodTestStat.cxx,1,['test'],['test']
Testability,"// skip this test on 32 bits architecture. It might fail due to extended precision",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/testGenVector.cxx:13,test,test,13,math/genvector/test/testGenVector.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/testGenVector.cxx,1,['test'],['test']
Testability,"// skip this test on systems with only 1 core",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/imt/test/testTBBGlobalControl.cxx:13,test,test,13,core/imt/test/testTBBGlobalControl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/imt/test/testTBBGlobalControl.cxx,1,['test'],['test']
Testability,"// skip this test on systems with only 1 core; // ***See them warn***",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/imt/test/testTBBGlobalControl.cxx:13,test,test,13,core/imt/test/testTBBGlobalControl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/imt/test/testTBBGlobalControl.cxx,1,['test'],['test']
Testability,"// slc4rabacal compiled (CPU time taken to run complete tests)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx:56,test,tests,56,math/mathcore/test/stressGoFTest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx,1,['test'],['tests']
Testability,"// smatrix_sym is always first (skip check test)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/stressKalman.cxx:43,test,test,43,math/smatrix/test/stressKalman.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/stressKalman.cxx,1,['test'],['test']
Testability,"// smax(x, 0); // (select (x < 0), x, 0) -> ((x >> (size_in_bits(x)-1))) & x; //; // If the comparison is testing for a positive value, we have to invert; // the sign bit mask, so only do that transform if the target has a; // bitwise 'and not' instruction (the invert is free).; // (select (x > 0), x, 0) -> (~(x >> (size_in_bits(x)-1))) & x",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:106,test,testing,106,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['test'],['testing']
Testability,"// so far, status will just count the number of parameters wronly; // calculated. There is no other test of the fitters",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:100,test,test,100,test/stressHistoFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx,1,['test'],['test']
Testability,"// some default transformations to evaluate; // NOTE: all transformations are destroyed after this test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Envelope.cxx:99,test,test,99,tmva/tmva/src/Envelope.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Envelope.cxx,2,['test'],['test']
Testability,"// some operators can be a mix of global and class overloads; this method will; // first try class overloads (the existence of this method means that such were; // defined) and if failed, fall back on the global stubs; // TODO: the fact that this is a method and not an overload means that the global; // ones are tried for each method that fails during the overload resolution",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPOperator.cxx:212,stub,stubs,212,bindings/pyroot/cppyy/CPyCppyy/src/CPPOperator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPOperator.cxx,1,['stub'],['stubs']
Testability,"// special case is for the Gamma where one might define the global observable n and you have a Gamma(b, n+1, ...._; // in this case n+1 is the server and we don;t have a direct dependency, but we want to set n to the b value; // so in case of the Gamma ignore this test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:265,test,test,265,roofit/roostats/src/AsymptoticCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx,1,['test'],['test']
Testability,"// special case is for the Gamma where one might define the global observable n and you have a; // Gamma(b, n+1, ...._ in this case n+1 is the server and we don;t have a direct dependency, but; // we want to set n to the b value so in case of the Gamma ignore this test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:265,test,test,265,roofit/xroofit/src/xRooFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx,1,['test'],['test']
Testability,"// special case: const testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/datatypes.h:23,test,testing,23,bindings/pyroot/cppyy/cppyy/test/datatypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/datatypes.h,1,['test'],['testing']
Testability,"// special flags in case of ""reverse plot"" and ""log scale""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/TGraphPainter.cxx:48,log,log,48,hist/histpainter/src/TGraphPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/TGraphPainter.cxx,3,['log'],['log']
Testability,// special handling for variable arrays of compressed floats in branch - not tested,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:77,test,tested,77,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['test'],['tested']
Testability,"// speedup; // Register result (test significance)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:32,test,test,32,roofit/roostats/test/stressRooStats_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h,1,['test'],['test']
Testability,"// standardized test statistic",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx:16,test,test,16,math/mathcore/src/GoFTest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx,1,['test'],['test']
Testability,"// standardized test statistic; //std::cout << "" sigmaN "" << sigmaN << "" new A2 "" << A2;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx:16,test,test,16,math/mathcore/src/GoFTest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx,1,['test'],['test']
Testability,"// start parallel test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/test/test_Job.cxx:18,test,test,18,roofit/multiprocess/test/test_Job.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/test/test_Job.cxx,2,['test'],['test']
Testability,"// start serial test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/test/test_Job.cxx:16,test,test,16,roofit/multiprocess/test/test_Job.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/test/test_Job.cxx,1,['test'],['test']
Testability,"// start test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_polling.cxx:9,test,test,9,roofit/roofitZMQ/test/test_polling.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_polling.cxx,4,['test'],['test']
Testability,"// start test, receive first thing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ.cpp:9,test,test,9,roofit/roofitZMQ/test/test_ZMQ.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ.cpp,1,['test'],['test']
Testability,"// start test, receive something",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ.cpp:9,test,test,9,roofit/roofitZMQ/test/test_ZMQ.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitZMQ/test/test_ZMQ.cpp,1,['test'],['test']
Testability,"// static function to test interval",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMinimizer1D.cxx:22,test,test,22,math/mathmore/src/GSLMinimizer1D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMinimizer1D.cxx,1,['test'],['test']
Testability,"// static_assert that sizeof(T) is not ""too big"".; //; // Because our policy guarantees at least one inlined element, it is possible; // for an arbitrarily large inlined element to allocate an arbitrarily large; // amount of inline storage. We generally consider it an antipattern for a; // SmallVector to allocate an excessive amount of inline storage, so we want; // to call attention to these cases and make sure that users are making an; // intentional decision if they request a lot of inline storage.; //; // We want this assertion to trigger in pathological cases, but otherwise; // not be too easy to hit. To accomplish that, the cutoff is actually somewhat; // larger than kPreferredSmallVectorSizeof (otherwise,; // `SmallVector<SmallVector<T>>` would be one easy way to trip it, and that; // pattern seems useful in practice).; //; // One wrinkle is that this assertion is in theory non-portable, since; // sizeof(T) is in general platform-dependent. However, we don't expect this; // to be much of an issue, because most LLVM development happens on 64-bit; // hosts, and therefore sizeof(T) is expected to *decrease* when compiled for; // 32-bit hosts, dodging the issue. The reverse situation, where development; // happens on a 32-bit host and then fails due to sizeof(T) *increasing* on a; // 64-bit host, is expected to be very rare.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:528,assert,assertion,528,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,2,['assert'],['assertion']
Testability,"// std::cerr <<""cannot clone this function"" << std::endl;; // assert(0);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testMinim.cxx:62,assert,assert,62,math/mathcore/test/fit/testMinim.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testMinim.cxx,3,['assert'],['assert']
Testability,"// std::chrono::duration<double> elapsed2 = t2-tstart;; // time to compute training and test errors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:88,test,test,88,tmva/tmva/src/MethodDL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx,1,['test'],['test']
Testability,"// std::cout << "" chi2 test of histogram generated with Unuran vs histogram generated with TF1::GetRandom "" << std::endl;; // h1->Chi2Test(h2,""UUP"");; //#ifdef LATER",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranMulti2D.cxx:23,test,test,23,math/unuran/test/unuranMulti2D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranMulti2D.cxx,1,['test'],['test']
Testability,"// std::cout << ""Test general matrix placed in general at 1,0 :\nA=\n"" << A << std::endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:17,Test,Test,17,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,1,['Test'],['Test']
Testability,"// std::cout << ""Test symmetric matrix placed in general at 0,0:\nA=\n"" << A << std::endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:17,Test,Test,17,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,1,['Test'],['Test']
Testability,"// std::cout << ""Test symmetric matrix placed in symmetric at 1,1:\nB=\n"" << B << std::endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:17,Test,Test,17,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,1,['Test'],['Test']
Testability,"// std::cout << ""boostweight = "" << boostWeight << std::endl;; // ADA boosting, rescaling the weight of the wrong events according to the error level; // over the entire test sample rescaling all the weights to have the same sum, but without; // touching the original weights (changing only the boosted weight of all the events); // first reweight",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx:170,test,test,170,tmva/tmva/src/MethodBoost.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx,1,['test'],['test']
Testability,"// std::cout << ""check convergence; minError "" << m_minError << "" current "" << testError; // << "" current convergence count "" << m_convergenceCount << std::endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/NeuralNet.cxx:79,test,testError,79,tmva/tmva/src/NeuralNet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/NeuralNet.cxx,1,['test'],['testError']
Testability,"// std::cout << ""fom=""<<fom<<std::endl; // should write that into a debug log (as option)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx:74,log,log,74,tmva/tmva/src/OptimizeConfigParameters.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx,1,['log'],['log']
Testability,"// std::cout << ""tested general matrix -constant operations :\nm2 =\n"" << m2 << ""\nm3 =\n"" << m3 << std::endl;; // now test the symmetric matrix",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:17,test,tested,17,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,2,['test'],"['test', 'tested']"
Testability,"// std::cout << ""tested sym matrix -constant operations :\ns2 =\n"" << s2 << ""\ns3 =\n"" << s3 << std::endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:17,test,tested,17,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,1,['test'],['tested']
Testability,"// std::cout << ""tested vector -constant operations : v2 = "" << v2 << "" v3 = "" << v3 << std::endl;; // now test the matrix (normal)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:17,test,tested,17,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,2,['test'],"['test', 'tested']"
Testability,"// std::cout << A3 << std::endl;; // std::cout << ""test sym matrix "" << std::endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:51,test,test,51,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,1,['test'],['test']
Testability,"// std::cout << GlobalXYZVector(v) << std::endl;; // std::cout << GlobalXYZVector(vr) << std::endl;; // std::cout << GlobalXYZVector (r(v)) << std::endl;; // std::cout << GlobalXYZVector (r(vr)) << std::endl;; // std::cout << vr << std::endl;; // std::cout << r(vr) << std::endl;; // std::cout << r << std::endl;; // std::cout << r.Inverse() << std::endl;; // std::cout << r * r.Inverse() << std::endl;; // std::cout << Rotation3D(r) * Rotation3D(r.Inverse()) << std::endl;; // std::cout << Rotation3D(r) * Rotation3D(r).Inverse() << std::endl;; // test Translation3D",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/testGenVector.cxx:549,test,test,549,math/genvector/test/testGenVector.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/testGenVector.cxx,1,['test'],['test']
Testability,"// std::cout << running longer tests<<std::endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:31,test,tests,31,tmva/tmva/test/stressTMVA.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx,1,['test'],['tests']
Testability,"// std::cout << this << fDim << "" x : "";; // std::ostream_iterator<double> oix(std::cout,"" , "");; // std::copy(x, x+fDim, oix);; // std::cout << std::endl;; // std::cout << ""npar "" << npar << std::endl;; // std::cout << fVarIndices.size() << std::endl;; // assert ( fVarIndices.size() == fDim); // otherwise something is wrong",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h:257,assert,assert,257,math/mathcore/inc/Math/WrappedParamFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h,1,['assert'],['assert']
Testability,"// std::cout<<""mvaS->GetNbinsX()""<<mvaS->GetNbinsX()<<std::endl;; // std::cout<<""mvaB->GetNbinsX()""<<mvaB->GetNbinsX()<<std::endl;; //the output of mvaS->GetNbinsX() is about 40 and if we divide it by 100 the results is 0; //the I will divide it by 10 anyway doing some tests ROC integral is the same",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ROCCalc.cxx:270,test,tests,270,tmva/tmva/src/ROCCalc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ROCCalc.cxx,1,['test'],['tests']
Testability,"// std::string output = testing::internal::GetCapturedStderr();; // EXPECT_EQ(gErrorOutput,output);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/test/testHashRecursiveRemove.cxx:24,test,testing,24,core/meta/test/testHashRecursiveRemove.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/test/testHashRecursiveRemove.cxx,1,['test'],['testing']
Testability,"// std::string smu = ROOT::Math::Util::ToString(mu);; // std::string dist = ""poisson("" + smu + "")"";; // if (!fUnuran.Init(dist, ""method=dstd"") ) {; // assert(0);; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/UnuRanDist.h:151,assert,assert,151,math/mathmore/test/UnuRanDist.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/UnuRanDist.h,1,['assert'],['assert']
Testability,"// std::strtoull() returns 0 if the parsing fails.; // zero HistSize will disable history logging to file.; // refer to textinput::History::AppendToFile()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/UserInterface/UserInterface.cpp:90,log,logging,90,interpreter/cling/lib/UserInterface/UserInterface.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/UserInterface/UserInterface.cpp,1,['log'],['logging']
Testability,"// stdout.; // Append mode is used because the info output file is opened and closed; // each time -stats or -time-passes wants to print output to it. To; // compensate for this, the test-suite Makefiles have code to delete the; // info output file before running commands which write to it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Timer.cpp:183,test,test-suite,183,interpreter/llvm-project/llvm/lib/Support/Timer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Timer.cpp,1,['test'],['test-suite']
Testability,"// sterilize first so that cache elements don't appear in the client list; // safety net in case sterilizing one client deletes another one of our clients; // monitor for change in clients list size; // found this was only case in 6.26 (valgrind shows invalid read), in 6.28 these went away; // might be in 6.28 the client list iterator became able to handle in-loop edits but didn't see; // in test case that client count changed so just resterilizing if that's the case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:395,test,test,395,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['test'],['test']
Testability,"// stop = stopwatch.lap().ticks();; // std::cout<<""stop-start: ""<<stop - start<<std::endl;; /*. {; //test constructor; std::vector<double> par(4);; std::vector<double> err(4);; for(int i = 0; i < 4; i++) {; par[i] = 1.;; err[i] = 0.1;; }; MnMigrad migrad(fcn, par, err);; FunctionMinimum min = migrad();; std::cout<<""minimum: ""<<min<<std::endl;; }. {; //test edm Value; std::vector<double> par(4);; std::vector<double> err(4);; for(int i = 0; i < 4; i++) {; par[i] = 1.;; err[i] = 0.1;; }; MnMigrad migrad(fcn, par, err);; double edm = 1.e-1;; FunctionMinimum min = migrad(20, edm);; std::cout<<""minimum: ""<<min<<std::endl;; }. {; //test # of iterations; std::vector<double> par(4);; std::vector<double> err(4);; for(int i = 0; i < 4; i++) {; par[i] = 1.;; err[i] = 0.1;; }; MnMigrad migrad(fcn, par, err);; int niter = 2;; FunctionMinimum min = migrad(niter, 1.e-5);; std::cout<<""minimum: ""<<min<<std::endl;; }; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnTutorial/Quad4FMain.cxx:101,test,test,101,math/minuit2/test/MnTutorial/Quad4FMain.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnTutorial/Quad4FMain.cxx,3,['test'],['test']
Testability,"// stop = stopwatch.lap().ticks();; // std::cout<<""stop-start: ""<<stop - start<<std::endl;; /*. {; //test constructor; std::vector<double> par(8);; std::vector<double> err(8);; for(int i = 0; i < 8; i++) {; par[i] = 1.;; err[i] = 0.1;; }; MnMigrad migrad(fcn, par, err);; FunctionMinimum min = migrad();; std::cout<<""minimum: ""<<min<<std::endl;; }. {; //test edm Value; std::vector<double> par(8);; std::vector<double> err(8);; for(int i = 0; i < 8; i++) {; par[i] = 1.;; err[i] = 0.1;; }; MnMigrad migrad(fcn, par, err);; double edm = 1.e-1;; FunctionMinimum min = migrad(20, edm);; std::cout<<""minimum: ""<<min<<std::endl;; }. {; //test # of iterations; std::vector<double> par(4);; std::vector<double> err(4);; for(int i = 0; i < 4; i++) {; par[i] = 1.;; err[i] = 0.1;; }; MnMigrad migrad(fcn, par, err);; int niter = 2;; FunctionMinimum min = migrad(niter, 1.e-5);; std::cout<<""minimum: ""<<min<<std::endl;; }; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnTutorial/Quad12FMain.cxx:101,test,test,101,math/minuit2/test/MnTutorial/Quad12FMain.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnTutorial/Quad12FMain.cxx,6,['test'],['test']
Testability,"// store and retrieve time used for testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:36,test,testing,36,tmva/tmva/inc/TMVA/MethodBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h,1,['test'],['testing']
Testability,"// store time used for testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:23,test,testing,23,tmva/tmva/src/MethodBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx,3,['test'],['testing']
Testability,"// strangely enough, this works on the command prompt, but not in this test...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/test/TClingTests.cxx:71,test,test,71,core/metacling/test/TClingTests.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/test/TClingTests.cxx,1,['test'],['test']
Testability,"// stripNonValidData asserts that shouldRewriteStatepointsIn; // returns true for at least one function in the module. Since at least; // one function changed, we know that the precondition is satisfied.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp:21,assert,asserts,21,interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,1,['assert'],['asserts']
Testability,"// strongSIVtest -; // From the paper, Practical Dependence Testing, Section 4.2.1; //; // When we have a pair of subscripts of the form [c1 + a*i] and [c2 + a*i],; // where i is an induction variable, c1 and c2 are loop invariant,; // and a is a constant, we can solve it exactly using the Strong SIV test.; //; // Can prove independence. Failing that, can compute distance (and direction).; // In the presence of symbolic terms, we can sometimes make progress.; //; // If there's a dependence,; //; // c1 + a*i = c2 + a*i'; //; // The dependence distance is; //; // d = i' - i = (c1 - c2)/a; //; // A dependence only exists if d is an integer and abs(d) <= U, where U is the; // loop's upper bound. If a dependence exists, the dependence direction is; // defined as; //; // { < if d > 0; // direction = { = if d = 0; // { > if d < 0; //; // Return true if dependence disproved.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:60,Test,Testing,60,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,2,"['Test', 'test']","['Testing', 'test']"
Testability,// stub function to help launch kernel,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:3,stub,stub,3,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,1,['stub'],['stub']
Testability,"// sufficient number of scans; // names of tested variables must be the same in write / comparison modes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:43,test,tested,43,roofit/roostats/test/stressRooStats_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h,1,['test'],['tested']
Testability,"// sum of -log of set of RooAbsPdf representing parameter constraints",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooConstraintSum.h:11,log,log,11,roofit/roofitcore/inc/RooConstraintSum.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooConstraintSum.h,1,['log'],['log']
Testability,"// sum up number of training and testing events",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:33,test,testing,33,tmva/tmva/src/DataSetFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx,1,['test'],['testing']
Testability,"// summarize test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/vectorOperation.cxx:13,test,test,13,math/genvector/test/vectorOperation.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/vectorOperation.cxx,1,['test'],['test']
Testability,// suppress warning in release-asserts; // Check post-conditions,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/PlaceSafepoints.cpp:31,assert,asserts,31,interpreter/llvm-project/llvm/lib/Transforms/Scalar/PlaceSafepoints.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/PlaceSafepoints.cpp,1,['assert'],['asserts']
Testability,"// switch off Info mesaage from chi2 test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:37,test,test,37,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['test'],['test']
Testability,"// switch off printing of info messages from chi2 test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranDiscrete.cxx:50,test,test,50,math/unuran/test/unuranDiscrete.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranDiscrete.cxx,5,['test'],['test']
Testability,"// symbolicRDIVtest -; // In Section 4.5 of the Practical Dependence Testing paper,the authors; // introduce a special case of Banerjee's Inequalities (also called the; // Extreme-Value Test) that can handle some of the SIV and RDIV cases,; // particularly cases with symbolics. Since it's only able to disprove; // dependence (not compute distances or directions), we'll use it as a; // fall back for the other tests.; //; // When we have a pair of subscripts of the form [c1 + a1*i] and [c2 + a2*j]; // where i and j are induction variables and c1 and c2 are loop invariants,; // we can use the symbolic tests to disprove some dependences, serving as a; // backup for the RDIV test. Note that i and j can be the same variable,; // letting this test serve as a backup for the various SIV tests.; //; // For a dependence to exist, c1 + a1*i must equal c2 + a2*j for some; // 0 <= i <= N1 and some 0 <= j <= N2, where N1 and N2 are the (normalized); // loop bounds for the i and j loops, respectively. So, ...; //; // c1 + a1*i = c2 + a2*j; // a1*i - a2*j = c2 - c1; //; // To test for a dependence, we compute c2 - c1 and make sure it's in the; // range of the maximum and minimum possible values of a1*i - a2*j.; // Considering the signs of a1 and a2, we have 4 possible cases:; //; // 1) If a1 >= 0 and a2 >= 0, then; // a1*0 - a2*N2 <= c2 - c1 <= a1*N1 - a2*0; // -a2*N2 <= c2 - c1 <= a1*N1; //; // 2) If a1 >= 0 and a2 <= 0, then; // a1*0 - a2*0 <= c2 - c1 <= a1*N1 - a2*N2; // 0 <= c2 - c1 <= a1*N1 - a2*N2; //; // 3) If a1 <= 0 and a2 >= 0, then; // a1*N1 - a2*N2 <= c2 - c1 <= a1*0 - a2*0; // a1*N1 - a2*N2 <= c2 - c1 <= 0; //; // 4) If a1 <= 0 and a2 <= 0, then; // a1*N1 - a2*0 <= c2 - c1 <= a1*0 - a2*N2; // a1*N1 <= c2 - c1 <= -a2*N2; //; // return true if dependence disproved",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:69,Test,Testing,69,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,8,"['Test', 'test']","['Test', 'Testing', 'test', 'tests']"
Testability,"// take the LOG if necessary",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:12,LOG,LOG,12,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,1,['LOG'],['LOG']
Testability,"// tar 1.13 and earlier unconditionally look at the tar header interpreted; // as an 'oldgnu_header', which has an 'isextended' byte at offset 482 in the; // header, corresponding to offset 137 in the prefix. That's the version of; // tar in gnuwin, so only use 137 of the 155 bytes in the prefix. This means; // we'll need a pax header after 237 bytes of path instead of after 255,; // but in return paths up to 237 bytes work with gnuwin, instead of just; // 137 bytes of directory + 100 bytes of basename previously.; // (tar-1.13 also doesn't support pax headers, but in practice all paths in; // llvm's test suite are short enough for that to not matter.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp:608,test,test,608,interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp,1,['test'],['test']
Testability,"// template <class V>; // double testDotProduct( const std::vector<V *> & dataV) {; // //unsigned int n = std::min(n2Loop, dataV.size() );; // double tot = 0;; // V v0 = *(dataV[0]);; // Timer t;; // for (unsigned int i = 0; i < nGen-1; ++i) {; // V & v1 = *(dataV[i]);; // tot += v0.Dot(v1);; // }; // return tot;; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:33,test,testDotProduct,33,test/stressMathCore.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx,1,['test'],['testDotProduct']
Testability,"// template <class V>; // int testAnalysis( const std::vector<V *> & dataV, TStopwatch & tim, double& t, std::string s) {; // int nsel = 0;; // int nsel2 = 0;; // double deltaMax = 1.;; // double ptMin = 1.;; // double etaMax = 3.;; // unsigned int n = std::min(n2Loop, dataV.size() );; // tim.Start();; // for (unsigned int i = 0; i < n; ++i) {; // V & v1 = *(dataV[i]);; // if (cutPtEta(v1,ptMin, etaMax) ) {; // double delta;; // for (unsigned int j = i +1; j < n; ++j) {; // V & v2 = *(dataV[j]);; // delta = VectorUtil::DeltaR(v1,v2);; // if (delta < deltaMax) {; // V v3 = v1 + v2;; // nsel++;; // if ( cutPtEtaAndMass(v3)); // nsel2++;; // }; // }; // }; // }; // tim.Stop();; // print(tim,s);; // //std::cout << nsel << ""\n"";; // t += tim.RealTime();; // return nsel2;; // }; // template <class V>; // int testAnalysis2( const std::vector<V *> & dataV, TStopwatch & tim, double& t, std::string s) {; // int nsel = 0;; // double ptMin = 1.;; // double etaMax = 3.;; // unsigned int n = std::min(n2Loop, dataV.size() );; // tim.Start();; // //seal::SealTimer t(tim.name(), true, std::cout);; // for (unsigned int i = 0; i < n; ++i) {; // V & v1 = *(dataV[i]);; // if ( cutPtEta(v1, ptMin, etaMax) ) {; // for (unsigned int j = i +1; j < n; ++j) {; // V & v2 = *(dataV[j]);; // if ( VectorUtil::DeltaR(v1,v2) < 0.5) nsel++;; // }; // }; // }; // tim.Stop();; // print(tim,s);; // t += tim.RealTime();; // return nsel;; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/stress2D.cxx:30,test,testAnalysis,30,math/genvector/test/stress2D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/stress2D.cxx,1,['test'],['testAnalysis']
Testability,"// template <typename Architecture>; // auto printTensor1(const std::vector<typename Architecture::Matrix_t> &A, const std::string name = ""matrix""); // -> void; // {; // std::cout << name << ""\n"";; // for (size_t l = 0; l < A.size(); ++l) {; // for (size_t i = 0; i < A[l].GetNrows(); ++i) {; // for (size_t j = 0; j < A[l].GetNcols(); ++j) {; // std::cout << A[l](i, j) << "" "";; // }; // std::cout << ""\n"";; // }; // std::cout << ""********\n"";; // }; // }; // template <typename Architecture>; // auto printMatrix1(const typename Architecture::Matrix_t &A, const std::string name = ""matrix""); // -> void; // {; // std::cout << name << ""\n"";; // for (size_t i = 0; i < A.GetNrows(); ++i) {; // for (size_t j = 0; j < A.GetNcols(); ++j) {; // std::cout << A(i, j) << "" "";; // }; // std::cout << ""\n"";; // }; // std::cout << ""********\n"";; // }; /*! Generate a DeepNet, test forward pass */; //______________________________________________________________________________",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/TestRecurrentForwardPass.h:868,test,test,868,tmva/tmva/test/DNN/RNN/TestRecurrentForwardPass.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/TestRecurrentForwardPass.h,1,['test'],['test']
Testability,"// tensor test; //ntests = 1;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmetic.h:10,test,test,10,tmva/tmva/test/DNN/TestMatrixArithmetic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestMatrixArithmetic.h,1,['test'],['test']
Testability,"// terminate ROOT logo splash thread",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/src/TGWin32.cxx:18,log,logo,18,graf2d/win32gdk/src/TGWin32.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/src/TGWin32.cxx,1,['log'],['logo']
Testability,"// termination test:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/quadp/src/TGondzioSolver.cxx:15,test,test,15,math/quadp/src/TGondzioSolver.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/quadp/src/TGondzioSolver.cxx,2,['test'],['test']
Testability,"// test",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Results.h:3,test,test,3,tmva/tmva/inc/TMVA/Results.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Results.h,1,['test'],['test']
Testability,// test & propagate remaining RDIVs,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:3,test,test,3,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,1,['test'],['test']
Testability,"// test (x+1)^4 = 0",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testPolynomialRoots.cxx:3,test,test,3,math/mathmore/test/testPolynomialRoots.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testPolynomialRoots.cxx,1,['test'],['test']
Testability,"// test 1D functors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx:3,test,test,3,math/mathmore/test/testFunctor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx,1,['test'],['test']
Testability,"// test 1D histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,test,test,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['test'],['test']
Testability,// test 3 face normals from the aabb,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:3,test,test,3,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['test'],['test']
Testability,"// test 5x^4 + 4x^3 + 3x^2 + 2x + 1",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testPolynomialRoots.cxx:3,test,test,3,math/mathmore/test/testPolynomialRoots.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testPolynomialRoots.cxx,1,['test'],['test']
Testability,"// test 60% of histogram",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_THBinIterator.cxx:3,test,test,3,hist/hist/test/test_THBinIterator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_THBinIterator.cxx,2,['test'],['test']
Testability,"// test Boost",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx:3,test,test,3,test/stressVector.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx,1,['test'],['test']
Testability,"// test Boost (2)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx:3,test,test,3,test/stressVector.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx,2,['test'],['test']
Testability,"// test BoostX",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx:3,test,test,3,test/stressVector.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx,1,['test'],['test']
Testability,"// test CLHEP Kalman",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/stressKalman.cxx:3,test,test,3,math/smatrix/test/stressKalman.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/stressKalman.cxx,2,['test'],['test']
Testability,"// test ClusterD (cotaining a vector of points)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/testVectorIO.cxx:3,test,test,3,math/genvector/test/testVectorIO.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/testVectorIO.cxx,1,['test'],['test']
Testability,"// test Delauney interpolation on edges of a triangle; // some of these tests failed when using the older version; // see issue #",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testDelaunay2D.cxx:3,test,test,3,math/mathcore/test/testDelaunay2D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testDelaunay2D.cxx,2,['test'],"['test', 'tests']"
Testability,"// test Double32",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testVector34.cxx:3,test,test,3,math/mathcore/test/stress/testVector34.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testVector34.cxx,1,['test'],['test']
Testability,"// test Eval for TF1",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,test,test,3,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['test'],['test']
Testability,"// test Eval for TF2",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,test,test,3,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['test'],['test']
Testability,"// test Eval for TF3",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,test,test,3,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['test'],['test']
Testability,"// test Get/SetComponents",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/testGenVector.cxx:3,test,test,3,math/genvector/test/testGenVector.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/testGenVector.cxx,1,['test'],['test']
Testability,"// test GetExpFormula",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,test,test,3,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,4,['test'],['test']
Testability,"// test Hessian",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/testADMinim.cxx:3,test,test,3,math/minuit2/test/testADMinim.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/testADMinim.cxx,1,['test'],['test']
Testability,"// test I/O for parameter ordering",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,test,test,3,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['test'],['test']
Testability,"// test IsAscii",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/tstring.cxx:3,test,test,3,test/tstring.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tstring.cxx,1,['test'],['test']
Testability,"// test IsInUse() function to create automatically temporaries",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:3,test,test,3,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,1,['test'],['test']
Testability,"// test IsNull",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/tstring.cxx:3,test,test,3,test/tstring.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tstring.cxx,1,['test'],['test']
Testability,"// test LR",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/testGenVector.cxx:3,test,test,3,math/genvector/test/testGenVector.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/testGenVector.cxx,1,['test'],['test']
Testability,"// test Lower limits",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnSim/DemoGaussSim.cxx:3,test,test,3,math/minuit2/test/MnSim/DemoGaussSim.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnSim/DemoGaussSim.cxx,2,['test'],['test']
Testability,"// test Minos (use the default up of 1)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testMinim.cxx:3,test,test,3,math/mathcore/test/fit/testMinim.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testMinim.cxx,3,['test'],['test']
Testability,"// test Minos for one Parameter",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnTutorial/Quad1FMain.cxx:3,test,test,3,math/minuit2/test/MnTutorial/Quad1FMain.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnTutorial/Quad1FMain.cxx,1,['test'],['test']
Testability,"// test Poisson bin likelihood fit (no gradient)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:3,test,test,3,math/mathcore/test/fit/testFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx,1,['test'],['test']
Testability,"// test ROOT finder algorithm function without derivative",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.cxx:3,test,test,3,math/mathmore/test/StatFunction.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.cxx,2,['test'],['test']
Testability,"// test Resize and Strip",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/tstring.cxx:3,test,test,3,test/tstring.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tstring.cxx,1,['test'],['test']
Testability,"// test RooHistFunc",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx:3,test,test,3,roofit/roofitcore/test/testRooDataHist.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx,2,['test'],['test']
Testability,"// test RooHistPdf",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx:3,test,test,3,roofit/roofitcore/test/testRooDataHist.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx,2,['test'],['test']
Testability,"// test Rotations on Vectors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx:3,test,test,3,test/stressVector.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx,1,['test'],['test']
Testability,"// test STL interface; // float p[2] = {1,2};",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:3,test,test,3,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,1,['test'],['test']
Testability,"// test Sub",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:3,test,test,3,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,1,['test'],['test']
Testability,"// test TH1::FindFirstBinAbove abd TH1::FindLastBinAbove",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_TH1_FindFirstBinAbove.cxx:3,test,test,3,hist/hist/test/test_TH1_FindFirstBinAbove.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_TH1_FindFirstBinAbove.cxx,1,['test'],['test']
Testability,"// test TH2Poly GetNumberOfBins",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_TH2Poly_GetNumberOfBins.cxx:3,test,test,3,hist/hist/test/test_TH2Poly_GetNumberOfBins.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_TH2Poly_GetNumberOfBins.cxx,1,['test'],['test']
Testability,"// test TH2Poly adding two histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_TH2Poly_Add.cxx:3,test,test,3,hist/hist/test/test_TH2Poly_Add.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_TH2Poly_Add.cxx,1,['test'],['test']
Testability,"// test TH2Poly setting and retrieving bin error ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_TH2Poly_BinError.cxx:3,test,test,3,hist/hist/test/test_TH2Poly_BinError.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_TH2Poly_BinError.cxx,1,['test'],['test']
Testability,"// test TH3::Project3D name",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_Project3D_name.cxx:3,test,test,3,hist/hist/test/test_Project3D_name.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_Project3D_name.cxx,1,['test'],['test']
Testability,"// test TLorentzVector => ROOT::Math::PxPyPzEVector conversion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx:3,test,test,3,test/stressVector.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx,1,['test'],['test']
Testability,"// test TMultiGraph::GetHistogram in log scale",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_TMultiGraph_GetHistogram.cxx:3,test,test,3,hist/hist/test/test_TMultiGraph_GetHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_TMultiGraph_GetHistogram.cxx,2,"['log', 'test']","['log', 'test']"
Testability,"// test TUnuran Sampler class using t he DistSampler interface ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranSampler.cxx:3,test,test,3,math/unuran/test/unuranSampler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranSampler.cxx,1,['test'],['test']
Testability,"// test Trace",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:3,test,test,3,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,1,['test'],['test']
Testability,"// test TrackD",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/testVectorIO.cxx:3,test,test,3,math/genvector/test/testVectorIO.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/testVectorIO.cxx,1,['test'],['test']
Testability,"// test TrackD32",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/testVectorIO.cxx:3,test,test,3,math/genvector/test/testVectorIO.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/testVectorIO.cxx,1,['test'],['test']
Testability,"// test UNURAN with standard method",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranDiscrete.cxx:3,test,test,3,math/unuran/test/unuranDiscrete.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranDiscrete.cxx,2,['test'],['test']
Testability,"// test Upper limits",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnSim/DemoGaussSim.cxx:3,test,test,3,math/minuit2/test/MnSim/DemoGaussSim.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnSim/DemoGaussSim.cxx,2,['test'],['test']
Testability,"// test a discrete distribution",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testDistSampler.cxx:3,test,test,3,math/mathcore/test/testDistSampler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testDistSampler.cxx,1,['test'],['test']
Testability,"// test a full RNN with 5 time steps and different signal/backgrund time dependent shapes; // batchsize, statesize , inputsize, seed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/TestFullGRUCpu.cxx:3,test,test,3,tmva/tmva/test/DNN/GRU/TestFullGRUCpu.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/GRU/TestFullGRUCpu.cxx,6,['test'],['test']
Testability,"// test adding an extra fill",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,test,test,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['test'],['test']
Testability,"// test adding extra fills with weights",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,test,test,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['test'],['test']
Testability,"// test addition:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx:3,test,test,3,test/TestVectors.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx,1,['test'],['test']
Testability,"// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb; // make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation; // axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:3,test,test,3,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,4,['test'],"['test', 'testing']"
Testability,"// test all functor constructs",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx:3,test,test,3,math/mathmore/test/testFunctor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx,2,['test'],['test']
Testability,"// test all unuran methods",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranDistr.cxx:3,test,test,3,math/unuran/test/unuranDistr.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranDistr.cxx,1,['test'],['test']
Testability,"// test also case that labels are not ordered",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,test,test,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['test'],['test']
Testability,"// test also default constructors + usage of setters functions",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tkde.cxx:3,test,test,3,hist/hist/test/test_tkde.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tkde.cxx,1,['test'],['test']
Testability,"// test also nested operators",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,test,test,3,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['test'],['test']
Testability,"// test also residual",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFinder.cxx:3,test,test,3,math/mathmore/src/GSLMultiRootFinder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFinder.cxx,1,['test'],['test']
Testability,"// test also setting a label in x axis",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,test,test,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['test'],['test']
Testability,"// test approximation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tf2.cxx:3,test,test,3,hist/hist/test/test_tf2.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tf2.cxx,4,['test'],['test']
Testability,"// test assignment",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:3,test,test,3,tmva/tmva/test/stressTMVA.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx,1,['test'],['test']
Testability,"// test assignment:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx:3,test,test,3,test/TestVectors.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx,1,['test'],['test']
Testability,"// test at position of saved bins",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tf1.cxx:3,test,test,3,hist/hist/test/test_tf1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tf1.cxx,2,['test'],['test']
Testability,"// test batch =4 (equal output size)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx:3,test,test,3,tmva/sofie/test/TestSofieModels.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx,1,['test'],['test']
Testability,"// test binned likelihood gradient",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:3,test,test,3,math/mathcore/test/fit/testFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx,1,['test'],['test']
Testability,"// test boundaries",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tf2.cxx:3,test,test,3,hist/hist/test/test_tf2.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tf2.cxx,4,['test'],['test']
Testability,"// test bounds for <, *, *, ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:3,test,test,3,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,1,['test'],['test']
Testability,"// test bounds for >, *, *, ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:3,test,test,3,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,1,['test'],['test']
Testability,"// test by removing vectorization",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaVecTests.h:3,test,test,3,test/TFormulaVecTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaVecTests.h,1,['test'],['test']
Testability,"// test by vectorizing afterwards calling SetVectorized",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaVecTests.h:3,test,test,3,test/TFormulaVecTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaVecTests.h,1,['test'],['test']
Testability,"// test case when eta is large",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/coordinates3D.cxx:3,test,test,3,math/genvector/test/coordinates3D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/coordinates3D.cxx,1,['test'],['test']
Testability,"// test cases with zero mass; // tick should be p /sqrt(eps) ~ 4 /sqrt(eps); // take a factor 1.5 in ticks to be conservative",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/coordinates4D.cxx:3,test,test,3,math/genvector/test/coordinates4D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/coordinates4D.cxx,1,['test'],['test']
Testability,"// test cdf at value f",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:3,test,test,3,test/stressMathCore.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx,1,['test'],['test']
Testability,"// test changing all the time the mu; // use re-init for a fast re-initialization",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranDiscrete.cxx:3,test,test,3,math/unuran/test/unuranDiscrete.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranDiscrete.cxx,2,['test'],['test']
Testability,"// test chebyshev",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,test,test,3,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['test'],['test']
Testability,"// test cholesky inversion and solving",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:3,test,test,3,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,1,['test'],['test']
Testability,"// test classes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_THBinIterator.cxx:3,test,test,3,hist/hist/test/test_THBinIterator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_THBinIterator.cxx,1,['test'],['test']
Testability,"// test comparisons",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/tstring.cxx:3,test,test,3,test/tstring.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tstring.cxx,1,['test'],['test']
Testability,"// test composition of functions",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,test,test,3,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['test'],['test']
Testability,"// test composition of two functions",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,test,test,3,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['test'],['test']
Testability,"// test construction from identity",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:3,test,test,3,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,1,['test'],['test']
Testability,"// test constructor",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnTutorial/Quad12FMain.cxx:3,test,test,3,math/minuit2/test/MnTutorial/Quad12FMain.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnTutorial/Quad12FMain.cxx,4,['test'],['test']
Testability,"// test constructor from subVectors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:3,test,test,3,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,1,['test'],['test']
Testability,"// test constructors:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx:3,test,test,3,test/TestVectors.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TestVectors.cxx,2,['test'],['test']
Testability,"// test conv1d",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx:3,test,test,3,tmva/sofie/test/TestSofieModels.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx,1,['test'],['test']
Testability,"// test conv3d",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx:3,test,test,3,tmva/sofie/test/TestSofieModels.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx,1,['test'],['test']
Testability,"// test conversion to scalar for size 1 matrix and vectors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:3,test,test,3,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,1,['test'],['test']
Testability,"// test copy consttructor in case of lazy initialization (i.e. when reading from a file)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,test,test,3,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['test'],['test']
Testability,"// test copying",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_TH2Poly_BinError.cxx:3,test,test,3,hist/hist/test/test_TH2Poly_BinError.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_TH2Poly_BinError.cxx,1,['test'],['test']
Testability,"// test copying and deleting of linear functions",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,test,test,3,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['test'],['test']
Testability,// test coupled subscript groups,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:3,test,test,3,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,2,['test'],['test']
Testability,"// test creating two identical functions; // and reading back from a file; // ROOT-9467; // The bug woruld need to exit ROOT and when the file already esists",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,test,test,3,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['test'],['test']
Testability,"// test cumulative function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:3,test,test,3,test/stressMathCore.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx,1,['test'],['test']
Testability,"// test cumulative function; // test cdf at value f",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/StatFunction.h:3,test,test,3,math/mathcore/test/stress/StatFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/StatFunction.h,2,['test'],['test']
Testability,"// test dealing with whitespace in parameter names; // inlcuding cloning tests (see ROOT-8971)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,test,test,3,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,2,['test'],"['test', 'tests']"
Testability,"// test derivative from cdf to pdf function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.h:3,test,test,3,math/mathmore/test/StatFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.h,2,['test'],['test']
Testability,"// test detailed printing of function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,test,test,3,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['test'],['test']
Testability,"// test dircectly calling function object",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx:3,test,test,3,math/mathmore/test/testFunctor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx,1,['test'],['test']
Testability,"// test directly calling the function object",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx:3,test,test,3,math/mathmore/test/testFunctor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx,1,['test'],['test']
Testability,"// test directly project3dprofile",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,test,test,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['test'],['test']
Testability,"// test element-wise multiplication",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:3,test,test,3,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,1,['test'],['test']
Testability,"// test error; //typedef double ( * FreeFunc ) ( double);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testGSLIntegration.cxx:3,test,test,3,math/mathmore/test/testGSLIntegration.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testGSLIntegration.cxx,1,['test'],['test']
Testability,"// test event if it descends the tree at this node to the left",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTreeNode.h:3,test,test,3,tmva/tmva/inc/TMVA/BinarySearchTreeNode.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTreeNode.h,4,['test'],['test']
Testability,"// test event if it descends the tree at this node to the right",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTreeNode.h:3,test,test,3,tmva/tmva/inc/TMVA/BinarySearchTreeNode.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTreeNode.h,3,['test'],['test']
Testability,"// test event if it is equal to the event that ""makes the node"" (just for the ""search tree""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTreeNode.h:3,test,test,3,tmva/tmva/inc/TMVA/BinarySearchTreeNode.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTreeNode.h,1,['test'],['test']
Testability,"// test event if it is equal to the event that ""makes the node"" (just for the ""search tree""; // return pointer to the left/right daughter or parent node",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Node.h:3,test,test,3,tmva/tmva/inc/TMVA/Node.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Node.h,1,['test'],['test']
Testability,"// test event if i{ descends the tree at this node to the right",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Node.h:3,test,test,3,tmva/tmva/inc/TMVA/Node.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Node.h,1,['test'],['test']
Testability,"// test exact position",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tf2.cxx:3,test,test,3,hist/hist/test/test_tf2.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tf2.cxx,4,['test'],['test']
Testability,"// test failed for k=5",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:3,test,test,3,test/stressMathMore.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx,1,['test'],['test']
Testability,"// test file access",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/tstring.cxx:3,test,test,3,test/tstring.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tstring.cxx,1,['test'],['test']
Testability,"// test find bin",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testkdTreeBinning.cxx:3,test,test,3,math/mathcore/test/testkdTreeBinning.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testkdTreeBinning.cxx,1,['test'],['test']
Testability,"// test finding Roots of polynomials",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testPolynomialRoots.cxx:3,test,test,3,math/mathmore/test/testPolynomialRoots.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testPolynomialRoots.cxx,1,['test'],['test']
Testability,"// test first by vectorizing in the constructor",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaVecTests.h:3,test,test,3,test/TFormulaVecTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaVecTests.h,1,['test'],['test']
Testability,"// test first in a simple network with linear activations",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagation.cxx:3,test,test,3,tmva/tmva/test/DNN/CNN/TestConvBackpropagation.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagation.cxx,3,['test'],['test']
Testability,"// test first nentries",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,test,test,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,3,['test'],['test']
Testability,"// test first the time",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranDiscrete.cxx:3,test,test,3,math/unuran/test/unuranDiscrete.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranDiscrete.cxx,7,['test'],['test']
Testability,"// test first with getrandom",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranMulti2D.cxx:3,test,test,3,math/unuran/test/unuranMulti2D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranMulti2D.cxx,1,['test'],['test']
Testability,"// test first with getrandom; // need to have a larger value to get good quality",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranMultiDim.cxx:3,test,test,3,math/unuran/test/unuranMultiDim.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/test/unuranMultiDim.cxx,1,['test'],['test']
Testability,"// test fit with many dimension",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/testNdimFit.cxx:3,test,test,3,math/minuit2/test/testNdimFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/testNdimFit.cxx,2,['test'],['test']
Testability,"// test fitting using TGraph2D ( chi2 will be larger since errors are 1); // should test with a TGraph2DErrors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:3,test,test,3,math/mathcore/test/fit/testFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx,2,['test'],['test']
Testability,"// test fitting using also RooFit and new Fitter",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooFit.cxx:3,test,test,3,roofit/roofit/test/testRooFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooFit.cxx,1,['test'],['test']
Testability,"// test for a estimator function which optimizes on the whole background-rejection signal-efficiency plot; // get the backg-reject. and sig-eff for the parameters given to this function; // effS, effB; // get best background rejection for given signal efficiency",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:3,test,test,3,tmva/tmva/src/MethodCuts.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx,1,['test'],['test']
Testability,"// test for associated function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:3,test,test,3,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,1,['test'],['test']
Testability,"// test for bug 10815; // mixing user previous defined functions (available in gROOT); // and pre-defined functions",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,test,test,3,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['test'],['test']
Testability,"// test for bug 8105",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,test,test,3,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['test'],['test']
Testability,"// test for error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/API.cxx:3,test,test,3,bindings/pyroot/cppyy/CPyCppyy/src/API.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/API.cxx,2,['test'],['test']
Testability,"// test for error bars or option E",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:3,test,test,3,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,1,['test'],['test']
Testability,"// test for inserting correcting polynomials (bug ROOT-8496)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,test,test,3,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['test'],['test']
Testability,// test for intersections with geometry,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:3,test,test,3,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,3,['test'],['test']
Testability,"// test for large eta values (which was giving inf before Jun 07)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/coordinates4D.cxx:3,test,test,3,math/genvector/test/coordinates4D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/coordinates4D.cxx,1,['test'],['test']
Testability,"// test for missing parameters (bug ROOT-8182)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,test,test,3,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['test'],['test']
Testability,"// test for mixed dim functions",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,test,test,3,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['test'],['test']
Testability,"// test for similar pre-defined functions",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,test,test,3,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['test'],['test']
Testability,"// test from 2 function objects",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx:3,test,test,3,math/mathmore/test/testFunctor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx,2,['test'],['test']
Testability,"// test from a free function pointer",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx:3,test,test,3,math/mathmore/test/testFunctor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx,1,['test'],['test']
Testability,"// test from a member function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx:3,test,test,3,math/mathmore/test/testFunctor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx,1,['test'],['test']
Testability,"// test from function object",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx:3,test,test,3,math/mathmore/test/testFunctor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx,2,['test'],['test']
Testability,"// test from member function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx:3,test,test,3,math/mathmore/test/testFunctor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx,1,['test'],['test']
Testability,"// test gamma cdf using Brent",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx:3,test,test,3,math/mathcore/test/testRootFinder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx,1,['test'],['test']
Testability,"// test gamma cdf using GSL Brent",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx:3,test,test,3,math/mathcore/test/testRootFinder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx,2,['test'],['test']
Testability,"// test gamma cdf using TF1 ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx:3,test,test,3,math/mathcore/test/testRootFinder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx,1,['test'],['test']
Testability,"// test gaussian",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testDistSampler.cxx:3,test,test,3,math/mathcore/test/testDistSampler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testDistSampler.cxx,1,['test'],['test']
Testability,"// test global matrix function (element-wise operations)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:3,test,test,3,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,1,['test'],['test']
Testability,"// test grad functor from an object providing eval and deriv.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx:3,test,test,3,math/mathmore/test/testFunctor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx,1,['test'],['test']
Testability,"// test grad functor from object and member functions",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx:3,test,test,3,math/mathmore/test/testFunctor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx,2,['test'],['test']
Testability,"// test graph fit (errors are 1) do a re-normalization",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:3,test,test,3,math/mathcore/test/fit/testFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx,1,['test'],['test']
Testability,"// test grapherrors fit",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:3,test,test,3,math/mathcore/test/fit/testFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx,1,['test'],['test']
Testability,"// test hexadecimal numbers",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,test,test,3,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['test'],['test']
Testability,"// test histogram buffer",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,test,test,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['test'],['test']
Testability,"// test histogram buffer with weights",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:3,test,test,3,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['test'],['test']
Testability,"// test if enough events are available",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:3,test,test,3,tmva/tmva/src/DataSetFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx,1,['test'],['test']
Testability,"// test if error bars are not outside the limits; // otherwise they are truncated",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:3,test,test,3,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,1,['test'],['test']
Testability,"// test if it is a step palette",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/TASPaletteEditor.cxx:3,test,test,3,graf2d/asimage/src/TASPaletteEditor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/TASPaletteEditor.cxx,1,['test'],['test']
Testability,"// test if result is OK",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testSampleQuantiles.cxx:3,test,test,3,math/mathcore/test/testSampleQuantiles.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testSampleQuantiles.cxx,1,['test'],['test']
Testability,"// test if sampler is initialized; // trying to generate one event (for this cannot be const)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/DistSampler.cxx:3,test,test,3,math/mathcore/src/DistSampler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/DistSampler.cxx,1,['test'],['test']
Testability,"// test if the marker is on the frame limits. If ""Yes"", the; // marker will not be drawn and the error bars will be readjusted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:3,test,test,3,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,1,['test'],['test']
Testability,"// test if the midpoint is sufficiently close to a straight line across this interval",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx:3,test,test,3,roofit/roofitcore/src/RooCurve.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx,1,['test'],['test']
Testability,"// test if two rules are equal",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Rule.h:3,test,test,3,tmva/tmva/inc/TMVA/Rule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Rule.h,1,['test'],['test']
Testability,"// test image saving with web browser, chrome or firefox are required; // c1->SaveAs(""triangle.png"");; // c1->SaveAs(""triangle.pdf"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/webcanv/triangle.cxx:3,test,test,3,tutorials/webcanv/triangle.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/webcanv/triangle.cxx,1,['test'],['test']
Testability,"// test in a more complex network",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagation.cxx:3,test,test,3,tmva/tmva/test/DNN/CNN/TestConvBackpropagation.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/TestConvBackpropagation.cxx,3,['test'],['test']
Testability,"// test integral",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.cxx:3,test,test,3,math/mathmore/test/StatFunction.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.cxx,1,['test'],['test']
Testability,"// test integral likelihood",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:3,test,test,3,math/mathcore/test/fit/testFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx,1,['test'],['test']
Testability,"// test integral of function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:3,test,test,3,test/stressMathMore.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx,1,['test'],['test']
Testability,"// test integral with cdf function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.h:3,test,test,3,math/mathmore/test/StatFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.h,2,['test'],['test']
Testability,"// test intergal. derivative and inverse(Rootfinder)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx:3,test,test,3,test/stressMathMore.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathMore.cxx,2,['test'],['test']
Testability,"// test inverison of large matrix (double)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:3,test,test,3,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,1,['test'],['test']
Testability,"// test inversion",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:3,test,test,3,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,1,['test'],['test']
Testability,"// test inversion of large matrices (float)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:3,test,test,3,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,1,['test'],['test']
Testability,"// test io of double 32 for vector 1",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testGenVector.cxx:3,test,test,3,math/mathcore/test/stress/testGenVector.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testGenVector.cxx,2,['test'],['test']
Testability,"// test io vector 2",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testGenVector.cxx:3,test,test,3,math/mathcore/test/stress/testGenVector.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testGenVector.cxx,2,['test'],['test']
Testability,"// test iterating histogram bins and using the new THistRange and; // THBinIterator classes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_THBinIterator.cxx:3,test,test,3,hist/hist/test/test_THBinIterator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_THBinIterator.cxx,1,['test'],['test']
Testability,"// test linear approximation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tf1.cxx:3,test,test,3,hist/hist/test/test_tf1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tf1.cxx,2,['test'],['test']
Testability,"// test linear function used in fitting",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,test,test,3,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['test'],['test']
Testability,"// test log-parabola using TF1",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx:3,test,test,3,math/mathcore/test/testRootFinder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx,2,"['log', 'test']","['log-parabola', 'test']"
Testability,"// test matrices symmetric and positive defines",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testInversion.cxx:3,test,test,3,math/smatrix/test/testInversion.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testInversion.cxx,1,['test'],['test']
Testability,"// test matrix vector multiplication",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx:3,test,test,3,test/stressVector.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressVector.cxx,1,['test'],['test']
Testability,"// test max deviations from identity for m = imat * smat",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:3,test,test,3,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,1,['test'],['test']
Testability,"// test merge",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testTStatistic.cxx:3,test,test,3,math/mathcore/test/testTStatistic.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testTStatistic.cxx,1,['test'],['test']
Testability,"// test messages",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/res/RooFit/MultiProcess/Messenger_decl.h:3,test,test,3,roofit/multiprocess/res/RooFit/MultiProcess/Messenger_decl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/res/RooFit/MultiProcess/Messenger_decl.h,1,['test'],['test']
Testability,"// test methods",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/VectorTest.h:3,test,test,3,math/mathcore/test/stress/VectorTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/VectorTest.h,2,['test'],['test']
Testability,"// test mixed with a scalar",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:3,test,test,3,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,1,['test'],['test']
Testability,"// test mod operator; // one needs to convert always to integer because % works only for int",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,test,test,3,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['test'],['test']
Testability,"// test multi-dim formula (like new xyzgaus)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,test,test,3,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['test'],['test']
Testability,"// test multi-thread Snapshotting from many tasks per worker thread",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_snapshot.cxx:3,test,test,3,tree/dataframe/test/dataframe_snapshot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_snapshot.cxx,1,['test'],['test']
Testability,"// test nested expressions and conflict with sqrt",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,test,test,3,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['test'],['test']
Testability,"// test new bigaus pre-defined funcition",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:3,test,test,3,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['test'],['test']
Testability,"// test new perp functions",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/testGenVector.cxx:3,test,test,3,math/genvector/test/testGenVector.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/testGenVector.cxx,1,['test'],['test']
Testability,"// test non mutating inversions",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:3,test,test,3,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,1,['test'],['test']
Testability,"// test now matrices and vectors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:3,test,test,3,test/stressMathCore.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx,1,['test'],['test']
Testability,"// test now solving of linear system",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:3,test,test,3,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,1,['test'],['test']
Testability,"// test now with expression",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:3,test,test,3,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,3,['test'],['test']
Testability,"// test number of empty bins",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testQuasiRandom.cxx:3,test,test,3,math/mathmore/test/testQuasiRandom.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testQuasiRandom.cxx,1,['test'],['test']
Testability,"// test of SVEctor's or SMatrix",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/VectorTest.h:3,test,test,3,math/mathcore/test/stress/VectorTest.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/VectorTest.h,2,['test'],['test']
Testability,"// test of Svector of dim 3 or 4",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testVector34.cxx:3,test,test,3,math/mathcore/test/stress/testVector34.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testVector34.cxx,1,['test'],['test']
Testability,"// test of TSpline5 with non equidistant knots, one double knot,; // one triple knot, follows.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSpline.cxx:3,test,test,3,hist/hist/src/TSpline.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSpline.cxx,1,['test'],['test']
Testability,"// test of assign sym; // AssignSym::Evaluate(A, W * A * Transpose(W) );; // AssignSym::Evaluate(B, W * A * Transpose(W) );; // iret |= compare( A==B,true,""assignsym"");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx:3,test,test,3,math/smatrix/test/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/test/testSMatrix.cxx,1,['test'],['test']
Testability,"// test of generic SMatrix",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testSMatrix.cxx:3,test,test,3,math/mathcore/test/stress/testSMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testSMatrix.cxx,1,['test'],['test']
Testability,"// test of minimization using Automatic Differentiation provided by TFormula",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/testADMinim.cxx:3,test,test,3,math/minuit2/test/testADMinim.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/testADMinim.cxx,1,['test'],['test']
